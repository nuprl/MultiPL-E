language: ts
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tlet correct_bracketing\
    \ = true;\n\tfor (let i = 0; i < opening_brackets_count; i++) {\n\t\tif (closing_brackets_count\
    \ > i) {\n\t\t\tif (opening_brackets[i] != closing_brackets[i]) {\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn correct_bracketing;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptdnpf0gr.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptdnpf0gr.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ !== 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t} else {\n\
    \t\t\tif (stack.length !== 0 || bracket !== stack[stack.length - 1]) {\n\t\t\t\
    \treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.length === 0;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzda4ja8q.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzda4ja8q.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet open_brackets = brackets.split(\"\");\n\tlet closed_brackets:\
    \ string[] = [];\n\tfor (let i = 0; i < open_brackets.length; i++) {\n\t\tlet\
    \ open_bracket = open_brackets[i];\n\t\tif (open_bracket === \"<\") {\n\t\t\t\
    closed_brackets.push(\"</\" + open_bracket.substr(1) + \">\");\n\t\t} else {\n\
    \t\t\tclosed_brackets.push(\"</\" + open_bracket + \">\");\n\t\t}\n\t}\n\tlet\
    \ open_brackets_string = open_brackets.join(\"\");\n\tlet closed_brackets_string\
    \ = closed_brackets.join(\"\");\n\treturn open_brackets_string === closed_brackets_string;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0h_oqdi9.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0h_oqdi9.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else\
    \ if (bracket === \">\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\t\
    stack.pop();\n\t\t} else {\n\t\t\tif (stack.length !== 0) return false;\n\t\t\
    }\n\t}\n\treturn (stack.length === 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2n2fl323.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2n2fl323.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else\
    \ if (bracket === \">\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\t\
    stack.pop();\n\t\t} else {\n\t\t\tif (stack.length !== 0) return false;\n\t\t\
    }\n\t}\n\treturn (stack.length === 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv3v4mmum.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv3v4mmum.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/))\
    \ {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet\
    \ opening_bracket = opening_brackets.pop();\n\t\t\tclosing_brackets.push(opening_bracket);\n\
    \t\t\tstack.splice(opening_bracket, 1);\n\t\t} else if (bracket.match(/>/>/))\
    \ {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet\
    \ opening_bracket = opening_brackets.pop();\n\t\t\tclosing_brackets.push(opening_bracket);\n\
    \t\t\tstack.splice(opening_bracket, 1);\n\t\t\tstack.push(bracket);\n\t\t} else\
    \ if (bracket.match(/>/)) {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tlet opening_bracket = opening_brackets.pop();\n\t\t\tclosing_brackets.push(opening_bracket);\n\
    \t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/</)) {\n\t\t\tif (stack.length\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening_bracket = opening_brackets.pop();\n\
    \t\t\tclosing_brackets.push(opening_bracket);\n\t\t\tstack.push(bracket);\n\t\t\
    } else if (bracket.match(/</)) {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\tlet opening_bracket = opening_brackets.pop();\n\t\t\t\
    closing_brackets.push(opening_bracket);\n\t\t\tstack.push(bracket);\n\t\t} else\
    \ if (bracket.match(/>/>/)) {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\tlet opening_bracket = opening_brackets.pop();\n\t\t\t\
    closing_brackets.push(opening_bracket);\n\t\t\tstack.push(bracket);\n\t\t} else\
    \ if (bracket.match(/>/)) {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tlet opening_bracket = opening_brackets.pop();\n\t\t\tclosing_brackets.push(opening_bracket);\n\
    \t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/</)) {\n\t\t\tif (stack.length\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening_bracket = opening_brackets.pop();\n\
    \t\t\tclosing_brackets.push(opening_bracket\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qti80cy.ts(27,33): error TS1161: Unterminated regular
    expression literal.

    ../../../../../tmp/tmp4qti80cy.ts(28,4): error TS1005: '','' expected.

    ../../../../../tmp/tmp4qti80cy.ts(35,5): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmp4qti80cy.ts(56,33): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp4qti80cy.ts(57,4): error TS1005: '','' expected.

    ../../../../../tmp/tmp4qti80cy.ts(63,5): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmp4qti80cy.ts(76,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp4qti80cy.ts(76,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp4qti80cy.ts(96,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa81xy0pe.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa81xy0pe.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0co7p7dy.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0co7p7dy.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
    \ === \">\") {\n\t\t\tlet start = opening_brackets.pop();\n\t\t\tlet end = i;\n\
    \t\t\twhile (opening_brackets.length > 0) {\n\t\t\t\tlet opening = opening_brackets.pop();\n\
    \t\t\t\tif (opening < start) {\n\t\t\t\t\tend = opening;\n\t\t\t\t} else {\n\t\
    \t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tclosing_brackets.push(end);\n\t\t}\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening =\
    \ opening_brackets[i];\n\t\tlet end = closing_brackets[i];\n\t\tif (opening >\
    \ end) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvrh1i0ey.js:52:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvrh1i0ey.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\n\tbrackets.split('<').forEach((bracket: string) => {\n\t\t\
    let opening = bracket.substr(0, 1);\n\t\tlet closing = bracket.substr(1, 1);\n\
    \n\t\tif (opening === closing) {\n\t\t\topening_brackets.push(opening);\n\t\t\t\
    closing_brackets.push(closing);\n\t\t}\n\t});\n\n\treturn opening_brackets.length\
    \ === closing_brackets.length;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpotvt780s.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpotvt780s.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.match(/[<>]/)) {\n\t\t\tclosing_brackets.push(i);\n\t\t\
    }\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn\
    \ false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet\
    \ opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
    \t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpg_ggui1f.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg_ggui1f.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\
    \t\tstack.push(bracket);\n\t\t} else if (bracket.match(/<>/)) {\n\t\t\tif (stack.length\
    \ > 0 && stack[stack.length - 1] === bracket) {\n\t\t\t\tstack.pop();\n\t\t\t\
    } else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn stack.length === 0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8j9kudrh.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8j9kudrh.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set,\
    \ opening_bracket) => {\n\t\tset.add(opening_bracket);\n\t\treturn set;\n\t},\
    \ new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
    \ closing_bracket) => {\n\t\tset.add(closing_bracket);\n\t\treturn set;\n\t},\
    \ new Set<string>());\n\treturn opening_brackets_set.size == closing_brackets_set.size;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvrip5iuz.ts(17,9): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpvrip5iuz.ts(21,9): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet c = brackets[i];\n\t\tif (c == '<') {\n\t\t\tstack.push(c);\n\
    \t\t} else if (c == '>') {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tlet top = stack.pop();\n\t\t\tif (top != c) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (stack.length != 0) {\n\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcrd93van.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcrd93van.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf50qcya_.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf50qcya_.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length > 0) {\n\t\t\t\tlet last = stack[stack.length - 1];\n\t\t\t\t\
    if (last === \"<\") {\n\t\t\t\t\tstack.pop();\n\t\t\t\t} else {\n\t\t\t\t\tstack.push(bracket);\n\
    \t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstack.push(bracket);\n\t\t\t}\n\t\t} else if\
    \ (bracket === \">\") {\n\t\t\tif (stack.length > 0) {\n\t\t\t\tlet last = stack[stack.length\
    \ - 1];\n\t\t\t\tif (last === \">\") {\n\t\t\t\t\tstack.pop();\n\t\t\t\t} else\
    \ {\n\t\t\t\t\tstack.push(bracket);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstack.push(bracket);\n\
    \t\t\t}\n\t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\treturn stack.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfy_0k2v2.js:52:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfy_0k2v2.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\
    \t\tif (stack.length && stack[stack.length - 1] === bracket) {\n\t\t\t\tstack.pop();\n\
    \t\t\t} else {\n\t\t\t\tstack.push(bracket);\n\t\t\t}\n\t\t} else {\n\t\t\tif\
    \ (stack.length && stack[stack.length - 1] === bracket) {\n\t\t\t\tstack.pop();\n\
    \t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn !stack.length;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbpyf8v1h.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbpyf8v1h.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet c = brackets[i];\n\t\tif (c == '<') {\n\t\t\tstack.push(c);\n\
    \t\t} else if (c == '>') {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tlet top = stack.pop();\n\t\t\tif (top != c) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn stack.length == 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1xpr5rkc.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1xpr5rkc.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwqzpjs8w.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwqzpjs8w.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length:\
    \ number = opening_brackets.length;\n\tlet closing_brackets_length: number = closing_brackets.length;\n\
    \tlet i: number;\n\tlet j: number;\n\tlet opening_bracket: string;\n\tlet closing_bracket:\
    \ string;\n\tlet opening_brackets_set: Set<string>;\n\tlet closing_brackets_set:\
    \ Set<string>;\n\tlet opening_brackets_set_length: number;\n\tlet closing_brackets_set_length:\
    \ number;\n\tlet opening_brackets_set_length_set: Set<number>;\n\tlet closing_brackets_set_length_set:\
    \ Set<number>;\n\tlet opening_brackets_set_length_min: number;\n\tlet closing_brackets_set_length_min:\
    \ number;\n\tlet opening_brackets_set_length_max: number;\n\tlet closing_brackets_set_length_max:\
    \ number;\n\tlet opening_brackets_set_length_min_inclusive: boolean;\n\tlet closing_brackets_set_length_min_inclusive:\
    \ boolean;\n\tlet opening_brackets_set_length_max_exclusive: boolean;\n\tlet closing_brackets_set_length_max_exclusive:\
    \ boolean;\n\tlet opening_brackets_set_length_min_inclusive_inclusive: boolean;\n\
    \tlet closing_brackets_set_length_min_inclusive_inclusive: boolean;\n\tlet opening_brackets_set_length_max_exclusive_inclusive:\
    \ boolean;\n\tlet closing_brackets_set_length_max_exclusive_inclusive: boolean;\n\
    \tlet opening_brackets_set_length_min_inclusive_exclusive: boolean;\n\tlet closing_brackets_set_length_min_inclusive_exclusive:\
    \ boolean;\n\tlet opening_brackets_set_length_max_inclusive: boolean;\n\tlet closing_brackets_set_length_max_inclusive:\
    \ boolean;\n\tlet opening_brackets_set_length_min_inclusive_inclusive_inclusive:\
    \ boolean;\n\tlet closing_brackets_set_length_min_inclusive_inclusive_inclusive:\
    \ boolean;\n\tlet opening_brackets_set_length_max_exclusive_inclusive_inclusive:\
    \ boolean;\n\tlet closing_brackets_set_length_max_exclusive_inclusive_inclusive:\
    \ boolean;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqvb1k22n.ts(66,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\
    \t\tstack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/[<>]/))\
    \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\twhile (stack.length > 0) {\n\
    \t\tlet opening_bracket = opening_brackets.pop();\n\t\tlet closing_bracket = closing_brackets.pop();\n\
    \t\tif (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet\
    \ opening_brackets_string = stack.slice(0, opening_bracket).join('');\n\t\tlet\
    \ closing_brackets_string = stack.slice(opening_bracket, closing_bracket).join('');\n\
    \t\tif (opening_brackets_string !== closing_brackets_string) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmdmwjaik.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmdmwjaik.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(i);\n\
    \t\t}\n\t\telse if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(i);\n\
    \t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t\tlet\
    \ opening_brackets_length = opening_brackets.length - 1;\n\t\tlet closing_brackets_length\
    \ = closing_brackets.length - 1;\n\t\tlet opening_brackets_index = opening_bracket;\n\
    \t\tlet closing_brackets_index = closing_bracket;\n\t\twhile (opening_brackets_index\
    \ >= 0) {\n\t\t\tlet opening_brackets_index_next = opening_brackets_index + 1;\n\
    \t\t\tif (opening_brackets_index_next >= opening_brackets_length) {\n\t\t\t\t\
    opening_brackets_index = opening_brackets_index - 1;\n\t\t\t}\n\t\t\telse {\n\t\
    \t\t\tlet opening_brackets_next_bracket = opening_brackets[opening_brackets_index];\n\
    \t\t\t\tif (opening_brackets_next_bracket === '>') {\n\t\t\t\t\topening_brackets_index\
    \ = opening_brackets_index_next;\n\t\t\t\t}\n\t\t\t\telse if (opening_brackets_next_bracket\
    \ === '<') {\n\t\t\t\t\topening_brackets_index = opening_brackets_index_next;\n\
    \t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\topening_brackets_index = opening_brackets_index_next;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twhile (closing_brackets_index >= 0) {\n\t\t\tlet\
    \ closing_brackets_index_next = closing_brackets_index + 1;\n\t\t\tif (closing_brackets_index_next\
    \ >= closing_brackets_length) {\n\t\t\t\tclosing_brackets_index = closing_brackets_index\
    \ - 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet closing_brackets_next_bracket = closing_brackets[closing_brackets_index];\n\
    \t\t\t\tif (closing_brackets_next_bracket === '>') {\n\t\t\t\t\tclosing_brackets_index\
    \ = closing_brackets_index_next;\n\t\t\t\t}\n\t\t\t\telse if (closing_b\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpldpt3fjd.ts(62,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpldpt3fjd.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738769
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.charAt(0) == '<') {\n\
    \t\t\topening_brackets.push(stack.push(bracket) - 1);\n\t\t} else if (bracket.charAt(0)\
    \ == '>') {\n\t\t\tclosing_brackets.push(stack.pop() + 1);\n\t\t}\n\t}\n\twhile\
    \ (stack.length > 0) {\n\t\tlet opening = stack.pop();\n\t\tlet closing = stack.pop();\n\
    \t\tif (opening > closing) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (let i =\
    \ 0; i < opening_brackets.length; ++i) {\n\t\tlet opening = opening_brackets[i];\n\
    \t\tlet closing = closing_brackets[i];\n\t\tif (opening > closing) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaeqmszbx.ts(20,26): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    '
  timestamp: 1659738769
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tlet closing_brackets: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.startsWith(\"<\") ||\
    \ bracket.startsWith(\">\")) {\n\t\t\tstack.push(bracket);\n\t\t\topening_brackets.push(bracket);\n\
    \t\t} else if (bracket.endsWith(\"<\") || bracket.endsWith(\">\")) {\n\t\t\tclosing_brackets.push(bracket);\n\
    \t\t\tif (stack.length > 0) {\n\t\t\t\tlet opening_bracket = stack.pop();\n\t\t\
    \t\tlet closing_bracket = closing_brackets[closing_brackets.length - 1];\n\t\t\
    \t\tif (opening_bracket === closing_bracket) {\n\t\t\t\t\topening_brackets.pop();\n\
    \t\t\t\t\tclosing_brackets.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn opening_brackets.length\
    \ === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpayt06a2w.ts(17,15): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmpayt06a2w.ts(17,42): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmpayt06a2w.ts(20,22): error TS2339: Property ''endsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmpayt06a2w.ts(20,47): error TS2339: Property ''endsWith''
    does not exist on type ''string''.

    '
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet c = brackets[i];\n\t\tif (c == '<') {\n\t\t\tif (stack.length\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top == '>') {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\
    \tstack.push('>');\n\t\t\t}\n\t\t} else if (c == '>') {\n\t\t\tif (stack.length\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top == '<') {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\
    \tstack.push('<');\n\t\t\t}\n\t\t} else {\n\t\t\tstack.push(c);\n\t\t}\n\t}\n\t\
    return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0dajpprl.js:48:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0dajpprl.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet c = brackets[i];\n\t\tif (c === \"<\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top !== \">\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\
    \t\t} else if (c === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length - 1];\n\t\t\tif (top !==\
    \ \"<\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.push(c);\n\t\t} else {\n\
    \t\t\tstack.push(c);\n\t\t}\n\t}\n\tif (stack.length > 0) {\n\t\treturn false;\n\
    \t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp255hw7yt.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp255hw7yt.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tfor (let i = 0; i <\
    \ opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptcmou17b.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptcmou17b.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket\
    \ > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(i);\n\
    \t\t}\n\t}\n\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\
    \treturn false;\n\t}\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\
    \t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
    \n\t\tif (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\n\t\
    \tlet opening_char = brackets[opening_bracket];\n\t\tlet closing_char = brackets[closing_bracket];\n\
    \n\t\tif (opening_char.charAt(0) === '<') {\n\t\t\topening_char = opening_char.substring(1);\n\
    \t\t}\n\n\t\tif (closing_char.charAt(0) === '>') {\n\t\t\tclosing_char = closing_char.substring(1);\n\
    \t\t}\n\n\t\tif (opening_char === closing_char) {\n\t\t\tcontinue;\n\t\t}\n\n\t\
    \treturn false;\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjh_hen21.js:55:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjh_hen21.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\
    \t\t\tif (stack.length > 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfgcm997_.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfgcm997_.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t}\n\t\telse if (bracket.match(/>/)) {\n\t\t\tclosing_brackets.push(i);\n\t\
    \t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (closing_bracket < opening_bracket) {\n\t\t\treturn false;\n\t\t}\n\t\tlet\
    \ opening_brackets_length = opening_brackets.length - 1;\n\t\tlet closing_brackets_length\
    \ = closing_brackets.length - 1;\n\t\tlet opening_brackets_index = opening_brackets_length\
    \ - i;\n\t\tlet closing_brackets_index = closing_brackets_length - i;\n\t\tlet\
    \ opening_brackets_value = opening_brackets[opening_brackets_index];\n\t\tlet\
    \ closing_brackets_value = closing_brackets[closing_brackets_index];\n\t\tif (opening_brackets_value\
    \ !== closing_brackets_value) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgae0v9sc.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgae0v9sc.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else\
    \ if (bracket === \">\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\t\
    stack.pop();\n\t\t} else {\n\t\t\tif (stack.length !== 0) return false;\n\t\t\
    }\n\t}\n\treturn (stack.length === 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv3v4mmum.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv3v4mmum.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\n\tbrackets.split('').forEach((char)\
    \ => {\n\t\tif (char === '<') {\n\t\t\tstack.push('>');\n\t\t\topening_brackets.push(stack.length\
    \ - 1);\n\t\t} else if (char === '>') {\n\t\t\topening_brackets.pop();\n\t\t\t\
    closing_brackets.push(stack.length - 1);\n\t\t} else if (char === '<') {\n\t\t\
    \tstack.push('>');\n\t\t\topening_brackets.push(stack.length - 1);\n\t\t} else\
    \ if (char === '>') {\n\t\t\topening_brackets.pop();\n\t\t\tclosing_brackets.pop();\n\
    \t\t}\n\t});\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet\
    \ opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
    \n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpz_7icl5q.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz_7icl5q.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set,\
    \ opening_bracket) => {\n\t\tset.add(opening_bracket);\n\t\treturn set;\n\t},\
    \ new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
    \ closing_bracket) => {\n\t\tset.add(closing_bracket);\n\t\treturn set;\n\t},\
    \ new Set<string>());\n\treturn opening_brackets_set.size === closing_brackets_set.size;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjyw0uka9.ts(17,9): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpjyw0uka9.ts(21,9): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket\
    \ > closing_bracket) {\n\t\t\tlet temp = opening_bracket;\n\t\t\topening_bracket\
    \ = closing_bracket;\n\t\t\tclosing_bracket = temp;\n\t\t}\n\t\tlet opening_char\
    \ = brackets[opening_bracket];\n\t\tlet closing_char = brackets[closing_bracket];\n\
    \t\tif (opening_char !== closing_char) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptmqguras.js:48:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptmqguras.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplydbc9jl.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplydbc9jl.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.includes(\"<\")) {\n\
    \t\t\tstack.push(bracket);\n\t\t\topening_brackets.push(0);\n\t\t} else if (bracket.includes(\"\
    >\")) {\n\t\t\tclosing_brackets.push(stack.length - 1);\n\t\t}\n\t}\n\tfor (let\
    \ i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket < closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuv5yam9k.ts(17,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpuv5yam9k.ts(20,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    opening_brackets.push(i);\n\t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\
    \t\t} else if (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else\
    \ if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t} else if (bracket\
    \ === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket === \"\
    >\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\
    \tcontinue;\n\t\t}\n\t\tlet opening_brackets_count = opening_brackets.length;\n\
    \t\tlet closing_brackets_count = closing_brackets.length;\n\t\twhile (opening_brackets_count\
    \ > 0 && closing_brackets_count > 0) {\n\t\t\tlet opening_bracket = opening_brackets[opening_brackets_count\
    \ - 1];\n\t\t\tlet closing_bracket = closing_brackets[closing_brackets_count -\
    \ 1];\n\t\t\tif (opening_bracket === closing_bracket) {\n\t\t\t\topening_brackets.pop();\n\
    \t\t\t\tclosing_brackets.pop();\n\t\t\t\topening_brackets_count--;\n\t\t\t\tclosing_brackets_count--;\n\
    \t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn opening_brackets.length\
    \ === closing_brackets.length;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpyhwildqh.js:68:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyhwildqh.js:76:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set,\
    \ char) => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\t\
    let closing_brackets_set = closing_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\
    \t\treturn set;\n\t}, new Set<string>());\n\treturn opening_brackets_set.size\
    \ == closing_brackets_set.size;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4yfsbhsf.ts(17,9): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp4yfsbhsf.ts(21,9): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659738771
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet c = brackets[i];\n\t\tif (c == \"<\") {\n\t\t\tstack.push(\"\
    <<\");\n\t\t} else if (c == \">\") {\n\t\t\tlet last = stack.pop();\n\t\t\tif\
    \ (last != \"<<\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn stack.length == 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ !== 0) {\n\t\t\t\tlet opening = stack.pop();\n\t\t\t\tif (opening !== bracket)\
    \ {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr65pu_6s.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr65pu_6s.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tlet opening_brackets_length = 0;\n\tlet closing_brackets_length\
    \ = 0;\n\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket.includes('<')) {\n\t\t\topening_brackets[opening_brackets_length++]\
    \ = i;\n\t\t} else if (bracket.includes('>')) {\n\t\t\tclosing_brackets[closing_brackets_length++]\
    \ = i;\n\t\t}\n\t}\n\n\tif (opening_brackets.length !== closing_brackets.length)\
    \ {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < opening_brackets.length;\
    \ ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket < closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv7ess_s2.ts(19,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpv7ess_s2.ts(21,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tlet i = 0;\n\tlet j\
    \ = 0;\n\twhile (i < opening_brackets_count && j < closing_brackets_count) {\n\
    \t\tif (opening_brackets[i] !== closing_brackets[j]) {\n\t\t\treturn false;\n\t\
    \t}\n\t\ti += 1;\n\t\tj += 1;\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpi9u33lxj.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi9u33lxj.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tlet opening_brackets_length = 0;\n\tlet closing_brackets_length\
    \ = 0;\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket === \"<\") {\n\t\t\topening_brackets_length++;\n\t\t} else if\
    \ (bracket === \">\") {\n\t\t\tclosing_brackets_length++;\n\t\t}\n\t\tif (opening_brackets_length\
    \ >= closing_brackets_length) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb921wse7.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb921wse7.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.indexOf(\"<\") >= 0)\
    \ {\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.indexOf(\">\") >= 0) {\n\
    \t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening\
    \ = stack.pop();\n\t\t\tif (opening != bracket) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t}\n\t}\n\tif (stack.length != 0) {\n\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl161opcr.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl161opcr.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet c = brackets[i];\n\t\tif (c == '<') {\n\t\t\tstack.push(c);\n\
    \t\t} else if (c == '>') {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tlet top = stack.pop();\n\t\t\tif (top != c) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (stack.length != 0) {\n\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcrd93van.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcrd93van.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\tfor (let i = 0; i\
    \ < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprtcwzqqk.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprtcwzqqk.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    opening_brackets.push(0);\n\t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(0);\n\
    \t\t} else {\n\t\t\topening_brackets.push(opening_brackets.length);\n\t\t\tclosing_brackets.push(closing_brackets.length);\n\
    \t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.pop();\n\t\t\
    \tclosing_brackets.pop();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmfi2np0e.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmfi2np0e.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t}\n\t\tif (bracket.match(/>/)) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1ihr9wqc.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1ihr9wqc.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738773
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa81xy0pe.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa81xy0pe.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
    \ === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t\tlet opening = stack.pop();\n\t\t\tif (opening !== bracket) {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (stack.length\
    \ > 0) {\n\t\treturn false;\n\t}\n\tif (opening_brackets.length !== closing_brackets.length)\
    \ {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i)\
    \ {\n\t\tlet opening = opening_brackets[i];\n\t\tlet closing = closing_brackets[i];\n\
    \t\tif (opening > closing) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpws2y5ji9.js:50:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpws2y5ji9.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_set:\
    \ Set<string> = new Set<string>();\n\tlet closing_brackets_set: Set<string> =\
    \ new Set<string>();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\
    \topening_brackets_set.add(opening_brackets[i]);\n\t}\n\tfor (let i = 0; i < closing_brackets.length;\
    \ i++) {\n\t\tclosing_brackets_set.add(closing_brackets[i]);\n\t}\n\treturn opening_brackets_set.size\
    \ == closing_brackets_set.size;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmploibsmvn.ts(14,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmploibsmvn.ts(14,46): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../../tmp/tmploibsmvn.ts(15,28): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../../tmp/tmploibsmvn.ts(15,46): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659738773
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\
    \topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\t\
    i--;\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp301pq105.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp301pq105.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\
    \topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t}\n\
    \t}\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt6wq_1me.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt6wq_1me.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((acc,\
    \ cur) => {\n\t\tacc[cur] = true;\n\t\treturn acc;\n\t}, {});\n\tlet closing_brackets_set\
    \ = closing_brackets.reduce((acc, cur) => {\n\t\tacc[cur] = true;\n\t\treturn\
    \ acc;\n\t}, {});\n\treturn !opening_brackets_set[\">\"] || !closing_brackets_set[\"\
    <\"];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnqshebu2.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnqshebu2.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tlet closing_brackets: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ > 0) {\n\t\t\t\tclosing_brackets.push(stack.pop());\n\t\t\t} else {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (stack.length > 0) {\n\t\t\t\t\
    opening_brackets.push(stack.pop());\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\
    \t\t}\n\t\t}\n\t}\n\tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\tif (opening_brackets.length\
    \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i\
    \ < opening_brackets.length; i++) {\n\t\tif (opening_brackets[i] !== closing_brackets[i])\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmposm8wpf4.js:53:12)\n    at\
    \ Object.<anonymous> (/tmp/tmposm8wpf4.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa81xy0pe.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa81xy0pe.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\
    \t\tstack.push(bracket);\n\t\t} else if (bracket.match(/[<>]/)) {\n\t\t\tif (stack.length\
    \ > 0) {\n\t\t\t\tlet opening = stack.pop();\n\t\t\t\tlet closing = bracket;\n\
    \t\t\t\tif (opening === closing) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpd3mja2hw.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd3mja2hw.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet open_brackets = brackets.split(\"\");\n\tlet closed_brackets:\
    \ string[] = [];\n\tlet open_brackets_length = 0;\n\tlet closed_brackets_length\
    \ = 0;\n\tfor (let i = 0; i < open_brackets.length; i++) {\n\t\topen_brackets_length++;\n\
    \t\tif (open_brackets[i] === \">\") {\n\t\t\tclosed_brackets_length++;\n\t\t}\n\
    \t}\n\tfor (let i = 0; i < open_brackets.length; i++) {\n\t\tif (open_brackets[i]\
    \ === \">\") {\n\t\t\tif (closed_brackets_length === 0) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tclosed_brackets_length--;\n\t\t}\n\t}\n\treturn open_brackets_length\
    \ === closed_brackets_length;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp__lilpdq.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp__lilpdq.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnyd44gim.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnyd44gim.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
    \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t} else if (stack.length &&\
    \ stack[stack.length - 1] === bracket) {\n\t\t\tstack.pop();\n\t\t\topening_brackets.pop();\n\
    \t\t}\n\t}\n\treturn opening_brackets.length === closing_brackets.length;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo0pg99jt.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo0pg99jt.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnyd44gim.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnyd44gim.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\
    \topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\t\
    i--;\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp301pq105.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp301pq105.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet c = brackets[i];\n\t\tif (c === \"<\") {\n\t\t\tif (stack.length\
    \ !== 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.push(c);\n\t\t} else if\
    \ (c === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\tstack.pop();\n\t\t} else {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\
    \treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.length === 0;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu0pqm6dl.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu0pqm6dl.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\n\tfor (let i = 0; i\
    \ < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
    \ {\n\t\t\topening_brackets_count -= 1;\n\t\t\tclosing_brackets_count -= 1;\n\t\
    \t}\n\t}\n\n\treturn opening_brackets_count === 0 && closing_brackets_count ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2s8ix7ei.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2s8ix7ei.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tlet closing_brackets: string[] = [];\n\n\tbrackets.split('').forEach((char)\
    \ => {\n\t\tif (char === '<') {\n\t\t\topening_brackets.push(char);\n\t\t} else\
    \ if (char === '>') {\n\t\t\tclosing_brackets.push(char);\n\t\t} else {\n\t\t\t\
    stack.push(char);\n\t\t}\n\t});\n\n\twhile (stack.length > 0) {\n\t\tlet opening_char\
    \ = stack.shift();\n\t\tlet closing_char = stack.shift();\n\n\t\tif (opening_char\
    \ === closing_char) {\n\t\t\topening_brackets.push(opening_char);\n\t\t\tclosing_brackets.push(closing_char);\n\
    \t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn opening_brackets.length\
    \ === closing_brackets.length;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpejv5gscv.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpejv5gscv.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6v9xogsu.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6v9xogsu.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
    \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t} else if (stack.length >\
    \ 0) {\n\t\t\tlet opening = stack.pop();\n\t\t\tlet closing = closing_brackets.pop();\n\
    \t\t\tif (opening !== closing) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpidgcxvh4.ts(25,8): error TS2367: This condition will
    always return ''true'' since the types ''string'' and ''number'' have no overlap.

    '
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tlet count = 0;\n\t\
    for (let i = 0; i < opening_brackets_count; i++) {\n\t\tlet opening_bracket =\
    \ opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
    \ (opening_bracket != closing_bracket) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count == opening_brackets_count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplgowa4_2.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplgowa4_2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tfor (let i = 0; i <\
    \ opening_brackets_count - 1; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbmfwnuf7.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbmfwnuf7.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.match(/>/)) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\
    \t}\n\treturn opening_brackets.length == closing_brackets.length;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpms7nleep.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpms7nleep.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tlet opening_brackets_length = 0;\n\tlet closing_brackets_length\
    \ = 0;\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket.includes('<')) {\n\t\t\topening_brackets[opening_brackets_length++]\
    \ = i;\n\t\t} else if (bracket.includes('>')) {\n\t\t\tclosing_brackets[closing_brackets_length++]\
    \ = i;\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length)\
    \ {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i)\
    \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket =\
    \ closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\t\
    continue;\n\t\t}\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjoe7ygqb.ts(18,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpjoe7ygqb.ts(20,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\tbrackets.split('<').forEach((bracket: string) => {\n\t\tlet\
    \ opening_bracket = bracket.substr(0, 1);\n\t\tlet closing_bracket = bracket.substr(1,\
    \ 1);\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\topening_brackets.push(opening_bracket);\n\
    \t\t\tclosing_brackets.push(closing_bracket);\n\t\t}\n\t});\n\treturn opening_brackets.length\
    \ === closing_brackets.length;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpw8f1_nii.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpw8f1_nii.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length:\
    \ number = opening_brackets.length;\n\tlet closing_brackets_length: number = closing_brackets.length;\n\
    \tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket:\
    \ string = opening_brackets[i];\n\t\tlet closing_bracket: string = closing_brackets[i];\n\
    \t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets_length--;\n\
    \t\t\tclosing_brackets_length--;\n\t\t}\n\t}\n\treturn opening_brackets_length\
    \ === 0 && closing_brackets_length === 0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7fr4lnpg.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7fr4lnpg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    opening_brackets.push(i);\n\t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\
    \t\t} else if (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\t\t} else if\
    \ (bracket === \">\") {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\tlet opening\
    \ = stack.pop();\n\t\t\t\tlet closing = stack.pop();\n\t\t\t\tif (opening !==\
    \ closing) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (opening_brackets.length\
    \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i\
    \ < opening_brackets.length; ++i) {\n\t\tlet opening = opening_brackets[i];\n\t\
    \tlet closing = closing_brackets[i];\n\t\tif (opening !== closing) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl5khse51.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl5khse51.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738776
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\t\t\topening_brackets.push(bracket);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\tlet opening_bracket = stack.pop();\n\t\t\tif (opening_bracket\
    \ !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\topening_brackets.pop();\n\
    \t\t}\n\t}\n\tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn opening_brackets.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm4thpxyb.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm4thpxyb.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738776
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplydbc9jl.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplydbc9jl.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (closing_bracket === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_brackets_count\
    \ = opening_brackets.length - 1;\n\t\tlet closing_brackets_count = closing_brackets.length\
    \ - 1;\n\t\tlet opening_brackets_count_left = opening_brackets_count - 1;\n\t\t\
    let closing_brackets_count_left = closing_brackets_count - 1;\n\t\tlet opening_brackets_count_right\
    \ = opening_brackets_count + 1;\n\t\tlet closing_brackets_count_right = closing_brackets_count\
    \ + 1;\n\t\tlet opening_brackets_count_left_left = opening_brackets_count_left\
    \ - 1;\n\t\tlet closing_brackets_count_left_left = closing_brackets_count_left\
    \ - 1;\n\t\tlet opening_brackets_count_right_left = opening_brackets_count_right\
    \ + 1;\n\t\tlet closing_brackets_count_right_left = closing_brackets_count_right\
    \ + 1;\n\t\tlet opening_brackets_count_left_right = opening_brackets_count_left\
    \ + 1;\n\t\tlet closing_brackets_count_left_right = closing_brackets_count_left\
    \ + 1;\n\t\tlet opening_brackets_count_right_right = opening_brackets_count_right\
    \ + 1;\n\t\tlet closing_brackets_count_right_right = closing_brackets_count_right\
    \ + 1;\n\t\tlet opening_brackets_count_left_left_left = opening_brackets_count_left_left\
    \ - 1;\n\t\tlet closing_brackets_count_left_left_left = closing_brackets_count_left_left\
    \ - 1;\n\t\tlet opening_brackets_count_right_left_left = opening_brackets_count_right_left\
    \ + 1;\n\t\tlet closing_brackets_count_right_left_left = closing_brackets_count_right_left\
    \ + 1;\n\t\tlet opening_brackets_count_left_right_left = opening_brackets_count_left_right\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbzqky79y.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738776
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tfor (let i = 0; i <\
    \ opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptcmou17b.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptcmou17b.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tlet closing_brackets: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.includes(\"<\")) {\n\
    \t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket.includes(\">\"))\
    \ {\n\t\t\tclosing_brackets.push(bracket);\n\t\t} else {\n\t\t\tstack.push(bracket);\n\
    \t\t}\n\t}\n\twhile (stack.length > 0) {\n\t\tlet bracket = stack.pop();\n\t\t\
    let opening_bracket = opening_brackets.pop();\n\t\tlet closing_bracket = closing_brackets.pop();\n\
    \t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.push(opening_bracket);\n\
    \t\t\tclosing_brackets.push(closing_bracket);\n\t\t} else {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn opening_brackets.length === closing_brackets.length;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpot37dnwi.ts(17,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpot37dnwi.ts(19,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738776
- exit_code: -1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\
    \t\tstack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/[<>]/))\
    \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\twhile (stack.length > 0) {\n\
    \t\tlet opening_bracket = opening_brackets.pop();\n\t\tlet closing_bracket = closing_brackets.pop();\n\
    \t\tif (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet\
    \ opening_char = brackets[opening_bracket];\n\t\tlet closing_char = brackets[closing_bracket];\n\
    \t\tif (opening_char.match(/[<>]/)) {\n\t\t\tstack.push(opening_char);\n\t\t\t\
    opening_brackets.push(opening_bracket);\n\t\t\tclosing_brackets.push(closing_bracket);\n\
    \t\t} else if (closing_char.match(/[<>]/)) {\n\t\t\tclosing_brackets.push(closing_bracket);\n\
    \t\t}\n\t}\n\treturn opening_brackets.length === closing_brackets.length;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738791
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
    \ === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t\tlet opening = stack.pop();\n\t\t\tclosing_brackets.push(opening_brackets.peekLast());\n\
    \t\t\topening_brackets.pop();\n\t\t}\n\t}\n\tif (stack.length > 0) {\n\t\treturn\
    \ false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet\
    \ opening = opening_brackets[i];\n\t\tlet closing = closing_brackets[i];\n\t\t\
    if (opening !== closing) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpke_msva9.ts(25,43): error TS2339: Property ''peekLast''
    does not exist on type ''number[]''.

    '
  timestamp: 1659738776
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length !== 0) {\n\t\t\t\tlet opening = stack.pop();\n\t\t\t\tif (opening\
    \ !== \">\") {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ !== 0) {\n\t\t\t\tlet opening = stack.pop();\n\t\t\t\tif (opening !== \"<\"\
    ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9q2ts_vj.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9q2ts_vj.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738776
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i\
    \ < opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn8ve1add.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn8ve1add.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738776
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.startsWith(\"<\")) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.endsWith(\">\")) {\n\t\t\tclosing_brackets.push(i);\n\t\
    \t}\n\t}\n\treturn opening_brackets.length === closing_brackets.length;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfx1bfgb2.ts(16,15): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmpfx1bfgb2.ts(18,22): error TS2339: Property ''endsWith''
    does not exist on type ''string''.

    '
  timestamp: 1659738776
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket.startsWith(\"<\")) {\n\t\t\tstack.push(bracket);\n\t\t\topening_brackets.push(bracket);\n\
    \t\t} else if (bracket.startsWith(\">\")) {\n\t\t\tif (stack.length > 0) {\n\t\
    \t\t\tlet opening_bracket = stack.pop();\n\t\t\t\tif (opening_bracket === bracket)\
    \ {\n\t\t\t\t\topening_brackets.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ opening_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppuadth1i.ts(16,15): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmppuadth1i.ts(19,22): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    '
  timestamp: 1659738776
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tlet opening_count\
    \ = opening_brackets.length;\n\tlet closing_count = closing_brackets.length;\n\
    \tif (opening_count !== closing_count) {\n\t\treturn false;\n\t}\n\tfor (let i\
    \ = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening = opening_brackets[i];\n\
    \t\tlet closing = closing_brackets[i];\n\t\tif (opening < closing) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t\tlet opening_char = brackets[opening];\n\t\tlet closing_char\
    \ = brackets[closing];\n\t\tif (opening_char.match(/[<>]/)) {\n\t\t\tif (closing_char.match(/[<>]/))\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (closing_char.match(/[<>]/))\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5e77ke42.js:52:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5e77ke42.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738776
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0co7p7dy.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0co7p7dy.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tlet opening_chars: number[]\
    \ = [];\n\tlet closing_chars: number[] = [];\n\tlet opening_char: number = 0;\n\
    \tlet closing_char: number = 0;\n\tlet opening_char_index: number = 0;\n\tlet\
    \ closing_char_index: number = 0;\n\tlet opening_char_index2: number = 0;\n\t\
    let closing_char_index2: number = 0;\n\tlet opening_char_index3: number = 0;\n\
    \tlet closing_char_index3: number = 0;\n\tlet opening_char_index4: number = 0;\n\
    \tlet closing_char_index4: number = 0;\n\tlet opening_char_index5: number = 0;\n\
    \tlet closing_char_index5: number = 0;\n\tlet opening_char_index6: number = 0;\n\
    \tlet closing_char_index6: number = 0;\n\tlet opening_char_index7: number = 0;\n\
    \tlet closing_char_index7: number = 0;\n\tlet opening_char_index8: number = 0;\n\
    \tlet closing_char_index8: number = 0;\n\tlet opening_char_index9: number = 0;\n\
    \tlet closing_char_index9: number = 0;\n\tlet opening_char_index10: number = 0;\n\
    \tlet closing_char_index10: number = 0;\n\tlet opening_char_index11: number =\
    \ 0;\n\tlet closing_char_index11: number = 0;\n\tlet opening_char_index12: number\
    \ = 0;\n\tlet closing_char_index12: number = 0;\n\tlet opening_char_index13: number\
    \ = 0;\n\tlet closing_char_index13: number = 0;\n\tlet opening_char_index14: number\
    \ = 0;\n\tlet closing_char_index14: number = 0;\n\tlet opening_char_index15: number\
    \ = 0;\n\tlet closing_char_index15: number = 0;\n\tlet opening_char_index16: number\
    \ = 0;\n\tlet closing_char_index16: number = 0;\n\tlet opening_char_index17: number\
    \ = 0;\n\tlet closing_char_index17: number = 0;\n\tlet opening_char_index18: number\
    \ = 0;\n\tlet closing_char_index18: number = 0;\n\tlet opening_char_index19: number\
    \ = 0;\n\tlet closing_char_index19: number = 0;\n\tlet opening_char_index20: number\
    \ = 0;\n\tlet closing_char_index20: number = 0;\n\tlet opening_char_index21: number\
    \ = 0;\n\tlet clo\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfst9x83d.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738776
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set,\
    \ char) => {\n\t\tset[char] = true;\n\t\treturn set;\n\t}, {});\n\tlet closing_brackets_set\
    \ = closing_brackets.reduce((set, char) => {\n\t\tset[char] = true;\n\t\treturn\
    \ set;\n\t}, {});\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\t\
    if (!opening_brackets_set[opening_brackets[i]]) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\tfor (let i = 0; i < closing_brackets.length; i++) {\n\t\tif (!closing_brackets_set[closing_brackets[i]])\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5hwde2so.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5hwde2so.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738776
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\
    \topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t}\n\
    \t}\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt6wq_1me.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt6wq_1me.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\tlet i = 0;\n\tlet\
    \ j = 0;\n\tlet k = 0;\n\tlet found = false;\n\twhile (i < opening_brackets_length\
    \ && j < closing_brackets_length) {\n\t\tif (opening_brackets[i] === closing_brackets[j])\
    \ {\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tk++;\n\t\t\tfound = true;\n\t\t} else {\n\t\
    \t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn found;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxauoggme.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxauoggme.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738776
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\n\tfor (let i = 0; i\
    \ < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket !==\
    \ closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdvw_6x7t.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdvw_6x7t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket.includes('<')) {\n\t\t\tstack.push(bracket);\n\t\t\topening_brackets.push(bracket);\n\
    \t\t} else if (bracket.includes('>')) {\n\t\t\tif (stack.length > 0) {\n\t\t\t\
    \tlet opening_bracket = stack.pop();\n\t\t\t\tif (opening_bracket === bracket)\
    \ {\n\t\t\t\t\topening_brackets.pop();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t}\n\treturn opening_brackets.length === 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiltupnaq.ts(16,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpiltupnaq.ts(19,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738776
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set,\
    \ char) => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\t\
    let closing_brackets_set = closing_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\
    \t\treturn set;\n\t}, new Set<string>());\n\treturn opening_brackets_set.size\
    \ == closing_brackets_set.size;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4yfsbhsf.ts(17,9): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp4yfsbhsf.ts(21,9): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659738771
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet open_brackets: number[] = [];\n\tlet close_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topen_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclose_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (open_brackets.length !== close_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < open_brackets.length; ++i) {\n\t\tlet open_bracket\
    \ = open_brackets[i];\n\t\tlet close_bracket = close_brackets[i];\n\t\tif (open_bracket\
    \ > close_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738777
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(i);\n\
    \t\t}\n\t\telse if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(i);\n\
    \t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t\telse\
    \ if (opening_bracket > closing_bracket) {\n\t\t\tlet tmp = opening_bracket;\n\
    \t\t\topening_bracket = closing_bracket;\n\t\t\tclosing_bracket = tmp;\n\t\t}\n\
    \t\telse {\n\t\t\tlet tmp = opening_bracket;\n\t\t\topening_bracket = closing_bracket;\n\
    \t\t\tclosing_bracket = tmp;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8kh2e44h.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8kh2e44h.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet c = brackets[i];\n\t\tif (c == '<') {\n\t\t\tstack.push(c);\n\
    \t\t} else if (c == '>') {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tlet top = stack.pop();\n\t\t\tif (top != c) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn stack.length == 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1xpr5rkc.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1xpr5rkc.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tfor (let i = 0; i <\
    \ opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyl3ktgt0.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyl3ktgt0.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tlet opening_chars: number[]\
    \ = [];\n\tlet closing_chars: number[] = [];\n\tlet opening_char: number = 0;\n\
    \tlet closing_char: number = 0;\n\tlet opening_char_index: number = 0;\n\tlet\
    \ closing_char_index: number = 0;\n\tlet opening_char_index2: number = 0;\n\t\
    let closing_char_index2: number = 0;\n\tlet opening_char_index3: number = 0;\n\
    \tlet closing_char_index3: number = 0;\n\tlet opening_char_index4: number = 0;\n\
    \tlet closing_char_index4: number = 0;\n\tlet opening_char_index5: number = 0;\n\
    \tlet closing_char_index5: number = 0;\n\tlet opening_char_index6: number = 0;\n\
    \tlet closing_char_index6: number = 0;\n\tlet opening_char_index7: number = 0;\n\
    \tlet closing_char_index7: number = 0;\n\tlet opening_char_index8: number = 0;\n\
    \tlet closing_char_index8: number = 0;\n\tlet opening_char_index9: number = 0;\n\
    \tlet closing_char_index9: number = 0;\n\tlet opening_char_index10: number = 0;\n\
    \tlet closing_char_index10: number = 0;\n\tlet opening_char_index11: number =\
    \ 0;\n\tlet closing_char_index11: number = 0;\n\tlet opening_char_index12: number\
    \ = 0;\n\tlet closing_char_index12: number = 0;\n\tlet opening_char_index13: number\
    \ = 0;\n\tlet closing_char_index13: number = 0;\n\tlet opening_char_index14: number\
    \ = 0;\n\tlet closing_char_index14: number = 0;\n\tlet opening_char_index15: number\
    \ = 0;\n\tlet closing_char_index15: number = 0;\n\tlet opening_char_index16: number\
    \ = 0;\n\tlet closing_char_index16: number = 0;\n\tlet opening_char_index17: number\
    \ = 0;\n\tlet closing_char_index17: number = 0;\n\tlet opening_char_index18: number\
    \ = 0;\n\tlet closing_char_index18: number = 0;\n\tlet opening_char_index19: number\
    \ = 0;\n\tlet closing_char_index19: number = 0;\n\tlet opening_char_index20: number\
    \ = 0;\n\tlet closing_char_index20: number = 0;\n\tlet opening_char_index21: number\
    \ = 0;\n\tlet clo\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfst9x83d.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738776
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.startsWith(\"<\")) {\n\t\t\topening_brackets.push(bracket);\n\
    \t\t} else if (bracket.endsWith(\">\")) {\n\t\t\tclosing_brackets.push(bracket);\n\
    \t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\t\
    return false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\t\
    let opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
    \t\tif (opening_bracket.startsWith(\"<\") && closing_bracket.endsWith(\">\"))\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket.endsWith(\">\") && closing_bracket.startsWith(\"\
    <\")) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket.startsWith(\">\") &&\
    \ closing_bracket.endsWith(\"<\")) {\n\t\t\tcontinue;\n\t\t}\n\t\treturn false;\n\
    \t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplyjza2ju.ts(16,15): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmplyjza2ju.ts(18,22): error TS2339: Property ''endsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmplyjza2ju.ts(28,23): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmplyjza2ju.ts(28,58): error TS2339: Property ''endsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmplyjza2ju.ts(31,23): error TS2339: Property ''endsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmplyjza2ju.ts(31,56): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmplyjza2ju.ts(34,23): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmplyjza2ju.ts(34,58): error TS2339: Property ''endsWith''
    does not exist on type ''string''.

    '
  timestamp: 1659738776
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet c = brackets[i];\n\t\tif (c === \"<\") {\n\t\t\tstack.push(\"\
    <\");\n\t\t} else if (c === \">\") {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\t\
    stack.pop();\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2i9em61m.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2i9em61m.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet c = brackets[i];\n\t\tif (c === \"<\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top === \"<\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\
    \t\tstack.push(c);\n\t\t\t}\n\t\t} else if (c === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top === \">\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\
    \t\tstack.push(c);\n\t\t\t}\n\t\t} else {\n\t\t\tstack.push(c);\n\t\t}\n\t}\n\t\
    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp137l8mg4.js:48:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp137l8mg4.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.match(/>/)) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\
    \t}\n\treturn opening_brackets.length == closing_brackets.length;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpms7nleep.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpms7nleep.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.includes(\"<\")) {\n\
    \t\t\tstack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.includes(\"\
    >\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\twhile (stack.length >\
    \ 0) {\n\t\tlet opening_bracket = opening_brackets.pop();\n\t\tlet closing_bracket\
    \ = closing_brackets.pop();\n\t\tif (opening_bracket === closing_bracket) {\n\t\
    \t\tcontinue;\n\t\t}\n\t\tlet opening_brackets_string = stack.slice(0, opening_bracket).join(\"\
    \");\n\t\tlet closing_brackets_string = stack.slice(opening_bracket, closing_bracket).join(\"\
    \");\n\t\tif (opening_brackets_string !== closing_brackets_string) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqq3n6bv9.ts(17,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpqq3n6bv9.ts(20,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738777
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\n\tfor (let i = 0; i\
    \ < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket !==\
    \ closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdvw_6x7t.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdvw_6x7t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0co7p7dy.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0co7p7dy.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\n\tbrackets.split('<').forEach((bracket: string) => {\n\t\t\
    let opening_bracket = bracket.substr(0, 1);\n\t\tlet closing_bracket = bracket.substr(1,\
    \ 1);\n\n\t\tif (opening_bracket === '<') {\n\t\t\topening_brackets.push(opening_bracket);\n\
    \t\t} else {\n\t\t\tclosing_brackets.push(closing_bracket);\n\t\t}\n\t});\n\n\t\
    opening_brackets.forEach((opening_bracket: string) => {\n\t\tclosing_brackets.forEach((closing_bracket:\
    \ string) => {\n\t\t\tif (opening_bracket === closing_bracket) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t});\n\t});\n\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_napnzx2.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_napnzx2.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet open_brackets: number[] = [];\n\tlet close_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topen_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclose_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (open_brackets.length !== close_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < open_brackets.length; ++i) {\n\t\tlet open_bracket\
    \ = open_brackets[i];\n\t\tlet close_bracket = close_brackets[i];\n\t\tif (open_bracket\
    \ === close_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (open_bracket < close_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\tlet open_brackets_before = open_brackets.slice(0,\
    \ i);\n\t\tlet open_brackets_after = open_brackets.slice(i + 1);\n\t\tlet close_brackets_before\
    \ = close_brackets.slice(0, i);\n\t\tlet close_brackets_after = close_brackets.slice(i\
    \ + 1);\n\t\tif (open_brackets_before.length !== close_brackets_before.length\
    \ ||\n\t\t\topen_brackets_after.length !== close_brackets_after.length) {\n\t\t\
    \treturn false;\n\t\t}\n\t\tfor (let j = 0; j < open_brackets_before.length; ++j)\
    \ {\n\t\t\tlet open_brackets_before_j = open_brackets_before[j];\n\t\t\tlet close_brackets_before_j\
    \ = close_brackets_before[j];\n\t\t\tif (open_brackets_before_j === close_brackets_before_j)\
    \ {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (open_brackets_before_j < close_brackets_before_j)\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tfor (let j = 0; j < open_brackets_after.length;\
    \ ++j) {\n\t\t\tlet open_brackets_after_j = open_brackets_after[j];\n\t\t\tlet\
    \ close_brackets_after_j = close_brackets_after[j];\n\t\t\tif (open_brackets_after_j\
    \ === close_brackets_after_j) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (open_brackets_after_j\
    \ < close_brackets_after_j) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpg4s6eliu.js:69:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg4s6eliu.js:82:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738778
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length !== 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.push(bracket);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t} else {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack[stack.length\
    \ - 1];\n\t\t\tlet closing = bracket;\n\t\t\tif (opening !== closing) {\n\t\t\t\
    \treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length !== 0) {\n\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnhs229qx.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnhs229qx.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738778
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplydbc9jl.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplydbc9jl.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tfor (let i = 0; i <\
    \ opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyl3ktgt0.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyl3ktgt0.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.match(/>/)) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (closing_bracket < opening_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf5tq0o51.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf5tq0o51.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet c = brackets[i];\n\t\tif (c == '<') {\n\t\t\tif (stack.length\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top == '>') {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\
    \tstack.push('>');\n\t\t\t}\n\t\t} else if (c == '>') {\n\t\t\tif (stack.length\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top == '<') {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\
    \tstack.push('<');\n\t\t\t}\n\t\t} else {\n\t\t\tstack.push(c);\n\t\t}\n\t}\n\t\
    return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0dajpprl.js:48:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0dajpprl.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((acc,\
    \ cur) => acc && is_opening_bracket(cur), true);\n\tlet closing_brackets_set =\
    \ closing_brackets.reduce((acc, cur) => acc && is_closing_bracket(cur), true);\n\
    \treturn opening_brackets_set && closing_brackets_set;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuc3mq2e4.ts(14,74): error TS2552: Cannot find name
    ''is_opening_bracket''. Did you mean ''opening_brackets''?

    ../../../../../tmp/tmpuc3mq2e4.ts(15,74): error TS2552: Cannot find name ''is_closing_bracket''.
    Did you mean ''closing_brackets''?

    '
  timestamp: 1659738778
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.includes(\"<\")) {\n\t\t\topening_brackets.push(bracket);\n\
    \t\t} else if (bracket.includes(\">\")) {\n\t\t\tclosing_brackets.push(bracket);\n\
    \t\t}\n\t}\n\treturn opening_brackets.length == closing_brackets.length;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1msfm7ck.ts(16,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmp1msfm7ck.ts(18,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738778
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnyd44gim.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnyd44gim.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else\
    \ if (bracket === \">\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\t\
    stack.pop();\n\t\t} else {\n\t\t\tif (stack.length !== 0) return false;\n\t\t\
    }\n\t}\n\tif (stack.length !== 0) return false;\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6txq3uok.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6txq3uok.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    opening_brackets.push(i);\n\t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\
    \t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\twhile (stack.length >\
    \ 0) {\n\t\tlet opening = stack.pop();\n\t\tlet closing = stack.pop();\n\t\tif\
    \ (opening_brackets.indexOf(opening) === closing_brackets.indexOf(closing)) {\n\
    \t\t\tcontinue;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5fn_b79l.ts(28,32): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp5fn_b79l.ts(28,70): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1659738778
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tlet closing_brackets: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.charAt(0) === '<') {\n\
    \t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket.charAt(0) === '>')\
    \ {\n\t\t\tclosing_brackets.push(bracket);\n\t\t} else {\n\t\t\tstack.push(bracket);\n\
    \t\t}\n\t}\n\twhile (stack.length > 0) {\n\t\tlet opening_bracket = opening_brackets.pop();\n\
    \t\tlet closing_bracket = closing_brackets.pop();\n\t\tif (opening_bracket ===\
    \ closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket.charAt(0)\
    \ === '<') {\n\t\t\tstack.push(opening_bracket);\n\t\t} else {\n\t\t\tstack.push(closing_bracket);\n\
    \t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcspj8chu.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcspj8chu.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
    \ === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t\tlet opening_bracket = opening_brackets.pop();\n\t\t\tclosing_brackets.push(opening_bracket);\n\
    \t\t\tstack.pop();\n\t\t} else {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\tlet opening_bracket = opening_brackets.pop();\n\t\t\t\
    let closing_bracket = closing_brackets.pop();\n\t\t\tif (opening_bracket === closing_bracket)\
    \ {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphpqf6qol.js:54:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphpqf6qol.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tlet closing_brackets: string[] = [];\n\n\tbrackets.split('').forEach((char)\
    \ => {\n\t\tif (char === '<') {\n\t\t\tstack.push('>');\n\t\t} else if (char ===\
    \ '>') {\n\t\t\topening_brackets.push(stack.pop());\n\t\t} else if (char === '<')\
    \ {\n\t\t\tclosing_brackets.push(stack.pop());\n\t\t}\n\t});\n\n\treturn opening_brackets.length\
    \ === closing_brackets.length;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps4_jh_ht.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps4_jh_ht.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tlet closing_brackets: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.startsWith(\"<\")) {\n\
    \t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket.startsWith(\">\"\
    )) {\n\t\t\tclosing_brackets.push(bracket);\n\t\t} else {\n\t\t\tstack.push(bracket);\n\
    \t\t}\n\t}\n\twhile (stack.length > 0) {\n\t\tlet opening_bracket = opening_brackets.pop();\n\
    \t\tlet closing_bracket = closing_brackets.pop();\n\t\tlet opening_stack = stack.shift();\n\
    \t\tif (opening_stack === closing_bracket) {\n\t\t\topening_brackets.push(opening_bracket);\n\
    \t\t\tclosing_brackets.push(closing_bracket);\n\t\t} else {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_syeuz8h.ts(17,15): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmp_syeuz8h.ts(19,22): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    '
  timestamp: 1659738779
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/))\
    \ {\n\t\t\tclosing_brackets.push(i);\n\t\t} else if (bracket.match(/>/>/)) {\n\
    \t\t\tclosing_brackets.push(i);\n\t\t\topening_brackets.push(i);\n\t\t} else if\
    \ (bracket.match(/>/)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/>/))\
    \ {\n\t\t\topening_brackets.push(i);\n\t\t}\n\t}\n\tif (stack.length !== opening_brackets.length\
    \ || stack.length !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor\
    \ (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\tlet opening_brackets_length = opening_brackets.length\
    \ - 1;\n\t\tlet closing_brackets_length = closing_brackets.length - 1;\n\t\tlet\
    \ opening_brackets_index = opening_bracket;\n\t\tlet closing_brackets_index =\
    \ closing_bracket;\n\t\twhile (opening_brackets_index >= 0 && closing_brackets_index\
    \ >= 0) {\n\t\t\tif (opening_brackets[opening_brackets_index] === closing_brackets[closing_brackets_index])\
    \ {\n\t\t\t\topening_brackets_index--;\n\t\t\t\tclosing_brackets_index--;\n\t\t\
    \t} else {\n\t\t\t\tif (opening_brackets_index > closing_brackets_index) {\n\t\
    \t\t\t\topening_brackets_index--;\n\t\t\t\t} else {\n\t\t\t\t\tclosing_brackets_index--;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets_index > closing_brackets_index)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxtik9pjw.ts(22,33): error TS1161: Unterminated regular
    expression literal.

    ../../../../../tmp/tmpxtik9pjw.ts(23,4): error TS1005: '','' expected.

    ../../../../../tmp/tmpxtik9pjw.ts(23,28): error TS1005: '')'' expected.

    ../../../../../tmp/tmpxtik9pjw.ts(25,5): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpxtik9pjw.ts(27,33): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpxtik9pjw.ts(28,4): error TS1005: '','' expected.

    ../../../../../tmp/tmpxtik9pjw.ts(28,28): error TS1005: '')'' expected.

    ../../../../../tmp/tmpxtik9pjw.ts(30,2): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpxtik9pjw.ts(61,1): error TS1128: Declaration or statement
    expected.

    '
  timestamp: 1659738779
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.startsWith(\"<\")) {\n\t\t\topening_brackets.push(bracket);\n\
    \t\t} else if (bracket.endsWith(\">\")) {\n\t\t\tclosing_brackets.push(bracket);\n\
    \t\t}\n\t}\n\treturn opening_brackets.length === closing_brackets.length;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9oxvjtn4.ts(16,15): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmp9oxvjtn4.ts(18,22): error TS2339: Property ''endsWith''
    does not exist on type ''string''.

    '
  timestamp: 1659738779
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvse49iws.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvse49iws.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tfor (let i = 0; i <\
    \ opening_brackets_count - 1; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbmfwnuf7.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbmfwnuf7.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tlet closing_brackets: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket\
    \ === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t\tclosing_brackets.push(stack.pop());\n\t\t} else {\n\t\t\tif (stack.length\
    \ > 0 && stack[stack.length - 1] === bracket) {\n\t\t\t\tstack.pop();\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\tif (opening_brackets.length\
    \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i\
    \ < opening_brackets.length; i++) {\n\t\tif (opening_brackets[i] !== closing_brackets[i])\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738779
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tlet closing_brackets: string[] = [];\n\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket\
    \ === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t\tclosing_brackets.push(stack.pop());\n\t\t} else {\n\t\t\tif (stack.length\
    \ > 0) {\n\t\t\t\tclosing_brackets.push(stack.pop());\n\t\t\t}\n\t\t\tstack.push(bracket);\n\
    \t\t}\n\t}\n\n\tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\n\tfor (let\
    \ i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tfor (let j = 0; j < closing_brackets.length; j++) {\n\t\t\tlet closing_bracket\
    \ = closing_brackets[j];\n\t\t\tif (opening_bracket === closing_bracket) {\n\t\
    \t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpris180ag.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpris180ag.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(bracket.substring(1,\
    \ bracket.length - 1));\n\t\t} else if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(bracket.substring(1,\
    \ bracket.length - 1));\n\t\t}\n\t}\n\treturn opening_brackets.length === closing_brackets.length;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnauexv4t.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnauexv4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.length === 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp91mcd8j7.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp91mcd8j7.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tfor (let i = 0; i <\
    \ opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptcmou17b.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptcmou17b.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
    \ === \">\") {\n\t\t\tlet opening = opening_brackets.pop();\n\t\t\tif (opening\
    \ === i) {\n\t\t\t\tclosing_brackets.push(i);\n\t\t\t} else {\n\t\t\t\tstack.push(bracket);\n\
    \t\t\t}\n\t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\n\tif (stack.length\
    \ !== opening_brackets.length || opening_brackets.length !== closing_brackets.length)\
    \ {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < opening_brackets.length;\
    \ ++i) {\n\t\tlet opening = opening_brackets[i];\n\t\tlet closing = closing_brackets[i];\n\
    \t\tif (opening !== closing) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpund2qgc0.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpund2qgc0.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top === \"<\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top === \">\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t\
    }\n\tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr6rwxul1.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr6rwxul1.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.match(/[<>]/)) {\n\t\t\tclosing_brackets.push(i);\n\t\t\
    }\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (closing_bracket < opening_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0iy2zunc.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0iy2zunc.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else\
    \ if (bracket === \">\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\t\
    stack.pop();\n\t\t} else {\n\t\t\tif (stack.length !== 0) return false;\n\t\t\
    }\n\t}\n\treturn (stack.length === 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2n2fl323.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2n2fl323.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvse49iws.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvse49iws.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else\
    \ if (bracket === \">\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\t\
    stack.pop();\n\t\t} else {\n\t\t\tif (stack.length !== 0) return false;\n\t\t\
    }\n\t}\n\treturn (stack.length === 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2n2fl323.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2n2fl323.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\t\
    if (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\t\t\t\
    }\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/>/)) {\n\t\t\tif\
    \ (stack.length !== 0) {\n\t\t\t\tclosing_brackets.push(stack.length);\n\t\t\t\
    }\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/>/>/)) {\n\t\t\t\
    if (stack.length !== 0) {\n\t\t\t\tclosing_brackets.push(stack.length);\n\t\t\t\
    }\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/></)) {\n\t\t\tif\
    \ (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\t\t\t\
    }\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/></>)) {\n\t\t\t\
    if (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\t\t\t\
    }\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/></>/>/)) {\n\t\t\
    \tif (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\t\t\
    \t}\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/></>/>/>/)) {\n\
    \t\t\tif (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\
    \t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/></>/>/>/>/))\
    \ {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\
    \t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/></>/>/>/>/>/))\
    \ {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\
    \t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/></>/>/>/>/>/>/))\
    \ {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\
    \t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/></>/>/>/>/>/>/>/))\
    \ {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\
    \t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/></>/>/>/>/>/>/>/>/))\
    \ {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\
    \t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/></>\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7_duiyi.ts(27,33): error TS1161: Unterminated regular
    expression literal.

    ../../../../../tmp/tmpz7_duiyi.ts(28,4): error TS1005: '','' expected.

    ../../../../../tmp/tmpz7_duiyi.ts(32,5): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpz7_duiyi.ts(37,33): error TS1109: Expression expected.

    ../../../../../tmp/tmpz7_duiyi.ts(47,38): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpz7_duiyi.ts(48,4): error TS1005: '','' expected.

    ../../../../../tmp/tmpz7_duiyi.ts(52,5): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpz7_duiyi.ts(57,42): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpz7_duiyi.ts(58,4): error TS1005: '','' expected.

    ../../../../../tmp/tmpz7_duiyi.ts(62,3): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpz7_duiyi.ts(62,5): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpz7_duiyi.ts(67,46): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpz7_duiyi.ts(68,4): error TS1005: '','' expected.

    ../../../../../tmp/tmpz7_duiyi.ts(72,3): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpz7_duiyi.ts(72,5): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpz7_duiyi.ts(78,9): error TS1005: '','' expected.

    '
  timestamp: 1659738780
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet c = brackets[i];\n\t\tif (c == '<') {\n\t\t\tif (stack.length\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top == '>') {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse {\n\
    \t\t\t\tstack.push('>');\n\t\t\t}\n\t\t}\n\t\telse if (c == '>') {\n\t\t\tif (stack.length\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top == '<') {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse {\n\
    \t\t\t\tstack.push('<');\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tstack.push(c);\n\t\
    \t}\n\t}\n\tif (stack.length != 0) {\n\t\treturn false;\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpc3f9001l.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc3f9001l.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738781
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.charAt(0) === \"<\"\
    ) {\n\t\t\tstack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if\
    \ (bracket.charAt(0) === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\tclosing_brackets.push(stack.lastIndexOf(bracket) - 1);\n\
    \t\t\tstack.pop();\n\t\t}\n\t}\n\tif (stack.length > 0) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket\
    \ > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprwxam238.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprwxam238.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738781
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tlet correct_bracketing\
    \ = true;\n\tfor (let i = 0; i < opening_brackets_count; i++) {\n\t\tif (opening_brackets[i]\
    \ !== closing_brackets[i]) {\n\t\t\tcorrect_bracketing = false;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn correct_bracketing;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz3fzo7k1.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz3fzo7k1.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738781
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket === \"<\") {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.pop());\n\
    \t\t\t}\n\t\t} else if (bracket === \">\") {\n\t\t\tif (opening_brackets.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.push(opening_brackets.pop());\n\
    \t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\tif (stack.length !== 0)\
    \ {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmg1cy4iu.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmg1cy4iu.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738781
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\n\tfor (let i = 0; i\
    \ < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket ===\
    \ closing_bracket) {\n\t\t\topening_brackets_count -= 1;\n\t\t\tclosing_brackets_count\
    \ -= 1;\n\t\t}\n\t}\n\n\treturn opening_brackets_count === 0 && closing_brackets_count\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm9364r6r.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm9364r6r.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738781
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tlet closing_brackets: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket\
    \ === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t\tclosing_brackets.push(stack.pop());\n\t\t} else {\n\t\t\tif (stack.length\
    \ > 0) {\n\t\t\t\tlet last = stack.pop();\n\t\t\t\tif (last !== bracket) {\n\t\
    \t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length > 0)\
    \ {\n\t\treturn false;\n\t}\n\tif (opening_brackets.length !== closing_brackets.length)\
    \ {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i)\
    \ {\n\t\tlet bracket = opening_brackets[i];\n\t\tlet next_bracket = closing_brackets[i];\n\
    \t\tif (bracket === next_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (bracket ===\
    \ \"<\") {\n\t\t\tif (next_bracket === \"<\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\
    \t\tif (next_bracket === \">\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\
    if (bracket === \">\") {\n\t\t\tif (next_bracket === \"<\") {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\tif (next_bracket === \">\") {\n\t\t\t\tcontinue;\n\t\t\
    \t}\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738781
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    opening_brackets.push(i);\n\t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\
    \t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\twhile (stack.length >\
    \ 0) {\n\t\tlet bracket = stack.pop();\n\t\tlet opening_bracket = opening_brackets.pop();\n\
    \t\tlet closing_bracket = closing_brackets.pop();\n\t\tif (opening_bracket ===\
    \ closing_bracket) {\n\t\t\topening_brackets.pop();\n\t\t\tclosing_brackets.pop();\n\
    \t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9nzn66mk.js:48:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9nzn66mk.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738781
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tlet correct_bracketing\
    \ = true;\n\tfor (let i = 0; i < opening_brackets_count; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket !== closing_bracket) {\n\t\t\tcorrect_bracketing = false;\n\
    \t\t}\n\t}\n\treturn correct_bracketing;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpy3wtdc30.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy3wtdc30.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738781
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tfor (let i = 0; i <\
    \ opening_brackets_count - 1; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
    \ {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\
    \t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpeobgqct1.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeobgqct1.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738781
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tif (opening_brackets[i] !== closing_brackets[i]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphbb0__o7.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphbb0__o7.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738781
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket\
    \ > closing_bracket) {\n\t\t\tlet temp = opening_bracket;\n\t\t\topening_bracket\
    \ = closing_bracket;\n\t\t\tclosing_bracket = temp;\n\t\t}\n\t\tlet opening_brackets_count\
    \ = opening_brackets.length;\n\t\tlet closing_brackets_count = closing_brackets.length;\n\
    \t\twhile (opening_brackets_count > 0 && closing_brackets_count > 0) {\n\t\t\t\
    let opening_bracket = opening_brackets[opening_brackets_count];\n\t\t\tlet closing_bracket\
    \ = closing_brackets[closing_brackets_count];\n\t\t\tif (opening_bracket === closing_bracket)\
    \ {\n\t\t\t\topening_brackets_count--;\n\t\t\t\tclosing_brackets_count--;\n\t\t\
    \t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp269o89uy.js:57:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp269o89uy.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738782
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index\
    \ = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif\
    \ (opening_index > closing_index) {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_char\
    \ = brackets[opening_index];\n\t\tlet closing_char = brackets[closing_index];\n\
    \t\tif (opening_char !== closing_char) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps1gx1o4x.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps1gx1o4x.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738781
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else\
    \ if (bracket === \">\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\t\
    stack.pop();\n\t\t} else {\n\t\t\tif (stack.length !== 0) return false;\n\t\t\
    }\n\t}\n\treturn (stack.length === 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2n2fl323.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2n2fl323.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.includes(\"<\")) {\n\t\t\topening_brackets.push(i);\n\
    \t\t}\n\t\tif (bracket.includes(\">\")) {\n\t\t\tclosing_brackets.push(i);\n\t\
    \t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdwc5ik29.ts(16,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpdwc5ik29.ts(19,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738782
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.match(/[<>]/)) {\n\t\t\tclosing_brackets.push(i);\n\t\t\
    }\n\t}\n\treturn opening_brackets.length === closing_brackets.length;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0xbor19j.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0xbor19j.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738782
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
    \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t} else if (stack.length &&\
    \ closing_brackets[closing_brackets.length - 1] === stack.length - 1) {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\
    \tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
    \t\tif (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet\
    \ opening_brackets_length = opening_brackets.length;\n\t\tlet closing_brackets_length\
    \ = closing_brackets.length;\n\t\tlet opening_brackets_index = opening_bracket;\n\
    \t\tlet closing_brackets_index = closing_bracket;\n\t\twhile (opening_brackets_index\
    \ > 0 && closing_brackets_index > 0) {\n\t\t\tlet opening_brackets_index_1 = opening_brackets_index\
    \ - 1;\n\t\t\tlet closing_brackets_index_1 = closing_brackets_index - 1;\n\t\t\
    \tif (opening_brackets[opening_brackets_index_1] === \"<\") {\n\t\t\t\topening_brackets_index--;\n\
    \t\t\t} else if (closing_brackets[closing_brackets_index_1] === \">\") {\n\t\t\
    \t\tclosing_brackets_index--;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t}\n\t\tlet opening_brackets_index_2 = opening_brackets_index;\n\t\tlet closing_brackets_index_2\
    \ = closing_brackets_index;\n\t\twhile (opening_brackets_index_2 < opening_brackets_length\
    \ && closing_brackets_index_2 < closing_brackets_length) {\n\t\t\tlet opening_brackets_index_3\
    \ = opening_brackets_index_2;\n\t\t\tlet closing_brackets_index_3 = closing_brackets_index_2;\n\
    \t\t\tif (opening_brackets[opening_brackets_index_3] === \"<\") {\n\t\t\t\topening_brackets_index_2++;\n\
    \t\t\t} else if (closing_brackets[closing_brackets_\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbxqna59m.ts(58,1): error TS1005: '']'' expected.

    ../../../../../tmp/tmpbxqna59m.ts(78,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738782
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/\\</)) {\n\t\t\
    \tstack.push(bracket);\n\t\t} else if (bracket.match(/\\>/)) {\n\t\t\tif (stack.length\
    \ > 0) {\n\t\t\t\tlet opening = stack.pop();\n\t\t\t\tif (opening !== bracket)\
    \ {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp9jhtt_c.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp9jhtt_c.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738782
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else\
    \ if (bracket === \">\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\t\
    stack.pop();\n\t\t} else {\n\t\t\tif (stack.length !== 0) return false;\n\t\t\
    }\n\t}\n\treturn (stack.length === 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2n2fl323.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2n2fl323.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tlet closing_brackets: string[] = [];\n\tlet opening_counts: number[]\
    \ = [];\n\tlet closing_counts: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.startsWith(\"<\")) {\n\
    \t\t\topening_brackets.push(bracket);\n\t\t\topening_counts.push(1);\n\t\t} else\
    \ if (bracket.endsWith(\">\")) {\n\t\t\tclosing_brackets.push(bracket);\n\t\t\t\
    closing_counts.push(1);\n\t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\
    \twhile (stack.length > 0) {\n\t\tlet bracket = stack.pop();\n\t\tlet opening_bracket\
    \ = opening_brackets.pop();\n\t\tlet closing_bracket = closing_brackets.pop();\n\
    \t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_counts[opening_brackets.length\
    \ - 1]++;\n\t\t\tclosing_counts[closing_brackets.length - 1]++;\n\t\t} else {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tif (opening_counts[i] > closing_counts[i]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmparflgymt.ts(19,15): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmparflgymt.ts(22,22): error TS2339: Property ''endsWith''
    does not exist on type ''string''.

    '
  timestamp: 1659738782
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa81xy0pe.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa81xy0pe.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.includes(\"<\")) {\n\
    \t\t\tstack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.includes(\"\
    >\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t} else if (bracket.includes(\"(\"\
    )) {\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.includes(\")\")) {\n\t\
    \t\twhile (stack.length > 0 && stack[stack.length - 1].includes(\"(\")) {\n\t\t\
    \t\tstack.pop();\n\t\t\t}\n\t\t\tif (stack.length > 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length)\
    \ {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++)\
    \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket =\
    \ closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppvolobje.ts(17,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmppvolobje.ts(20,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmppvolobje.ts(22,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmppvolobje.ts(24,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmppvolobje.ts(25,55): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738782
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length !== 0) {\n\t\t\t\tlet last = stack.pop();\n\t\t\t\tif (last ===\
    \ \"<\") {\n\t\t\t\t\tstack.push(bracket);\n\t\t\t\t\treturn false;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\
    \t\tif (stack.length !== 0) {\n\t\t\t\tlet last = stack.pop();\n\t\t\t\tif (last\
    \ === \">\") {\n\t\t\t\t\tstack.push(bracket);\n\t\t\t\t\treturn false;\n\t\t\t\
    \t}\n\t\t\t}\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmlbapnp_.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmlbapnp_.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738782
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[opening_bracket];\n\
    \t\tif (closing_bracket === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\tclosing_brackets[opening_bracket]\
    \ = undefined;\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq9hjruyj.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq9hjruyj.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738782
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tlet i = 0;\n\tlet j\
    \ = 0;\n\twhile (i < opening_brackets_count && j < closing_brackets_count) {\n\
    \t\tif (opening_brackets[i] !== closing_brackets[j]) {\n\t\t\treturn false;\n\t\
    \t}\n\t\ti++;\n\t\tj++;\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpngcjuovw.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpngcjuovw.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738782
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet c = brackets[i];\n\t\tif (c == \"<\") {\n\t\t\tif (stack.length\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top != \">\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\
    \t\t} else if (c == \">\") {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tlet top = stack[stack.length - 1];\n\t\t\tif (top == \"<\") {\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.push(c);\n\t\t} else {\n\t\t\tstack.push(c);\n\
    \t\t}\n\t}\n\tif (stack.length != 0) {\n\t\treturn false;\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpx9ly5svh.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpx9ly5svh.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738783
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set,\
    \ opening_bracket) => {\n\t\tset.add(opening_bracket);\n\t\treturn set;\n\t},\
    \ new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
    \ closing_bracket) => {\n\t\tset.add(closing_bracket);\n\t\treturn set;\n\t},\
    \ new Set<string>());\n\treturn opening_brackets_set.size == closing_brackets_set.size;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvrip5iuz.ts(17,9): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpvrip5iuz.ts(21,9): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659738769
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet c = brackets.charAt(i);\n\t\tif (c === \"<\") {\n\t\t\tif (stack.length\
    \ !== 0) return false;\n\t\t\tstack.push(c);\n\t\t} else if (c === \">\") {\n\t\
    \t\tif (stack.length !== 1) return false;\n\t\t\tstack.pop();\n\t\t} else {\n\t\
    \t\tif (stack.length !== 0) return false;\n\t\t}\n\t}\n\tif (stack.length !==\
    \ 0) return false;\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3b1sr1au.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3b1sr1au.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738783
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet c = brackets[i];\n\t\tif (c === \"<\") {\n\t\t\tstack.push(c);\n\
    \t\t} else if (c === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\tlet top = stack.pop();\n\t\t\tif (top !== c) {\n\t\t\t\
    \treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length > 0) {\n\t\treturn false;\n\
    \t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphfpzeg3n.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphfpzeg3n.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738783
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.match(/>/)) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\
    \t}\n\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\
    \treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4nrwd0ny.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4nrwd0ny.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738783
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket\
    \ > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet c = brackets[i];\n\t\tif (c == '<') {\n\t\t\tif (stack.length\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top == '>') {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\
    \tstack.push('>');\n\t\t\t}\n\t\t} else if (c == '>') {\n\t\t\tif (stack.length\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top == '<') {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\
    \tstack.push('<');\n\t\t\t}\n\t\t} else {\n\t\t\tstack.push(c);\n\t\t}\n\t}\n\t\
    if (stack.length != 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplziuobw9.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplziuobw9.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738784
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length:\
    \ number = opening_brackets.length;\n\tlet closing_brackets_length: number = closing_brackets.length;\n\
    \tlet opening_brackets_index: number = 0;\n\tlet closing_brackets_index: number\
    \ = 0;\n\tlet opening_brackets_length_index: number = 0;\n\tlet closing_brackets_length_index:\
    \ number = 0;\n\tlet opening_brackets_length_max: number = opening_brackets_length;\n\
    \tlet closing_brackets_length_max: number = closing_brackets_length;\n\tlet opening_brackets_length_min:\
    \ number = opening_brackets_length;\n\tlet closing_brackets_length_min: number\
    \ = closing_brackets_length;\n\tlet opening_brackets_length_max_index: number\
    \ = 0;\n\tlet closing_brackets_length_max_index: number = 0;\n\tlet opening_brackets_length_min_index:\
    \ number = 0;\n\tlet closing_brackets_length_min_index: number = 0;\n\tlet opening_brackets_length_max_value:\
    \ number = opening_brackets_length;\n\tlet closing_brackets_length_max_value:\
    \ number = closing_brackets_length;\n\tlet opening_brackets_length_min_value:\
    \ number = opening_brackets_length;\n\tlet closing_brackets_length_min_value:\
    \ number = closing_brackets_length;\n\tlet opening_brackets_length_max_value_2:\
    \ number = opening_brackets_length;\n\tlet closing_brackets_length_max_value_2:\
    \ number = closing_brackets_length;\n\tlet opening_brackets_length_min_value_2:\
    \ number = opening_brackets_length;\n\tlet closing_brackets_length_min_value_2:\
    \ number = closing_brackets_length;\n\tlet opening_brackets_length_max_value_3:\
    \ number = opening_brackets_length;\n\tlet closing_brackets_length_max_value_3:\
    \ number = closing_brackets_length;\n\tlet opening_brackets_length_min_value_3:\
    \ number = opening_brackets_length;\n\tlet closing_brackets_length_min_value_3:\
    \ number = closing_brackets_length;\n\tlet opening_brackets_length_max_value_4:\
    \ number = opening_brackets_length;\n\tlet closing_brackets_length_max_value_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk5apabxl.ts(62,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738784
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\tbrackets.split('<').forEach((bracket: string) => {\n\t\tlet\
    \ opening = bracket.substr(0, 1);\n\t\tlet closing = bracket.substr(1, 1);\n\t\
    \tif (opening === closing) {\n\t\t\topening_brackets.push(opening);\n\t\t\tclosing_brackets.push(closing);\n\
    \t\t} else {\n\t\t\topening_brackets.push(opening);\n\t\t\tclosing_brackets.push(closing);\n\
    \t\t\topening_brackets.push(closing);\n\t\t}\n\t});\n\treturn opening_brackets.every((opening_bracket:\
    \ string) => closing_brackets.indexOf(opening_bracket) !== -1);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzuov2dm_.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzuov2dm_.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738784
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplydbc9jl.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplydbc9jl.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/))\
    \ {\n\t\t\tif (stack.length && stack[stack.length - 1] === bracket) {\n\t\t\t\t\
    stack.pop();\n\t\t\t\tclosing_brackets.push(i);\n\t\t\t} else {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t} else if (bracket.match(/>/)) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif (stack.length !== 1) {\n\t\treturn false;\n\t}\n\tlet opening_bracket\
    \ = opening_brackets[opening_brackets.length - 1];\n\tlet closing_bracket = closing_brackets[closing_brackets.length\
    \ - 1];\n\tif (opening_bracket === closing_bracket) {\n\t\treturn true;\n\t}\n\
    \treturn false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjbngwjm6.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjbngwjm6.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738784
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(i);\n\
    \t\t}\n\t\telse if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(i);\n\
    \t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\t\
    return false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\t\
    let opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
    \t\tif (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif\
    \ (opening_bracket > closing_bracket) {\n\t\t\tlet temp = opening_bracket;\n\t\
    \t\topening_bracket = closing_bracket;\n\t\t\tclosing_bracket = temp;\n\t\t}\n\
    \t\tlet opening_char = brackets[opening_bracket];\n\t\tlet closing_char = brackets[closing_bracket];\n\
    \t\tif (opening_char !== closing_char) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpllu5etmx.js:48:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpllu5etmx.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738784
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.includes(\"<\")) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.includes(\">\")) {\n\t\t\tclosing_brackets.push(i);\n\t\
    \t}\n\t}\n\treturn (\n\t\topening_brackets.length === closing_brackets.length\
    \ &&\n\t\topening_brackets.every((open, index) => {\n\t\t\treturn closing_brackets[index]\
    \ === open;\n\t\t})\n\t);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgp06qi6x.ts(16,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpgp06qi6x.ts(18,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738784
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length > 0) {\n\t\t\t\tlet last = stack[stack.length - 1];\n\t\t\t\t\
    if (last === \">\") {\n\t\t\t\t\tstack.pop();\n\t\t\t\t} else {\n\t\t\t\t\tstack.push(bracket);\n\
    \t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstack.push(bracket);\n\t\t\t}\n\t\t} else if\
    \ (bracket === \">\") {\n\t\t\tif (stack.length > 0) {\n\t\t\t\tlet first = stack[stack.length\
    \ - 1];\n\t\t\t\tif (first === \"<\") {\n\t\t\t\t\tstack.pop();\n\t\t\t\t} else\
    \ {\n\t\t\t\t\tstack.push(bracket);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstack.push(bracket);\n\
    \t\t\t}\n\t\t} else {\n\t\t\tif (stack.length > 0) {\n\t\t\t\tlet first = stack[stack.length\
    \ - 1];\n\t\t\t\tif (first === \">\" && bracket === \"<\") {\n\t\t\t\t\tstack.pop();\n\
    \t\t\t\t} else if (first === \"<\" && bracket === \">\") {\n\t\t\t\t\tstack.pop();\n\
    \t\t\t\t} else if (first === \">\" && bracket === \">\") {\n\t\t\t\t\tstack.push(bracket);\n\
    \t\t\t\t} else if (first === \"<\" && bracket === \"<\") {\n\t\t\t\t\tstack.push(bracket);\n\
    \t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstack.push(bracket);\n\t\t\t}\n\t\t}\n\t}\n\
    \tif (stack.length > 0) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t\
    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpj_isoaxi.js:79:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj_isoaxi.js:87:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738784
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set,\
    \ char) => set.add(char), new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
    \ char) => set.add(char), new Set<string>());\n\treturn opening_brackets_set.size\
    \ == closing_brackets_set.size;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8a4x8cz7.ts(14,87): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp8a4x8cz7.ts(15,87): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659738784
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else\
    \ if (bracket === \">\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\t\
    stack.pop();\n\t\t} else {\n\t\t\tif (stack.length !== 0) return false;\n\t\t\
    }\n\t}\n\treturn (stack.length === 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2n2fl323.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2n2fl323.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set,\
    \ char) => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\t\
    let closing_brackets_set = closing_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\
    \t\treturn set;\n\t}, new Set<string>());\n\treturn opening_brackets_set.size\
    \ == closing_brackets_set.size;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4yfsbhsf.ts(17,9): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp4yfsbhsf.ts(21,9): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659738771
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length !== 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.push(bracket);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length !== 1) {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t} else {\n\t\t\tif (stack.length\
    \ !== 0 && stack[stack.length - 1] !== bracket) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn (stack.length === 0);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgwyhpvq4.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgwyhpvq4.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738784
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\tif (stack.length > 0) {\n\t\treturn false;\n\
    \t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp41_kjmxm.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp41_kjmxm.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738784
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: string[]\
    \ = [];\n\tlet closing_brackets: string[] = [];\n\n\tbrackets.split('').forEach(char\
    \ => {\n\t\tif (char === '<') {\n\t\t\tstack.push('>');\n\t\t} else if (char ===\
    \ '>') {\n\t\t\topening_brackets.push(stack.pop());\n\t\t} else if (char === '<')\
    \ {\n\t\t\tclosing_brackets.push(stack.pop());\n\t\t}\n\t});\n\n\treturn opening_brackets.length\
    \ === closing_brackets.length;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn9xdvct6.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn9xdvct6.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738784
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(bracket);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(bracket);\n\t\
    \t}\n\t}\n\treturn opening_brackets.every((opening_bracket) => {\n\t\treturn closing_brackets.every((closing_bracket)\
    \ => {\n\t\t\treturn opening_bracket === closing_bracket;\n\t\t});\n\t});\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbnf_z4t2.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbnf_z4t2.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738784
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tlet i: number;\n\tlet j: number;\n\
    \tlet bracket: string;\n\tlet opening_bracket: string;\n\tlet closing_bracket:\
    \ string;\n\tlet opening_brackets: number[];\n\tlet closing_brackets: number[];\n\
    \tlet opening_brackets_length: number;\n\tlet closing_brackets_length: number;\n\
    \tlet opening_brackets_lengths: number[];\n\tlet closing_brackets_lengths: number[];\n\
    \tlet opening_brackets_lengths_max: number;\n\tlet closing_brackets_lengths_max:\
    \ number;\n\tlet opening_brackets_lengths_min: number;\n\tlet closing_brackets_lengths_min:\
    \ number;\n\tlet opening_brackets_lengths_sum: number;\n\tlet closing_brackets_lengths_sum:\
    \ number;\n\tlet opening_brackets_lengths_product: number;\n\tlet closing_brackets_lengths_product:\
    \ number;\n\tlet opening_brackets_lengths_product_max: number;\n\tlet closing_brackets_lengths_product_max:\
    \ number;\n\tlet opening_brackets_lengths_product_min: number;\n\tlet closing_brackets_lengths_product_min:\
    \ number;\n\tlet opening_brackets_lengths_product_sum: number;\n\tlet closing_brackets_lengths_product_sum:\
    \ number;\n\tlet opening_brackets_lengths_product_product: number;\n\tlet closing_brackets_lengths_product_product:\
    \ number;\n\tlet opening_brackets_lengths_product_product_max: number;\n\tlet\
    \ closing_brackets_lengths_product_product_max: number;\n\tlet opening_brackets_lengths_product_product_min:\
    \ number;\n\tlet closing_brackets_lengths_product_product_min: number;\n\tlet\
    \ opening_brackets_lengths_product_product_sum: number;\n\tlet closing_brackets_lengths_product_product_sum:\
    \ number;\n\tlet opening_brackets_lengths_product_product_product: number;\n\t\
    let closing_brackets_lengths_product_product_product: number;\n\tlet opening_brackets_lengths_product_product_product_max:\
    \ number;\n\tlet closing_brackets_lengths_product_product_product_max: number;\n\
    \tlet opening_brackets_lengths_product_product_product_min: number;\n\tlet closing_brackets_lengths_product_product_product_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8nex3xkp.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738784
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet c = brackets.charAt(i);\n\t\tif (c == '<') {\n\t\t\tif (stack.length\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top == '>') {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse {\n\
    \t\t\t\tstack.push(c);\n\t\t\t}\n\t\t}\n\t\telse if (c == '>') {\n\t\t\tif (stack.length\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top == '<') {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse {\n\
    \t\t\t\tstack.push(c);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tstack.push(c);\n\t\t\
    }\n\t}\n\tif (stack.length != 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqocg2rvo.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqocg2rvo.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738784
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\t\
    if (stack.length && stack[stack.length - 1] === bracket) {\n\t\t\t\tstack.pop();\n\
    \t\t\t} else {\n\t\t\t\tstack.push(bracket);\n\t\t\t}\n\t\t} else if (bracket.match(/>/))\
    \ {\n\t\t\tif (stack.length && stack[stack.length - 1] === bracket) {\n\t\t\t\t\
    stack.pop();\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn !stack.length;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq5e3gvsj.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq5e3gvsj.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738784
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set,\
    \ char) => {\n\t\tset[char] = true;\n\t\treturn set;\n\t}, {});\n\tlet closing_brackets_set\
    \ = closing_brackets.reduce((set, char) => {\n\t\tset[char] = true;\n\t\treturn\
    \ set;\n\t}, {});\n\treturn !Object.keys(opening_brackets_set).some(char => !closing_brackets_set[char]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy0losluw.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy0losluw.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738784
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    if (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top === \"<\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length\
    \ - 1];\n\t\t\tif (top === \">\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t\
    }\n\tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr6rwxul1.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr6rwxul1.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738779
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\t\
    if (stack.length !== 0) {\n\t\t\t\tclosing_brackets.push(stack.length);\n\t\t\t\
    }\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/>/)) {\n\t\t\tif\
    \ (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\t\t\t\
    }\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/>/>/)) {\n\t\t\t\
    if (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\t\t\t\
    \tclosing_brackets.push(stack.length);\n\t\t\t}\n\t\t\tstack.push(bracket);\n\t\
    \t} else if (bracket.match(/></)) {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\t\
    closing_brackets.push(stack.length);\n\t\t\t}\n\t\t\tstack.push(bracket);\n\t\t\
    } else if (bracket.match(/></>)) {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\t\
    opening_brackets.push(stack.length);\n\t\t\t}\n\t\t\tstack.push(bracket);\n\t\t\
    } else if (bracket.match(/></>/>/)) {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\
    \topening_brackets.push(stack.length);\n\t\t\t\tclosing_brackets.push(stack.length);\n\
    \t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/></>/>/>/))\
    \ {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\
    \t\t\t\tclosing_brackets.push(stack.length);\n\t\t\t}\n\t\t\tstack.push(bracket);\n\
    \t\t} else if (bracket.match(/></>/>/>/>/)) {\n\t\t\tif (stack.length !== 0) {\n\
    \t\t\t\topening_brackets.push(stack.length);\n\t\t\t\tclosing_brackets.push(stack.length);\n\
    \t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/></>/>/>/>/>/))\
    \ {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\
    \t\t\t\tclosing_brackets.push(stack.length);\n\t\t\t}\n\t\t\tstack.push(bracket);\n\
    \t\t} else if (bracket.match(/></>/>/>/>/>/>/)) {\n\t\t\tif (stack.length !==\
    \ 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\t\t\t\tclosing_brackets.push(stack.length);\n\
    \t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket.match(/></>/>/>/>/>/>/>/))\
    \ {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.length);\n\
    \t\t\t\t\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjswsakr7.ts(27,33): error TS1161: Unterminated regular
    expression literal.

    ../../../../../tmp/tmpjswsakr7.ts(28,4): error TS1005: '','' expected.

    ../../../../../tmp/tmpjswsakr7.ts(33,5): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpjswsakr7.ts(38,33): error TS1109: Expression expected.

    ../../../../../tmp/tmpjswsakr7.ts(49,38): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpjswsakr7.ts(50,4): error TS1005: '','' expected.

    ../../../../../tmp/tmpjswsakr7.ts(55,5): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpjswsakr7.ts(61,42): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpjswsakr7.ts(62,4): error TS1005: '','' expected.

    ../../../../../tmp/tmpjswsakr7.ts(67,3): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpjswsakr7.ts(67,5): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpjswsakr7.ts(73,46): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpjswsakr7.ts(74,4): error TS1005: '','' expected.

    ../../../../../tmp/tmpjswsakr7.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738784
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tlet i = 0;\n\tlet j\
    \ = 0;\n\twhile (i < opening_brackets_count && j < closing_brackets_count) {\n\
    \t\tif (opening_brackets[i] !== closing_brackets[j]) {\n\t\t\treturn false;\n\t\
    \t}\n\t\ti++;\n\t\tj++;\n\t}\n\treturn i === opening_brackets_count && j === closing_brackets_count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplfop3f0s.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplfop3f0s.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738785
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\t\
    stack.push(bracket);\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/))\
    \ {\n\t\t\tif (stack.length > 0) {\n\t\t\t\tlet opening = stack[stack.length -\
    \ 1];\n\t\t\t\tclosing_brackets.push(opening_brackets[opening_brackets.length\
    \ - 1]);\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t} else if (bracket.match(/>/)) {\n\
    \t\t\tif (stack.length > 0) {\n\t\t\t\tlet opening = stack[stack.length - 1];\n\
    \t\t\t\tclosing_brackets.push(opening_brackets[opening_brackets.length - 1]);\n\
    \t\t\t\tstack.pop();\n\t\t\t}\n\t\t} else if (bracket.match(/>/)) {\n\t\t\tif\
    \ (stack.length > 0) {\n\t\t\t\tlet opening = stack[stack.length - 1];\n\t\t\t\
    \tclosing_brackets.push(opening_brackets[opening_brackets.length - 1]);\n\t\t\t\
    \tstack.pop();\n\t\t\t}\n\t\t} else if (bracket.match(/</)) {\n\t\t\tif (stack.length\
    \ > 0) {\n\t\t\t\tlet opening = stack[stack.length - 1];\n\t\t\t\tclosing_brackets.push(opening_brackets[opening_brackets.length\
    \ - 1]);\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t} else if (bracket.match(/</)) {\n\
    \t\t\tif (stack.length > 0) {\n\t\t\t\tlet opening = stack[stack.length - 1];\n\
    \t\t\t\tclosing_brackets.push(opening_brackets[opening_brackets.length - 1]);\n\
    \t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (stack.length > 0) {\n\t\tlet\
    \ opening = stack[stack.length - 1];\n\t\tclosing_brackets.push(opening_brackets[opening_brackets.length\
    \ - 1]);\n\t}\n\n\tfor (let i = 0; i < closing_brackets.length; i++) {\n\t\tlet\
    \ bracket = brackets.substring(closing_brackets[i], closing_brackets[i + 1]);\n\
    \t\tif (bracket.match(/</)) {\n\t\t\tbracket = bracket.substring(0, bracket.length\
    \ - 1);\n\t\t}\n\t\tif (bracket.match(/</)) {\n\t\t\tbracket = bracket.substring(0,\
    \ bracket.length - 1);\n\t\t}\n\t\tif (bracket.match(/</)) {\n\t\t\tbracket =\
    \ bracket.substring(0, bracket.length - 1);\n\t\t}\n\t\tif (bracket.match(/</))\
    \ {\n\t\t\tbracket = bracket.substring(0, bracket.length - 1);\n\t\t}\n\t\tif\
    \ (bracket.match(/</)) {\n\t\t\tbracket = bracket.substring(0, bracket.length\
    \ - 1);\n\t\t}\n\t\tif (bracket.match(/</)) {\n\t\t\tbracket = bracket.substring(0,\
    \ bracket.length - 1);\n\t\t}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppjmfgws3.ts(99,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738785
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    stack.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
    \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\
    \t\t\tif (opening !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplydbc9jl.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplydbc9jl.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738771
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\t\
    opening_brackets.push(i);\n\t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\
    \t\t} else if (bracket.includes(\"<\")) {\n\t\t\tstack.push(bracket);\n\t\t} else\
    \ if (bracket.includes(\">\")) {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\tlet opening_bracket = opening_brackets.pop();\n\t\t\t\
    let closing_bracket = closing_brackets.pop();\n\t\t\tif (opening_bracket !== closing_bracket)\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy3o4mdao.ts(22,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpy3o4mdao.ts(24,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738785
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\n\tfor (let i = 0; i\
    \ < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket !==\
    \ closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdvw_6x7t.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdvw_6x7t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket\
    \ > closing_bracket) {\n\t\t\tlet tmp = opening_bracket;\n\t\t\topening_bracket\
    \ = closing_bracket;\n\t\t\tclosing_bracket = tmp;\n\t\t}\n\t\tlet tmp = opening_bracket;\n\
    \t\topening_bracket = closing_bracket;\n\t\tclosing_bracket = tmp;\n\t\tlet bracket\
    \ = brackets[opening_bracket];\n\t\tif (bracket !== \"<\" && bracket !== \">\"\
    ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpd_a__ulf.js:55:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd_a__ulf.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738785
- exit_code: 2
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tlet opening_brackets: number[]\
    \ = [];\n\tlet closing_brackets: number[] = [];\n\n\tfor (let i = 0; i < brackets.length;\
    \ ++i) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.includes(\"<\")) {\n\
    \t\t\topening_brackets.push(i);\n\t\t} else if (bracket.includes(\">\")) {\n\t\
    \t\tclosing_brackets.push(i);\n\t\t} else {\n\t\t\tstack.push(bracket);\n\t\t\
    }\n\t}\n\n\twhile (opening_brackets.length > 0) {\n\t\tlet opening_bracket = opening_brackets.pop();\n\
    \t\tlet closing_bracket = closing_brackets.pop();\n\t\tif (opening_bracket ===\
    \ closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket > closing_bracket)\
    \ {\n\t\t\tclosing_brackets.push(closing_bracket);\n\t\t} else {\n\t\t\topening_brackets.push(opening_bracket);\n\
    \t\t}\n\t}\n\n\treturn (opening_brackets.length === 0 && closing_brackets.length\
    \ === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiatxqy2k.ts(18,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpiatxqy2k.ts(20,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738785
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet c = brackets[i];\n\t\tif (c == \"<\") {\n\t\t\tstack.push(\"\
    <<\");\n\t\t} else if (c == \">\") {\n\t\t\tif (stack.length == 0) {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\tlet top = stack.pop();\n\t\t\tif (top != \"<<\"\
    ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tstack.push(c);\n\t\t\
    }\n\t}\n\tif (stack.length != 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738785
