name: HumanEval_130_tri
language: ts
prompt: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n\
  // tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) =\
  \ 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given\
  \ a non-negative integer number n, you have to a return an array of the \n// first\
  \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1,\
  \ 3, 2, 8]\nfunction tri(n: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
  \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
  \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
  \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
  \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15,\
  \ 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5,\
  \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
  \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
completions: ["  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n ===\
    \ 2) return [1, 1, 2];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2), tri(n\
    \ - 1) + tri(n - 1)];\n  return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n -\
    \ 1) + tri(n - 2)];\n}\n", "    if (n === 0) return [];\n    if (n === 1) return\
    \ [1];\n    if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)];\n}\n", "  if (n === 1) {\n    return [1];\n\
    \  }\n  if (n === 2) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0) {\n   \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 2) + tri(n + 1);\n}\n", "    if (n === 0 || n ===\
    \ 1) {\n        return [n, n, n];\n    }\n    let arr: number[] = [];\n    arr.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    return arr;\n}\n", "  if (n === 1) {\n\
    \    return [1];\n  }\n  if (n === 2) {\n    return [1, 1];\n  }\n  if (n % 2\
    \ === 0) {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  }\n  return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\n",
  "  if (n === 1) {\n    return [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1,\
    \ 2, 1];\n  }\n  if (n % 2 === 0) {\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1);\n  }\n  return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2);\n}\n", "    if (n === 0) return [];\n    if (n === 1) return\
    \ [1];\n    if (n === 2) return [1, 1, 2];\n    if (n % 2 === 0) return [tri(n\
    \ - 1), tri(n - 2), tri(n + 1)];\n    return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1);\n}\n", "  let result: number[] = [];\n  let first: number = 1;\n  let second:\
    \ number = 1;\n  let third: number = 1;\n  let fourth: number = 1;\n  let fifth:\
    \ number = 1;\n  if (n === 1) {\n    result.push(first);\n  } else {\n    for\
    \ (let i = 1; i <= n; i++) {\n      third = first + second;\n      fourth = second\
    \ + third;\n      fifth = third + fourth;\n      result.push(fifth);\n      first\
    \ = second;\n      second = third;\n    }\n  }\n  return result;\n}\n", "  let\
    \ result: number[] = [];\n  let first = 1;\n  let second = 2;\n  let third = 3;\n\
    \  let fourth = 1;\n  let fifth = 2;\n  let sixth = 3;\n  let seventh = 1;\n \
    \ let eighth = 2;\n  let nineth = 3;\n  let tenth = 1;\n  let eleventh = 2;\n\
    \  let twelfth = 3;\n  let thirteenth = 1;\n  let fourteenth = 2;\n  let fifteenth\
    \ = 3;\n  let sixteenth = 1;\n  let seventeenth = 2;\n  let eighteenth = 3;\n\
    \  let nineteenth = 1;\n  let twentieth = 2;\n  let twentyfirst = 1;\n  let twentysecond\
    \ = 2;\n  let twentythird = 3;\n  let twentyfourth = 1;\n  let twentyfifth = 2;\n\
    \  let twentysixth = 3;\n  let twentyseventh = 1;\n  let twentyeighth = 2;\n \
    \ let twentynineth = 3;\n  let thirtieth = 1;\n  let thirtyfirst = 1;\n  let thirtysecond\
    \ = 2;\n  let thirtythird = 3;\n  let thirtyfourth = 1;\n  let thirtyfifth = 2;\n\
    \  let thirtysixth = 3;\n  let thirtyseventh = 1;\n  let thirtyeighth = 2;\n \
    \ let thirtynineth = 3;\n  let fourtieth = 1;\n  let fourtyfirst = 1;\n  let fourtysecond\
    \ = 2;\n  let fourtythird = 3;\n  let fourtyfourth = 1;\n  let fourtyfifth = 2;\n\
    \  let fourtysixth = 3;\n  let fourtyseventh = 1;\n  let fourtyeighth = 2;\n \
    \ let fourtynineth = 3;\n  let fiftieth = 1;\n  let fiftyfirst = 1;\n  let fiftysecond\
    \ = 2;\n  let fiftythird = 3;\n  let fiftyfourth = 1;\n  let fiftyfifth = 2;\n\
    \  let fiftysixth = 3;\n  let fiftyseventh = 1;\n  let fiftyeighth = 2;\n  let\
    \ fiftynineth = 3;\n  let sixtieth = 1;\n  let sixtyfirst = 1;\n  let sixtysecond\
    \ = 2;\n  let sixtythird = 3;\n  let sixtyfourth = 1;\n  let sixtyfifth = 2;\n\
    \  let sixtysixth = 3;\n  let sixtyseventh = 1;\n  let sixtyeighth = 2;\n  let\
    \ sixtynineth = 3;\n  let seventieth = 1;\n  let seventyfirst = 1;\n  let seventysecond\
    \ = 2;\n  let seventythird = 3;\n  let seventyfourth = 1;\n  let se", "  let result:\
    \ number[] = [];\n  result.push(3);\n  if (n % 2 === 0) {\n    result.push(1);\n\
    \    result.push(n / 2);\n  } else {\n    result.push(1);\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return result;\n}\n", "    if (n ===\
    \ 0 || n === 1) {\n        return [];\n    }\n    let result: number[] = [];\n\
    \    let first: number = 1;\n    let second: number = 2;\n    let third: number\
    \ = 3;\n    for (let i = 3; i <= n; i++) {\n        result.push(first);\n    \
    \    result.push(second);\n        result.push(third);\n        first++;\n   \
    \     second++;\n        third++;\n    }\n    return result;\n}\n", "  if (n ===\
    \ 1) {\n    return [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n\
    \  }\n  if (n === 3) {\n    return [1, 1, 2];\n  }\n  if (n % 2 === 0) {\n   \
    \ return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n - 2), tri(n\
    \ - 1) + tri(n - 1) + tri(n - 2)];\n  }\n  return [tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1), tri(n - 1) + tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1)];\n}\n", "  let arr: number[] = [];\n  if (n === 1) {\n    arr.push(1);\n\
    \    return arr;\n  }\n  if (n === 2) {\n    arr.push(3);\n    return arr;\n \
    \ }\n  if (n % 2 === 0) {\n    arr.push(tri(n - 1) + tri(n - 2));\n  } else {\n\
    \    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return arr;\n}\n",
  "  let result: number[] = [];\n  let first = 1;\n  let second = 1;\n  let third\
    \ = 1;\n  for (let i = 1; i <= n; i++) {\n    result.push(first);\n    result.push(second);\n\
    \    result.push(third);\n    third = first + second + third;\n    first = second;\n\
    \    second = third;\n  }\n  return result;\n}\n", "    let result: number[] =\
    \ [];\n    let temp: number[] = [1, 1];\n    for (let i = 1; i <= n; i++) {\n\
    \        temp.push(temp[temp.length - 2] + temp[temp.length - 1]);\n        result.push(temp[temp.length\
    \ - 1]);\n    }\n    return result;\n}\n", "  if (n === 0) return [];\n  if (n\
    \ === 1) return [3, 1];\n  if (n === 2) return [3, 1];\n  if (n % 2 === 0) return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)];\n  return [tri(n - 1) +\
    \ tri(n - 2), tri(n - 2) + tri(n - 1)];\n}\n", "  if (n === 1) {\n    return [1,\
    \ 1, 1];\n  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 === 0)\
    \ {\n    return [1, 1, 1];\n  }\n  return [1, 1, 2, (n - 1) / 2, (n - 1) / 2 +\
    \ 1];\n}\n", "  let arr: number[] = [];\n  let first: number = 1;\n  let second:\
    \ number = 2;\n  let third: number = 3;\n  let fourth: number = 4;\n  if (n ===\
    \ 1) {\n    arr.push(first);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(second);\n\
    \    return arr;\n  }\n  if (n === 3) {\n    arr.push(third);\n    return arr;\n\
    \  }\n  if (n === 4) {\n    arr.push(fourth);\n    return arr;\n  }\n  if (n %\
    \ 2 === 0) {\n    arr.push(first);\n    arr.push(second);\n    arr.push(third);\n\
    \    arr.push(fourth);\n    return arr;\n  }\n  arr.push(first);\n  arr.push(third);\n\
    \  arr.push(fourth);\n  arr.push(second);\n  arr.push(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n  return arr;\n}\n", "  if (n === 1) {\n    return [1, 1, 1];\n\
    \  }\n  if (n === 2) {\n    return [1, 2, 1];\n  }\n  if (n % 2 === 0) {\n   \
    \ return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n - 1)];\n  }\n\
    \  return [tri(n - 1) + tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 2), tri(n\
    \ - 1)];\n}\n", "  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n\
    \ === 2) return [1, 1, 2];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2),\
    \ tri(n - 1) + tri(n - 1)];\n  return [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n\
    \ - 1)];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
