name: HumanEval_116_sort_array
language: ts
prompt: "//In this Kata, you have to sort an array of non-negative integers according\
  \ to\n// number of ones in their binary representation in ascending order.\n// For\
  \ similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
  \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
  // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2,\
  \ 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
  \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
  \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
  \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4,\
  \ 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2,\
  \ 4, 8, 16, 32]);\n}\n\ntest();"
completions: ["  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n\
    \  const ones = arr.map((x) => x > 0 ? 1 : 0);\n  const maxOnes = Math.max(...ones);\n\
    \  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesLen = maxOnesIndex\
    \ + 1;\n  const maxOnesArr = new Array(maxOnesLen).fill(0);\n  for (let i = 0;\
    \ i < len; i++) {\n    maxOnesArr[maxOnesIndex] += arr[i];\n  }\n  const maxOnesArrLen\
    \ = maxOnesArr.length;\n  const maxOnesArrIndex = new Array(maxOnesLen).fill(0);\n\
    \  for (let i = 0; i < maxOnesArrLen; i++) {\n    maxOnesArrIndex[i] = maxOnesArr.indexOf(Math.max(...maxOnesArr.slice(0,\
    \ i)));\n  }\n  const maxOnesArrIndexLen = maxOnesArrIndex.length;\n  const maxOnesArrIndexArr\
    \ = new Array(maxOnesArrIndexLen).fill(0);\n  for (let i = 0; i < maxOnesArrIndexLen;\
    \ i++) {\n    maxOnesArrIndexArr[i] = maxOnesArrIndex[i];\n  }\n  const maxOnesArrIndexArrLen\
    \ = maxOnesArrIndexArr.length;\n  const maxOnesArrIndexArrArr = new Array(maxOnesArrIndexArrLen).fill(0);\n\
    \  for (let i = 0; i < maxOnesArrIndexArrLen; i++) {\n    maxOnesArrIndexArrArr[i]\
    \ = maxOnesArrIndexArr[i];\n  }\n  const maxOnesArrIndexArrArrLen = maxOnesArrIndexArrArr.length;\n\
    \  const maxOnesArrIndexArrArrArr = new Array(maxOnesArrIndexArrArrLen).fill(0);\n\
    \  for (let i = 0; i < maxOnesArrIndexArrArrLen; i++) {\n    maxOnesArrIndexArrArrArr[i]\
    \ = maxOnesArrIndexArrArr[i];\n  }\n  const maxOnesArrIndexArrArrArrLen = maxOnesArrIndexArrArrArr.length;\n\
    \  const maxOnesArrIndexArrArrArrArr = new Array(maxOnesArrIndexArrArrArrLen).fill(0);\n\
    \  for (let i = 0; i < maxOnesArrIndexArrArrArrLen; i++) {\n    maxOnesArrIndexArrArrArrArr[i]\
    \ = maxOnesArrIndexArrArrArr[i];\n  }\n  const maxOnesArrIndexArrArrArrArrLen\
    \ = maxOnesArrIndexArrArrArrArr.length;\n  const maxOnesArrIndexArrArrArrArrArr\
    \ = new Array(maxOnesArrIndexArrArrArrArrLen).fill(0);\n  for (let i = 0; i <\
    \ max", "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n\
    \  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2,\
    \ Math.ceil(Math.log(ones) / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes)\
    \ / Math.LN10));\n  const decs = arr.map(val => Math.trunc(val * maxDec) / maxDec);\n\
    \  const decIndex = decs.indexOf(Math.min.apply(null, decs));\n  const decs =\
    \ decs.map((val, i) => [val, decIndex]);\n  const decIndex = decs[decIndex][1];\
    \ // find index of decIndex\n  const decs = decs.map((val, i) => [val, i]);\n\
    \  const decIndex = decs[decIndex][1]; // find index of decIndex\n  const decs\
    \ = decs.map((val, i) => [val, i]);\n  const decIndex = decs[decIndex][1]; //\
    \ find index of decIndex\n  const decs = decs.map((val, i) => [val, i]);\n  const\
    \ decIndex = decs[decIndex][1]; // find index of decIndex\n  const decs = decs.map((val,\
    \ i) => [val, i]);\n  const decIndex = decs[decIndex][1]; // find index of decIndex\n\
    \  const decs = decs.map((val, i) => [val, i]);\n  const decIndex = decs[decIndex][1];\
    \ // find index of decIndex\n  const decs = decs.map((val, i) => [val, i]);\n\
    \  const decIndex = decs[decIndex][1]; // find index of decIndex\n  const decs\
    \ = decs.map((val, i) => [val, i]);\n  const decIndex = decs[decIndex][1]; //\
    \ find index of decIndex\n  const decs = decs.map((val, i) => [val, i]);\n  const\
    \ decIndex = decs[decIndex][1]; // find index of decIndex\n  const decs = decs.map((val,\
    \ i) => [val, i]);\n  const decIndex = decs[decIndex][1]; // find index of decIndex\n\
    \  const decs = decs.map((val, i) => [val, i]);\n  const decIndex = decs[decIndex][1];\
    \ // find index of decIndex\n  const decs = decs.map((val, i) => [val, i]);\n\
    \  const decIndex = decs[decIndex][1]; // find index of decIndex\n  const decs\
    \ = decs.map((val, i) => [val, i]);\n  const decIndex = decs[decIndex][1]; //\
    \ find index of decIndex\n  const decs = decs.map((val, i) => [val, i]);\n  const\
    \ decIndex = decs[decIndex][1]; // find index of decIndex\n  const decs = decs.",
  "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len\
    \ === 1) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc\
    \ + val, 0);\n  const twos = arr.reduce((acc, val) => acc + val, 1);\n  const\
    \ tens = arr.reduce((acc, val) => acc + val, 10);\n  const tensOnes = tens * ones;\n\
    \  const tensTwos = tens * twos;\n  const tensThrees = tens * threes;\n  const\
    \ tensFours = tens * fours;\n  const tensFives = tens * fives;\n  const tensSixes\
    \ = tens * sixes;\n  const tensSevens = tens * sevens;\n  const tensEights = tens\
    \ * eights;\n  const tensNines = tens * nines;\n  const tensTens = tens * tens;\n\
    \  const tensElevens = tens * elevens;\n  const tensTwelves = tens * twelves;\n\
    \  const tensThirteens = tens * thirteens;\n  const tensFourteens = tens * fourteens;\n\
    \  const tensFifteens = tens * fifteens;\n  const tensSixteens = tens * sixteens;\n\
    \  const tensSeventeens = tens * seventeens;\n  const tensEighteens = tens * eighteens;\n\
    \  const tensNineteens = tens * nineteens;\n  const tensTwentys = tens * twentys;\n\
    \  const tensTwentyFours = tens * twentyFours;\n  const tensTwentyFives = tens\
    \ * twentyFives;\n  const tensTwentySixes = tens * twentySixes;\n  const tensTwentySevens\
    \ = tens * twentySevens;\n  const tensTwentyEights = tens * twentyEights;\n  const\
    \ tensTwentyNines = tens * twentyNines;\n  const tensThirtyOnes = tens * thirtyOnes;\n\
    \  const tensThirtyTwos = tens * thirtyTwos;\n  const tensThirtyThrees = tens\
    \ * thirtyThrees;\n  const tensThirtyFours = tens * thirtyFours;\n  const tensThirtyFives\
    \ = tens * thirtyFives;\n  const tensThirtySixes = tens * thirtySixes;\n  const\
    \ tens", "  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n\
    \    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n",
  "  return arr.sort((a, b) => {\n    const aNum = parseInt(a.toString(), 2);\n  \
    \  const bNum = parseInt(b.toString(), 2);\n    return aNum - bNum;\n  });\n}\n",
  "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
    \ = arr.filter((v) => v === 1);\n  const len = ones.length;\n  if (len === 0)\
    \ {\n    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
    \  const maxDec = Math.pow(10, maxOnes);\n  const decs = ones\n    .map((v) =>\
    \ Math.round(v * maxDec) / maxDec)\n    .sort();\n  const decLen = decs.length;\n\
    \  const decsLen = Math.ceil(Math.log(decLen) / Math.LN2);\n  const decsLen2 =\
    \ decsLen / 2;\n  const decsLen4 = decsLen / 4;\n  const decsLen8 = decsLen /\
    \ 8;\n  const decsLen16 = decsLen / 16;\n  const decsLen32 = decsLen / 32;\n \
    \ const decsLen64 = decsLen / 64;\n  const decsLen128 = decsLen / 128;\n  const\
    \ decsLen256 = decsLen / 256;\n  const decsLen512 = decsLen / 512;\n  const decsLen1024\
    \ = decsLen / 1024;\n  const decsLen2048 = decsLen / 2048;\n  const decsLen4096\
    \ = decsLen / 4096;\n  const decsLen8192 = 0;\n  const decsLen16384 = 0;\n  const\
    \ decsLen32768 = 0;\n  const decsLen65536 = 0;\n  const decsLen131072 = 0;\n \
    \ const decsLen262144 = 0;\n  const decsLen524288 = 0;\n  const decsLen1048576\
    \ = 0;\n  const decsLen2097152 = 0;\n  const decsLen4194304 = 0;\n  const decsLen8388608\
    \ = 0;\n  const decsLen16777216 = 0;\n  const decsLen33554432 = 0;\n  const decsLen67108864\
    \ = 0;\n  const decsLen134217728 = 0;\n  const decsLen268435456 = 0;\n  const\
    \ decsLen536870912 = 0;\n  const decsLen1073741824 = 0;\n  const decsLen2147483648\
    \ = 0;\n  const decsLen4294967296 = 0;\n  const decsLen8589934592 = 0;\n  const\
    \ decsLen17179869184 = 0;\n  const decsLen34359738368 = 0;\n  const decsLen68719476736\
    \ = 0;\n  const decsLen137438953472 = 0;\n  const decsLen2748779069", "  const\
    \ len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones =\
    \ count_ones(arr);\n  const cmp = compare(ones);\n  if (cmp === 0) {\n    return\
    \ arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => cmp(a, b));\n  return\
    \ arr;\n}\n", "  return arr.sort((a, b) => {\n    const aStr = a.toString(2);\n\
    \    const bStr = b.toString(2);\n    if (aStr === bStr) {\n      return 0;\n\
    \    }\n    return aStr < bStr ? -1 : 1;\n  });\n}\n", "  arr.sort((a, b) => {\n\
    \    const ones = count_ones(b);\n    if (ones === 0) {\n      return a.localeCompare(b);\n\
    \    }\n    const ones_comp = count_ones(a) - ones;\n    if (ones_comp === 0)\
    \ {\n      return b.localeCompare(a);\n    }\n    return ones_comp * count_ones(b)\
    \ / count_ones(a);\n  });\n  return arr;\n}\n", "  arr.sort((a, b) => {\n    if\
    \ (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n   \
    \ }\n    return -1;\n  });\n  return arr;\n}\n", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n \
    \ const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const\
    \ maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(a => a.length));\n\
    \  const maxLenDiff = Math.abs(maxLen - len);\n  if (maxLenDiff === 0) {\n   \
    \ return arr;\n  }\n  const onesDiff = maxOnes - ones[0];\n  const arr = arr.sort((a,\
    \ b) => {\n    const aDiff = count_ones(a) - ones[0];\n    const bDiff = count_ones(b)\
    \ - ones[0];\n    if (aDiff === 0) {\n      return bDiff;\n    }\n    if (bDiff\
    \ === 0) {\n      return aDiff;\n    }\n    return aDiff - bDiff;\n  });\n  for\
    \ (let i = 0; i < len; i++) {\n    arr[i].length = maxLen;\n  }\n  return arr;\n\
    }\n", "  return arr.sort((a, b) => a - b);\n}\n", "  return arr.sort((a, b) =>\
    \ {\n    if (a === 0) return 1\n    if (b === 0) return -1\n    const aBin = bin(a)\n\
    \    const bBin = bin(b)\n    const aLen = aBin.length\n    const bLen = bBin.length\n\
    \    if (aLen > bLen) return 1\n    if (aLen < bLen) return -1\n    const aOnes\
    \ = aBin.substr(aLen - bLen)\n    const bOnes = bBin.substr(aLen - bLen)\n   \
    \ return aOnes.localeCompare(bOnes)\n  })\n}\n", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n\
    \  }\n  if (len === 2) {\n    if (arr[0] === arr[1]) {\n      return arr;\n  \
    \  }\n    return [arr[0], arr[1]];\n  }\n  if (len === 3) {\n    if (arr[0] ===\
    \ arr[1] && arr[1] === arr[2]) {\n      return arr;\n    }\n    return [arr[0],\
    \ arr[1], arr[2]];\n  }\n  if (len === 4) {\n    if (arr[0] === arr[1] && arr[1]\
    \ === arr[2] && arr[2] === arr[3]) {\n      return arr;\n    }\n    return [arr[0],\
    \ arr[1], arr[2], arr[3]];\n  }\n  if (len === 5) {\n    if (arr[0] === arr[1]\
    \ && arr[1] === arr[2] && arr[2] === arr[3] && arr[3] === arr[4]) {\n      return\
    \ arr;\n    }\n    return [arr[0], arr[1], arr[2], arr[3], arr[4]];\n  }\n  if\
    \ (len === 6) {\n    if (arr[0] === arr[1] && arr[1] === arr[2] && arr[2] ===\
    \ arr[3] && arr[3] === arr[4] && arr[4] === arr[5]) {\n      return arr;\n   \
    \ }\n    return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]];\n  }\n  if (len\
    \ === 7) {\n    if (arr[0] === arr[1] && arr[1] === arr[2] && arr[2] === arr[3]\
    \ && arr[3] === arr[4] && arr[4] === arr[5] && arr[5] === arr[6]) {\n      return\
    \ arr;\n    }\n    return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]];\n\
    \  }\n  if (len === 8) {\n    if (arr[0] === arr[1] && arr[1] === arr[2] && arr[2]\
    \ === arr[3] && arr[3] === arr[4] && arr[4] === arr[5] && arr[5] === arr[6] &&\
    \ arr[6] === arr[7]) {\n      return arr;\n    }\n    return [arr[0], arr[1],\
    \ arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]];\n  }\n  if (len === 9) {\n\
    \    if (arr[0] === arr[1] && arr[1] === arr[2] && arr[2] === arr[3] && arr[3]\
    \ === arr[4] && arr[4] === arr[5] && arr[5] === arr[6] && arr[6] === arr[7] &&\
    \ arr[7] === arr[8]) {\n      return arr;\n    }\n    return [arr[0], arr[1],\
    \ arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8]];\n  }\n  if (len ===\
    \ 10) {\n    if (arr[0] === arr[1] && arr[1] === arr[2] && ", "  const len = arr.length;\n\
    \  if (len < 2) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const\
    \ len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const arr =\
    \ arr.slice();\n  arr.sort((a, b) => {\n    const aOnes = count_ones(a);\n   \
    \ const bOnes = count_ones(b);\n    const aLen = aOnes.length;\n    const bLen\
    \ = bOnes.length;\n    if (aLen === bLen) {\n      return aOnes.indexOf(bOnes)\
    \ - (aOnes.indexOf(aOnes) * -1);\n    }\n    return aLen - bLen;\n  });\n  return\
    \ arr;\n}\n", "  return arr.sort((a, b) => {\n    if (a === 0) return 1\n    if\
    \ (b === 0) return -1\n    if (a > b) return 1\n    if (a < b) return -1\n   \
    \ return 0\n  })\n}\n", "  const len = arr.length;\n  if (len === 0) {\n    return\
    \ arr;\n  }\n  const ones = arr.map(n => n & 1);\n  const dec = arr.map(n => n\
    \ & 1 ? -1 : n);\n  const dec = dec.sort((a, b) => a - b);\n  const decLen = dec.length;\n\
    \  const onesLen = ones.length;\n  const newArr = new Array(len);\n  for (let\
    \ i = 0; i < len; i++) {\n    const onesIndex = onesLen - dec.indexOf(i);\n  \
    \  newArr[i] = ones[onesIndex];\n  }\n  return newArr;\n}\n", "  const len = arr.length;\n\
    \  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter(x => x ===\
    \ 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n\
    \  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n  const maxOnesLen =\
    \ Math.max(maxOnes, len);\n  const maxOnesLenLen = Math.ceil(Math.log(maxOnesLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLen = Math.ceil(Math.log(maxOnesLenLen) /\
    \ Math.LN2);\n  const maxOnesLenLenLen = Math.ceil(Math.log(maxOnesLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLen = Math.ceil(Math.log(maxOnesLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOne", " \
    \ const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
    \ = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones)\
    \ / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n\
    \  const decs = maxDec / maxOnes;\n  const decToOnes = Math.pow(10, decs);\n \
    \ const onesToDecs = ones / decs;\n  const onesToDecToOnes = onesToDecs / decToOnes;\n\
    \  const onesToDecToOnesArray = onesToDecToOnes.map(val => Math.round(val));\n\
    \  return arr.sort((a, b) => {\n    const aOnes = onesToDecToOnesArray[a - 1];\n\
    \    const bOnes = onesToDecToOnesArray[b - 1];\n    return aOnes - bOnes;\n \
    \ });\n}\n", "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n \
    \ }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len ===\
    \ 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen\
    \ = Math.max(...arr.map(a => a.length));\n  const maxLenDiff = Math.abs(maxLen\
    \ - len);\n  if (maxOnes <= maxLenDiff) {\n    return arr;\n  }\n  const maxOnesDiff\
    \ = Math.abs(maxOnes - len);\n  const maxOnesDiffIndex = arr.findIndex(a => a\
    \ === maxOnes);\n  const maxOnesDiffIndexDiff = Math.abs(maxOnesDiffIndex - len);\n\
    \  const maxOnesDiffIndexDiffIndex = arr.findIndex(a => a === maxOnesDiffIndex);\n\
    \  const maxOnesDiffIndexDiffIndexDiff = Math.abs(maxOnesDiffIndexDiffIndex -\
    \ len);\n  const maxOnesDiffIndexDiffIndexDiffIndex = arr.findIndex(a => a ===\
    \ maxOnesDiffIndexDiffIndex);\n  const maxOnesDiffIndexDiffIndexDiffIndexDiff\
    \ = Math.abs(maxOnesDiffIndexDiffIndexDiffIndex - len);\n  const maxOnesDiffIndexDiffIndexDiffIndexDiffIndex\
    \ = arr.findIndex(a => a === maxOnesDiffIndexDiffIndexDiffIndex);\n  const maxOnesDiffIndexDiffIndexDiffIndexDiffIndexDiff\
    \ = Math.abs(maxOnesDiffIndexDiffIndexDiffIndexDiffIndex - len);\n  const maxOnesDiffIndexDiffIndexDiffIndexDiffIndexDiffIndex\
    \ = arr.findIndex(a => a === maxOnesDiffIndexDiffIndexDiffIndexDiffIndex);\n \
    \ const maxOnesDiffIndexDiffIndexDiffIndexDiffIndexDiffIndexDiff = Math.abs(maxOnesDiffIndexDiffIndexDiffIndexDiffIndexDiffIndex\
    \ - len);\n  const maxOnesDiffIndexDiffIndexDiffIndexDiffIndexDiffIndexDiffIndex\
    \ = arr.findIndex(a => a === maxOnesDiffIndexDiffIndexDiffIndexDiffIndexDiffIndex);\n\
    \  const maxOnesDiffIndexDiffIndexDiffIndexDiffIndexDiffIndexDiffIndexDiff = Math.abs(maxOnesDiffIndexDiffIndexDiffIndexDiffIndexDiffIndexDiffIndex\
    \ - len);\n  const maxOnesDiffIndexDiffIndexDiffIndexDiffIndexDiffIndexDiffIndexDiffIndex\
    \ = arr.findIndex(a => a === maxOnesDiffIndexDiffIndexDiffIndexDiffIndexDiffIndexDiffIndex);\n\
    \  const maxOnesDiffIndexDiffIndexDiffIndexDiffIndexDiffIndexDiffIndexDiffIndexDiff\
    \ = Math.abs(maxOnesDiffIndexDiffIndexDiffIndexDiffIndexDiffIndexDiffIndexDiffIndex\
    \ - len);\n  const maxOnes", "  const len = arr.length;\n  if (len < 2) {\n  \
    \  return arr;\n  }\n  const ones = arr.filter((v) => v === 1);\n  const decs\
    \ = arr.filter((v) => v === -1).sort((a, b) => a - b);\n  const decLen = decs.length;\n\
    \  const oneLen = ones.length;\n  const maxLen = Math.max(decLen, oneLen);\n \
    \ const maxOnes = Math.max(oneLen, decLen);\n  const maxDecs = Math.max(decLen,\
    \ oneLen);\n  const maxOnesLen = Math.max(maxOnes, maxLen);\n  const maxDecsLen\
    \ = Math.max(maxDecs, maxLen);\n  const decArr = new Array(maxDecsLen).fill(0);\n\
    \  const oneArr = new Array(maxOnesLen).fill(0);\n  for (let i = 0; i < len; i++)\
    \ {\n    if (decLen <= i) {\n      decArr[decLen] = arr[i];\n      decLen++;\n\
    \    } else if (oneLen <= i) {\n      oneArr[oneLen] = arr[i];\n      oneLen++;\n\
    \    } else {\n      const decVal = decs[i];\n      const oneVal = ones[i];\n\
    \      if (decVal > oneVal) {\n        decArr[i] = decVal;\n        decLen++;\n\
    \      } else {\n        oneArr[i] = oneVal;\n        oneLen++;\n      }\n   \
    \ }\n  }\n  return decArr.concat(oneArr);\n}\n", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n\
    \  }\n  if (len === 2) {\n    if (arr[0] === arr[1]) {\n      return arr;\n  \
    \  }\n    return [arr[0], arr[1]];\n  }\n  const mid = Math.floor(len / 2);\n\
    \  const left = arr.slice(0, mid);\n  const right = arr.slice(mid);\n  return\
    \ sort_array(left).concat(sort_array(right));\n}\n", "  return arr.sort((a, b)\
    \ => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a === 0\
    \ && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 0) {\n     \
    \ return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n \
    \   if (a === 0 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b\
    \ === 0) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return\
    \ 0;\n    }\n    if (a === 0 && b === 1) {\n      return -1;\n    }\n    if (a\
    \ === 1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n\
    \      return 0;\n    }\n    if (a === -1 && b === 0) {\n      return 1;\n   \
    \ }\n    if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === 0\
    \ && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n \
    \     return 0;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n\
    \    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 1 && b ===\
    \ 0) {\n      return -1;\n    }\n    if (a === 0 && b === -1) {\n      return\
    \ -1;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n    if\
    \ (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === 1)\
    \ {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n\
    \    }\n    if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a ===\
    \ 0 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n\
    \      return 1;\n    }\n    if (a === -1 && b === 0) {\n      return 1;\n   \
    \ }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 1 &&\
    \ b === -1) {\n      return -1;\n    }\n    if (a === 0 && b === -1) {\n     \
    \ return -1;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n\
    \    if (a === -1 && b === 0) {\n      return 1;\n    }\n    if (a === 1 && b\
    \ === 1) {\n      return 0;\n    }\n    if (a === 1 && b === 0) {\n      return\
    \ -1;\n    }\n    if (a === 0 && b === 0) {\n      return -1;\n    }\n    if (a\
    \ === -1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === 1)\
    \ {\n      return 0;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n\
    \    }\n    if (a === 1 && b === 0) {\n      return -1;\n    }\n    if (a ===\
    \ 0 && b === 0) {\n      return ", "  const len = arr.length;\n  if (len === 0)\
    \ {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val,\
    \ 0);\n  const len = Math.ceil(Math.log(ones) / Math.LN2);\n  const sorted = new\
    \ Array(len);\n  for (let i = 0; i < len; i++) {\n    sorted[i] = 0;\n  }\n  for\
    \ (let i = 0; i < len; i++) {\n    sorted[len - (i + 1)] = arr[i];\n  }\n  return\
    \ sorted;\n}\n", "  return arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n\
    \      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n\
    \    if (a === 1 && b === 0) {\n      return -1;\n    }\n    if (a === 1 && b\
    \ === 1) {\n      return 0;\n    }\n    if (a === 0 && b === -1) {\n      return\
    \ 1;\n    }\n    if (a === -1 && b === 0) {\n      return -1;\n    }\n    if (a\
    \ === -1 && b === -1) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n\
    \      return -1;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\n  \
    \  }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a === -1\
    \ && b === -1) {\n      return -1;\n    }\n    if (a === 0 && b === -1) {\n  \
    \    return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n\
    \    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 &&\
    \ b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return\
    \ -1;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\n    }\n    if (a\
    \ === 1 && b === 1) {\n      return 0;\n    }\n    if (a === -1 && b === -1) {\n\
    \      return -1;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n  \
    \  }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === 1\
    \ && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n  \
    \    return 1;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n\
    \    if (a === 0 && b === 1) {\n      return -1;\n    }\n    if (a === 1 && b\
    \ === 1) {\n      return 0;\n    }\n    if (a === 1 && b === -1) {\n      return\
    \ -1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if\
    \ (a === -1 && b === 1) {\n      return 0;\n    }\n  });\n}\n", "  arr.sort((a,\
    \ b) => a - b);\n  return arr;\n}\n", "  const len = arr.length;\n  if (len <\
    \ 2) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x === 1);\n  if\
    \ (ones.length === 0) {\n    return arr;\n  }\n  const len = ones.length;\n  const\
    \ maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n  const maxDec = Math.pow(10,\
    \ maxOnes);\n  const maxDecStr = maxDec.toString();\n  const decStr = maxDec.toFixed(maxOnes);\n\
    \  const decStrLen = decStr.length;\n  const decLen = decStrLen + decStrLen;\n\
    \  const decArr = new Array(len);\n  for (let i = 0; i < len; i++) {\n    decArr[i]\
    \ = Math.floor(Math.pow(10, maxOnes - i) * len / Math.pow(10, maxDec));\n  }\n\
    \  const decArrStr = decArr.toString();\n  const decArrStrLen = decArrStr.length;\n\
    \  const decArrLen = decArrStrLen + decArrStrLen;\n  const decArrLenStr = decArrLen\
    \ + decArrStrLen;\n  const decArrLenStrArr = new Array(decArrLen);\n  for (let\
    \ i = 0; i < decArrLen; i++) {\n    decArrLenStrArr[i] = decArrStr.substr(i, decArrStrLen);\n\
    \  }\n  const decArrLenStrArrLen = decArrLenStrArr.length;\n  const decArrLenStrArrLenStr\
    \ = decArrLenStrArr.join(\"\");\n  const decArrLenStrArrLenStrArr = new Array(decArrLenStrArrLen);\n\
    \  for (let i = 0; i < decArrLenStrArrLen; i++) {\n    decArrLenStrArrLenStrArr[i]\
    \ = decArrLenStrArrLenStr.substr(i, decArrLenStrArrLen);\n  }\n  const decArrLenStrArrLenStrArrLen\
    \ = decArrLenStrArrLenStrArr.length;\n  const decArrLenStrArrLenStrArrLenStr =\
    \ decArrLenStrArrLenStrArr.join(\"\");\n  const decArrLenStrArrLenStrArrLenStrArr\
    \ = new Array(decArrLenStrArrLenStrArrLen);\n  for (let i = 0; i < decArrLenStrArrLenStrArrLen;\
    \ i++) {\n    decArrLenStrArrLenStrArrLenStrArr[i] = decArrLenStrArrLenStrArrLenStr.substr(i,\
    \ decArrLenStrArrLenStrArrLen);\n  }\n  const decArrLenStrArrLenStrArrLenStrArrLen\
    \ = decArrLenStrArrLenStrArrLenStrArr.length;\n  const decArrLenStrArrLenStrArrLenStrArrLenStr\
    \ = decArrLenStrArrLenStrArr", "  const len = arr.length;\n  if (len < 2) {\n\
    \    return arr;\n  }\n  const ones = arr.map((v) => v.toString(2).split('').reduce((p,\
    \ c) => p + (+c), 0));\n  const dec = ones\n    .map((v) => v.toString().split('').reduce((p,\
    \ c) => p * 2 + +c, 0))\n    .sort((a, b) => a - b);\n  const dec2arr = (dec)\
    \ => {\n    const arr = [];\n    for (let i = 0; i < dec.length; i++) {\n    \
    \  arr.push(dec[i] % 2);\n      dec = dec / 2;\n    }\n    return arr;\n  };\n\
    \  return dec2arr(dec);\n}\n", "  const len = arr.length;\n  if (len === 0) {\n\
    \    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n\
    \  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones) / Math.LN2));\n  const\
    \ maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n  const decs\
    \ = maxDec / maxOnes;\n  const decLen = Math.ceil(Math.log(decs) / Math.LN10);\n\
    \  const decs = decs.toFixed(decLen);\n  const decArr = decs.split('.');\n  const\
    \ decArrLen = decArr.length;\n  const decArrMaxLen = Math.max(decArrLen, decLen);\n\
    \  const decArrPad = decArrLen - decArrMaxLen;\n  const decArrPadChar = decArrPad\
    \ > 0 ? '.' : '';\n  const decArrPadCharArr = new Array(decArrPad).fill(decArrPadChar);\n\
    \  const decArrPadCharArrLen = decArrPadCharArr.length;\n  const decArrPadCharArrPad\
    \ = decArrPadCharArrLen - decArrPadCharArrMaxLen;\n  const decArrPadCharArrPadChar\
    \ = decArrPadCharArrPad > 0 ? '.' : '';\n  const decArrPadCharArrPadCharArr =\
    \ new Array(decArrPadCharArrPad).fill(decArrPadCharArrPadChar);\n  const decArrPadCharArrPadCharArrLen\
    \ = decArrPadCharArrPadCharArr.length;\n  const decArrPadCharArrPadCharArrPad\
    \ = decArrPadCharArrPadCharArrLen - decArrPadCharArrPadCharArrMaxLen;\n  const\
    \ decArrPadCharArrPadCharArrPadChar = decArrPadCharArrPadCharArrPadCharArr.join('');\n\
    \  const decArrPadCharArrPadCharArrPadCharArr = new Array(decArrPadCharArrPadCharArrPad).fill(decArrPadCharArrPadCharArrPadChar);\n\
    \  const decArrPadCharArrPadCharArrPadCharArrLen = decArrPadCharArrPadCharArrPadCharArrPadCharArr.length;\n\
    \  const decArrPadCharArrPadCharArrPadCharArrPad = decArrPadCharArrPadCharArrPadCharArrPadCharArrLen\
    \ - decArrPadCharArrPadCharArrPadCharArrPadCharArrMaxLen;\n  const decArrPadCharArrPadCharArrPadCharArrPadChar\
    \ = decArrPadCharArrPadCharArrPadCharArrPadCharArrPad", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = arr\n    .map(x => parseInt(x.toString(2),\
    \ 10))\n    .filter(x => x > 0);\n  if (ones.length === 0) {\n    return arr;\n\
    \  }\n  const sorted = [];\n  let maxOnes = 0;\n  for (let i = 0; i < len; i++)\
    \ {\n    const one = ones[i];\n    if (one > maxOnes) {\n      maxOnes = one;\n\
    \    }\n  }\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n   \
    \ if (one === maxOnes) {\n      sorted.push(maxOnes);\n    } else {\n      sorted.push(one);\n\
    \    }\n  }\n  return sorted;\n}\n", "  const len = arr.length;\n  if (len ===\
    \ 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const\
    \ ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const maxOnes = Math.pow(2,\
    \ Math.ceil(Math.log(ones) / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes)\
    \ / Math.LN10));\n  const decs = arr.reduce((acc, val) => Math.max(acc, Math.ceil(Math.log(val)\
    \ / Math.LN10)), 0);\n  const decLen = Math.ceil(Math.log(decs) / Math.LN10);\n\
    \  const decsLen = Math.ceil(Math.log(len) / Math.LN10);\n  const decs = decsLen\
    \ > decLen ? decLen : decs;\n  const decPos = decLen - decs;\n  const decs = decsLen\
    \ > decPos ? decPos : decs;\n  const decPos = decLen - decs;\n  const decs = decsLen\
    \ > decPos ? decPos : decs;\n  const decPos = decLen - decs;\n  const decs = decsLen\
    \ > decPos ? decPos : decs;\n  const decPos = decLen - decs;\n  const decs = decsLen\
    \ > decPos ? decPos : decs;\n  const decPos = decLen - decs;\n  const decs = decsLen\
    \ > decPos ? decPos : decs;\n  const decPos = decLen - decs;\n  const decs = decsLen\
    \ > decPos ? decPos : decs;\n  const decPos = decLen - decs;\n  const decs = decsLen\
    \ > decPos ? decPos : decs;\n  const decPos = decLen - decs;\n  const decs = decsLen\
    \ > decPos ? decPos : decs;\n  const decPos = decLen - decs;\n  const decs = decsLen\
    \ > decPos ? decPos : decs;\n  const decPos = decLen - decs;\n  const decs = decsLen\
    \ > decPos ? decPos : decs;\n  const decPos = decLen - decs;\n  const decs = decsLen\
    \ > decPos ? decPos : decs;\n  const decPos = decLen - decs;\n  const decs = decsLen\
    \ > decPos ? decPos : decs;\n  const decPos = decLen - decs;\n  const decs = decsLen\
    \ > decPos ? decPos : decs;\n  const decPos = decLen - decs;\n", "  return arr.sort((a,\
    \ b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n    \
    \  return 1;\n    }\n    return -1;\n  });\n}\n", "  return arr.sort((a, b) =>\
    \ a > b ? 1 : a < b ? -1 : 0);\n}\n", "  const len = arr.length;\n  if (len ===\
    \ 0) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x === 1);\n  if\
    \ (ones.length === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n\
    \  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnesIndex.toString(2);\n\
    \  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinStr = maxOnesBin.substr(0,\
    \ maxOnesBinLen - 1);\n  const maxOnesBinStr = maxOnesBinStr.split(\"\").reverse().join(\"\
    \");\n  const maxOnesBinStr = maxOnesBinStr.split(\"\").map((x) => parseInt(x,\
    \ 2));\n  const maxOnesBinStr = maxOnesBinStr.map((x) => x > 0 ? x : 0);\n  const\
    \ maxOnesBinStr = maxOnesBinStr.map((x) => x > 0 ? x : 0);\n  const maxOnesBinStr\
    \ = maxOnesBinStr.map((x) => x > 0 ? x : 0);\n  const maxOnesBinStr = maxOnesBinStr.map((x)\
    \ => x > 0 ? x : 0);\n  const maxOnesBinStr = maxOnesBinStr.map((x) => x > 0 ?\
    \ x : 0);\n  const maxOnesBinStr = maxOnesBinStr.map((x) => x > 0 ? x : 0);\n\
    \  const maxOnesBinStr = maxOnesBinStr.map((x) => x > 0 ? x : 0);\n  const maxOnesBinStr\
    \ = maxOnesBinStr.map((x) => x > 0 ? x : 0);\n  const maxOnesBinStr = maxOnesBinStr.map((x)\
    \ => x > 0 ? x : 0);\n  const maxOnesBinStr = maxOnesBinStr.map((x) => x > 0 ?\
    \ x : 0);\n  const maxOnesBinStr = maxOnesBinStr.map((x) => x > 0 ? x : 0);\n\
    \  const maxOnesBinStr = maxOnesBinStr.map((x) => x > 0 ? x : 0);\n  const maxOnesBinStr\
    \ = maxOnesBinStr.map((x) => x > 0 ? x : 0);\n  const maxOnesBinStr = maxOnesBinStr.map((x)\
    \ => x > 0 ? x : 0);\n  const maxOnesBinStr = maxOnesBinStr.map((x) => x > 0 ?\
    \ x : 0);\n  const maxOnesBinStr = maxOnesBinStr.map((x) => x > 0 ? x : 0);\n\
    \  const maxOnesBinStr = maxOnesBinStr.map((x) => x > 0 ? x : 0);\n  const maxOnesBin",
  "  arr.sort((a, b) => a - b);\n  return arr;\n}\n", "  return arr.sort((a, b) =>\
    \ {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    if (a < b) return\
    \ -1;\n    if (a > b) return 1;\n    return 0;\n  });\n}\n", "  arr.sort((a, b)\
    \ => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map(x => x === 1\
    \ ? 1 : 0);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(x\
    \ => x.toString().length));\n  const maxLenStr = maxLen > 0 ? maxLen.toString()\
    \ : '';\n  const maxLenLen = maxLenStr.length > 0 ? maxLenStr.length : 0;\n  const\
    \ maxLenLenLen = maxLenLen > 0 ? maxLenLen.toString() : '';\n  const maxLenLenLenLen\
    \ = maxLenLenLen > 0 ? maxLenLenLen.toString() : '';\n  const maxLenLenLenLenLen\
    \ = maxLenLenLen > 0 ? maxLenLenLenLen.toString() : '';\n  const maxLenLenLenLenLenLen\
    \ = maxLenLenLen > 0 ? maxLenLenLenLenLen.toString() : '';\n  const maxLenLenLenLenLenLenLen\
    \ = maxLenLenLen > 0 ? maxLenLenLenLenLenLen.toString() : '';\n  const maxLenLenLenLenLenLenLen\
    \ = maxLenLenLen > 0 ? maxLenLenLenLenLenLen.toString() : '';\n  const maxLenLenLenLenLenLenLen\
    \ = maxLenLenLen > 0 ? maxLenLenLenLenLenLenLen.toString() : '';\n  const maxLenLenLenLenLenLenLenLen\
    \ = maxLenLenLen > 0 ? maxLenLenLenLenLenLenLenLen.toString() : '';\n  const maxLenLenLenLenLenLenLenLen\
    \ = maxLenLenLen > 0 ? maxLenLenLenLenLenLenLenLenLen.toString() : '';\n  const\
    \ maxLenLenLenLenLenLenLenLen = maxLenLenLen > 0 ? maxLenLenLenLenLenLenLenLenLen.toString()\
    \ : '';\n  const maxLenLenLenLenLenLenLenLenLen = maxLenLenLen > 0 ? maxLenLenLenLenLenLenLenLenLenLen.toString()\
    \ : '';\n  const maxLenLenLenLenLenLenLenLenLen = maxLenLenLen > 0 ? maxLenLenLenLenLenLenLenLenLenLenLen.toString()\
    \ : '';\n  const maxLenLenLenLenLenLenLenLenLen = maxLenLenLen > 0 ? maxLenLenLenLenLenLenLenLenLenLenLen.toString()\
    \ : '';\n  const maxLenLenLenLenLenLenLenLenLen = maxLenLenLen > 0 ? maxLenLenLenLenLenLenLenLenLenLenLenLen.toString()\
    \ : '';\n  const maxLenLenLenLenLenLenLenLenLenLen = maxLen", "  return arr.sort((a,\
    \ b) => {\n    const aBin = binToInt(a)\n    const bBin = binToInt(b)\n    if\
    \ (aBin === bBin) {\n      return a.localeCompare(b)\n    }\n    return aBin -\
    \ bBin\n  })\n}\n", "  const len = arr.length;\n  if (len === 0) {\n    return\
    \ arr;\n  }\n  const ones = arr.filter(x => x === 1);\n  if (ones.length === 0)\
    \ {\n    return arr;\n  }\n  const dec = ones[0] * Math.pow(10, Math.floor(Math.log10(ones[0])));\n\
    \  const sorted = arr.sort((a, b) => a - b * dec);\n  return sorted;\n}\n", " \
    \ const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
    \ = arr.map(v => v.toString(2).split('').reduce((acc, v) => acc + +v, 0));\n \
    \ const maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n\
    \  const sortedArr = arr.sort((a, b) => {\n    const aStr = a.toString(2);\n \
    \   const bStr = b.toString(2);\n    const aLen = aStr.length;\n    const bLen\
    \ = bStr.length;\n    if (aLen === bLen) {\n      return aStr - bStr;\n    }\n\
    \    return aLen - bLen;\n  });\n  return sortedArr.map((v, i) => v.toString(2).split('').reduce((acc,\
    \ v) => acc + +v, 0)).slice(0, maxOnesIndex).concat(sortedArr.slice().reverse().map((v,\
    \ i) => v.toString(2).split('').reduce((acc, v) => acc + +v, 0)).slice(0, maxOnesIndex));\n\
    }\n", "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const\
    \ ones = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len ===\
    \ 0) {\n    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
    \  const maxOnesLen = Math.max(maxOnes, len);\n  const maxOnesLenLen = Math.ceil(Math.log(maxOnesLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLen = Math.ceil(Math.log(maxOnesLenLen) /\
    \ Math.LN2);\n  const maxOnesLenLenLen = Math.ceil(Math.log(maxOnesLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLenLen",
  "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
    \ = arr\n    .map((v) => v.toString(2).split('').reduce((p, c) => p + +c, 0))\n\
    \    .filter((v) => v > 0);\n  if (ones.length === 0) {\n    return arr;\n  }\n\
    \  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((v)\
    \ => v.toString(2).length));\n  const maxLenStr = maxLen.toString();\n  const\
    \ maxLenNum = maxLenStr.split('').map((v) => +v);\n  const maxLenNumArr = maxLenNum.map((v)\
    \ => v.toString());\n  const maxLenNumArrLen = maxLenNumArr.length;\n  const maxLenNumArrLenStr\
    \ = maxLenNumArrLen.toString();\n  const maxLenNumArrLenNum = maxLenNumArrLen.split('').map((v)\
    \ => +v);\n  const maxLenNumArrLenNumArr = maxLenNumArrLenNum.map((v) => v.toString());\n\
    \  const maxLenNumArrLenNumArrLen = maxLenNumArrLenNumArr.length;\n  const maxLenNumArrLenNumArrLenStr\
    \ = maxLenNumArrLenNumArrLen.toString();\n  const maxLenNumArrLenNumArrLenNum\
    \ = maxLenNumArrLenNumArrLen.split('').map((v) => +v);\n  const maxLenNumArrLenNumArrLenNumArr\
    \ = maxLenNumArrLenNumArrLenNum.map((v) => v.toString());\n  const maxLenNumArrLenNumArrLenNumArrLen\
    \ = maxLenNumArrLenNumArrLenNumArr.length;\n  const maxLenNumArrLenNumArrLenNumArrLenStr\
    \ = maxLenNumArrLenNumArrLenNumArrLen.toString();\n  const maxLenNumArrLenNumArrLenNumArrLenNum\
    \ = maxLenNumArrLenNumArrLenNumArrLenNum.map((v) => v.toString());\n  const maxLenNumArrLenNumArrLenNumArrLenNumArr\
    \ = maxLenNumArrLenNumArrLenNumArrLenNum.map((v) => v.toString());\n  const maxLenNumArrLenNumArrLenNumArrLenNumArrLen\
    \ = maxLenNumArrLenNumArrLenNumArrLenNumArrLen.toString();\n  const maxLenNumArrLenNumArrLenNumArrLenNumArrLenNum\
    \ = maxLenNumArrLenNumArrLenNumArrLenNumArrLenNum.map((v) => v.toString());\n\
    \  const max", "  return arr.sort((a, b) => {\n    const aNum = parseInt(a.toString(2),\
    \ 2);\n    const bNum = parseInt(b.toString(2), 2);\n    return aNum - bNum;\n\
    \  });\n}\n", "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n\
    \  }\n  const ones = arr.map((x) => x > 0);\n  const decs = arr.map((x) => Math.trunc(x\
    \ * Math.pow(2, x.length)));\n  const sorted = [];\n  let i = 0;\n  while (i <\
    \ len) {\n    const onesCount = ones[i];\n    if (onesCount === 0) {\n      sorted.push(decs[i]);\n\
    \      i++;\n      continue;\n    }\n    const decCount = decs[i];\n    if (decCount\
    \ === 0) {\n      sorted.push(ones[i]);\n      i++;\n      continue;\n    }\n\
    \    if (decCount < onesCount) {\n      sorted.push(decs[i]);\n      i++;\n  \
    \    continue;\n    }\n    sorted.push(ones[i]);\n    i++;\n  }\n  return sorted;\n\
    }\n", "  arr.sort((a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return\
    \ -1\n    return a > b ? 1 : -1\n  })\n  return arr\n}\n", "  return arr.sort((a,\
    \ b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n    \
    \  return 1;\n    }\n    return -1;\n  });\n}\n", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.filter(v => v ===\
    \ 1);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const sorted = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n    const index\
    \ = arr.indexOf(one);\n    if (index === -1) {\n      throw new Error('Not found');\n\
    \    }\n    sorted.push(index);\n  }\n  sorted.sort((a, b) => a - b);\n  const\
    \ result = [];\n  for (let i = 0; i < len; i++) {\n    const index = sorted[i];\n\
    \    result.push(arr[index]);\n  }\n  return result;\n}\n", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((x) => x > 0);\n\
    \  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const\
    \ maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x) => Math.log2(x)));\n\
    \  const maxLen = Math.max(maxLen, Math.log2(maxOnes));\n  const maxLen = Math.max(maxLen,\
    \ Math.log2(len));\n  const maxLen = Math.max(maxLen, Math.log2(len + 1));\n \
    \ const maxLen = Math.max(maxLen, Math.log2(len + 2));\n  const maxLen = Math.max(maxLen,\
    \ Math.log2(len + 3));\n  const maxLen = Math.max(maxLen, Math.log2(len + 4));\n\
    \  const maxLen = Math.max(maxLen, Math.log2(len + 5));\n  const maxLen = Math.max(maxLen,\
    \ Math.log2(len + 6));\n  const maxLen = Math.max(maxLen, Math.log2(len + 7));\n\
    \  const maxLen = Math.max(maxLen, Math.log2(len + 8));\n  const maxLen = Math.max(maxLen,\
    \ Math.log2(len + 9));\n  const maxLen = Math.max(maxLen, Math.log2(len + 10));\n\
    \  const maxLen = Math.max(maxLen, Math.log2(len + 11));\n  const maxLen = Math.max(maxLen,\
    \ Math.log2(len + 12));\n  const maxLen = Math.max(maxLen, Math.log2(len + 13));\n\
    \  const maxLen = Math.max(maxLen, Math.log2(len + 14));\n  const maxLen = Math.max(maxLen,\
    \ Math.log2(len + 15));\n  const maxLen = Math.max(maxLen, Math.log2(len + 16));\n\
    \  const maxLen = Math.max(maxLen, Math.log2(len + 17));\n  const maxLen = Math.max(maxLen,\
    \ Math.log2(len + 18));\n  const maxLen = Math.max(maxLen, Math.log2(len + 19));\n\
    \  const maxLen = Math.max(maxLen, Math.log2(len + 20));\n  const maxLen = Math.max(maxLen,\
    \ Math.log2(len + 21));\n  const maxLen = Math.max(maxLen, Math.log2(len + 22));\n\
    \  const maxLen = Math.max(maxLen, Math.log2(len + 23));\n  const maxLen = Math.max(maxLen,\
    \ Math.log2(len + 24));\n  const maxLen = Math.max(maxLen, Math.log2(len + 25));\n\
    \  const maxLen = Math.max(maxLen, Math.log2(len + 26));\n  const ", "  const\
    \ len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones =\
    \ arr\n    .map((x) => parseInt(x.toString(2), 2))\n    .sort((a, b) => a - b);\n\
    \  const decimals = arr.map((x) => parseInt(x.toString(10), 10));\n  const decimalsLen\
    \ = decimals.length;\n  if (decimalsLen === 0) {\n    return ones;\n  }\n  const\
    \ decimalsOnes = decimals.map((x) => parseInt(x.toString(2), 2));\n  const decimalsOnesLen\
    \ = decimalsOnes.length;\n  if (decimalsOnesLen === 0) {\n    return ones;\n \
    \ }\n  const decimalsOnesSum = decimalsOnes\n    .map((x) => x + 1)\n    .reduce((a,\
    \ b) => a + b, 0);\n  const decimalsOnesSumLen = decimalsOnesSum.length;\n  if\
    \ (decimalsOnesSumLen === 0) {\n    return ones;\n  }\n  const decimalsOnesSumArr\
    \ = decimalsOnesSum.map((x) => parseInt(x.toString(10), 10));\n  const decimalsOnesSumArrLen\
    \ = decimalsOnesSumArr.length;\n  if (decimalsOnesSumArrLen === 0) {\n    return\
    \ ones;\n  }\n  const decimalsOnesSumArrSum = decimalsOnesSumArr\n    .map((x)\
    \ => x + 1)\n    .reduce((a, b) => a + b, 0);\n  const decimalsOnesSumArrSumLen\
    \ = decimalsOnesSumArrSum.length;\n  if (decimalsOnesSumArrSumLen === 0) {\n \
    \   return ones;\n  }\n  const decimalsOnesSumArrSumArr = decimalsOnesSumArrSum.map((x)\
    \ => parseInt(x.toString(2), 2));\n  const decimalsOnesSumArrSumArrLen = decimalsOnesSumArrSumArr.length;\n\
    \  if (decimalsOnesSumArrSumArrLen === 0) {\n    return ones;\n  }\n  const decimalsOnesSumArrSumArrSum\
    \ = decimalsOnesSumArrSumArr\n    .map((x) => x + 1)\n    .reduce((a, b) => a\
    \ + b, 0);\n  const decimalsOnesSumArrSumArrSumLen = decimalsOnesSumArrSumArrSum.length;\n\
    \  if (decimalsOnesSumArrSumArrSumLen === 0) {\n    return ones;\n  }\n  const\
    \ decimalsOnesSumArrSumArrSumArr = decimalsOnesSumArrSumArrSum.map((x) => parseInt(x.toString(2),\
    \ 2));\n  const decimalsOnesSumArrSumArrSumArrLen = decimalsOnesSumArrSumArrSumArr.length;\n",
  "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
    \ = arr.filter(x => x === 1);\n  const dec = ones.length * 10;\n  const dec =\
    \ dec > 0 ? dec : 0;\n  const arr2 = arr.slice();\n  arr2.sort((a, b) => {\n \
    \   if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n\
    \    }\n    return 1;\n  });\n  for (let i = 0; i < len; i++) {\n    if (arr2[i]\
    \ !== arr[i]) {\n      arr2.splice(i, 0, arr[i]);\n    }\n  }\n  return arr2;\n\
    }\n", "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n",
  "  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n   \
    \ if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n", "  const\
    \ len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1)\
    \ {\n    return arr;\n  }\n  if (len === 2) {\n    if (arr[0] === arr[1]) {\n\
    \      return arr;\n    }\n    return [arr[0], arr[1]];\n  }\n  const mid = Math.floor(len\
    \ / 2);\n  const left = arr.slice(0, mid);\n  const right = arr.slice(mid);\n\
    \  return sort_array(left).concat(sort_array(right));\n}\n", "  arr.sort((a, b)\
    \ => {\n    const aNum = count_ones(a);\n    const bNum = count_ones(b);\n   \
    \ if (aNum === bNum) {\n      return a - b;\n    }\n    return aNum - bNum;\n\
    \  });\n  return arr;\n}\n", "  const len = arr.length;\n  if (len === 0) {\n\
    \    return arr;\n  }\n  const ones = arr.filter(v => v === 1);\n  if (ones.length\
    \ === 0) {\n    return arr;\n  }\n  const dec = Math.log10(ones[0]);\n  const\
    \ dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 3);\n  const dec = Math.max(dec,\
    \ 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const\
    \ dec = Math.ceil(dec / 3);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10,\
    \ dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 3);\n  const\
    \ dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
    \  const dec = Math.ceil(dec / 3);\n  const dec = Math.max(dec, 0);\n  const dec\
    \ = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec\
    \ / 3);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n \
    \ const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 3);\n  const dec\
    \ = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
    \  const dec = Math.ceil(dec / 3);\n  const dec = Math.max(dec, 0);\n  const dec\
    \ = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec\
    \ / 3);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n \
    \ const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 3);\n  const dec\
    \ = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
    \  const dec = Math.ceil(dec / 3);\n  const dec = Math.max(dec, 0);\n  const dec\
    \ = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec\
    \ / 3);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n \
    \ const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 3);\n  const dec\
    \ = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
    \  const dec = Math.ceil(dec / 3);\n  const dec = Math.max(dec, 0);\n  const dec\
    \ = Math.pow(10, ", "  const len = arr.length;\n  if (len === 0) {\n    return\
    \ arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes\
    \ = Math.pow(2, Math.ceil(Math.log(ones) / Math.LN2));\n  const maxDec = Math.pow(2,\
    \ Math.ceil(Math.log(maxOnes) / Math.LN10));\n  const decs = maxDec / maxOnes;\n\
    \  const decLen = Math.ceil(Math.log(decs) / Math.LN10);\n  const decsLen = Math.ceil(Math.log(len)\
    \ / Math.LN10);\n  const decArr = new Array(decLen);\n  for (let i = 0; i < decLen;\
    \ i++) {\n    decArr[i] = Math.pow(10, i * decs);\n  }\n  const decArrLen = decArr.length;\n\
    \  const decArrArr = new Array(decArrLen);\n  for (let i = 0; i < decArrLen; i++)\
    \ {\n    decArrArr[i] = new Array(len);\n    for (let j = 0; j < len; j++) {\n\
    \      decArrArr[i][j] = decArr[i][j] * Math.pow(10, j);\n    }\n  }\n  const\
    \ decArrArrLen = decArrArr.length;\n  const decArrArrArr = new Array(decArrArrLen);\n\
    \  for (let i = 0; i < decArrArrLen; i++) {\n    decArrArrArr[i] = new Array(len);\n\
    \    for (let j = 0; j < len; j++) {\n      decArrArrArr[i][j] = decArrArr[i][j];\n\
    \    }\n  }\n  const decArrArrArrLen = decArrArrArr.length;\n  const decArrArrArrArr\
    \ = new Array(decArrArrArrLen);\n  for (let i = 0; i < decArrArrArrLen; i++) {\n\
    \    decArrArrArrArr[i] = new Array(len);\n    for (let j = 0; j < len; j++) {\n\
    \      decArrArrArrArr[i][j] = decArrArrArr[i][j];\n    }\n  }\n  const decArrArrArrArrLen\
    \ = decArrArrArrArr.length;\n  const decArrArrArrArrArr = new Array(decArrArrArrArrLen);\n\
    \  for (let i = 0; i < decArrArrArrArrLen; i++) {\n    decArrArrArrArrArr[i] =\
    \ new Array(len);\n    for (let j = 0; j < len; j++) {\n      decArrArrArrArrArr[i][j]\
    \ = decArrArrArrArr[i][j];\n    }\n  }\n  const decArrArrArrArrArrLen = decArrArrArrArrArr.length;\n\
    \  const decArrArrArrArrArrArr = new Array(decArrArrArrArrArrLen);\n  for (let\
    \ i = 0; i < decArrArrArrArrArrLen; i++) {\n    decArrArrArrArrArrArr[i] = new\
    \ Array(len);\n    for (let j = 0; j < len; j++) {\n      decArrArrArrArrArrArr[i][j]\
    \ = decArrArr", "  return arr.sort((a, b) => {\n    const aBits = count_bits(a)\n\
    \    const bBits = count_bits(b)\n    if (aBits === bBits) {\n      return a -\
    \ b\n    }\n    return aBits - bBits\n  })\n}\n", "  arr.sort((a, b) => {\n  \
    \  if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a === 0 && b ===\
    \ 1) {\n      return 1;\n    }\n    if (a === 1 && b === 0) {\n      return -1;\n\
    \    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === -1\
    \ && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n   \
    \   return -1;\n    }\n    if (a === -1 && b === 0) {\n      return 0;\n    }\n\
    \    if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b\
    \ === 1) {\n      return 0;\n    }\n    if (a === 0 && b === -1) {\n      return\
    \ 1;\n    }\n    if (a === 0 && b === 1) {\n      return 0;\n    }\n    if (a\
    \ === -1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === 1)\
    \ {\n      return 1;\n    }\n  });\n  return arr;\n}\n", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = arr\n    .map((v) =>\
    \ v.toString(2).split('').reduce((a, b) => a + +b, 0))\n    .filter((v) => v >\
    \ 0);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n\
    \  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((v)\
    \ => v.toString(2).split('').reduce((a, b) => a + +b, 0)));\n  const maxLenStr\
    \ = maxLen.toString();\n  const maxLenNum = maxLenStr.split('').reduce((a, b)\
    \ => a + +b, 0);\n  const maxLenNumStr = maxLenNum.toString();\n  const maxLenNumStrArr\
    \ = maxLenNumStr.split('');\n  const maxLenNumStrArrLen = maxLenNumStrArr.length;\n\
    \  const maxLenNumStrArrLenArr = maxLenNumStrArrLen.split('');\n  const maxLenNumStrArrLenArrLen\
    \ = maxLenNumStrArrLenArr.length;\n  const maxLenNumStrArrLenArrLenArr = maxLenNumStrArrLenArrLen.split('');\n\
    \  const maxLenNumStrArrLenArrLenArrLen = maxLenNumStrArrLenArrLenArr.length;\n\
    \  const maxLenNumStrArrLenArrLenArrLenArr = maxLenNumStrArrLenArrLenArrLen.split('');\n\
    \  const maxLenNumStrArrLenArrLenArrLenArrLen = maxLenNumStrArrLenArrLenArrLenArrLen.split('');\n\
    \  const maxLenNumStrArrLenArrLenArrLenArrLenArr = maxLenNumStrArrLenArrLenArrLenArrLen.split('');\n\
    \  const maxLenNumStrArrLenArrLenArrLenArrLenArrLen = maxLenNumStrArrLenArrLenArrLenArrLenArrLen.split('');\n\
    \  const maxLenNumStrArrLenArrLenArrLenArrLenArrLenArr = maxLenNumStrArrLenArrLenArrLenArrLenArrLen.split('');\n\
    \  const maxLenNumStrArrLenArrLenArrLenArrLenArrLenArrLen = maxLenNumStrArrLenArrLenArrLenArrLenArrLenArrLen.split('');\n\
    \  const maxLenNumStrArrLenArrLenArrLenArrLenArrLenArrLen = maxLenNumStrArrLenArrLenArrLenArrLenArrLenArrLen.split('');\n\
    \  const maxLenNumStrArrLenArrLenArrLenArrLenArrLenArrLenArrLen = maxLenNumStrArrLenArrLenArr",
  "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n", "  const\
    \ len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones =\
    \ arr.filter(x => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
    \    return arr;\n  }\n  if (len === 1) {\n    return ones;\n  }\n  const twos\
    \ = arr.filter(x => x === 2);\n  const len = twos.length;\n  if (len === 0) {\n\
    \    return arr;\n  }\n  if (len === 1) {\n    return twos;\n  }\n  const threes\
    \ = arr.filter(x => x === 3);\n  const len = threes.length;\n  if (len === 0)\
    \ {\n    return arr;\n  }\n  if (len === 1) {\n    return threes;\n  }\n  const\
    \ fours = arr.filter(x => x === 4);\n  const len = fours.length;\n  if (len ===\
    \ 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return fours;\n  }\n  const\
    \ fives = arr.filter(x => x === 5);\n  const len = fives.length;\n  if (len ===\
    \ 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return fives;\n  }\n  const\
    \ sixes = arr.filter(x => x === 6);\n  const len = sixes.length;\n  if (len ===\
    \ 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return sixes;\n  }\n  const\
    \ sevens = arr.filter(x => x === 7);\n  const len = sevens.length;\n  if (len\
    \ === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return sevens;\n  }\n\
    \  const eights = arr.filter(x => x === 8);\n  const len = eights.length;\n  if\
    \ (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return eights;\n\
    \  }\n  const nines = arr.filter(x => x === 9);\n  const len = nines.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return nines;\n\
    \  }\n  const tens = arr.filter(x => x === 10);\n  const len = tens.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return tens;\n\
    \  }\n  const elevens = arr.filter(x => x === 11);\n  const len = elevens.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return elevens;\n\
    \  }\n  const twelves = arr.filter(x => x === 12);\n  const len = twelves.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return twelves;\n\
    \  }\n  const thirteens = arr.filter(x => x === 13);\n  const len = thirteens.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  if (len", "  const len = arr.length;\n\
    \  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((v) => v.toString(2).split('').reduce((p,\
    \ c) => p + +c, 0));\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...ones.map(v\
    \ => v.length));\n  const maxLenLen = Math.max(...ones.map(v => v.length + v.length));\n\
    \  const maxLenLenLen = Math.max(...ones.map(v => v.length + v.length + v.length));\n\
    \  const maxLenLenLenLen = Math.max(...ones.map(v => v.length + v.length + v.length\
    \ + v.length));\n  const maxLenLenLenLen = Math.max(...ones.map(v => v.length\
    \ + v.length + v.length + v.length + v.length));\n  const maxLenLenLenLenLen =\
    \ Math.max(...ones.map(v => v.length + v.length + v.length + v.length + v.length\
    \ + v.length));\n  const maxLenLenLenLenLen = Math.max(...ones.map(v => v.length\
    \ + v.length + v.length + v.length + v.length + v.length + v.length));\n  const\
    \ maxLenLenLenLenLen = Math.max(...ones.map(v => v.length + v.length + v.length\
    \ + v.length + v.length + v.length + v.length + v.length));\n  const maxLenLenLenLenLen\
    \ = Math.max(...ones.map(v => v.length + v.length + v.length + v.length + v.length\
    \ + v.length + v.length + v.length + v.length));\n  const maxLenLenLenLenLen =\
    \ Math.max(...ones.map(v => v.length + v.length + v.length + v.length + v.length\
    \ + v.length + v.length + v.length + v.length + v.length));\n  const maxLenLenLenLenLen\
    \ = Math.max(...ones.map(v => v.length + v.length + v.length + v.length + v.length\
    \ + v.length + v.length + v.length + v.length + v.length + v.length));\n  const\
    \ maxLenLenLenLenLen = Math.max(...ones.map(v => v.length + v.length + v.length\
    \ + v.length + v.length + v.length + v.length + v.length + v.length + v.length\
    \ + v.length + v.length));\n  const maxLenLenLenLenLen = Math.max(...ones.map(v\
    \ => v.length + v.length + v.length + v.length + v.length + v.length + v.length\
    \ + v.length + v.length + v.length + v.length + v.length + v.length));\n  const\
    \ maxLen", "  return arr.sort((a, b) => {\n    const aBits = binToInt(a);\n  \
    \  const bBits = binToInt(b);\n    return aBits - bBits;\n  });\n}\n", "  const\
    \ len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.reduce((acc,\
    \ val) => acc + val, 0);\n  const dec = Math.log(ones) / Math.LN2;\n  const decs\
    \ = dec < 0 ? Math.ceil(dec) : Math.floor(dec);\n  const bins = Array(decs).fill(0).map((_,\
    \ i) => Math.pow(2, i));\n  const binSums = bins.reduce((acc, val) => acc + val,\
    \ 0);\n  const decSums = binSums / bins.length;\n  const decs = decs;\n  const\
    \ binSums = binSums;\n  const decSums = decSums;\n  const decs = decs;\n  const\
    \ bins = bins;\n  const binSums = binSums;\n  const decSums = decSums;\n  const\
    \ decs = decs;\n  const bins = bins;\n  const binSums = binSums;\n  const decSums\
    \ = decSums;\n  const decs = decs;\n  const bins = bins;\n  const binSums = binSums;\n\
    \  const decSums = decSums;\n  const decs = decs;\n  const bins = bins;\n  const\
    \ binSums = binSums;\n  const decSums = decSums;\n  const decs = decs;\n  const\
    \ bins = bins;\n  const binSums = binSums;\n  const decSums = decSums;\n  const\
    \ decs = decs;\n  const bins = bins;\n  const binSums = binSums;\n  const decSums\
    \ = decSums;\n  const decs = decs;\n  const bins = bins;\n  const binSums = binSums;\n\
    \  const decSums = decSums;\n  const decs = decs;\n  const bins = bins;\n  const\
    \ binSums = binSums;\n  const decSums = decSums;\n  const decs = decs;\n  const\
    \ bins = bins;\n  const binSums = binSums;\n  const decSums = decSums;\n  const\
    \ decs = decs;\n  const bins = bins;\n  const binSums = binSums;\n  const decSums\
    \ = decSums;\n  const decs = decs;\n  const bins = bins;\n  const binSums = binSums;\n\
    \  const decSums = decSums;\n  const decs = decs;\n  const bins = bins;\n  const\
    \ binSums = binSums;\n  const decSums = decSums;\n  const decs = decs;\n  const\
    \ bins = bins;\n  const binSums = binSums;\n  const decSums = decSums;\n  const\
    \ decs = decs;\n  const bin", "  arr.sort((a, b) => {\n    if (a === 0) return\
    \ 1;\n    if (b === 0) return -1;\n    const aBin = bin(a);\n    const bBin =\
    \ bin(b);\n    const aLen = aBin.length;\n    const bLen = bBin.length;\n    const\
    \ aOnes = aLen - aBin.indexOf(\"1\");\n    const bOnes = bLen - bBin.indexOf(\"\
    1\");\n    if (aOnes === bOnes) return aLen - bLen;\n    return aOnes - bOnes;\n\
    \  });\n  return arr;\n}\n", "  const len = arr.length;\n  if (len === 0) {\n\
    \    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + (val ===\
    \ 1 ? 1 : 0), 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones) / Math.LN2));\n\
    \  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n  const\
    \ decs = arr.map(val => Math.pow(10, Math.ceil(Math.log(val) / Math.LN10)));\n\
    \  const decIndex = decs.indexOf(Math.max(...decs));\n  const decVal = decs[decIndex];\n\
    \  const decLen = decIndex + 1;\n  const decMax = Math.pow(10, decLen);\n  const\
    \ decMin = Math.pow(10, decLen - 1);\n  const decRange = decMax - decMin;\n  const\
    \ decScale = decRange / decMax;\n  const decScaleMin = decMin / decMax;\n  const\
    \ decScaleMax = 1 / decMax;\n  const decScaleRange = decScaleMax - decScaleMin;\n\
    \  const decScaleScale = decScale / decScaleRange;\n  const decScaleScaleMin =\
    \ decScaleMin / decScaleRange;\n  const decScaleScaleMax = 1 / decScaleRange;\n\
    \  const decScaleScaleRange = decScaleScaleMax - decScaleScaleMin;\n  const decScaleScaleScale\
    \ = decScale / decScaleScaleRange;\n  const decScaleScaleScaleMin = decScaleScaleMin\
    \ / decScaleScaleRange;\n  const decScaleScaleScaleMax = 1 / decScaleScaleRange;\n\
    \  const decScaleScaleScaleRange = decScaleScaleScaleMax - decScaleScaleScaleMin;\n\
    \  const decScaleScaleScaleScale = decScale / decScaleScaleScaleRange;\n  const\
    \ decScaleScaleScaleScaleMin = decScaleScaleScaleMin / decScaleScaleScaleRange;\n\
    \  const decScaleScaleScaleScaleMax = 1 / decScaleScaleScaleRange;\n  const decScaleScaleScaleScaleRange\
    \ = decScaleScaleScaleScaleMax - decScaleScaleScaleScaleMin;\n  const decScaleScaleScaleScaleScale\
    \ = decScale / decScaleScaleScaleScaleRange;\n  const decScaleScaleScaleScaleScaleMin\
    \ = decScaleScaleScaleScaleMin / decScaleScaleScaleScaleRange;\n  const decScaleScaleScaleScaleScaleMax\
    \ = 1 / decScaleScaleScaleScaleRange;\n  const decScaleScaleScaleScaleScaleRange\
    \ = decScaleScaleScaleScaleScaleMax - decScaleScaleScaleScaleScaleMin;\n  const\
    \ decScaleScaleScaleScaleScaleScale = decScale / decScaleScaleScaleScaleScaleRange;\n\
    \  const ", "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n\
    \  const ones = arr\n    .map((v) => v.toString(2).split('').reduce((a, b) =>\
    \ +a + +b, 0))\n    .filter((v) => v > 0);\n  const len = ones.length;\n  if (len\
    \ === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max.apply(null, ones);\n\
    \  const maxLen = Math.max.apply(null, arr.map((v) => v.toString(2).split('').reduce((a,\
    \ b) => +a + +b, 0)));\n  const maxLenStr = maxLen.toString(2);\n  const maxLenArr\
    \ = maxLenStr.split('').reduce((a, b) => +a + +b, 0);\n  const maxLenArrStr =\
    \ maxLenArr.toString(2);\n  const maxLenArrStrLen = maxLenArrStr.length;\n  const\
    \ maxLenArrStrArr = maxLenArrStr.split('');\n  const maxLenArrStrArrLen = maxLenArrStrArr.length;\n\
    \  const maxLenArrStrArrArrLen = maxLenArrStrArrArr.length;\n  const maxLenArrStrArrArrArrLen\
    \ = maxLenArrStrArrArrArr.length;\n  const maxLenArrStrArrArrArrArrLen = maxLenArrStrArrArrArrArr.length;\n\
    \  const maxLenArrStrArrArrArrArrArrLen = maxLenArrStrArrArrArrArrArr.length;\n\
    \  const maxLenArrStrArrArrArrArrArrArrLen = maxLenArrStrArrArrArrArrArrArr.length;\n\
    \  const maxLenArrStrArrArrArrArrArrArrArrLen = maxLenArrStrArrArrArrArrArrArrArr.length;\n\
    \  const maxLenArrStrArrArrArrArrArrArrArrArrLen = maxLenArrStrArrArrArrArrArrArrArrArrArrArr.length;\n\
    \  const maxLenArrStrArrArrArrArrArrArrArrArrArrArrLen = maxLenArrStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr",
  "  return arr.sort((a, b) => {\n    const ones = count_ones(a);\n    const twos\
    \ = count_ones(b);\n    if (ones < twos) {\n      return -1;\n    }\n    if (ones\
    \ > twos) {\n      return 1;\n    }\n    return a - b;\n  });\n}\n", "  const\
    \ len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((val)\
    \ => val.toString(2).split('').reduce((acc, cur) => acc + cur === '1' ? 1 : 0,\
    \ 0));\n  const maxOnes = Math.max(...ones);\n  const maxDec = Math.max.apply(null,\
    \ ones.map(val => val.toString().split('').reduce((acc, cur) => acc + cur ===\
    \ '1' ? 1 : 0, 0)));\n  const decs = ones.map(val => val.toString().split('').reduce((acc,\
    \ cur) => acc + cur === '1' ? 1 : 0, 0));\n  const decArr = decs.map((val, i)\
    \ => val.toString(10).padStart(maxDec, '0'));\n  const decArr2 = decs.map((val,\
    \ i) => val.toString(10).padStart(maxDec, '0'));\n  const decArr3 = decs.map((val,\
    \ i) => val.toString(10).padStart(maxDec, '0'));\n  const decArr4 = decs.map((val,\
    \ i) => val.toString(10).padStart(maxDec, '0'));\n  const decArr5 = decs.map((val,\
    \ i) => val.toString(10).padStart(maxDec, '0'));\n  const decArr6 = decs.map((val,\
    \ i) => val.toString(10).padStart(maxDec, '0'));\n  const decArr7 = decs.map((val,\
    \ i) => val.toString(10).padStart(maxDec, '0'));\n  const decArr8 = decs.map((val,\
    \ i) => val.toString(10).padStart(maxDec, '0'));\n  const decArr9 = decs.map((val,\
    \ i) => val.toString(10).padStart(maxDec, '0'));\n  const decArr10 = decs.map((val,\
    \ i) => val.toString(10).padStart(maxDec, '0'));\n  const decArr11 = decs.map((val,\
    \ i) => val.toString(10).padStart(maxDec, '0'));\n  const decArr12 = decs.map((val,\
    \ i) => val.toString(10).padStart(maxDec, '0'));\n  const decArr13 = decs.map((val,\
    \ i) => val.toString(10).padStart(maxDec, '0'));\n  const decArr14 = decs.map((val,\
    \ i) => val.toString(10).padStart(maxDec, '0'));\n  const decArr15 = decs.map((val,\
    \ i) => val.toString(10).padStart(maxDec, '0'));\n  const decArr16 = decs.map((val,\
    \ i) => val.toString(10).", "  const len = arr.length;\n  if (len < 2) {\n   \
    \ return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return sort_array(arr.filter(v\
    \ => v === ones[0]));\n  }\n  const sorted = arr.slice();\n  sorted.sort((a, b)\
    \ => {\n    const aOnes = count_ones(a);\n    const bOnes = count_ones(b);\n \
    \   if (aOnes < bOnes) {\n      return -1;\n    }\n    if (aOnes > bOnes) {\n\
    \      return 1;\n    }\n    const aDecimal = count_decimal_places(a);\n    const\
    \ bDecimal = count_decimal_places(b);\n    if (aDecimal < bDecimal) {\n      return\
    \ -1;\n    }\n    if (aDecimal > bDecimal) {\n      return 1;\n    }\n    return\
    \ 0;\n  });\n  return sorted;\n}\n", "  const len = arr.length;\n  if (len ===\
    \ 0) {\n    return arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n\
    \  if (ones.length === 0) {\n    return arr;\n  }\n  const len = ones.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n\
    \  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnes.toString(2);\n\
    \  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinLenLen = maxOnesBinLen\
    \ + 1;\n  const maxOnesBinLenStr = Array(maxOnesBinLenLen).fill('0').join('');\n\
    \  const maxOnesBinStr = maxOnesBinLen + maxOnesBin;\n  const maxOnesBinStrLen\
    \ = maxOnesBinStr.length;\n  const maxOnesBinStrLenLen = maxOnesBinStrLen + 1;\n\
    \  const maxOnesBinStrStr = Array(maxOnesBinStrLenLen).fill('0').join('');\n \
    \ const maxOnesBinStrArr = [maxOnesBinStr];\n  for (let i = 0; i < len; i++) {\n\
    \    const one = ones[i];\n    const oneBin = one.toString(2);\n    const oneBinLen\
    \ = oneBin.length;\n    const oneBinLenLen = oneBinLen + 1;\n    const oneBinStrLen\
    \ = Array(oneBinLenLen).fill('0').join('');\n    const oneBinStrArr = Array(oneBinStrLenLen).fill('0').join('');\n\
    \    const oneBinStrArrLen = oneBinStrArr.length;\n    const oneBinStrArrLenLen\
    \ = oneBinStrArrLen + 1;\n    const oneBinStrArrStr = Array(oneBinStrArrLenLen).fill('0').join('');\n\
    \    const oneBinStrArrStrLen = oneBinStrArrStr.length;\n    const oneBinStrArrStrLen\
    \ = oneBinStrArrStrLen + 1;\n    const oneBinStrArrStrStr = Array(oneBinStrArrStrLenLen).fill('0').join('');\n\
    \    const oneBinStrArrStrStrLen = oneBinStrArrStrStrLen + 1;\n    const oneBinStrArrStrStrStr\
    \ = Array(oneBinStrArrStrStrLenLen).fill('0').join('');\n    const oneBinStrArrStrStrLen\
    \ = oneBinStrArrStrStrLen + 1;\n    const oneBinStrArrStrStrStr = Array(oneBinStrArrStrStrLenLen).fill('0').join('');\n\
    \    const oneBinStrArrStrStrStrLen = oneBin", "  arr.sort((a, b) => a > b ? 1\
    \ : a < b ? -1 : 0);\n  return arr;\n}\n", "  arr.sort((a, b) => {\n    if (a\
    \ === 0) return 1\n    if (b === 0) return -1\n    return a > b ? 1 : -1\n  })\n\
    \  return arr\n}\n", "  arr.sort((a, b) => {\n    if (a === 0) return 1\n    if\
    \ (b === 0) return -1\n    return a > b ? 1 : -1\n  })\n  return arr\n}\n", " \
    \ const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
    \ = arr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val,\
    \ 0));\n  const maxOnes = Math.max(...ones);\n  const maxDecimal = Math.max(...ones.map(val\
    \ => val.toString().split('.')[1].length));\n  const decimals = maxDecimal - maxOnes;\n\
    \  const decimalsArr = new Array(decimals).fill(0);\n  for (let i = 0; i < decimals;\
    \ i++) {\n    decimalsArr[i] = 1;\n  }\n  const decimalsArr = decimalsArr.map((val)\
    \ => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const\
    \ decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val.toString().split('.')[1].length);\n\
    \  const decimalsArr = decimalsArr.map((val) => val", "  const len = arr.length;\n\
    \  if (len < 2) {\n    return arr;\n  }\n  const ones = arr\n    .map((v) => v.toString(2).split('').reduce((acc,\
    \ cur) => acc + cur))\n    .map((v) => parseInt(v, 2))\n    .sort((a, b) => a\
    \ - b);\n  const decimals = arr\n    .map((v) => v.toString(2).split('').reduce((acc,\
    \ cur) => acc + cur))\n    .map((v) => parseInt(v, 10))\n    .sort((a, b) => a\
    \ - b);\n  const len = ones.length;\n  const decimalsLen = decimals.length;\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n\
    \    const decimal = decimals[i];\n    if (decimal === 0) {\n      result.push(one);\n\
    \      continue;\n    }\n    const oneDecimal = decimal - Math.pow(10, decimalsLen);\n\
    \    const oneDecimalDecimal = oneDecimal - Math.pow(10, decimalsLen - 1);\n \
    \   const oneDecimalDecimalDecimal = oneDecimalDecimal - Math.pow(10, decimalsLen\
    \ - 2);\n    const oneDecimalDecimalDecimalDecimal = oneDecimalDecimalDecimal\
    \ - Math.pow(10, decimalsLen - 3);\n    const oneDecimalDecimalDecimalDecimalDecimal\
    \ = oneDecimalDecimalDecimalDecimal - Math.pow(10, decimalsLen - 4);\n    const\
    \ oneDecimalDecimalDecimalDecimalDecimal = oneDecimalDecimalDecimalDecimalDecimal\
    \ - Math.pow(10, decimalsLen - 5);\n    const oneDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = oneDecimalDecimalDecimalDecimalDecimalDecimal - Math.pow(10, decimalsLen -\
    \ 6);\n    const oneDecimalDecimalDecimalDecimalDecimalDecimal = oneDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ - Math.pow(10, decimalsLen - 7);\n    const oneDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = oneDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal - Math.pow(10,\
    \ decimalsLen - 8);\n    const oneDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = oneDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal - Math.pow(10,\
    \ decimalsLen - 9);\n    const oneDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = oneDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal - Math.pow(10,\
    \ decimalsLen - 10);\n    const oneDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = oneDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ - Math.pow(10, decimalsLen - 11);\n    const oneDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = oneDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ - Math.pow(10, decimalsLen ", "  const len = arr.length;\n  if (len === 0) {\n\
    \    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a,\
    \ b) => {\n    const aOnes = count_ones(a);\n    const bOnes = count_ones(b);\n\
    \    if (aOnes === bOnes) {\n      return a.localeCompare(b);\n    }\n    return\
    \ aOnes - bOnes;\n  });\n  return arr;\n}\n", "  return arr.sort((a, b) => {\n\
    \    const aBits = count_bits(a);\n    const bBits = count_bits(b);\n    if (aBits\
    \ === bBits) {\n      return a - b;\n    }\n    return aBits - bBits;\n  });\n\
    }\n", "  return arr.sort((a, b) => {\n    const aStr = a.toString(2);\n    const\
    \ bStr = b.toString(2);\n    if (aStr.length < bStr.length) {\n      return 1;\n\
    \    }\n    if (aStr.length > bStr.length) {\n      return -1;\n    }\n    return\
    \ aStr.localeCompare(bStr);\n  });\n}\n", "  return arr.sort((a, b) => {\n   \
    \ if (a === 0) return 1\n    if (b === 0) return -1\n    return a > b ? 1 : -1\n\
    \  })\n}\n", "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len ===\
    \ 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen\
    \ = Math.max(...arr.map(x => Math.log2(x)));\n  const maxLen = Math.max(maxLen,\
    \ len);\n  const arr = arr.sort((a, b) => {\n    const aLen = Math.log2(a);\n\
    \    const bLen = Math.log2(b);\n    if (aLen === bLen) {\n      return a - b;\n\
    \    }\n    return aLen - bLen;\n  });\n  for (let i = 0; i < len; i++) {\n  \
    \  const one = ones[i];\n    const len = arr.length;\n    for (let j = 0; j <\
    \ len; j++) {\n      if (arr[j] === one) {\n        arr.splice(j, 1);\n      \
    \  break;\n      }\n    }\n  }\n  return arr;\n}\n", "  const len = arr.length;\n\
    \  if (len < 2) {\n    return arr;\n  }\n  const ones = arr\n    .map((val) =>\
    \ val.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n    .filter((val)\
    \ => val > 0);\n  const decimals = arr\n    .map((val) => val.toString(2).split('').reduce((acc,\
    \ cur) => acc + cur, 0))\n    .filter((val) => val > 0);\n  const decimalsSorted\
    \ = decimals.sort((a, b) => a - b);\n  const decimalsSortedLen = decimalsSorted.length;\n\
    \  const onesSorted = ones\n    .map((val) => val.toString(2).split('').reduce((acc,\
    \ cur) => acc + cur, 0))\n    .filter((val) => val > 0)\n    .sort((a, b) => a\
    \ - b);\n  const onesSortedLen = onesSorted.length;\n  if (decimalsSortedLen ===\
    \ onesSortedLen) {\n    return decimalsSorted;\n  }\n  const decimalsSortedSortedLen\
    \ = decimalsSortedLen - onesSortedLen;\n  const onesSortedSortedLen = onesSortedLen\
    \ - decimalsSortedLen;\n  const decimalsSortedSortedArr = decimalsSorted.splice(0,\
    \ decimalsSortedSortedLen);\n  const onesSortedSortedArr = onesSorted.splice(0,\
    \ onesSortedSortedLen);\n  const decimalsSortedSortedArr = decimalsSortedSortedArr.map((val)\
    \ => val - 1);\n  const onesSortedSortedArr = onesSortedSortedArr.map((val) =>\
    \ val - 1);\n  const decimalsSortedSortedArr2 = decimalsSortedSortedArr.map((val)\
    \ => val + 1);\n  const onesSortedSortedArr2 = onesSortedSortedArr.map((val) =>\
    \ val + 1);\n  const decimalsSortedSortedArr3 = decimalsSortedSortedArr2.map((val)\
    \ => val - 1);\n  const onesSortedSortedArr3 = onesSortedSortedArr2.map((val)\
    \ => val - 1);\n  const decimalsSortedSortedArr4 = decimalsSortedSortedArr3.map((val)\
    \ => val + 1);\n  const onesSortedSortedArr4 = onesSortedSortedArr3.map((val)\
    \ => val + 1);\n  const decimalsSortedSortedArr5 = decimalsSortedSortedArr4.map((val)\
    \ => val - 1);\n  const onesSortedSortedArr5 = onesSortedSortedArr4.map((val)\
    \ => val - 1);\n  const decimalsSortedSortedArr6 = decimalsSortedSortedArr5.map((val)\
    \ => val + 1);\n  const onesSortedSortedArr6 = onesSortedSortedArr5.map", "  const\
    \ len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter(x\
    \ => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n  const maxDec =\
    \ Math.pow(10, maxOnes);\n  const decs = [];\n  for (let i = 0; i < len; i++)\
    \ {\n    decs[i] = Math.floor(Math.log(ones[i]) / Math.LN10);\n  }\n  decs.sort((a,\
    \ b) => a - b);\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const\
    \ num = decs[i];\n    const rem = num % 10;\n    num = Math.floor(num / 10);\n\
    \    if (num === 0) {\n      res.push(0);\n    } else {\n      res.push(num);\n\
    \    }\n    if (rem > 0) {\n      res.push(0);\n    }\n  }\n  return res.concat(ones);\n\
    }\n", "  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n  \
    \  }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n}\n", " \
    \ arr.sort((a: number, b: number) => {\n    if (a === 0 && b === 0) {\n      return\
    \ 0;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a\
    \ === 1 && b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n\
    \      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return -1;\n   \
    \ }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a === 0 &&\
    \ b === 0) {\n      return 1;\n    }\n    if (a === 1 && b === 0) {\n      return\
    \ -1;\n    }\n  });\n  return arr;\n}\n", "  return arr.sort((a, b) => {\n   \
    \ const ones = count_ones(b);\n    const zeros = count_zeros(a);\n    return ones\
    \ - zeros;\n  });\n}\n", "  const len = arr.length;\n  if (len === 0) {\n    return\
    \ arr;\n  }\n  const ones = arr.filter((x) => x > 0);\n  if (ones.length === 0)\
    \ {\n    return arr;\n  }\n  const len = ones.length;\n  const maxOnes = Math.ceil(Math.log2(len));\n\
    \  const maxOnesLen = Math.pow(2, maxOnes);\n  const maxOnesLenLen = Math.pow(2,\
    \ maxOnesLen);\n  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLen);\n  const\
    \ maxOnesLenLenLenLen = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLenLen\
    \ = Math.pow(2, maxOnesLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.pow(2,\
    \ maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLen);\n\
    \  const maxOnesLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLen);\n\
    \  const maxOnesLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLen);\n\
    \  const maxOnesLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLen);\n\
    \  const maxOnesLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLen);\n\
    \  const maxOnesLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLen);\n\
    \  const maxOnesLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLen);\n\
    \  const maxOnesLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLen);\n\
    \  const maxOnesLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLen);\n\
    \  const maxOnesLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLen);\n\
    \  const maxOnesLenLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLen);\n\
    \  const maxOnesLenLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLen);\n\
    \  const maxOnesLenLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLen);\n\
    \  const maxOnesLen", "  const len = arr.length;\n  if (len < 2) {\n    return\
    \ arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if\
    \ (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n\
    \  const maxLen = Math.max(...arr.map(a => a.length));\n  const maxLenDiff = Math.abs(maxLen\
    \ - len);\n  if (maxOnes === 0) {\n    return arr;\n  }\n  if (maxOnes < maxLen)\
    \ {\n    return arr.sort((a, b) => count_ones(a) - count_ones(b));\n  }\n  const\
    \ maxOnesDiff = Math.abs(maxOnes - len);\n  if (maxOnesDiff < maxLenDiff) {\n\
    \    return arr.sort((a, b) => count_ones(a) - count_ones(b));\n  }\n  return\
    \ arr.sort((a, b) => count_ones(a) - count_ones(b));\n}\n", "  let len = arr.length;\n\
    \  if (len < 2) {\n    return arr;\n  }\n  let ones = 0;\n  let max = 0;\n  for\
    \ (let i = 0; i < len; i++) {\n    ones += arr[i];\n    if (ones > max) {\n  \
    \    max = ones;\n    }\n  }\n  let res = [];\n  for (let i = 0; i < len; i++)\
    \ {\n    res.push(arr[i]);\n  }\n  res.sort((a, b) => {\n    let aNum = a % max;\n\
    \    let bNum = b % max;\n    if (aNum === bNum) {\n      return a - b;\n    }\n\
    \    return aNum - bNum;\n  });\n  return res;\n}\n", "  const len = arr.length;\n\
    \  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const sorted = ones\n    .map((val, i) => [val,\
    \ arr[i]])\n    .sort((a, b) => a[0] - b[0])\n    .map((val) => val[1]);\n  return\
    \ sorted;\n}\n", "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  const ones = arr.map((x) => x > 0);\n  const len = ones.length;\n  if\
    \ (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n\
    \  const maxLen = Math.max(...arr.map((x) => Math.log2(x)));\n  const maxLen =\
    \ Math.max(maxLen, maxOnes);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.min(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen\
    \ = Math.max(", "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  if (len === 1) {\n    return arr;\n  }\n  if (arr[0] === 0 && arr[1] ===\
    \ 1) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n\
    \  }\n  const sorted = new Array(len);\n  for (let i = 0; i < len; i++) {\n  \
    \  sorted[i] = arr[i];\n  }\n  sorted.sort((a, b) => {\n    if (a === 0 && b ===\
    \ 1) {\n      return 0;\n    }\n    if (a === 1 && b === 0) {\n      return 0;\n\
    \    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a === 0\
    \ && b === 0) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n  \
    \    return 1;\n    }\n    if (a === -1 && b === 0) {\n      return -1;\n    }\n\
    \    if (a === -1 && b === 1) {\n      return 1;\n    }\n    if (a === 0 && b\
    \ === -1) {\n      return -1;\n    }\n    if (a === 1 && b === -1) {\n      return\
    \ -1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a\
    \ === 0 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n\
    \      return -1;\n    }\n    if (a === -1 && b === 1) {\n      return 1;\n  \
    \  }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a ===\
    \ 0 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === 1) {\n\
    \      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n\
    \    if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 &&\
    \ b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === 1) {\n     \
    \ return 1;\n    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n\
    \    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b ===\
    \ 1) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return -1;\n\
    \    }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a ===\
    \ -1 && b === 1) {\n      return 1;\n    }\n    if (a === 0 && b === 1) {\n  \
    \    return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n\
    \    if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 &&\
    \ b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === 1) {", "  const\
    \ len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr\n\
    \    .map((x) => parseInt(x.toString(2), 2))\n    .filter((x) => x > 0);\n  const\
    \ len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes\
    \ = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x) => x.length));\n\
    \  const maxLenDiff = Math.abs(maxLen - len);\n  if (maxLenDiff > 0) {\n    const\
    \ maxOnesDiff = Math.abs(maxOnes - len);\n    if (maxOnesDiff > maxLenDiff) {\n\
    \      return arr;\n    }\n  }\n  const maxOnesDiff = Math.abs(maxOnes - len);\n\
    \  const maxOnesDiffInt = Math.trunc(maxOnesDiff);\n  const maxOnesDiffInt = Math.max(maxOnesDiffInt,\
    \ 0);\n  const maxOnesDiffInt = Math.min(maxOnesDiffInt, maxLen - 1);\n  const\
    \ maxOnesDiffInt = Math.max(maxOnesDiffInt, 0);\n  const maxOnesDiffInt = Math.min(maxOnesDiffInt,\
    \ len - 1);\n  const maxOnesDiffInt = Math.max(maxOnesDiffInt, 0);\n  const maxOnesDiffInt\
    \ = Math.min(maxOnesDiffInt, len - 1);\n  const maxOnesDiffInt = Math.max(maxOnesDiffInt,\
    \ 0);\n  const maxOnesDiffInt = Math.min(maxOnesDiffInt, len - 1);\n  const maxOnesDiffInt\
    \ = Math.max(maxOnesDiffInt, 0);\n  const maxOnesDiffInt = Math.min(maxOnesDiffInt,\
    \ len - 1);\n  const maxOnesDiffInt = Math.max(maxOnesDiffInt, 0);\n  const maxOnesDiffInt\
    \ = Math.min(maxOnesDiffInt, len - 1);\n  const maxOnesDiffInt = Math.max(maxOnesDiffInt,\
    \ 0);\n  const maxOnesDiffInt = Math.min(maxOnesDiffInt, len - 1);\n  const maxOnesDiffInt\
    \ = Math.max(maxOnesDiffInt, 0);\n  const maxOnesDiffInt = Math.min(maxOnesDiffInt,\
    \ len - 1);\n  const maxOnesDiffInt = Math.max(maxOnesDiffInt, 0);\n  const maxOnesDiffInt\
    \ = Math.min(maxOnesDiffInt, len - 1);\n  const maxOnesDiffInt = Math.max(maxOnesDiffInt,\
    \ 0);\n  const maxOnesDiffInt = Math.min(maxOnesDiffInt, len - 1);\n  const maxOnesDiffInt\
    \ = Math.max(maxOnesDiffIn", "  const len = arr.length;\n  if (len < 2) {\n  \
    \  return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const dec = ones\n    .map((val) => val.toString().split('').reduce((acc,\
    \ val) => acc + +val, 0))\n    .sort((a, b) => a - b);\n  const dec = dec.map((val)\
    \ => val.toString().split('').reduce((acc, val) => acc + +val, 0));\n  const dec\
    \ = dec.map((val) => val.toString().split('').reduce((acc, val) => acc + +val,\
    \ 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc, val)\
    \ => acc + +val, 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const dec = dec.map((val) => val.toString().split('').reduce((acc, ",
  "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
    \ = arr.map((v) => v & 1);\n  const decs = arr.map((v) => v - ones);\n  const\
    \ decsLen = decs.length;\n  const decsOnes = decs.map((v) => v & 1);\n  const\
    \ decsOnesLen = decsOnes.length;\n  const decsOnesSum = decsOnes.reduce((acc,\
    \ v) => acc + v, 0);\n  const decsOnesSumLen = decsOnesSum.length;\n  const decsOnesSumArr\
    \ = decsOnesSum.map((v) => v / decsOnesLen);\n  const decsOnesSumArrLen = decsOnesSumArr.length;\n\
    \  const decsOnesSumArrArr = decsOnesSumArr.map((v) => v * decsLen);\n  const\
    \ decsOnesSumArrArrLen = decsOnesSumArrArr.length;\n  const decsOnesSumArrArrArr\
    \ = decsOnesSumArrArr.map((v) => v * decsLen);\n  const decsOnesSumArrArrArrLen\
    \ = decsOnesSumArrArrArr.length;\n  const decsOnesSumArrArrArrArr = decsOnesSumArrArrArr.map((v)\
    \ => v * decsLen);\n  const decsOnesSumArrArrArrArrLen = decsOnesSumArrArrArrArr.length;\n\
    \  const decsOnesSumArrArrArrArrArr = decsOnesSumArrArrArrArr.map((v) => v * decsLen);\n\
    \  const decsOnesSumArrArrArrArrArrLen = decsOnesSumArrArrArrArrArr.length;\n\
    \  const decsOnesSumArrArrArrArrArrArr = decsOnesSumArrArrArrArrArr.map((v) =>\
    \ v * decsLen);\n  const decsOnesSumArrArrArrArrArrLen = decsOnesSumArrArrArrArrArrArr.length;\n\
    \  const decsOnesSumArrArrArrArrArrArrArr = decsOnesSumArrArrArrArrArrArr.map((v)\
    \ => v * decsLen);\n  const decsOnesSumArrArrArrArrArrArrLen = decsOnesSumArrArrArrArrArrArrArr.length;\n\
    \  const decsOnesSumArrArrArrArrArrArrArrArr = ", "  arr.sort((a, b) => {\n  \
    \  const ones = count_ones(b);\n    const decs = count_decs(b);\n    if (ones\
    \ === decs && a > b) {\n      return 1;\n    }\n    if (ones === decs && a < b)\
    \ {\n      return -1;\n    }\n    if (decs === ones && a > b) {\n      return\
    \ -1;\n    }\n    if (decs === ones && a < b) {\n      return 1;\n    }\n    return\
    \ 0;\n  });\n  return arr;\n}\n", "  const len = arr.length;\n  if (len < 2) {\n\
    \    return arr;\n  }\n  const ones = arr.filter((x) => x === 1);\n  const dec\
    \ = ones.length ? Math.log10(ones.length) : 0;\n  const dec = Math.ceil(dec);\n\
    \  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec\
    \ = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10,\
    \ dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const\
    \ dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec,\
    \ 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const\
    \ dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
    \  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec\
    \ = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10,\
    \ dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const\
    \ dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec,\
    \ 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const\
    \ dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
    \  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec\
    \ = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10,\
    \ dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const\
    \ dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec,\
    \ 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const\
    \ dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
    \  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec\
    \ = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10,\
    \ dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const\
    \ dec = Math.pow(10, dec);\n  const de", "  arr.sort((a, b) => {\n    if (a ===\
    \ 0 && b === 0) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n   \
    \   return 1;\n    }\n    if (a === 1 && b === 0) {\n      return -1;\n    }\n\
    \    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b ===\
    \ -1) {\n      return 1;\n    }\n    if (a === -1 && b === 0) {\n      return\
    \ -1;\n    }\n    if (a === -1 && b === -1) {\n      return 0;\n    }\n    return\
    \ a - b;\n  });\n  return arr;\n}\n", "  const len = arr.length;\n  if (len ===\
    \ 0) {\n    return arr;\n  }\n  const ones = arr.map((x) => x > 0);\n  const len\
    \ = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes =\
    \ Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x) => x.toString().length));\n\
    \  const onesArr = new Array(maxLen);\n  for (let i = 0; i < maxLen; i++) {\n\
    \    onesArr[i] = 0;\n  }\n  for (let i = 0; i < len; i++) {\n    onesArr[ones[i].toString().length]\
    \ += 1;\n  }\n  const sortedArr = new Array(maxLen);\n  for (let i = 0; i < maxLen;\
    \ i++) {\n    sortedArr[i] = 0;\n  }\n  for (let i = 0; i < len; i++) {\n    sortedArr[onesArr[i].toString().length]\
    \ += arr[i];\n  }\n  return sortedArr;\n}\n", "  arr.sort((a: number, b: number)\
    \ => {\n    const ones = count_ones(a);\n    const ones_b = count_ones(b);\n \
    \   if (ones > ones_b) {\n      return 1;\n    }\n    if (ones < ones_b) {\n \
    \     return -1;\n    }\n    return a - b;\n  });\n  return arr;\n}\n", "  arr.sort((a,\
    \ b) => a - b);\n  return arr;\n}\n", "  const len = arr.length;\n  if (len <\
    \ 2) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val,\
    \ 0);\n  const twos = arr.reduce((acc, val) => acc + val, 1);\n  const tens =\
    \ arr.reduce((acc, val) => acc + val, 2);\n  const hundreds = arr.reduce((acc,\
    \ val) => acc + val, 3);\n  const thousands = arr.reduce((acc, val) => acc + val,\
    \ 4);\n  const tenThousands = arr.reduce((acc, val) => acc + val, 5);\n  const\
    \ hundredThousands = arr.reduce((acc, val) => acc + val, 6);\n  const oneThousands\
    \ = arr.reduce((acc, val) => acc + val, 7);\n  const tenMillions = arr.reduce((acc,\
    \ val) => acc + val, 8);\n  const hundredMillions = arr.reduce((acc, val) => acc\
    \ + val, 9);\n  const thousandMillions = arr.reduce((acc, val) => acc + val, 10);\n\
    \  const oneMillion = arr.reduce((acc, val) => acc + val, 11);\n  const tenThousandMillions\
    \ = arr.reduce((acc, val) => acc + val, 12);\n  const hundredThousandMillions\
    \ = arr.reduce((acc, val) => acc + val, 13);\n  const thousandThousandMillions\
    \ = arr.reduce((acc, val) => acc + val, 14);\n  const oneThousandMillion = arr.reduce((acc,\
    \ val) => acc + val, 15);\n  const tenBillion = arr.reduce((acc, val) => acc +\
    \ val, 16);\n  const hundredBillion = arr.reduce((acc, val) => acc + val, 17);\n\
    \  const thousandBillion = arr.reduce((acc, val) => acc + val, 18);\n  const oneBillion\
    \ = arr.reduce((acc, val) => acc + val, 19);\n  const tenTrillion = arr.reduce((acc,\
    \ val) => acc + val, 20);\n  const hundredTrillion = arr.reduce((acc, val) =>\
    \ acc + val, 21);\n  const thousandTrillion = arr.reduce((acc, val) => acc + val,\
    \ 22);\n  const oneTrillion = arr.reduce((acc, val) => acc + val, 23);\n  const\
    \ tenQuadrillion = arr.reduce((acc, val) => acc + val, 24);\n  const hundredQuadrillion\
    \ = arr.reduce((acc, val) => acc + val, 25);\n  const thousandQuadrillion = arr.reduce((acc,\
    \ val) => acc + val, 26);\n  const oneQuadrillion = arr.reduce((", "  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((x)\
    \ => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x)\
    \ => Math.log2(x)));\n  const maxLen = Math.max(maxLen, len);\n  const onesArr\
    \ = new Array(maxLen);\n  for (let i = 0; i < maxLen; i++) {\n    onesArr[i] =\
    \ 0;\n  }\n  for (let i = 0; i < len; i++) {\n    onesArr[ones[i]] += 1;\n  }\n\
    \  const sortedArr = new Array(len);\n  for (let i = 0; i < len; i++) {\n    sortedArr[i]\
    \ = arr[i];\n  }\n  for (let i = 0; i < len; i++) {\n    sortedArr[i] = arr[i]\
    \ / Math.pow(2, maxLen - onesArr[i]);\n  }\n  return sortedArr;\n}\n", "  const\
    \ len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((val)\
    \ => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const\
    \ dec = ones\n    .map((val) => val.toString().split('').reduce((acc, val) =>\
    \ acc + +val, 0))\n    .sort((a, b) => a - b);\n  const dec2arr = (dec) => {\n\
    \    const arr = [];\n    for (let i = 0; i < dec.length; i++) {\n      arr.push(dec[i]\
    \ % 10);\n      dec = dec.substr(0, dec.length - 1).split('');\n    }\n    return\
    \ arr;\n  };\n  const arr2 = dec2arr(dec);\n  const arr3 = [];\n  for (let i =\
    \ 0; i < len; i++) {\n    arr3.push(arr2[i]);\n  }\n  return arr3;\n}\n", "  return\
    \ arr.sort((a, b) => {\n    const aNum = parseInt(a.toString(2), 2);\n    const\
    \ bNum = parseInt(b.toString(2), 2);\n    return aNum - bNum;\n  });\n}\n", " \
    \ return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n}\n", "  const len =\
    \ arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((x)\
    \ => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x)\
    \ => Math.log2(x)));\n  const maxLen = Math.max(maxLen, len);\n  const onesArr\
    \ = new Array(maxLen);\n  for (let i = 0; i < maxLen; i++) {\n    onesArr[i] =\
    \ 0;\n  }\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n    onesArr[Math.log2(one)]\
    \ += one;\n  }\n  const sortedArr = new Array(len);\n  for (let i = 0; i < len;\
    \ i++) {\n    sortedArr[i] = onesArr[i];\n  }\n  return sortedArr;\n}\n", "  const\
    \ len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones =\
    \ count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
    \ arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(x\
    \ => x.length));\n  const onesArr = new Array(maxOnes);\n  for (let i = 0; i <\
    \ maxOnes; i++) {\n    onesArr[i] = new Array(len);\n    for (let j = 0; j < len;\
    \ j++) {\n      onesArr[i][j] = arr[j].indexOf(i === j);\n    }\n  }\n  const\
    \ sortedArr = new Array(len);\n  for (let i = 0; i < len; i++) {\n    sortedArr[i]\
    \ = new Array(maxLen);\n    for (let j = 0; j < maxLen; j++) {\n      sortedArr[i][j]\
    \ = onesArr[ones[j]][j];\n    }\n  }\n  return sortedArr;\n}\n", "  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n\
    \  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const\
    \ arr = arr.slice();\n  arr.sort((a, b) => {\n    const aOnes = count_ones(a);\n\
    \    const bOnes = count_ones(b);\n    const aLen = aOnes.length;\n    const bLen\
    \ = bOnes.length;\n    if (aLen === bLen) {\n      return aOnes.indexOf(bOnes)\
    \ - (aOnes.indexOf(aOnes) || 0);\n    }\n    return aLen - bLen;\n  });\n  return\
    \ arr;\n}\n", "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n\
    }\n", "  return arr.sort((a, b) => {\n    const aNum = parseInt(a, 2);\n    const\
    \ bNum = parseInt(b, 2);\n    return aNum - bNum;\n  });\n}\n", "  const len =\
    \ arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n\
    \  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const\
    \ maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(x => x.toString().length));\n\
    \  const maxLenStr = maxLen.toString();\n  const maxLenNum = parseInt(maxLenStr,\
    \ 10);\n  const maxLenNumStr = maxLenNum.toString();\n  const maxLenNumStrLen\
    \ = maxLenNumStr.length;\n  const maxLenNumStrLenMinusOne = maxLenNumStrLen -\
    \ 1;\n  const maxLenNumStrLenMinusOneStr = maxLenNumStrLen - 1;\n  const maxLenNumStrLenMinusOneNum\
    \ = parseInt(maxLenNumStrLenMinusOneStr, 10);\n  const maxLenNumStrLenMinusOneNumStr\
    \ = maxLenNumStrLenMinusOneNum.toString();\n  const maxLenNumStrLenMinusOneNumStrLen\
    \ = maxLenNumStrLenMinusOneNumStr.length;\n  const maxLenNumStrLenMinusOneNumStrLenMinusOne\
    \ = maxLenNumStrLenMinusOneNumStrLen - 1;\n  const maxLenNumStrLenMinusOneNumStrLenMinusOneStr\
    \ = maxLenNumStrLenMinusOneNumStrLen - 1;\n  const maxLenNumStrLenMinusOneNumStrLenMinusOneNum\
    \ = parseInt(maxLenNumStrLenMinusOneNumStrLenMinusOneStr, 10);\n  const maxLenNumStrLenMinusOneNumStrLenMinusOneNumStr\
    \ = maxLenNumStrLenMinusOneNumStrLenMinusOneNum.toString();\n  const maxLenNumStrLenMinusOneNumStrLenMinusOneNumStrLen\
    \ = maxLenNumStrLenMinusOneNumStrLenMinusOneNumStrLen - 1;\n  const maxLenNumStrLenMinusOneNumStrLenMinusOneNumStrLenMinusOne\
    \ = maxLenNumStrLenMinusOneNumStrLenMinusOneNumStrLenMinusOne - 1;\n  const maxLenNumStrLenMinusOneNumStrLenMinusOneNumStrLenMinusOneStr\
    \ = maxLenNumStrLenMinusOneNumStrLenMinusOneNumStrLenMinusOneStr.toString();\n\
    \  const maxLenNumStrLenMinusOneNumStrLenMinusOneNumStrLenMinusOneNum = parseInt(maxLenNumStrLenMinusOneNumStrLenMin",
  "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
    \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0)\
    \ {\n    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
    \  const maxDec = Math.pow(10, maxOnes);\n  const decs = ones\n    .map((x) =>\
    \ Math.round(x * maxDec) / maxDec)\n    .sort((a, b) => a - b);\n  const decLen\
    \ = decs.length;\n  const decArr = new Array(decLen);\n  for (let i = 0; i < decLen;\
    \ i++) {\n    decArr[i] = decs[i];\n  }\n  const decArr_len = decArr.length;\n\
    \  const decArr_sorted = new Array(decArr_len);\n  for (let i = 0; i < decArr_len;\
    \ i++) {\n    decArr_sorted[i] = arr[decsArr[i]];\n  }\n  return decArr_sorted;\n\
    }\n", "  let len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  let\
    \ ones = arr.filter((val) => val === 1);\n  let zeros = arr.filter((val) => val\
    \ === 0);\n  let maxOnes = Math.max(...ones);\n  let maxZeros = Math.max(...zeros);\n\
    \  let maxOnesIndex = ones.indexOf(maxOnes);\n  let maxZerosIndex = zeros.indexOf(maxZeros);\n\
    \  let maxOnesBin = maxOnes.toString(2);\n  let maxZerosBin = maxZeros.toString(2);\n\
    \  let maxOnesBinLen = maxOnesBin.length;\n  let maxZerosBinLen = maxZerosBin.length;\n\
    \  let maxOnesBinStr = '';\n  let maxZerosBinStr = '';\n  for (let i = 0; i <\
    \ maxOnesBinLen; i++) {\n    maxOnesBinStr += maxOnesBin[i];\n  }\n  for (let\
    \ i = 0; i < maxZerosBinLen; i++) {\n    maxZerosBinStr += maxZerosBin[i];\n \
    \ }\n  let maxOnesBinStr = maxOnesBinStr.split('').sort().join('');\n  let maxZerosBinStr\
    \ = maxZerosBinStr.split('').sort().join('');\n  let maxOnesBinStrLen = maxOnesBinStr.length;\n\
    \  let maxZerosBinStrLen = maxZerosBinStr.length;\n  let maxOnesBinStr = '';\n\
    \  let maxZerosBinStr = '';\n  for (let i = 0; i < maxOnesBinStrLen; i++) {\n\
    \    maxOnesBinStr += maxOnesBinStr[i];\n  }\n  for (let i = 0; i < maxZerosBinStrLen;\
    \ i++) {\n    maxZerosBinStr += maxZerosBinStr[i];\n  }\n  let maxOnesBinStr =\
    \ maxOnesBinStr.split('').sort().join('');\n  let maxZerosBinStr = maxZerosBinStr.split('').sort().join('');\n\
    \  let maxOnesBinStrLen = maxOnesBinStr.length;\n  let maxZerosBinStrLen = maxZerosBinStr.length;\n\
    \  let maxOnesBinStr = '';\n  let maxZerosBinStr = '';\n  for (let i = 0; i <\
    \ maxOnesBinStrLen; i++) {\n    maxOnesBinStr += maxOnesBinStr[i];\n  }\n  for\
    \ (let i = 0; i < maxZerosBinStrLen; i++) {\n    maxZerosBinStr += maxZerosBinStr[i];\n\
    \  }\n  let maxOnesBinStr = maxOnesBinStr.split('').sort().join('');\n  let max",
  "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n", "  const\
    \ len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((v)\
    \ => v.toString(2).split('').reduce((p, c) => p + +c, 0));\n  const sorted = [];\n\
    \  let i = 0;\n  while (i < len) {\n    const one = ones[i];\n    sorted.push(arr[i\
    \ - 1]);\n    if (one === 1) {\n      i++;\n    } else {\n      i = binarySearch(ones,\
    \ i, len, one);\n    }\n  }\n  return sorted;\n}\n", "  const len = arr.length;\n\
    \  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((val) => val\
    \ === 1);\n  const zeros = arr.filter((val) => val === 0);\n  const len = ones.length;\n\
    \  if (len === 0) {\n    return zeros;\n  }\n  if (len === 1) {\n    return ones;\n\
    \  }\n  const half = Math.floor(len / 2);\n  const left = sort_array(ones.slice(0,\
    \ half));\n  const right = sort_array(ones.slice(half));\n  return merge(left,\
    \ zeros, right);\n}\n", "  const len = arr.length;\n  if (len === 0) {\n    return\
    \ arr;\n  }\n  const ones = arr.filter(v => v === 1);\n  if (ones.length === 0)\
    \ {\n    return arr;\n  }\n  const len = ones.length;\n  if (len === 0) {\n  \
    \  return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
    \  const maxLen = Math.max(len, maxOnes);\n  const maxLen2 = Math.ceil(Math.log(maxLen)\
    \ / Math.LN2);\n  const maxLen3 = Math.ceil(Math.log(maxLen2) / Math.LN2);\n \
    \ const maxLen4 = Math.ceil(Math.log(maxLen3) / Math.LN2);\n  const maxLen5 =\
    \ Math.ceil(Math.log(maxLen4) / Math.LN2);\n  const maxLen6 = Math.ceil(Math.log(maxLen5)\
    \ / Math.LN2);\n  const maxLen7 = Math.ceil(Math.log(maxLen6) / Math.LN2);\n \
    \ const maxLen8 = Math.ceil(Math.log(maxLen7) / Math.LN2);\n  const maxLen9 =\
    \ Math.ceil(Math.log(maxLen8) / Math.LN2);\n  const maxLen10 = Math.ceil(Math.log(maxLen9)\
    \ / Math.LN2);\n  const maxLen11 = Math.ceil(Math.log(maxLen10) / Math.LN2);\n\
    \  const maxLen12 = Math.ceil(Math.log(maxLen11) / Math.LN2);\n  const maxLen13\
    \ = Math.ceil(Math.log(maxLen12) / Math.LN2);\n  const maxLen14 = Math.ceil(Math.log(maxLen13)\
    \ / Math.LN2);\n  const maxLen15 = Math.ceil(Math.log(maxLen14) / Math.LN2);\n\
    \  const maxLen16 = Math.ceil(Math.log(maxLen15) / Math.LN2);\n  const maxLen17\
    \ = Math.ceil(Math.log(maxLen16) / Math.LN2);\n  const maxLen18 = Math.ceil(Math.log(maxLen17)\
    \ / Math.LN2);\n  const maxLen19 = Math.ceil(Math.log(maxLen18) / Math.LN2);\n\
    \  const maxLen20 = Math.ceil(Math.log(maxLen19) / Math.LN2);\n  const maxLen21\
    \ = Math.ceil(Math.log(maxLen20) / Math.LN2);\n  const maxLen22 = Math.ceil(Math.log(maxLen21)\
    \ / Math.LN2);\n  const maxLen23 = Math.ceil(Math.log(maxLen22) / Math.LN2);\n\
    \  const maxLen24 = Math.ceil(Math.log(maxLen23) / Math.LN2);\n  const maxLen25\
    \ = Math.ceil(Math.log(maxLen24) / Math.LN2);\n  const maxLen26 = Math.ceil(Math.log(maxLen25)\
    \ / Math.LN2);\n  const maxLen27 = Math.ceil(Math.log(maxLen26) / Math.LN2);\n\
    \  const maxLen28 = Math.ceil(Math.log(maxLen27) / Math.LN2);\n  const maxLen29",
  "  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n   \
    \ if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n", "  return\
    \ arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n\
    \    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b ===\
    \ 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n\
    \    }\n    if (a === 0 && b === -1) {\n      return 1;\n    }\n    if (a ===\
    \ -1 && b === 0) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n\
    \      return 0;\n    }\n    if (a === -1 && b === 1) {\n      return 1;\n   \
    \ }\n    if (b === -1 && a === 1) {\n      return -1;\n    }\n    if (b === 1\
    \ && a === -1) {\n      return 1;\n    }\n    if (b === -1 && a === -1) {\n  \
    \    return -1;\n    }\n    if (b === 1 && a === 1) {\n      return 0;\n    }\n\
    \    if (b === -1 && a === -1) {\n      return 0;\n    }\n    if (a === 0 && b\
    \ === -1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return\
    \ -1;\n    }\n    if (a === -1 && b === 0) {\n      return 1;\n    }\n    if (a\
    \ === 0 && b === 1) {\n      return -1;\n    }\n    if (a === 1 && b === -1) {\n\
    \      return 1;\n    }\n    if (a === 1 && b === 0) {\n      return 0;\n    }\n\
    \    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 &&\
    \ b === 1) {\n      return 0;\n    }\n    if (b === -1 && a === -1) {\n      return\
    \ 1;\n    }\n    if (b === 1 && a === 1) {\n      return 0;\n    }\n    if (b\
    \ === 1 && a === 0) {\n      return -1;\n    }\n    if (b === -1 && a === -1)\
    \ {\n      return 1;\n    }\n    if (b === -1 && a === 0) {\n      return -1;\n\
    \    }\n    if (a === 0 && b === -1) {\n      return 1;\n    }\n    if (a ===\
    \ -1 && b === 1) {\n      return -1;\n    }\n    if (a === -1 && b === 0) {\n\
    \      return 1;\n    }\n    if (a === 0 && b === 1) {\n      return -1;\n   \
    \ }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 1 &&\
    \ b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n    \
    \  return 1;\n    }\n    if (a === -1 && b === 0) {\n      return -1;\n    }\n\
    \    if (b === -1 && a === -1) {\n      return 1;\n    }\n    if (b === 1 && a\
    \ === 1) {\n      return 0;\n    }\n    if (b === 1 && a === 0) {\n      return\
    \ -1;\n    }\n    if (b === -1 && a === 1) {\n      return 1;\n    }\n    if (b",
  "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
    \ = arr.reduce((acc, val) => acc + val, 0);\n  const tens = Math.floor(ones /\
    \ 10);\n  const onesRemainder = ones - tens * 10;\n  const tensRemainder = tens\
    \ - onesRemainder;\n  const tensArr = [tens, tensRemainder];\n  const onesArr\
    \ = [ones, onesRemainder];\n  const sortedArr = onesArr.concat(tensArr);\n  return\
    \ sortedArr.sort((a, b) => a - b);\n}\n", "  arr.sort((a, b) => {\n    const ones\
    \ = count_ones(b);\n    const decA = count_ones(a);\n    const decB = count_ones(b);\n\
    \    if (decA === decB) {\n      return decA - decB;\n    }\n    return decA -\
    \ decB || decB - decA;\n  });\n  return arr;\n}\n", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.filter(x => x ===\
    \ 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n\
    \  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(x\
    \ => Math.log2(x)));\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.min(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen\
    \ = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, ", "  return arr.sort((a,\
    \ b) => {\n    const ones = count_ones(b);\n    const decA = count_ones(a);\n\
    \    const decB = count_ones(b);\n    if (decA === decB) {\n      return decA\
    \ - decB;\n    }\n    return decA - decB || decB - decA;\n  });\n}\n", "  return\
    \ arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n}\n", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n \
    \ const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const\
    \ arr = arr.slice();\n  arr.sort((a, b) => {\n    const a1 = count_ones(a);\n\
    \    const b1 = count_ones(b);\n    if (a1 === b1) {\n      return a1 - b1;\n\
    \    }\n    return a1 - b1 > 0 ? 1 : -1;\n  });\n  return arr;\n}\n", "  const\
    \ len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1)\
    \ {\n    return arr;\n  }\n  if (len === 2) {\n    if (arr[0] === arr[1]) {\n\
    \      return arr;\n    }\n    return [arr[0], arr[1]];\n  }\n  const mid = Math.floor(len\
    \ / 2);\n  const left = sort_array(arr.slice(0, mid));\n  const right = sort_array(arr.slice(mid));\n\
    \  return merge(left, right);\n}\n", "  const len = arr.length;\n  if (len < 2)\
    \ {\n    return arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n  const\
    \ dec = ones.length ? Math.log10(ones.length) : -1;\n  const decArr = new Array(len);\n\
    \  for (let i = 0; i < len; i++) {\n    decArr[i] = Math.floor(Math.log10(Math.abs(arr[i])));\n\
    \  }\n  const decArr_sorted = decArr.sort((a, b) => a - b);\n  const decArr_sorted\
    \ = decArr_sorted.map((val) => Math.abs(val));\n  const decArr_sorted = decArr_sorted.map((val)\
    \ => val * -1);\n  const decArr_sorted = decArr_sorted.map((val) => val + 1);\n\
    \  const decArr_sorted = decArr_sorted.map((val) => val * -1);\n  const decArr_sorted\
    \ = decArr_sorted.map((val) => val * -1);\n  const decArr_sorted = decArr_sorted.map((val)\
    \ => val * -1);\n  const decArr_sorted = decArr_sorted.map((val) => val * -1);\n\
    \  const decArr_sorted = decArr_sorted.map((val) => val * -1);\n  const decArr_sorted\
    \ = decArr_sorted.map((val) => val * -1);\n  const decArr_sorted = decArr_sorted.map((val)\
    \ => val * -1);\n  const decArr_sorted = decArr_sorted.map((val) => val * -1);\n\
    \  const decArr_sorted = decArr_sorted.map((val) => val * -1);\n  const decArr_sorted\
    \ = decArr_sorted.map((val) => val * -1);\n  const decArr_sorted = decArr_sorted.map((val)\
    \ => val * -1);\n  const decArr_sorted = decArr_sorted.map((val) => val * -1);\n\
    \  const decArr_sorted = decArr_sorted.map((val) => val * -1);\n  const decArr_sorted\
    \ = decArr_sorted.map((val) => val * -1);\n  const decArr_sorted = decArr_sorted.map((val)\
    \ => val * -1);\n  const decArr_sorted = decArr_sorted.map((val) => val * -1);\n\
    \  const decArr_sorted = decArr_sorted.map((val) => val * -1);\n  const decArr_sorted\
    \ = decArr_sorted.map((val) => val * -1);\n  const decArr_sorted = decArr_sorted.map((val)\
    \ => val * -1);\n  const decArr_sorted = decArr_", "  arr.sort((a, b) => {\n \
    \   const aBin = bin(a);\n    const bBin = bin(b);\n    const aLen = aBin.length;\n\
    \    const bLen = bBin.length;\n    if (aLen !== bLen) {\n      return aLen -\
    \ bLen;\n    }\n    return aBin.localeCompare(bBin);\n  });\n  return arr;\n}\n",
  "  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n   \
    \ if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n", "  arr.sort((a,\
    \ b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n", "  const len = arr.length;\n\
    \  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x >\
    \ 0);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n\
    \  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n  const maxLen = Math.max(len,\
    \ maxOnes);\n  const maxLen2 = Math.ceil(Math.log(maxLen) / Math.LN2);\n  const\
    \ maxLen4 = Math.ceil(Math.pow(maxLen, 4));\n  const maxLen8 = Math.ceil(Math.pow(maxLen,\
    \ 8));\n  const maxLen16 = Math.ceil(Math.pow(maxLen, 16));\n  const maxLen32\
    \ = Math.ceil(Math.pow(maxLen, 32));\n  const maxLen64 = Math.ceil(Math.pow(maxLen,\
    \ 64));\n  const maxLen128 = Math.ceil(Math.pow(maxLen, 128));\n  const maxLen256\
    \ = Math.ceil(Math.pow(maxLen, 256));\n  const maxLen512 = Math.ceil(Math.pow(maxLen,\
    \ 512));\n  const maxLen1024 = Math.ceil(Math.pow(maxLen, 1024));\n  const maxLen2048\
    \ = Math.ceil(Math.pow(maxLen, 2048));\n  const maxLen4096 = Math.ceil(Math.pow(maxLen,\
    \ 4096));\n  const maxLen8192 = Math.ceil(Math.pow(maxLen, 8192));\n  const maxLen16384\
    \ = Math.ceil(Math.pow(maxLen, 16384));\n  const maxLen32768 = Math.ceil(Math.pow(maxLen,\
    \ 32768));\n  const maxLen65536 = Math.ceil(Math.pow(maxLen, 65536));\n  const\
    \ maxLen131072 = Math.ceil(Math.pow(maxLen, 131072));\n  const maxLen262144 =\
    \ Math.ceil(Math.pow(maxLen, 262144));\n  const maxLen524288 = Math.ceil(Math.pow(maxLen,\
    \ 524288));\n  const maxLen1048576 = Math.ceil(Math.pow(maxLen, 1048576));\n \
    \ const maxLen2097152 = Math.ceil(Math.pow(maxLen, 2097152));\n  const maxLen4194304\
    \ = Math.ceil(Math.pow(maxLen, 4194304));\n  const maxLen8388608 = Math.ceil(Math.pow(maxLen,\
    \ 8388608));\n  const maxLen16777216 = Math.ceil(Math.pow(maxLen, 16777216));\n\
    \  const maxLen33554432 = Math.ceil(Math.pow(maxLen, 33554432));\n  const maxLen67108864\
    \ = Math.ceil(Math.pow(maxLen, 67108864));\n  const maxLen134217728 = Math.ceil(Math.pow(maxLen,\
    \ 134217728));\n  const maxLen268435456 = ", "  const len = arr.length;\n  if\
    \ (len < 2) {\n    return arr;\n  }\n  const ones = arr\n    .map((val) => val.toString(2).length)\n\
    \    .sort((a, b) => a - b);\n  const decimals = arr\n    .map((val) => val.toString(10))\n\
    \    .sort((a, b) => a - b);\n  const decimalsLen = decimals.length;\n  const\
    \ onesLen = ones.length;\n  const decimalsIndex = decimalsLen - onesLen;\n  const\
    \ onesIndex = onesLen - decimalsLen;\n  const decimalsIndex = decimalsIndex <\
    \ 0 ? 0 : decimalsIndex;\n  const onesIndex = onesIndex < 0 ? 0 : onesIndex;\n\
    \  const decimalsArr = decimals.slice(0, decimalsIndex);\n  const onesArr = ones.slice(0,\
    \ onesIndex);\n  const decimalsArrLen = decimalsArr.length;\n  const onesArrLen\
    \ = onesArr.length;\n  const decimalsArrIndex = decimalsArrLen - onesArrLen;\n\
    \  const onesArrIndex = onesArrLen - decimalsArrLen;\n  const decimalsArrIndex\
    \ = decimalsArrIndex < 0 ? 0 : decimalsArrIndex;\n  const onesArrIndex = onesArrIndex\
    \ < 0 ? 0 : onesArrIndex;\n  const decimalsArrArr = decimalsArr.slice(0, decimalsArrIndex);\n\
    \  const onesArrArr = onesArr.slice(0, onesArrIndex);\n  const decimalsArrArrLen\
    \ = decimalsArrArr.length;\n  const onesArrArrLen = onesArrArr.length;\n  const\
    \ decimalsArrArrIndex = decimalsArrArrLen - onesArrArrLen;\n  const onesArrArrIndex\
    \ = onesArrArrLen - decimalsArrArrLen;\n  const decimalsArrArrIndex = decimalsArrArrIndex\
    \ < 0 ? 0 : decimalsArrArrIndex;\n  const onesArrArrIndex = onesArrArrIndex <\
    \ 0 ? 0 : onesArrArrIndex;\n  const decimalsArrArrArr = decimalsArrArr.slice(0,\
    \ decimalsArrArrIndex);\n  const onesArrArrArr = onesArrArr.slice(0, onesArrArrIndex);\n\
    \  const decimalsArrArrArrLen = decimalsArrArrArr.length;\n  const onesArrArrArrLen\
    \ = onesArrArrArr.length;\n  const decimalsArrArrArrIndex = decimalsArrArrArrLen\
    \ - onesArrArrArrLen;\n  const onesArrArrArrIndex = onesArrArrArrLen - decimalsArrArrArrLen;\n\
    \  const decimalsArrArrArrIndex = decimalsArrArrArrIndex < ", "  arr.sort((a,\
    \ b) => {\n    const aBin = binToInt(a);\n    const bBin = binToInt(b);\n    if\
    \ (aBin === bBin) {\n      return 0;\n    }\n    return aBin - bBin;\n  });\n\
    \  return arr;\n}\n", "  const len = arr.length;\n  if (len < 2) {\n    return\
    \ arr;\n  }\n  const ones = arr.map(n => n & 1);\n  const dec = arr.map(n => n\
    \ >> 1);\n  const decLen = dec.length;\n  const decOnes = dec.map(n => n & 1);\n\
    \  const decOnesLen = decOnes.length;\n  if (decLen < decOnesLen) {\n    return\
    \ dec;\n  }\n  if (decLen > decOnesLen) {\n    return ones;\n  }\n  const decOnesSum\
    \ = decOnes.reduce((acc, n) => acc + n, 0);\n  const decSum = dec.reduce((acc,\
    \ n) => acc + n, 0);\n  const decSumOnes = decSum - decOnesSum;\n  const decSumOnesLen\
    \ = decSumOnes.length;\n  if (decSumOnesLen === 0) {\n    return ones;\n  }\n\
    \  const decSumOnesSum = decSumOnes.reduce((acc, n) => acc + n, 0);\n  const decSumOnesSumLen\
    \ = decSumOnesSum.length;\n  if (decSumOnesSumLen === 0) {\n    return dec;\n\
    \  }\n  const decSumOnesSum = decSumOnesSum.reduce((acc, n) => acc + n, 0);\n\
    \  const decSumOnesSumLen = decSumOnesSum.length;\n  if (decSumOnesSumLen > decLen)\
    \ {\n    return dec;\n  }\n  const decSumOnesSum = decSumOnesSum.reduce((acc,\
    \ n) => acc + n, 0);\n  const decSumOnesSumLen = decSumOnesSum.length;\n  if (decSumOnesSumLen\
    \ < decLen) {\n    return ones;\n  }\n  const decSumOnesSum = decSumOnesSum.reduce((acc,\
    \ n) => acc + n, 0);\n  const decSumOnesSumLen = decSumOnesSum.length;\n  if (decSumOnesSumLen\
    \ === decLen) {\n    const decSumOnesSum = decSumOnesSum.reduce((acc, n) => acc\
    \ + n, 0);\n    const decSumOnesSumLen = decSumOnesSum.length;\n    if (decSumOnesSumLen\
    \ === decLen) {\n      return dec;\n    }\n  }\n  return ones;\n}\n", "  return\
    \ arr.sort((a, b) => {\n    const aBin = binToInt(a);\n    const bBin = binToInt(b);\n\
    \    return aBin - bBin;\n  });\n}\n", "  return arr.sort((a, b) => {\n    const\
    \ aNum = parseInt(a.toString(2), 10);\n    const bNum = parseInt(b.toString(2),\
    \ 10);\n    return aNum - bNum;\n  });\n}\n", "  const len = arr.length;\n  if\
    \ (len < 2) {\n    return arr;\n  }\n  const ones = arr\n    .map((val) => val.toString(2).split('').reduce((acc,\
    \ val) => acc + +val, 0))\n    .filter((val) => val > 0);\n  const decimals =\
    \ arr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val,\
    \ 0));\n  const maxOnes = Math.max(...ones);\n  const maxDecimal = Math.max(...decimals);\n\
    \  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxOnesIndex\
    \ = ones.indexOf(maxOnes);\n  const maxOnesDecimal = ones[maxOnesIndex];\n  const\
    \ maxOnesDecimalIndex = decimals.indexOf(maxOnesDecimal);\n  const maxDecimalIndex\
    \ = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n\
    \  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex\
    \ = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n\
    \  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex\
    \ = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n\
    \  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex\
    \ = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n\
    \  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex\
    \ = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n\
    \  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex\
    \ = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n\
    \  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex\
    \ = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n\
    \  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex\
    \ = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n\
    \  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex\
    \ = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n\
    \  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex\
    \ = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n\
    \  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex\
    \ = decimals.indexOf(maxDecimal);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n\
    \  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n", "  return arr.sort((a,\
    \ b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a ===\
    \ 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 0) {\n   \
    \   return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n\
    \    if (a === 0 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b\
    \ === 0) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return\
    \ 0;\n    }\n    if (a === 0 && b === 1) {\n      return -1;\n    }\n    if (a\
    \ === -1 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n\
    \      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n \
    \   }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a ===\
    \ 1 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n  \
    \    return -1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n\
    \    if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 &&\
    \ b === -1) {\n      return 1;\n    }\n    if (a === 0 && b === -1) {\n      return\
    \ -1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a\
    \ === -1 && b === 1) {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n\
    \      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n\
    \    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (a === 0 && b\
    \ === 1) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return\
    \ -1;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n    if\
    \ (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b === -1)\
    \ {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n\
    \    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a ===\
    \ 1 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n  \
    \    return -1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n\
    \    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b\
    \ === 1) {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n      return\
    \ 1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a\
    \ === -1 && b === 1) {\n      return -1;\n    }\n    if (", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).length);\n\
    \  ones = sort_array(ones);\n  const zeros = arr.map((val) => val.toString(2).replace(/[01]/g,\
    \ \"\").length);\n  zeros = sort_array(zeros);\n  const ones_index = ones.map((val)\
    \ => val - 1);\n  const zeros_index = zeros.map((val) => val - 1);\n  const ones_count\
    \ = ones.map((val) => val).reduce((acc, val) => acc + val, 0);\n  const zeros_count\
    \ = zeros.map((val) => val).reduce((acc, val) => acc + val, 0);\n  const ones_count_index\
    \ = ones_count.map((val) => val - 1);\n  const zeros_count_index = zeros_count.map((val)\
    \ => val - 1);\n  const ones_count_index = ones_count_index.reduce((acc, val)\
    \ => acc + val, 0);\n  const zeros_count_index = zeros_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const ones_count_index = ones_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const zeros_count_index = zeros_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const ones_count_index = ones_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const zeros_count_index = zeros_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const ones_count_index = ones_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const zeros_count_index = zeros_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const ones_count_index = ones_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const zeros_count_index = zeros_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const ones_count_index = ones_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const zeros_count_index = zeros_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const ones_count_index = ones_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const zeros_count_index = zeros_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const ones_count_index = ones_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const zeros_count_index = zeros_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const ones_count_index = ones_count_index.reduce((acc,\
    \ val) => acc + val, 0);\n  const zeros_count_", "  return arr.sort((a, b) =>\
    \ {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return\
    \ 1;\n    }\n    return -1;\n  });\n}\n", "  return arr.sort((a, b) => {\n   \
    \ if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a === 0 && b ===\
    \ 1) {\n      return 1;\n    }\n    if (a === 1 && b === 0) {\n      return -1;\n\
    \    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0\
    \ && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === 0) {\n   \
    \   return -1;\n    }\n    if (a === -1 && b === -1) {\n      return 0;\n    }\n\
    \    if (a === -1 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b\
    \ === -1) {\n      return -1;\n    }\n    if (a === -1 && b === 1) {\n      return\
    \ 1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a\
    \ === 0 && b === 2) {\n      return 1;\n    }\n    if (a === 1 && b === 2) {\n\
    \      return -1;\n    }\n    if (a === 2 && b === 0) {\n      return -1;\n  \
    \  }\n    if (a === 2 && b === 1) {\n      return 1;\n    }\n    if (a === 0 &&\
    \ b === -2) {\n      return 1;\n    }\n    if (a === 1 && b === -2) {\n      return\
    \ -1;\n    }\n    if (a === -2 && b === 0) {\n      return -1;\n    }\n    if\
    \ (a === -2 && b === 1) {\n      return 1;\n    }\n    if (a === -2 && b === -1)\
    \ {\n      return 1;\n    }\n    if (a === -2 && b === -2) {\n      return 0;\n\
    \    }\n    if (a === 2 && b === -2) {\n      return -1;\n    }\n    if (a ===\
    \ -2 && b === -2) {\n      return 1;\n    }\n    if (a === -2 && b === 2) {\n\
    \      return 0;\n    }\n    if (a === 2 && b === 2) {\n      return 1;\n    }\n\
    \    if (a === 2 && b === -2) {\n      return -1;\n    }\n    if (a === 2 && b\
    \ === 2) {\n      return 0;\n    }\n    if (a === -2 && b === -2) {\n      return\
    \ -1;\n    }\n    if (a === -2 && b === 2) {\n      return 1;\n    }\n    if (a\
    \ === -2 && b === -2) {\n      return 0;\n    }\n    if (a === -2 && b === 2)\
    \ {\n      return -1;\n    }\n    if (a === -2 && b === 2) {\n      return 1;\n\
    \    }\n    if (a === -2 && b === 2) {\n      return 0;\n    }\n    if (a ===\
    \ -2 && b === 2) {\n      return -1;\n    }\n    if (a === -2 && b === 2) {\n\
    \      return 1;\n    }\n    if (a === -2 && b === 2) {\n      return 0;\n   \
    \ }\n    if (a === -2 && b === 2) {\n      return -1;\n    }\n    if (", "  return\
    \ arr.sort((a, b) => {\n    const aNum = parseInt(a.toString(2), 10);\n    const\
    \ bNum = parseInt(b.toString(2), 10);\n    return aNum - bNum;\n  });\n}\n", " \
    \ return arr.sort((a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return\
    \ -1\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n\
    }\n", "  arr.sort((a, b) => {\n    const aNum = parseInt(a.toString(), 2);\n \
    \   const bNum = parseInt(b.toString(), 2);\n    return aNum - bNum;\n  });\n\
    \  return arr;\n}\n", "  const len = arr.length;\n  if (len === 0) {\n    return\
    \ arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes\
    \ = Math.pow(2, Math.ceil(Math.log(ones) / Math.LN2));\n  const maxDec = Math.pow(2,\
    \ Math.ceil(Math.log(maxOnes) / Math.LN10));\n  const decs = arr.map(val => Math.trunc(val\
    \ * maxDec) / maxDec);\n  const decLen = decs.length;\n  const decsLen = Math.min(decLen,\
    \ len);\n  const decsArr = new Array(decsLen);\n  for (let i = 0; i < decsLen;\
    \ i++) {\n    decsArr[i] = decs[i];\n  }\n  decsArr.sort((a, b) => a - b);\n \
    \ const sortedArr = new Array(len);\n  for (let i = 0; i < len; i++) {\n    sortedArr[i]\
    \ = arr[decsArr.indexOf(arr[i])];\n  }\n  return sortedArr;\n}\n", "  const len\
    \ = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n\
    \  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const\
    \ arr = arr.slice();\n  arr.sort((a, b) => {\n    if (a === b) {\n      return\
    \ 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n\
    \  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n    const index\
    \ = arr.indexOf(one);\n    if (index > -1) {\n      arr.splice(index, 1);\n  \
    \  }\n  }\n  return arr;\n}\n", "  const len = arr.length;\n  if (len === 0) {\n\
    \    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n\
    \  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones) / Math.LN2));\n  const\
    \ maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n  const decs\
    \ = maxDec / maxOnes;\n  const decArray = Array(decs).fill().map((_, i) => i *\
    \ maxOnes);\n  const decArraySorted = decArray.map((dec) => arr.findIndex((val)\
    \ => val === dec));\n  const decArraySortedWithOnes = decArraySorted.map((dec)\
    \ => dec + 1);\n  const decArraySortedWithOnesSorted = decArraySortedWithOnes.sort((a,\
    \ b) => a - b);\n  const decArraySortedWithOnesSortedWithOnes = decArraySortedWithOnesSorted.map((dec)\
    \ => dec + 1);\n  const decArraySortedWithOnesSortedWithOnesSorted = decArraySortedWithOnesSortedWithOnes.sort((a,\
    \ b) => a - b);\n  const decArraySortedWithOnesSortedWithOnesSortedWithOnes =\
    \ decArraySortedWithOnesSortedWithOnesSortedWithOnes.map((dec) => dec + 1);\n\
    \  const decArraySortedWithOnesSortedWithOnesSortedWithOnesSorted = decArraySortedWithOnesSortedWithOnesSortedWithOnesSorted.sort((a,\
    \ b) => a - b);\n  const decArraySortedWithOnesSortedWithOnesSortedWithOnesSortedWithOnes\
    \ = decArraySortedWithOnesSortedWithOnesSortedWithOnesSortedWithOnesSorted.map((dec)\
    \ => dec + 1);\n  const decArraySortedWithOnesSortedWithOnesSortedWithOnesSortedWithOnesSorted\
    \ = decArraySortedWithOnesSortedWithOnesSortedWithOnesSortedWithOnesSorted.sort((a,\
    \ b) => a - b);\n  const decArraySortedWithOnesSortedWithOnesSortedWithOnesSortedWithOnesSortedWithOnes\
    \ = decArraySortedWithOnesSortedWithOnesSortedWithOnesSortedWithOnesSortedWithOnesSorted.map((dec)\
    \ => dec + 1);\n  const decArraySortedWithOnesSortedWithOnesSortedWithOnesSortedWithOnesSortedWithOnesSorted\
    \ = decArraySortedWithOnesSortedWithOnesSortedWithOnesSortedWithOnesSortedWithOnesSorted.sort((a,\
    \ b) => a - b);\n  const decArraySortedWithOnesSortedWithOnesSorted", "  const\
    \ len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr\n\
    \    .map((val) => parseInt(val.toString(2), 10))\n    .filter((val) => val >\
    \ 0);\n  const decimals = arr\n    .map((val) => parseInt(val.toString(10), 10))\n\
    \    .filter((val) => val > 0);\n  const decimalsSorted = decimals.sort((a, b)\
    \ => a - b);\n  const decimalsSortedLen = decimalsSorted.length;\n  const onesSorted\
    \ = ones\n    .map((val) => parseInt(val.toString(2), 10))\n    .filter((val)\
    \ => val > 0);\n  const onesSortedLen = onesSorted.length;\n  if (decimalsSortedLen\
    \ === onesSortedLen) {\n    return decimalsSorted;\n  }\n  const decimalsSortedSortedLen\
    \ = decimalsSortedLen + 1;\n  const onesSortedSortedLen = onesSortedLen + 1;\n\
    \  const decimalsSortedSortedArr = new Array(decimalsSortedSortedLen).fill(0);\n\
    \  const onesSortedSortedArr = new Array(onesSortedSortedLen).fill(0);\n  for\
    \ (let i = 0; i < decimalsSortedSortedLen; i++) {\n    decimalsSortedSortedArr[i]\
    \ = decimalsSortedSortedArr[i] + (decimalsSorted[i] / decimalsSortedSortedLen);\n\
    \  }\n  for (let i = 0; i < onesSortedSortedLen; i++) {\n    onesSortedSortedArr[i]\
    \ = onesSortedSortedArr[i] + (onesSorted[i] / onesSortedSortedLen);\n  }\n  const\
    \ decimalsSortedSortedSortedArr = new Array(decimalsSortedSortedSortedLen).fill(0);\n\
    \  const onesSortedSortedSortedArr = new Array(onesSortedSortedSortedLen).fill(0);\n\
    \  for (let i = 0; i < decimalsSortedSortedSortedLen; i++) {\n    decimalsSortedSortedSortedArr[i]\
    \ = decimalsSortedSortedSortedArr[i] + (decimalsSortedSorted[i] / decimalsSortedSortedSortedLen);\n\
    \  }\n  for (let i = 0; i < onesSortedSortedSortedLen; i++) {\n    onesSortedSortedSortedArr[i]\
    \ = onesSortedSortedSortedArr[i] + (onesSortedSorted[i] / onesSortedSortedSortedLen);\n\
    \  }\n  const decimalsSortedSortedSortedSortedArr = new Array(decimalsSortedSortedSortedSortedLen).fill(0);\n\
    \  const onesSortedSortedSortedSortedArr = new Array(onesSortedSortedSortedSortedLen).fill(0);\n\
    \  for (let i = 0; i < decimalsSortedSortedSortedSortedLen; i++) {\n    decimalsSortedSortedSortedSortedArr[i]\
    \ = decimalsSortedSortedSortedSortedArr[i] + (decimalsSortedSortedSorted[i] /\
    \ decimalsSortedSortedSortedSortedLen);\n  }", "  const len = arr.length;\n  if\
    \ (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x === 1);\n\
    \  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len\
    \ === 1) {\n    return ones;\n  }\n  const twos = arr.filter((x) => x === 2);\n\
    \  const len = twos.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len\
    \ === 1) {\n    return twos;\n  }\n  const threes = arr.filter((x) => x === 3);\n\
    \  const len = threes.length;\n  if (len === 0) {\n    return arr;\n  }\n  if\
    \ (len === 1) {\n    return threes;\n  }\n  const fours = arr.filter((x) => x\
    \ === 4);\n  const len = fours.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  if (len === 1) {\n    return fours;\n  }\n  const fives = arr.filter((x)\
    \ => x === 5);\n  const len = fives.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  if (len === 1) {\n    return fives;\n  }\n  const sixes = arr.filter((x)\
    \ => x === 6);\n  const len = sixes.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  if (len === 1) {\n    return sixes;\n  }\n  const sevens = arr.filter((x)\
    \ => x === 7);\n  const len = sevens.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  if (len === 1) {\n    return sevens;\n  }\n  const eights = arr.filter((x)\
    \ => x === 8);\n  const len = eights.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  if (len === 1) {\n    return eights;\n  }\n  const nines = arr.filter((x)\
    \ => x === 9);\n  const len = nines.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  if (len === 1) {\n    return nines;\n  }\n  const tens = arr.filter((x)\
    \ => x === 10);\n  const len = tens.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  if (len === 1) {\n    return tens;\n  }\n  const hundreds = arr.filter((x)\
    \ => x === 100);\n  const len = hundreds.length;\n  if (len === 0) {\n    return\
    \ arr;\n  }\n  if (len === 1) {\n    return hundreds;\n  }\n  const thousands\
    \ = arr.filter((x) => x === 1000);\n  const len = thousands.length;\n  if (len\
    \ === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return thousands;\n\
    \  }\n  const millions = arr.filter((x) => x === 1000000);\n  const len = millions.length;\n",
  "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n", "  arr.sort((a,\
    \ b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n", "  arr.sort((a, b)\
    \ => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n", "  arr.sort((a, b) =>\
    \ {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    const aBin =\
    \ bin(a);\n    const bBin = bin(b);\n    const aLen = aBin.length;\n    const\
    \ bLen = bBin.length;\n    const aOnes = aLen - aBin.indexOf('1');\n    const\
    \ bOnes = bLen - bBin.indexOf('1');\n    return aOnes - bOnes;\n  });\n  return\
    \ arr;\n}\n", "  arr.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b ===\
    \ 0) return -1;\n    return count_ones(a) - count_ones(b);\n  });\n  return arr;\n\
    }\n", "  return arr.sort((a, b) => {\n    const aNum = parseInt(a.toString(),\
    \ 2);\n    const bNum = parseInt(b.toString(), 2);\n    return aNum - bNum;\n\
    \  });\n}\n", "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len ===\
    \ 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen\
    \ = Math.max(len, maxOnes);\n  const newArr = new Array(maxLen);\n  for (let i\
    \ = 0; i < maxLen; i++) {\n    newArr[i] = 0;\n  }\n  for (let i = 0; i < len;\
    \ i++) {\n    newArr[ones[i]]++;\n  }\n  return newArr.map((v, i) => arr[i]);\n\
    }\n", "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n \
    \ const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0)\
    \ {\n    return arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n\
    \    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n\
    \    }\n    return -1;\n  });\n  for (let i = 0; i < len; i++) {\n    const one\
    \ = ones[i];\n    const index = arr.indexOf(one);\n    if (index > -1) {\n   \
    \   arr.splice(index, 1);\n    }\n  }\n  return arr;\n}\n", "  return arr.sort((a,\
    \ b) => {\n    const aNum = parseInt(a, 2);\n    const bNum = parseInt(b, 2);\n\
    \    return aNum - bNum;\n  });\n}\n", "  arr.sort((a, b) => {\n    if (a ===\
    \ 0) return 1;\n    if (b === 0) return -1;\n    return count_bits(a) - count_bits(b);\n\
    \  });\n  return arr;\n}\n", "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n\
    \  return arr;\n}\n", "  const len = arr.length;\n  if (len === 0) {\n    return\
    \ arr;\n  }\n  const ones = arr.filter(x => x === 1);\n  if (ones.length === 0)\
    \ {\n    return arr;\n  }\n  const len = ones.length;\n  const maxOnes = Math.ceil(Math.log(len)\
    \ / Math.LN2);\n  const maxLen = Math.max(len, maxOnes);\n  const maxLen2 = Math.ceil(Math.log(maxLen)\
    \ / Math.LN2);\n  const maxLen3 = Math.ceil(Math.log(maxLen2) / Math.LN2);\n \
    \ const maxLen4 = Math.ceil(Math.log(maxLen3) / Math.LN2);\n  const maxLen5 =\
    \ Math.ceil(Math.log(maxLen4) / Math.LN2);\n  const maxLen6 = Math.ceil(Math.log(maxLen5)\
    \ / Math.LN2);\n  const maxLen7 = Math.ceil(Math.log(maxLen6) / Math.LN2);\n \
    \ const maxLen8 = Math.ceil(Math.log(maxLen7) / Math.LN2);\n  const maxLen9 =\
    \ Math.ceil(Math.log(maxLen8) / Math.LN2);\n  const maxLen10 = Math.ceil(Math.log(maxLen9)\
    \ / Math.LN2);\n  const maxLen11 = Math.ceil(Math.log(maxLen10) / Math.LN2);\n\
    \  const maxLen12 = Math.ceil(Math.log(maxLen11) / Math.LN2);\n  const maxLen13\
    \ = Math.ceil(Math.log(maxLen12) / Math.LN2);\n  const maxLen14 = Math.ceil(Math.log(maxLen13)\
    \ / Math.LN2);\n  const maxLen15 = Math.ceil(Math.log(maxLen14) / Math.LN2);\n\
    \  const maxLen16 = Math.ceil(Math.log(maxLen15) / Math.LN2);\n  const maxLen17\
    \ = Math.ceil(Math.log(maxLen16) / Math.LN2);\n  const maxLen18 = Math.ceil(Math.log(maxLen17)\
    \ / Math.LN2);\n  const maxLen19 = Math.ceil(Math.log(maxLen18) / Math.LN2);\n\
    \  const maxLen20 = Math.ceil(Math.log(maxLen19) / Math.LN2);\n  const maxLen21\
    \ = Math.ceil(Math.log(maxLen20) / Math.LN2);\n  const maxLen22 = Math.ceil(Math.log(maxLen21)\
    \ / Math.LN2);\n  const maxLen23 = Math.ceil(Math.log(maxLen22) / Math.LN2);\n\
    \  const maxLen24 = Math.ceil(Math.log(maxLen23) / Math.LN2);\n  const maxLen25\
    \ = Math.ceil(Math.log(maxLen24) / Math.LN2);\n  const maxLen26 = Math.ceil(Math.log(maxLen25)\
    \ / Math.LN2);\n  const maxLen27 = Math.ceil(Math.log(maxLen26) / Math.LN2);\n\
    \  const maxLen28 = Math.ceil(Math.log(maxLen27) / Math.LN2);\n  const maxLen29\
    \ = Math.ceil(Math.log(maxLen28) / Math.LN", "  arr.sort((a, b) => a - b);\n \
    \ return arr;\n}\n", "  const len = arr.length;\n  if (len === 0) {\n    return\
    \ arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const ones = arr.filter(v\
    \ => v === 1);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const sorted\
    \ = ones\n    .map(v => [v, v * 2])\n    .sort((a, b) => a[1] - b[1]);\n  return\
    \ sorted.map(v => v[0]);\n}\n", "  const len = arr.length;\n  if (len < 2) {\n\
    \    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n\
    \  const maxLen = Math.max(...arr.map(a => a.length));\n  const maxLenDiff = Math.abs(maxLen\
    \ - len);\n  if (maxOnes <= maxLenDiff) {\n    return arr;\n  }\n  const sorted\
    \ = [];\n  let cur = 0;\n  for (let i = 0; i < len; i++) {\n    while (cur < len\
    \ && arr[cur] === 0) {\n      cur++;\n    }\n    sorted.push(arr[cur]);\n    while\
    \ (cur < len && arr[cur] === 1) {\n      cur++;\n    }\n  }\n  return sorted;\n\
    }\n", "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n \
    \ const ones = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2,\
    \ Math.ceil(Math.log(ones) / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes)\
    \ / Math.LN10));\n  const decs = maxDec / maxOnes;\n  const decToOne = 1 / decs;\n\
    \  const oneToDec = 1 / maxOnes;\n  const oneToOne = 1 / len;\n  const decToOnes\
    \ = decToOne * oneToOne;\n  const oneToOnes = oneToOne * len;\n  const decToOneToOnes\
    \ = decToOnes * oneToOnes;\n  const oneToOneToOnes = oneToOnes * len;\n  const\
    \ decToOneToOneToOnes = decToOneToOnes * oneToOneToOnes;\n  const oneToOneToOneToOnes\
    \ = oneToOneToOnes * len;\n  const decToOneToOneToOneToOnes = decToOneToOneToOnes\
    \ * oneToOneToOneToOnes;\n  const oneToOneToOneToOneToOnes = oneToOneToOneToOnes\
    \ * len;\n  const decToOneToOneToOneToOneTos = decToOneToOneToOneToOnes * oneToOneToOneToOneToOnes;\n\
    \  const oneToOneToOneToOneToOneToOnes = oneToOneToOneToOneToOneToOnes * len;\n\
    \  const decToOneToOneToOneToOneToOneTos = decToOneToOneToOneToOneToOneToOnes\
    \ * oneToOneToOneToOneToOneToOnes;\n  const oneToOneToOneToOneToOneToOneTos =\
    \ oneToOneToOneToOneToOneToOneToOneTos * len;\n  const decToOneToOneToOneToOneToOneToOneTos\
    \ = decToOneToOneToOneToOneToOneToOneToOneTos * oneToOneToOneToOneToOneToOneToOneTos;\n\
    \  const oneToOneToOneToOneToOneToOneToOneTos = oneToOneToOneToOneToOneToOneToOneToOneTos\
    \ * len;\n  const decToOneToOneToOneToOneToOneToOneTos = decToOneToOneToOneToOneToOneToOneToOneTos\
    \ * oneToOneToOneToOneToOneToOneToOneTos;", "  const len = arr.length;\n  if (len\
    \ === 0) {\n    return arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n\
    \  if (ones.length === 0) {\n    return arr;\n  }\n  const len = ones.length;\n\
    \  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n  const maxOnesLen =\
    \ Math.floor(Math.pow(2, maxOnes) * Math.LOG2E);\n  const maxOnesLen2 = maxOnesLen\
    \ / 2;\n  const maxOnesLen3 = maxOnesLen / 3;\n  const maxOnesLen4 = maxOnesLen\
    \ / 4;\n  const maxOnesLen5 = maxOnesLen / 5;\n  const maxOnesLen6 = maxOnesLen\
    \ / 6;\n  const maxOnesLen7 = maxOnesLen / 7;\n  const maxOnesLen8 = maxOnesLen\
    \ / 8;\n  const maxOnesLen9 = maxOnesLen / 9;\n  const maxOnesLen10 = maxOnesLen\
    \ / 10;\n  const maxOnesLen11 = maxOnesLen / 11;\n  const maxOnesLen12 = maxOnesLen\
    \ / 12;\n  const maxOnesLen13 = maxOnesLen / 13;\n  const maxOnesLen14 = maxOnesLen\
    \ / 14;\n  const maxOnesLen15 = maxOnesLen / 15;\n  const maxOnesLen16 = maxOnesLen\
    \ / 16;\n  const maxOnesLen17 = maxOnesLen / 17;\n  const maxOnesLen18 = maxOnesLen\
    \ / 18;\n  const maxOnesLen19 = maxOnesLen / 19;\n  const maxOnesLen20 = maxOnesLen\
    \ / 20;\n  const maxOnesLen21 = maxOnesLen / 21;\n  const maxOnesLen22 = maxOnesLen\
    \ / 22;\n  const maxOnesLen23 = maxOnesLen / 23;\n  const maxOnesLen24 = maxOnesLen\
    \ / 24;\n  const maxOnesLen25 = maxOnesLen / 25;\n  const maxOnesLen26 = maxOnesLen\
    \ / 26;\n  const maxOnesLen27 = maxOnesLen / 27;\n  const maxOnesLen28 = maxOnesLen\
    \ / 28;\n  const maxOnesLen29 = maxOnesLen / 29;\n  const maxOnesLen30 = maxOnesLen\
    \ / 30;\n  const maxOnesLen31 = maxOnesLen / 31;\n  const maxOnesLen32 = maxOnesLen\
    \ / ", "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n",
  "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
    \ = arr.filter((x) => x > 0);\n  if (ones.length === 0) {\n    return arr;\n \
    \ }\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const\
    \ maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n  const maxOnesLen = Math.pow(2,\
    \ maxOnes);\n  const maxOnesLenLen = Math.pow(2, maxOnesLen);\n  const maxOnesLenLenLen\
    \ = Math.pow(2, maxOnesLenLen);\n  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n\
    \  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLen\
    \ = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n\
    \  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLen\
    \ = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n\
    \  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLen\
    \ = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n\
    \  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLen\
    \ = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n\
    \  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLen\
    \ = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n\
    \  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLen\
    \ = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n\
    \  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLen\
    \ = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLenLen);\n\
    \  const maxOnesLenLen", "  const len = arr.length;\n  if (len < 2) {\n    return\
    \ arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n  const zeros = arr.filter((val)\
    \ => val === 0);\n  const onesLen = ones.length;\n  const zerosLen = zeros.length;\n\
    \  if (onesLen === zerosLen) {\n    return ones;\n  }\n  if (onesLen > zerosLen)\
    \ {\n    return zeros;\n  }\n  return ones;\n}\n", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = arr\n    .map((val)\
    \ => val.toString(2).split('')\n    .filter((val) => val === '1').length)\n  \
    \  .sort((a, b) => a - b);\n  const decimals = arr\n    .map((val) => val.toString(2).split('')\n\
    \    .filter((val) => val === '1').length)\n    .sort((a, b) => b - a);\n  const\
    \ maxOnes = Math.max(...ones);\n  const maxDecimal = Math.max(...decimals);\n\
    \  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxDecimalOnes\
    \ = ones[maxDecimalIndex];\n  const maxDecimalOnesIndex = ones.indexOf(maxDecimalOnes);\n\
    \  const maxDecimalOnesIndex = maxDecimalOnesIndex === -1 ? maxDecimalIndex :\
    \ maxDecimalOnesIndex;\n  const maxDecimalOnesIndex = maxDecimalOnesIndex ===\
    \ -1 ? maxDecimalIndex : maxDecimalOnesIndex;\n  const maxDecimalOnesIndex = maxDecimalOnesIndex\
    \ === -1 ? maxDecimalIndex : maxDecimalOnesIndex;\n  const maxDecimalOnesIndex\
    \ = maxDecimalOnesIndex === -1 ? maxDecimalIndex : maxDecimalOnesIndex;\n  const\
    \ maxDecimalOnesIndex = maxDecimalOnesIndex === -1 ? maxDecimalIndex : maxDecimalOnesIndex;\n\
    \  const maxDecimalOnesIndex = maxDecimalOnesIndex === -1 ? maxDecimalIndex :\
    \ maxDecimalOnesIndex;\n  const maxDecimalOnesIndex = maxDecimalOnesIndex ===\
    \ -1 ? maxDecimalIndex : maxDecimalOnesIndex;\n  const maxDecimalOnesIndex = maxDecimalOnesIndex\
    \ === -1 ? maxDecimalIndex : maxDecimalOnesIndex;\n  const maxDecimalOnesIndex\
    \ = maxDecimalOnesIndex === -1 ? maxDecimalIndex : maxDecimalOnesIndex;\n  const\
    \ maxDecimalOnesIndex = maxDecimalOnesIndex === -1 ? maxDecimalIndex : maxDecimalOnesIndex;\n\
    \  const maxDecimalOnesIndex = maxDecimalOnesIndex === -1 ? maxDecimalIndex :\
    \ maxDecimalOnesIndex;\n  const maxDecimalOnesIndex = maxDecimalOnesIndex ===\
    \ -1 ? maxDecimalIndex : maxDecimalOnesIndex;\n  const maxDecimalOnesIndex = maxDecimalOnesIndex\
    \ === -1 ? maxDecimalIndex : maxDecimalOnesIndex;\n  const maxDecimalOnesIndex\
    \ = maxDecimalOnesIndex === -1 ? maxDecimalIndex : maxDecimalOnesIndex;\n  const\
    \ maxDecimalOnesIndex = maxDecimalOnesIndex === -1 ? maxDecimalIndex : maxDecimalOnesIndex;\n\
    \  const maxDecimalOnesIndex = maxDecimalOne", "  const len = arr.length;\n  if\
    \ (len < 2) {\n    return arr;\n  }\n  const ones = arr\n    .map((val) => val.toString(2).length)\n\
    \    .sort((a, b) => a - b);\n  const decimals = arr\n    .map((val) => val.toString(10).length)\n\
    \    .sort((a, b) => a - b);\n  const maxOnes = Math.max(...ones);\n  const maxDecimal\
    \ = Math.max(...decimals);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n\
    \  const maxDecimalOnes = ones[maxDecimalIndex];\n  const maxDecimalIndex = ones.length\
    \ - maxDecimalOnes;\n  const maxOnesIndex = ones.length - maxOnes;\n  const maxOnesIndex\
    \ = ones.length - maxOnes;\n  const maxOnesIndex = ones.length - maxOnes;\n  const\
    \ maxOnesIndex = ones.length - maxOnes;\n  const maxOnesIndex = ones.length -\
    \ maxOnes;\n  const maxOnesIndex = ones.length - maxOnes;\n  const maxOnesIndex\
    \ = ones.length - maxOnes;\n  const maxOnesIndex = ones.length - maxOnes;\n  const\
    \ maxOnesIndex = ones.length - maxOnes;\n  const maxOnesIndex = ones.length -\
    \ maxOnes;\n  const maxOnesIndex = ones.length - maxOnes;\n  const maxOnesIndex\
    \ = ones.length - maxOnes;\n  const maxOnesIndex = ones.length - maxOnes;\n  const\
    \ maxOnesIndex = ones.length - maxOnes;\n  const maxOnesIndex = ones.length -\
    \ maxOnes;\n  const maxOnesIndex = ones.length - maxOnes;\n  const maxOnesIndex\
    \ = ones.length - maxOnes;\n  const maxOnesIndex = ones.length - maxOnes;\n  const\
    \ maxOnesIndex = ones.length - maxOnes;\n  const maxOnesIndex = ones.length -\
    \ maxOnes;\n  const maxOnesIndex = ones.length - maxOnes;\n  const maxOnesIndex\
    \ = ones.length - maxOnes;\n  const maxOnesIndex = ones.length - maxOnes;\n  const\
    \ maxOnesIndex = ones.length - maxOnes;\n  const maxOnesIndex = ones.length -\
    \ maxOnes;\n  const maxOnesIndex = ones.length - maxOnes;\n  const maxOnesIndex\
    \ = ones.length - maxOnes;\n  const maxOnesIndex = ones.length - maxOnes;\n  const\
    \ maxOnesIndex = ones.length - maxOnes;\n  const maxOnesIndex = ones.length -\
    \ maxOnes;\n  const maxOnesIndex = ones.length - maxOnes;\n  const maxOnesIndex\
    \ = ones.length - maxOnes;\n  const maxOnesIndex = ones.length - max", "  const\
    \ len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones =\
    \ arr.map((x) => x > 0);\n  const len = ones.length;\n  const maxOnes = Math.ceil(Math.log(len)\
    \ / Math.LN2);\n  const maxLen = Math.max(len, maxOnes);\n  const maxLen2 = Math.ceil(Math.log(maxLen)\
    \ / Math.LN2);\n  const maxLen4 = Math.ceil(Math.pow(maxLen, 4));\n  const maxLen6\
    \ = Math.ceil(Math.pow(maxLen, 6));\n  const maxLen8 = Math.ceil(Math.pow(maxLen,\
    \ 8));\n  const maxLen16 = Math.ceil(Math.pow(maxLen, 16));\n  const maxLen32\
    \ = Math.ceil(Math.pow(maxLen, 32));\n  const maxLen64 = Math.ceil(Math.pow(maxLen,\
    \ 64));\n  const maxLen128 = Math.ceil(Math.pow(maxLen, 128));\n  const maxLen256\
    \ = Math.ceil(Math.pow(maxLen, 256));\n  const maxLen512 = Math.ceil(Math.pow(maxLen,\
    \ 512));\n  const maxLen1024 = Math.ceil(Math.pow(maxLen, 1024));\n  const maxLen4096\
    \ = Math.ceil(Math.pow(maxLen, 4096));\n  const maxLen8192 = Math.ceil(Math.pow(maxLen,\
    \ 8192));\n  const maxLen16384 = Math.ceil(Math.pow(maxLen, 16384));\n  const\
    \ maxLen32768 = Math.ceil(Math.pow(maxLen, 32768));\n  const maxLen65536 = Math.ceil(Math.pow(maxLen,\
    \ 65536));\n  const maxLen131072 = Math.ceil(Math.pow(maxLen, 131072));\n  const\
    \ maxLen262144 = Math.ceil(Math.pow(maxLen, 262144));\n  const maxLen524288 =\
    \ Math.ceil(Math.pow(maxLen, 524288));\n  const maxLen1048576 = Math.ceil(Math.pow(maxLen,\
    \ 1048576));\n  const maxLen2097152 = Math.ceil(Math.pow(maxLen, 2097152));\n\
    \  const maxLen4194304 = Math.ceil(Math.pow(maxLen, 4194304));\n  const maxLen8388608\
    \ = Math.ceil(Math.pow(maxLen, 8388608));\n  const maxLen16777216 = Math.ceil(Math.pow(maxLen,\
    \ 16777216));\n  const maxLen33554432 = Math.ceil(Math.pow(maxLen, 33554432));\n\
    \  const maxLen67108864 = Math.ceil(Math.pow(maxLen, 67108864));\n  const maxLen134217728\
    \ = Math.ceil(Math.pow(maxLen, 134217728));\n  const maxLen268435456 = Math.ceil(Math.pow(maxLen,\
    \ 268435456", "  let len = arr.length;\n  if (len === 0) {\n    return arr;\n\
    \  }\n  if (len === 1) {\n    return arr;\n  }\n  if (len === 2) {\n    if (arr[0]\
    \ === arr[1]) {\n      return arr;\n    }\n    return [arr[0], arr[1]];\n  }\n\
    \  let mid = Math.floor(len / 2);\n  let left = sort_array(arr.slice(0, mid));\n\
    \  let right = sort_array(arr.slice(mid));\n  let result = [];\n  for (let i =\
    \ 0; i < left.length; i++) {\n    for (let j = 0; j < right.length; j++) {\n \
    \     if (left[i] === right[j]) {\n        result.push(left[i]);\n      }\n  \
    \  }\n  }\n  return result;\n}\n", "  const len = arr.length;\n  if (len < 2)\
    \ {\n    return arr;\n  }\n  const ones = arr.filter((x) => x > 0);\n  const dec\
    \ = ones\n    .map((x) => parseInt(x.toString(2), 10))\n    .sort((a, b) => a\
    \ - b);\n  const dec = dec.map((x) => x * Math.pow(10, x.length - 1));\n  const\
    \ dec = dec.map((x) => Math.round(x));\n  const dec = dec.map((x) => Math.max(0,\
    \ x));\n  const dec = dec.map((x) => Math.min(x, Math.pow(10, len - 1)));\n  return\
    \ dec.map((x) => arr[x]);\n}\n", "  const len = arr.length;\n  if (len < 2) {\n\
    \    return arr;\n  }\n  const ones = arr.filter(x => x === 1);\n  const len =\
    \ ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len)\
    \ / Math.LN2);\n  const maxDec = Math.pow(10, maxOnes);\n  const maxNum = Math.floor(maxDec\
    \ * Math.pow(10, len - 1));\n  const minNum = Math.ceil(Math.log(len) / Math.LN2);\n\
    \  const minDec = Math.pow(10, minNum);\n  const minNumNum = Math.floor(minDec\
    \ * Math.pow(10, len - 1));\n  const maxNumNum = Math.floor(maxDec * Math.pow(10,\
    \ len - 1));\n  const maxNumNumNum = Math.floor(maxDec * Math.pow(10, len - 1));\n\
    \  const maxNumNumNumNum = Math.floor(maxDec * Math.pow(10, len - 1));\n  const\
    \ maxNumNumNumNum = Math.floor(maxDec * Math.pow(10, len - 1));\n  const maxNumNumNumNumNum\
    \ = Math.floor(maxDec * Math.pow(10, len - 1));\n  const maxNumNumNumNumNumNum\
    \ = Math.floor(maxDec * Math.pow(10, len - 1));\n  const maxNumNumNumNumNumNum\
    \ = Math.floor(maxDec * Math.pow(10, len - 1));\n  const maxNumNumNumNumNumNumNum\
    \ = Math.floor(maxDec * Math.pow(10, len - 1));\n  const maxNumNumNumNumNumNumNumNum\
    \ = Math.floor(maxDec * Math.pow(10, len - 1));\n  const maxNumNumNumNumNumNumNumNum\
    \ = Math.floor(maxDec * Math.pow(10, len - 1));\n  const maxNumNumNumNumNumNumNumNumNum\
    \ = Math.floor(maxDec * Math.pow(10, len - 1));\n  const maxNumNumNumNumNumNumNumNumNumNum\
    \ = Math.floor(maxDec * Math.pow(10, len - 1));\n  const maxNumNumNumNumNumNumNumNumNumNum\
    \ = Math.floor(maxDec * Math.pow(10, len - 1));\n  const maxNumNumNumNumNumNumNumNumNumNumNum\
    \ = Math.floor(maxDec * Math.pow(10, len - 1));\n  const maxNumNumNumNumNumNumNumNumNumNumNum\
    \ = Math.floor(maxDec * Math.pow(10, len - 1));\n  const maxNumNumNumNumNumNumNumNumNumNumNum\
    \ = Math.floor(maxDec * Math.pow(10, len - 1));\n  const maxNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Math.floor(maxDec * Math.pow(10, len - 1));\n  const maxNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Math.floor(maxDec * Math.pow(10, len - 1));", "  return arr.sort((a, b) =>\
    \ a > b ? 1 : a < b ? -1 : 0);\n}\n", "  return arr.sort((a, b) => {\n    if (a\
    \ === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n\
    \    return -1;\n  });\n}\n", "  arr.sort((a, b) => {\n    const ones = binToInt(binToInt(a)\
    \ + binToInt(b));\n    if (ones === 0) {\n      return 0;\n    }\n    return ones\
    \ - 1;\n  });\n  return arr;\n}\n", "  return arr.sort((a, b) => a > b ? 1 : a\
    \ < b ? -1 : 0);\n}\n", "  const len = arr.length;\n  if (len < 2) {\n    return\
    \ arr;\n  }\n  const ones = arr.filter((v) => v === 1);\n  const len = ones.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len)\
    \ / Math.LN2);\n  const maxLen = Math.max(len, maxOnes);\n  const maxLen2 = Math.ceil(Math.log(maxLen)\
    \ / Math.LN2);\n  const maxLen3 = Math.ceil(Math.log(maxLen2) / Math.LN2);\n \
    \ const maxLen4 = Math.ceil(Math.log(maxLen3) / Math.LN2);\n  const maxLen5 =\
    \ Math.ceil(Math.log(maxLen4) / Math.LN2);\n  const maxLen6 = Math.ceil(Math.log(maxLen5)\
    \ / Math.LN2);\n  const maxLen7 = Math.ceil(Math.log(maxLen6) / Math.LN2);\n \
    \ const maxLen8 = Math.ceil(Math.log(maxLen7) / Math.LN2);\n  const maxLen9 =\
    \ Math.ceil(Math.log(maxLen8) / Math.LN2);\n  const maxLen10 = Math.ceil(Math.log(maxLen9)\
    \ / Math.LN2);\n  const maxLen11 = Math.ceil(Math.log(maxLen10) / Math.LN2);\n\
    \  const maxLen12 = Math.ceil(Math.log(maxLen11) / Math.LN2);\n  const maxLen13\
    \ = Math.ceil(Math.log(maxLen12) / Math.LN2);\n  const maxLen14 = Math.ceil(Math.log(maxLen13)\
    \ / Math.LN2);\n  const maxLen15 = Math.ceil(Math.log(maxLen14) / Math.LN2);\n\
    \  const maxLen16 = Math.ceil(Math.log(maxLen15) / Math.LN2);\n  const maxLen17\
    \ = Math.ceil(Math.log(maxLen16) / Math.LN2);\n  const maxLen18 = Math.ceil(Math.log(maxLen17)\
    \ / Math.LN2);\n  const maxLen19 = Math.ceil(Math.log(maxLen18) / Math.LN2);\n\
    \  const maxLen20 = Math.ceil(Math.log(maxLen19) / Math.LN2);\n  const maxLen21\
    \ = Math.ceil(Math.log(maxLen20) / Math.LN2);\n  const maxLen22 = Math.ceil(Math.log(maxLen21)\
    \ / Math.LN2);\n  const maxLen23 = Math.ceil(Math.log(maxLen22) / Math.LN2);\n\
    \  const maxLen24 = Math.ceil(Math.log(maxLen23) / Math.LN2);\n  const maxLen25\
    \ = Math.ceil(Math.log(maxLen24) / Math.LN2);\n  const maxLen26 = Math.ceil(Math.log(maxLen25)\
    \ / Math.LN2);\n  const maxLen27 = Math.ceil(Math.log(maxLen26) / Math.LN2);\n\
    \  const maxLen28 = Math.ceil(Math.log(maxLen27) / Math.LN2);\n  const maxLen29\
    \ = Math.ceil(Math.log(maxLen28) / Math.LN", "  const len = arr.length;\n  if\
    \ (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).split('').reduce((acc,\
    \ val) => acc + +val, 0));\n  const sortedArr = arr.map((val) => {\n    const\
    \ onesCount = ones[val];\n    if (onesCount === 0) {\n      return val;\n    }\n\
    \    return val - onesCount;\n  });\n  return sortedArr;\n}\n", "  const len =\
    \ arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n\
    \  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const\
    \ maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(x => Math.log2(x)));\n\
    \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.max(maxLen, maxOnes);\n\
    \  const maxLen = Math.max(maxLen, Math.ceil(Math.log2(len)));\n  const maxLen\
    \ = Math.max(maxLen, Math.ceil(Math.log2(maxOnes)));\n  const maxLen = Math.max(maxLen,\
    \ Math.ceil(Math.log2(maxLen)));\n  const maxLen = Math.max(maxLen, Math.ceil(Math.log2(len)));\n\
    \  const maxLen = Math.max(maxLen, Math.ceil(Math.log2(maxOnes)));\n  const maxLen\
    \ = Math.max(maxLen, Math.ceil(Math.log2(maxLen)));\n  const maxLen = Math.max(maxLen,\
    \ Math.ceil(Math.log2(len)));\n  const maxLen = Math.max(maxLen, Math.ceil(Math.log2(maxOnes)));\n\
    \  const maxLen = Math.max(maxLen, Math.ceil(Math.log2(maxLen)));\n  const maxLen\
    \ = Math.max(maxLen, Math.ceil(Math.log2(len)));\n  const maxLen = Math.max(maxLen,\
    \ Math.ceil(Math.log2(maxOnes)));\n  const maxLen = Math.max(maxLen, Math.ceil(Math.log2(maxLen)));\n\
    \  const maxLen = Math.max(maxLen, Math.ceil(Math.log2(len)));\n  const maxLen\
    \ = Math.max(maxLen, Math.ceil(Math.log2(maxOnes)));\n  const maxLen = Math.max(maxLen,\
    \ Math.ceil(Math.log2(maxLen)));\n  const maxLen = Math.max(maxLen, Math.ceil(Math.log2(len)));\n\
    \  const maxLen = Math.max(maxLen, Math.ceil(Math.log2(maxOnes)));\n  const maxLen\
    \ = Math.max(maxLen, Math.ceil(Math.log2(maxLen)));\n  const maxLen = Math.max(maxLen,\
    \ Math.ceil(Math.log2(len)));\n  const maxLen = Math.max(maxLen, Math.ceil(Math.log2(maxOnes)));\n\
    \  const maxLen = Math.max(maxLen, Math.ceil(Math.log2(maxLen)));\n  const maxLen\
    \ = Math.max(maxLen, Math.ceil(Math.log2(len)));\n  const maxLen = Math.max(maxLen,\
    \ Math.ceil(Math.log2(maxOnes)));\n  const maxLen = Math.max(maxLen, Math.ceil(Math.log2(maxLen)));\n\
    \  const maxLen = Math.max(maxLen, Math.ceil(Math.log2(len)));\n  const max",
  "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
    \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
    \ arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const minOnes = Math.min(...ones);\n\
    \  const maxLen = Math.max(...arr.map(v => v.length));\n  const minLen = Math.min(...arr.map(v\
    \ => v.length));\n  const maxDiff = Math.max(maxLen - minLen);\n  const minDiff\
    \ = Math.min(maxLen - minLen);\n  const maxDiffMinOnes = Math.max(...ones);\n\
    \  const minDiffMinOnes = Math.min(...ones);\n  const maxDiffMinOnesLen = Math.max(...ones);\n\
    \  const minDiffMinOnesLen = Math.min(...ones);\n  const maxDiffMinOnesMax = Math.max(...maxDiffMinOnes);\n\
    \  const minDiffMinOnesMax = Math.min(...minDiffMinOnes);\n  const maxDiffMinOnesMin\
    \ = Math.max(...minDiffMinOnes);\n  const minDiffMinOnesMin = Math.min(...minDiffMinOnes);\n\
    \  const maxDiffMinOnesMaxLen = Math.max(...maxDiffMinOnesLen);\n  const minDiffMinOnesMaxLen\
    \ = Math.min(...minDiffMinOnesLen);\n  const maxDiffMinOnesMinLen = Math.max(...minDiffMinOnesLen);\n\
    \  const maxDiffMinOnesMaxLen = Math.max(...maxDiffMinOnesMax);\n  const minDiffMinOnesMaxLen\
    \ = Math.min(...minDiffMinOnesMax);\n  const maxDiffMinOnesMinLen = Math.max(...minDiffMinOnesMin);\n\
    \  const maxDiffMinOnesMaxLen = Math.max(...maxDiffMinOnesMaxLen);\n  const minDiffMinOnesMaxLen\
    \ = Math.min(...minDiffMinOnesMaxLen);\n  const maxDiffMinOnesMinLen = Math.max(...minDiffMinOnesMinLen);\n\
    \  const maxDiffMinOnesMaxLen = Math.max(...maxDiffMinOnesMaxLen);\n  const minDiffMinOnesMaxLen\
    \ = Math.min(...minDiffMinOnesMaxLen);\n  const maxDiffMinOnesMinLen = Math.max(...minDiffMinOnesMinLen);\n\
    \  const maxDiffMinOnesMaxLen = Math.max(...maxDiffMinOnesMaxLen);\n  const minDiffMinOnesMaxLen\
    \ = Math.min(...minDiffMinOnesMaxLen);\n  const maxDiffMinOnesMinLen = Math.max(...minDiffMinOnes",
  "  arr.sort((a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return -1\n\
    \    return a > b ? 1 : -1\n  })\n  return arr\n}\n", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.filter(x => x ===\
    \ 1);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const len = ones.length;\n\
    \  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n  const maxOnesLen =\
    \ Math.max(maxOnes, len);\n  const maxOnesLenLen = Math.ceil(Math.log(maxOnesLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLen = Math.ceil(Math.log(maxOnesLenLen) /\
    \ Math.LN2);\n  const maxOnesLenLenLen = Math.ceil(Math.log(maxOnesLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLen = Math.ceil(Math.log(maxOnesLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOnesLenLenLenLen)\
    \ / Math.LN2);\n  const maxOnesLenLenLenLenLen = Math.ceil(Math.log(maxOne", " \
    \ const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
    \ = arr\n    .map((v) => v.toString(2).split('')\n      .filter((v) => v === '1').length)\n\
    \    .sort((a, b) => a - b);\n  const decs = arr\n    .map((v) => v.toString(2).split('')\n\
    \      .filter((v) => v === '1').length)\n    .sort((a, b) => b - a);\n  const\
    \ maxOnes = Math.max(...ones);\n  const maxDecs = Math.max(...decs);\n  const\
    \ maxLen = Math.max(maxOnes, maxDecs);\n  const onesArr = new Array(maxLen).fill(0);\n\
    \  const decsArr = new Array(maxLen).fill(0);\n  for (let i = 0; i < len; i++)\
    \ {\n    const one = arr[i].toString(2).split('')\n      .filter((v) => v ===\
    \ '1').length;\n    const dec = arr[i].toString(2).split('')\n      .filter((v)\
    \ => v === '1').length;\n    onesArr[onesArr.length - 1] += 1;\n    decsArr[decsArr.length\
    \ - 1] += dec;\n  }\n  const onesArr = onesArr.map((v) => v / maxLen);\n  const\
    \ decsArr = decsArr.map((v) => v / maxLen);\n  return onesArr.map((v, i) => v\
    \ * maxDecs + decsArr[i]);\n}\n", "  const len = arr.length;\n  if (len === 0)\
    \ {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n\
    \  const maxLen = Math.max(...len);\n  const maxLenDiff = Math.abs(maxLen - len);\n\
    \  const maxOnesDiff = Math.abs(maxOnes - ones);\n  if (maxLenDiff > maxOnesDiff)\
    \ {\n    return arr;\n  }\n  const maxOnesDiff = Math.abs(maxOnes - ones);\n \
    \ const onesDiff = maxOnesDiff / maxLenDiff;\n  const onesDiffInt = Math.floor(onesDiff);\n\
    \  const onesDiffDecimal = onesDiff - onesDiffInt;\n  const onesDiffDecimalInt\
    \ = Math.floor(onesDiffDecimal);\n  const onesDiffDecimalFraction = onesDiffDecimal\
    \ - onesDiffDecimalInt;\n  const onesDiffDecimalFractionInt = Math.floor(onesDiffDecimalFraction);\n\
    \  const onesDiffDecimalFractionFraction = onesDiffDecimalFraction - onesDiffDecimalFractionInt;\n\
    \  const onesDiffDecimalFractionFractionInt = Math.floor(onesDiffDecimalFractionFraction);\n\
    \  const onesDiffDecimalFractionFractionFraction = onesDiffDecimalFractionFraction\
    \ - onesDiffDecimalFractionFractionInt;\n  const onesDiffDecimalFractionFractionFractionInt\
    \ = Math.floor(onesDiffDecimalFractionFractionFraction);\n  const onesDiffDecimalFractionFractionFraction\
    \ = onesDiffDecimalFractionFraction - onesDiffDecimalFractionFractionInt;\n  const\
    \ onesDiffDecimalFractionFractionFractionInt = Math.floor(onesDiffDecimalFractionFractionFraction);\n\
    \  const onesDiffDecimalFractionFractionFraction = onesDiffDecimalFractionFraction\
    \ - onesDiffDecimalFractionFractionInt;\n  const onesDiffDecimalFractionFractionFractionInt\
    \ = Math.floor(onesDiffDecimalFractionFractionFraction);\n  const onesDiffDecimalFractionFractionFraction\
    \ = onesDiffDecimalFractionFraction - onesDiffDecimalFractionFractionInt;\n  const\
    \ onesDiffDecimalFractionFractionFractionInt = Math.floor(onesDiffDecimalFractionFractionFraction);\n\
    \  const onesDiffDecimalFractionFractionFraction = onesDiffDecimalFractionFraction\
    \ - onesDiffDecimalFractionFractionInt;\n  const onesDiffDecimalFractionFractionFractionInt\
    \ = Math.floor(onesDiffDecimalFractionFractionFraction);\n  const onesDiffDecimalFractionFractionFraction\
    \ = onesDiffDecimalFractionFraction - onesDiffDecimalFractionFractionInt;\n  const\
    \ onesDiffDecimalFractionFractionFractionInt = Math.floor(onesDiffDecimalFraction",
  "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
    \ = arr.filter((val) => val === 1);\n  const len = ones.length;\n  if (len ===\
    \ 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen\
    \ = Math.max(...arr.map((val) => val.length));\n  const maxLenDiff = Math.abs(maxLen\
    \ - len);\n  const maxOnesDiff = Math.abs(maxOnes - len);\n  const maxDiff = Math.max(maxLenDiff,\
    \ maxOnesDiff);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n  const maxDiffDiff\
    \ = Math.abs(maxDiff - len);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n\
    \  const maxDiffDiff = Math.abs(maxDiff - len);\n  const maxDiffDiff = Math.abs(maxDiff\
    \ - len);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n  const maxDiffDiff\
    \ = Math.abs(maxDiff - len);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n\
    \  const maxDiffDiff = Math.abs(maxDiff - len);\n  const maxDiffDiff = Math.abs(maxDiff\
    \ - len);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n  const maxDiffDiff\
    \ = Math.abs(maxDiff - len);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n\
    \  const maxDiffDiff = Math.abs(maxDiff - len);\n  const maxDiffDiff = Math.abs(maxDiff\
    \ - len);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n  const maxDiffDiff\
    \ = Math.abs(maxDiff - len);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n\
    \  const maxDiffDiff = Math.abs(maxDiff - len);\n  const maxDiffDiff = Math.abs(maxDiff\
    \ - len);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n  const maxDiffDiff\
    \ = Math.abs(maxDiff - len);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n\
    \  const maxDiffDiff = Math.abs(maxDiff - len);\n  const maxDiffDiff = Math.abs(maxDiff\
    \ - len);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n  const maxDiffDiff\
    \ = Math.abs(maxDiff - len);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n\
    \  const maxDiffDiff = Math.abs(maxDiff - len);\n  const maxDiffDiff = Math.abs(maxDiff\
    \ - len);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n  const maxDiffDiff\
    \ = Math.abs(maxDiff - len);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n\
    \  const maxDiffDiff = Math.abs(maxDiff - len);", "  const len = arr.length;\n\
    \  if (len < 2) {\n    return arr;\n  }\n  const ones = arr\n    .map((x) => parseInt(x.toString(2),\
    \ 2))\n    .filter((x) => x > 0);\n  const len = ones.length;\n  if (len === 0)\
    \ {\n    return arr;\n  }\n  const max = Math.max(...ones);\n  const min = Math.min(...ones);\n\
    \  const maxDecimal = max % Math.pow(10, len) - Math.pow(10, len - 1);\n  const\
    \ minDecimal = min % Math.pow(10, len) - Math.pow(10, len - 1);\n  const maxDecimalString\
    \ = maxDecimal.toString(2);\n  const minDecimalString = minDecimal.toString(2);\n\
    \  const maxDecimalLen = maxDecimalString.length;\n  const minDecimalLen = minDecimalString.length;\n\
    \  const maxDecimalLenLen = Math.max(maxDecimalLen, minDecimalLen);\n  const maxDecimalLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN10);\n  const minDecimalLenLen\
    \ = Math.ceil(Math.log(minDecimalLenLen) / Math.LN10);\n  const maxDecimalLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / Math.LN2);\n  const maxDecimalLenLenLenLen\
    \ = Math.ceil(Math.log(maxDecimalLenLen) / ", "  const len = arr.length;\n  if\
    \ (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) =>\
    \ acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones) / Math.LN2));\n\
    \  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n  const\
    \ decs = arr.map(val => Math.pow(10, Math.ceil(Math.log(val) / Math.LN10)));\n\
    \  const decIndex = decs.indexOf(Math.pow(10, Math.ceil(Math.log(ones) / Math.LN10)));\n\
    \  const decIndex2 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxOnes) / Math.LN10)));\n\
    \  const decIndex3 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxDec) / Math.LN10)));\n\
    \  const decIndex4 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(len) / Math.LN10)));\n\
    \  const decIndex5 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxDec) / Math.LN10)));\n\
    \  const decIndex6 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxOnes) / Math.LN10)));\n\
    \  const decIndex7 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxDec) / Math.LN10)));\n\
    \  const decIndex8 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxOnes) / Math.LN10)));\n\
    \  const decIndex9 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxDec) / Math.LN10)));\n\
    \  const decIndex10 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxOnes) /\
    \ Math.LN10)));\n  const decIndex11 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxDec)\
    \ / Math.LN10)));\n  const decIndex12 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxOnes)\
    \ / Math.LN10)));\n  const decIndex13 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxDec)\
    \ / Math.LN10)));\n  const decIndex14 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxOnes)\
    \ / Math.LN10)));\n  const decIndex15 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxDec)\
    \ / Math.LN10)));\n  const decIndex16 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxOnes)\
    \ / Math.LN10)));\n  const decIndex17 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxDec)\
    \ / Math.LN10)));\n  const decIndex18 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(maxOnes)\
    \ / Math.LN10)));\n  const decIndex19 = decs.indexOf(Math.pow(10, Math.ceil(Math.log(",
  "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
    \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
    \ arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    if (a ===\
    \ b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n   \
    \ return -1;\n  });\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n\
    \    const index = arr.indexOf(one);\n    if (index > -1) {\n      arr.splice(index,\
    \ 1);\n    }\n  }\n  return arr;\n}\n", "  const len = arr.length;\n  if (len\
    \ === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len\
    \ = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes =\
    \ Math.max(...ones);\n  const maxLen = Math.max(...arr.map(x => Math.log2(x) +\
    \ 1));\n  const minLen = Math.min(...arr.map(x => Math.log2(x) + 1));\n  const\
    \ maxDiff = Math.max(maxLen - minLen, 0);\n  const minDiff = Math.min(maxLen -\
    \ minLen, 0);\n  const maxDiffMin = Math.max(maxDiff - minDiff, 0);\n  const minDiffMin\
    \ = Math.min(maxDiff - minDiff, 0);\n  const maxDiffMax = Math.max(maxDiffMin\
    \ - minDiffMin, 0);\n  const minDiffMax = Math.min(maxDiffMin - minDiffMin, 0);\n\
    \  const maxDiffMaxMin = Math.max(maxDiffMax - minDiffMax, 0);\n  const minDiffMaxMin\
    \ = Math.min(maxDiffMax - minDiffMax, 0);\n  const maxDiffMaxMinMin = Math.max(maxDiffMaxMin\
    \ - minDiffMaxMin, 0);\n  const minDiffMaxMinMin = Math.min(maxDiffMaxMin - minDiffMaxMin,\
    \ 0);\n  const maxDiffMaxMinMin = Math.max(maxDiffMaxMin - minDiffMaxMin, 0);\n\
    \  const minDiffMaxMinMin = Math.min(maxDiffMaxMin - minDiffMaxMin, 0);\n  const\
    \ maxDiffMaxMinMin = Math.max(maxDiffMaxMin - minDiffMaxMin, 0);\n  const minDiffMaxMinMin\
    \ = Math.min(maxDiffMaxMin - minDiffMaxMin, 0);\n  const maxDiffMaxMinMin = Math.max(maxDiffMaxMin\
    \ - minDiffMaxMin, 0);\n  const minDiffMaxMinMin = Math.min(maxDiffMaxMin - minDiffMaxMin,\
    \ 0);\n  const maxDiffMaxMinMin = Math.max(maxDiffMaxMin - minDiffMaxMin, 0);\n\
    \  const minDiffMaxMinMin = Math.min(maxDiffMaxMin - minDiffMaxMin, 0);\n  const\
    \ maxDiffMaxMinMin = Math.max(maxDiffMaxMin - minDiffMaxMin, 0);\n  const minDiffMaxMinMin\
    \ = Math.min(maxDiffMaxMin - minDiffMaxMin, 0);\n  const maxDiffMaxMinMin = Math.max(maxDiffMaxMin\
    \ - minDiffMaxMin, 0);\n  const minDiffMaxMinMin = Math.min(maxDiffMaxMin - minDiffMaxMin,\
    \ 0);\n  const maxDiffMaxMinMin = Math.max(maxDiffMaxMin - minDiffMaxMin, 0);\n\
    \  const minDiffMaxMinMin = Math.min(", "  arr.sort((a, b) => a > b ? 1 : a <\
    \ b ? -1 : 0);\n  return arr;\n}\n", "  const len = arr.length;\n  if (len ===\
    \ 0) {\n    return arr;\n  }\n  const ones = arr\n    .map(i => parseInt(i.toString(2),\
    \ 2))\n    .filter(i => i > 0);\n  if (ones.length === 0) {\n    return arr;\n\
    \  }\n  const sorted = ones\n    .sort((a, b) => a - b);\n  const len = arr.length;\n\
    \  for (let i = 0; i < len; i++) {\n    arr[i] = sorted[len - i - 1];\n  }\n \
    \ return arr;\n}\n", "  let len = arr.length;\n  if (len === 0) {\n    return\
    \ arr;\n  }\n  let maxOnes = 0;\n  let maxDec = Number.NEGATIVE_INFINITY;\n  for\
    \ (let i = 0; i < len; i++) {\n    let ones = arr[i].toString(2).length;\n   \
    \ if (ones > maxOnes) {\n      maxOnes = ones;\n    }\n    let dec = arr[i].toString(10).length;\n\
    \    if (dec > maxDec) {\n      maxDec = dec;\n    }\n  }\n  let res = [];\n \
    \ for (let i = 0; i < len; i++) {\n    let ones = arr[i].toString(2).length;\n\
    \    let dec = arr[i].toString(10).length;\n    if (ones === maxOnes && dec ===\
    \ maxDec) {\n      res.push(arr[i]);\n    }\n  }\n  return res;\n}\n", "  const\
    \ len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones =\
    \ arr.filter(v => v === 1);\n  if (ones.length === 0) {\n    return arr;\n  }\n\
    \  const len = ones.length;\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
    \  const maxOnesLen = Math.ceil(Math.pow(maxOnes, 2) / Math.LN2);\n  const maxOnesLen2\
    \ = Math.ceil(Math.pow(maxOnesLen, 2) / Math.LN2);\n  const maxOnesLen4 = Math.ceil(Math.pow(maxOnesLen2,\
    \ 2) / Math.LN4);\n  const maxOnesLen8 = Math.ceil(Math.pow(maxOnesLen4, 2) /\
    \ Math.LN8);\n  const maxOnesLen16 = Math.ceil(Math.pow(maxOnesLen8, 2) / Math.LN16);\n\
    \  const maxOnesLen32 = Math.ceil(Math.pow(maxOnesLen16, 2) / Math.LN32);\n  const\
    \ maxOnesLen64 = Math.ceil(Math.pow(maxOnesLen32, 2) / Math.LN64);\n  const maxOnesLen128\
    \ = Math.ceil(Math.pow(maxOnesLen64, 2) / Math.LN128);\n  const maxOnesLen256\
    \ = Math.ceil(Math.pow(maxOnesLen128, 2) / Math.LN256);\n  const maxOnesLen512\
    \ = Math.ceil(Math.pow(maxOnesLen256, 2) / Math.LN512);\n  const maxOnesLen1024\
    \ = Math.ceil(Math.pow(maxOnesLen512, 2) / Math.LN1024);\n  const maxOnesLen2048\
    \ = Math.ceil(Math.pow(maxOnesLen1024, 2) / Math.LN2048);\n  const maxOnesLen4096\
    \ = Math.ceil(Math.pow(maxOnesLen2048, 2) / Math.LN4096);\n  const maxOnesLen8192\
    \ = 3 * Math.ceil(Math.pow(maxOnesLen4096, 2) / Math.LN8192);\n  const maxOnesLen16384\
    \ = Math.ceil(Math.pow(maxOnesLen8192, 2) / Math.LN16384);\n  const maxOnesLen32768\
    \ = Math.ceil(Math.pow(maxOnesLen16384, 2) / Math.LN32768);\n  const maxOnesLen65536\
    \ = Math.ceil(Math.pow(maxOnesLen32768, 2) / Math.LN65536);\n  const maxOnesLen131072\
    \ = Math.ceil(Math.pow(maxOnesLen65536, 2) / Math.LN131072);\n  const maxOnesLen262144\
    \ = Math.ceil(Math.pow(maxOnesLen131072, 2) / Math.LN262144);\n  const maxOnesLen524288\
    \ = Math.ceil(Math.pow(maxOnesLen262144, ", "  const len = arr.length;\n  if (len\
    \ < 2) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x === 1);\n \
    \ const decs = arr.filter((x) => x % 1 === 0);\n  const decsLen = decs.length;\n\
    \  if (decsLen === 0) {\n    return ones;\n  }\n  if (decsLen === 1) {\n    return\
    \ decs[0];\n  }\n  const decsSum = decs.reduce((acc, x) => acc + x, 0);\n  const\
    \ decsSumArr = decsSum.map((x) => Math.ceil(x));\n  const decsSumArr = decsSumArr.map((x)\
    \ => Math.ceil(x));\n  const decsSumArr = decsSumArr.map((x) => Math.ceil(x));\n\
    \  const decsSumArr = decsSumArr.map((x) => Math.ceil(x));\n  const decsSumArr\
    \ = decsSumArr.map((x) => Math.ceil(x));\n  const decsSumArr = decsSumArr.map((x)\
    \ => Math.ceil(x));\n  const decsSumArr = decsSumArr.map((x) => Math.ceil(x));\n\
    \  const decsSumArr = decsSumArr.map((x) => Math.ceil(x));\n  const decsSumArr\
    \ = decsSumArr.map((x) => Math.ceil(x));\n  const decsSumArr = decsSumArr.map((x)\
    \ => Math.ceil(x));\n  const decsSumArr = decsSumArr.map((x) => Math.ceil(x));\n\
    \  const decsSumArr = decsSumArr.map((x) => Math.ceil(x));\n  const decsSumArr\
    \ = decsSumArr.map((x) => Math.ceil(x));\n  const decsSumArr = decsSumArr.map((x)\
    \ => Math.ceil(x));\n  const decsSumArr = decsSumArr.map((x) => Math.ceil(x));\n\
    \  const decsSumArr = decsSumArr.map((x) => Math.ceil(x));\n  const decsSumArr\
    \ = decsSumArr.map((x) => Math.ceil(x));\n  const decsSumArr = decsSumArr.map((x)\
    \ => Math.ceil(x));\n  const decsSumArr = decsSumArr.map((x) => Math.ceil(x));\n\
    \  const decsSumArr = decsSumArr.map((x) => Math.ceil(x));\n  const decsSumArr\
    \ = decsSumArr.map((x) => Math.ceil(x));\n  const ", "  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n \
    \ const dec = Math.pow(10, Math.ceil(Math.log(ones) / Math.LN10));\n  const res\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    const\
    \ len = count_ones(num);\n    const d = Math.pow(10, Math.ceil(Math.log(len) /\
    \ Math.LN10));\n    const index = Math.floor(d / dec) * dec + Math.ceil(d % dec);\n\
    \    res.push(num);\n  }\n  return res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
