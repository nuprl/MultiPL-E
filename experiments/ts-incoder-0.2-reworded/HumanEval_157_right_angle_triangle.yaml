name: HumanEval_157_right_angle_triangle
language: ts
prompt: "//Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunction right_angle_triangle(a: number, b: number, c: number):\
  \ boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
  \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
  \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
  \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
  \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
  \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
  \ 2, 10),false);\n}\n\ntest();"
completions: ["\treturn (\n\t\tMath.abs(b - a) <= (Math.abs(c - b)) &&\n\t\tMath.abs(c\
    \ - a) <= (Math.abs(b - c))\n\t);\n}\n", "  return ((Math.sqrt(a * a + b * b -\
    \ c * c) >= Math.sqrt(a * a + b * b - c * c)) || \n          (Math.sqrt(a * a\
    \ + c * c - b * b) >= Math.sqrt(a * a + c * c - b * b)))\n}\n", "  return ((Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2)) == Math.pow(c, 2)) || (Math.sqrt(Math.pow(b, 2) + Math.pow(c,\
    \ 2)) == Math.pow(a, 2)));\n}\n", "  return ((Math.sqrt(a * a + b * b - c * c)\
    \ === 1) || ((a !== 0) && (b !== 0) && (c !== 0) && (a !== b) && (a !== c) &&\
    \ (b !== c) && (a !== b) && (b !== c) && (c !== a) && (c !== b) && (c !== a)));\n\
    }\n", "    return ((Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)) == Math.pow(c,\
    \ 2)) && (a != 0 || b != 0 || c != 0));\n}\n", "\treturn (\n\t\tMath.abs(b - a)\
    \ <= (Math.abs(c - b)) &&\n\t\tMath.abs(c - a) <= (Math.abs(b - c))\n\t);\n}\n",
  "\treturn (\n\t\t((b * b) - (4 * a * c)) === 0 &&\n\t\t((b * b) - (4 * a * c)) ===\
    \ 0\n\t);\n}\n", "  return (b * b) - (4 * a * c) === 0;\n}\n", "  return ((Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2)) == Math.pow(c, 2)) && (a != 0 || b != 0 || c != 0));\n\
    }\n", "  return (b - a) * (c - b) <= 0;\n}\n", "\treturn (Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2)) == Math.pow(c, 2));\n}\n", "\treturn (\n\t\tMath.abs(b\
    \ * b - a * c) >= a &&\n\t\tMath.abs(a * a * c - b * b) >= b\n\t);\n}\n", "\t\
    return (\n\t\tMath.abs(b - a) <= (Math.sqrt(Math.pow(b, 2) + Math.pow(a, 2)) /\
    \ 2) &&\n\t\tMath.abs(c - b) <= (Math.sqrt(Math.pow(c, 2) + Math.pow(b, 2)) /\
    \ 2) &&\n\t\tMath.abs(a - c) <= (Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2)) /\
    \ 2)\n\t);\n}\n", "  return ((Math.sqrt(a * a + b * b - c * c) === 1) || ((a !==\
    \ 0) && (b !== 0) && (c !== 0) && (a !== b) && (a !== c) && (b !== c) && (a !==\
    \ b) && (b !== c) && (c !== a) && (c !== b) && (c !== a)));\n}\n", "  return ((Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2)) == Math.pow(c, 2)) && (a != 0 || b != 0 || c != 0));\n\
    }\n", "  return ((Math.sqrt(a * a + b * b - c * c) === 1) || ((a === 0) && (b\
    \ === 0) && (c === 0)));\n}\n", "\treturn (Math.abs(b * b - a * c) >= Math.sqrt(Math.pow(b,\
    \ c) - Math.pow(a, 2)));\n}\n", "\treturn (\n\t\tMath.abs(b - a) <= (Math.sqrt(Math.pow(b,\
    \ 2) + Math.pow(a, 2)) / 2)\n\t\t&& Math.abs(c - b) <= (Math.sqrt(Math.pow(c,\
    \ 2) + Math.pow(b, 2)) / 2)\n\t);\n}\n", "    return ((b - a) * (c - b) <= 0);\n\
    }\n", "    return (b * b) - (4 * a * c) === 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
