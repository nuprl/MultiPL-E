name: HumanEval_88_sort_array
language: ts
prompt: "//Given an array of non-negative integers, return a cots of the given array\
  \ after sorting,\n// you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n// or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
  \ change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n\
  // [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2,\
  \ 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array: number[]):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3,\
  \ 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5,\
  \ 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n \
  \ assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n\
  \  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();"
completions: ["  const len = array.length;\n  if (len === 0) {\n    return [];\n \
    \ }\n  const sum = (array[0] + array[len - 1]);\n  if (sum % 2 === 0) {\n    array.sort((a,\
    \ b) => a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n\
    }\n", "  if (array.length === 0) {\n    return array;\n  }\n  const sumArray =\
    \ array.map(item => item + item);\n  const sumArraySum = sumArray.reduce((a, b)\
    \ => a + b);\n  const isOdd = sumArraySum % 2 === 1;\n  const isEven = sumArraySum\
    \ % 2 === 0;\n  const sortedArray = isOdd ? array.sort((a, b) => a - b) : array.sort((a,\
    \ b) => b - a);\n  return isEven ? sortedArray.concat().reverse() : sortedArray;\n\
    }\n", "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n\
    \  const mid = Math.floor(len / 2);\n  const left = array.slice(0, mid);\n  const\
    \ right = array.slice(mid);\n  const sumLeft = left\n    .map((item) => item +\
    \ 0)\n    .reduce((acc, cur) => acc + cur, 0);\n  const sumRight = right\n   \
    \ .map((item) => item + 0)\n    .reduce((acc, cur) => acc + cur, 0);\n  if (sumLeft\
    \ % 2 === 1) {\n    return sort_array(left).concat(sort_array(right));\n  }\n\
    \  if (sumRight % 2 === 0) {\n    return sort_array(right).concat(sort_array(left));\n\
    \  }\n  return sort_array(left).concat(sort_array(right));\n}\n", "  const len\
    \ = array.length;\n  if (len === 0) {\n    return [];\n  }\n  const sum = (array[0]\
    \ + array[len - 1]);\n  if (sum % 2 === 0) {\n    return array.sort((a, b) =>\
    \ a - b);\n  }\n  return array.sort((a, b) => b - a);\n}\n", "  const len = array.length;\n\
    \  if (len === 0) {\n    return array;\n  }\n  const sum = (array[0] + array[len\
    \ - 1]);\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n\
    \    array.sort((a, b) => b - a);\n  }\n  return array;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum\
    \ % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a,\
    \ b) => b - a);\n  }\n  return array;\n}\n", "  let sum = 0;\n  for (let i = 0;\
    \ i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 1) {\n\
    \    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a, b) => b - a);\n\
    \  }\n  return array;\n}\n", "  const len = array.length;\n  if (len === 0) {\n\
    \    return [];\n  }\n  const sum = (array[0] + array[len - 1]);\n  if (sum %\
    \ 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return\
    \ array.sort((a, b) => b - a);\n  }\n}\n", "  if (array.length === 0) {\n    return\
    \ array;\n  }\n  const [firstIndex, lastIndex] = array.sort((a, b) => a - b);\n\
    \  if (firstIndex === lastIndex) {\n    return array;\n  }\n  const sum = firstIndex\
    \ + lastIndex;\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n\
    \  } else {\n    return array.sort((a, b) => b - a);\n  }\n}\n", "  const len\
    \ = array.length;\n  if (len === 0) {\n    return [];\n  }\n  const sum = (array[0]\
    \ + array[len - 1]);\n  if (sum % 2 === 0) {\n    return array.sort((a, b) =>\
    \ a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
    \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n \
    \   array.sort((a, b) => b - a);\n  }\n  return array;\n}\n", "  if (array.length\
    \ === 0) {\n    return array;\n  }\n  const [firstIndex, lastIndex] = array.sort((a,\
    \ b) => a - b);\n  if (firstIndex === lastIndex) {\n    return array;\n  }\n \
    \ if (firstIndex % 2 === 1) {\n    return array.sort((a, b) => b - a);\n  }\n\
    \  return array.sort((a, b) => a - b);\n}\n", "  let sum = 0;\n  for (let i =\
    \ 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 1)\
    \ {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a, b) => b\
    \ - a);\n  }\n  return array;\n}\n", "  const len = array.length;\n  if (len ===\
    \ 0) {\n    return array;\n  }\n  const sum = array.reduce((a, b) => a + b, 0);\n\
    \  const even = sum % 2 === 0;\n  const odd = !even;\n  if (even) {\n    array.sort((a,\
    \ b) => a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n\
    }\n", "  if (array.length === 0) {\n    return array;\n  }\n  const [firstIndex,\
    \ lastIndex] = array.sort((a, b) => a - b);\n  const isOdd = (firstIndex + lastIndex)\
    \ % 2 === 1;\n  return isOdd ? array.sort((a, b) => a - b) : array.sort((a, b)\
    \ => b - a);\n}\n", "  const len = array.length;\n  if (len === 0) {\n    return\
    \ array;\n  }\n  const sum = (array[0] + array[len - 1]);\n  const isOdd = (sum\
    \ % 2 === 1);\n  if (isOdd) {\n    array.sort((a, b) => a - b);\n  } else {\n\
    \    array.sort((a, b) => b - a);\n  }\n  return array;\n}\n", "  if (array.length\
    \ === 0) {\n    return array;\n  }\n  const len = array.length;\n  if (len ===\
    \ 1) {\n    return array;\n  }\n  const mid = Math.floor(len / 2);\n  const left\
    \ = array.slice(0, mid);\n  const right = array.slice(mid);\n  const leftSum =\
    \ sum(left);\n  const rightSum = sum(right);\n  if (leftSum > rightSum) {\n  \
    \  return sort_array(left);\n  }\n  return sort_array(right);\n}\n", "  const\
    \ sum = (first: number, last: number) => first + last;\n  const isOdd = (first:\
    \ number, last: number) => first % 2 !== 0 && last % 2 === 0;\n  const isEven\
    \ = (first: number, last: number) => first % 2 === 0 && last % 2 !== 0;\n  const\
    \ isSumOdd = (first: number, last: number) => sum(first, last) % 2 !== 0;\n  const\
    \ isSumEven = (first: number, last: number) => sum(first, last) % 2 === 0;\n \
    \ const isFirstOdd = (first: number, last: number) => first % 2 === 0;\n  const\
    \ isLastEven = (first: number, last: number) => last % 2 === 0;\n  const isFirstEven\
    \ = (first: number, last: number) => first % 2 !== 0;\n  const isLastOdd = (first:\
    \ number, last: number) => last % 2 !== 0;\n  const isFirstSumOdd = (first: number,\
    \ last: number) => sum(first, last) % 2 !== 0;\n  const isFirstSumEven = (first:\
    \ number, last: number) => sum(first, last) % 2 === 0;\n  const isLastSumEven\
    \ = (first: number, last: number) => sum(first, last) % 2 === 0;\n  const isFirstSumOddEven\
    \ = (first: number, last: number) => sum(first, last) % 2 !== 0;\n  const isLastSumOddEven\
    \ = (first: number, last: number) => sum(first, last) % 2 === 0;\n  const isFirstSumEvenOdd\
    \ = (first: number, last: number) => sum(first, last) % 2 !== 0;\n  const isLastSumEvenOdd\
    \ = (first: number, last: number) => sum(first, last) % 2 === 0;\n  const isFirstSumOddOddEven\
    \ = (first: number, last: number) => sum(first, last) % 2 !== 0;\n  const isLastSumOddOddEven\
    \ = (first: number, last: number) => sum(first, last) % 2 === 0;\n  const isFirstSumEvenEvenOdd\
    \ = (first: number, last: number) => sum(first, last) % 2 !== 0;\n  const isLastSumEvenEvenOdd\
    \ = (first: number, last: number) => sum(first, last) % 2 === 0;\n  const isFirstSumOddEvenOddEven\
    \ = (first: number, last: number) => sum(first, last) % 2 !== 0;\n  const isLastSumOddEvenOddEven\
    \ = (first: number, last: number) => sum(first, last) % 2 === 0;\n  const isFirstSumEvenEvenEvenOdd\
    \ = (first: number, last: number) => sum(first, last) % ", "  if (array.length\
    \ === 0) {\n    return array;\n  }\n  const sum = Math.sum(array);\n  if (sum\
    \ % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a,\
    \ b) => b - a);\n  }\n  return array;\n}\n", "  const len = array.length;\n  if\
    \ (len <= 1) {\n    return array;\n  }\n  const firstValue = array[0];\n  const\
    \ lastValue = array[len - 1];\n  const firstSum = firstValue + firstValue;\n \
    \ const lastSum = lastValue + lastValue;\n  if (firstSum % 2 === 0 && lastSum\
    \ % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  }\n  return array.sort((a,\
    \ b) => b - a);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
