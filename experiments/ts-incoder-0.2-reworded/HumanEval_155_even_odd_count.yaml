name: HumanEval_155_even_odd_count
language: ts
prompt: "//Given an integer. return an array that has the number of even and odd digits\
  \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n\
  // [1, 2]\nfunction even_odd_count(num: number): [number, number] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0,\
  \ 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2,\
  \ 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3,\
  \ 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2,\
  \ 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();"
completions: ["  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    num = num\
    \ / 10;\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n  }\n  return [even, odd];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 ===\
    \ 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num =\
    \ Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    num = num / 10;\n    if\
    \ (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n   \
    \ }\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let\
    \ oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if\
    \ (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n \
    \   }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  const even: number[] = [];\n  const odd: number[] = [];\n  let i = 0;\n\
    \  while (num > 0) {\n    const digit = num % 10;\n    if (digit === 0) {\n  \
    \    even.push(digit);\n    } else {\n      odd.push(digit);\n    }\n    num =\
    \ Math.floor(num / 10);\n    i++;\n  }\n  return [even, odd];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num %\
    \ 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if\
    \ (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n   \
    \ }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n",
  "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ even = 0;\n  let odd = 0;\n  while (num > 0) {\n    const remainder = num %\
    \ 10;\n    if (remainder === 2) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n}\n", " \
    \ let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num %\
    \ 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n   \
    \ num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", " \
    \ let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder\
    \ = num % 10;\n    if (remainder === 2) {\n      evenCount++;\n    } else {\n\
    \      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount,\
    \ oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num >\
    \ 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 ===\
    \ 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [even, odd];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n  \
    \  } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let even = 0;\n  let odd = 0;\n  while\
    \ (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n}\n", " \
    \ let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n\
    \      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num /\
    \ 10);\n  }\n  return [even, odd];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 ===\
    \ 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num =\
    \ Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num %\
    \ 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  const evenCount: number = num.toString().split('')\n    .filter(x =>\
    \ x === '0').length;\n  const oddCount: number = num.toString().split('')\n  \
    \  .filter(x => x !== '0').length;\n  return [evenCount, oddCount];\n}\n", " \
    \ const evenCount: number = num.toString().split('')\n    .filter(x => x % 2 ===\
    \ 0)\n    .length;\n  const oddCount: number = num.toString().split('')\n    .filter(x\
    \ => x % 2 !== 0)\n    .length;\n  return [evenCount, oddCount];\n}\n", "  const\
    \ even: number[] = [];\n  const odd: number[] = [];\n  let i = 0;\n  while (num\
    \ > 0) {\n    if (num % 2 === 0) {\n      even.push(num);\n    } else {\n    \
    \  odd.push(num);\n    }\n    i++;\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [even, odd];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num\
    \ > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  const evenCount: number = num.toString().split('')\n    .filter(i =>\
    \ i % 2 === 0)\n    .length;\n  const oddCount: number = num.toString().split('')\n\
    \    .filter(i => i % 2 !== 0)\n    .length;\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const\
    \ remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    }\
    \ else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n \
    \ while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0)\
    \ {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n\
    \  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n \
    \   if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  const even: number[] = [];\n  const odd: number[] = [];\n  let numStr\
    \ = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr.charAt(i)\
    \ % 2 === 0) {\n      even.push(parseInt(numStr.charAt(i)));\n    } else {\n \
    \     odd.push(parseInt(numStr.charAt(i)));\n    }\n  }\n  return [even, odd];\n\
    }\n", "  const evenCount: number = Math.floor(num / 2);\n  const oddCount: number\
    \ = num - evenCount;\n  return [evenCount, oddCount];\n}\n", "  const even: number[]\
    \ = [];\n  const odd: number[] = [];\n  let i = 0;\n  while (num > 0) {\n    if\
    \ (num % 2 === 0) {\n      even.push(num);\n    } else {\n      odd.push(num);\n\
    \    }\n    i++;\n    num /= 10;\n  }\n  return [even, odd];\n}\n", "  const even:\
    \ number[] = [];\n  const odd: number[] = [];\n  let numStr = String(num);\n \
    \ let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < numStr.length;\
    \ i++) {\n    if (numStr.charAt(i) % 2 === 0) {\n      even[evenCount] = parseInt(numStr.charAt(i));\n\
    \      evenCount++;\n    } else {\n      odd[oddCount] = parseInt(numStr.charAt(i));\n\
    \      oddCount++;\n    }\n  }\n  return [even, odd];\n}\n", "  const even: number\
    \ = Math.floor(num / 10);\n  const odd: number = num % 10;\n  return [even, odd];\n\
    }\n", "  const evenCount: number[] = [];\n  const oddCount: number[] = [];\n \
    \ let currentNum = num;\n  while (currentNum > 0) {\n    const currentDigit =\
    \ currentNum % 10;\n    if (currentDigit % 2 === 0) {\n      evenCount.push(currentDigit);\n\
    \    } else {\n      oddCount.push(currentDigit);\n    }\n    currentNum = Math.floor(currentNum\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const evenCount: number\
    \ = num.toString().split('')\n    .filter(i => i % 2 === 0)\n    .length;\n  const\
    \ oddCount: number = num.toString().split('')\n    .filter(i => i % 2 !== 0)\n\
    \    .length;\n  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n\
    \  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n \
    \   if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  const evenCount: number = Math.floor(num / 2);\n  const oddCount: number\
    \ = num - evenCount;\n  return [evenCount, oddCount];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n \
    \     evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const evenCount: number\
    \ = Math.floor(Math.log10(num) / 3);\n  const oddCount: number = Math.floor(Math.log10(num)\
    \ / 3) * 2;\n  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let\
    \ oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const\
    \ evenCount: number = Math.floor(num / 2);\n  const oddCount: number = num - evenCount;\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const\
    \ evenCount: number[] = [];\n  const oddCount: number[] = [];\n  let even: number\
    \ = 0;\n  let odd: number = 0;\n  while (num > 0) {\n    even = num % 10;\n  \
    \  odd = num % 10;\n    if (even === 0) {\n      evenCount.push(even);\n    }\
    \ else {\n      oddCount.push(odd);\n    }\n    num = Math.floor(num / 10);\n\
    \  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n  \
    \  } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const\
    \ even: number[] = [];\n  const odd: number[] = [];\n  let i = 0;\n  while (num\
    \ > 0) {\n    if (num % 2 === 0) {\n      even.push(num);\n    } else {\n    \
    \  odd.push(num);\n    }\n    i++;\n    num /= 10;\n  }\n  return [even, odd];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if\
    \ (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n   \
    \ }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n",
  "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount++;\n\
    \    num = num / 10;\n  }\n  while (num > 0) {\n    oddCount++;\n    num = num\
    \ / 10;\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n \
    \ let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n  \
    \  if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const\
    \ remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    }\
    \ else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n \
    \ while (num > 0) {\n    num = num / 10;\n    if (num % 2 === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  const even: number[] = [];\n  const odd: number[] = [];\n  let numStr\
    \ = String(num);\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr.charAt(i)\
    \ % 2 === 0) {\n      even.push(parseInt(numStr.charAt(i)));\n    } else {\n \
    \     odd.push(parseInt(numStr.charAt(i)));\n    }\n  }\n  return [even, odd];\n\
    }\n", "  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    num = num / 10;\n\
    \    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n\
    \  }\n  return [even, odd];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n\
    \  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 2)\
    \ {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const evenCount: number\
    \ = Math.floor(num / 2);\n  const oddCount: number = num - evenCount;\n  return\
    \ [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n \
    \ while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0)\
    \ {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const evenCount: number\
    \ = Math.floor(num / 2);\n  const oddCount: number = num - evenCount;\n  return\
    \ [evenCount, oddCount];\n}\n", "  let even = 0;\n  let odd = 0;\n  while (num\
    \ > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n}\n", " \
    \ const evenCount: number[] = [];\n  const oddCount: number[] = [];\n  let numStr\
    \ = String(num);\n  let evenCountStr = '';\n  let oddCountStr = '';\n  for (let\
    \ i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCountStr\
    \ += numStr[i];\n    } else {\n      oddCountStr += numStr[i];\n    }\n  }\n \
    \ for (let i = 0; i < evenCountStr.length; i++) {\n    evenCount.push(parseInt(evenCountStr[i]));\n\
    \  }\n  for (let i = 0; i < oddCountStr.length; i++) {\n    oddCount.push(parseInt(oddCountStr[i]));\n\
    \  }\n  return [evenCount, oddCount];\n}\n", "  const evenCount: number[] = [];\n\
    \  const oddCount: number[] = [];\n  let numString: string = num.toString();\n\
    \  for (let i = 0; i < numString.length; i += 1) {\n    if (numString[i] % 2 ===\
    \ 0) {\n      evenCount.push(numString[i]);\n    } else {\n      oddCount.push(numString[i]);\n\
    \    }\n  }\n  return [evenCount, oddCount];\n}\n", "  const evenCount: number[]\
    \ = [];\n  const oddCount: number[] = [];\n  let numString: string = num.toString();\n\
    \  for (let i = 0; i < numString.length; i += 1) {\n    if (numString[i] % 2 ===\
    \ 0) {\n      evenCount.push(numString[i]);\n    } else {\n      oddCount.push(numString[i]);\n\
    \    }\n  }\n  return [evenCount, oddCount];\n}\n", "  const evenCount: number\
    \ = Math.floor(num / 2);\n  const oddCount: number = num - evenCount;\n  return\
    \ [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n \
    \ while (num > 0) {\n    evenCount += num % 2 === 0;\n    oddCount += num % 2\
    \ !== 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  const evenCount: number = num.toString().split('')\n    .filter(item\
    \ => item === '0')\n    .length;\n  const oddCount: number = num.toString().split('')\n\
    \    .filter(item => item !== '0')\n    .length;\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if\
    \ (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n   \
    \ }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n",
  "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder\
    \ = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n\
    \      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount,\
    \ oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num >\
    \ 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    num\
    \ = num / 10;\n    evenCount++;\n  }\n  while (num < 0) {\n    num = -num;\n \
    \   oddCount++;\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num %\
    \ 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const\
    \ remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    }\
    \ else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n \
    \ while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0)\
    \ {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const even: number[]\
    \ = [];\n  const odd: number[] = [];\n  let i = 0;\n  while (num > 0) {\n    if\
    \ (num % 2 === 0) {\n      even.push(num);\n    } else {\n      odd.push(num);\n\
    \    }\n    num = Math.floor(num / 10);\n    i++;\n  }\n  return [even, odd];\n\
    }\n", "  const evenCount: number = Math.floor(num / 2);\n  const oddCount: number\
    \ = num - evenCount;\n  return [evenCount, oddCount];\n}\n", "  let even = 0;\n\
    \  let odd = 0;\n  while (num > 0) {\n    even = num % 2 === 0 ? even + 1 : 0;\n\
    \    odd = num % 2 === 1 ? odd + 1 : 0;\n    num = Math.floor(num / 10);\n  }\n\
    \  return [even, odd];\n}\n", "  const evenCount: number = Math.floor(num / 2);\n\
    \  const oddCount: number = num - evenCount;\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if\
    \ (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n   \
    \ }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n",
  "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 ===\
    \ 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num =\
    \ Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let even\
    \ = 0;\n  let odd = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n\
    \    if (remainder === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n\
    \    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n}\n", "  const evenCount:\
    \ number[] = [];\n  const oddCount: number[] = [];\n  let numStr = String(num);\n\
    \  let evenCountStr = '';\n  let oddCountStr = '';\n  for (let i = 0; i < numStr.length;\
    \ i++) {\n    if (numStr.charAt(i) % 2 === 0) {\n      evenCountStr += numStr.charAt(i);\n\
    \    } else {\n      oddCountStr += numStr.charAt(i);\n    }\n  }\n  evenCount\
    \ = evenCountStr.split('').map(Number);\n  oddCount = oddCountStr.split('').map(Number);\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 ===\
    \ 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num =\
    \ Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num %\
    \ 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  const evenCount: number = Math.floor(num / 2);\n  const oddCount: number\
    \ = num % 2;\n  return [evenCount, oddCount];\n}\n", "  const even = num % 2 ===\
    \ 0;\n  const odd = !even;\n  return [even, odd];\n}\n", "  let evenCount = 0;\n\
    \  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 ===\
    \ 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num =\
    \ Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const\
    \ evenCount: number = Math.floor(num / 2);\n  const oddCount: number = num % 2;\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n  \
    \  } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 ===\
    \ 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num =\
    \ Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n \
    \     evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n\
    \  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n \
    \   if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if\
    \ (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n   \
    \ }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n",
  "  const evenCount: number[] = [];\n  const oddCount: number[] = [];\n  let numStr\
    \ = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr.charAt(i)\
    \ % 2 === 0) {\n      evenCount.push(parseInt(numStr.charAt(i)));\n    } else\
    \ {\n      oddCount.push(parseInt(numStr.charAt(i)));\n    }\n  }\n  return [evenCount,\
    \ oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num >\
    \ 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if\
    \ (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n   \
    \ }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n",
  "  const evenCount: number[] = [];\n  const oddCount: number[] = [];\n\n  for (let\
    \ i = 0; i <= num; i++) {\n    if (num % 2 === 0) {\n      evenCount.push(i);\n\
    \    } else {\n      oddCount.push(i);\n    }\n  }\n\n  return [evenCount, oddCount];\n\
    }\n", "  const evenCount: number = num.toString().split('')\n    .filter(x =>\
    \ x === '0').length;\n  const oddCount: number = num.toString().split('')\n  \
    \  .filter(x => x !== '0').length;\n  return [evenCount, oddCount];\n}\n", " \
    \ let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num %\
    \ 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n   \
    \ num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", " \
    \ let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num %\
    \ 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n   \
    \ num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", " \
    \ let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder\
    \ = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n\
    \      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount,\
    \ oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num >\
    \ 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0;\n    oddCount +=\
    \ num % 2 !== 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if\
    \ (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n   \
    \ }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n",
  "  const even = num % 2 === 0;\n  const odd = !even;\n  return [even, odd];\n}\n",
  "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 ===\
    \ 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num =\
    \ Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const\
    \ evenCount: number = num.toString().split('')\n    .filter((digit: string) =>\
    \ digit === '0')\n    .length;\n  const oddCount: number = num.toString().split('')\n\
    \    .filter((digit: string) => digit !== '0')\n    .length;\n  return [evenCount,\
    \ oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num >\
    \ 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  const evenCount: number[] = [];\n  const oddCount: number[] = [];\n \
    \ let digit: number = 0;\n  while (num > 0) {\n    digit = num % 10;\n    if (digit\
    \ % 2 === 0) {\n      evenCount.push(digit);\n    } else {\n      oddCount.push(digit);\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const\
    \ remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    }\
    \ else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n \
    \ while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else\
    \ {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  let even = 0;\n  let odd = 0;\n  while (num\
    \ > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n}\n", " \
    \ let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num %\
    \ 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n   \
    \ num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", " \
    \ const even: number[] = [];\n  const odd: number[] = [];\n  let numStr = String(num);\n\
    \  for (let i = 0; i < numStr.length; i++) {\n    if (numStr.charAt(i) % 2 ===\
    \ 0) {\n      even.push(numStr.charAt(i));\n    } else {\n      odd.push(numStr.charAt(i));\n\
    \    }\n  }\n  return [even, odd];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 2) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const\
    \ evenCount: number = num % 2 === 0;\n  const oddCount: number = num % 2 !== 0;\n\
    \  return [evenCount, oddCount];\n}\n", "  const evenCount: number = num / 2;\n\
    \  const oddCount: number = num % 2;\n  return [evenCount, oddCount];\n}\n", " \
    \ let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num %\
    \ 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n   \
    \ num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", " \
    \ const evenCount: number = num % 2 === 0 ? 1 : 0\n  const oddCount: number =\
    \ num % 2 === 1 ? 1 : 0\n  return [evenCount, oddCount]\n}\n", "  const evenCount:\
    \ number = Math.floor(num / 2);\n  const oddCount: number = num - evenCount;\n\
    \  return [evenCount, oddCount];\n}\n", "  let even = 0;\n  let odd = 0;\n  while\
    \ (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n}\n", " \
    \ let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder\
    \ = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n\
    \      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount,\
    \ oddCount];\n}\n", "  const evenCount: number[] = [];\n  const oddCount: number[]\
    \ = [];\n  let numStr = String(num);\n  let evenCountStr = '';\n  let oddCountStr\
    \ = '';\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr.charAt(i)\
    \ % 2 === 0) {\n      evenCountStr += numStr.charAt(i);\n    } else {\n      oddCountStr\
    \ += numStr.charAt(i);\n    }\n  }\n  evenCount = evenCountStr.split('').map(Number);\n\
    \  oddCount = oddCountStr.split('').map(Number);\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if\
    \ (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n   \
    \ }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n",
  "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 ===\
    \ 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num =\
    \ Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const\
    \ evenCount: number = Math.floor(num / 2);\n  const oddCount: number = num - evenCount;\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 ===\
    \ 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num =\
    \ Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 ===\
    \ 0;\n    oddCount += num % 2 !== 0;\n    num = Math.floor(num / 10);\n  }\n \
    \ return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount =\
    \ 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    }\
    \ else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  const even: number[] = [];\n  const odd: number[]\
    \ = [];\n  let i = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even.push(num);\n\
    \    } else {\n      odd.push(num);\n    }\n    i++;\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [even, odd];\n}\n", "  const evenCount = 0;\n  const oddCount\
    \ = 0;\n  let numStr = String(num);\n  for (let i = 0; i < numStr.length; i++)\
    \ {\n    if (numStr.charAt(i) % 2 === 0) {\n      evenCount++;\n    } else {\n\
    \      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder\
    \ = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n\
    \      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount,\
    \ oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num >\
    \ 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const\
    \ remainder = num % 10;\n    if (remainder === 2) {\n      evenCount++;\n    }\
    \ else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n \
    \ while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else\
    \ {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n \
    \ while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else\
    \ {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n \
    \ while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0)\
    \ {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n\
    \  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 ===\
    \ 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num =\
    \ Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n \
    \     evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n\
    \  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  const evenCount: number = num % 2 ===\
    \ 0 ? 1 : 0;\n  const oddCount: number = num % 2 === 1 ? 1 : 0;\n  return [evenCount,\
    \ oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num >\
    \ 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n  \
    \  } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num\
    \ % 2 === 0;\n    oddCount += num % 2 !== 0;\n    num = Math.floor(num / 10);\n\
    \  }\n  return [evenCount, oddCount];\n}\n", "  const evenCount: number = Math.floor(num\
    \ / 2);\n  const oddCount: number = num - evenCount;\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if\
    \ (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n   \
    \ }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n",
  "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 ===\
    \ 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num =\
    \ Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n \
    \     evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n\
    \  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let even = 0;\n  let odd = 0;\n  while\
    \ (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n}\n", " \
    \ const evenCount: number[] = [];\n  const oddCount: number[] = [];\n  let currentNum\
    \ = num;\n  while (currentNum > 0) {\n    const currentDigit = currentNum % 10;\n\
    \    if (currentDigit % 2 === 0) {\n      evenCount.push(currentDigit);\n    }\
    \ else {\n      oddCount.push(currentDigit);\n    }\n    currentNum = Math.floor(currentNum\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n\
    \  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const\
    \ even: number[] = [];\n  const odd: number[] = [];\n  let i = 0;\n  while (num\
    \ > 0) {\n    if (num % 2 === 0) {\n      even.push(num);\n    } else {\n    \
    \  odd.push(num);\n    }\n    num = Math.floor(num / 10);\n    i++;\n  }\n  return\
    \ [even, odd];\n}\n", "  const even: number[] = [];\n  const odd: number[] = [];\n\
    \  let i = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      even.push(remainder);\n    } else {\n      odd.push(remainder);\n\
    \    }\n    num = Math.floor(num / 10);\n    i++;\n  }\n  return [even, odd];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const\
    \ remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    }\
    \ else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  const evenCount: number[] = [];\n  const oddCount:\
    \ number[] = [];\n  let numStr = String(num);\n  for (let i = 0; i < numStr.length;\
    \ i++) {\n    if (numStr.charAt(i) % 2 === 0) {\n      evenCount.push(parseInt(numStr.charAt(i)));\n\
    \    } else {\n      oddCount.push(parseInt(numStr.charAt(i)));\n    }\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  const even: number[] = [];\n  const\
    \ odd: number[] = [];\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length;\
    \ i++) {\n    if (numStr.charAt(i) % 2 === 0) {\n      even.push(parseInt(numStr.charAt(i)));\n\
    \    } else {\n      odd.push(parseInt(numStr.charAt(i)));\n    }\n  }\n  return\
    \ [even, odd];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num\
    \ > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  const even: number[] = [];\n  const odd: number[] = [];\n  let i = 0;\n\
    \  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0)\
    \ {\n      even.push(remainder);\n    } else {\n      odd.push(remainder);\n \
    \   }\n    num = Math.floor(num / 10);\n    i++;\n  }\n  return [even, odd];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const\
    \ remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    }\
    \ else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  const evenCount: number = Math.floor(num /\
    \ 2);\n  const oddCount: number = num - evenCount;\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const\
    \ remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    }\
    \ else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  const evenCount: number = Math.floor(num /\
    \ 2);\n  const oddCount: number = num - evenCount;\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if\
    \ (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n   \
    \ }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n",
  "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const\
    \ even: number[] = [];\n  const odd: number[] = [];\n  let i = 0;\n  while (num\
    \ > 0) {\n    if (num % 2 === 0) {\n      even.push(num);\n    } else {\n    \
    \  odd.push(num);\n    }\n    i++;\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [even, odd];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num\
    \ > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    evenCount++;\n    num = Math.floor(num / 10);\n\
    \  }\n  while (num > 0) {\n    oddCount++;\n    num = Math.floor(num / 10);\n\
    \  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const\
    \ evenCount: number = Math.floor(num / 2);\n  const oddCount: number = num - evenCount;\n\
    \  return [evenCount, oddCount];\n}\n", "  const evenCount: number[] = [];\n \
    \ const oddCount: number[] = [];\n  let remainder: number = 0;\n  for (let i =\
    \ num; i > 0; i -= 1) {\n    remainder = i % 2;\n    if (remainder === 0) {\n\
    \      evenCount.push(i);\n    } else {\n      oddCount.push(i);\n    }\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  const evenCount: number = Math.floor(num\
    \ / 2);\n  const oddCount: number = num - evenCount;\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const\
    \ remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    }\
    \ else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  let even = 0;\n  let odd = 0;\n  while (num\
    \ > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n}\n", " \
    \ let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num %\
    \ 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n   \
    \ num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", " \
    \ let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num %\
    \ 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n   \
    \ num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", " \
    \ const evenCount: number = Math.floor(num / 2);\n  const oddCount: number = num\
    \ - evenCount;\n  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n\
    \  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n \
    \   if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  const evenCount: number = Math.floor(Math.log10(num));\n  const oddCount:\
    \ number = evenCount - 1;\n  return [evenCount, oddCount];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n \
    \     evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const evenCount: number[]\
    \ = [];\n  const oddCount: number[] = [];\n  let even: number = 0;\n  let odd:\
    \ number = 0;\n  while (num > 0) {\n    even = num % 10;\n    odd = num % 10;\n\
    \    if (even === 1) {\n      evenCount.push(even);\n    }\n    if (odd === 1)\
    \ {\n      oddCount.push(odd);\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n  \
    \  } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const\
    \ evenCount = 0;\n  const oddCount = 0;\n  let numStr = num.toString();\n  while\
    \ (numStr.length > 0) {\n    const digit = numStr.charAt(0);\n    if (digit ===\
    \ '0') {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    numStr\
    \ = numStr.slice(1);\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n \
    \     evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  const evenCount: number[]\
    \ = [];\n  const oddCount: number[] = [];\n  let numStr = String(num);\n  for\
    \ (let i = 0; i < numStr.length; i++) {\n    const digit = numStr.charAt(i);\n\
    \    if (digit === '0') {\n      evenCount.push(0);\n      continue;\n    }\n\
    \    if (digit === '1') {\n      oddCount.push(1);\n      continue;\n    }\n \
    \   evenCount.push(1);\n    oddCount.push(0);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if\
    \ (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n   \
    \ }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n",
  "  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder\
    \ = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n\
    \      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount,\
    \ oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num >\
    \ 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [evenCount, oddCount];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
