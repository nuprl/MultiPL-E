name: HumanEval_83_starts_one_ends
language: ts
prompt: "//Given a positive integer n, return the count of the numbers of n-digit\n\
  // positive integers that start or end with 1.\nfunction starts_one_ends(n: number):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n\
  \  assert.deepEqual(candidate(2),18);\n  assert.deepEqual(candidate(3),180);\n \
  \ assert.deepEqual(candidate(4),1800);\n  assert.deepEqual(candidate(5),18000);\n\
  }\n\ntest();"
completions: ["  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1\
    \ || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let\
    \ count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1)\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for\
    \ (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 1; i <=\
    \ n; i++) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n}\n",
  "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n\
    \ - 1) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let count = 0;\n\
    \  let i = 1;\n  while (i < n) {\n    if (i === 1 || i === n - 1) {\n      count++;\n\
    \    }\n    i++;\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i\
    \ = 2; i <= Math.sqrt(n); i++) {\n    if (n % i == 0) {\n      count++;\n    \
    \  if (n / i == i) {\n        count++;\n      }\n    }\n  }\n  return count;\n\
    }\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 ||\
    \ i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let count\
    \ = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = n; i > 0;\
    \ i /= 10) {\n    if (i === 1) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 ||\
    \ i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let count\
    \ = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % i == 0) {\n      count++;\n\
    \    }\n    i++;\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i\
    \ = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n   \
    \ }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = n; i > 0; i--)\
    \ {\n    if (i === 1) {\n      count++;\n    }\n    if (i === 0) {\n      break;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 1; i <=\
    \ n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n \
    \ return count;\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n \
    \   if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 ||\
    \ i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let count\
    \ = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i == 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 1; i <=\
    \ n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n \
    \ return count;\n}\n", "  let count = 0;\n  for (let i = 2; i <= n; i++) {\n \
    \   if (n % i === 0) {\n      count++;\n      if (i === n) {\n        break;\n\
    \      }\n    }\n  }\n  return count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
