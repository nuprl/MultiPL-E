name: HumanEval_87_get_row
language: ts
prompt: "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar\
  \ to matrix, however, unlike matrices,\n// each row may contain a different number\
  \ of columns.\n// Given lst, and integer x, find integers x in the array,\n// and\
  \ return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a\
  \ coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by\
  \ rows in ascending order.\n// Also, sort coordinates of the row by columns in descending\
  \ order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
  \ [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([],\
  \ 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst:\
  \ number[][], x: number): [number, number][] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3,\
  \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0],\
  \ [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3,\
  \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
  \ 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
  \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2,\
  \ 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n\
  \  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n\
  \  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
completions: ["  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols]\
    \ = lst;\n  const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n\
    \    const [minRow, minCol] = row.reduce(([minRow, minCol], item) => {\n     \
    \ if (item < minRow) {\n        return [item, item];\n      } else if (item >\
    \ minRow) {\n        return [minRow, item];\n      }\n      return [minRow, minCol];\n\
    \    }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n    return [Math.min(minRow,\
    \ x), Math.min(minCol, x)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const\
    \ [maxRow, maxCol] = row.reduce(([maxRow, maxCol], item) => {\n      if (item\
    \ > maxRow) {\n        return [item, item];\n      } else if (item < maxRow) {\n\
    \        return [maxRow, item];\n      }\n      return [maxRow, maxCol];\n   \
    \ }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n    return [Math.max(maxRow,\
    \ x), Math.max(maxCol, x)];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow,\
    \ maxCol];\n  const [minRowIndex, minColIndex] = [minRow, minCol];\n  const [maxRowIndex,\
    \ maxColIndex] = [maxRow, maxCol];\n  const [minRowIndex, maxRowIndex] = [minRow,\
    \ maxRow];\n  const [maxRowIndex, minColIndex] = [maxRow, minCol];\n  const [minColIndex,\
    \ maxColIndex] = [minCol, maxCol];\n  const [minRowIndex, maxRowIndex, minColIndex,\
    \ maxColIndex] = [\n    minRowIndex,\n    maxRowIndex,\n    minColIndex,\n   \
    \ maxColIndex\n  ];\n  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow,\
    \ maxCol] = [maxRow, maxCol];\n  const [minRowIndex, minColIndex, maxRowIndex,\
    \ maxColIndex] = [\n    minRowIndex,\n    minColIndex,\n    maxRowIndex,\n   \
    \ maxColIndex\n  ];\n  const [minRow, minCol, maxRow, maxCol] = [minRow, minCol,\
    \ maxRow, ", "  const rows = lst.map(row => row.map(i => i + 1));\n  const cols\
    \ = lst.map(row => row.map(i => i + 1));\n  const result = [];\n  const rows =\
    \ rows.sort((a, b) => a - b);\n  const cols = cols.sort((a, b) => b - a);\n  for\
    \ (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    const col\
    \ = cols[i];\n    if (row === x) {\n      const coord = [i, col];\n      result.push(coord);\n\
    \    }\n  }\n  return result;\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n  const row = [x];\n  const result = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const column = lst[i][0];\n    if (column === x) {\n      result.push([row,\
    \ column]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a,\
    \ b) => a[0] - b[0]);\n  return result;\n}\n", "  const rows = lst.map(row =>\
    \ row.map(i => i + x));\n  const sorted = rows.map(row => row.sort((a, b) => b\
    \ - a));\n  const sortedRows = sorted.map(row => row.map(i => i[0]));\n  return\
    \ sortedRows.map(row => row.map(i => [i[1], i[0]]));\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n  const [minRow,\
    \ minCol] = rows.reduce(([minRow, minCol], row) => {\n    const [row, col] = row;\n\
    \    return [\n      Math.min(minRow, row),\n      Math.min(minCol, col),\n  \
    \  ];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const maxRow\
    \ = Math.max(...rows.map(row => row.length));\n  const maxCol = Math.max(...cols.map(col\
    \ => col.length));\n  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [row,\
    \ col] = [minRow, minCol];\n  const result = [];\n  while (row < maxRow) {\n \
    \   while (col < maxCol) {\n      const [x, y] = lst[row][col];\n      if (x ===\
    \ x) {\n        result.push([row, col]);\n      }\n      col++;\n    }\n    row++;\n\
    \    col = 0;\n  }\n  return result.sort(([a], [b]) => a - b).sort(([a], [b])\
    \ => b - a);\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const rows\
    \ = lst.length;\n  const cols = lst[0].length;\n  const result = [];\n  for (let\
    \ row = 0; row < rows; row++) {\n    const row = lst[row];\n    const rowResult\
    \ = [];\n    for (let col = 0; col < cols; col++) {\n      const value = row[col];\n\
    \      if (value === x) {\n        rowResult.push([row, col]);\n      }\n    }\n\
    \    result.push(rowResult);\n  }\n  result.sort((a, b) => {\n    const aRow =\
    \ a[0];\n    const aCol = a[1];\n    const bRow = b[0];\n    const bCol = b[1];\n\
    \    if (aRow === bRow) {\n      return aCol - bCol;\n    }\n    return aRow -\
    \ bRow;\n  });\n  result.sort((a, b) => {\n    const aRow = a[0];\n    const aCol\
    \ = a[1];\n    const bRow = b[0];\n    const bCol = b[1];\n    if (aCol === bCol)\
    \ {\n      return aRow - bRow;\n    }\n    return aCol - bCol;\n  });\n  return\
    \ result;\n}\n", "  const rows = lst.length;\n  const cols = lst[0].length;\n\
    \  const result: number[][] = [];\n  for (let i = 0; i < rows; i++) {\n    const\
    \ row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j < cols; j++)\
    \ {\n      if (row[j] === x) {\n        rowResult.push([i, j]);\n      }\n   \
    \ }\n    result.push(rowResult);\n  }\n  result.sort((a, b) => {\n    if (a[0]\
    \ > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n      return -1;\n\
    \    }\n    return 0;\n  });\n  result.sort((a, b) => {\n    if (a[1] > b[1])\
    \ {\n      return 1;\n    }\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\
    \    return 0;\n  });\n  return result;\n}\n", "  if (lst.length === 0) {\n  \
    \  return [];\n  }\n\n  const rows = lst.length;\n  const cols = lst[0].length;\n\
    \  const row = [x];\n  const result = [];\n\n  for (let i = 0; i < rows; i++)\
    \ {\n    const row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j\
    \ < cols; j++) {\n      rowResult.push([row[j], i]);\n    }\n    result.push(rowResult);\n\
    \  }\n\n  result.sort((a, b) => {\n    const aRow = a[0] as number;\n    const\
    \ bRow = b[0] as number;\n    if (aRow === bRow) {\n      return a[1] - b[1];\n\
    \    }\n    return aRow - bRow;\n  });\n\n  result.sort((a, b) => {\n    const\
    \ aCol = a[0] as number;\n    const bCol = b[0] as number;\n    if (aCol === bCol)\
    \ {\n      return a[1] - b[1];\n    }\n    return aCol - bCol;\n  });\n\n  return\
    \ result;\n}\n", "  const rows: number[][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const row = lst[i];\n    if (row.indexOf(x) !== -1) {\n      rows.push([i,\
    \ row.indexOf(x)]);\n    }\n  }\n  rows.sort((a, b) => a[1] - b[1]);\n  rows.sort((a,\
    \ b) => b[0] - a[0]);\n  return rows;\n}\n", "  const rows = lst.length;\n  const\
    \ cols = lst[0].length;\n  const result = [];\n  for (let i = 0; i < rows; i++)\
    \ {\n    const row = lst[i];\n    const row_x = row[x];\n    const row_y = row[cols\
    \ - 1 - x];\n    result.push([row_x, row_y]);\n  }\n  result.sort((a, b) => a[0]\
    \ - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n}\n", " \
    \ const result: number[][] = [];\n  const row: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const columns: number[] = [];\n  const columns: number[] = [];\n  const\
    \ rows: number[][] = [];\n  const columns: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const columns: number[] = [];\n  const rows: number[][] = [];\n  const\
    \ columns: number[] = [];\n  const rows: number[][] = [];\n  const columns: number[]\
    \ = [];\n  const rows: number[][] = [];\n  const columns: number[] = [];\n  const\
    \ rows: number[][] = [];\n  const columns: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const columns: number[] = [];\n  const rows: number[][] = [];\n  const\
    \ columns: number[] = [];\n  const rows: number[][] = [];\n  const columns: number[]\
    \ = [];\n  const rows: number[][] = [];\n  const columns: number[] = [];\n  const\
    \ rows: number[][] = [];\n  const columns: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const columns: number[] = [];\n  const rows: number[][] = [];\n  const\
    \ columns: number[] = [];\n  const rows: number[][] = [];\n  const columns: number[]\
    \ = [];\n  const rows: number[][] = [];\n  const columns: number[] = [];\n  const\
    \ rows: number[][] = [];\n  const columns: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const columns: number[] = [];\n  const rows: number[][] = [];\n  const\
    \ columns: number[] = [];\n  const rows: number[][] = [];\n  const columns: number[]\
    \ = [];\n  const rows: number[][] = [];\n  const columns: number[] = [];\n  const\
    \ rows: number[][] = [];\n  const columns: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const columns: number[] = [];\n  const rows: number[][] = [];\n  const\
    \ columns: number[] = [];\n  const rows: number[][] = [];\n  const columns: number[]\
    \ = [];\n  const rows: number[][] = [];\n  const columns: number[] = [];\n  const\
    \ rows: number[][] = [];\n  const columns: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const columns: number[] = [];\n  const rows: number[][] = [];\n  const\
    \ columns: number[] = [];\n  const rows: number[][] = [];\n  const columns: number[]\
    \ = [];\n  const rows: number[][] = [];\n  const columns: number[] = [];\n  const\
    \ rows: number[][] = [];\n  const columns: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const column", "  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ row = [x];\n  const rows = [row];\n  const row_index = 0;\n  const row_length\
    \ = row.length;\n  const row_indexes = [row_index];\n  const row_indexes_length\
    \ = 1;\n  const row_indexes_indexes = [row_index];\n  const row_indexes_indexes\
    \ = [row_index];\n  let row_start = 0;\n  let row_end = 0;\n  let row_start2 =\
    \ 0;\n  let row_end2 = 0;\n  let row_start3 = 0;\n  let row_end3 = 0;\n  let row_start4\
    \ = 0;\n  let row_end4 = 0;\n  let row_start5 = 0;\n  let row_end5 = 0;\n  let\
    \ row_start6 = 0;\n  let row_end6 = 0;\n  let row_start7 = 0;\n  let row_end7\
    \ = 0;\n  let row_start8 = 0;\n  let row_end8 = 0;\n  let row_start9 = 0;\n  let\
    \ row_end9 = 0;\n  let row_start10 = 0;\n  let row_end10 = 0;\n  let row_start11\
    \ = 0;\n  let row_end11 = 0;\n  let row_start12 = 0;\n  let row_end12 = 0;\n \
    \ let row_start13 = 0;\n  let row_end13 = 0;\n  let row_start14 = 0;\n  let row_end14\
    \ = 0;\n  let row_start15 = 0;\n  let row_end15 = 0;\n  let row_start16 = 0;\n\
    \  let row_end16 = 0;\n  let row_start17 = 0;\n  let row_end17 = 0;\n  let row_start18\
    \ = 0;\n  let row_end18 = 0;\n  let row_start19 = 0;\n  let row_end19 = 0;\n \
    \ let row_start20 = 0;\n  let row_end20 = 0;\n  let row_start21 = 0;\n  let row_end21\
    \ = 0;\n  let row_start22 = 0;\n  let row_end22 = 0;\n  let row_start23 = 0;\n\
    \  let row_end23 = 0;\n  let row_start24 = 0;\n  let row_end24 = 0;\n  let row_start25\
    \ = 0;\n  let row_end25 = 0;\n  let row_start26 = 0;\n  let row_end26 = 0;\n \
    \ let row_start27 = 0;\n  let row_end27 = 0;\n  let row_start28 = 0;\n  let row_end28\
    \ = 0;\n  let row_start29 = 0;\n  let row_end29 = 0;\n  let row_start30 = 0;\n\
    \  let row_end30 = 0;\n  let row_start31 = 0;\n  let row_end31 = 0;\n  let row_start32\
    \ = 0;\n  let row_end32 = 0;\n  let row_start33 = 0;\n  let row_end33 = 0;\n \
    \ let row_start34 = 0;\n  let row_end34 = 0;\n  let row_start35 = 0;\n  let row_end35\
    \ = 0;\n  let row_start36 = 0;\n  let row_end36 = 0;\n  let row_start37 = 0;\n\
    \  let row_end37 = 0;\n  let row_start38 = 0;\n  let row_end38", "  const rows:\
    \ number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row =\
    \ lst[i];\n    if (row.indexOf(x) !== -1) {\n      rows.push([i, row.indexOf(x)]);\n\
    \    }\n  }\n  rows.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n\
    \    }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    return 0;\n  });\n\
    \  const result = [];\n  for (let i = 0; i < rows.length; i++) {\n    const row\
    \ = rows[i];\n    result.push([i, row[1]]);\n  }\n  return result;\n}\n", "  if\
    \ (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n  const\
    \ [minRow, maxRow] = rows.map(row => Math.min(row, x));\n  const [minCol, maxCol]\
    \ = cols.map(col => Math.max(col, x));\n  const rows: number[][] = [];\n  const\
    \ cols: number[][] = [];\n  for (let row = minRow; row <= maxRow; row++) {\n \
    \   const rowCoords: number[] = [];\n    for (let col = minCol; col <= maxCol;\
    \ col++) {\n      if (col === minCol || row === minRow || col === maxCol || row\
    \ === maxRow) {\n        rowCoords.push(0);\n        cols.push(col);\n      }\
    \ else {\n        rowCoords.push(col);\n      }\n    }\n    rows.push(rowCoords);\n\
    \  }\n  return rows.map(row => row.map(col => [col, row]));\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const [rows, columns] = lst;\n  const [row,\
    \ col] = get_row_and_col(rows, x);\n  return [\n    [row, col],\n    ...get_row(rows.slice(1),\
    \ col),\n  ];\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [rows, cols] = lst;\n  const [minRow, minCol] = rows.reduce(([minRow, minCol],\
    \ row) => {\n    const [row, col] = row;\n    return [Math.min(row, minRow), Math.min(col,\
    \ minCol)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const\
    \ [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const [row,\
    \ col] = row;\n    return [Math.max(row, maxRow), Math.max(col, maxCol)];\n  },\
    \ [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowIndex,\
    \ minColIndex] = rows.reduce(([minRowIndex, minColIndex], row, i) => {\n    const\
    \ [row, col] = row;\n    return [Math.min(i, minRowIndex), Math.min(i, minColIndex)];\n\
    \  }, [0, 0])\n  const [maxRowIndex, maxColIndex] = rows.reduce(([maxRowIndex,\
    \ maxColIndex], row, i) => {\n    const [row, col] = row;\n    return [Math.max(i,\
    \ maxRowIndex), Math.max(i, maxColIndex)];\n  }, [rows.length - 1, cols.length\
    \ - 1]);\n  const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n\
    \    const [row, col] = row;\n    return [Math.min(row, minRow), Math.min(col,\
    \ minCol)];\n  }, [minRowIndex, minColIndex]);\n  const [maxRow, maxCol] = rows.reduce(([maxRow,\
    \ maxCol], row) => {\n    const [row, col] = row;\n    return [Math.max(row, maxRow),\
    \ Math.max(col, maxCol)];\n  }, [maxRowIndex, maxColIndex]);\n  const [minRowIndex,\
    \ minColIndex] = rows.reduce(([minRowIndex, minColIndex], row, i) => {\n    const\
    \ [row, col] = row;\n    return [Math.min(i, minRowIndex), Math.min(i, minColIndex)];\n\
    \  }, [0, 0])\n  const [maxRowIndex, maxColIndex] = rows.reduce(([maxRowIndex,\
    \ maxColIndex], row, i) => {\n    const [row, col] = row;\n    return [Math.max(i,\
    \ maxRowIndex), Math.max(i, maxColIndex)];\n  }, [rows.length - 1, cols.length\
    \ - 1]);\n  const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n\
    \    const [row, col] = row;\n    return [Math.min(row, minRow), Math.min(col,\
    \ minCol)];\n  }, [minRowIndex, minCol", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n  const [rows, cols] = lst;\n  const [minRow, minCol] = rows.reduce(([minRow,\
    \ minCol], row) => {\n    const [row, col] = row;\n    return [Math.min(minRow,\
    \ row), Math.min(minCol, col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const\
    \ [row, col] = row;\n    return [Math.max(maxRow, row), Math.max(maxCol, col)];\n\
    \  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowCol,\
    \ maxRowCol] = rows.reduce(([minRowCol, maxRowCol], row) => {\n    const [row,\
    \ col] = row;\n    return [Math.min(minRowCol, row), Math.max(maxRowCol, col)];\n\
    \  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minColRowCol,\
    \ maxColRowCol] = cols.reduce(([minColRowCol, maxColRowCol], col) => {\n    const\
    \ [row, col] = col;\n    return [Math.min(minColRowCol, col), Math.max(maxColRowCol,\
    \ col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowColRowCol,\
    \ maxRowColRowCol] = rows.reduce(([minRowColRowCol, maxRowColRowCol], row) =>\
    \ {\n    const [row, col] = row;\n    return [Math.min(minRowColRowCol, row),\
    \ Math.max(maxRowColRowCol, col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minColRowRowCol, maxColRowRowCol] = cols.reduce(([minColRowRowCol, maxColRowRowCol],\
    \ col) => {\n    const [row, col] = col;\n    return [Math.min(minColRowRowCol,\
    \ col), Math.max(maxColRowRowCol, col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minRowColRowRowCol, maxRowColRowRowCol] = rows.reduce(([minRowColRowRowCol,\
    \ maxRowColRowRowCol], row) => {\n    const [row, col] = row;\n    return [Math.min(minRowColRowRowCol,\
    \ row), Math.max(maxRowColRowRowCol, col)];\n  }, [Number.MAX_S", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const [rows, columns] = lst;\n  const [row,\
    \ col] = get_row_and_col(rows, x);\n  return [\n    [row, col],\n    ...get_row(rows.slice(1),\
    \ col),\n  ];\n}\n", "  const result: number[][] = [];\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    const row = lst[i];\n    if (row.indexOf(x) !== -1)\
    \ {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b)\
    \ => a[1] - b[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n\
    }\n", "  const rows = lst.length;\n  const cols = lst[0].length;\n  const coords:\
    \ number[][] = [];\n  for (let row = 0; row < rows; row++) {\n    coords[row]\
    \ = [];\n    for (let col = 0; col < cols; col++) {\n      coords[row][col] =\
    \ lst[row][col];\n    }\n  }\n  coords.sort((a, b) => {\n    if (a[0] > b[0])\
    \ return 1;\n    if (a[0] < b[0]) return -1;\n    return 0;\n  });\n  coords.sort((a,\
    \ b) => {\n    if (a[1] > b[1]) return 1;\n    if (a[1] < b[1]) return -1;\n \
    \   return 0;\n  });\n  const result = [];\n  for (let row = 0; row < rows; row++)\
    \ {\n    const rowCoords = coords[row];\n    const rowResult = [];\n    for (let\
    \ col = 0; col < cols; col++) {\n      if (rowCoords[col] === x) {\n        rowResult.push([row,\
    \ col]);\n      }\n    }\n    result.push(rowResult);\n  }\n  return result;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
