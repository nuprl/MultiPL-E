name: HumanEval_87_get_row
language: ts
prompt: "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar\
  \ to matrix, however, unlike matrices,\n// each row may contain a different number\
  \ of columns.\n// Given lst, and integer x, find integers x in the array,\n// and\
  \ return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a\
  \ coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by\
  \ rows in ascending order.\n// Also, sort coordinates of the row by columns in descending\
  \ order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
  \ [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([],\
  \ 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst:\
  \ number[][], x: number): [number, number][] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3,\
  \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0],\
  \ [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3,\
  \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
  \ 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
  \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2,\
  \ 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n\
  \  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n\
  \  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
completions: ["  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols]\
    \ = lst;\n  const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n\
    \    const [minRow, minCol] = row.reduce(([minRow, minCol], item) => {\n     \
    \ if (item < minRow) {\n        return [item, item];\n      } else if (item >\
    \ minRow) {\n        return [minRow, item];\n      }\n      return [minRow, minCol];\n\
    \    }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n    return [Math.min(minRow,\
    \ x), Math.min(minCol, x)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const\
    \ [maxRow, maxCol] = row.reduce(([maxRow, maxCol], item) => {\n      if (item\
    \ > maxRow) {\n        return [item, item];\n      } else if (item < maxRow) {\n\
    \        return [maxRow, item];\n      }\n      return [maxRow, maxCol];\n   \
    \ }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n    return [Math.max(maxRow,\
    \ x), Math.max(maxCol, x)];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow,\
    \ maxCol];\n  const [minRowIndex, minColIndex] = [minRow, minCol];\n  const [maxRowIndex,\
    \ maxColIndex] = [maxRow, maxCol];\n  const [minRowIndex, maxRowIndex] = [minRow,\
    \ maxRow];\n  const [maxRowIndex, minColIndex] = [maxRow, minCol];\n  const [minColIndex,\
    \ maxColIndex] = [minCol, maxCol];\n  const [minRowIndex, maxRowIndex, minColIndex,\
    \ maxColIndex] = [\n    minRowIndex,\n    maxRowIndex,\n    minColIndex,\n   \
    \ maxColIndex\n  ];\n  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow,\
    \ maxCol] = [maxRow, maxCol];\n  const [minRowIndex, minColIndex, maxRowIndex,\
    \ maxColIndex] = [\n    minRowIndex,\n    minColIndex,\n    maxRowIndex,\n   \
    \ maxColIndex\n  ];\n  const [minRow, minCol, maxRow, maxCol] = [minRow, minCol,\
    \ maxRow, ", "  const rows = lst.map(row => row.map(i => i + 1));\n  const cols\
    \ = lst.map(row => row.map(i => i + 1));\n  const result = [];\n  const rows =\
    \ rows.sort((a, b) => a - b);\n  const cols = cols.sort((a, b) => b - a);\n  for\
    \ (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    const col\
    \ = cols[i];\n    if (row === x) {\n      const coord = [i, col];\n      result.push(coord);\n\
    \    }\n  }\n  return result;\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n  const row = [x];\n  const result = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const column = lst[i][0];\n    if (column === x) {\n      result.push([row,\
    \ column]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a,\
    \ b) => a[0] - b[0]);\n  return result;\n}\n", "  const rows = lst.map(row =>\
    \ row.map(i => i + x));\n  const sorted = rows.map(row => row.sort((a, b) => b\
    \ - a));\n  const sortedRows = sorted.map(row => row.map(i => i[0]));\n  return\
    \ sortedRows.map(row => row.map(i => [i[1], i[0]]));\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n  const [minRow,\
    \ minCol] = rows.reduce(([minRow, minCol], row) => {\n    const [row, col] = row;\n\
    \    return [\n      Math.min(minRow, row),\n      Math.min(minCol, col),\n  \
    \  ];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const maxRow\
    \ = Math.max(...rows.map(row => row.length));\n  const maxCol = Math.max(...cols.map(col\
    \ => col.length));\n  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [row,\
    \ col] = [minRow, minCol];\n  const result = [];\n  while (row < maxRow) {\n \
    \   while (col < maxCol) {\n      const [x, y] = lst[row][col];\n      if (x ===\
    \ x) {\n        result.push([row, col]);\n      }\n      col++;\n    }\n    row++;\n\
    \    col = 0;\n  }\n  return result.sort(([a], [b]) => a - b).sort(([a], [b])\
    \ => b - a);\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const rows\
    \ = lst.length;\n  const cols = lst[0].length;\n  const result = [];\n  for (let\
    \ row = 0; row < rows; row++) {\n    const row = lst[row];\n    const rowResult\
    \ = [];\n    for (let col = 0; col < cols; col++) {\n      const value = row[col];\n\
    \      if (value === x) {\n        rowResult.push([row, col]);\n      }\n    }\n\
    \    result.push(rowResult);\n  }\n  result.sort((a, b) => {\n    const aRow =\
    \ a[0];\n    const aCol = a[1];\n    const bRow = b[0];\n    const bCol = b[1];\n\
    \    if (aRow === bRow) {\n      return aCol - bCol;\n    }\n    return aRow -\
    \ bRow;\n  });\n  result.sort((a, b) => {\n    const aRow = a[0];\n    const aCol\
    \ = a[1];\n    const bRow = b[0];\n    const bCol = b[1];\n    if (aCol === bCol)\
    \ {\n      return aRow - bRow;\n    }\n    return aCol - bCol;\n  });\n  return\
    \ result;\n}\n", "  const rows = lst.length;\n  const cols = lst[0].length;\n\
    \  const result: number[][] = [];\n  for (let i = 0; i < rows; i++) {\n    const\
    \ row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j < cols; j++)\
    \ {\n      if (row[j] === x) {\n        rowResult.push([i, j]);\n      }\n   \
    \ }\n    result.push(rowResult);\n  }\n  result.sort((a, b) => {\n    if (a[0]\
    \ > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n      return -1;\n\
    \    }\n    return 0;\n  });\n  result.sort((a, b) => {\n    if (a[1] > b[1])\
    \ {\n      return 1;\n    }\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\
    \    return 0;\n  });\n  return result;\n}\n", "  if (lst.length === 0) {\n  \
    \  return [];\n  }\n\n  const rows = lst.length;\n  const cols = lst[0].length;\n\
    \  const row = [x];\n  const result = [];\n\n  for (let i = 0; i < rows; i++)\
    \ {\n    const row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j\
    \ < cols; j++) {\n      rowResult.push([row[j], i]);\n    }\n    result.push(rowResult);\n\
    \  }\n\n  result.sort((a, b) => {\n    const aRow = a[0] as number;\n    const\
    \ bRow = b[0] as number;\n    if (aRow === bRow) {\n      return a[1] - b[1];\n\
    \    }\n    return aRow - bRow;\n  });\n\n  result.sort((a, b) => {\n    const\
    \ aCol = a[0] as number;\n    const bCol = b[0] as number;\n    if (aCol === bCol)\
    \ {\n      return a[1] - b[1];\n    }\n    return aCol - bCol;\n  });\n\n  return\
    \ result;\n}\n", "  const rows: number[][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const row = lst[i];\n    if (row.indexOf(x) !== -1) {\n      rows.push([i,\
    \ row.indexOf(x)]);\n    }\n  }\n  rows.sort((a, b) => a[1] - b[1]);\n  rows.sort((a,\
    \ b) => b[0] - a[0]);\n  return rows;\n}\n", "  const rows = lst.length;\n  const\
    \ cols = lst[0].length;\n  const result = [];\n  for (let i = 0; i < rows; i++)\
    \ {\n    const row = lst[i];\n    const row_x = row[x];\n    const row_y = row[cols\
    \ - 1 - x];\n    result.push([row_x, row_y]);\n  }\n  result.sort((a, b) => a[0]\
    \ - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n}\n", " \
    \ const result: number[][] = [];\n  const row: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const columns: number[] = [];\n  const columns: number[] = [];\n  const\
    \ rows: number[][] = [];\n  const columns: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const columns: number[] = [];\n  const rows: number[][] = [];\n  const\
    \ columns: number[] = [];\n  const rows: number[][] = [];\n  const columns: number[]\
    \ = [];\n  const rows: number[][] = [];\n  const columns: number[] = [];\n  const\
    \ rows: number[][] = [];\n  const columns: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const columns: number[] = [];\n  const rows: number[][] = [];\n  const\
    \ columns: number[] = [];\n  const rows: number[][] = [];\n  const columns: number[]\
    \ = [];\n  const rows: number[][] = [];\n  const columns: number[] = [];\n  const\
    \ rows: number[][] = [];\n  const columns: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const columns: number[] = [];\n  const rows: number[][] = [];\n  const\
    \ columns: number[] = [];\n  const rows: number[][] = [];\n  const columns: number[]\
    \ = [];\n  const rows: number[][] = [];\n  const columns: number[] = [];\n  const\
    \ rows: number[][] = [];\n  const columns: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const columns: number[] = [];\n  const rows: number[][] = [];\n  const\
    \ columns: number[] = [];\n  const rows: number[][] = [];\n  const columns: number[]\
    \ = [];\n  const rows: number[][] = [];\n  const columns: number[] = [];\n  const\
    \ rows: number[][] = [];\n  const columns: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const columns: number[] = [];\n  const rows: number[][] = [];\n  const\
    \ columns: number[] = [];\n  const rows: number[][] = [];\n  const columns: number[]\
    \ = [];\n  const rows: number[][] = [];\n  const columns: number[] = [];\n  const\
    \ rows: number[][] = [];\n  const columns: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const columns: number[] = [];\n  const rows: number[][] = [];\n  const\
    \ columns: number[] = [];\n  const rows: number[][] = [];\n  const columns: number[]\
    \ = [];\n  const rows: number[][] = [];\n  const columns: number[] = [];\n  const\
    \ rows: number[][] = [];\n  const columns: number[] = [];\n  const rows: number[][]\
    \ = [];\n  const column", "  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ row = [x];\n  const rows = [row];\n  const row_index = 0;\n  const row_length\
    \ = row.length;\n  const row_indexes = [row_index];\n  const row_indexes_length\
    \ = 1;\n  const row_indexes_indexes = [row_index];\n  const row_indexes_indexes\
    \ = [row_index];\n  let row_start = 0;\n  let row_end = 0;\n  let row_start2 =\
    \ 0;\n  let row_end2 = 0;\n  let row_start3 = 0;\n  let row_end3 = 0;\n  let row_start4\
    \ = 0;\n  let row_end4 = 0;\n  let row_start5 = 0;\n  let row_end5 = 0;\n  let\
    \ row_start6 = 0;\n  let row_end6 = 0;\n  let row_start7 = 0;\n  let row_end7\
    \ = 0;\n  let row_start8 = 0;\n  let row_end8 = 0;\n  let row_start9 = 0;\n  let\
    \ row_end9 = 0;\n  let row_start10 = 0;\n  let row_end10 = 0;\n  let row_start11\
    \ = 0;\n  let row_end11 = 0;\n  let row_start12 = 0;\n  let row_end12 = 0;\n \
    \ let row_start13 = 0;\n  let row_end13 = 0;\n  let row_start14 = 0;\n  let row_end14\
    \ = 0;\n  let row_start15 = 0;\n  let row_end15 = 0;\n  let row_start16 = 0;\n\
    \  let row_end16 = 0;\n  let row_start17 = 0;\n  let row_end17 = 0;\n  let row_start18\
    \ = 0;\n  let row_end18 = 0;\n  let row_start19 = 0;\n  let row_end19 = 0;\n \
    \ let row_start20 = 0;\n  let row_end20 = 0;\n  let row_start21 = 0;\n  let row_end21\
    \ = 0;\n  let row_start22 = 0;\n  let row_end22 = 0;\n  let row_start23 = 0;\n\
    \  let row_end23 = 0;\n  let row_start24 = 0;\n  let row_end24 = 0;\n  let row_start25\
    \ = 0;\n  let row_end25 = 0;\n  let row_start26 = 0;\n  let row_end26 = 0;\n \
    \ let row_start27 = 0;\n  let row_end27 = 0;\n  let row_start28 = 0;\n  let row_end28\
    \ = 0;\n  let row_start29 = 0;\n  let row_end29 = 0;\n  let row_start30 = 0;\n\
    \  let row_end30 = 0;\n  let row_start31 = 0;\n  let row_end31 = 0;\n  let row_start32\
    \ = 0;\n  let row_end32 = 0;\n  let row_start33 = 0;\n  let row_end33 = 0;\n \
    \ let row_start34 = 0;\n  let row_end34 = 0;\n  let row_start35 = 0;\n  let row_end35\
    \ = 0;\n  let row_start36 = 0;\n  let row_end36 = 0;\n  let row_start37 = 0;\n\
    \  let row_end37 = 0;\n  let row_start38 = 0;\n  let row_end38", "  const rows:\
    \ number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row =\
    \ lst[i];\n    if (row.indexOf(x) !== -1) {\n      rows.push([i, row.indexOf(x)]);\n\
    \    }\n  }\n  rows.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n\
    \    }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    return 0;\n  });\n\
    \  const result = [];\n  for (let i = 0; i < rows.length; i++) {\n    const row\
    \ = rows[i];\n    result.push([i, row[1]]);\n  }\n  return result;\n}\n", "  if\
    \ (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n  const\
    \ [minRow, maxRow] = rows.map(row => Math.min(row, x));\n  const [minCol, maxCol]\
    \ = cols.map(col => Math.max(col, x));\n  const rows: number[][] = [];\n  const\
    \ cols: number[][] = [];\n  for (let row = minRow; row <= maxRow; row++) {\n \
    \   const rowCoords: number[] = [];\n    for (let col = minCol; col <= maxCol;\
    \ col++) {\n      if (col === minCol || row === minRow || col === maxCol || row\
    \ === maxRow) {\n        rowCoords.push(0);\n        cols.push(col);\n      }\
    \ else {\n        rowCoords.push(col);\n      }\n    }\n    rows.push(rowCoords);\n\
    \  }\n  return rows.map(row => row.map(col => [col, row]));\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const [rows, columns] = lst;\n  const [row,\
    \ col] = get_row_and_col(rows, x);\n  return [\n    [row, col],\n    ...get_row(rows.slice(1),\
    \ col),\n  ];\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [rows, cols] = lst;\n  const [minRow, minCol] = rows.reduce(([minRow, minCol],\
    \ row) => {\n    const [row, col] = row;\n    return [Math.min(row, minRow), Math.min(col,\
    \ minCol)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const\
    \ [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const [row,\
    \ col] = row;\n    return [Math.max(row, maxRow), Math.max(col, maxCol)];\n  },\
    \ [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowIndex,\
    \ minColIndex] = rows.reduce(([minRowIndex, minColIndex], row, i) => {\n    const\
    \ [row, col] = row;\n    return [Math.min(i, minRowIndex), Math.min(i, minColIndex)];\n\
    \  }, [0, 0])\n  const [maxRowIndex, maxColIndex] = rows.reduce(([maxRowIndex,\
    \ maxColIndex], row, i) => {\n    const [row, col] = row;\n    return [Math.max(i,\
    \ maxRowIndex), Math.max(i, maxColIndex)];\n  }, [rows.length - 1, cols.length\
    \ - 1]);\n  const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n\
    \    const [row, col] = row;\n    return [Math.min(row, minRow), Math.min(col,\
    \ minCol)];\n  }, [minRowIndex, minColIndex]);\n  const [maxRow, maxCol] = rows.reduce(([maxRow,\
    \ maxCol], row) => {\n    const [row, col] = row;\n    return [Math.max(row, maxRow),\
    \ Math.max(col, maxCol)];\n  }, [maxRowIndex, maxColIndex]);\n  const [minRowIndex,\
    \ minColIndex] = rows.reduce(([minRowIndex, minColIndex], row, i) => {\n    const\
    \ [row, col] = row;\n    return [Math.min(i, minRowIndex), Math.min(i, minColIndex)];\n\
    \  }, [0, 0])\n  const [maxRowIndex, maxColIndex] = rows.reduce(([maxRowIndex,\
    \ maxColIndex], row, i) => {\n    const [row, col] = row;\n    return [Math.max(i,\
    \ maxRowIndex), Math.max(i, maxColIndex)];\n  }, [rows.length - 1, cols.length\
    \ - 1]);\n  const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n\
    \    const [row, col] = row;\n    return [Math.min(row, minRow), Math.min(col,\
    \ minCol)];\n  }, [minRowIndex, minCol", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n  const [rows, cols] = lst;\n  const [minRow, minCol] = rows.reduce(([minRow,\
    \ minCol], row) => {\n    const [row, col] = row;\n    return [Math.min(minRow,\
    \ row), Math.min(minCol, col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const\
    \ [row, col] = row;\n    return [Math.max(maxRow, row), Math.max(maxCol, col)];\n\
    \  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowCol,\
    \ maxRowCol] = rows.reduce(([minRowCol, maxRowCol], row) => {\n    const [row,\
    \ col] = row;\n    return [Math.min(minRowCol, row), Math.max(maxRowCol, col)];\n\
    \  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minColRowCol,\
    \ maxColRowCol] = cols.reduce(([minColRowCol, maxColRowCol], col) => {\n    const\
    \ [row, col] = col;\n    return [Math.min(minColRowCol, col), Math.max(maxColRowCol,\
    \ col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowColRowCol,\
    \ maxRowColRowCol] = rows.reduce(([minRowColRowCol, maxRowColRowCol], row) =>\
    \ {\n    const [row, col] = row;\n    return [Math.min(minRowColRowCol, row),\
    \ Math.max(maxRowColRowCol, col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minColRowRowCol, maxColRowRowCol] = cols.reduce(([minColRowRowCol, maxColRowRowCol],\
    \ col) => {\n    const [row, col] = col;\n    return [Math.min(minColRowRowCol,\
    \ col), Math.max(maxColRowRowCol, col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minRowColRowRowCol, maxRowColRowRowCol] = rows.reduce(([minRowColRowRowCol,\
    \ maxRowColRowRowCol], row) => {\n    const [row, col] = row;\n    return [Math.min(minRowColRowRowCol,\
    \ row), Math.max(maxRowColRowRowCol, col)];\n  }, [Number.MAX_S", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const [rows, columns] = lst;\n  const [row,\
    \ col] = get_row_and_col(rows, x);\n  return [\n    [row, col],\n    ...get_row(rows.slice(1),\
    \ col),\n  ];\n}\n", "  const result: number[][] = [];\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    const row = lst[i];\n    if (row.indexOf(x) !== -1)\
    \ {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b)\
    \ => a[1] - b[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n\
    }\n", "  const rows = lst.length;\n  const cols = lst[0].length;\n  const coords:\
    \ number[][] = [];\n  for (let row = 0; row < rows; row++) {\n    coords[row]\
    \ = [];\n    for (let col = 0; col < cols; col++) {\n      coords[row][col] =\
    \ lst[row][col];\n    }\n  }\n  coords.sort((a, b) => {\n    if (a[0] > b[0])\
    \ return 1;\n    if (a[0] < b[0]) return -1;\n    return 0;\n  });\n  coords.sort((a,\
    \ b) => {\n    if (a[1] > b[1]) return 1;\n    if (a[1] < b[1]) return -1;\n \
    \   return 0;\n  });\n  const result = [];\n  for (let row = 0; row < rows; row++)\
    \ {\n    const rowCoords = coords[row];\n    const rowResult = [];\n    for (let\
    \ col = 0; col < cols; col++) {\n      if (rowCoords[col] === x) {\n        rowResult.push([row,\
    \ col]);\n      }\n    }\n    result.push(rowResult);\n  }\n  return result;\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const row = [x];\n  const\
    \ result = [row];\n  for (let i = 0; i < lst.length; i++) {\n    const lst2 =\
    \ lst[i];\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst2[j] ===\
    \ x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b)\
    \ => {\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n\
    \      return -1;\n    }\n    return 0;\n  });\n  result.sort((a, b) => {\n  \
    \  if (a[1] > b[1]) {\n      return 1;\n    }\n    if (a[1] < b[1]) {\n      return\
    \ -1;\n    }\n    return 0;\n  });\n  return result;\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const row = [x];\n  const rows = [row];\n \
    \ const columns = [lst[0]];\n  const coords = [[0, 0], [0, 0]];\n  let i = 0;\n\
    \  while (i < lst.length) {\n    const row = lst[i];\n    const column = columns[row.length\
    \ - 1];\n    if (column === x) {\n      row.push(...column);\n      rows.push(row);\n\
    \      columns.push([...column]);\n      coords.push([i, row.length - 1]);\n \
    \   } else {\n      columns[row.length - 1].push(...row);\n    }\n    i++;\n \
    \ }\n  coords.sort((a, b) => a[0] - b[0]);\n  coords.sort((a, b) => b[1] - a[1]);\n\
    \  return coords.map(([row, column]) => [row, column]);\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n  const [row, col]\
    \ = get_row_and_col(rows, cols, x);\n  return [\n    [row, col],\n    ...get_row(rows.slice(0,\
    \ row), col - 1),\n    ...get_row(rows.slice(row), col),\n  ];\n}\n", "  const\
    \ rows = lst.length;\n  const cols = lst[0].length;\n  const coords: number[][]\
    \ = [];\n  for (let i = 0; i < rows; i++) {\n    coords[i] = [];\n    for (let\
    \ j = 0; j < cols; j++) {\n      coords[i][j] = lst[i][j];\n    }\n  }\n  coords.sort((a,\
    \ b) => {\n    if (a[0] > b[0]) return 1;\n    if (a[0] < b[0]) return -1;\n \
    \   return 0;\n  });\n  const row = coords.findIndex((coord) => coord[0] === x);\n\
    \  if (row === -1) return [];\n  const cols = coords[row].length;\n  const coords2:\
    \ number[][] = [];\n  for (let i = 0; i < rows; i++) {\n    coords2.push([]);\n\
    \    for (let j = 0; j < cols; j++) {\n      coords2[i].push(coords[row][j]);\n\
    \    }\n  }\n  coords2.sort((a, b) => {\n    if (a[1] > b[1]) return 1;\n    if\
    \ (a[1] < b[1]) return -1;\n    return 0;\n  });\n  return coords2;\n}\n", " \
    \ if (lst.length === 0) {\n    return [];\n  }\n  const row = [x];\n  const rows\
    \ = [row];\n  const row_index = 0;\n  const row_indexes = [row_index];\n  const\
    \ row_indexes_sorted = [row_index];\n  const column_index = 0;\n  const column_indexes\
    \ = [column_index];\n  const column_indexes_sorted = [column_index];\n  const\
    \ row_indexes_sorted_sorted = [row_index];\n  const column_indexes_sorted_sorted\
    \ = [column_index];\n  while (row_index < lst.length) {\n    const row_value =\
    \ lst[row_index][column_index];\n    if (row_value === x) {\n      return row;\n\
    \    }\n    if (row_value < x) {\n      row_index++;\n      row_indexes.push(row_index);\n\
    \      row_indexes_sorted.push(row_index);\n      column_index++;\n      column_indexes.push(column_index);\n\
    \      column_indexes_sorted.push(column_index);\n      row_indexes_sorted_sorted.push(row_index);\n\
    \      column_indexes_sorted_sorted.push(column_index);\n      row.push(row_value);\n\
    \    } else {\n      column_index++;\n      column_indexes.push(column_index);\n\
    \      column_indexes_sorted.push(column_index);\n      row_index++;\n      row_indexes.push(row_index);\n\
    \      row_indexes_sorted.push(row_index);\n      column_index++;\n      column_indexes.push(column_index);\n\
    \      column_indexes_sorted.push(column_index);\n      row_indexes_sorted_sorted.push(row_index);\n\
    \      column_indexes_sorted_sorted.push(column_index);\n      row.push(row_value);\n\
    \    }\n  }\n  return [];\n}\n", "  const rows: number[][] = [];\n  let row: number[]\
    \ = [];\n  let col: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i].includes(x)) {\n      row.push(i);\n      col.push(lst[i].indexOf(x));\n\
    \    }\n  }\n  rows.push(row);\n  cols.push(col);\n  row = [];\n  col = [];\n\
    \  return rows;\n}\n", "  const row: number[][] = [];\n  const column: number[]\
    \ = [];\n  let row_index = 0;\n  let column_index = 0;\n  while (row_index < lst.length)\
    \ {\n    const row_length = lst[row_index].length;\n    if (row_index === lst.length\
    \ - 1) {\n      row.push([]);\n      column.push(0);\n    }\n    for (let i =\
    \ 0; i < row_length; i++) {\n      if (lst[row_index][i] === x) {\n        row.push([row_index,\
    \ column_index]);\n        column.push(i);\n      }\n    }\n    row_index++;\n\
    \    column_index++;\n  }\n  row.sort((a, b) => a[0] - b[0]);\n  column.sort((a,\
    \ b) => b[1] - a[1]);\n  return row;\n}\n", "  const result: number[][] = [];\n\
    \  const rows = lst.length;\n  const cols = lst[0].length;\n  const rowMap = new\
    \ Map<number, number>();\n  const colMap = new Map<number, number>();\n  for (let\
    \ i = 0; i < rows; i++) {\n    const row = lst[i];\n    const rowKey = rowMap.get(row)\
    \ || i;\n    rowMap.set(row, rowKey);\n    for (let j = 0; j < cols; j++) {\n\
    \      const col = lst[i][j];\n      const colKey = colMap.get(col) || j;\n  \
    \    colMap.set(col, colKey);\n      if (col === x) {\n        result.push([rowKey,\
    \ colKey]);\n      }\n    }\n  }\n  return result.sort((a, b) => b[1] - a[1]);\n\
    }\n", "  const rows: number[][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const row = lst[i];\n    if (row.includes(x)) {\n      rows.push([i,\
    \ row.indexOf(x)]);\n    }\n  }\n  rows.sort((a, b) => a[1] - b[1]);\n  rows.sort((a,\
    \ b) => b[1] - a[1]);\n  return rows;\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n  const [rows, columns] = lst;\n  const [row, column] = get_row_and_column_from_row(rows,\
    \ x, columns);\n  return [\n    [row, column],\n    ...get_row(rows.slice(1),\
    \ column),\n  ];\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ row = [x];\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    const column = lst[i][0];\n    if (column === x) {\n      result.push(row.slice());\n\
    \    }\n  }\n  return result.sort((a, b) => b[0] - a[0]).sort((a, b) => b[1] -\
    \ a[1]);\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows,\
    \ cols] = lst;\n  const rowIdx = rows.findIndex((row) => row === x);\n  const\
    \ colIdx = cols.findIndex((col) => col === x);\n  if (rowIdx === -1) {\n    return\
    \ [];\n  }\n  const row = rows[rowIdx];\n  const col = cols[colIdx];\n  const\
    \ rowIdx = rows.findIndex((row) => row === x);\n  const colIdx = cols.findIndex((col)\
    \ => col === x);\n  const sortedRows = rows.sort((a, b) => a - b);\n  const sortedCols\
    \ = cols.sort((a, b) => b - a);\n  return sortedRows.map((row, i) => [row, sortedCols[i]]);\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] =\
    \ lst;\n  const [minRow, maxRow] = rows.reduce(([minRow, maxRow], [row, col])\
    \ => {\n    if (row < minRow) {\n      return [row, col];\n    } else if (row\
    \ > maxRow) {\n      return [row, col];\n    }\n    return [minRow, maxRow];\n\
    \  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minCol, maxCol]\
    \ = cols.reduce(([minCol, maxCol], [row, col]) => {\n    if (col < minCol) {\n\
    \      return [row, col];\n    } else if (col > maxCol) {\n      return [row,\
    \ col];\n    }\n    return [minCol, maxCol];\n  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow,\
    \ maxCol];\n  const [row, col] = [minRow, minCol];\n  const result = [];\n  while\
    \ (row <= maxRow) {\n    while (col <= maxCol) {\n      if (row === x && col ===\
    \ x) {\n        result.push([row, col]);\n      }\n      if (row === x || col\
    \ === x) {\n        break;\n      }\n      col++;\n    }\n    row++;\n    col--;\n\
    \  }\n  return result.sort(([a], [b]) => a - b).sort(([b], [a]) => b - a);\n}\n",
  "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n \
    \ const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n    const\
    \ [minRow, minCol] = row.reduce(([minRow, minCol], item) => {\n      if (item\
    \ < minRow) {\n        return [item, item];\n      } else if (item > minRow) {\n\
    \        return [minRow, item];\n      }\n      return [minRow, minCol];\n   \
    \ }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n    return [Math.min(minRow,\
    \ x), Math.min(minCol, x)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const\
    \ [maxRow, maxCol] = row.reduce(([maxRow, maxCol], item) => {\n      if (item\
    \ > maxRow) {\n        return [item, item];\n      } else if (item < maxRow) {\n\
    \        return [maxRow, item];\n      }\n      return [maxRow, maxCol];\n   \
    \ }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n    return [Math.max(maxRow,\
    \ x), Math.max(maxCol, x)];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow,\
    \ maxCol];\n  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol]\
    \ = [maxRow, maxCol];\n  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow,\
    \ maxCol] = [maxRow, maxCol];\n  const [minRow, minCol] = [minRow, minCol];\n\
    \  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow, minCol] = [minRow,\
    \ minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow, minCol]\
    \ = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow,\
    \ minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n\
    \  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow,\
    \ maxCol];", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols]\
    \ = lst[0].length;\n  const result = [];\n  for (let i = 0; i < rows; i++) {\n\
    \    const row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j < cols;\
    \ j++) {\n      const col = row[j];\n      if (col === x) {\n        rowResult.push([i,\
    \ j]);\n      }\n    }\n    result.push(rowResult);\n  }\n  result.sort((a, b)\
    \ => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] =\
    \ lst;\n  const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n\
    \    const [minRowRow, minRowCol] = row.reduce(([minRowRow, minRowCol], item)\
    \ => {\n      if (item < minRow) {\n        return [item, item];\n      } else\
    \ if (item === minRow) {\n        return [minRow, minRowCol];\n      } else {\n\
    \        return [minRowRow, item];\n      }\n    }, []);\n    return [minRow,\
    \ minRowCol];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const\
    \ [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const [maxRowRow,\
    \ maxRowCol] = row.reduce(([maxRowRow, maxRowCol], item) => {\n      if (item\
    \ > maxRow) {\n        return [item, item];\n      } else if (item === maxRow)\
    \ {\n        return [maxRow, maxRowCol];\n      } else {\n        return [maxRowRow,\
    \ item];\n      }\n    }, []);\n    return [maxRow, maxRowCol];\n  }, [Number.MIN_SAFE_INTEGER,\
    \ Number.MIN_SAFE_INTEGER]);\n  const [minRowRow, minRowCol] = rows.reduce(([minRowRow,\
    \ minRowCol], row) => {\n    const [minRowRowRow, minRowRowCol] = row.reduce(([minRowRowRow,\
    \ minRowRowCol], item) => {\n      if (item < minRowRow) {\n        return [item,\
    \ item];\n      } else if (item === minRowRow) {\n        return [minRowRow, minRowRowCol];\n\
    \      } else {\n        return [minRowRowRow, item];\n      }\n    }, []);\n\
    \    return [minRowRow, minRowRowCol];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRowRow, maxRowCol] = rows.reduce(([maxRowRow, maxRowCol], row) =>\
    \ {\n    const [maxRowRowRow, maxRowRowCol] = row.reduce(([maxRowRowRow, maxRowRowCol],\
    \ item) => {\n      if (item > maxRowRow) {\n        return [item, item];\n  \
    \    } else if (item === maxRowRow) {\n        return [maxRowRow, maxRowRowCol];\n\
    \      } else {\n        return [maxRowRowRow, item];\n      }\n    }, []);\n\
    \    return [maxRowRow, maxRowRowCol];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const ", "  if (lst.length === 0) {\n    return [];\n  }\n  const row = [x];\n\
    \  const rows = [row];\n  const row_indexes: number[] = [];\n  const row_indexes:\
    \ number[] = [];\n  let row_index = 0;\n  let row_index2 = 0;\n  let row_index3\
    \ = 0;\n  let row_index4 = 0;\n  let row_index5 = 0;\n  let row_index6 = 0;\n\
    \  let row_index7 = 0;\n  let row_index8 = 0;\n  let row_index9 = 0;\n  let row_index10\
    \ = 0;\n  let row_index11 = 0;\n  let row_index12 = 0;\n  let row_index13 = 0;\n\
    \  let row_index14 = 0;\n  let row_index15 = 0;\n  let row_index16 = 0;\n  let\
    \ row_index17 = 0;\n  let row_index18 = 0;\n  let row_index19 = 0;\n  let row_index20\
    \ = 0;\n  let row_index21 = 0;\n  let row_index22 = 0;\n  let row_index23 = 0;\n\
    \  let row_index24 = 0;\n  let row_index25 = 0;\n  let row_index26 = 0;\n  let\
    \ row_index27 = 0;\n  let row_index28 = 0;\n  let row_index29 = 0;\n  let row_index30\
    \ = 0;\n  let row_index31 = 0;\n  let row_index32 = 0;\n  let row_index33 = 0;\n\
    \  let row_index34 = 0;\n  let row_index35 = 0;\n  let row_index36 = 0;\n  let\
    \ row_index37 = 0;\n  let row_index38 = 0;\n  let row_index39 = 0;\n  let row_index40\
    \ = 0;\n  let row_index41 = 0;\n  let row_index42 = 0;\n  let row_index43 = 0;\n\
    \  let row_index44 = 0;\n  let row_index45 = 0;\n  let row_index46 = 0;\n  let\
    \ row_index47 = 0;\n  let row_index48 = 0;\n  let row_index49 = 0;\n  let row_index50\
    \ = 0;\n  let row_index51 = 0;\n  let row_index52 = 0;\n  let row_index53 = 0;\n\
    \  let row_index54 = 0;\n  let row_index55 = 0;\n  let row_index56 = 0;\n  let\
    \ row_index57 = 0;\n  let row_index58 = 0;\n  let row_index59 = 0;\n  let row_index60\
    \ = 0;\n  let row_index61 = 0;\n  let row_index62 = 0;\n  let row_index63 = 0;\n\
    \  let row_index64 = 0;\n  let row_index65 = 0;\n  let row_index66 = 0;\n  let\
    \ row_index67 = 0;\n  let row_index68 = 0;\n  let row_index69 = 0;\n  let row_index70\
    \ = 0;\n  let row_index71 = 0;\n  let row_index72 = 0;\n  let row_index73 = 0;\n\
    \  let row_index74 = 0;\n  let row_index75 = 0;\n  let row_index76 = 0;\n  let\
    \ row_index77 = 0;\n  let row_index78 = 0;\n  let row_index79 = 0;\n  let row_index80\
    \ = 0;", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, columns]\
    \ = lst;\n  const [row, col] = get_row_and_col(rows, x);\n  return [\n    [row,\
    \ col],\n    ...get_row(rows.slice(1), x),\n  ];\n}\n", "  if (lst.length ===\
    \ 0) {\n    return [];\n  }\n\n  const rows = lst.length;\n  const cols = lst[0].length;\n\
    \  const result = [];\n\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n\
    \    const rowResult = [];\n    for (let j = 0; j < cols; j++) {\n      const\
    \ element = row[j];\n      if (element === x) {\n        rowResult.push([i, j]);\n\
    \      }\n    }\n    result.push(rowResult);\n  }\n\n  result.sort((a, b) => {\n\
    \    if (a[0] < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0]) {\n   \
    \   return 1;\n    }\n    return 0;\n  });\n\n  for (let i = 0; i < rows; i++)\
    \ {\n    const row = result[i];\n    row.sort((a, b) => {\n      if (a[1] < b[1])\
    \ {\n        return -1;\n      }\n      if (a[1] > b[1]) {\n        return 1;\n\
    \      }\n      return 0;\n    });\n  }\n\n  return result;\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const rows = lst.length;\n  const cols = lst[0].length;\n\
    \  const result = [];\n  for (let row = 0; row < rows; row++) {\n    const rowResult\
    \ = [];\n    for (let col = 0; col < cols; col++) {\n      if (lst[row][col] ===\
    \ x) {\n        rowResult.push([row, col]);\n      }\n    }\n    result.push(rowResult);\n\
    \  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n\
    \  return result;\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [rows, cols] = lst;\n  const [minRow, minCol] = rows.reduce(([minRow, minCol],\
    \ row) => {\n    const [row, col] = row;\n    return [Math.min(minRow, row), Math.min(minCol,\
    \ col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const [maxRow,\
    \ maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const [row, col] = row;\n\
    \    return [Math.max(maxRow, row), Math.max(maxCol, col)];\n  }, [Number.MIN_SAFE_INTEGER,\
    \ Number.MIN_SAFE_INTEGER]);\n  const [x, y] = get_row_col(rows, cols, minRow,\
    \ minCol, maxRow, maxCol, x);\n  return [x, y];\n}\n", "  if (lst.length === 0)\
    \ {\n    return [];\n  }\n  const row = [...lst[0]];\n  const rowLen = row.length;\n\
    \  const colLen = lst[0].length;\n  const rowLenMinusOne = rowLen - 1;\n  const\
    \ colLenMinusOne = colLen - 1;\n  const rowLenMinusOneMinusOne = rowLen - 1 -\
    \ 1;\n  const colLenMinusOneMinusOne = colLen - 1 - 1;\n  const rowLenMinusOneMinusOneMinusOne\
    \ = rowLen - 1 - 1 - 1;\n  const colLenMinusOneMinusOneMinusOne = colLen - 1 -\
    \ 1 - 1 - 1;\n  const rowLenMinusOneMinusOneMinusOneMinusOne = rowLen - 1 - 1\
    \ - 1 - 1 - 1;\n  const colLenMinusOneMinusOneMinusOneMinusOne = colLen - 1 -\
    \ 1 - 1 - 1 - 1 - 1;\n  const rowLenMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ rowLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n  const colLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = colLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n  const rowLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = rowLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n  const colLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = colLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n  const rowLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = rowLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n  const colLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = colLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n\
    \  const rowLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = rowLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1;\n  const colLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = colLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - ", "  const result: number[][]\
    \ = [];\n  const rows = lst.length;\n  const cols = lst[0].length;\n  const row\
    \ = 0;\n  const col = 0;\n  while (row < rows && col < cols) {\n    if (lst[row][col]\
    \ === x) {\n      result.push([row, col]);\n      row++;\n      col++;\n    }\
    \ else if (lst[row][col] > x) {\n      row++;\n    } else {\n      col++;\n  \
    \  }\n  }\n  return result;\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n  const [rows, cols] = lst[0].length;\n  if (x === 0 || x === cols) {\n\
    \    return lst;\n  }\n  const [rowsAsc, colsDesc] = sort_rows(lst);\n  const\
    \ [x, y] = get_row_coords(rowsAsc, colsDesc, x);\n  return [[x, y]].concat(get_row(rowsAsc,\
    \ x - 1), get_row(rowsAsc, x + 1));\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n  const row = [...lst[0]];\n  const rowLen = row.length;\n  const\
    \ colLen = lst[0].length;\n  const result = [];\n  for (let i = 0; i < rowLen;\
    \ i++) {\n    const rowIndex = row[i];\n    const colIndex = colLen - i - 1;\n\
    \    if (rowIndex === x) {\n      result.push([i, colIndex]);\n    }\n  }\n  result.sort((a,\
    \ b) => b[1] - a[1]);\n  return result;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.indexOf(x)\
    \ !== -1) {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a,\
    \ b) => a[1] - b[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n\
    }\n", "  const rows: number[][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const row = lst[i];\n    if (row.indexOf(x) !== -1) {\n      rows.push([i,\
    \ row.indexOf(x)]);\n    }\n  }\n  rows.sort((a, b) => b[1] - a[1]);\n  rows.sort((a,\
    \ b) => a[0] - b[0]);\n  return rows;\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n\n  const row = [x];\n  const rows = [row];\n\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    const lstRow = lst[i];\n    const lstRowLen = lstRow.length;\n\
    \    for (let j = 0; j < lstRowLen; j++) {\n      if (lstRow[j] === x) {\n   \
    \     row.push(j);\n        rows.push(row);\n      }\n    }\n  }\n\n  rows.sort((a,\
    \ b) => {\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0])\
    \ {\n      return -1;\n    }\n    return 0;\n  });\n\n  rows.sort((a, b) => {\n\
    \    if (a[1] > b[1]) {\n      return 1;\n    }\n    if (a[1] < b[1]) {\n    \
    \  return -1;\n    }\n    return 0;\n  });\n\n  return rows;\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const row = [x];\n  const rows = [row];\n \
    \ const columns = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    const\
    \ column = lst[i];\n    for (let j = 0; j < column.length; j++) {\n      rows.push(row.concat(column[j]));\n\
    \    }\n    columns.push(column);\n  }\n  rows.sort((a, b) => a[0] - b[0]);\n\
    \  columns.sort((a, b) => b[1] - a[1]);\n  return rows.map(row => row.map(col\
    \ => col[0]));\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [rows, cols] = lst;\n  const [minRow, minCol] = rows.reduce(([minRow, minCol],\
    \ row) => {\n    const [minRowVal, minColVal] = row.reduce(([minRowVal, minColVal],\
    \ val) => {\n      if (val === x) {\n        return [minRowVal, minColVal];\n\
    \      }\n      return [Math.min(minRowVal, val), Math.min(minColVal, val)];\n\
    \    }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n    return [Math.min(minRow,\
    \ minRowVal), Math.min(minCol, minColVal)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const\
    \ [maxRowVal, maxColVal] = row.reduce(([maxRowVal, maxColVal], val) => {\n   \
    \   if (val === x) {\n        return [maxRowVal, maxColVal];\n      }\n      return\
    \ [Math.max(maxRowVal, val), Math.max(maxColVal, val)];\n    }, [Number.MIN_SAFE_INTEGER,\
    \ Number.MIN_SAFE_INTEGER]);\n    return [Math.max(maxRow, maxRowVal), Math.max(maxCol,\
    \ maxColVal)];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const\
    \ [minRowVal, minColVal] = rows.reduce(([minRowVal, minColVal], row) => {\n  \
    \  const [minRowVal, minColVal] = row.reduce(([minRowVal, minColVal], val) =>\
    \ {\n      if (val === x) {\n        return [minRowVal, minColVal];\n      }\n\
    \      return [Math.min(minRowVal, val), Math.min(minColVal, val)];\n    }, [Number.MAX_SAFE_INTEGER,\
    \ Number.MAX_SAFE_INTEGER]);\n    return [Math.min(minRow, minRowVal), Math.min(minCol,\
    \ minColVal)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const\
    \ [maxRowVal, maxColVal] = rows.reduce(([maxRowVal, maxColVal], row) => {\n  \
    \  const [maxRowVal, maxColVal] = row.reduce(([maxRowVal, maxColVal], val) =>\
    \ {\n      if (val === x) {\n        return [maxRowVal, maxColVal];\n      }\n\
    \      return [Math.max(maxRowVal, val), Math.max(maxColVal, val)", "  const rows\
    \ = lst.length;\n  const cols = lst[0].length;\n  const coords: number[][] = [];\n\
    \  for (let row = 0; row < rows; row++) {\n    const rowCoords: number[] = [];\n\
    \    for (let col = 0; col < cols; col++) {\n      rowCoords.push(row + 1);\n\
    \      rowCoords.push(col + 1);\n    }\n    coords.push(rowCoords);\n  }\n  coords.sort((a,\
    \ b) => {\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0])\
    \ {\n      return -1;\n    }\n    return 0;\n  });\n  const rowCoords = coords.map(coord\
    \ => coord.slice());\n  rowCoords.sort((a, b) => {\n    if (a[1] > b[1]) {\n \
    \     return 1;\n    }\n    if (a[1] < b[1]) {\n      return -1;\n    }\n    return\
    \ 0;\n  });\n  const rowCoordsSorted = rowCoords.map(coord => coord.slice());\n\
    \  rowCoordsSorted.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1;\n\
    \    }\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    return 0;\n  });\n\
    \  const rowCoordsSortedReversed = rowCoordsSorted.map(coord => coord.reverse());\n\
    \  const rowCoordsSortedReversedSorted = rowCoordsSortedReversed.map(coord =>\
    \ coord.slice());\n  const rowCoordsSortedReversedSortedSorted = rowCoordsSortedReversedSorted.sort((a,\
    \ b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n    if (a[1] < b[1])\
    \ {\n      return -1;\n    }\n    return 0;\n  });\n  const rowCoordsSortedReversedSortedSortedSorted\
    \ = rowCoordsSortedReversedSortedSorted.map(coord => coord.slice());\n  const\
    \ rowCoordsSortedReversedSortedSortedSortedSorted = rowCoordsSortedReversedSortedSortedSorted.sort((a,\
    \ b) => {\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0])\
    \ {\n      return -1;\n    }\n    return 0;\n  });\n  const rowCoordsSortedReversedSortedSortedSortedSortedSorted\
    \ = rowCoordsSortedReversedSortedSortedSortedSorted.map(coord => coord.reverse());\n\
    \  const rowCoordsSortedReversedSortedSortedSortedSortedSortedSorted = rowCoordsSortedReversedSortedSortedSortedSortedSorted.sort((a,\
    \ b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n    if (a[1] < b[1])\
    \ {\n      return -1;\n    }\n    return 0;\n  });\n  const rowCoordsSortedReversedSortedSortedSortedSortedSorted",
  "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] = lst[0].length;\n\
    \  if (rows === 0) {\n    return [];\n  }\n  const [rowsAsc, colsDesc] = sortRows(lst);\n\
    \  const [x, y] = findRow(rowsAsc, colsDesc, x);\n  return [\n    [x, y - 1],\n\
    \    [x + 1, y],\n    [x + 1, y + 1],\n    [x, y + 1],\n  ];\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n  const [minRow,\
    \ minCol] = rows.reduce(([minRow, minCol], row) => {\n    const [row, col] = row;\n\
    \    return [Math.min(minRow, row), Math.min(minCol, col)];\n  }, [Number.MAX_SAFE_INTEGER,\
    \ Number.MAX_SAFE_INTEGER]);\n  const [maxRow, maxCol] = rows.reduce(([maxRow,\
    \ maxCol], row) => {\n    const [row, col] = row;\n    return [Math.max(maxRow,\
    \ row), Math.max(maxCol, col)];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minRowCol, maxRowCol] = rows.reduce(([minRowCol, maxRowCol], row) =>\
    \ {\n    const [row, col] = row;\n    return [Math.min(minRowCol, row), Math.max(maxRowCol,\
    \ col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minColRowCol,\
    \ maxColRowCol] = cols.reduce(([minColRowCol, maxColRowCol], col) => {\n    const\
    \ [row, col] = col;\n    return [Math.min(minColRowCol, col), Math.max(maxColRowCol,\
    \ col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowColRowCol,\
    \ maxRowColRowCol] = rows.reduce(([minRowColRowCol, maxRowColRowCol], row) =>\
    \ {\n    const [row, col] = row;\n    return [Math.min(minRowColRowCol, row),\
    \ Math.max(maxRowColRowCol, col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minColRowColRowCol, maxColRowColRowCol] = cols.reduce(([minColRowColRowCol,\
    \ maxColRowColRowCol], col) => {\n    const [row, col] = col;\n    return [Math.min(minColRowColRowCol,\
    \ col), Math.max(maxColRowColRowCol, col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minRowColRowColRowCol, maxRowColRowColRowCol] = rows.reduce(([minRowColRowColRowCol,\
    \ maxRowColRowColRowCol], row) => {\n    const [row, col] = row;\n    return [Math.min(minRowColRowColRowCol,\
    \ row), Math.max(maxRowColRow", "  if (lst.length === 0) {\n    return [];\n \
    \ }\n  const [rows, cols] = lst;\n  const row = rows.findIndex(row => row ===\
    \ x);\n  if (row === -1) {\n    return [];\n  }\n  const [x, y] = rows.splice(row,\
    \ 1);\n  const [y1, y2] = cols.splice(cols.findIndex(col => col === y), 1);\n\
    \  return [\n    [x, y],\n    [x, y1],\n    [x, y2],\n  ];\n}\n", "  const rows\
    \ = lst.length;\n  const cols = lst[0].length;\n  const result = [];\n  for (let\
    \ i = 0; i < rows; i++) {\n    const row = lst[i];\n    const rowResult = [];\n\
    \    for (let j = 0; j < cols; j++) {\n      const col = row[j];\n      if (col\
    \ === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n\
    \  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => a[1] - b[1]);\n\
    \  return result;\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ row = [x];\n  const rows = [row];\n  const columns = [lst[0]];\n  const result\
    \ = [];\n  for (let i = 1; i < lst.length; i++) {\n    const column = lst[i];\n\
    \    for (let j = 0; j < column.length; j++) {\n      const x = column[j];\n \
    \     if (x === row[0]) {\n        result.push([x, row[0]]);\n      } else if\
    \ (x === row[0]) {\n        result.push([x, row[1]]);\n      } else if (x ===\
    \ row[0]) {\n        result.push([x, row[2]]);\n      }\n    }\n    rows.push(row);\n\
    \    columns.push(column);\n    row = [x];\n  }\n  return result;\n}\n", "  if\
    \ (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n  const\
    \ [row, col] = get_row_and_col(rows, cols);\n  if (row === -1) {\n    return [];\n\
    \  }\n  const [x, y] = get_row_and_col(row, col);\n  if (x === -1) {\n    return\
    \ [];\n  }\n  return [\n    [row, x],\n    [row, y],\n  ];\n}\n", "  const result:\
    \ number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row =\
    \ lst[i];\n    if (row.indexOf(x) !== -1) {\n      result.push([i, row.indexOf(x)]);\n\
    \    }\n  }\n  result.sort((a, b) => a[1] - b[1]);\n  result.sort((a, b) => b[0]\
    \ - a[0]);\n  return result;\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n  const [rows, columns] = lst;\n  const [row, col] = get_row_and_col(rows,\
    \ x);\n  return [\n    [row, col],\n    ...get_row(rows.slice(1), col),\n  ];\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] =\
    \ lst;\n  const [row, col] = get_row_and_col(rows, cols, x);\n  return [\n   \
    \ [row, col],\n    ...get_row(rows.slice(0, row), x),\n    ...get_row(rows.slice(row),\
    \ x),\n  ];\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const row\
    \ = [x];\n  const result = [row];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    const lst2 = lst[i];\n    for (let j = 0; j < lst2.length; j++) {\n     \
    \ if (lst2[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return\
    \ result.sort((a, b) => b[0] - a[0]).sort((a, b) => b[1] - a[1]);\n}\n", "  if\
    \ (lst.length === 0) {\n    return [];\n  }\n  const [rows, columns] = lst;\n\
    \  const rowIndex = rows.length;\n  const columnIndex = columns.length;\n  const\
    \ result = [];\n  for (let i = 0; i < rowIndex; i++) {\n    const row = rows[i];\n\
    \    const rowIndex = row.length;\n    for (let j = 0; j < columnIndex; j++) {\n\
    \      const column = columns[j];\n      if (column === x) {\n        result.push([i,\
    \ j, rowIndex, columnIndex]);\n      }\n    }\n  }\n  result.sort((a, b) => {\n\
    \    if (a[2] > b[2]) {\n      return 1;\n    }\n    if (a[2] < b[2]) {\n    \
    \  return -1;\n    }\n    return 0;\n  });\n  return result;\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n\n  const [rows, cols] = lst;\n  const [minRow,\
    \ minCol] = rows.reduce(([minRow, minCol], row) => {\n    if (row.length < minCol)\
    \ {\n      return [row, row.length];\n    }\n    if (row.length > minCol) {\n\
    \      return [minRow, row.length];\n    }\n    return [row, minCol];\n  }, [Number.MAX_SAFE_INTEGER,\
    \ Number.MAX_SAFE_INTEGER]);\n  const [maxRow, maxCol] = rows.reduce(([maxRow,\
    \ maxCol], row) => {\n    if (row.length > maxCol) {\n      return [row, row.length];\n\
    \    }\n    if (row.length < maxCol) {\n      return [maxRow, row.length];\n \
    \   }\n    return [maxRow, maxCol];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \n  if (x < minCol || x > maxCol) {\n    return [];\n  }\n\n  const rowIndex =\
    \ Math.max(0, Math.min(rows.length - 1, Math.floor((x - minCol) / cols)));\n \
    \ const colIndex = Math.max(0, Math.min(cols - 1, Math.floor((x - minCol) % cols)));\n\
    \n  return [\n    [rowIndex, colIndex],\n    [rowIndex + 1, colIndex],\n    [rowIndex\
    \ + 1, colIndex + 1],\n    [rowIndex, colIndex + 1],\n  ];\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const row = [x];\n  const col = [lst[0].length\
    \ - 1];\n  const result = [];\n  for (let i = 1; i < lst.length; i++) {\n    const\
    \ curr = lst[i];\n    for (let j = 0; j < curr[col.length - 1]; j++) {\n     \
    \ row.push(curr[j]);\n      col.push(j);\n    }\n    result.push([...row, ...col]);\n\
    \    row = [x];\n    col = [curr[col.length - 1]];\n  }\n  return result;\n}\n",
  "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n \
    \ const row = rows[rows.length - 1];\n  const col = cols[cols.length - 1];\n \
    \ if (row === x) {\n    return [col, row];\n  }\n  if (col === x) {\n    return\
    \ [row, col];\n  }\n  const [minRow, minCol] = getMin(rows, cols);\n  const [maxRow,\
    \ maxCol] = getMax(rows, cols);\n  if (row < minRow || col < minCol) {\n    return\
    \ [];\n  }\n  if (row > maxRow || col > maxCol) {\n    return [];\n  }\n  return\
    \ [\n    [minRow, minCol],\n    [minRow, col],\n    [row, minCol],\n    [row,\
    \ col],\n    [maxRow, minCol],\n    [maxRow, col],\n    [maxRow, maxCol],\n  ];\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const row = [x];\n  const\
    \ rows = [row];\n  const columns = [lst[0]];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    const column = lst[i];\n    const [row, column] = [row, column].sort((a,\
    \ b) => a - b);\n    rows.push(row);\n    columns.push(column);\n  }\n  return\
    \ [...new Array(rows.length).keys()].map(i => [\n    ...new Array(columns.length).keys()].map(j\
    \ => [i, j]),\n  ]);\n}\n", "  const rows: number[][] = [];\n  const columns:\
    \ number[] = [];\n  let row: number[] = [];\n  let column: number[] = [];\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x) !== -1) {\n  \
    \    row.push(i);\n      columns.push(i);\n    }\n  }\n  rows.push(row);\n  columns.push(column);\n\
    \  columns.sort((a, b) => b - a);\n  row.sort((a, b) => b - a);\n  for (let i\
    \ = 0; i < row.length; i++) {\n    row.push(columns[row[i]]);\n  }\n  return rows;\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const row = [x];\n  const\
    \ result = [row];\n  for (let i = 0; i < lst.length; i++) {\n    const lst2 =\
    \ lst[i];\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst2[j] ===\
    \ x) {\n        result.push([i, lst2.length - j - 1]);\n      }\n    }\n  }\n\
    \  return result.sort((a, b) => b[1] - a[1]).sort((a, b) => b[0] - a[0]);\n}\n",
  "  if (lst.length === 0) {\n    return [];\n  }\n  const row = [x];\n  const rows\
    \ = [row];\n  const columns = [lst[0]];\n  for (let i = 1; i < lst.length; i++)\
    \ {\n    const column = lst[i];\n    const columnIndex = columns.findIndex(c =>\
    \ c === column);\n    if (columnIndex === -1) {\n      columns.push(column);\n\
    \      rows.push(column);\n    } else {\n      rows[columnIndex].push(column);\n\
    \    }\n  }\n  rows.sort((a, b) => a[0] - b[0]);\n  columns.sort((a, b) => b[1]\
    \ - a[1]);\n  return rows.map(row => row.map(column => [column, columns[columns.indexOf(column)\
    \ - 1]]));\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n\n  const row\
    \ = [x];\n  const rows = [row];\n  const columns = [row];\n  const coordinates\
    \ = [columns];\n\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n\
    \    const rows = [row];\n    const columns = [row];\n    const coordinates =\
    \ [columns];\n\n    for (let j = 0; j < row.length; j++) {\n      const column\
    \ = row[j];\n      const columns = [column];\n      const coordinates = [columns];\n\
    \n      if (column === x) {\n        coordinates.push(columns);\n      }\n   \
    \ }\n\n    rows.push(rows);\n  }\n\n  coordinates.sort((a, b) => {\n    if (a[0]\
    \ === b[0]) {\n      return a[1] - b[1];\n    }\n    return a[0] - b[0];\n  });\n\
    \n  return coordinates.map(c => c[0]);\n}\n", "  if (lst.length === 0) {\n   \
    \ return [];\n  }\n\n  const row = [x];\n  const rows = [row];\n  const columns\
    \ = [lst[0]];\n\n  for (let i = 1; i < lst.length; i++) {\n    const column =\
    \ lst[i];\n    const columnIndex = columns.indexOf(column);\n    if (columnIndex\
    \ === -1) {\n      columns.push(column);\n      rows.push(column);\n    } else\
    \ {\n      rows[columnIndex].push(column);\n    }\n  }\n\n  rows.sort((a, b) =>\
    \ a[0] - b[0]);\n  columns.sort((a, b) => b[1] - a[1]);\n\n  return rows.map((row,\
    \ i) => row.map((col, j) => [i, j]));\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n  const row = [x];\n  const rows = [row];\n  const columns = [lst[0]];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    const column = lst[i];\n    const\
    \ [row, column] = [row, column].sort((a, b) => a - b);\n    rows.push(row);\n\
    \    columns.push(column);\n  }\n  return [rows, columns];\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n\n  const row = [x];\n  const rows = [row];\n\
    \  const columns = [lst[0]];\n  const columnRows = [columns];\n\n  for (let i\
    \ = 1; i < lst.length; i++) {\n    const column = lst[i];\n    const columnRow\
    \ = columns.slice();\n    columnRow.push(column);\n\n    if (columnRow.length\
    \ > row.length) {\n      rows.push(columnRow);\n    }\n\n    columns = columnRow.slice();\n\
    \  }\n\n  return rows.sort((a, b) => a[0] - b[0]).map(row => row.slice().sort((a,\
    \ b) => b[0] - a[0]));\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n\
    \  const [rows, cols] = lst;\n  const [minRow, minCol] = rows.reduce(([minRow,\
    \ minCol], row) => {\n    if (row.length < minRow) {\n      return [row, row.length];\n\
    \    }\n    if (row.length > minRow) {\n      return [row.length, row];\n    }\n\
    \    return [row.length, row.length];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const maxRow = rows.length - 1;\n  const maxCol = cols.length - 1;\n  const\
    \ [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    if (row.length\
    \ > maxRow) {\n      return [row, row.length];\n    }\n    if (row.length < maxRow)\
    \ {\n      return [row.length, row];\n    }\n    return [row.length, row.length];\n\
    \  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRow, minCol]\
    \ = rows.reduce(([minRow, minCol], row) => {\n    if (row.length < minRow) {\n\
    \      return [row, row.length];\n    }\n    if (row.length > minRow) {\n    \
    \  return [row.length, row];\n    }\n    return [row.length, row.length];\n  },\
    \ [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const [maxRow, maxCol]\
    \ = rows.reduce(([maxRow, maxCol], row) => {\n    if (row.length > maxRow) {\n\
    \      return [row, row.length];\n    }\n    if (row.length < maxRow) {\n    \
    \  return [row.length, row];\n    }\n    return [row.length, row.length];\n  },\
    \ [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRow, minCol]\
    \ = rows.reduce(([minRow, minCol], row) => {\n    if (row.length < minRow) {\n\
    \      return [row, row.length];\n    }\n    if (row.length > minRow) {\n    \
    \  return [row.length, row];\n    }\n    return [row.length, row.length];\n  },\
    \ [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const [maxRow, maxCol]\
    \ = rows.reduce(([maxRow, maxCol], row) => {\n    if (row.length > maxRow) {\n\
    \      return [row, row.length];\n    }\n    if (row.length < maxRow) {\n    \
    \  return [row.length, row];\n    }\n    return [row.length, row.length];\n  },\
    \ [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_", "  if (lst.length === 0) {\n  \
    \  return [];\n  }\n  const [rows, cols] = lst;\n  const [minRow, minCol] = rows.reduce(([minRow,\
    \ minCol], row) => {\n    const [row, col] = row;\n    return [\n      Math.min(minRow,\
    \ row),\n      Math.min(minCol, col),\n    ];\n  }, [Number.MAX_SAFE_INTEGER,\
    \ Number.MAX_SAFE_INTEGER]);\n  const [maxRow, maxCol] = rows.reduce(([maxRow,\
    \ maxCol], row) => {\n    const [row, col] = row;\n    return [\n      Math.max(maxRow,\
    \ row),\n      Math.max(maxCol, col),\n    ];\n  }, [Number.MIN_SAFE_INTEGER,\
    \ Number.MIN_SAFE_INTEGER]);\n  const [minRowIndex, minColIndex] = rows.reduce(([minRowIndex,\
    \ minColIndex], row, i) => {\n    const [row, col] = row;\n    return [\n    \
    \  Math.min(minRowIndex, i),\n      Math.min(minColIndex, col),\n    ];\n  },\
    \ [minRow, minCol]);\n  const [maxRowIndex, maxColIndex] = rows.reduce(([maxRowIndex,\
    \ maxColIndex], row, i) => {\n    const [row, col] = row;\n    return [\n    \
    \  Math.max(maxRowIndex, i),\n      Math.max(maxColIndex, col),\n    ];\n  },\
    \ [maxRow, maxCol]);\n  const [minRowIndex, minColIndex] = rows.reduce(([minRowIndex,\
    \ minColIndex], row, i) => {\n    const [row, col] = row;\n    return [\n    \
    \  Math.min(minRowIndex, i),\n      Math.min(minColIndex, col),\n    ];\n  },\
    \ [minRow, minCol]);\n  const [maxRowIndex, maxColIndex] = rows.reduce(([maxRowIndex,\
    \ maxColIndex], row, i) => {\n    const [row, col] = row;\n    return [\n    \
    \  Math.max(maxRowIndex, i),\n      Math.max(maxColIndex, col),\n    ];\n  },\
    \ [maxRow, maxCol]);\n  const [minRowIndex, minColIndex] = rows.reduce(([minRowIndex,\
    \ minColIndex], row, i) => {\n    const [row, col] = row;\n    return [\n    \
    \  Math.min(minRowIndex, i),\n      Math.min(minColIndex, col),\n    ];\n  },\
    \ [minRow, minCol]);\n  const [maxRowIndex, maxColIndex] = rows.reduce(([maxRowIndex,\
    \ maxColIndex], row, i) => {\n    const [row, col] = row;\n    return [\n    \
    \  Math.max(maxRowIndex, i),\n      Math.", "  const n = lst.length;\n  if (n\
    \ === 0) return [];\n  if (n === 1) return [lst[0]];\n  const row = [lst[0]];\n\
    \  const col = [lst[0]];\n  for (let i = 1; i < n; i++) {\n    if (lst[i][x] >\
    \ lst[i - 1][x]) {\n      row.push(lst[i]);\n      col.push(lst[i][x]);\n    }\
    \ else {\n      row.unshift(lst[i]);\n      col.unshift(lst[i][x]);\n    }\n \
    \ }\n  row.sort((a, b) => a[0] - b[0]);\n  col.sort((a, b) => b[0] - a[0]);\n\
    \  return [row, col];\n}\n", "  const rows = lst.length;\n  if (rows === 0) {\n\
    \    return [];\n  }\n  const cols = lst[0].length;\n  if (cols === 0) {\n   \
    \ return [];\n  }\n  const result = [];\n  for (let i = 0; i < rows; i++) {\n\
    \    const row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j < cols;\
    \ j++) {\n      if (row[j] === x) {\n        rowResult.push([i, j]);\n      }\n\
    \    }\n    result.push(rowResult);\n  }\n  result.sort((a, b) => {\n    return\
    \ a[0] > b[0] ? 1 : -1;\n  });\n  result.sort((a, b) => {\n    return b[1] > a[1]\
    \ ? 1 : -1;\n  });\n  return result;\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n  const rows = lst.length;\n  const cols = lst[0].length;\n  if (rows\
    \ === 0 || cols === 0) {\n    return [];\n  }\n  const rowIndex = lst.length -\
    \ 1;\n  const colIndex = lst[0].length - 1;\n  const rowCoord = lst[rowIndex][colIndex];\n\
    \  const colCoord = lst[rowIndex][colIndex - 1];\n  if (rowCoord === x) {\n  \
    \  return [\n      [rowIndex, rowCoord],\n      [rowIndex - 1, rowCoord],\n  \
    \    [rowIndex - 1, rowCoord - 1],\n      [rowIndex, rowCoord - 1],\n    ];\n\
    \  }\n  if (colCoord === x) {\n    return [\n      [rowIndex, rowCoord],\n   \
    \   [rowIndex, rowCoord + 1],\n      [rowIndex - 1, rowCoord + 1],\n      [rowIndex\
    \ - 1, rowCoord],\n    ];\n  }\n  return [];\n}\n", "  if (lst.length === 0) {\n\
    \    return [];\n  }\n  const [rows, cols] = lst[0].length;\n  if (x === 0 ||\
    \ x === cols) {\n    return [lst[0]];\n  }\n  const row = get_row(lst, [x - 1,\
    \ x - 1]);\n  const col = get_row(lst, [x - 1, x]);\n  return [...row, ...col];\n\
    }\n", "  const rows: number[][] = [];\n  const row: number[] = [];\n  let row_index\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x) !==\
    \ -1) {\n      row.push(i);\n      rows.push(row);\n      row = [];\n      row_index++;\n\
    \    }\n  }\n  return rows;\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n  const row: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    const row1 = lst[i];\n    if (row1.length === 0) {\n      continue;\n   \
    \ }\n    const row2 = row1[row1.length - 1];\n    if (row2.length === 0) {\n \
    \     continue;\n    }\n    const row3 = row2[row2.length - 1];\n    if (row3.length\
    \ === 0) {\n      continue;\n    }\n    const row4 = row3[row3.length - 1];\n\
    \    if (row4.length === 0) {\n      continue;\n    }\n    const row5 = row4[row4.length\
    \ - 1];\n    if (row5.length === 0) {\n      continue;\n    }\n    const row6\
    \ = row5[row5.length - 1];\n    if (row6.length === 0) {\n      continue;\n  \
    \  }\n    const row7 = row6[row6.length - 1];\n    if (row7.length === 0) {\n\
    \      continue;\n    }\n    const row8 = row7[row7.length - 1];\n    if (row8.length\
    \ === 0) {\n      continue;\n    }\n    const row9 = row8[row8.length - 1];\n\
    \    if (row9.length === 0) {\n      continue;\n    }\n    const row10 = row9[row9.length\
    \ - 1];\n    if (row10.length === 0) {\n      continue;\n    }\n    const row11\
    \ = row10[row10.length - 1];\n    if (row11.length === 0) {\n      continue;\n\
    \    }\n    const row12 = row11[row11.length - 1];\n    if (row12.length === 0)\
    \ {\n      continue;\n    }\n    const row13 = row12[row12.length - 1];\n    if\
    \ (row13.length === 0) {\n      continue;\n    }\n    const row14 = row13[row13.length\
    \ - 1];\n    if (row14.length === 0) {\n      continue;\n    }\n    const row15\
    \ = row14[row14.length - 1];\n    if (row15.length === 0) {\n      continue;\n\
    \    }\n    const row16 = row15[row15.length - 1];\n    if (row16.length === 0)\
    \ {\n      continue;\n    }\n    const row17 = row16[row16.length - 1];\n    if\
    \ (row17.length === 0) {\n      continue;\n    }\n    const row18 = row17[row17.length\
    \ - 1];\n    if (row18.length === 0) {\n      continue;\n    }\n    const row19\
    \ = row18[row18.length - 1];\n    if (row19.length === 0) {\n      continue;\n\
    \    }\n    const row20 = row19[row19.length - 1];\n    if (row20.length === 0)\
    \ {\n      continue;\n    }\n    const row21 = row20[row20.length - 1];\n    if\
    \ (row21.length === 0) {\n      continue;\n    }\n    const row22 = row21[row21.length\
    \ - ", "  const result: number[][] = [];\n  const rows = lst.length;\n  const\
    \ cols = lst[0].length;\n  let row = 0;\n  let col = 0;\n  while (row < rows &&\
    \ col < cols) {\n    if (lst[row][col] === x) {\n      result.push([row, col]);\n\
    \      row++;\n      col++;\n    } else if (lst[row][col] > x) {\n      row++;\n\
    \    } else {\n      col++;\n    }\n  }\n  return result.sort((a, b) => b[0] -\
    \ a[0]).sort((a, b) => b[1] - a[1]);\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n  const row = [x];\n  const columns = [lst[0].length - 1];\n  for\
    \ (let i = 1; i < lst.length; i++) {\n    for (let j = 0; j < columns.length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        row.push(j);\n        columns.unshift(j);\n\
    \        break;\n      }\n    }\n  }\n  row.sort((a, b) => a - b);\n  columns.sort((a,\
    \ b) => b - a);\n  return row.map((r) => columns.map((c) => [r, c]));\n}\n", " \
    \ if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n\
    \  const [row, col] = get_row_col(x, rows);\n  return [\n    [row, col],\n   \
    \ ...get_row(rows.slice(0, row), col),\n  ];\n}\n", "  if (lst.length === 0) {\n\
    \    return [];\n  }\n  const [rows, cols] = lst;\n  const [minRow, minCol] =\
    \ rows.reduce(([minRow, minCol], row) => {\n    const [minRow, minCol] = row.reduce(([minRow,\
    \ minCol], item) => {\n      if (item < minRow) {\n        return [item, item];\n\
    \      } else if (item > minRow) {\n        return [minRow, item];\n      }\n\
    \      return [minRow, minCol];\n    }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \    return [Math.min(minRow, x), Math.min(minCol, x)];\n  }, [Number.MAX_SAFE_INTEGER,\
    \ Number.MAX_SAFE_INTEGER]);\n  const [maxRow, maxCol] = rows.reduce(([maxRow,\
    \ maxCol], row) => {\n    const [maxRow, maxCol] = row.reduce(([maxRow, maxCol],\
    \ item) => {\n      if (item > maxRow) {\n        return [item, item];\n     \
    \ } else if (item < maxRow) {\n        return [maxRow, item];\n      }\n     \
    \ return [maxRow, maxCol];\n    }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \    return [Math.max(maxRow, x), Math.max(maxCol, x)];\n  }, [Number.MIN_SAFE_INTEGER,\
    \ Number.MIN_SAFE_INTEGER]);\n  const [minRowInd, minColInd] = rows.reduce(([minRowInd,\
    \ minColInd], row, i) => {\n    const [minRowInd, minColInd] = row.reduce(([minRowInd,\
    \ minColInd], item, j) => {\n      if (item < minRowInd) {\n        return [item,\
    \ item];\n      } else if (item > minRowInd) {\n        return [minRowInd, item];\n\
    \      }\n      return [minRowInd, minColInd];\n    }, [Number.MAX_SAFE_INTEGER,\
    \ Number.MAX_SAFE_INTEGER]);\n    return [Math.min(minRowInd, x), Math.min(minColInd,\
    \ x)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const [maxRowInd,\
    \ maxColInd] = rows.reduce(([maxRowInd, maxColInd], row, i) => {\n    const [maxRowInd,\
    \ maxColInd] = row.reduce(([maxRowInd, maxColInd], item, j) => {\n      if (item\
    \ > maxRowInd) {\n        return [item, item];\n      } else if (item < maxRowInd)\
    \ {\n        return [maxRowInd, item];\n      }\n      return [", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const row = [x];\n  const rows = [row];\n \
    \ const row_index = 1;\n  const row_indexes = [row_index];\n  const row_indexes_sorted\
    \ = [row_index];\n  const columns = [row[0]];\n  const columns_sorted = [columns[0]];\n\
    \  const column_index = 1;\n  const column_indexes = [column_index];\n  const\
    \ column_indexes_sorted = [column_index];\n  for (let i = 1; i < lst.length; i++)\
    \ {\n    const column = lst[i][0];\n    const column_sorted = [column];\n    const\
    \ column_indexes = [column_index];\n    const column_indexes_sorted = [column_index];\n\
    \    for (let j = 0; j < row.length; j++) {\n      const element = lst[i][j];\n\
    \      if (element === x) {\n        rows.push(row);\n        row_indexes.push(row_index);\n\
    \        row_indexes_sorted.push(row_index);\n        columns_sorted.push(column);\n\
    \        column_indexes.push(column_index);\n        column_indexes_sorted.push(column_index);\n\
    \        row = [element];\n        row_index++;\n        column_index++;\n   \
    \   } else if (element < x) {\n        row.push(element);\n        row_indexes.push(row_index);\n\
    \        row_indexes_sorted.push(row_index);\n        columns_sorted.push(column);\n\
    \        column_indexes.push(column_index);\n        column_indexes_sorted.push(column_index);\n\
    \        row = [element];\n        row_index++;\n      } else {\n        row.push(element);\n\
    \        row_indexes.push(row_index);\n        row_indexes_sorted.push(row_index);\n\
    \        columns_sorted.push(column);\n        column_indexes.push(column_index);\n\
    \        column_indexes_sorted.push(column_index);\n        row = [element];\n\
    \        row_index++;\n        column_index++;\n      }\n    }\n  }\n  return\
    \ [\n    ...rows,\n    ...row_indexes,\n    ...row_indexes_sorted,\n    ...columns_sorted,\n\
    \    ...column_indexes,\n    ...column_indexes_sorted,\n  ];\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n  const [minRow,\
    \ minCol] = rows.reduce(([minRow, minCol], row) => {\n    const [row, col] = row;\n\
    \    return [\n      Math.min(minRow, row),\n      Math.min(minCol, col),\n  \
    \  ];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const [maxRow,\
    \ maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const [row, col] = row;\n\
    \    return [\n      Math.max(maxRow, row),\n      Math.max(maxCol, col),\n  \
    \  ];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowIndex,\
    \ minColIndex] = rows.reduce(([minRowIndex, minColIndex], row, i) => {\n    const\
    \ [row, col] = row;\n    return [\n      Math.min(minRowIndex, i),\n      Math.min(minColIndex,\
    \ col),\n    ];\n  }, [minRow, minCol]);\n  const [maxRowIndex, maxColIndex] =\
    \ rows.reduce(([maxRowIndex, maxColIndex], row, i) => {\n    const [row, col]\
    \ = row;\n    return [\n      Math.max(maxRowIndex, i),\n      Math.max(maxColIndex,\
    \ col),\n    ];\n  }, [maxRow, maxCol]);\n  const [minRowIndex, minColIndex] =\
    \ rows.reduce(([minRowIndex, minColIndex], row, i) => {\n    const [row, col]\
    \ = row;\n    return [\n      Math.min(minRowIndex, i),\n      Math.min(minColIndex,\
    \ col),\n    ];\n  }, [minRow, minCol]);\n  const [maxRowIndex, maxColIndex] =\
    \ rows.reduce(([maxRowIndex, maxColIndex], row, i) => {\n    const [row, col]\
    \ = row;\n    return [\n      Math.max(maxRowIndex, i),\n      Math.max(maxColIndex,\
    \ col),\n    ];\n  }, [maxRow, maxCol]);\n  const [minRowIndex, minColIndex] =\
    \ rows.reduce(([minRowIndex, minColIndex], row, i) => {\n    const [row, col]\
    \ = row;\n    return [\n      Math.min(minRowIndex, i),\n      Math.min(minColIndex,\
    \ col),\n    ];\n  }, [minRow, minCol]);\n  const [maxRowIndex, maxColIndex] =\
    \ rows.reduce(([maxRowIndex, maxColIndex], row, i) => {\n    const [row, col]\
    \ = row;\n    return [\n      Math.max(maxRowIndex, i),\n      Math.", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n  const rowIndex\
    \ = rows.findIndex((row) => row === x);\n  if (rowIndex === -1) {\n    return\
    \ [];\n  }\n  const colIndex = cols.findIndex((col) => col === rows[rowIndex]);\n\
    \  if (colIndex === -1) {\n    return [];\n  }\n  const [row, col] = [rowIndex,\
    \ colIndex];\n  const sortedRows = rows.sort((a, b) => a - b);\n  const sortedCols\
    \ = cols.sort((a, b) => b - a);\n  const sortedCoords = [\n    [sortedRows[rowIndex],\
    \ sortedCols[colIndex]],\n    [sortedRows[rowIndex + 1], sortedCols[colIndex]],\n\
    \    [sortedRows[rowIndex + 1], sortedCols[colIndex + 1]],\n    [sortedRows[rowIndex],\
    \ sortedCols[colIndex + 1]],\n  ];\n  return sortedCoords;\n}\n", "  const result:\
    \ number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row =\
    \ lst[i];\n    if (row.indexOf(x) !== -1) {\n      result.push([i, row.indexOf(x)]);\n\
    \    }\n  }\n  result.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if\
    \ (a[0] > b[0]) return 1;\n    return 0;\n  });\n  result.sort((a, b) => {\n \
    \   if (a[1] < b[1]) return -1;\n    if (a[1] > b[1]) return 1;\n    return 0;\n\
    \  });\n  return result;\n}\n", "  if (lst.length === 0) {\n    return [];\n \
    \ }\n  const [rows, cols] = lst;\n  const rowIdx = rows.findIndex((row) => row\
    \ === x);\n  if (rowIdx === -1) {\n    return [];\n  }\n  const [row, col] = rows[rowIdx];\n\
    \  const colIdx = cols.findIndex((col) => col === col - 1);\n  if (colIdx ===\
    \ -1) {\n    return [];\n  }\n  return [[rowIdx, colIdx]];\n}\n", "  const row:\
    \ number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row =\
    \ lst[i];\n    const rowLen = row.length;\n    for (let j = 0; j < rowLen; j++)\
    \ {\n      if (row[j] === x) {\n        row.push([i, j]);\n        break;\n  \
    \    }\n    }\n  }\n  row.sort((a, b) => a[0] - b[0]);\n  row.sort((a, b) => a[1]\
    \ - b[1]);\n  return row;\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n  const [rows, cols] = lst;\n  const [row, col] = get_row_and_col(rows,\
    \ cols, x);\n  return [\n    [row, col],\n    ...get_row(rows.slice(0, row), x\
    \ - row),\n    ...get_row(rows.slice(row), col - cols),\n  ];\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const rows = lst.length;\n  const cols = lst[0].length;\n\
    \  const result = [];\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n\
    \    const rowResult = [];\n    for (let j = 0; j < cols; j++) {\n      if (row[j]\
    \ === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n\
    \  }\n  result.sort((a, b) => {\n    return a[0] - b[0];\n  });\n  result.sort((a,\
    \ b) => {\n    return b[1] - a[1];\n  });\n  return result;\n}\n", "  const rows\
    \ = lst.map(row => row.filter(col => col === x));\n  const sortedRows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n  const sortedRowsDesc = sortedRows.reverse();\n  const\
    \ sortedCols = sortedRowsDesc.map(row => row.slice().reverse());\n  return sortedCols;\n\
    }\n", "  const n = lst.length;\n  if (n === 0) return [];\n  if (n === 1) return\
    \ [lst[0]];\n  const m = lst[0].length;\n  const row = new Array(n);\n  for (let\
    \ i = 0; i < n; i++) {\n    row[i] = new Array(m);\n    for (let j = 0; j < m;\
    \ j++) {\n      row[i][j] = lst[i][j];\n    }\n  }\n  row.sort((a, b) => a[0]\
    \ - b[0]);\n  row.sort((a, b) => b[1] - a[1]);\n  const result = [];\n  for (let\
    \ i = 0; i < n; i++) {\n    const rowi = row[i];\n    for (let j = 0; j < m; j++)\
    \ {\n      const coli = rowi[j];\n      if (coli === x) {\n        result.push([i,\
    \ j]);\n      }\n    }\n  }\n  return result;\n}\n", "  if (lst.length === 0)\
    \ {\n    return [];\n  }\n  const [rows, columns] = lst;\n  const [minRow, minColumn]\
    \ = rows.reduce(([minRow, minColumn], row) => {\n    const [minRowValue, minColumnValue]\
    \ = row.reduce(([minRowValue, minColumnValue], item) => {\n      if (item ===\
    \ x) {\n        return [minRowValue + 1, minColumnValue];\n      }\n      if (item\
    \ < x) {\n        return [minRowValue, minColumnValue + 1];\n      }\n      return\
    \ [minRowValue, minColumnValue];\n    }, [Number.MAX_VALUE, Number.MAX_VALUE]);\n\
    \    return [Math.min(minRow, minRowValue), Math.min(minColumn, minColumnValue)];\n\
    \  }, [Number.MAX_VALUE, Number.MAX_VALUE]);\n  const [maxRow, maxColumn] = rows.reduce(([maxRow,\
    \ maxColumn], row) => {\n    const [maxRowValue, maxColumnValue] = row.reduce(([maxRowValue,\
    \ maxColumnValue], item) => {\n      if (item === x) {\n        return [maxRowValue\
    \ + 1, maxColumnValue];\n      }\n      if (item > x) {\n        return [maxRowValue,\
    \ maxColumnValue + 1];\n      }\n      return [maxRowValue, maxColumnValue];\n\
    \    }, [Number.MIN_VALUE, Number.MIN_VALUE]);\n    return [Math.max(maxRow, maxRowValue),\
    \ Math.max(maxColumn, maxColumnValue)];\n  }, [Number.MIN_VALUE, Number.MIN_VALUE]);\n\
    \  const [minRowIndex, minColumnIndex] = rows.reduce(([minRowIndex, minColumnIndex],\
    \ row, index) => {\n    const [minRowValue, minColumnValue] = row.reduce(([minRowValue,\
    \ minColumnValue], item, index) => {\n      if (item === x) {\n        return\
    \ [minRowValue + 1, minColumnValue];\n      }\n      if (item < x) {\n       \
    \ return [minRowValue, minColumnValue + 1];\n      }\n      return [minRowValue,\
    \ minColumnValue];\n    }, [Number.MAX_VALUE, Number.MAX_VALUE]);\n    return\
    \ [Math.min(minRowIndex, minRowValue), Math.min(minColumnIndex, minColumnValue)];\n\
    \  }, [Number.MAX_VALUE, Number.MAX_VALUE]);\n  const [maxRowIndex, maxColumnIndex]\
    \ = rows.reduce(([maxRowIndex, maxColumnIndex], row, index) => {\n    const [maxRowValue,\
    \ maxColumnValue] = row.reduce(([maxRowValue, maxColumnValue], item, index) =>\
    \ {\n      if (item === x) {\n        return [maxRowValue + 1, maxColumnValue];\n\
    \      }\n      if (item > x) {\n        return [maxRowValue, maxColumnValue +\
    \ 1];\n      }\n      return [maxRowValue, maxColumnValue];\n    }, [Number.MIN_VALUE,\
    \ Number.MIN_VALUE", "  const result: number[][] = [];\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    const row = lst[i];\n    const rowLength = row.length;\n\
    \    if (rowLength > x) {\n      continue;\n    }\n    const rowStart = i;\n \
    \   for (let j = rowStart; j < rowStart + rowLength; j++) {\n      if (row[j]\
    \ === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a,\
    \ b) => {\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0])\
    \ {\n      return -1;\n    }\n    return 0;\n  });\n  result.sort((a, b) => {\n\
    \    if (a[1] > b[1]) {\n      return 1;\n    }\n    if (a[1] < b[1]) {\n    \
    \  return -1;\n    }\n    return 0;\n  });\n  return result;\n}\n", "  const rows\
    \ = lst.map(row => row.map(i => i + x));\n  const sortedRows = sortRows(rows);\n\
    \  const sortedRowsReversed = sortRowsReversed(sortedRows);\n  return sortedRowsReversed.map(row\
    \ => row.map(i => i - x));\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n  const [rows, cols] = lst;\n  const row = rows.findIndex(row => row ===\
    \ x);\n  if (row === -1) {\n    return [];\n  }\n  const [x, y] = rows[row];\n\
    \  const [y1, y2] = cols.reverse().findIndex(col => col === y);\n  return [\n\
    \    [x, y],\n    [x + 1, y1],\n    [x + 1, y1 + 1],\n    [x + 1, y1 + 2],\n \
    \   [x + 2, y1 + 2],\n    [x + 2, y1],\n  ];\n}\n", "  if (lst.length === 0) {\n\
    \    return [];\n  }\n  const [rows, cols] = lst;\n  const row = rows[rows.length\
    \ - 1];\n  const col = cols[cols.length - 1];\n  if (row === x) {\n    return\
    \ [col, row];\n  }\n  if (col === x) {\n    return [row, col];\n  }\n  const [minRow,\
    \ minCol] = get_row(rows.slice(0, rows.length - 1), x);\n  const [maxRow, maxCol]\
    \ = get_row(rows.slice(rows.length - 1), x);\n  const [minColMaxRow, maxColMinRow]\
    \ = [minCol, maxRow];\n  if (minCol < minRow) {\n    return [minColMaxRow, minRow];\n\
    \  }\n  if (minCol > minRow) {\n    return [minCol, maxRow];\n  }\n  if (maxCol\
    \ < maxRow) {\n    return [maxColMinRow, maxRow];\n  }\n  if (maxCol > maxRow)\
    \ {\n    return [maxCol, minRow];\n  }\n  return [];\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n  const rowIdx =\
    \ rows.findIndex((row) => row === x);\n  if (rowIdx === -1) {\n    return [];\n\
    \  }\n  const colIdx = cols.findIndex((col) => col === rows[rowIdx]);\n  if (colIdx\
    \ === -1) {\n    return [];\n  }\n  const row = rows[rowIdx];\n  const col = cols[colIdx];\n\
    \  const result = [[0, col]];\n  for (let i = col + 1; i < cols.length; ++i) {\n\
    \    result.push([rows[rowIdx], i]);\n  }\n  return result;\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n  const [minRow,\
    \ minCol] = rows.reduce(([minRow, minCol], row) => {\n    if (row.length < minRow)\
    \ {\n      return [row, row.length];\n    }\n    if (row.length > minRow) {\n\
    \      return [row.length, row];\n    }\n    return minRow;\n  }, [Number.MAX_SAFE_INTEGER,\
    \ Number.MAX_SAFE_INTEGER]);\n  const maxRow = Math.max(...rows.map(row => row.length));\n\
    \  const maxCol = Math.max(...cols.map(col => col.length));\n  const [maxRow,\
    \ maxCol] = [maxRow, maxCol];\n  const [row, col] = [minRow, minCol];\n  const\
    \ result = [];\n  while (row < maxRow) {\n    while (col < maxCol) {\n      if\
    \ (rows[row][col] === x) {\n        result.push([row, col]);\n      }\n      col++;\n\
    \    }\n    col = 0;\n    row++;\n  }\n  result.sort(([a, b], [c, d]) => a - b);\n\
    \  result.sort(([a, b], [c, d]) => d - c);\n  return result;\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n  const row = rows.findIndex(row\
    \ => row === x);\n  if (row === -1) {\n    return [];\n  }\n  const [row_max,\
    \ col_max] = rows.map(row => row.length);\n  const col_index = cols.findIndex(col\
    \ => col === x);\n  if (col_index === -1) {\n    return [];\n  }\n  const [row_max,\
    \ col_max] = cols.map(col => col.length);\n  const row = rows[row];\n  const col\
    \ = cols[col_index];\n  const result: number[][] = [];\n  for (let i = 0; i <\
    \ row_max; i++) {\n    for (let j = 0; j < col_max; j++) {\n      result.push([i,\
    \ j]);\n    }\n  }\n  return result;\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n  const [rows, cols] = lst;\n  const rowIndex = rows.indexOf(x);\n\
    \  const colIndex = cols.indexOf(x);\n  if (rowIndex === -1) {\n    return [];\n\
    \  }\n  const row = rows.slice(0, rowIndex);\n  const col = cols.slice(colIndex,\
    \ cols.length);\n  return [row, col];\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n  const [rows, cols] = lst;\n  const [row, col] = get_row_and_col(rows,\
    \ cols, x);\n  return [\n    [row, col],\n    ...get_row(rows.slice(row, row +\
    \ 1), col),\n  ];\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [rows, columns] = lst;\n  const [row, col] = get_row_and_col(rows, x);\n  const\
    \ [row_sorted, col_sorted] = sort_row_and_col(row, col);\n  return row_sorted.map(([x,\
    \ y]) => [x, y]);\n}\n", "  const result: number[][] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x)) {\n\
    \      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) =>\
    \ a[1] - b[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n}\n",
  "  if (lst.length === 0) {\n    return [];\n  }\n  const row = [x];\n  const rows\
    \ = [row];\n  const row_index = 0;\n  const row_indexes = [row_index];\n  const\
    \ row_indexes_sorted = [row_index];\n  const column_index = 0;\n  const column_indexes\
    \ = [column_index];\n  const column_indexes_sorted = [column_index];\n  while\
    \ (row_index < lst.length) {\n    const next_row = lst[row_index];\n    const\
    \ next_row_index = 0;\n    const next_row_indexes = [next_row_index];\n    const\
    \ next_column_index = 0;\n    const next_column_indexes = [next_column_index];\n\
    \    for (let i = 0; i < next_row.length; i++) {\n      if (next_row[i] === x)\
    \ {\n        rows.push(next_row.slice());\n        row_indexes.push(row_index);\n\
    \        row_indexes_sorted.push(row_index);\n        column_indexes_sorted.push(column_index);\n\
    \        column_indexes.push(column_index);\n        row_index++;\n        column_index++;\n\
    \      }\n    }\n  }\n  row_indexes.sort((a, b) => a - b);\n  column_indexes.sort((a,\
    \ b) => b - a);\n  return rows.map(row => row.map(v => [v[0], v[1]]));\n}\n",
  "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n \
    \ const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n    const\
    \ [row, col] = row;\n    return [Math.min(minRow, row), Math.min(minCol, col)];\n\
    \  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const [maxRow, maxCol]\
    \ = rows.reduce(([maxRow, maxCol], row) => {\n    const [row, col] = row;\n  \
    \  return [Math.max(maxRow, row), Math.max(maxCol, col)];\n  }, [Number.MIN_SAFE_INTEGER,\
    \ Number.MIN_SAFE_INTEGER]);\n  const [minRowIndex, minColIndex] = rows.reduce(([minRowIndex,\
    \ minColIndex], row, i) => {\n    const [row, col] = row;\n    return [Math.min(minRowIndex,\
    \ i), Math.min(minColIndex, col)];\n  }, [minRow, minCol]);\n  const [maxRowIndex,\
    \ maxColIndex] = rows.reduce(([maxRowIndex, maxColIndex], row, i) => {\n    const\
    \ [row, col] = row;\n    return [Math.max(maxRowIndex, i), Math.max(maxColIndex,\
    \ col)];\n  }, [maxRow, maxCol]);\n  const [minRowIndex, minColIndex] = rows.reduce(([minRowIndex,\
    \ minColIndex], row, i) => {\n    const [row, col] = row;\n    return [Math.min(minRowIndex,\
    \ i), Math.min(minColIndex, col)];\n  }, [minRow, minCol]);\n  const [maxRowIndex,\
    \ maxColIndex] = rows.reduce(([maxRowIndex, maxColIndex], row, i) => {\n    const\
    \ [row, col] = row;\n    return [Math.max(maxRowIndex, i), Math.max(maxColIndex,\
    \ col)];\n  }, [maxRow, maxCol]);\n  const [minRowIndex, minColIndex] = rows.reduce(([minRowIndex,\
    \ minColIndex], row, i) => {\n    const [row, col] = row;\n    return [Math.min(minRowIndex,\
    \ i), Math.min(minColIndex, col)];\n  }, [minRow, minCol]);\n  const [maxRowIndex,\
    \ maxColIndex] = rows.reduce(([maxRowIndex, maxColIndex], row, i) => {\n    const\
    \ [row, col] = row;\n    return [Math.max(maxRowIndex, i), Math.max(maxColIndex,\
    \ col)];\n  }, [maxRow, maxCol]);\n  const [minRowIndex, minColIndex] = rows.reduce(([minRowIndex,\
    \ minColIndex], row, i) => {\n    const [row, col] = row;\n    return [Math.min(minRowIndex,\
    \ i), Math.min(minColIndex, col)", "  const rows = lst.length;\n  const cols =\
    \ lst[0].length;\n  const result = [];\n  for (let i = 0; i < rows; i++) {\n \
    \   const row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j < cols;\
    \ j++) {\n      if (row[j] === x) {\n        rowResult.push([i, j]);\n      }\n\
    \    }\n    result.push(rowResult);\n  }\n  result.sort((a, b) => {\n    if (a[0]\
    \ < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0]) {\n      return 1;\n\
    \    }\n    return 0;\n  });\n  result.sort((a, b) => {\n    if (a[1] < b[1])\
    \ {\n      return -1;\n    }\n    if (a[1] > b[1]) {\n      return 1;\n    }\n\
    \    return 0;\n  });\n  return result;\n}\n", "  if (lst.length === 0) {\n  \
    \  return [];\n  }\n  const row = [x];\n  const result = [row];\n  for (let i\
    \ = 1; i < lst.length; i++) {\n    const lst2 = lst[i];\n    const row2 = row.slice();\n\
    \    for (let j = 0; j < lst2.length; j++) {\n      row2.push(lst2[j]);\n    }\n\
    \    result.push(row2);\n  }\n  result.sort((a, b) => {\n    if (a[0] > b[0])\
    \ {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n      return -1;\n    }\n\
    \    return 0;\n  });\n  result.sort((a, b) => {\n    if (a[1] > b[1]) {\n   \
    \   return 1;\n    }\n    if (a[1] < b[1]) {\n      return -1;\n    }\n    return\
    \ 0;\n  });\n  return result;\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n  const [rows, cols] = lst;\n  const [minRow, minCol] = rows.reduce(([minRow,\
    \ minCol], row) => {\n    const [row, col] = row;\n    return [Math.min(minRow,\
    \ row), Math.min(minCol, col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const\
    \ [row, col] = row;\n    return [Math.max(maxRow, row), Math.max(maxCol, col)];\n\
    \  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowIndex,\
    \ minColIndex] = rows.reduce(([minRowIndex, minColIndex], row, index) => {\n \
    \   const [row, col] = row;\n    return [Math.min(minRowIndex, index), Math.min(minColIndex,\
    \ col)];\n  }, [minRow, minCol]);\n  const [maxRowIndex, maxColIndex] = rows.reduce(([maxRowIndex,\
    \ maxColIndex], row, index) => {\n    const [row, col] = row;\n    return [Math.max(maxRowIndex,\
    \ index), Math.max(maxColIndex, col)];\n  }, [maxRow, maxCol]);\n  const [minRowIndex,\
    \ minColIndex] = rows.reduce(([minRowIndex, minColIndex], row, index) => {\n \
    \   const [row, col] = row;\n    return [Math.min(minRowIndex, index), Math.min(minColIndex,\
    \ col)];\n  }, [minRow, minCol]);\n  const [maxRowIndex, maxColIndex] = rows.reduce(([maxRowIndex,\
    \ maxColIndex], row, index) => {\n    const [row, col] = row;\n    return [Math.max(maxRowIndex,\
    \ index), Math.max(maxColIndex, col)];\n  }, [maxRow, maxCol]);\n  const [minRowIndex,\
    \ minColIndex] = rows.reduce(([minRowIndex, minColIndex], row, index) => {\n \
    \   const [row, col] = row;\n    return [Math.min(minRowIndex, index), Math.min(minColIndex,\
    \ col)];\n  }, [minRow, minCol]);\n  const [maxRowIndex, maxColIndex] = rows.reduce(([maxRowIndex,\
    \ maxColIndex], row, index) => {\n    const [row, col] = row;\n    return [Math.max(maxRowIndex,\
    \ index), Math.max(maxColIndex, col)];\n  }, [maxRow, maxCol]);\n  const [minRowIndex,\
    \ minColIndex] = rows.reduce(([minRowIndex, minColIndex], row, index) => {\n \
    \   const [row, col] = row;\n    return [Math.min(minRowIndex, ", "  const result:\
    \ number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row =\
    \ lst[i];\n    if (row.indexOf(x) !== -1) {\n      result.push([i, row.indexOf(x)]);\n\
    \    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  result.sort((a, b) => a[0]\
    \ - b[0]);\n  return result;\n}\n", "  const rows = lst.map(row => row.filter(e\
    \ => e === x));\n  const rows = rows.map(row => row.sort((a, b) => b - a));\n\
    \  const rows = rows.map(row => row.sort((a, b) => b - a));\n  return rows.map(row\
    \ => row.map(e => e + 1));\n}\n", "  const rows: number[][] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.indexOf(x)\
    \ !== -1) {\n      rows.push([i, row.indexOf(x)]);\n    }\n  }\n  rows.sort((a,\
    \ b) => {\n    if (a[1] < b[1]) return -1;\n    if (a[1] > b[1]) return 1;\n \
    \   return 0;\n  });\n  const result: number[][] = [];\n  for (let i = 0; i <\
    \ rows.length; i++) {\n    const row = rows[i];\n    result.push([i, row[1]]);\n\
    \  }\n  return result;\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n\
    \  const row = [x];\n  const result = [row];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const lstRow = lst[i];\n    for (let j = 0; j < lstRow.length; j++)\
    \ {\n      if (lstRow[j] === x) {\n        result.push([i, j]);\n      }\n   \
    \ }\n  }\n  result.sort((a, b) => b[0] - a[0]);\n  result.sort((a, b) => b[1]\
    \ - a[1]);\n  return result;\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n  const [rows, columns] = lst;\n  const [minRow, minColumn] = rows.reduce(([minRow,\
    \ minColumn], row) => {\n    const [minRowValue, minColumnValue] = row.reduce(([minRowValue,\
    \ minColumnValue], item) => {\n      if (item < minRowValue) {\n        return\
    \ [item, item];\n      } else if (item === minRowValue) {\n        return [minColumnValue,\
    \ item];\n      }\n      return [minRowValue, item];\n    }, [Number.MAX_SAFE_INTEGER,\
    \ Number.MAX_SAFE_INTEGER]);\n    return [Math.min(minRow, minRowValue), Math.min(minColumn,\
    \ minColumnValue)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRow, maxColumn] = rows.reduce(([maxRow, maxColumn], row) => {\n \
    \   const [maxRowValue, maxColumnValue] = row.reduce(([maxRowValue, maxColumnValue],\
    \ item) => {\n      if (item > maxRowValue) {\n        return [item, item];\n\
    \      } else if (item === maxRowValue) {\n        return [maxColumnValue, item];\n\
    \      }\n      return [maxRowValue, item];\n    }, [Number.MIN_SAFE_INTEGER,\
    \ Number.MIN_SAFE_INTEGER]);\n    return [Math.max(maxRow, maxRowValue), Math.max(maxColumn,\
    \ maxColumnValue)];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [x, y] = [x * columns, y = (x + minRow) * columns];\n  const [minRow,\
    \ minColumn] = [minRow, minColumn];\n  const [maxRow, maxColumn] = [maxRow, maxColumn];\n\
    \  const [minX, minY] = [minRow, minColumn];\n  const [maxX, maxY] = [maxRow,\
    \ maxColumn];\n  const [minRowX, minColumnY] = [minRow, minColumn];\n  const [maxRowX,\
    \ maxColumnY] = [maxRow, maxColumn];\n  const [minRowY, minColumnX] = [minRow,\
    \ minColumn];\n  const [maxRowY, maxColumnX] = [maxRow, maxColumn];\n  const [minColumnX,\
    \ minRowY] = [minColumn, minRow];\n  const [maxColumnX, maxRowY] = [maxColumn,\
    \ maxRow];\n  const [minColumnY, minRowX] = [minColumn, minRow];\n  const [maxColumnY,\
    \ maxRowX] = [maxColumn, maxRow];\n  const [minX, minY] = [minRow, minColumn];\n\
    \  const [maxX, maxY] = [maxRow, max", "  const rows = lst.length;\n  if (rows\
    \ === 0) {\n    return [];\n  }\n  const cols = lst[0].length;\n  if (cols ===\
    \ 0) {\n    return [];\n  }\n  const coords: number[][] = [];\n  for (let i =\
    \ 0; i < rows; i++) {\n    coords[i] = [];\n    for (let j = 0; j < cols; j++)\
    \ {\n      coords[i][j] = lst[i][j];\n    }\n  }\n  coords.sort((a, b) => {\n\
    \    if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n    \
    \  return -1;\n    }\n    return 0;\n  });\n  const row = coords.findIndex((coord)\
    \ => coord[0] === x);\n  if (row === -1) {\n    return [];\n  }\n  const sortedRow\
    \ = coords.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n\
    \    if (a[1] < b[1]) {\n      return -1;\n    }\n    return 0;\n  });\n  return\
    \ sortedRow.map((coord) => [coord[0], coord[1]]);\n}\n", "  if (lst.length ===\
    \ 0) {\n    return [];\n  }\n  const row = [x];\n  const rows = [row];\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    const lstRow = lst[i];\n    for (let\
    \ j = 0; j < lstRow.length; j++) {\n      if (lstRow[j] === x) {\n        row.push(j);\n\
    \        rows.push(row);\n      }\n    }\n  }\n  rows.sort((a, b) => {\n    if\
    \ (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n      return\
    \ -1;\n    }\n    return 0;\n  });\n  rows.sort((a, b) => {\n    if (a[1] > b[1])\
    \ {\n      return 1;\n    }\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\
    \    return 0;\n  });\n  return rows;\n}\n", "  const result: number[][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b)\
    \ => a[1] - b[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n\
    }\n", "  const rows = lst.length;\n  const cols = lst[0].length;\n  const result\
    \ = [];\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n    const\
    \ rowResult = [];\n    for (let j = 0; j < cols; j++) {\n      if (row[j] ===\
    \ x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n\
    \  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1;\n   \
    \ }\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    return 0;\n  });\n \
    \ for (let i = 0; i < rows - 1; i++) {\n    result.sort((a, b) => {\n      if\
    \ (a[1] > b[1]) {\n        return 1;\n      }\n      if (a[1] < b[1]) {\n    \
    \    return -1;\n      }\n      return 0;\n    });\n  }\n  return result;\n}\n",
  "  const result: number[][] = [];\n  const rows = lst.length;\n  const cols = lst[0].length;\n\
    \  const rowMap = new Map<number, number>();\n  const colMap = new Map<number,\
    \ number>();\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n  \
    \  const rowKey = rowMap.get(row) || row;\n    rowMap.set(row, rowKey);\n    for\
    \ (let j = 0; j < cols; j++) {\n      const col = lst[i][j];\n      const colKey\
    \ = colMap.get(col) || col;\n      colMap.set(col, colKey);\n      if (col ===\
    \ x) {\n        result.push([rowKey, colKey]);\n      }\n    }\n  }\n  return\
    \ result.sort((a, b) => b[1] - a[1]).sort((a, b) => b[0] - a[0]);\n}\n", "  if\
    \ (lst.length === 0) {\n    return [];\n  }\n  const row = [x];\n  const rows\
    \ = [row];\n  const row_index = 1;\n  const columns = [row];\n  const column_index\
    \ = 1;\n  while (row_index < lst.length) {\n    const column = lst[row_index][column_index];\n\
    \    if (column === x) {\n      return rows;\n    }\n    rows.push(row);\n   \
    \ row = [column];\n    row_index++;\n    columns.push(row);\n    column_index++;\n\
    \  }\n  return [];\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [rows, cols] = lst;\n  const [row, col] = get_row_and_col(rows, cols);\n  const\
    \ [x, y] = get_row_and_col(row, col);\n  if (x === x) {\n    return [x, y];\n\
    \  }\n  const [y1, y2] = get_row(rows.slice(0, row), x);\n  const [x1, x2] = get_row(rows.slice(row),\
    \ x);\n  return [\n    [Math.min(y1, y2), Math.min(x1, x2)],\n    [Math.max(y1,\
    \ y2), Math.max(x1, x2)],\n  ];\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n\n  const [rows, cols] = lst;\n  const rowIdx = rows.findIndex((row)\
    \ => row === x);\n  const colIdx = cols.findIndex((col) => col === x);\n\n  if\
    \ (rowIdx === -1) {\n    return [];\n  }\n\n  const row = rows[rowIdx];\n  const\
    \ col = cols[colIdx];\n\n  const sortedRows = sortRows(rows);\n  const sortedCols\
    \ = sortCols(cols);\n\n  return sortedRows.map((rowIdx) => [sortedRows[rowIdx],\
    \ sortedCols[colIdx]]);\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n\
    \n  const row = [x];\n  const rows = [row];\n  const columns = [row];\n\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    const column = lst[i];\n    for (let\
    \ j = 0; j < column.length; j++) {\n      const value = column[j];\n      if (value\
    \ === x) {\n        rows.push([i, j]);\n        columns.push([i, column.length\
    \ - j - 1]);\n      }\n    }\n  }\n\n  rows.sort((a, b) => a[0] - b[0]);\n  columns.sort((a,\
    \ b) => b[1] - a[1]);\n\n  return rows.map(row => columns.map(col => row[col]));\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] =\
    \ lst;\n  const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n\
    \    const [row, col] = row;\n    return [Math.min(row, minRow), Math.min(col,\
    \ minCol)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const\
    \ [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const [row,\
    \ col] = row;\n    return [Math.max(row, maxRow), Math.max(col, maxCol)];\n  },\
    \ [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowInd, minColInd]\
    \ = rows.reduce(([minRowInd, minColInd], row, i) => {\n    const [row, col] =\
    \ row;\n    return [Math.min(row, minRow), Math.min(col, minCol)];\n  }, [0, 0])\n\
    \  const [maxRowInd, maxColInd] = rows.reduce(([maxRowInd, maxColInd], row, i)\
    \ => {\n    const [row, col] = row;\n    return [Math.max(row, maxRow), Math.max(col,\
    \ maxCol)];\n  }, [rows.length - 1, cols.length - 1]);\n  const [minRowIndInd,\
    \ minColIndInd] = rows.reduce(([minRowIndInd, minColIndInd], row, i) => {\n  \
    \  const [row, col] = row;\n    return [Math.min(row, minRowInd), Math.min(col,\
    \ minColInd)];\n  }, [0, 0])\n  const [maxRowIndInd, maxColIndInd] = rows.reduce(([maxRowIndInd,\
    \ maxColIndInd], row, i) => {\n    const [row, col] = row;\n    return [Math.max(row,\
    \ maxRowInd), Math.max(col, maxColInd)];\n  }, [rows.length - 1, cols.length -\
    \ 1]);\n  const [minRowIndIndInd, minColIndIndInd] = rows.reduce(([minRowIndIndInd,\
    \ minColIndIndInd], row, i) => {\n    const [row, col] = row;\n    return [Math.min(row,\
    \ minRowIndInd), Math.min(col, minColIndInd)];\n  }, [0, 0])\n  const [maxRowIndIndInd,\
    \ maxColIndIndInd] = rows.reduce(([maxRowIndIndInd, maxColIndIndInd], row, i)\
    \ => {\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const rows = lst.length;\n\
    \  const cols = lst[0].length;\n  if (rows === 0 || cols === 0) {\n    return\
    \ [];\n  }\n  const result = [];\n  let row = 0;\n  let col = 0;\n  while (row\
    \ < rows && col < cols) {\n    if (lst[row][col] === x) {\n      result.push([row,\
    \ col]);\n      row++;\n      col++;\n    } else if (lst[row][col] > x) {\n  \
    \    row++;\n    } else {\n      col++;\n    }\n  }\n  return result.sort((a,\
    \ b) => b[0] - a[0]).sort((a, b) => b[1] - a[1]);\n}\n", "  if (lst.length ===\
    \ 0) {\n    return [];\n  }\n  const rows = lst.length;\n  const cols = lst[0].length;\n\
    \  const result = [];\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n\
    \    const rowResult = [];\n    for (let j = 0; j < cols; j++) {\n      if (row[j]\
    \ === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n\
    \  }\n  result.sort((a, b) => {\n    const aRow = a[0] as number;\n    const bRow\
    \ = b[0] as number;\n    if (aRow === bRow) {\n      return a[1] - b[1];\n   \
    \ }\n    return aRow - bRow;\n  });\n  result.sort((a, b) => {\n    const aCol\
    \ = a[1] as number;\n    const bCol = b[1] as number;\n    if (aCol === bCol)\
    \ {\n      return a[0] - b[0];\n    }\n    return aCol - bCol;\n  });\n  return\
    \ result;\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n\n  const rows\
    \ = lst.length;\n  const cols = lst[0].length;\n\n  if (rows === 0 || cols ===\
    \ 0) {\n    return [];\n  }\n\n  const row = 0;\n  const col = 0;\n  const result\
    \ = [];\n\n  while (row < rows && col < cols) {\n    if (lst[row][col] === x)\
    \ {\n      result.push([row, col]);\n      row++;\n      col++;\n    } else if\
    \ (lst[row][col] > x) {\n      row++;\n    } else {\n      col++;\n    }\n  }\n\
    \n  return result.sort((a, b) => b[0] - a[0]).reverse();\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const row = [x];\n  const rows = [row];\n \
    \ for (let i = 0; i < lst.length; i++) {\n    const lstRow = lst[i];\n    const\
    \ lstRowLen = lstRow.length;\n    for (let j = 0; j < lstRowLen; j++) {\n    \
    \  if (lstRow[j] === x) {\n        row.push(j);\n        rows.push(row);\n   \
    \     break;\n      }\n    }\n  }\n  return rows.sort((a, b) => a[0] - b[0]).sort((a,\
    \ b) => b[1] - a[1]);\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n\
    \  const [rows, cols] = lst;\n  const [minRow, maxRow] = rows.reduce(([minRow,\
    \ maxRow], row) => {\n    return [Math.min(minRow, row), Math.max(maxRow, row)];\n\
    \  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minCol, maxCol]\
    \ = cols.reduce(([minCol, maxCol], col) => {\n    return [Math.min(minCol, col),\
    \ Math.max(maxCol, col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow,\
    \ maxCol];\n  const [minRow, maxRow] = [minRow, maxRow];\n  const [minCol, maxCol]\
    \ = [minCol, maxCol];\n  const [minRow, maxRow] = [minRow, maxRow];\n  const [minCol,\
    \ maxCol] = [minCol, maxCol];\n  const [minRow, maxRow] = [minRow, maxRow];\n\
    \  const [minCol, maxCol] = [minCol, maxCol];\n  const [minRow, maxRow] = [minRow,\
    \ maxRow];\n  const [minCol, maxCol] = [minCol, maxCol];\n  const [minRow, maxRow]\
    \ = [minRow, maxRow];\n  const [minCol, maxCol] = [minCol, maxCol];\n  const [minRow,\
    \ maxRow] = [minRow, maxRow];\n  const [minCol, maxCol] = [minCol, maxCol];\n\
    \  const [minRow, maxRow] = [minRow, maxRow];\n  const [minCol, maxCol] = [minCol,\
    \ maxCol];\n  const [minRow, maxRow] = [minRow, maxRow];\n  const [minCol, maxCol]\
    \ = [minCol, maxCol];\n  const [minRow, maxRow] = [minRow, maxRow];\n  const [minCol,\
    \ maxCol] = [minCol, maxCol];\n  const [minRow, maxRow] = [minRow, maxRow];\n\
    \  const [minCol, maxCol] = [minCol, maxCol];\n  const [minRow, maxRow] = [minRow,\
    \ maxRow];\n  const [minCol, maxCol] = [minCol, maxCol];\n  const [minRow, maxRow]\
    \ = [minRow, maxRow];\n  const [minCol, maxCol] = [minCol, maxCol", "  const rows:\
    \ number[][] = [];\n  let row: number[] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i].indexOf(x) !== -1) {\n      row.push(i);\n      rows.push(row);\n\
    \      row = [];\n    }\n  }\n  return rows;\n}\n", "  const rows: number[][]\
    \ = [];\n  let row: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i].indexOf(x) !== -1) {\n      row.push(i);\n      rows.push(row);\n\
    \      row = [];\n    }\n  }\n  rows.sort((a, b) => a[0] - b[0]);\n  rows.sort((a,\
    \ b) => b[1] - a[1]);\n  return rows;\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n  const [rows, cols] = lst;\n  const [row, col] = get_row_and_col(rows,\
    \ cols);\n  if (row === -1) {\n    return [];\n  }\n  if (col === -1) {\n    return\
    \ [];\n  }\n  const [x, y] = get_row_and_col(row, col);\n  if (x === -1) {\n \
    \   return [];\n  }\n  if (y === -1) {\n    return [];\n  }\n  return [[x, y]];\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n\n  const row = [x];\n\
    \  const rows = [row];\n  const columns = [row];\n\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const row = lst[i];\n    const rowLength = row.length;\n    const\
    \ columnLength = columns[rowLength - 1].length;\n\n    for (let j = 0; j < rowLength;\
    \ j++) {\n      const column = columns[rowLength - 1][j];\n      if (column ===\
    \ x) {\n        rows.push(row.slice());\n        columns.push([x]);\n        break;\n\
    \      }\n\n      const columnLength = columns[rowLength - 1].length;\n      if\
    \ (column < x) {\n        columns.push([column]);\n      } else {\n        columns.push([column,\
    \ x]);\n      }\n    }\n  }\n\n  return rows;\n}\n", "  if (lst.length === 0)\
    \ {\n    return [];\n  }\n  const row = [x];\n  const rows = [row];\n  const columns\
    \ = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    const column = lst[i];\n\
    \    for (let j = 0; j < column.length; j++) {\n      row.push(column[j]);\n \
    \     columns.push(column);\n    }\n    rows.push(row);\n    row = [column];\n\
    \  }\n  rows.sort((a, b) => a[0] - b[0]);\n  columns.sort((a, b) => b[1] - a[1]);\n\
    \  return rows.map(row => columns.map(col => col[col.length - 1]));\n}\n", " \
    \ if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n\
    \  const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n    const\
    \ [row, col] = row;\n    return [\n      Math.min(minRow, row),\n      Math.min(minCol,\
    \ col),\n    ];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n \
    \ const maxRow = rows.length - 1;\n  const maxCol = cols.length - 1;\n  const\
    \ [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const [row,\
    \ col] = row;\n    return [\n      Math.max(maxRow, row),\n      Math.max(maxCol,\
    \ col),\n    ];\n  }, [minRow, minCol]);\n  const [minRow, minCol] = [minRow,\
    \ minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow, minCol]\
    \ = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow,\
    \ minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n\
    \  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow,\
    \ maxCol];\n  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol]\
    \ = [maxRow, maxCol];\n  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow,\
    \ maxCol] = [maxRow, maxCol];\n  const [minRow, minCol] = [minRow, minCol];\n\
    \  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow, minCol] = [minRow,\
    \ minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow, minCol]\
    \ = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow,\
    \ minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n\
    \  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow,\
    \ maxCol];\n  const [minRow, minCol] = [minRow, minCol];\n  const [maxRo", " \
    \ if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n\
    \  const [row, col] = get_row_and_col(rows, cols);\n  const [x, y] = get_row_and_col(row,\
    \ col);\n  if (x === x) {\n    return [x, y];\n  }\n  return get_row(subarray(lst,\
    \ 0, row), x);\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ rows = lst.map(row => row.map(i => i + 1));\n  const cols = rows[0].map(i =>\
    \ 0);\n\n  for (let i = 0; i < rows.length; i++) {\n    for (let j = 0; j < rows[i].length;\
    \ j++) {\n      if (rows[i][j] === x) {\n        return [[i, j], ...cols];\n \
    \     }\n    }\n  }\n\n  return [];\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n  const [rows, cols] = lst;\n  const [minRow, minCol] = rows.reduce(([minRow,\
    \ minCol], row) => {\n    if (row.length < minRow) {\n      return [row, row.length];\n\
    \    }\n    if (row.length > minRow) {\n      return [minRow, row.length];\n \
    \   }\n    return minRow;\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const maxRow = rows.length - 1;\n  const maxCol = cols.length - 1;\n  const\
    \ [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    if (row.length\
    \ > maxRow) {\n      return [row, row.length];\n    }\n    if (row.length < maxRow)\
    \ {\n      return [maxRow, row.length];\n    }\n    return maxRow;\n  }, [Number.MIN_SAFE_INTEGER,\
    \ Number.MIN_SAFE_INTEGER]);\n  const [minRow, minCol] = rows.reduce(([minRow,\
    \ minCol], row) => {\n    if (row.length < minRow) {\n      return [row, row.length];\n\
    \    }\n    if (row.length > minRow) {\n      return [minRow, row.length];\n \
    \   }\n    return minRow;\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    if (row.length\
    \ > maxRow) {\n      return [row, row.length];\n    }\n    if (row.length < maxRow)\
    \ {\n      return [maxRow, row.length];\n    }\n    return maxRow;\n  }, [Number.MIN_SAFE_INTEGER,\
    \ Number.MIN_SAFE_INTEGER]);\n  const [minRow, minCol] = rows.reduce(([minRow,\
    \ minCol], row) => {\n    if (row.length < minRow) {\n      return [row, row.length];\n\
    \    }\n    if (row.length > minRow) {\n      return [minRow, row.length];\n \
    \   }\n    return minRow;\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    if (row.length\
    \ > maxRow) {\n      return [row, row.length];\n    }\n    if (row.length < maxRow)\
    \ {\n      return [maxRow, row.length];\n    }\n    return maxRow;\n  }, [Number.MIN_SAFE_INTEGER,\
    \ Number.MIN_SAFE_INTEGER]);\n  const [minRow, minCol] = rows.", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n  const [row, col]\
    \ = get_row_and_col(rows, cols);\n  const [x, y] = get_row_and_col(row, col);\n\
    \  if (x === x) {\n    return [x, y];\n  }\n  const [y1, y2] = get_row(rows.slice(0,\
    \ row), x);\n  const [x1, x2] = get_row(row, x);\n  return [y1, y2, x1, x2];\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const row: number[][]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n \
    \   if (row.indexOf(x) !== -1) {\n      row.sort((a, b) => a - b);\n      row.sort((a,\
    \ b) => b - a);\n      row.unshift(i);\n      row.unshift(0);\n      row.unshift(0);\n\
    \      row.unshift(0);\n      row.unshift(0);\n      return row;\n    }\n  }\n\
    \  return [];\n}\n", "  const result: number[][] = [];\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x)) {\n  \
    \    result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => a[1]\
    \ - b[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n}\n", " \
    \ const result: number[][] = [];\n  for (let i = 0; i < lst.length; i++) {\n \
    \   const row = lst[i];\n    const rowLength = row.length;\n    if (rowLength\
    \ > x) {\n      continue;\n    }\n    for (let j = 0; j < rowLength; j++) {\n\
    \      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n\
    \  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n\
    \  return result;\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ row = [x];\n  const rows = [row];\n  const row_index = {\n    0: 0,\n  };\n\
    \  const column_index = {\n    0: 0,\n  };\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const row = lst[i];\n    const row_len = row.length;\n    for (let\
    \ j = 0; j < row_len; j++) {\n      const column = row[j];\n      if (column ===\
    \ x) {\n        const index = row_index[row_len] + j;\n        rows.push([index,\
    \ column]);\n        row_index[row_len + 1] = index;\n        column_index[row_len\
    \ + 1] = column_index[row_len] + j;\n      }\n    }\n  }\n  rows.sort((a, b) =>\
    \ {\n    const a_row = rows[a];\n    const b_row = rows[b];\n    return a_row[1]\
    \ - b_row[1];\n  });\n  rows.sort((a, b) => {\n    const a_row = rows[a];\n  \
    \  const b_row = rows[b];\n    return b_row[1] - a_row[1];\n  });\n  return rows;\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const row = [x];\n  const\
    \ result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const column = lst[i][0];\n\
    \    if (column === x) {\n      result.push([row, column]);\n    }\n  }\n  result.sort((a,\
    \ b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n\
    }\n", "  const rows: number[][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const row = lst[i];\n    if (row.indexOf(x) !== -1) {\n      rows.push([i,\
    \ row.indexOf(x)]);\n    }\n  }\n  rows.sort((a, b) => {\n    if (a[0] < b[0])\
    \ return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n  rows.sort((a,\
    \ b) => {\n    if (a[1] < b[1]) return -1;\n    if (a[1] > b[1]) return 1;\n \
    \   return 0;\n  });\n  return rows;\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n  const row = [x];\n  const rows = [row];\n  const row_index = 0;\n\
    \  const row_indexes = [row_index];\n  const row_indexes_sorted = [row_index];\n\
    \  const columns = [row[0]];\n  const columns_sorted = [columns[0]];\n  const\
    \ column_index = 0;\n  const column_indexes = [column_index];\n  const column_indexes_sorted\
    \ = [column_index];\n  for (let i = 1; i < lst.length; i++) {\n    const column\
    \ = lst[i][0];\n    const column_sorted = [column];\n    for (let j = 0; j < row.length;\
    \ j++) {\n      if (column < row[j]) {\n        rows.push(row);\n        row_indexes.push(row_index);\n\
    \        row_indexes_sorted.push(row_index);\n        column_indexes.push(column_index);\n\
    \        column_indexes_sorted.push(column_index);\n        row = [column];\n\
    \        column = [row[j]];\n        column_index++;\n        column_sorted =\
    \ [column];\n        row_index++;\n        row_indexes = [row_index];\n      \
    \  row_indexes_sorted = [row_index];\n        column_indexes = [column_index];\n\
    \        column_indexes_sorted = [column_index];\n      } else {\n        row_index++;\n\
    \        row_indexes = [row_index];\n        row_indexes_sorted = [row_index];\n\
    \        column_indexes = [column_index];\n        column_indexes_sorted = [column_index];\n\
    \      }\n    }\n    rows.push(row);\n    row_indexes.push(row_index);\n    row_indexes_sorted.push(row_index);\n\
    \    column_indexes.push(column_index);\n    column_indexes_sorted.push(column_index);\n\
    \  }\n  return [\n    ...rows.sort((a, b) => a[0] - b[0]),\n    ...columns.sort((a,\
    \ b) => b[0] - a[0]),\n  ];\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n\n  const [rows, cols] = lst;\n  const [row, col] = get_row_and_col(rows,\
    \ cols, x);\n  return [\n    [row, col],\n    ...get_row(rows.slice(0, row), x\
    \ - rows[row][col]),\n  ];\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n  const [rows, cols] = lst;\n  const [minRow, minCol] = rows.reduce(([minRow,\
    \ minCol], row) => {\n    const [row, col] = row;\n    return [Math.min(row, minRow),\
    \ Math.min(col, minCol)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const\
    \ [row, col] = row;\n    return [Math.max(row, maxRow), Math.max(col, maxCol)];\n\
    \  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowCol,\
    \ maxRowCol] = [minRow, minCol].map(() => [minCol, maxCol]);\n  const [minRowColMax,\
    \ maxRowColMax] = [minRow, minCol].map(() => [maxCol, maxCol]);\n  const [minRowColMaxMin,\
    \ maxRowColMaxMin] = [minRow, minCol].map(() => [maxCol, minCol]);\n  const [minRowColMaxMinMax,\
    \ maxRowColMaxMinMax] = [minRow, minCol].map(() => [maxCol, maxCol]);\n  const\
    \ [minRowColMaxMinMaxMin, maxRowColMaxMinMaxMin] = [minRow, minCol].map(() =>\
    \ [maxCol, maxCol]);\n  const [minRowColMaxMinMaxMinMax, maxRowColMaxMinMaxMinMax]\
    \ = [minRow, minCol].map(() => [maxCol, maxCol]);\n  const [minRowColMaxMinMaxMinMaxMin,\
    \ maxRowColMaxMinMaxMinMaxMin] = [minRow, minCol].map(() => [maxCol, maxCol]);\n\
    \  const [minRowColMaxMinMaxMinMaxMinMax, maxRowColMaxMinMaxMinMaxMinMax] = [minRow,\
    \ minCol].map(() => [maxCol, maxCol]);\n  const [minRowColMaxMinMaxMinMaxMinMaxMin,\
    \ maxRowColMaxMinMaxMinMaxMinMaxMinMax] = [minRow, minCol].map(() => [maxCol,\
    \ maxCol]);\n  const [minRowColMaxMinMaxMinMaxMinMaxMinMax, maxRowColMaxMinMaxMinMaxMinMaxMinMax]\
    \ = [minRow, minCol].map(() => [maxCol, maxCol]);\n  const [minRowColMaxMinMaxMinMaxMinMaxMinMax",
  "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n \
    \ const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n    if (row.length\
    \ < minRow) {\n      return [row, row.length];\n    }\n    if (row.length > minRow)\
    \ {\n      return [minRow, row.length];\n    }\n    return [row, row.length];\n\
    \  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const maxRow = Math.max(...rows.map(row\
    \ => row.length));\n  const maxCol = Math.max(...cols.map(col => col.length));\n\
    \  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow, minCol] = [minRow,\
    \ minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow, minCol]\
    \ = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow,\
    \ minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n\
    \  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow,\
    \ maxCol];\n  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol]\
    \ = [maxRow, maxCol];\n  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow,\
    \ maxCol] = [maxRow, maxCol];\n  const [minRow, minCol] = [minRow, minCol];\n\
    \  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow, minCol] = [minRow,\
    \ minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow, minCol]\
    \ = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n  const [minRow,\
    \ minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow, maxCol];\n\
    \  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol] = [maxRow,\
    \ maxCol];\n  const [minRow, minCol] = [minRow, minCol];\n  const [maxRow, maxCol]\
    \ = [maxRow, maxCol];\n  const [minRow, minCol] = [minRow, min", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const row = [x];\n  const rows = [row];\n \
    \ const columns = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    const\
    \ column = lst[i];\n    for (let j = 0; j < column.length; j++) {\n      const\
    \ value = column[j];\n      if (value === x) {\n        rows.push(row);\n    \
    \    columns.push(column);\n        break;\n      }\n      if (value < x) {\n\
    \        row.push(value);\n      }\n    }\n  }\n  rows.push(row);\n  columns.sort((a,\
    \ b) => b[1] - a[1]);\n  rows.sort((a, b) => b[0].length - a[0].length);\n  return\
    \ rows.map(row => row.map(i => i[0]));\n}\n", "  if (lst.length === 0) {\n   \
    \ return [];\n  }\n\n  const rows = lst.map(row => row.map(i => i));\n  const\
    \ rows = rows.sort((a, b) => a[0] - b[0]);\n  const cols = rows.map(row => row.slice().sort((a,\
    \ b) => b[0] - a[0]));\n\n  const row = rows.find(row => row[0] === x);\n  const\
    \ coords = row.map(i => [i - row[0], cols.map(col => col[i])]);\n\n  return coords.sort((a,\
    \ b) => b[0] - a[0]).map(coord => [coord[0] + row[0], coord[1]]);\n}\n", "  if\
    \ (lst.length === 0) {\n    return [];\n  }\n  const row = [x];\n  const rows\
    \ = [row];\n  const columns = [lst[0]];\n  for (let i = 1; i < lst.length; i++)\
    \ {\n    const column = lst[i];\n    for (let j = 0; j < column.length; j++) {\n\
    \      rows.push(column);\n      columns.push(column);\n    }\n  }\n  rows.sort((a,\
    \ b) => a[0] - b[0]);\n  columns.sort((a, b) => b[1] - a[1]);\n  return rows.map(row\
    \ => columns.map(col => [col, row]));\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n  const rows = lst.length;\n  const cols = lst[0].length;\n  const\
    \ coords: number[][] = [];\n  for (let i = 0; i < rows; i++) {\n    coords[i]\
    \ = [];\n    for (let j = 0; j < cols; j++) {\n      coords[i][j] = lst[i][j];\n\
    \    }\n  }\n  coords.sort((a, b) => {\n    return a[0] - b[0];\n  });\n  coords.sort((a,\
    \ b) => {\n    return b[1] - a[1];\n  });\n  const result = [];\n  for (let i\
    \ = 0; i < rows; i++) {\n    result.push([coords[i][0], coords[i][1]]);\n  }\n\
    \  return result;\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ rows = lst.length;\n  const cols = lst[0].length;\n  const coords: number[][]\
    \ = [];\n  for (let row = 0; row < rows; row++) {\n    coords[row] = [];\n   \
    \ for (let col = 0; col < cols; col++) {\n      coords[row][col] = lst[row][col];\n\
    \    }\n  }\n  coords.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1;\n\
    \    }\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    return 0;\n  });\n\
    \  coords.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n \
    \   if (a[1] < b[1]) {\n      return -1;\n    }\n    return 0;\n  });\n  const\
    \ result = [];\n  for (let row = 0; row < rows; row++) {\n    if (coords[row][0]\
    \ === x) {\n      result.push([row, coords[row][1]]);\n    }\n  }\n  return result;\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] =\
    \ lst;\n  const [row, col] = get_row_and_col(rows, cols);\n  const [x, y] = get_row_and_col(row,\
    \ col);\n  if (x === x) {\n    return [x, y];\n  }\n  return [];\n}\n", "  if\
    \ (lst.length === 0) {\n    return [];\n  }\n  const row: number[][] = [];\n \
    \ const columns: number[] = [];\n  let row_index = 0;\n  let column_index = 0;\n\
    \  while (row_index < lst.length) {\n    if (lst[row_index][column_index] ===\
    \ x) {\n      row.push([row_index, column_index]);\n      columns.push(column_index);\n\
    \      row_index++;\n      column_index = 0;\n    } else {\n      column_index++;\n\
    \    }\n  }\n  row.sort((a, b) => b[0] - a[0]);\n  columns.sort((a, b) => b -\
    \ a);\n  return row;\n}\n", "  const rows = lst.map(row => row.map(i => i));\n\
    \  const rows = rows.sort((a, b) => a[0] - b[0]);\n  const rows = rows.map(row\
    \ => row.sort((a, b) => b[0] - a[0]));\n  const row = rows[rows.length - 1];\n\
    \  const index = row.indexOf(x);\n  return row[index];\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const row = [x];\n  const result = [row];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const lstRow = lst[i];\n    for\
    \ (let j = 0; j < lstRow.length; j++) {\n      if (lstRow[j] === x) {\n      \
    \  result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a, b) => {\n\
    \    if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n    \
    \  return -1;\n    }\n    return 0;\n  }).sort((a, b) => {\n    if (a[1] > b[1])\
    \ {\n      return 1;\n    }\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\
    \    return 0;\n  });\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n\
    \n  const rows = lst.length;\n  const cols = lst[0].length;\n  const result =\
    \ [];\n\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n    const\
    \ rowResult = [];\n    for (let j = 0; j < cols; j++) {\n      rowResult.push([i,\
    \ j]);\n    }\n    result.push(rowResult);\n  }\n\n  result.sort((a, b) => {\n\
    \    const aRow = a[0];\n    const bRow = b[0];\n    if (aRow === bRow) {\n  \
    \    return a[1] - b[1];\n    }\n    return aRow - bRow;\n  });\n\n  result.sort((a,\
    \ b) => {\n    const aCol = a[1];\n    const bCol = b[1];\n    if (aCol === bCol)\
    \ {\n      return a[0] - b[0];\n    }\n    return aCol - bCol;\n  });\n\n  return\
    \ result;\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n\n  const row:\
    \ number[] = [];\n  const rows: number[][] = [];\n  let row_index = 0;\n  let\
    \ col_index = 0;\n  let row_indexes: number[] = [];\n  let col_indexes: number[]\
    \ = [];\n\n  while (row_index < lst.length) {\n    if (lst[row_index][col_index]\
    \ === x) {\n      row.push(row_index);\n      col_indexes.push(col_index);\n \
    \     row_indexes.push(row_index);\n      col_index++;\n    } else {\n      row_index++;\n\
    \    }\n  }\n\n  row_indexes.sort((a, b) => a - b);\n  col_indexes.sort((a, b)\
    \ => b - a);\n\n  for (let i = 0; i < row_indexes.length; i++) {\n    rows.push(row_indexes[i]);\n\
    \  }\n\n  for (let i = 0; i < col_indexes.length; i++) {\n    rows.push(col_indexes[i]);\n\
    \  }\n\n  return rows;\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n\
    \  const [rows, cols] = lst;\n  const [minRow, minCol] = rows.reduce(([minRow,\
    \ minCol], row) => {\n    const [row, col] = row;\n    return [Math.min(minRow,\
    \ row), Math.min(minCol, col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const\
    \ [row, col] = row;\n    return [Math.max(maxRow, row), Math.max(maxCol, col)];\n\
    \  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowIndex,\
    \ minColIndex] = rows.reduce(([minRowIndex, minColIndex], row, i) => {\n    const\
    \ [row, col] = row;\n    return [Math.min(minRowIndex, i), Math.min(minColIndex,\
    \ col)];\n  }, [minRow, minCol]);\n  const [maxRowIndex, maxColIndex] = rows.reduce(([maxRowIndex,\
    \ maxColIndex], row, i) => {\n    const [row, col] = row;\n    return [Math.max(maxRowIndex,\
    \ i), Math.max(maxColIndex, col)];\n  }, [maxRow, maxCol]);\n  const rowIndex\
    \ = minRowIndex + Math.floor((maxRowIndex - minRowIndex) / x);\n  const colIndex\
    \ = minColIndex + Math.floor((maxColIndex - minColIndex) / x);\n  const row =\
    \ rows[rowIndex];\n  const col = cols[colIndex];\n  return [row, col];\n}\n",
  "  const rows = lst.length;\n  const cols = lst[0].length;\n  const result = [];\n\
    \  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n    const rowResult\
    \ = [];\n    for (let j = 0; j < cols; j++) {\n      const col = row[j];\n   \
    \   if (col === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n\
    \  }\n  result.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n  \
    \  }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    return 0;\n  });\n \
    \ result.sort((a, b) => {\n    if (a[1] < b[1]) {\n      return -1;\n    }\n \
    \   if (a[1] > b[1]) {\n      return 1;\n    }\n    return 0;\n  });\n  return\
    \ result;\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const row\
    \ = [x];\n  const result = [row];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    const curr = lst[i];\n    for (let j = 0; j < curr.length; j++) {\n     \
    \ if (curr[j] === x) {\n        result.push([i, curr.length - j - 1]);\n     \
    \ }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) =>\
    \ b[1] - a[1]);\n  return result;\n}\n", "  const rows: number[][] = [];\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x))\
    \ {\n      rows.push([i, row.indexOf(x)]);\n    }\n  }\n  rows.sort((a, b) =>\
    \ a[1] - b[1]);\n  rows.sort((a, b) => b[0] - a[0]);\n  return rows;\n}\n", " \
    \ if (lst.length === 0) {\n    return [];\n  }\n  const row = [x];\n  const columns\
    \ = [lst[0].length - 1];\n  for (let i = 1; i < lst.length; i++) {\n    const\
    \ [row, column] = get_row(lst[i], x);\n    row.push(column);\n    columns.push(column);\n\
    \  }\n  return [row, ...columns.sort((a, b) => b - a)];\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  const row = [x];\n  const columns = [lst[0].length\
    \ - 1];\n  for (let i = 1; i < lst.length; i++) {\n    const [y, y2] = lst[i];\n\
    \    if (y === row[0]) {\n      row.push(y);\n      columns.push(y2);\n    } else\
    \ {\n      row.push(y);\n      columns.push(y2);\n    }\n  }\n  row.sort((a, b)\
    \ => a - b);\n  columns.sort((a, b) => b - a);\n  return [row, columns];\n}\n",
  "  if (lst.length === 0) {\n    return [];\n  }\n  const row = [x];\n  const rows\
    \ = [row];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n\
    \    const row2 = row.slice();\n    for (let j = 0; j < row2.length; j++) {\n\
    \      row2.splice(j, 0, row2[j] + 1);\n    }\n    rows.push(row2);\n  }\n  rows.sort((a,\
    \ b) => a[0] - b[0]);\n  rows.sort((a, b) => b[1] - a[1]);\n  return rows.map(row\
    \ => row.map(col => col === x ? [0, 0] : col));\n}\n", "  if (lst.length === 0)\
    \ {\n    return [];\n  }\n  const row = [x];\n  const col = [lst[0].length - 1];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    const curr = lst[i];\n    for (let\
    \ j = 0; j < curr[col.length - 1]; j++) {\n      if (curr[j] === x) {\n      \
    \  row.push(j);\n        col.push(j);\n      }\n    }\n  }\n  row.sort((a, b)\
    \ => a - b);\n  col.sort((a, b) => b - a);\n  return row.map((i) => [i, col[i]]);\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] =\
    \ lst;\n  const [minRow, maxRow] = rows.map(row => Math.min(row, x));\n  const\
    \ [minCol, maxCol] = cols.map(col => Math.max(col, x));\n  const rows = Array.from(Array(maxRow\
    \ - minRow + 1).keys()).map(i => minRow + i);\n  const cols = Array.from(Array(maxCol\
    \ - minCol + 1).keys()).map(i => minCol + i);\n  const coords = rows.map(row =>\
    \ cols.map(col => [row, col]));\n  coords.sort((a, b) => a[0] - b[0]);\n  coords.sort((a,\
    \ b) => a[1] - b[1]);\n  return coords;\n}\n", "  if (lst.length === 0) {\n  \
    \  return [];\n  }\n  const [rows, cols] = lst;\n  const rowIdx = rows.findIndex((row)\
    \ => row === x);\n  if (rowIdx === -1) {\n    return [];\n  }\n  const colIdx\
    \ = cols.findIndex((col) => col === rows[rowIdx]);\n  if (colIdx === -1) {\n \
    \   return [];\n  }\n  const [row, col] = [rowIdx, colIdx];\n  const sortedRows\
    \ = rows.sort((a, b) => b - a);\n  const sortedCols = cols.sort((a, b) => b -\
    \ a);\n  const sortedCoords = [\n    [sortedRows[row], sortedCols[col]],\n   \
    \ [sortedRows[row + 1], sortedCols[col]],\n    [sortedRows[row + 1], sortedCols[col\
    \ + 1]],\n    [sortedRows[row], sortedCols[col + 1]],\n  ];\n  return sortedCoords;\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] =\
    \ lst;\n  const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n\
    \    const [row, col] = row;\n    return [Math.min(minRow, row), Math.min(minCol,\
    \ col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const [maxRow,\
    \ maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const [row, col] = row;\n\
    \    return [Math.max(maxRow, row), Math.max(maxCol, col)];\n  }, [Number.MIN_SAFE_INTEGER,\
    \ Number.MIN_SAFE_INTEGER]);\n  const [minRowInd, minColInd] = rows.reduce(([minRowInd,\
    \ minColInd], row, i) => {\n    const [row, col] = row;\n    return [Math.min(minRowInd,\
    \ i), Math.min(minColInd, col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRowInd, maxColInd] = rows.reduce(([maxRowInd, maxColInd], row, i)\
    \ => {\n    const [row, col] = row;\n    return [Math.max(maxRowInd, i), Math.max(maxColInd,\
    \ col)];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowIndInd,\
    \ minColIndInd] = rows.reduce(([minRowIndInd, minColIndInd], row, i) => {\n  \
    \  const [row, col] = row;\n    return [Math.min(minRowIndInd, i), Math.min(minColIndInd,\
    \ col)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const [maxRowIndInd,\
    \ maxColIndInd] = rows.reduce(([maxRowIndInd, maxColIndInd], row, i) => {\n  \
    \  const [row, col] = row;\n    return [Math.max(maxRowIndInd, i), Math.max(maxColIndInd,\
    \ col)];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowIndIndInd,\
    \ minColIndIndInd] = rows.reduce(([minRowIndIndInd, minColIndIndInd], row, i)\
    \ => {\n    const [row, col] = row;\n    return [Math.min(minRowIndIndInd, i),\
    \ Math.min(minColIndIndInd, col)", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n  const [rows, columns] = lst;\n  const rowIndex = rows.findIndex(row =>\
    \ row === x);\n  const columnIndex = columns.findIndex(column => column === x);\n\
    \  if (rowIndex === -1) {\n    return [];\n  }\n  const [columnIndex, rowIndex]\
    \ = [columnIndex, rowIndex];\n  const sortedRows = rows.sort((a, b) => a - b);\n\
    \  const sortedColumns = columns.sort((a, b) => b - a);\n  const coordinates =\
    \ [\n    [rowIndex, columnIndex],\n    [rowIndex + 1, columnIndex],\n    [rowIndex\
    \ + 1, columnIndex + 1],\n    [rowIndex, columnIndex + 1],\n  ];\n  return coordinates.map(coordinate\
    \ => sortedRows.map(row => sortedColumns.map(column => row[column])));\n}\n",
  "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n \
    \ const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n    const\
    \ [minRowVal, minColVal] = row.reduce(([minRowVal, minColVal], val) => {\n   \
    \   if (val === x) {\n        return [minRowVal < minRowVal ? minRowVal : minRow,\
    \ minColVal < minColVal ? minColVal : minCol];\n      }\n      return [minRowVal,\
    \ minColVal];\n    }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n \
    \   return [minRowVal < minRowVal ? minRowVal : minRow, minColVal < minColVal\
    \ ? minColVal : minCol];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const\
    \ [maxRowVal, maxColVal] = row.reduce(([maxRowVal, maxColVal], val) => {\n   \
    \   if (val === x) {\n        return [maxRowVal > maxRowVal ? maxRowVal : maxRow,\
    \ maxColVal > maxColVal ? maxColVal : maxCol];\n      }\n      return [maxRowVal,\
    \ maxColVal];\n    }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n \
    \   return [maxRowVal > maxRowVal ? maxRowVal : maxRow, maxColVal > maxColVal\
    \ ? maxColVal : maxCol];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minRowVal, minColVal] = rows.reduce(([minRowVal, minColVal], row) =>\
    \ {\n    const [minRowVal, minColVal] = row.reduce(([minRowVal, minColVal], val)\
    \ => {\n      if (val === x) {\n        return [minRowVal < minRowVal ? minRowVal\
    \ : minRow, minColVal < minColVal ? minColVal : minCol];\n      }\n      return\
    \ [minRowVal, minColVal];\n    }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \    return [minRowVal < minRowVal ? minRowVal : minRow, minColVal < minColVal\
    \ ? minColVal : minCol];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols]\
    \ = lst;\n  const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n\
    \    const [row, col] = row;\n    return [Math.min(row, minRow), Math.min(col,\
    \ minCol)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  const\
    \ [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const [row,\
    \ col] = row;\n    return [Math.max(row, maxRow), Math.max(col, maxCol)];\n  },\
    \ [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowInd, minColInd]\
    \ = rows.reduce(([minRowInd, minColInd], row, i) => {\n    const [row, col] =\
    \ row;\n    return [Math.min(row, minRow), Math.min(col, minCol)];\n  }, [0, 0])\n\
    \  const [maxRowInd, maxColInd] = rows.reduce(([maxRowInd, maxColInd], row, i)\
    \ => {\n    const [row, col] = row;\n    return [Math.max(row, maxRow), Math.max(col,\
    \ maxCol)];\n  }, [rows.length - 1, cols.length - 1]);\n  const [minRowIndInd,\
    \ minColIndInd] = rows.reduce(([minRowIndInd, minColIndInd], row, i) => {\n  \
    \  const [row, col] = row;\n    return [Math.min(row, minRowInd), Math.min(col,\
    \ minColInd)];\n  }, [0, 0])\n  const [maxRowIndInd, maxColIndInd] = rows.reduce(([maxRowIndInd,\
    \ maxColIndInd], row, i) => {\n    const [row, col] = row;\n    return [Math.max(row,\
    \ maxRowInd), Math.max(col, maxColInd)];\n  }, [rows.length - 1, cols.length -\
    \ 1]);\n  const [minRowIndIndInd, minColIndIndInd] = rows.reduce(([minRowIndIndInd,\
    \ minColIndIndInd], row, i) => {\n    const [row, col] = row;\n    return [Math.min(row,\
    \ minRowIndInd), Math.min(col, minColIndInd)];\n  }, [0, 0])\n  const [maxRowIndIndInd,\
    \ maxColIndIndInd] = rows.reduce(([maxRowIndIndInd, maxColIndIndInd], row, i)\
    \ => {\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const row = [...lst[0]];\n\
    \  const rowLen = row.length;\n  const colLen = lst[0].length;\n  const rowLenMinusOne\
    \ = rowLen - 1;\n  const colLenMinusOne = colLen - 1;\n  const rowLenMinusOneMinusOne\
    \ = rowLenMinusOne - 1;\n  const colLenMinusOneMinusOne = colLenMinusOne - 1;\n\
    \  const rowLenMinusOneMinusOneMinusOne = rowLenMinusOneMinusOne - 1;\n  const\
    \ colLenMinusOneMinusOneMinusOne = colLenMinusOneMinusOne - 1;\n  const rowLenMinusOneMinusOneMinusOneMinusOne\
    \ = rowLenMinusOneMinusOneMinusOne - 1;\n  const colLenMinusOneMinusOneMinusOneMinusOne\
    \ = colLenMinusOneMinusOneMinusOne - 1;\n  const rowLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = rowLenMinusOneMinusOneMinusOneMinusOne - 1;\n  const colLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = colLenMinusOneMinusOneMinusOneMinusOne - 1;\n  const rowLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = rowLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  const colLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = colLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1;\n  const\
    \ rowLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = rowLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1;\n  const colLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = colLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1;\n  const rowLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne",
  "  const rows = lst.length;\n  const cols = lst[0].length;\n  if (rows === 0 ||\
    \ cols === 0) {\n    return [];\n  }\n  const row = [x];\n  const result = [];\n\
    \  for (let i = 0; i < rows; i++) {\n    const row1 = lst[i];\n    const row2\
    \ = row1.slice();\n    row2.sort((a, b) => b - a);\n    for (let j = 0; j < cols;\
    \ j++) {\n      if (row2[j] === row[0]) {\n        result.push([i, j]);\n    \
    \  }\n    }\n  }\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n}\n",
  "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n \
    \ const [minRow, minCol] = rows.reduce(([minRow, minCol], row) => {\n    const\
    \ [row, col] = row;\n    return [\n      Math.min(minRow, row),\n      Math.min(minCol,\
    \ col),\n    ];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n \
    \ const [maxRow, maxCol] = rows.reduce(([maxRow, maxCol], row) => {\n    const\
    \ [row, col] = row;\n    return [\n      Math.max(maxRow, row),\n      Math.max(maxCol,\
    \ col),\n    ];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n \
    \ const [minRowInd, minColInd] = rows.reduce(([minRowInd, minColInd], row, i)\
    \ => {\n    const [row, col] = row;\n    return [\n      Math.min(minRowInd, i),\n\
    \      Math.min(minColInd, col),\n    ];\n  }, [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n\
    \  const [maxRowInd, maxColInd] = rows.reduce(([maxRowInd, maxColInd], row, i)\
    \ => {\n    const [row, col] = row;\n    return [\n      Math.max(maxRowInd, i),\n\
    \      Math.max(maxColInd, col),\n    ];\n  }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  const [minRowIndInd, minColIndInd] = rows.reduce(([minRowIndInd, minColIndInd],\
    \ row, i) => {\n    const [row, col] = row;\n    return [\n      Math.min(minRowIndInd,\
    \ i),\n      Math.min(minColIndInd, col),\n    ];\n  }, [Number.MAX_SAFE_INTEGER,\
    \ Number.MAX_SAFE_INTEGER]);\n  const [maxRowIndInd, maxColIndInd] = rows.reduce(([maxRowIndInd,\
    \ maxColIndInd], row, i) => {\n    const [row, col] = row;\n    return [\n   \
    \   Math.max(maxRowIndInd, i),\n      Math.max(maxColIndInd, col),\n    ];\n \
    \ }, [Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n  const [minRowIndIndInd,\
    \ minColIndIndInd] = rows.reduce(([minRowInd", "  const rows = lst.map(row =>\
    \ row.map(i => i + 1));\n  const cols = lst.map(row => row.map(i => i + 1));\n\
    \  const [rows, cols] = sort_rows(rows, cols);\n  const [row, col] = find_row(rows,\
    \ cols, x);\n  return [\n    row.map(i => cols[i]),\n    row.map(i => cols[i -\
    \ 1]),\n  ];\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows,\
    \ cols] = lst;\n  const rowIdx = rows.findIndex((row) => row === x);\n  if (rowIdx\
    \ === -1) {\n    return [];\n  }\n  const colIdx = cols.findIndex((col) => col\
    \ === rowIdx);\n  if (colIdx === -1) {\n    return [];\n  }\n  const [row, col]\
    \ = [rowIdx, colIdx];\n  const sortedRows = rows.sort((a, b) => a - b);\n  const\
    \ sortedCols = cols.sort((a, b) => b - a);\n  const result = [];\n  for (let i\
    \ = 0; i < sortedRows.length; i += 1) {\n    const rowIdx = sortedRows[i];\n \
    \   const sortedCols = cols.sort((a, b) => b - a);\n    for (let j = 0; j < sortedCols.length;\
    \ j += 1) {\n      const colIdx = sortedCols[j];\n      result.push([rowIdx, colIdx]);\n\
    \    }\n  }\n  return result;\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n  const row = [x];\n  const result = [row];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const lst2 = lst[i];\n    for (let j = 0; j < lst2.length; j++)\
    \ {\n      if (lst2[j] === x) {\n        result.push([i, lst2.length - j - 1]);\n\
    \      }\n    }\n  }\n  return result.sort((a, b) => b[1] - a[1]).sort((a, b)\
    \ => b[0] - a[0]);\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ rows = lst.length;\n  const cols = lst[0].length;\n  const result = [];\n  for\
    \ (let i = 0; i < rows; i++) {\n    const row = lst[i];\n    const rowResult =\
    \ [];\n    for (let j = 0; j < cols; j++) {\n      const col = row[j];\n     \
    \ if (col === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n\
    \  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1;\n   \
    \ }\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    return 0;\n  });\n \
    \ result.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n  \
    \  if (a[1] < b[1]) {\n      return -1;\n    }\n    return 0;\n  });\n  return\
    \ result;\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows,\
    \ cols] = lst[0].length;\n  const row = [...Array(cols)].map(() => 0);\n  const\
    \ result = [...Array(rows)].map(() => []);\n  for (let i = 0; i < rows; i++) {\n\
    \    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        result[i].push([i,\
    \ j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a,\
    \ b) => b[1] - a[1]);\n  return result;\n}\n", "  if (lst.length === 0) {\n  \
    \  return [];\n  }\n  const row = [x];\n  const rows = [row];\n  const columns\
    \ = [lst[0]];\n  const columnIndex = 0;\n  const rowIndex = 0;\n  while (rowIndex\
    \ < lst.length) {\n    const column = lst[rowIndex][columnIndex];\n    if (column\
    \ === x) {\n      return rows;\n    }\n    if (column < x) {\n      rows.push(row);\n\
    \      row = [column];\n      columns.push(column);\n      columnIndex++;\n  \
    \  } else {\n      row.push(column);\n      columnIndex--;\n    }\n    rowIndex++;\n\
    \  }\n  return rows;\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n\
    \  const row = [x];\n  const rows = [row];\n  const cols = [row];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rows = [...rows,\
    \ row];\n    for (let j = 0; j < row.length; j++) {\n      const col = row[j];\n\
    \      const cols = [...cols, col];\n    }\n  }\n  rows.sort((a, b) => {\n   \
    \ if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n      return\
    \ -1;\n    }\n    return 0;\n  });\n  cols.sort((a, b) => {\n    if (a[1] > b[1])\
    \ {\n      return 1;\n    }\n    if (a[1] < b[1]) {\n      return -1;\n    }\n\
    \    return 0;\n  });\n  return cols.map((col, i) => {\n    return [rows[i], col];\n\
    \  });\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const rows =\
    \ lst.length;\n  const cols = lst[0].length;\n  if (rows === 0 || cols === 0)\
    \ {\n    return [];\n  }\n  const coords: number[][] = [];\n  for (let i = 0;\
    \ i < rows; i++) {\n    coords[i] = [];\n    for (let j = 0; j < cols; j++) {\n\
    \      coords[i][j] = [i, j];\n    }\n  }\n  coords.sort((a, b) => {\n    const\
    \ aRow = a[0] as number;\n    const bRow = b[0] as number;\n    if (aRow === bRow)\
    \ {\n      return a[1] - b[1];\n    }\n    return aRow - bRow;\n  });\n  const\
    \ row = coords.find((row) => row[0] === x);\n  if (row === undefined) {\n    return\
    \ [];\n  }\n  coords.sort((a, b) => {\n    const aCol = a[1] as number;\n    const\
    \ bCol = b[1] as number;\n    if (aCol === bCol) {\n      return aCol - bCol;\n\
    \    }\n    return aCol - bCol;\n  });\n  return coords[row[0]];\n}\n", "  if\
    \ (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] = lst;\n  const\
    \ [row, col] = get_row_and_col(rows, cols, x);\n  return [\n    [row, col],\n\
    \    ...get_row(rows.slice(0, row), x),\n    ...get_row(rows.slice(row + 1), x),\n\
    \  ];\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols]\
    \ = lst;\n  const rowIdx = rows.findIndex((row) => row === x);\n  const colIdx\
    \ = cols.findIndex((col) => col === x);\n  if (rowIdx === -1) {\n    return [];\n\
    \  }\n  const row = rows[rowIdx];\n  const col = cols[colIdx];\n  const [x, y]\
    \ = get_coords(row, col);\n  return [x, y];\n}\n", "  if (lst.length === 0) {\n\
    \    return [];\n  }\n  const [rows, columns] = lst;\n  const [row, col] = get_row_and_col(rows,\
    \ x);\n  return [\n    [row, col],\n    ...get_row(rows.slice(0, row), x),\n \
    \   ...get_row(rows.slice(row), x),\n  ];\n}\n", "  if (lst.length === 0) {\n\
    \    return [];\n  }\n  const row = [x];\n  const rows = [row];\n  const columns\
    \ = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    const column = lst[i];\n\
    \    for (let j = 0; j < column.length; j++) {\n      const x = column[j];\n \
    \     if (x === row[0]) {\n        row.push(x);\n        rows.push(row);\n   \
    \     columns.push([x]);\n      } else {\n        const index = columns.findIndex((c)\
    \ => c[0] === x);\n        if (index === -1) {\n          columns.push([x]);\n\
    \        } else {\n          columns[index].push(x);\n        }\n      }\n   \
    \ }\n  }\n  columns.sort((a, b) => a[0] - b[0]);\n  columns.sort((a, b) => b[1]\
    \ - a[1]);\n  return rows;\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n  const [rows, cols] = lst;\n  const [row, col] = get_row_and_col(rows,\
    \ cols, x);\n  return [\n    [0, 0],\n    [row, col],\n  ];\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n\n  const row = [x];\n  const rows = [row];\n\
    \  const columns = [lst[0]];\n  const coordinates = [[0, 0], [0, 0]];\n\n  for\
    \ (let i = 1; i < lst.length; i++) {\n    const column = lst[i];\n    const columnIndex\
    \ = columns.indexOf(column);\n    if (columnIndex === -1) {\n      columns.push(column);\n\
    \      coordinates.push([i, columns.length - 1]);\n    } else {\n      coordinates.push([columnIndex,\
    \ columns.length - 1]);\n    }\n\n    const rowIndex = rows.indexOf(row);\n  \
    \  if (rowIndex === -1) {\n      rows.push(row);\n    }\n\n    row.push(column);\n\
    \  }\n\n  coordinates.sort((a, b) => a[0] - b[0]);\n  coordinates.sort((a, b)\
    \ => b[1] - a[1]);\n\n  return coordinates.map(coordinate => [coordinate[0] +\
    \ rows[coordinate[0]][0] * columns[coordinate[1]], coordinate[1] + rows[coordinate[0]][0]\
    \ * columns[coordinate[1]]]);\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n  const row = [x];\n  const result = [row];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const lst2 = lst[i];\n    for (let j = 0; j < lst2.length; j++)\
    \ {\n      if (lst2[j] === x) {\n        result.push([i, j]);\n      }\n    }\n\
    \  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1;\n   \
    \ }\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    return 0;\n  });\n \
    \ result.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n  \
    \  if (a[1] < b[1]) {\n      return -1;\n    }\n    return 0;\n  });\n  return\
    \ result;\n}\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const rows\
    \ = lst.length;\n  const cols = lst[0].length;\n  const row = [...Array(cols).keys()].sort((a,\
    \ b) => b - a);\n  const col = [...Array(rows).keys()].sort((a, b) => b - a);\n\
    \  const result = [];\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i];\n\
    \    const rowResult = [];\n    for (let j = 0; j < cols; j++) {\n      const\
    \ col = cols[j];\n      if (row[col] === x) {\n        rowResult.push([i, j]);\n\
    \      }\n    }\n    result.push(rowResult);\n  }\n  return result;\n}\n", " \
    \ if (lst.length === 0) {\n    return [];\n  }\n  const row = [x];\n  const rows\
    \ = [row];\n  const columns = [lst[0]];\n  for (let i = 1; i < lst.length; i++)\
    \ {\n    const column = lst[i];\n    for (let j = 0; j < column.length; j++) {\n\
    \      if (column[j] === x) {\n        rows.push(row.slice());\n        columns.push(column.slice());\n\
    \      }\n    }\n  }\n  rows.sort((a, b) => a[0] - b[0]);\n  columns.sort((a,\
    \ b) => b[1] - a[1]);\n  return rows.map(row => columns.map(col => [col, row[0]]));\n\
    }\n", "  if (lst.length === 0) {\n    return [];\n  }\n  const [rows, cols] =\
    \ lst;\n  const [row, col] = get_row_col(rows, cols);\n  const [x, y] = get_row_col(row,\
    \ col);\n  if (x === x) {\n    return [x, y];\n  }\n  return get_row(\n    sort_by_row(sort_by_col(lst,\
    \ [row, col], (x, y) => x - y)),\n    x\n  );\n}\n", "  if (lst.length === 0)\
    \ {\n    return [];\n  }\n  const row = [x];\n  const rows = [row];\n  const cols\
    \ = [x];\n  let i = 1;\n  while (i < lst.length) {\n    const row = lst[i];\n\
    \    const [row, col] = get_row(row, x - row[0]);\n    rows.push(row);\n    cols.push(col);\n\
    \    i += 1;\n  }\n  return [rows, cols];\n}\n", "  if (lst.length === 0) {\n\
    \    return [];\n  }\n  const [rows, columns] = lst;\n  const [sortedRows, sortedColumns]\
    \ = sort2d(rows, columns);\n  const [row, column] = sortedRows.find(([x, y]) =>\
    \ x === x);\n  if (row === undefined) {\n    return [];\n  }\n  const [sortedColumnsReversed,\
    \ sortedRowsReversed] = sort2d(\n    sortedColumns,\n    sortedRows\n  );\n  const\
    \ [x, y] = sortedRowsReversed.find(([x, y]) => x === x);\n  if (column === undefined)\
    \ {\n    return [];\n  }\n  const [x, y] = sortedColumnsReversed.find(([x, y])\
    \ => x === x);\n  return [\n    [row, column],\n    [x - 1, y - 1],\n    [x -\
    \ 1, y],\n    [x, y - 1],\n    [x + 1, y - 1],\n    [x + 1, y],\n    [x + 1, y\
    \ + 1],\n  ];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
