name: HumanEval_44_change_base
language: ts
prompt: "//Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
  \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n\
  // \"111\"\nfunction change_base(x: number, base: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
  22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
  \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
  \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
  \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
  \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
  \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
completions: ["  const str = x.toString(base);\n  return str.length < base ? str +\
    \ \"0\" : str;\n}\n", "    let result = '';\n    let digits = x;\n    let baseDigits\
    \ = base;\n    while (digits > 0) {\n        if (digits % base === 0) {\n    \
    \        digits /= base;\n            result += digits;\n        }\n        else\
    \ {\n            digits *= base;\n        }\n    }\n    return result;\n}\n",
  "    let result = '';\n    let digits = String(Math.abs(x)).split('');\n    let\
    \ baseDigits = String(Math.abs(base)).split('');\n    let baseLength = baseDigits.length;\n\
    \    let digitLength = digits.length;\n    let i;\n    let j;\n    let k;\n  \
    \  let l;\n    let m;\n    let n;\n    let x;\n    let y;\n    let z;\n    let\
    \ w;\n    let base;\n    let digit;\n    let carry = 0;\n    let digitBase;\n\
    \    let digitBaseLength;\n    let digitBaseLengthMinus1;\n    let digitBaseLengthMinus2;\n\
    \    let digitBaseLengthMinus3;\n    let digitBaseLengthMinus4;\n    let digitBaseLengthMinus5;\n\
    \    let digitBaseLengthMinus6;\n    let digitBaseLengthMinus7;\n    let digitBaseLengthMinus8;\n\
    \    let digitBaseLengthMinus9;\n    let digitBaseLengthMinus10;\n    let digitBaseLengthMinus11;\n\
    \    let digitBaseLengthMinus12;\n    let digitBaseLengthMinus13;\n    let digitBaseLengthMinus14;\n\
    \    let digitBaseLengthMinus15;\n    let digitBaseLengthMinus16;\n    let digitBaseLengthMinus17;\n\
    \    let digitBaseLengthMinus18;\n    let digitBaseLengthMinus19;\n    let digitBaseLengthMinus20;\n\
    \    let digitBaseLengthMinus21;\n    let digitBaseLengthMinus22;\n    let digitBaseLengthMinus23;\n\
    \    let digitBaseLengthMinus24;\n    let digitBaseLengthMinus25;\n    let digitBaseLengthMinus26;\n\
    \    let digitBaseLengthMinus27;\n    let digitBaseLengthMinus28;\n    let digitBaseLengthMinus29;\n\
    \    let digitBaseLengthMinus30;\n    let digitBaseLengthMinus31;\n    let digitBaseLengthMinus32;\n\
    \    let digitBaseLengthMinus33;\n    let digitBaseLengthMinus34;\n    let digitBaseLengthMinus35;\n\
    \    let digitBaseLengthMinus36;\n    let digitBaseLengthMinus37;\n    let digitBaseLengthMinus38;\n\
    \    let digitBaseLengthMinus39;\n    let digitBaseLengthMinus40;\n    let digitBaseLengthMinus41;\n\
    \    let digitBaseLengthMinus42;\n    let digitBaseLengthMinus43;\n    let digitBaseLengthMinus44;\n\
    \    let digitBaseLengthMinus45;\n    let digitBaseLengthMinus46;\n    let digitBaseLengthMinus47;\n\
    \    let digitBaseLengthMinus48;\n    let digitBaseLengthMinus", "    let baseNum\
    \ = base;\n    let numStr = x.toString();\n    let newNum = 0;\n    let newStr\
    \ = \"\";\n    let lastChar = \"\";\n    let lastBase = 0;\n    let lastCharBase\
    \ = 0;\n    let lastBaseStr = \"\";\n    let lastCharBaseStr = \"\";\n    let\
    \ lastBaseStrLen = 0;\n    let lastCharBaseStrLen = 0;\n    let lastBaseStrDigits\
    \ = 0;\n    let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit = 0;\n  \
    \  let lastCharBaseStrDigit = 0;\n    let lastBaseStrDigits = 0;\n    let lastCharBaseStrDigits\
    \ = 0;\n    let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigit = 0;\n   \
    \ let lastBaseStrDigits = 0;\n    let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit\
    \ = 0;\n    let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit = 0;\n  \
    \  let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigits\
    \ = 0;\n    let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigits = 0;\n  \
    \  let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit\
    \ = 0;\n    let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit = 0;\n  \
    \  let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigits\
    \ = 0;\n    let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigits = 0;\n  \
    \  let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit\
    \ = 0;\n    let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit = 0;\n  \
    \  let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigits\
    \ = 0;\n    let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigits = 0;\n  \
    \  let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit\
    \ = 0;\n    let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit = 0;\n  \
    \  let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigits\
    \ = 0;\n    let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigits = 0;\n  \
    \  let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit\
    \ = 0;\n    let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit = 0;\n  \
    \  let lastCharBaseStrDigits = 0;\n    let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigits\
    \ = 0;\n    let lastBaseStrDigit = 0;\n    let lastCharBaseStrDigits = 0;\n  \
    \  let lastBaseStrDigit = 0;\n    let lastChar", "    let result = \"\";\n   \
    \ let digits = \"\";\n    let base10 = \"\";\n    let base2 = \"\";\n    let base3\
    \ = \"\";\n    let base4 = \"\";\n    let base5 = \"\";\n    let base6 = \"\"\
    ;\n    let base7 = \"\";\n    let base8 = \"\";\n    let base9 = \"\";\n    let\
    \ base10a = \"\";\n    let base10b = \"\";\n    let base10c = \"\";\n    let base10d\
    \ = \"\";\n    let base10e = \"\";\n    let base10f = \"\";\n    let base10g =\
    \ \"\";\n    let base10h = \"\";\n    let base10i = \"\";\n    let base10j = \"\
    \";\n    let base10k = \"\";\n    let base10l = \"\";\n    let base10m = \"\"\
    ;\n    let base10n = \"\";\n    let base10o = \"\";\n    let base10p = \"\";\n\
    \    let base10q = \"\";\n    let base10r = \"\";\n    let base10s = \"\";\n \
    \   let base10t = \"\";\n    let base10u = \"\";\n    let base10v = \"\";\n  \
    \  let base10w = \"\";\n    let base10x = \"\";\n    let base10y = \"\";\n   \
    \ let base10z = \"\";\n    let base10aa = \"\";\n    let base10ab = \"\";\n  \
    \  let base10ac = \"\";\n    let base10ad = \"\";\n    let base10ae = \"\";\n\
    \    let base10af = \"\";\n    let base10ag = \"\";\n    let base10ah = \"\";\n\
    \    let base10ai = \"\";\n    let base10aj = \"\";\n    let base10ak = \"\";\n\
    \    let base10al = \"\";\n    let base10am = \"\";\n    let base10an = \"\";\n\
    \    let base10ao = \"\";\n    let base10ap = \"\";\n    let base10aq = \"\";\n\
    \    let base10ar = \"\";\n    let base10as = \"\";\n    let base10at = \"\";\n\
    \    let base10au = \"\";\n    let base10av = \"\";\n    let base10aw = \"\";\n\
    \    let base10ax = \"\";\n    let base10ay = \"\";\n    let base10az = \"\";\n\
    \    let base10ba = \"\";\n    let base10bb = \"\";\n    let base10bc = \"\";\n\
    \    let base10bd = \"\";\n    let base10be = \"\";\n    let base10bf = \"\";\n\
    \    let base10bg = \"\";\n    let base10bh = \"\";\n    let base10bi = \"\";\n\
    \    let base10bj = \"\";\n    let base10bk = \"\";\n    let base10bl = \"\";\n\
    \    let base10bm = \"\";\n    let base10bn = \"\";\n    let base10bo = \"\";\n\
    \    let base10bp = \"\";\n    let base10bq = \"\";\n    let base10br = \"\";\n\
    \    let base10bs = \"\";\n    let base10bt = \"\";\n    let base10bu = \"\";\n\
    \    let base10bv = \"\";\n    let base10bw = \"\";", "    let result = \"\";\n\
    \    let baseNum = base;\n    while (x > 0) {\n        if (x % baseNum == 0) {\n\
    \            result += baseNum;\n        }\n        x /= baseNum;\n        baseNum\
    \ *= 10;\n    }\n    return result;\n}\n", "  let result = '';\n  let digits =\
    \ x;\n  while (digits > 0) {\n    if (digits % base === 0) {\n      digits = digits\
    \ / base;\n    } else {\n      digits = digits % base;\n    }\n    result = digits;\n\
    \  }\n  return result;\n}\n", "  let result = \"\";\n  let digits = \"\";\n  while\
    \ (x > 0) {\n    digits = digits + x.toString().charAt(0);\n    x = Math.floor(x\
    \ / base);\n  }\n  while (digits.length < base) {\n    digits = \"0\" + digits;\n\
    \  }\n  result = digits;\n  return result;\n}\n", "    var str = x.toString(base);\n\
    \    var l = str.length;\n    if (l < base) {\n        str = Array(base - l).join(0)\
    \ + str;\n    }\n    return str;\n}\n", "  let res = \"\";\n  while (x > 0) {\n\
    \    res += (x % base) + \"\";\n    x = Math.floor(x / base);\n  }\n  return res;\n\
    }\n", "  if (base < 1 || base > 10) {\n    throw new Error(\"base must be between\
    \ 1 and 10\");\n  }\n  let result = \"\";\n  while (x > 0) {\n    result = base_digits[x\
    \ % base] + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n}\n",
  "    let result: string = \"\";\n    while (x >= base) {\n        result += String.fromCharCode(x\
    \ % base);\n        x = Math.floor(x / base);\n    }\n    result += String.fromCharCode(x);\n\
    \    return result;\n}\n", "  const str = x.toString(base);\n  return str.length\
    \ < base ? str + Array(base - str.length + 1).join('0') : str;\n}\n", "  let res\
    \ = \"\";\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n\
    \  }\n  return res;\n}\n", "  let result = \"\";\n  let digits = \"\";\n  let\
    \ baseDigits = base;\n  while (x > 0) {\n    digits = digits.length < baseDigits\
    \ ? digits + x.toString() : x.toString().substring(0, baseDigits);\n    x = Math.floor(x\
    \ / base);\n  }\n  while (digits.length > 0) {\n    result += digits.substring(0,\
    \ baseDigits);\n    digits = digits.substring(baseDigits);\n  }\n  return result;\n\
    }\n", "    const digits = baseToString(base);\n    const result = \"\";\n    for\
    \ (let i = 0; i < digits.length; i += 1) {\n        const digit = digits[i];\n\
    \        result += digit;\n        if (x % base === 0) {\n            result +=\
    \ digit;\n            x /= base;\n        }\n    }\n    return result;\n}\n",
  "    let base10 = Math.pow(base, 10);\n    let base = Math.pow(base, base);\n  \
    \  let result = \"\";\n    let remainder = 0;\n    let quotient = 0;\n    while\
    \ (x > 0) {\n        remainder = x % base;\n        quotient = x / base;\n   \
    \     result = remainder + base10[quotient] + result;\n        x = remainder;\n\
    \    }\n    return result;\n}\n", "  if (base < 2 || base > 36) {\n    throw new\
    \ RangeError('The base must be between 2 and 36');\n  }\n  if (base === 10) {\n\
    \    return String(x);\n  }\n  if (base === 16) {\n    return pad0(x.toString(16),\
    \ 4);\n  }\n  return pad0(x.toString(base), base);\n}\n", "  const str = x.toString(base);\n\
    \  return str.length < base ? str + Array(base - str.length + 1).join(\"0\") :\
    \ str;\n}\n", "  if (base < 2 || base > 36) {\n    throw new Error('base must\
    \ be between 2 and 36')\n  }\n  const digits = x.toString(base).split('')\n  const\
    \ new_digits = []\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i]\
    \ === '0') {\n      new_digits.push('1')\n    } else {\n      new_digits.push(digits[i])\n\
    \    }\n  }\n  return new_digits.join('')\n}\n", "    if (base < 2 || base > 36)\
    \ {\n        throw new RangeError(\"Base must be between 2 and 36\");\n    }\n\
    \    if (base === 10) {\n        return String(x);\n    }\n    if (base === 16)\
    \ {\n        return pad(x.toString(16), 4);\n    }\n    if (base === 8) {\n  \
    \      return pad(x.toString(8), 4);\n    }\n    if (base === 2) {\n        return\
    \ pad(x.toString(2), 8);\n    }\n    if (base === 16) {\n        return pad(x.toString(16),\
    \ 8);\n    }\n    if (base === 10) {\n        return pad(x.toString(10), 8);\n\
    \    }\n    if (base === 8) {\n        return pad(x.toString(8), 8);\n    }\n\
    \    if (base === 2) {\n        return pad(x.toString(2), 8);\n    }\n    if (base\
    \ === 16) {\n        return pad(x.toString(16), 8);\n    }\n    if (base === 10)\
    \ {\n        return pad(x.toString(10), 8);\n    }\n    if (base === 8) {\n  \
    \      return pad(x.toString(8), 8);\n    }\n    if (base === 2) {\n        return\
    \ pad(x.toString(2), 8);\n    }\n    if (base === 16) {\n        return pad(x.toString(16),\
    \ 8);\n    }\n    if (base === 10) {\n        return pad(x.toString(10), 8);\n\
    \    }\n    if (base === 8) {\n        return pad(x.toString(8), 8);\n    }\n\
    \    if (base === 2) {\n        return pad(x.toString(2), 8);\n    }\n    if (base\
    \ === 16) {\n        return pad(x.toString(16), 8);\n    }\n    if (base === 10)\
    \ {\n        return pad(x.toString(10), 8);\n    }\n    if (base === 8) {\n  \
    \      return pad(x.toString(8), 8);\n    }\n    if (base === 2) {\n        return\
    \ pad(x.toString(2), 8);\n    }\n    if (base === 16) {\n        return pad(x.toString(16),\
    \ 8);\n    }\n    if (base === 10) {\n        return pad(x.toString(10), 8);\n\
    \    }\n    if (base === 8) {\n        return pad(x.toString(8), 8);\n    }\n\
    \    if (base === 2) {\n        return pad(x.toString(2), 8);\n    }\n    if (base\
    \ === 16) {\n        return pad(x.toString(16), 8);\n    }\n    if (base === 10)\
    \ {\n        return pad(x.toString(10), 8);\n    }\n    if (base === 8) {\n  \
    \      return pad(x.toString(8), 8);\n    }\n    if (base === 2) {\n        return\
    \ pad(x.toString(2), 8);\n    }\n    if (base === 16) {\n        return pad(x.toString(16),\
    \ 8);\n    }\n    if (base === 10) {\n        return pad(x.toString(10), 8);\n\
    \    }\n    if (base === 8) {\n        return pad(x.toString(8), ", "  let s =\
    \ \"\"\n  let sign = \"\"\n  if (x < 0) {\n    sign = \"-\"\n    x = -x\n  }\n\
    \  if (base < 0 || base > 36) {\n    throw new Error(\"base must be between 0\
    \ and 36\")\n  }\n  if (base === 10) {\n    s += \"0\"\n  }\n  while (x > 0) {\n\
    \    const digit = x % base\n    x /= base\n    s += digit\n  }\n  return sign\
    \ + s\n}\n", "    var baseNum = base;\n    var baseStr = \"\";\n    var numStr\
    \ = x.toString();\n    var numStrLen = numStr.length;\n    if (numStrLen === 1)\
    \ {\n        baseStr += numStr;\n    } else if (numStrLen > baseNum) {\n     \
    \   var numStrLenMin = Math.min(numStrLen, baseNum);\n        baseNum = numStrLenMin;\n\
    \        baseStr += numStr.substring(0, numStrLenMin);\n    }\n    while (baseNum\
    \ > 0) {\n        var remainder = numStr.substring(0, baseNum);\n        baseNum--;\n\
    \        baseStr += remainder;\n    }\n    return baseStr;\n}\n", "  let str =\
    \ x.toString(base);\n  let res = \"\";\n  while (str.length < base) {\n    res\
    \ = \"0\" + res;\n  }\n  return res;\n}\n", "    let baseNum = base;\n    let\
    \ numStr = x.toString();\n    let newNumStr = \"\";\n    let isNegative = false;\n\
    \    if (numStr.charAt(0) === \"-\") {\n        isNegative = true;\n        numStr\
    \ = numStr.substr(1);\n    }\n    let numArr = numStr.split(\"\");\n    let baseNumArr\
    \ = numArr.map(function (numStr) {\n        return parseInt(numStr, baseNum);\n\
    \    });\n    let newBaseNumArr = baseNumArr.map(function (num) {\n        return\
    \ num.toString(baseNum);\n    });\n    for (let i = 0; i < numArr.length; i++)\
    \ {\n        newNumStr += newBaseNumArr[i];\n    }\n    if (isNegative) {\n  \
    \      newNumStr = \"-\" + newNumStr;\n    }\n    return newNumStr;\n}\n", " \
    \ let result = \"\";\n  let sign = \"\";\n  if (x < 0) {\n    sign = \"-\";\n\
    \    x = -x;\n  }\n  if (x < base) {\n    let tmp = x;\n    x = base;\n    base\
    \ = tmp;\n  }\n  while (x > 0) {\n    let remainder = x % base;\n    result +=\
    \ String.fromCharCode(remainder + 65);\n    x = Math.floor(x/base);\n  }\n  if\
    \ (sign === \"-\") {\n    result = result.substr(1);\n  }\n  return result;\n\
    }\n", "  let result = \"\";\n  let baseNum = base;\n  while (baseNum > 0) {\n\
    \    if (x % baseNum == 0) {\n      result += baseNum;\n    } else {\n      result\
    \ += x.toString(baseNum);\n    }\n    x /= baseNum;\n    baseNum--;\n  }\n  return\
    \ result;\n}\n", "  let result = \"\";\n  let digits = \"\";\n  let baseDigits\
    \ = base;\n  let xDigits = x;\n  while (baseDigits > 0) {\n    digits = baseDigits.toString();\n\
    \    baseDigits = baseDigits % base;\n  }\n  while (digits != \"\") {\n    result\
    \ += parseInt(digits, base);\n    xDigits = xDigits / base;\n  }\n  return result;\n\
    }\n", "  if (base < 2 || base > 36) {\n    throw Error(`Invalid base ${base}`);\n\
    \  }\n  const digits = String(base).split(\"\");\n  let res = \"\";\n  for (let\
    \ i = 0; i < digits.length; i++) {\n    res = res + digits[x % base] + digits[i];\n\
    \    x = Math.floor(x / base);\n  }\n  return res;\n}\n", "    let s = \"\" +\
    \ x;\n    let l = s.length;\n    let baseLen = base.length;\n    if (l > baseLen)\
    \ {\n        throw new Error(`Base ${base} is too large`);\n    }\n    let newBase\
    \ = base;\n    let newBaseLen = newBase.length;\n    if (newBaseLen > baseLen)\
    \ {\n        throw new Error(`Base ${base} is too large`);\n    }\n    if (newBaseLen\
    \ < baseLen) {\n        throw new Error(`Base ${base} is too small`);\n    }\n\
    \    let newBaseString = newBase;\n    let newBaseStringLen = newBaseString.length;\n\
    \    for (let i = 0; i < l; i++) {\n        let c = s.charAt(i);\n        if (c\
    \ >= newBaseString[0] && c <= newBaseString[newBaseStringLen - 1]) {\n       \
    \     newBaseString = newBaseString.substr(0, newBaseStringLen - 1);\n       \
    \     break;\n        }\n    }\n    let newBaseNumber = parseInt(newBaseString,\
    \ base);\n    let newBaseNumberLen = newBaseNumber.length;\n    for (let i = 0;\
    \ i < l; i++) {\n        let c = s.charAt(i);\n        if (c >= newBaseString[0]\
    \ && c <= newBaseString[newBaseStringLen - 1]) {\n            newBaseNumber =\
    \ newBaseNumber / newBaseString.length;\n            break;\n        }\n    }\n\
    \    let newBaseString = newBaseNumber.toString(base);\n    return newBaseString;\n\
    }\n", "  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result\
    \ = baseNum.toString() + (x % baseNum).toString();\n    x = Math.floor(x / baseNum);\n\
    \    baseNum *= base;\n  }\n  return result;\n}\n", "    if (base < 1 || base\
    \ > 10) {\n        throw new RangeError(\"Base must be between 1 and 10\");\n\
    \    }\n    let result = \"\";\n    while (x > 0) {\n        result = base_digits[x\
    \ % base] + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n\
    }\n", "  let res = \"\";\n  let sign = \"\";\n  if (x < 0) {\n    sign = \"-\"\
    ;\n    x = -x;\n  }\n  if (x < base) {\n    res += x;\n  } else {\n    while (x\
    \ > 0) {\n      res += base;\n      x -= base;\n    }\n  }\n  return sign + res;\n\
    }\n", "    let result: string = \"\";\n    let digits: number[] = [];\n    let\
    \ baseDigits: number[] = [];\n    let baseString: string = \"\";\n    let i: number;\n\
    \    let j: number;\n    let baseStringDigits: number[] = [];\n    let baseStringDigits_length:\
    \ number = 0;\n    let baseStringDigits_length_max: number = 0;\n    let baseStringDigits_length_min:\
    \ number = 0;\n    let baseStringDigits_length_diff: number = 0;\n    let baseStringDigits_length_diff_max:\
    \ number = 0;\n    let baseStringDigits_length_diff_min: number = 0;\n    let\
    \ baseStringDigits_length_diff_percent: number = 0;\n    let baseStringDigits_length_diff_percent_max:\
    \ number = 0;\n    let baseStringDigits_length_diff_percent_min: number = 0;\n\
    \    let baseStringDigits_length_diff_percent_percent: number = 0;\n    let baseStringDigits_length_diff_percent_percent_max:\
    \ number = 0;\n    let baseStringDigits_length_diff_percent_percent_min: number\
    \ = 0;\n    let baseStringDigits_length_diff_percent_percent_percent: number =\
    \ 0;\n    let baseStringDigits_length_diff_percent_percent_max: number = 0;\n\
    \    let baseStringDigits_length_diff_percent_percent_min: number = 0;\n    let\
    \ baseStringDigits_length_diff_percent_percent_percent: number = 0;\n    let baseStringDigits_length_diff_percent_percent_max:\
    \ number = 0;\n    let baseStringDigits_length_diff_percent_percent_min: number\
    \ = 0;\n    let baseStringDigits_length_diff_percent_percent_percent: number =\
    \ 0;\n    let baseStringDigits_length_diff_percent_percent_max: number = 0;\n\
    \    let baseStringDigits_length_diff_percent_percent_min: number = 0;\n    let\
    \ baseStringDigits_length_diff_percent_percent_percent: number = 0;\n    let baseStringDigits_length_diff_percent_percent_max:\
    \ number = 0;\n    let baseStringDigits_length_diff_percent_percent_min: number\
    \ = 0;\n    let baseStringDigits_length_diff_percent_percent_percent: number =\
    \ 0;\n    let baseStringDigits_length_diff_percent_percent_max: number = 0;\n\
    \    let baseStringDigits_length_diff_percent_percent_min: number = 0;\n    let\
    \ baseStringDigits_length_diff_percent_percent_percent: number = 0;\n    let baseStringDigits_length_diff_percent_percent_max:\
    \ number = 0;\n    let baseStringDigits_length_diff_percent_percent_min: number\
    \ = 0;\n    let baseStringDigits_length_diff_percent_percent_percent: number =\
    \ 0;\n    let baseStringDigits_length_diff_percent_percent_max: number = 0;\n\
    \    let baseStringDigits_length_diff_percent_percent_min: number = 0;\n    let\
    \ baseStringDigits_length_diff_percent_percent_percent: number = 0;\n    let baseStringDigits_length_diff_percent_percent_max:\
    \ number = 0;\n    let ", "  let s = \"\"\n  while (x > 0) {\n    s = base_digits[x\
    \ % base] + s\n    x = Math.floor(x / base)\n  }\n  return s\n}\n", "    let result\
    \ = \"\";\n    let baseNum = base;\n    let numStr = x.toString();\n    let numLen\
    \ = numStr.length;\n    let baseLen = baseNum.toString().length;\n    while (numLen\
    \ >= baseLen) {\n        let remainder = numLen - baseLen;\n        let quotient\
    \ = Math.floor(remainder / baseNum);\n        let remainderMod = remainder - quotient\
    \ * baseNum;\n        result = numStr.substring(0, quotient) + result;\n     \
    \   numStr = numStr.substring(quotient + 1);\n        numLen = numStr.length;\n\
    \    }\n    result = numStr + result;\n    return result;\n}\n", "    let result\
    \ = \"\";\n    let sign = \"\";\n    if (x < 0) {\n        sign = \"-\";\n   \
    \     x = -x;\n    }\n    let base10 = Math.pow(base, 10);\n    let base = Math.pow(base,\
    \ base);\n    while (x > 0) {\n        let remainder = x % base;\n        x =\
    \ Math.floor(x/base);\n        result = remainder + result;\n    }\n    if (sign\
    \ === \"-\") {\n        result = -result;\n    }\n    return result;\n}\n", " \
    \   const digits = base_to_digits(base);\n    let s = \"\";\n    for (let i =\
    \ digits.length - 1; i >= 0; i--) {\n        s += digits[i] * x;\n        x /=\
    \ base;\n    }\n    return s;\n}\n", "    let str = x.toString(base);\n    let\
    \ len = str.length;\n    let res = \"\";\n    while (len > 0) {\n        res +=\
    \ str.charAt(len % base);\n        len--;\n    }\n    return res;\n}\n", "   \
    \ let num: number = Math.pow(base, x);\n    let str: string = num.toString(base);\n\
    \    return str;\n}\n", "    let baseNum = base;\n    let baseStr = \"\";\n  \
    \  while (baseNum > 0) {\n        baseStr += (baseNum % 10) + \"\";\n        baseNum\
    \ = Math.floor(baseNum / 10);\n    }\n    return baseStr + x;\n}\n", "  let result\
    \ = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    let remainder = x % baseNum;\n\
    \    result += String(remainder);\n    x = Math.floor(x / baseNum);\n    baseNum\
    \ *= base;\n  }\n  return result;\n}\n", "    const digits = base.toString().split('');\n\
    \    let result = '';\n    for (let i = 0; i < digits.length; i++) {\n       \
    \ const digit = digits[i];\n        if (digit === '0') {\n            result +=\
    \ x;\n        } else {\n            result += digit;\n        }\n    }\n    return\
    \ result;\n}\n", "  let result = \"\";\n  let digits = \"\";\n  while (x > 0)\
    \ {\n    digits = digits + x.toString().charAt(0);\n    x = Math.floor(x / base);\n\
    \  }\n  while (digits.length < base) {\n    digits = \"0\" + digits;\n  }\n  result\
    \ = digits;\n  return result;\n}\n", "  let res = \"\";\n  while (x > 0) {\n \
    \   res = base_digits[x % base] + res;\n    x = Math.floor(x / base);\n  }\n \
    \ return res;\n}\n", "    var digits = x.toString(base).split(\"\").reverse();\n\
    \    var r = \"\";\n    for (var i = 0; i < digits.length; i++) {\n        var\
    \ d = digits[i];\n        if (d !== \"0\") {\n            r = r + d;\n       \
    \ }\n    }\n    return r;\n}\n", "  if (base < 2 || base > 36) {\n    throw new\
    \ Error(\"base must be between 2 and 36\");\n  }\n  let res = \"\";\n  let digits\
    \ = String(Math.abs(x)).split(\"\");\n  let baseDigits = String(base).split(\"\
    \");\n  for (let i = 0; i < digits.length; i++) {\n    let digit = digits[i];\n\
    \    let baseDigit = baseDigits[i];\n    if (digit == baseDigit) {\n      res\
    \ += digit;\n    } else {\n      let base = Math.pow(baseDigit, digits.length);\n\
    \      let newDigit = Math.round(base * digit);\n      res += newDigit;\n    }\n\
    \  }\n  return res;\n}\n", "    if (base < 1 || base > 10) {\n        throw new\
    \ RangeError(\"Base must be between 1 and 10\");\n    }\n    let result = \"\"\
    ;\n    while (x > 0) {\n        let remainder = x % base;\n        result += String.fromCharCode(base\
    \ - remainder);\n        x = Math.floor(x / base);\n    }\n    return result;\n\
    }\n", "  if (base < 2 || base > 36) {\n    throw new Error('base must be between\
    \ 2 and 36')\n  }\n  if (base === 10) {\n    return x.toString()\n  }\n  if (base\
    \ === 16) {\n    return pad(x.toString(16), 4)\n  }\n  const sign = x < 0 ? -1\
    \ : 1\n  const digits = String(Math.abs(x)).split('')\n  const magnitude = digits.length\n\
    \  let decimal = ''\n  let rest = digits[magnitude]\n  while (digits.length -\
    \ magnitude >= 3) {\n    // extract 3 digits at a time\n    rest = parseInt(digits.splice(magnitude,\
    \ 3).join(''), 10)\n    // remove trailing zeros from each extracted number\n\
    \    while (!rest && magnitude) {\n      digits.pop()\n      magnitude--\n   \
    \   rest = digits[magnitude]\n    }\n  }\n  decimal = digits.length === 1 ? 0\
    \ : ''\n  while (digits.length && rest) {\n    rest /= base\n    decimal += rest.toString(base)\n\
    \  }\n  // restore sign of the number\n  return sign * parseInt(decimal, 10)\n\
    }\n", "  let result = \"\";\n  let digits = \"\";\n  let baseDigits = \"\";\n\
    \  let basePower = \"\";\n  let power = 0;\n  let digit;\n  let i;\n\n  while\
    \ (x > 0) {\n    digit = x % base;\n    digits = digit.toString(base);\n    baseDigits\
    \ = baseDigits.toString(base);\n    basePower = basePower.toString(base);\n  \
    \  power = basePower.length - digits.length;\n    result += digits + baseDigits.substr(0,\
    \ power);\n    x = Math.floor(x / base);\n  }\n\n  return result;\n}\n", "  if\
    \ (base < 0 || base > 10) {\n    throw new Error(\"base must be between 0 and\
    \ 10\");\n  }\n  if (base === 10) {\n    return x.toString();\n  }\n  if (base\
    \ === 8) {\n    return pad(x, 2);\n  }\n  if (base === 16) {\n    return pad(x,\
    \ 4);\n  }\n  if (base === 10) {\n    return pad(x, 8);\n  }\n  if (base === 16)\
    \ {\n    return pad(x, 16);\n  }\n  if (base === 10) {\n    return pad(x, 10);\n\
    \  }\n  if (base === 16) {\n    return pad(x, 16);\n  }\n  if (base === 10) {\n\
    \    return pad(x, 10);\n  }\n  if (base === 16) {\n    return pad(x, 16);\n \
    \ }\n  if (base === 10) {\n    return pad(x, 10);\n  }\n  if (base === 16) {\n\
    \    return pad(x, 16);\n  }\n  if (base === 10) {\n    return pad(x, 10);\n \
    \ }\n  if (base === 16) {\n    return pad(x, 16);\n  }\n  if (base === 10) {\n\
    \    return pad(x, 10);\n  }\n  if (base === 16) {\n    return pad(x, 16);\n \
    \ }\n  if (base === 10) {\n    return pad(x, 10);\n  }\n  if (base === 16) {\n\
    \    return pad(x, 16);\n  }\n  if (base === 10) {\n    return pad(x, 10);\n \
    \ }\n  if (base === 16) {\n    return pad(x, 16);\n  }\n  if (base === 10) {\n\
    \    return pad(x, 10);\n  }\n  if (base === 16) {\n    return pad(x, 16);\n \
    \ }\n  if (base === 10) {\n    return pad(x, 10);\n  }\n  if (base === 16) {\n\
    \    return pad(x, 16);\n  }\n  if (base === 10) {\n    return pad(x, 10);\n \
    \ }\n  if (base === 16) {\n    return pad(x, 16);\n  }\n  if (base === 10) {\n\
    \    return pad(x, 10);\n  }\n  if (base === 16) {\n    return pad(x, 16);\n \
    \ }\n  if (base === 10) {\n    return pad(x, 10);\n  }\n  if (base === 16) {\n\
    \    return pad(x, 16);\n  }\n  if (base === 10) {\n    return pad(x, 10);\n \
    \ }\n  if (base === 16) {\n    return pad(x, 16);\n  }\n  if (base === 10) {\n\
    \    return pad(x, 10);\n  }\n  if (base === 16) {\n    return pad(x, 16);\n \
    \ }\n  if (base === 10) {\n    return pad(x, 10);\n  }\n  if (base === 16) {\n\
    \    return pad(x, 16);\n  }\n  if (base === 10) {\n    return pad(x, 10);\n \
    \ }\n  if (base === 16) {\n    return pad(x, 16);\n  }\n  if (base === 10) {\n\
    \    return pad(x, 10);\n  }\n", "    if (base < 2 || base > 36) {\n        throw\
    \ new RangeError(\"Invalid base\");\n    }\n    if (base === 10) {\n        return\
    \ numeral(x).toString(base);\n    }\n    if (base === 8) {\n        return numeral(x).padStart(base,\
    \ \"0\");\n    }\n    return numeral(x).padStart(base, \"0\").split(\"\").reverse().join(\"\
    \");\n}\n", "    const base_to_num = base < 10 ? 10 : base;\n    const num_to_base\
    \ = base_to_num < 10 ? 10 : base_to_num;\n    const x = Math.abs(x);\n    const\
    \ y = Math.pow(10, num_to_base - base);\n    return Math.round(x * y) / y;\n}\n",
  "  let res = \"\";\n  let sign = \"\";\n  if (x > 0) {\n    sign = \"+\";\n    x\
    \ = Math.abs(x);\n  }\n  if (x < base) {\n    res += x;\n  } else {\n    while\
    \ (x > 0) {\n      res += base;\n      x -= base;\n    }\n  }\n  return sign +\
    \ res;\n}\n", "  let res = \"\";\n  let sign = \"\";\n  if (x < 0) {\n    sign\
    \ = \"-\";\n    x = -x;\n  }\n  if (x < base) {\n    res += x;\n  } else {\n \
    \   while (x >= base) {\n      res += base;\n      x -= base;\n    }\n    res\
    \ += x;\n  }\n  return sign + res;\n}\n", "  let result = \"\";\n  let digits\
    \ = \"\";\n  while (x > 0) {\n    digits = digits + x.toString().charAt(0);\n\
    \    x = Math.floor(x/base);\n  }\n  while (digits.length < base) {\n    digits\
    \ = \"0\" + digits;\n  }\n  result = digits;\n  return result;\n}\n", "  let result\
    \ = \"\";\n  let digits = \"\";\n  let baseNum = base;\n  while (x > 0) {\n  \
    \  digits = digits + x.toString().charAt(0);\n    x = Math.floor(x / baseNum);\n\
    \  }\n  while (digits.length < baseNum) {\n    digits = \"0\" + digits;\n  }\n\
    \  result = digits + result;\n  return result;\n}\n", "  let digits: string[]\
    \ = [];\n  let baseNum: number = base;\n  let num: number = x;\n  while (num >\
    \ 0) {\n    digits.push(num % baseNum);\n    num = Math.floor(num / baseNum);\n\
    \    baseNum *= base;\n  }\n  return digits.reverse().join('');\n}\n", "  if (base\
    \ < 2 || base > 36) {\n    throw Error(`Invalid base ${base}`);\n  }\n  const\
    \ digits = baseToString(base);\n  const digit = digits[x - 1];\n  return digit\
    \ + digit;\n}\n", "  let result: string = x.toString(base);\n  while (result.length\
    \ < base) {\n    result = \"0\" + result;\n  }\n  return result;\n}\n", "  let\
    \ res = \"\";\n  let x = x.toString();\n  let base = base.toString();\n  if (base\
    \ === \"10\") {\n    return x;\n  }\n  if (base === \"0\") {\n    return x;\n\
    \  }\n  if (base === \"1\") {\n    return x.split(\"\").reverse().join(\"\");\n\
    \  }\n  if (base === \"2\") {\n    return x.split(\"\").reverse().join(\"\").split(\"\
    \").reverse().join(\"\");\n  }\n  if (base === \"3\") {\n    return x.split(\"\
    \").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
    \");\n  }\n  if (base === \"4\") {\n    return x.split(\"\").reverse().join(\"\
    \").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\
    \").reverse().join(\"\");\n  }\n  if (base === \"5\") {\n    return x.split(\"\
    \").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
    \").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n  }\n\
    \  if (base === \"6\") {\n    return x.split(\"\").reverse().join(\"\").split(\"\
    \").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
    \").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n  }\n\
    \  if (base === \"7\") {\n    return x.split(\"\").reverse().join(\"\").split(\"\
    \").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
    \").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\
    \").reverse().join(\"\");\n  }\n  if (base === \"8\") {\n    return x.split(\"\
    \").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
    \").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\
    \").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
    \").split(\"\").reverse().join(\"\");\n  }\n  if (base === \"9\") {\n    return\
    \ x.split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\
    \").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
    \").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\
    \").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
    \");\n  }\n  if (base === \"10\") {\n    return x.split(", "  if (base < 2 ||\
    \ base > 36) {\n    throw Error(`Invalid base ${base}`);\n  }\n  const digits\
    \ = String(base).split('');\n  let result = '';\n  let i = 0;\n  while (i < x)\
    \ {\n    const digit = digits[i % base];\n    result += digit;\n    i++;\n  }\n\
    \  return result;\n}\n", "    var digits = x.toString(base);\n    var l = digits.length;\n\
    \    if (l < base) {\n        digits = Array(base - l).join('0') + digits;\n \
    \   }\n    return digits;\n}\n", "    let digits = String(base).split(\"\");\n\
    \    let res = \"\";\n    for (let i = 0; i < digits.length; i++) {\n        res\
    \ += digits[i] * Math.pow(base, digits.length - 1 - i);\n    }\n    return res;\n\
    }\n", "    let s = \"\" + x;\n    let l = s.length - 1;\n    let r = \"\";\n \
    \   while (l >= 0) {\n        r = s.charAt(l) + r;\n        if (l == base) {\n\
    \            break;\n        }\n        l--;\n    }\n    return r;\n}\n", "  \
    \  let digits: number[] = [];\n    let basestring: string = \"\";\n    let i:\
    \ number;\n    let j: number;\n    let k: number;\n    let l: number;\n    let\
    \ m: number;\n    let n: number;\n    let o: number;\n    let p: number;\n   \
    \ let q: number;\n    let r: number;\n    let s: number;\n    let t: number;\n\
    \    let u: number;\n    let v: number;\n    let w: number;\n    let x: number;\n\
    \    let y: number;\n    let z: number;\n    let A: number;\n    let B: number;\n\
    \    let C: number;\n    let D: number;\n    let E: number;\n    let F: number;\n\
    \    let G: number;\n    let H: number;\n    let I: number;\n    let J: number;\n\
    \    let K: number;\n    let L: number;\n    let M: number;\n    let N: number;\n\
    \    let O: number;\n    let P: number;\n    let Q: number;\n    let R: number;\n\
    \    let S: number;\n    let T: number;\n    let U: number;\n    let V: number;\n\
    \    let W: number;\n    let X: number;\n    let Y: number;\n    let Z: number;\n\
    \    let a: number;\n    let b: number;\n    let c: number;\n    let d: number;\n\
    \    let e: number;\n    let f: number;\n    let g: number;\n    let h: number;\n\
    \    let i: number;\n    let j: number;\n    let k: number;\n    let l: number;\n\
    \    let m: number;\n    let n: number;\n    let o: number;\n    let p: number;\n\
    \    let q: number;\n    let r: number;\n    let s: number;\n    let t: number;\n\
    \    let u: number;\n    let v: number;\n    let w: number;\n    let x: number;\n\
    \    let y: number;\n    let z: number;\n    let A: number;\n    let B: number;\n\
    \    let C: number;\n    let D: number;\n    let E: number;\n    let F: number;\n\
    \    let G: number;\n    let H: number;\n    let I: number;\n    let J: number;\n\
    \    let K: number;\n    let L: number;\n    let M: number;\n    let N: number;\n\
    \    let O: number;\n    let P: number;\n    let Q: number;\n    let R: number;\n\
    \    let S: number;\n    let T: number;\n    let U: number;\n    let V: number;\n\
    \    let W: number;\n    let X: number;\n    let Y: number;\n    let Z: number;\n\
    \    let a: number;\n    let b: number;\n    let c: number;\n    let d: number;\n\
    \    let e: number;\n    let f: number;\n    let g: number;\n    let h: number;\n\
    \    let i: number;\n    let j: number;\n    let k: number;\n    let l: number;\n\
    \    let m: number;\n    let n: number;\n    let o: number;\n    let p: number;\n\
    \    let q: number;\n    let r: number;\n    let s: number;\n    let t: number;\n\
    \    let u: number;\n    let v: number;\n    let w: number;\n    let x: number;\n\
    \    let y: number;\n    let z: number;\n    let A: number;\n    let B: number;\n\
    \    let C: number;", "    const base10 = Math.pow(base, 10);\n    return String(Math.round(x\
    \ * base10));\n}\n", "  let res = \"\";\n  let sign = \"\";\n  if (x < 0) {\n\
    \    sign = \"-\";\n    x = -x;\n  }\n  while (x) {\n    const digit = x % base;\n\
    \    res += digit;\n    x /= base;\n  }\n  return sign + res;\n}\n", "  let res\
    \ = \"\";\n  let sign = \"\";\n  if (x < 0) {\n    sign = \"-\";\n    x = -x;\n\
    \  }\n  if (x < base) {\n    res += x;\n  } else {\n    while (x >= base) {\n\
    \      res += base;\n      x -= base;\n    }\n    res += x;\n  }\n  return sign\
    \ + res;\n}\n", "  const str = x.toString(base);\n  return str.length < base ?\
    \ str + Array(base - str.length + 1).join(\"0\") : str;\n}\n", "    let base10\
    \ = Math.pow(base, 10);\n    let base = Math.pow(base, base);\n    let result\
    \ = \"\";\n    let remainder = 0;\n    let quotient = 0;\n    while (x > 0) {\n\
    \        remainder = x%base;\n        quotient = x/base;\n        result = remainder\
    \ + quotient + result;\n        x = remainder;\n    }\n    while (result > base10)\
    \ {\n        result = result%base;\n    }\n    return result;\n}\n", "    let\
    \ result = \"\";\n    let baseNum = base;\n    while (x > 0) {\n        if (x\
    \ % baseNum == 0) {\n            result += x;\n        }\n        x /= baseNum;\n\
    \    }\n    return result;\n}\n", "    let s = \"\" + x;\n    let n = s.length;\n\
    \    let bases = \"\";\n    while (n > 0) {\n        let d = n % base;\n     \
    \   s = String.fromCharCode(d + 64) + s;\n        n = Math.floor(n / base);\n\
    \        bases = String.fromCharCode(d + 64) + bases;\n    }\n    return s;\n\
    }\n", "    var r = \"\";\n    var baseNum = base;\n    var baseStr = \"\";\n \
    \   var i;\n    var j;\n    if (baseNum < 10) {\n        baseStr = \"0\";\n  \
    \      baseNum = baseNum.toString();\n    }\n    for (i = 0; i < baseNum.length;\
    \ i++) {\n        if (baseNum.charAt(i) != \"0\") {\n            baseStr += baseNum.charAt(i);\n\
    \        }\n    }\n    j = baseNum.length - 1;\n    for (i = j; i >= 0; i--) {\n\
    \        r = r + baseStr.charAt(i) * Math.pow(baseNum.length - i, base);\n   \
    \ }\n    return r;\n}\n", "    let s = \"\" + x;\n    while (s.length < base)\
    \ {\n        s = \"0\" + s;\n    }\n    return s;\n}\n", "    let baseNum = base;\n\
    \    let baseStr = \"\";\n    let baseStrLen = 0;\n    while (baseNum > 0) {\n\
    \        baseStr += (baseNum % 10) + \"\";\n        baseNum = Math.floor(baseNum\
    \ / 10);\n        baseStrLen++;\n    }\n    if (baseStrLen < base) {\n       \
    \ for (let i = baseStrLen; i < base; i++) {\n            baseStr += \"0\";\n \
    \       }\n    }\n    return baseStr;\n}\n", "  let result = \"\";\n  let digits\
    \ = \"\";\n  while (x > 0) {\n    digits = digits + x.toString().charAt(0);\n\
    \    x = Math.floor(x / base);\n  }\n  while (digits.length < base) {\n    digits\
    \ = \"0\" + digits;\n  }\n  result = digits;\n  return result;\n}\n", "  let result\
    \ = '';\n  let remainder = 0;\n  while (x > 0) {\n    remainder = x % base;\n\
    \    result += String.fromCharCode(base + remainder);\n    x = Math.floor(x /\
    \ base);\n  }\n  return result;\n}\n", "  let result = \"\";\n  let remainder\
    \ = 0;\n  while (x > 0) {\n    remainder = x % base;\n    result += String(base).charAt(remainder);\n\
    \    x = Math.floor(x / base);\n  }\n  return result;\n}\n", "    if (base < 2\
    \ || base > 36) {\n        throw new Error(`Invalid base ${base}`);\n    }\n \
    \   if (base === 10) {\n        return x.toString();\n    }\n    let res = \"\"\
    ;\n    let negative = false;\n    if (x < 0) {\n        negative = true;\n   \
    \     x = -x;\n    }\n    while (x >= base) {\n        res += base.toString();\n\
    \        x -= base;\n    }\n    if (negative) {\n        res = \"-\" + res;\n\
    \    }\n    return res;\n}\n", "    var r = \"\";\n    var s = \"\";\n    var\
    \ m = 1;\n    var n = x;\n    while (n > 0) {\n        r = base_digits[n] + r;\n\
    \        n /= base;\n    }\n    while (m > 0) {\n        s = base_digits[Math.floor(m\
    \ / base)] + s;\n        m %= base;\n    }\n    return r + s;\n}\n", "  if (base\
    \ < 0 || base > 10) {\n    throw new Error(\"base must be between 0 and 10\");\n\
    \  }\n  const str = x.toString();\n  const len = str.length;\n  const digits =\
    \ Math.pow(base, len);\n  let res = \"\";\n  for (let i = 0; i < len; i += 1)\
    \ {\n    res += digits[len - i - 1] * str.charAt(i);\n  }\n  return res;\n}\n",
  "    let s = \"\" + x;\n    let l = s.length;\n    let baseNum = parseInt(base);\n\
    \    let baseStr = \"\";\n    if (baseNum < 10) {\n        baseStr = \"0\";\n\
    \    }\n    while (baseNum > 0) {\n        baseNum = baseNum - 10;\n        baseStr\
    \ = baseStr + baseNum;\n    }\n    return s.substr(0, l) + baseStr;\n}\n", " \
    \ let s = \"\" + x;\n  let n = s.length;\n  let baseMinusBase = Math.pow(base,\
    \ n - 1);\n  let digits = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n\
    \    let digit = +s[i];\n    let newDigit = digit % baseMinusBase;\n    s = s.slice(0,\
    \ i) + String(newDigit) + s.slice(i + 1);\n  }\n  return s;\n}\n", "    let str\
    \ = x.toString(base);\n    let len = str.length;\n    if (len < base) {\n    \
    \    let zeros = Array(base - len + 1).join(\"0\");\n        str = zeros + str;\n\
    \    }\n    return str;\n}\n", "    let result = \"\";\n    let baseNum = base;\n\
    \    let baseNumString = baseNum.toString();\n    while (x > 0) {\n        if\
    \ (x % baseNum === 0) {\n            result += baseNumString;\n        }\n   \
    \     x /= baseNum;\n        baseNum *= baseNum;\n    }\n    return result;\n\
    }\n", "    let result = \"\";\n    let digits = \"\";\n    while (x >= base) {\n\
    \        digits = digits + x.toString().charAt(x - base);\n        x = x / base;\n\
    \    }\n    result = digits + x.toString();\n    return result;\n}\n", "    let\
    \ s = \"\" + x;\n    while (s.length < base) {\n        s = `0${s}`;\n    }\n\
    \    return s;\n}\n", "    let result = \"\";\n    let digits = \"\";\n    let\
    \ baseDigits = base;\n    let xDigits = x;\n    let xDigitsString = x.toString();\n\
    \    let xDigitsStringLength = xDigitsString.length;\n    let baseDigitsString\
    \ = base.toString();\n    let baseDigitsStringLength = baseDigitsString.length;\n\
    \    let xDigitsStringLength = xDigitsString.length;\n    let baseDigitsStringLength\
    \ = baseDigitsString.length;\n    let xDigitsStringLengthMinusOne = xDigitsStringLength\
    \ - 1;\n    let baseDigitsStringLengthMinusOne = baseDigitsStringLength - 1;\n\
    \    let xDigitsStringLengthMinusOneBase = xDigitsStringLengthMinusOne - baseDigitsStringLength;\n\
    \    let baseDigitsStringLengthMinusOneBase = baseDigitsStringLengthMinusOne -\
    \ baseDigitsStringLength;\n    let xDigitsStringLengthMinusOneBaseBase = xDigitsStringLengthMinusOneBase\
    \ - baseDigitsStringLengthMinusOne;\n    let baseDigitsStringLengthMinusOneBaseBase\
    \ = baseDigitsStringLengthMinusOneBase - baseDigitsStringLengthMinusOne;\n   \
    \ let xDigitsStringLengthMinusOneBaseBaseBase = xDigitsStringLengthMinusOneBaseBase\
    \ - baseDigitsStringLengthMinusOneBase;\n    let baseDigitsStringLengthMinusOneBaseBaseBase\
    \ = baseDigitsStringLengthMinusOneBaseBase - baseDigitsStringLengthMinusOneBase;\n\
    \    let xDigitsStringLengthMinusOneBaseBaseBaseBase = xDigitsStringLengthMinusOneBaseBaseBase\
    \ - baseDigitsStringLengthMinusOneBaseBase;\n    let baseDigitsStringLengthMinusOneBaseBaseBase\
    \ = baseDigitsStringLengthMinusOneBaseBaseBase - baseDigitsStringLengthMinusOneBaseBase;\n\
    \    let xDigitsStringLengthMinusOneBaseBaseBaseBase = xDigitsStringLengthMinusOneBaseBaseBaseBase\
    \ - baseDigitsStringLengthMinusOneBaseBaseBase;\n    let baseDigitsStringLengthMinusOneBaseBaseBaseBase\
    \ = baseDigitsStringLengthMinusOneBaseBaseBaseBase - baseDigitsStringLengthMinusOneBaseBaseBase;\n\
    \    let xDigitsStringLengthMinusOneBaseBaseBaseBase = xDigitsStringLengthMinusOneBaseBaseBaseBase\
    \ - baseDigitsStringLengthMinusOneBaseBaseBase;\n    let baseDigitsStringLengthMinusOneBaseBaseBaseBase",
  "  let result = \"\";\n  let remainder = 0;\n  while (x > 0) {\n    remainder =\
    \ x % base;\n    x = Math.floor(x/base);\n    result = remainder + result;\n \
    \ }\n  return result;\n}\n", "    let res = \"\";\n    let baseNum = base;\n \
    \   let numStr = x.toString();\n    let len = numStr.length;\n    let i = 0;\n\
    \    while (i < len) {\n        let char = numStr.charAt(i);\n        let num\
    \ = parseInt(char);\n        if (baseNum < 10) {\n            if (num < baseNum)\
    \ {\n                res += char;\n            } else {\n                res +=\
    \ \"0\";\n            }\n        } else {\n            res += char;\n        }\n\
    \        baseNum -= num;\n        i += 1;\n    }\n    return res;\n}\n", "  let\
    \ base10 = Math.pow(base, 10);\n  let x = Math.round(x * base10) / base10;\n \
    \ return x.toString();\n}\n", "  let result = \"\";\n  let sign = \"\";\n  if\
    \ (x > 0) {\n    sign = \"+\";\n    x = Math.abs(x);\n  } else if (x < 0) {\n\
    \    sign = \"-\";\n    x = Math.abs(x);\n  }\n  if (base < 2 || base > 36) {\n\
    \    throw \"Base must be between 2 and 36\";\n  }\n  if (base === 10) {\n   \
    \ result += sign + x;\n  } else {\n    while (x > 0) {\n      result += base_digits[x\
    \ % base];\n      x = Math.floor(x / base);\n    }\n  }\n  return result;\n}\n",
  "  let s = \"\" + x;\n  let n = s.length;\n  let baseNum = base;\n  while (n >=\
    \ baseNum) {\n    s = s.substr(0, n) + s.substr(n, baseNum) + base;\n    n -=\
    \ baseNum;\n  }\n  return s;\n}\n", "  let result = \"\";\n  let x = x.toString();\n\
    \  let base = base.toString();\n  if (base === \"10\") {\n    result += \"0\"\
    ;\n  }\n  let baseArray = base.split(\"\");\n  let baseArrayLength = baseArray.length;\n\
    \  for (let i = 0; i < baseArrayLength; i++) {\n    let baseChar = baseArray[i];\n\
    \    let x = x.split(baseChar);\n    let xLength = x.length;\n    for (let j =\
    \ 0; j < xLength; j++) {\n      let xChar = x[j];\n      if (xChar === \"0\")\
    \ {\n        result += \"0\";\n      } else {\n        result += xChar;\n    \
    \  }\n    }\n  }\n  return result;\n}\n", "  let r = \"\";\n  let x = x.toString();\n\
    \  let base = base.toString();\n  if (base == \"0\") {\n    return x;\n  }\n \
    \ let l = x.length;\n  let s = \"\";\n  while (base > 0) {\n    if (base % 2 !=\
    \ 0) {\n      s = s + x.charAt(l - 1);\n    }\n    x = x.substring(0, l - 1) +\
    \ x.charAt(l - 1) + s;\n    l = l - 1;\n    base = parseInt(base / 2);\n  }\n\
    \  return x;\n}\n", "    let digits = base;\n    let result = \"\";\n    while\
    \ (x > 0) {\n        digits = Math.floor(x / base);\n        result = digits_to_string(digits,\
    \ base) + result;\n        x = x % base;\n    }\n    return result;\n}\n", " \
    \   let base10 = Math.pow(base, 10);\n    let x = Math.round(x * base10) / base10;\n\
    \    let result = x.toString();\n    if (result.length < base) {\n        let\
    \ zeros = \"\";\n        while (result.length < base) {\n            zeros +=\
    \ \"0\";\n        }\n        result = zeros + result;\n    }\n    return result;\n\
    }\n", "  let res = \"\";\n  let sign = \"\";\n  if (x < 0) {\n    sign = \"-\"\
    ;\n    x = -x;\n  }\n  if (base < 2 || base > 36) {\n    throw \"Base must be\
    \ between 2 and 36\";\n  }\n  while (x > 0) {\n    res += (x % base);\n    x /=\
    \ base;\n  }\n  return sign + res;\n}\n", "  let str = x.toString(base);\n  while\
    \ (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n}\n", "  let\
    \ res = \"\";\n  let baseNum = base;\n  let numStr = x.toString();\n  let lastIndex\
    \ = numStr.length - 1;\n  while (numStr.length >= baseNum) {\n    let remainder\
    \ = numStr.substring(0, numStr.length - baseNum);\n    res = remainder + res;\n\
    \    numStr = numStr.substring(numStr.length - baseNum);\n  }\n  if (numStr.length\
    \ > 0) {\n    res = numStr + res;\n  }\n  return res;\n}\n", "  let res = \"\"\
    ;\n  let baseNum = base;\n  while (baseNum > 0) {\n    if (x % baseNum == 0) {\n\
    \      res += baseNum;\n    } else {\n      res += \"0\";\n    }\n    baseNum--;\n\
    \  }\n  return res;\n}\n", "  let res = \"\";\n  let digits = \"\";\n  let baseDigits\
    \ = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    digits = String(x % base);\n\
    \    baseDigits = String(baseNum % base);\n    res = baseDigits + digits;\n  \
    \  baseNum = baseNum / base;\n  }\n  return res;\n}\n", "  if (base < 2 || base\
    \ > 36) {\n    throw new Error(`Invalid base ${base}`);\n  }\n  const digits =\
    \ x.toString(base).split('');\n  const res = new Array(digits.length);\n  for\
    \ (let i = 0; i < digits.length; i++) {\n    res[i] = digits[digits.length - i\
    \ - 1] * base;\n  }\n  return res.join('');\n}\n", "  let str = x.toString(base);\n\
    \  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n}\n",
  "    var digits = x.toString(base).split(\"\").reverse();\n    var r = \"\";\n \
    \   for (var i = 0; i < digits.length; ++i) {\n        var d = digits[i];\n  \
    \      if (d.length < base) {\n            d += new Array(base - d.length + 1).join(\"\
    0\");\n        }\n        r += d;\n    }\n    return r;\n}\n", "  let result =\
    \ \"\";\n  let digits = \"\";\n  while (x > 0) {\n    digits = digits + x.toString().charAt(0);\n\
    \    x = Math.floor(x / base);\n  }\n  while (digits.length < base) {\n    digits\
    \ = \"0\" + digits;\n  }\n  result = digits;\n  return result;\n}\n", "  let result\
    \ = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = baseNum.toString()\
    \ + (x % baseNum);\n    x /= baseNum;\n    baseNum--;\n  }\n  return result;\n\
    }\n", "    let result = '';\n    let digits = x;\n    let baseDigits = base;\n\
    \    while (digits > 0) {\n        if (digits % base === 0) {\n            digits\
    \ = digits / base;\n            result += baseDigits.toString();\n        } else\
    \ {\n            digits *= base;\n        }\n    }\n    return result;\n}\n",
  "    let result = \"\";\n    let baseNum = base;\n    let numStr = x.toString();\n\
    \    let lastIndex = numStr.length - 1;\n    while (numStr.length >= baseNum)\
    \ {\n        let quotient = Math.floor(numStr.length / baseNum);\n        let\
    \ remainder = numStr.length % baseNum;\n        let quotientStr = numStr.substring(0,\
    \ quotient);\n        let remainderStr = numStr.substring(quotient);\n       \
    \ result = quotientStr + result;\n        numStr = remainderStr;\n    }\n    if\
    \ (numStr.length > 0) {\n        let remainder = numStr.length % baseNum;\n  \
    \      result = numStr + result;\n    }\n    return result;\n}\n", "    let baseNum\
    \ = base;\n    let baseStr = \"\";\n    while (baseNum > 0) {\n        baseStr\
    \ += (baseNum % 10) + \"\";\n        baseNum = Math.floor(baseNum / 10);\n   \
    \ }\n    return baseStr + x;\n}\n", "    if (base < 1 || base > 10) {\n      \
    \  throw new RangeError(\"Base must be between 1 and 10\");\n    }\n    let result\
    \ = \"\";\n    while (x > 0) {\n        if (x % base === 0) {\n            result\
    \ += x;\n        }\n        x /= base;\n    }\n    return result;\n}\n", "   \
    \ if (base < 2 || base > 36) {\n        throw new RangeError(\"Base must be between\
    \ 2 and 36\");\n    }\n    const digits = baseToString(base);\n    const sign\
    \ = x < 0 ? \"-\" : \"\";\n    let result = sign + digits[Math.abs(x) % base];\n\
    \    while (result.length < digits.length) result = \"0\" + result;\n    return\
    \ result;\n}\n", "    let result = \"\";\n    let baseNum = base;\n    while (x\
    \ > 0) {\n        let remainder = x % baseNum;\n        result += String(remainder);\n\
    \        x = Math.floor(x / baseNum);\n        baseNum *= base;\n    }\n    return\
    \ result;\n}\n", "  let res = \"\";\n  let digits = \"\";\n  let baseDigits =\
    \ \"\";\n  while (x > 0) {\n    digits = digits + x.toString().charAt(0);\n  \
    \  x = Math.floor(x / base);\n  }\n  while (digits.length < base) {\n    baseDigits\
    \ = baseDigits + base.charAt(0);\n  }\n  while (baseDigits.length < digits.length)\
    \ {\n    res = res + baseDigits;\n    baseDigits = base.charAt(0);\n  }\n  return\
    \ res;\n}\n", "  let str = x.toString();\n  let res = \"\";\n  let sign = \"\"\
    ;\n  if (str.length < base) {\n    sign = \"-\";\n    str = str.substring(0, base);\n\
    \  }\n  for (let i = str.length - 1; i >= 0; i--) {\n    let digit = parseInt(str.charAt(i));\n\
    \    if (digit < base) {\n      res += digit;\n    } else {\n      res += digit\
    \ - base + 10;\n    }\n  }\n  return sign + res;\n}\n", "  let result = \"\";\n\
    \  let digits = \"\";\n  let baseDigits = \"\";\n  let baseDigitCount = 0;\n \
    \ let digitCount = 0;\n  while (x > 0) {\n    digits = String(x % base);\n   \
    \ baseDigitCount = digits.length;\n    baseDigits = baseDigitCount > 0 ? new Array(baseDigitCount).fill(digits).join(\"\
    \") : \"\";\n    digitCount = digits.length - baseDigitCount;\n    result = digits\
    \ + baseDigits;\n    x = Math.floor(x / base);\n  }\n  return result;\n}\n", " \
    \   if (base < 2 || base > 36) {\n        throw new RangeError(\"Base must be\
    \ between 2 and 36\");\n    }\n    if (base === 10) {\n        return x.toString();\n\
    \    }\n    if (base === 16) {\n        return pad(x.toString(16), 8);\n    }\n\
    \    let res = \"\";\n    let div = x;\n    while (div > 0) {\n        res +=\
    \ div % base + \"\";\n        div = Math.floor(div / base);\n    }\n    return\
    \ res;\n}\n", "    const base_to_num: number[] = [];\n    for (let i = 0; i <=\
    \ base; i++) {\n        base_to_num.push(1);\n    }\n    base_to_num[base] = x;\n\
    \    let result = '';\n    for (let i = 0; i <= base; i++) {\n        result +=\
    \ base_to_num[i] * i;\n    }\n    return result;\n}\n", "    var r = \"\";\n \
    \   var sign = \"\";\n    if (x < 0) {\n        sign = \"-\";\n        x = -x;\n\
    \    }\n    if (x < base) {\n        r = x;\n    } else {\n        var q = Math.floor(x\
    \ / base);\n        r = x % base;\n        while (true) {\n            var t =\
    \ base;\n            if (t <= 0) {\n                break;\n            }\n  \
    \          t /= base;\n            if (t >= x) {\n                break;\n   \
    \         }\n            t *= base;\n            if (t > x) {\n              \
    \  break;\n            }\n            r = t;\n        }\n    }\n    if (sign !=\
    \ \"\") {\n        r = sign + r;\n    }\n    return r;\n}\n", "  let result =\
    \ \"\";\n  let digits = \"\";\n  while (x > 0) {\n    digits = digits + x.toString().charAt(0);\n\
    \    x = Math.floor(x / base);\n  }\n  result = digits;\n  while (result.length\
    \ < base) {\n    result = result + \"0\";\n  }\n  return result;\n}\n", "  let\
    \ result = \"\";\n  let baseNum = base;\n  while (baseNum > 0) {\n    if (x %\
    \ baseNum == 0) {\n      result += baseNum.toString();\n    } else {\n      result\
    \ += x.toString().charAt(baseNum % base);\n    }\n    baseNum /= base;\n  }\n\
    \  return result;\n}\n", "    if (base < 2 || base > 36) {\n        throw new\
    \ RangeError(\"Base must be between 2 and 36\");\n    }\n    let result = \"\"\
    ;\n    let digits = \"\";\n    let i = 0;\n    while (x > 0) {\n        if (x\
    \ % base === 0) {\n            digits = digits + String(x);\n            x /=\
    \ base;\n        } else {\n            digits = digits + \"0\";\n        }\n \
    \   }\n    while (digits.length < base) {\n        digits = digits + \"0\";\n\
    \    }\n    while (digits.length > base) {\n        digits = digits.slice(0, digits.length\
    \ - base);\n    }\n    result = digits + result;\n    return result;\n}\n", " \
    \ let str = x.toString(base);\n  let res = \"\";\n  while (str.length < base)\
    \ {\n    res = \"0\" + res;\n  }\n  return res;\n}\n", "  let result = \"\";\n\
    \  let baseNum = base;\n  while (baseNum > 0) {\n    if (x % baseNum == 0) {\n\
    \      result += parseInt(x / baseNum, 10);\n    }\n    baseNum--;\n  }\n  return\
    \ result;\n}\n", "    if (base < 1 || base > 10) {\n        throw new RangeError(\"\
    Base must be between 1 and 10\");\n    }\n    let s = \"\";\n    while (x > 0)\
    \ {\n        s = base_digits[x % base] + s;\n        x = Math.floor(x / base);\n\
    \    }\n    return s;\n}\n", "  if (base < 2 || base > 36) {\n    throw Error(`Invalid\
    \ base ${base}`);\n  }\n  const digits = String(base).split(\"\");\n  let res\
    \ = \"\";\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n\
    \    if (x >= base) {\n      res += digit;\n      x -= base;\n    } else {\n \
    \     res += digit * base;\n    }\n  }\n  return res;\n}\n", "    if (base < 2\
    \ || base > 36) {\n        throw new RangeError(\"Invalid base \" + base + \"\
    , must be between 2 and 36\");\n    }\n    if (base === 10) {\n        return\
    \ x.toString();\n    }\n    if (base === 16) {\n        return pad(x.toString(16),\
    \ 4, \"0\");\n    }\n    if (base === 8) {\n        return pad(x.toString(8),\
    \ 4, \"0\");\n    }\n    if (base === 2) {\n        return pad(x.toString(2),\
    \ 8, \"0\");\n    }\n    if (base === 36) {\n        return pad(x.toString(36),\
    \ 8, \"0\");\n    }\n    throw new RangeError(\"Invalid base \" + base + \", must\
    \ be between 2 and 36\");\n}\n", "  let result = '';\n  let sign = '';\n  if (x\
    \ > 0) {\n    sign = '+';\n    x = Math.abs(x);\n  } else if (x < 0) {\n    sign\
    \ = '-';\n    x = Math.abs(x);\n  }\n  while (x) {\n    const digit = x % base;\n\
    \    result += digit;\n    x = Math.floor(x / base);\n  }\n  return sign + result;\n\
    }\n", "    let base10 = Math.pow(base, 10);\n    let base = Math.pow(base, base);\n\
    \    let result = \"\";\n    let remainder = 0;\n    let quotient = 0;\n    while\
    \ (quotient < x) {\n        remainder = quotient % base;\n        quotient = Math.floor(quotient\
    \ / base);\n        result = base10 + remainder + result;\n    }\n    return result;\n\
    }\n", "  let result = \"\";\n  let baseNum = base;\n  while (baseNum > 0) {\n\
    \    if (x % baseNum == 0) {\n      result += x;\n      x /= baseNum;\n    } else\
    \ {\n      x /= baseNum;\n    }\n  }\n  return result;\n}\n", "    if (base <\
    \ 2 || base > 36) {\n        throw new RangeError(\"Base must be between 2 and\
    \ 36\");\n    }\n    if (base === 10) {\n        return x.toString();\n    }\n\
    \    if (base === 16) {\n        return pad(x, 2);\n    }\n    if (base === 8)\
    \ {\n        return pad(x, 3);\n    }\n    if (base === 2) {\n        return pad(x,\
    \ 4);\n    }\n    if (base === 16) {\n        return pad(x, 6);\n    }\n    if\
    \ (base === 10) {\n        return pad(x, 7);\n    }\n    if (base === 8) {\n \
    \       return pad(x, 9);\n    }\n    throw new RangeError(\"Base must be between\
    \ 2 and 36\");\n}\n", "    const digits = String(base).split(\"\");\n    let result\
    \ = \"\";\n    for (let i = 0; i < digits.length; i++) {\n        const digit\
    \ = digits[i];\n        result += digit.charCodeAt(0) - 48 + parseInt(digit.substr(1),\
    \ 10);\n    }\n    return String.fromCharCode(result + x);\n}\n", "  let res =\
    \ \"\";\n  let digits = \"\";\n  let basedigits = \"\";\n  let basedigits_length\
    \ = basedigits.length;\n  let digits_length = digits.length;\n  let basedigits_length\
    \ = basedigits.length;\n  let basedigits_length_2 = basedigits_length * 2;\n \
    \ let digits_length_2 = digits_length * 2;\n  let basedigits_length_3 = basedigits_length\
    \ * 3;\n  let digits_length_3 = digits_length * 3;\n  let basedigits_length_4\
    \ = basedigits_length * 4;\n  let digits_length_4 = digits_length * 4;\n  let\
    \ basedigits_length_5 = basedigits_length * 5;\n  let digits_length_5 = digits_length\
    \ * 5;\n  let basedigits_length_6 = basedigits_length * 6;\n  let digits_length_6\
    \ = digits_length * 6;\n  let basedigits_length_7 = basedigits_length * 7;\n \
    \ let digits_length_7 = digits_length * 7;\n  let basedigits_length_8 = basedigits_length\
    \ * 8;\n  let digits_length_8 = digits_length * 8;\n  let basedigits_length_9\
    \ = basedigits_length * 9;\n  let digits_length_9 = digits_length * 9;\n  let\
    \ basedigits_length_10 = basedigits_length * 10;\n  let digits_length_10 = digits_length\
    \ * 10;\n  let basedigits_length_11 = basedigits_length * 11;\n  let digits_length_11\
    \ = digits_length * 11;\n  let basedigits_length_12 = basedigits_length * 12;\n\
    \  let digits_length_12 = digits_length * 12;\n  let basedigits_length_13 = basedigits_length\
    \ * 13;\n  let digits_length_13 = digits_length * 13;\n  let basedigits_length_14\
    \ = basedigits_length * 14;\n  let digits_length_14 = digits_length * 14;\n  let\
    \ basedigits_length_15 = basedigits_length * 15;\n  let digits_length_15 = digits_length\
    \ * 15;\n  let basedigits_length_16 = basedigits_length * 16;\n  let digits_length_16\
    \ = digits_length * 16;\n  let basedigits_length_17 = basedigits_length * 17;\n\
    \  let digits_length_17 = digits_length * 17;\n  let basedigits_length_18 = basedigits_length\
    \ * 18;\n  let digits_length_18 = digits_length * 18;\n  let basedigits_length_19\
    \ = basedigits_length * 19;\n  let digits_length_19 = digits_length * 19;\n  let\
    \ basedigits_length_20 = basedigits_length * 20;\n  let digits_length_20 = digit",
  "    const digits = base.toString(10).split('');\n    const len = digits.length;\n\
    \    let out = '';\n    let i = 0;\n    while (i < len) {\n        out += digits[i]\
    \ || 0;\n        i++;\n    }\n    while (x >= base) {\n        out += '0';\n \
    \       x--;\n    }\n    return out + digits.reverse().join('');\n}\n", "    var\
    \ r = \"\";\n    var sign = \"\";\n    if (x < 0) {\n        sign = \"-\";\n \
    \       x = -x;\n    }\n    if (x < base) {\n        r = x;\n    }\n    else {\n\
    \        var tmp = x;\n        while (true) {\n            if (tmp >= base) {\n\
    \                r = r + tmp % base;\n                tmp = Math.floor(tmp / base);\n\
    \            }\n            else {\n                break;\n            }\n  \
    \      }\n    }\n    return sign + r;\n}\n", "  let s = \"\" + x;\n  let l = s.length;\n\
    \  let baseLen = base.length;\n  while (l >= baseLen) {\n    s = s.substr(0, l\
    \ - baseLen) + base[l - baseLen];\n    l -= baseLen;\n  }\n  return s;\n}\n",
  "  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n\
    \  }\n  return str;\n}\n", "  let baseNum = base;\n  let baseStr = \"\";\n  while\
    \ (baseNum > 0) {\n    baseNum /= base;\n    baseStr += base;\n  }\n  return x\
    \ + baseStr;\n}\n", "    if (base < 1 || base > 10) {\n        throw new RangeError(\"\
    Base must be between 1 and 10\");\n    }\n    const digits = x.toString(base);\n\
    \    let result = \"\";\n    for (let i = digits.length - 1; i >= 0; i--) {\n\
    \        result += digits[i];\n    }\n    return result;\n}\n", "  const str =\
    \ x.toString(base);\n  return str.length < base ? str + Array(base - str.length\
    \ + 1).join(0) : str;\n}\n", "  let str = x.toString();\n  let res = \"\";\n \
    \ for (let i = 0; i < str.length; i++) {\n    let c = str.charAt(i);\n    if (c\
    \ >= \"0\" && c <= \"9\") {\n      res += c + base;\n    } else {\n      res +=\
    \ c;\n    }\n  }\n  return res;\n}\n", "    let baseNum = base;\n    let baseStr\
    \ = \"\";\n    let numStr = \"\";\n    let numStrLen = 0;\n    let numStrDigit\
    \ = 0;\n    let numStrDigitBase = 0;\n    let numStrDigitBaseStr = \"\";\n   \
    \ let numStrDigitBaseStrLen = 0;\n    let numStrDigitBaseStrDigit = 0;\n    let\
    \ numStrDigitBaseStrDigitBase = 0;\n    let numStrDigitBaseStrDigitBaseStr = \"\
    \";\n    let numStrDigitBaseStrDigitBaseStrLen = 0;\n    let numStrDigitBaseStrDigitBaseStrDigit\
    \ = 0;\n    let numStrDigitBaseStrDigitBaseStrDigitBase = 0;\n    let numStrDigitBaseStrDigitBaseStrDigitBaseStr\
    \ = \"\";\n    let numStrDigitBaseStrDigitBaseStrDigitBaseStrLen = 0;\n    let\
    \ numStrDigitBaseStrDigitBaseStrDigitBaseStrDigit = 0;\n    let numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBase\
    \ = 0;\n    let numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStr = \"\"\
    ;\n    let numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrLen = 0;\n  \
    \  let numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigit = 0;\n    let\
    \ numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBase = 0;\n    let\
    \ numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStr = \"\";\n\
    \    let numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrLen\
    \ = 0;\n    let numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigit\
    \ = 0;\n    let numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBase\
    \ = 0;\n    let numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStr\
    \ = \"\";\n    let numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrLen\
    \ = 0;\n    let numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigit\
    \ = 0;\n    let numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBase\
    \ = 0;\n    let numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStr\
    \ = \"\";\n    let numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrLen\
    \ = 0;\n    let numStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStrDigitBaseStr",
  "  if (base < 1 || base > 10) {\n    throw new Error(\"Base must be between 1 and\
    \ 10\");\n  }\n  const digits = x.toString().split(\"\").reverse();\n  let res\
    \ = \"\";\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n\
    \    const index = digits.length - 1 - i;\n    const digitBase = Math.pow(base,\
    \ index);\n    const digitRes = digitBase + digit;\n    if (digitRes < 10) {\n\
    \      res += digitRes;\n    } else {\n      res += \"0\";\n    }\n  }\n  return\
    \ res;\n}\n", "  let res = \"\";\n  let sign = \"\";\n  if (x < 0) {\n    sign\
    \ = \"-\";\n    x = -x;\n  }\n  if (base < 2 || base > 36) {\n    return sign\
    \ + x;\n  }\n  if (base === 10) {\n    return sign + x;\n  }\n  while (x != 0)\
    \ {\n    res = base.toString() + res;\n    x /= base;\n  }\n  return sign + res;\n\
    }\n", "  if (base < 1 || base > 10) {\n    throw new Error(\"Base must be between\
    \ 1 and 10\");\n  }\n  const digits = x.toString().split(\"\").reverse();\n  let\
    \ res = \"\";\n  for (let i = 0; i < digits.length; i++) {\n    const digit =\
    \ digits[i];\n    if (digit === \"0\") {\n      continue;\n    }\n    const rem\
    \ = digits.length - i - 1;\n    const div = Math.pow(base, rem);\n    const mod\
    \ = x % div;\n    digits[i] = mod;\n    res += digit;\n  }\n  return res.split(\"\
    \").reverse().join(\"\");\n}\n", "    let baseNum = base;\n    let baseStr = \"\
    \";\n    while (baseNum > 0) {\n        baseNum /= 10;\n        baseStr += (baseNum\
    \ % 10) + \"\";\n    }\n    return baseStr + x;\n}\n", "    let result = \"\"\
    ;\n    let baseNum = base;\n    let numStr = x.toString();\n    let numLen = numStr.length;\n\
    \    let baseLen = baseNum.toString().length;\n    let quotient = Math.floor(numLen\
    \ / baseLen);\n    let remainder = numLen - quotient * baseLen;\n    let digit;\n\
    \    for (let i = 0; i < quotient; i++) {\n        digit = parseInt(numStr[i]);\n\
    \        result += digit * baseNum;\n    }\n    if (remainder > 0) {\n       \
    \ digit = parseInt(numStr[quotient]);\n        result += digit * baseNum;\n  \
    \  }\n    return result;\n}\n", "    let result = \"\";\n    let digits = \"\"\
    ;\n    let baseDigits = \"\";\n    let baseDigitCount = 0;\n    let digitCount\
    \ = 0;\n    let digitBase = 1;\n    let digitBaseString = \"\";\n    let digitBaseStringCount\
    \ = 0;\n    let digitBaseStringDigitCount = 0;\n    let digitBaseStringDigit =\
    \ \"\";\n    let digitBaseStringDigitString = \"\";\n    let digitBaseStringDigitStringCount\
    \ = 0;\n    let digitBaseStringDigitStringDigit = \"\";\n    let digitBaseStringDigitStringDigitString\
    \ = \"\";\n    let digitBaseStringDigitStringDigitStringCount = 0;\n    let digitBaseStringDigitStringDigitStringDigit\
    \ = \"\";\n    let digitBaseStringDigitStringDigitStringDigitString = \"\";\n\
    \    let digitBaseStringDigitStringDigitStringDigitStringCount = 0;\n    let digitBaseStringDigitStringDigitStringDigitStringDigit\
    \ = \"\";\n    let digitBaseStringDigitStringDigitStringDigitStringDigitString\
    \ = \"\";\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringCount\
    \ = 0;\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigit\
    \ = \"\";\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitString\
    \ = \"\";\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitStringCount\
    \ = 0;\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitStringDigit\
    \ = \"\";\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitString\
    \ = \"\";\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringCount\
    \ = 0;\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigit\
    \ = \"\";\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitString\
    \ = \"\";\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringCount\
    \ = 0;\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigit\
    \ = \"\";\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitString\
    \ = \"\";\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringCount\
    \ = 0;\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigit\
    \ = \"\";\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitString\
    \ = \"\";\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringCount\
    \ = 0;\n    let digitBaseStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitStringDigit\
    \ = \"\";\n    let digitBase", "    var digits = x.toString(base).split(\"\").reverse();\n\
    \    while (digits.length < base) {\n        digits = digits.concat(new Array(base\
    \ - digits.length + 1).join(\"0\"));\n    }\n    return digits.reverse().join(\"\
    \");\n}\n", "    let res = \"\";\n    while (x > 0) {\n        res = base_digits[x\
    \ % base] + res;\n        x = Math.floor(x / base);\n    }\n    return res;\n\
    }\n", "    let result = '';\n    let digits = String(Math.abs(x)).split('');\n\
    \    let baseDigits = String(Math.abs(base)).split('');\n    let baseLength =\
    \ baseDigits.length;\n    let digitLength = digits.length;\n    let i = 0;\n \
    \   while (i < digitLength) {\n        let digit = digits[i];\n        if (digit\
    \ === '0') {\n            result += baseDigits[baseLength - digitLength + i];\n\
    \            i++;\n        } else {\n            result += digit;\n        }\n\
    \    }\n    return result;\n}\n", "    let digits = String(base).split('');\n\
    \    let res = '';\n    for (let i = digits.length - 1; i >= 0; i--) {\n     \
    \   res += digits[i] * x;\n    }\n    return res;\n}\n", "    const bases = ['',\
    \ 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n    const digits = String(base).split('');\n\
    \    const len = digits.length;\n    let i = 0;\n    while (i < len) {\n     \
    \   digits[i] += x;\n        if (digits[i] > 9) {\n            digits[i] -= 9;\n\
    \        }\n        i += 1;\n    }\n    return digits.reverse().join('');\n}\n",
  "    let baseNum = base;\n    let baseStr = \"\";\n    while (baseNum > 0) {\n \
    \       if (x % baseNum == 0) {\n            baseStr += baseNum;\n           \
    \ x /= baseNum;\n        } else {\n            baseStr += baseNum.toString();\n\
    \            x %= baseNum;\n        }\n        baseNum--;\n    }\n    return baseStr;\n\
    }\n", "    if (base < 2 || base > 36) {\n        throw new RangeError(\"Base must\
    \ be between 2 and 36\");\n    }\n    if (base === 10) {\n        return x.toString();\n\
    \    }\n    if (base === 16) {\n        return x.toString(16);\n    }\n    if\
    \ (base === 8) {\n        return x.toString(8);\n    }\n    if (base === 2) {\n\
    \        return x.toString(2);\n    }\n    if (base === 16) {\n        return\
    \ x.toString(16);\n    }\n    if (base === 8) {\n        return x.toString(8);\n\
    \    }\n    if (base === 10) {\n        return x.toString(10);\n    }\n    if\
    \ (base === 16) {\n        return x.toString(16);\n    }\n    if (base === 8)\
    \ {\n        return x.toString(8);\n    }\n    if (base === 10) {\n        return\
    \ x.toString(10);\n    }\n    if (base === 16) {\n        return x.toString(16);\n\
    \    }\n    if (base === 8) {\n        return x.toString(8);\n    }\n    if (base\
    \ === 10) {\n        return x.toString(10);\n    }\n    if (base === 16) {\n \
    \       return x.toString(16);\n    }\n    if (base === 8) {\n        return x.toString(8);\n\
    \    }\n    if (base === 10) {\n        return x.toString(10);\n    }\n    if\
    \ (base === 16) {\n        return x.toString(16);\n    }\n    if (base === 8)\
    \ {\n        return x.toString(8);\n    }\n    if (base === 10) {\n        return\
    \ x.toString(10);\n    }\n    if (base === 16) {\n        return x.toString(16);\n\
    \    }\n    if (base === 8) {\n        return x.toString(8);\n    }\n    if (base\
    \ === 10) {\n        return x.toString(10);\n    }\n    if (base === 16) {\n \
    \       return x.toString(16);\n    }\n    if (base === 8) {\n        return x.toString(8);\n\
    \    }\n    if (base === 10) {\n        return x.toString(10);\n    }\n    if\
    \ (base === 16) {\n        return x.toString(16);\n    }\n    if (base === 8)\
    \ {\n        return x.toString(8);\n    }\n    if (base === 10) {\n        return\
    \ x.toString(10);\n    }\n    if (base === 16) {\n        return x.toString(16);\n\
    \    }\n    if (base === 8) {\n        return x.toString(8);\n    }\n    if (base\
    \ === 10) {\n        return x.toString(10);\n    }\n    if (base === 16) {\n \
    \       return x.toString(16);\n    }\n    if (base === 8) {\n        return x.toString(8);\n\
    \    }\n    if (base === 10) {\n        return x.toString(10);\n    }\n    if\
    \ (base === 16) {\n        return x.toString(16);\n    }\n    if (base === 8)\
    \ {\n        return x.toString(8);\n    }\n    if (base === 10) {\n        return\
    \ x.toString(10);\n    }\n    if (base === 16) {\n        return x.toString(16);",
  "  let res = \"\";\n  let sign = \"\";\n  if (x < 0) {\n    sign = \"-\";\n    x\
    \ = -x;\n  }\n  if (x < base) {\n    res += x;\n  } else {\n    let div = base;\n\
    \    while (div > 1) {\n      if (x % div === 0) {\n        res += div;\n    \
    \    x /= div;\n      } else {\n        div--;\n      }\n    }\n    res += x;\n\
    \  }\n  return sign + res;\n}\n", "  let res = \"\";\n  let digits = String(Math.abs(x)).split(\"\
    \").reverse();\n  for (let i = 0; i < digits.length; i++) {\n    res += digits[i]\
    \ * base;\n  }\n  return res;\n}\n", "  let res = \"\";\n  let sign = \"\";\n\
    \  if (x > 0) {\n    sign = \"+\";\n    x = Math.abs(x);\n  } else if (x < 0)\
    \ {\n    sign = \"-\";\n    x = Math.abs(x);\n  }\n  while (x > 0) {\n    res\
    \ += (x % base);\n    x /= base;\n  }\n  return sign + res;\n}\n", "  if (base\
    \ < 1 || base > 10) {\n    throw new Error(\"Base must be between 1 and 10\");\n\
    \  }\n  const digits = x.toString().split(\"\");\n  let res = \"\";\n  for (let\
    \ i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const index\
    \ = digits.length - 1 - i;\n    const newDigit = digits[index] * base + digit;\n\
    \    if (newDigit >= 10) {\n      res += newDigit - 10;\n    } else {\n      res\
    \ += newDigit;\n    }\n  }\n  return res;\n}\n", "  let res = \"\";\n  let digits\
    \ = x;\n  while (digits > 0) {\n    res += digitToString(digits % base);\n   \
    \ digits = Math.floor(digits / base);\n  }\n  return res;\n}\n", "    let baseNum\
    \ = base;\n    let baseStr = \"\";\n    let numStr = \"\";\n    while (baseNum\
    \ > 0) {\n        let remainder = x % baseNum;\n        baseNum = baseNum - remainder;\n\
    \        baseStr = baseStr + remainder;\n        x = x / baseNum;\n    }\n   \
    \ while (baseStr.length > 0) {\n        numStr = numStr + baseStr.charAt(0);\n\
    \        baseStr = baseStr.substr(1);\n    }\n    return numStr;\n}\n", "    let\
    \ s = \"\" + x;\n    let l = s.length;\n    let new_base = base;\n    while (l\
    \ > 0 && new_base > 0) {\n        let div = l % new_base;\n        l = l - div;\n\
    \        s = div + s;\n        new_base = new_base / 10;\n    }\n    return s;\n\
    }\n", "    let s = \"\" + x;\n    let n = s.length;\n    let bases = [\"\", \"\
    k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\n    let base = Math.pow(base,\
    \ 10);\n    while (n > 0) {\n        let digit = n % base;\n        s = digit.toString()\
    \ + s;\n        n = Math.floor(n / base);\n    }\n    return s;\n}\n", "    if\
    \ (base < 1 || base > 10) {\n        throw new RangeError(\"Invalid base\");\n\
    \    }\n    const digits = x.toString(base).split(\"\");\n    const res = \"\"\
    ;\n    for (let i = 0; i < digits.length; i++) {\n        res += digits[i];\n\
    \    }\n    return res;\n}\n", "    const digits = x.toString(base);\n    const\
    \ zeros = Array(Math.max(digits - x.toString().length, 0)).fill('0');\n    return\
    \ digits + zeros.join('');\n}\n", "  let result = \"\";\n  let sign = \"\";\n\
    \  if (x < 0) {\n    sign = \"-\";\n    x = -x;\n  }\n  while (x) {\n    const\
    \ digit = x % base;\n    result += digit;\n    x /= base;\n  }\n  return sign\
    \ + result;\n}\n", "  let res = \"\";\n  let sign = \"\";\n  if (x < 0) {\n  \
    \  sign = \"-\";\n    x = -x;\n  }\n  if (x < base) {\n    res += x;\n  } else\
    \ {\n    let y = Math.floor(x / base);\n    res += base * y;\n    x = x - base\
    \ * y;\n  }\n  while (x > 0) {\n    res += \"0\";\n    x--;\n  }\n  return sign\
    \ + res;\n}\n", "  const str = x.toString(base);\n  return str.length < base ?\
    \ str + Array(base - str.length + 1).join(\"0\") : str;\n}\n", "  let result =\
    \ \"\";\n  let digits = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    digits\
    \ = digits + x.toString().charAt(0);\n    x = Math.floor(x / baseNum);\n  }\n\
    \  while (digits.length < baseNum) {\n    digits = \"0\" + digits;\n  }\n  while\
    \ (digits.length > baseNum) {\n    digits = digits.slice(0, baseNum);\n  }\n \
    \ result = digits + result;\n  return result;\n}\n", "    let result: string =\
    \ \"\";\n    let digits: number[] = [];\n    let baseDigits: number[] = [];\n\
    \    let baseString: string = \"\";\n    let baseStringDigits: number[] = [];\n\
    \    let baseStringDigits_length: number = 0;\n    let baseStringDigits_length_max:\
    \ number = 0;\n    let baseStringDigits_length_min: number = 0;\n    let baseStringDigits_length_diff:\
    \ number = 0;\n    let baseStringDigits_length_diff_max: number = 0;\n    let\
    \ baseStringDigits_length_diff_min: number = 0;\n    let baseStringDigits_length_diff_max1:\
    \ number = 0;\n    let baseStringDigits_length_diff_min1: number = 0;\n    let\
    \ baseStringDigits_length_diff_max2: number = 0;\n    let baseStringDigits_length_diff_min2:\
    \ number = 0;\n    let baseStringDigits_length_diff_max3: number = 0;\n    let\
    \ baseStringDigits_length_diff_min3: number = 0;\n    let baseStringDigits_length_diff_max4:\
    \ number = 0;\n    let baseStringDigits_length_diff_min4: number = 0;\n    let\
    \ baseStringDigits_length_diff_max5: number = 0;\n    let baseStringDigits_length_diff_min5:\
    \ number = 0;\n    let baseStringDigits_length_diff_max6: number = 0;\n    let\
    \ baseStringDigits_length_diff_min6: number = 0;\n    let baseStringDigits_length_diff_max7:\
    \ number = 0;\n    let baseStringDigits_length_diff_min7: number = 0;\n    let\
    \ baseStringDigits_length_diff_max8: number = 0;\n    let baseStringDigits_length_diff_min8:\
    \ number = 0;\n    let baseStringDigits_length_diff_max9: number = 0;\n    let\
    \ baseStringDigits_length_diff_min9: number = 0;\n    let baseStringDigits_length_diff_max10:\
    \ number = 0;\n    let baseStringDigits_length_diff_min10: number = 0;\n    let\
    \ baseStringDigits_length_diff_max11: number = 0;\n    let baseStringDigits_length_diff_min11:\
    \ number = 0;\n    let baseStringDigits_length_diff_max12: number = 0;\n    let\
    \ baseStringDigits_length_diff_min12: number = 0;\n    let baseStringDigits_length_diff_max13:\
    \ number = 0;\n    let baseStringDigits_length_diff_min13: number = 0;\n    let\
    \ baseStringDigits_length_diff_max14: number = 0;\n    let baseStringDigits_length_diff_min14:\
    \ number = 0;\n    let baseStringDigits_length_diff_max15: number = 0;\n    let\
    \ baseStringDigits_length_diff_min15: number = 0;\n    let baseStringDigits_length_diff_max16:\
    \ number = 0;\n    let baseStringDigits_length_diff_min16: number = 0;\n    let\
    \ baseStringDigit", "  let result = \"\";\n  let baseNum = base;\n  while (x >\
    \ 0) {\n    result = base_conversion(x, baseNum) + result;\n    x = Math.floor(x\
    \ / baseNum);\n    baseNum *= base;\n  }\n  return result;\n}\n", "  if (base\
    \ < 1 || base > 10) {\n    throw Error(\"base must be between 1 and 10\");\n \
    \ }\n  let result: string = \"\";\n  let digits: number[] = [];\n  while (x >\
    \ 0) {\n    digits.push(x % base);\n    x = Math.floor(x / base);\n  }\n  for\
    \ (let i = digits.length - 1; i >= 0; i--) {\n    result = digits[i] + result;\n\
    \  }\n  return result;\n}\n", "  if (base < 2 || base > 36) {\n    throw new Error('base\
    \ must be between 2 and 36')\n  }\n  if (base === 10) {\n    return x.toString()\n\
    \  }\n  if (base === 16) {\n    return pad0(x.toString(16), 4)\n  }\n  let res\
    \ = ''\n  let div = x % base\n  while (div > 0) {\n    res += div.toString(base)\n\
    \    div = Math.floor(div / base)\n  }\n  return res\n}\n", "    const str = x.toString(base);\n\
    \    if (str.length < base) {\n        return change_base(parseInt(str, base),\
    \ base);\n    }\n    return str;\n}\n", "  if (base < 2) return x;\n  if (base\
    \ > 36) return x;\n  if (base == 10) return x;\n  if (base == 16) return x;\n\
    \  if (base == 8) return x;\n  if (base == 2) return x;\n  if (base == 36) return\
    \ x;\n  if (base == 5) return x;\n  if (base == 36) return x;\n  if (base == 36)\
    \ return x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if (base\
    \ == 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n\
    \  if (base == 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return\
    \ x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if (base ==\
    \ 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if\
    \ (base == 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return\
    \ x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if (base ==\
    \ 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if\
    \ (base == 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return\
    \ x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if (base ==\
    \ 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if\
    \ (base == 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return\
    \ x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if (base ==\
    \ 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if\
    \ (base == 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return\
    \ x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if (base ==\
    \ 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if\
    \ (base == 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return\
    \ x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if (base ==\
    \ 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if\
    \ (base == 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return\
    \ x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if (base ==\
    \ 36) return x;\n  if (base == 36) return x;\n  if (base == 36) return x;\n  if\
    \ (base == 36) return x;\n  if (base == 36) return x;\n  if (", "    let base10\
    \ = Math.pow(base, 10);\n    let base = Math.pow(base, base);\n    let result\
    \ = \"\";\n    let i = 0;\n    while (i < x) {\n        let rem = x % base;\n\
    \        result += String(rem);\n        x = Math.floor(x / base);\n        i++;\n\
    \    }\n    return result;\n}\n", "    let baseNum = base;\n    let numString\
    \ = x.toString();\n    let newNum: string;\n    if (numString.length <= baseNum)\
    \ {\n        newNum = numString;\n    } else {\n        let numArray = numString.split(\"\
    \");\n        let newNumArray: string[] = [];\n        for (let i = 0; i < numArray.length;\
    \ i++) {\n            newNumArray.push(numArray[i] + baseNum);\n        }\n  \
    \      newNum = newNumArray.join(\"\");\n    }\n    return newNum;\n}\n", "  \
    \  let result = \"\";\n    let digits = x;\n    let baseDigits = base;\n    while\
    \ (digits > 0) {\n        let remainder = digits % baseDigits;\n        result\
    \ += String.fromCharCode(baseDigits.charCodeAt(0) + (remainder >= 10 ? remainder\
    \ - 10 : remainder));\n        digits = Math.floor(digits / baseDigits);\n   \
    \     baseDigits--;\n    }\n    return result;\n}\n", "    let result = '';\n\
    \    let sign = '';\n    if (x > 0) {\n        sign = '+';\n        x = Math.abs(x);\n\
    \    } else {\n        sign = '-';\n        x = -Math.abs(x);\n    }\n    while\
    \ (x > 0) {\n        if (x % base === 0) {\n            result += sign + x;\n\
    \            x /= base;\n        } else {\n            result += sign + x;\n \
    \           x *= base;\n        }\n    }\n    return result;\n}\n", "  if (base\
    \ < 2 || base > 36) {\n    throw Error(`Invalid base ${base}`);\n  }\n  const\
    \ digits = String(base).split('');\n  let res = '';\n  while (x >= base) {\n \
    \   res = digits[--base] + res;\n    x = Math.floor(x / base);\n  }\n  return\
    \ digits[base] + res;\n}\n", "  let result = \"\";\n  let remainder = 0;\n  let\
    \ digit = 0;\n  while (x > 0) {\n    remainder = x % base;\n    digit = base -\
    \ remainder;\n    result = String(digit) + result;\n    x = Math.floor(x / base);\n\
    \  }\n  return result;\n}\n", "    var digits = x.toString(base);\n    var zeros\
    \ = \"\";\n    var ones = \"\";\n    var i = 1;\n    while (i < digits.length)\
    \ {\n        if (digits[i] === \"0\") {\n            zeros += \"0\";\n       \
    \ } else {\n            ones += \"0\";\n        }\n        i++;\n    }\n    return\
    \ zeros + digits.substr(0, digits.length - 1) + ones;\n}\n", "    if (base < 1\
    \ || base > 10) {\n        throw new RangeError(\"Base must be between 1 and 10\"\
    );\n    }\n    const digits = x.toString().split(\"\");\n    if (base === 10)\
    \ {\n        return digits;\n    }\n    let result: string = \"\";\n    for (let\
    \ i = 0; i < digits.length; i++) {\n        const digit = digits[i];\n       \
    \ const index = digits.length - 1 - i;\n        if (digit === \"0\") {\n     \
    \       continue;\n        }\n        const digitValue = base ** index;\n    \
    \    if (digitValue >= 10) {\n            result += digitValue;\n        } else\
    \ {\n            result += digit;\n        }\n    }\n    return result;\n}\n",
  "  const str = x.toString(base);\n  return str.length < base ? str + Array(base\
    \ - str.length).join('0') : str;\n}\n", "  if (base < 2 || base > 36) {\n    throw\
    \ new Error(`Invalid base ${base}`);\n  }\n  const digits = String(Math.abs(x)).split(\"\
    \").reverse();\n  let res = \"\";\n  for (let i = 0; i < digits.length; i++) {\n\
    \    const digit = digits[i];\n    const index = digits.length - 1 - i;\n    if\
    \ (digit === \"0\") {\n      res += \"0\";\n    } else if (digit === \"1\") {\n\
    \      res += base;\n    } else {\n      res += digit;\n    }\n    if (index >=\
    \ base) {\n      break;\n    }\n  }\n  return res;\n}\n", "    let result = \"\
    \";\n    let baseNum = base;\n    let baseNumString = baseNum.toString();\n  \
    \  while (x > 0) {\n        let remainder = x % baseNum;\n        result += baseNumString[remainder];\n\
    \        x = Math.floor(x / baseNum);\n        baseNum--;\n    }\n    return result;\n\
    }\n", "    if (base < 2 || base > 36) {\n        throw new RangeError(\"Base must\
    \ be between 2 and 36\");\n    }\n    if (base === 10) {\n        return x.toString();\n\
    \    }\n    if (base === 16) {\n        return pad0(x.toString(16), 4);\n    }\n\
    \    if (base === 8) {\n        return pad0(x.toString(8), 2);\n    }\n    return\
    \ pad0(x.toString(base), base);\n}\n", "  const str = x.toString(base);\n  return\
    \ str.length < base ? str + Array(base - str.length + 1).join(\"0\") : str;\n\
    }\n", "    let result = \"\";\n    let baseNum = base;\n    let numStr = x.toString();\n\
    \    let numArr = numStr.split(\"\");\n    for (let i = 0; i < numArr.length;\
    \ i++) {\n        let num = parseInt(numArr[i]);\n        if (num < baseNum) {\n\
    \            result += numArr[i] + baseNum.toString();\n        } else {\n   \
    \         result += numArr[i];\n        }\n    }\n    return result;\n}\n", " \
    \   let str = x.toString(base);\n    let len = str.length;\n    if (len > base)\
    \ {\n        str = str.substring(0, len - (len - base));\n    }\n    return str;\n\
    }\n", "    let baseNum = base;\n    let numStr = x.toString();\n    let newNum\
    \ = 0;\n    let newStr = \"\";\n    let lastIndex = numStr.length - 1;\n    while\
    \ (numStr.length > 0) {\n        newNum = parseInt(numStr.substring(0, numStr.length\
    \ - 1), baseNum);\n        newStr += newNum;\n        numStr = numStr.substring(numStr.length\
    \ - 1);\n    }\n    return newStr;\n}\n", "  let str = x.toString(base);\n  while\
    \ (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n}\n", "   \
    \ let result = \"\";\n    while (x > 0) {\n        let remainder = x % base;\n\
    \        result += String(base).charAt(remainder);\n        x = Math.floor(x /\
    \ base);\n    }\n    return result;\n}\n", "  let result = \"\";\n  let remainder\
    \ = 0;\n  let quotient = 0;\n  while (x > 0) {\n    remainder = x % base;\n  \
    \  quotient = x / base;\n    result = String(quotient) + result;\n    x = remainder;\n\
    \  }\n  return result;\n}\n", "    if (base < 2 || base > 36) {\n        throw\
    \ new RangeError(`Invalid base ${base}`);\n    }\n    const digits = String(base).split(\"\
    \");\n    let result = \"\";\n    let i = 0;\n    while (i < x) {\n        const\
    \ digit = digits[i];\n        result += digit;\n        i++;\n    }\n    return\
    \ result;\n}\n", "  let result = \"\";\n  let digits = \"\";\n  let baseNum =\
    \ base;\n  while (x > 0) {\n    digits = String(x % baseNum);\n    result += digits;\n\
    \    x = Math.floor(x / baseNum);\n  }\n  return result;\n}\n", "    const bases\
    \ = [...Array(10)].map((_, i) => i).reverse();\n    const digits = bases.map(x\
    \ => bases[x]);\n    let result = '';\n    while (x > 0) {\n        const digit\
    \ = x % base;\n        result += digits[digit];\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n", "  let res = \"\";\n  let digits = String(Math.abs(x)).split(\"\
    \");\n  let baseDigits = String(base).split(\"\");\n  for (let i = 0; i < digits.length;\
    \ i++) {\n    if (digits[i] === \"0\") {\n      continue;\n    }\n    let baseIndex\
    \ = baseDigits.indexOf(digits[i]);\n    if (baseIndex === -1) {\n      res +=\
    \ \"0\";\n    } else {\n      res += baseDigits[baseIndex];\n    }\n  }\n  return\
    \ res;\n}\n", "    let res = \"\";\n    let i = 0;\n    while (i < base) {\n \
    \       res += x;\n        i++;\n    }\n    return res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
