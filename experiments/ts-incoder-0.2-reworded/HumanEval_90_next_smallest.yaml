name: HumanEval_90_next_smallest
language: ts
prompt: "//You are given an array of integers.\n// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the array.\n// Return undefined if there\
  \ is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5,\
  \ 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1,\
  \ 1])\n// undefined\nfunction next_smallest(lst: number[]): number | undefined {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = next_smallest;\n  assert.deepEqual(candidate([1, 2,\
  \ 3, 4, 5]),2);\n  assert.deepEqual(candidate([5, 1, 4, 3, 2]),2);\n  assert.deepEqual(candidate([]),undefined);\n\
  \  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([1,\
  \ 1, 1, 1, 0]),1);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([-35,\
  \ 34, 12, -45]),-35);\n}\n\ntest();"
completions: ["  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return\
    \ next_smallest(rest);\n  }\n  return smallest;\n}\n", "  if (lst.length <= 0)\
    \ return undefined;\n  let smallest = lst[0];\n  let secondSmallest = lst[1];\n\
    \  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n    \
    \  secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i]\
    \ > smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n\
    }\n", "  if (lst.length < 2) return undefined;\n  const [smallest, secondSmallest]\
    \ = lst;\n  return secondSmallest < smallest ? secondSmallest : smallest;\n}\n",
  "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  if (rest.length === 0) {\n    return smallest;\n\
    \  }\n  return smallest < next_smallest(rest) ? smallest : next_smallest(rest);\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const index = lst.indexOf(smallest);\n  if (index === lst.length\
    \ - 1) {\n    return undefined;\n  }\n  return lst[index + 1];\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest\
    \ = lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\n  if (smallest\
    \ === rest[0]) {\n    return smallest;\n  }\n\n  return next_smallest(rest);\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return\
    \ smallest;\n  }\n  return next_smallest(rest);\n}\n", "  if (lst.length === 0)\
    \ {\n    return undefined;\n  }\n  let smallest = lst[0];\n  for (let i = 1; i\
    \ < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return\
    \ undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  if (rest.length > 0) {\n    return smallest;\n  }\n  return smallest;\n}\n",
  "  if (lst.length === 0) {\n    return undefined;\n  }\n\n  const smallest = lst[0];\n\
    \  const index = lst.indexOf(smallest);\n  if (index === -1) {\n    return undefined;\n\
    \  }\n\n  const nextSmallest = lst[index + 1];\n  if (nextSmallest === undefined)\
    \ {\n    return smallest;\n  }\n\n  return nextSmallest;\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest\
    \ = lst.slice(1);\n  if (rest.length === 0) {\n    return smallest;\n  }\n  return\
    \ smallest < next_smallest(rest) ? smallest : next_smallest(rest);\n}\n", "  if\
    \ (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const [smallest, secondSmallest] = lst;\n  if (smallest < secondSmallest)\
    \ {\n    return secondSmallest;\n  }\n  return smallest;\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  let smallest = lst[0];\n  let secondSmallest\
    \ = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest)\
    \ {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if\
    \ (lst[i] > smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return\
    \ secondSmallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n \
    \ }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length\
    \ === 0) {\n    return smallest;\n  }\n  return smallest + next_smallest(rest);\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length === 0) {\n    return\
    \ smallest;\n  }\n  return smallest + next_smallest(rest);\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest\
    \ = lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n\n  const smallest = lst[0];\n  const index = lst.indexOf(smallest);\n \
    \ if (index === lst.length - 1) {\n    return undefined;\n  }\n\n  return lst[index\
    \ + 1];\n}\n", "  if (lst.length < 2) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length;\
    \ i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n   \
    \   smallest = lst[i];\n    } else if (lst[i] > secondSmallest) {\n      secondSmallest\
    \ = lst[i];\n    }\n  }\n  return secondSmallest;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest =\
    \ lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n \
    \ }\n  return smallest;\n}\n", "  if (lst.length <= 1) return undefined;\n  let\
    \ smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i]\
    \ < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n}\n",
  "  if (lst.length === 0) {\n    return undefined;\n  }\n  let smallest = lst[0];\n\
    \  let secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n  \
    \  if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest\
    \ = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest =\
    \ lst[i];\n    }\n  }\n  return secondSmallest;\n}\n", "  if (lst.length === 0)\
    \ {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  if (rest.length === 0) {\n    return smallest;\n  }\n  return smallest < next_smallest(rest)\
    \ ? smallest : next_smallest(rest);\n}\n", "  if (lst.length === 0) {\n    return\
    \ undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  if (rest.length > 0) {\n    return next_smallest(rest);\n  }\n  return smallest;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return\
    \ next_smallest(rest);\n  }\n  return smallest;\n}\n", "  if (lst.length <= 1)\
    \ return undefined;\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n\
    \  return smallest;\n}\n", "  if (lst.length < 2) {\n    return undefined;\n \
    \ }\n  return lst[1];\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  return smallest\
    \ < rest ? smallest : next_smallest(rest);\n}\n", "  if (lst.length === 0) {\n\
    \    return undefined;\n  }\n\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \n  if (rest.length > 0) {\n    return next_smallest(rest);\n  }\n\n  return smallest;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return\
    \ smallest;\n  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return\
    \ undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  if (rest.length > 0) {\n    return smallest;\n  }\n  return smallest;\n}\n",
  "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  let smallest = lst[0];\n  let index = lst.indexOf(smallest);\n  if (index\
    \ === -1) {\n    return undefined;\n  }\n  for (let i = 1; i < lst.length; i++)\
    \ {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n      index = i;\n\
    \    }\n  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return\
    \ undefined;\n  }\n  let smallest = lst[0];\n  let second_smallest = lst[1];\n\
    \  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n    \
    \  second_smallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i]\
    \ < second_smallest) {\n      second_smallest = lst[i];\n    }\n  }\n  return\
    \ second_smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length\
    \ > 0) {\n    return next_smallest(rest);\n  }\n  return smallest;\n}\n", "  if\
    \ (lst.length === 0) {\n    return undefined;\n  }\n  const [smallest, secondSmallest]\
    \ = lst;\n  if (smallest > secondSmallest) {\n    return secondSmallest;\n  }\n\
    \  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n\n  for\
    \ (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest\
    \ = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest)\
    \ {\n      secondSmallest = lst[i];\n    }\n  }\n\n  return secondSmallest;\n\
    }\n", "  if (lst.length <= 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const index = lst.indexOf(smallest);\n  if (index === lst.length\
    \ - 1) {\n    return undefined;\n  }\n  const nextSmallest = lst[index + 1];\n\
    \  return nextSmallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  return smallest\
    \ < next_smallest(rest) ? smallest : next_smallest(rest);\n}\n", "  if (lst.length\
    \ < 2) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const secondSmallest\
    \ = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest)\
    \ {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if\
    \ (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return\
    \ secondSmallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n \
    \ }\n  const min = lst[0];\n  const minIndex = lst.indexOf(min);\n  if (minIndex\
    \ === lst.length - 1) {\n    return min;\n  }\n  return lst[minIndex + 1];\n}\n",
  "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  return smallest\n    ? smallest\n    : next_smallest(rest);\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return\
    \ next_smallest(rest);\n  }\n  return smallest;\n}\n", "  if (lst.length === 0)\
    \ {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  return smallest === rest ? smallest : next_smallest(rest);\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest\
    \ = lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest\
    \ = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest)\
    \ {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n}\n",
  "  if (lst.length === 0) {\n    return undefined;\n  }\n\n  const min = lst[0];\n\
    \  const minIndex = lst.indexOf(min);\n  if (minIndex === lst.length - 1) {\n\
    \    return min;\n  }\n\n  const nextMin = lst[minIndex + 1];\n  return nextMin\
    \ === undefined ? undefined : nextMin;\n}\n", "  if (lst.length === 0) {\n   \
    \ return undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  if (rest.length === 0) {\n    return smallest;\n  }\n  return next_smallest(rest);\n\
    }\n", "  if (lst.length < 2) {\n    return undefined;\n  }\n  const smallest =\
    \ lst[0];\n  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length;\
    \ i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n   \
    \   smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest\
    \ = lst[i];\n    }\n  }\n  return secondSmallest;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return undefined;\n  }\n  let smallest = lst[0];\n  let secondSmallest\
    \ = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest)\
    \ {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if\
    \ (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return\
    \ secondSmallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n \
    \ }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  return smallest\
    \ === rest ? smallest : next_smallest(rest);\n}\n", "  if (lst.length < 2) return\
    \ undefined;\n  let smallest = lst[0];\n  let index = 1;\n  for (let i = 1; i\
    \ < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \      index = i;\n    }\n  }\n  return smallest;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest =\
    \ lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n \
    \ }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n\n  for\
    \ (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest\
    \ = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest)\
    \ {\n      secondSmallest = lst[i];\n    }\n  }\n\n  return secondSmallest;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  return smallest === rest ? smallest\
    \ : next_smallest(rest);\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n\n  for\
    \ (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest\
    \ = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest)\
    \ {\n      secondSmallest = lst[i];\n    }\n  }\n\n  return secondSmallest;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const [smallest,\
    \ secondSmallest] = lst;\n  if (smallest < secondSmallest) {\n    return secondSmallest;\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  return lst[1];\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length\
    \ === 0) {\n    return smallest;\n  }\n  return smallest < next_smallest(rest)\
    \ ? smallest : next_smallest(rest);\n}\n", "  if (lst.length < 2) return undefined;\n\
    \  const [smallest, secondSmallest] = lst;\n  return secondSmallest;\n}\n", " \
    \ if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length\
    \ > 0) {\n    return next_smallest(rest);\n  }\n  return smallest;\n}\n", "  if\
    \ (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return smallest;\n\
    \  }\n  return next_smallest(rest);\n}\n", "  if (lst.length <= 1) return undefined;\n\
    \  const [smallest, secondSmallest] = lst;\n  return secondSmallest < smallest\
    \ ? secondSmallest : smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  let smallest = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n      index\
    \ = i;\n    }\n  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n   \
    \ return undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  if (rest.length > 0) {\n    return smallest;\n  }\n  return smallest;\n}\n",
  "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length\
    \ === 0) {\n    return smallest;\n  }\n  return smallest < next_smallest(rest)\
    \ ? smallest : next_smallest(rest);\n}\n", "  if (lst.length === 0) {\n    return\
    \ undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  if (rest.length > 0) {\n    return next_smallest(rest);\n  }\n  return smallest;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length === 0) {\n    return\
    \ smallest;\n  }\n  return smallest < next_smallest(rest) ? smallest : next_smallest(rest);\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return\
    \ smallest;\n  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return\
    \ undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  return smallest < rest ? smallest : next_smallest(rest);\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest\
    \ = lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  return smallest\
    \ === rest ? smallest : next_smallest(rest);\n}\n", "  if (lst.length === 0) {\n\
    \    return undefined;\n  }\n\n  const smallest = lst[0];\n  const secondSmallest\
    \ = lst[1];\n\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest)\
    \ {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if\
    \ (lst[i] > smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n\n  return\
    \ secondSmallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n \
    \ }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length\
    \ > 0) {\n    return smallest;\n  }\n  return smallest;\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest\
    \ = lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length\
    \ > 0) {\n    return next_smallest(rest);\n  }\n  return smallest;\n}\n", "  if\
    \ (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return smallest;\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  let smallest = lst[0];\n  let index = lst.indexOf(smallest);\n  if (index\
    \ === lst.length - 1) {\n    return undefined;\n  }\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n      index\
    \ = i;\n    }\n  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n   \
    \ return undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  return smallest === rest ? smallest : next_smallest(rest);\n}\n", "  if (lst.length\
    \ < 2) {\n    return undefined;\n  }\n  return lst[1];\n}\n", "  if (lst.length\
    \ <= 0) {\n    return undefined;\n  }\n\n  let smallest = lst[0];\n  let secondSmallest\
    \ = lst[1];\n\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest)\
    \ {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if\
    \ (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n\n\
    \  return secondSmallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  return smallest\
    \ === rest ? smallest : next_smallest(rest);\n}\n", "  if (lst.length === 0) {\n\
    \    return undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  return smallest === rest ? smallest : next_smallest(rest);\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest\
    \ = lst.slice(1);\n  return smallest === rest ? smallest : next_smallest(rest);\n\
    }\n", "  if (lst.length < 2) {\n    return undefined;\n  }\n  return lst[1];\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return\
    \ smallest;\n  }\n  return smallest;\n}\n", "  if (lst.length < 2) {\n    return\
    \ undefined;\n  }\n  return lst[1];\n}\n", "  if (lst.length < 2) {\n    return\
    \ undefined;\n  }\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n\
    \  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n    \
    \  secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i]\
    \ < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return\
    \ next_smallest(rest);\n  }\n  return smallest;\n}\n", "  if (lst.length === 0)\
    \ {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  if (rest.length > 0) {\n    return smallest;\n  }\n  return smallest;\n}\n",
  "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const [smallest, secondSmallest] = lst;\n  if (smallest < secondSmallest)\
    \ {\n    return secondSmallest;\n  }\n  return smallest;\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  let smallest = lst[0];\n  let secondSmallest\
    \ = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest)\
    \ {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if\
    \ (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return\
    \ secondSmallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n \
    \ }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length\
    \ === 0) {\n    return smallest;\n  }\n  return smallest < next_smallest(rest)\
    \ ? smallest : next_smallest(rest);\n}\n", "  if (lst.length <= 1) return undefined;\n\
    \  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i]\
    \ < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n}\n",
  "  if (lst.length === 0) {\n    return undefined;\n  }\n  let smallest = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n    \
    \  smallest = lst[i];\n    }\n  }\n  return smallest;\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  let smallest = lst[0];\n  let secondSmallest\
    \ = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest)\
    \ {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if\
    \ (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return\
    \ secondSmallest;\n}\n", "  if (lst.length <= 1) return undefined;\n  const min\
    \ = lst[0];\n  const minIndex = lst.indexOf(min);\n  if (minIndex === 0) return\
    \ min;\n  if (minIndex === lst.length - 1) return lst[minIndex + 1];\n  return\
    \ lst[minIndex + 1];\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  return smallest\
    \ === rest ? smallest : next_smallest(rest);\n}\n", "  if (lst.length <= 1) return\
    \ undefined;\n  const [smallest, secondSmallest] = lst;\n  return secondSmallest\
    \ < smallest ? secondSmallest : smallest;\n}\n", "  if (lst.length < 2) return\
    \ undefined;\n  return lst[1];\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length\
    \ > 0) {\n    return next_smallest(rest);\n  }\n  return smallest;\n}\n", "  if\
    \ (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  if (rest.length === 0) {\n    return smallest;\n\
    \  }\n  return smallest > next_smallest(rest) ? smallest : next_smallest(rest);\n\
    }\n", "  if (lst.length <= 1) return undefined;\n  let smallest = lst[0];\n  let\
    \ secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i]\
    \ < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n\
    \    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n \
    \   }\n  }\n  return secondSmallest;\n}\n", "  if (lst.length === 0) {\n    return\
    \ undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  if (rest.length > 0) {\n    return next_smallest(rest);\n  }\n  return smallest;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  return lst[1];\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n\n  let smallest\
    \ = lst[0];\n  let secondSmallest = lst[1];\n\n  for (let i = 2; i < lst.length;\
    \ i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n   \
    \   smallest = lst[i];\n    } else if (lst[i] > smallest) {\n      secondSmallest\
    \ = lst[i];\n    }\n  }\n\n  return secondSmallest;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest =\
    \ lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n \
    \ }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  return smallest\
    \ === rest ? smallest : next_smallest(rest);\n}\n", "  if (lst.length === 0) {\n\
    \    return undefined;\n  }\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n\
    \  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length\
    \ > 0) {\n    return smallest;\n  }\n  return next_smallest(rest);\n}\n", "  if\
    \ (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return smallest;\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const min = Math.min(...lst);\n  const index = lst.indexOf(min);\n  if\
    \ (index === lst.length - 1) {\n    return min;\n  }\n  return lst[index + 1];\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return\
    \ next_smallest(rest);\n  }\n  return smallest;\n}\n", "  if (lst.length === 0)\
    \ {\n    return undefined;\n  }\n  return lst[1];\n}\n", "  if (lst.length ===\
    \ 0) {\n    return undefined;\n  }\n  return lst[1];\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest\
    \ = lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  let smallest = lst[0];\n  let second_smallest = lst[1];\n  for (let i\
    \ = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      second_smallest\
    \ = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < second_smallest)\
    \ {\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n\n  const smallest\
    \ = lst[0];\n  const secondSmallest = lst[1];\n\n  for (let i = 2; i < lst.length;\
    \ i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n   \
    \   smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest\
    \ = lst[i];\n    }\n  }\n\n  return secondSmallest;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest =\
    \ lst.slice(1);\n  return smallest === rest ? smallest : next_smallest(rest);\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n\n  const smallest\
    \ = lst[0];\n  const secondSmallest = lst[1];\n\n  for (let i = 2; i < lst.length;\
    \ i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n   \
    \   smallest = lst[i];\n    } else if (lst[i] > smallest) {\n      secondSmallest\
    \ = lst[i];\n    }\n  }\n\n  return secondSmallest;\n}\n", "  if (lst.length <\
    \ 2) return undefined;\n  const min = lst[0];\n  const min_index = lst.indexOf(min);\n\
    \  if (min_index === 0) return min;\n  if (min_index === lst.length - 1) return\
    \ lst[min_index + 1];\n  const next_min = lst[min_index + 1];\n  return next_min\
    \ < min ? next_min : min;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  return smallest\
    \ === rest ? smallest : next_smallest(rest);\n}\n", "  if (lst.length === 0) {\n\
    \    return undefined;\n  }\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n\
    \  return smallest;\n}\n", "  if (lst.length < 2) {\n    return undefined;\n \
    \ }\n  const smallest = lst[0];\n  const secondSmallest = lst[1];\n  for (let\
    \ i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest\
    \ = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest)\
    \ {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n}\n",
  "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  return smallest === rest ? smallest : next_smallest(rest);\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const min = lst[0];\n\
    \  const minIndex = lst.indexOf(min);\n  if (minIndex === lst.length - 1) {\n\
    \    return min;\n  }\n  const nextMin = lst[minIndex + 1];\n  return nextMin\
    \ === undefined ? undefined : nextMin;\n}\n", "  if (lst.length === 0) {\n   \
    \ return undefined;\n  }\n  return lst[1];\n}\n", "  if (lst.length === 0) {\n\
    \    return undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  if (rest.length > 0) {\n    return smallest;\n  }\n  return smallest;\n}\n",
  "  if (lst.length === 0) {\n    return undefined;\n  }\n  let smallest = lst[0];\n\
    \  let secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n  \
    \  if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest\
    \ = lst[i];\n    } else if (lst[i] > smallest) {\n      secondSmallest = lst[i];\n\
    \    }\n  }\n  return secondSmallest;\n}\n", "  if (lst.length === 0) {\n    return\
    \ undefined;\n  }\n\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \n  if (rest.length > 0) {\n    return smallest;\n  }\n\n  return smallest;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return\
    \ next_smallest(rest);\n  }\n  return smallest;\n}\n", "  if (lst.length === 0)\
    \ {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const index = lst.indexOf(smallest);\n\
    \  if (index === lst.length - 1) {\n    return undefined;\n  }\n  return lst[index\
    \ + 1];\n}\n", "  if (lst.length <= 1) return undefined;\n  const smallest = lst[0];\n\
    \  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n\
    \    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest\
    \ = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest =\
    \ lst[i];\n    }\n  }\n  return secondSmallest;\n}\n", "  if (lst.length <= 1)\
    \ return undefined;\n  let smallest = lst[0];\n  let index = lst.indexOf(smallest);\n\
    \  if (index === 0) return undefined;\n  for (let i = 1; i < lst.length; i++)\
    \ {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n      index = i;\n\
    \    }\n  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return\
    \ undefined;\n  }\n  let smallest = lst[0];\n  let secondSmallest = lst[1];\n\
    \  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n    \
    \  secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i]\
    \ > smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const [smallest,\
    \ secondSmallest] = lst;\n  if (smallest > secondSmallest) {\n    return secondSmallest;\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const min = lst[0];\n  const min_index = lst.indexOf(min);\n  if (min_index\
    \ === lst.length - 1) {\n    return min;\n  }\n  const next_min = lst[min_index\
    \ + 1];\n  return next_min;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  return lst[1];\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  return lst[1];\n}\n", "  if (lst.length < 2) return undefined;\n  let\
    \ smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i]\
    \ < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n}\n",
  "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length\
    \ > 0) {\n    return next_smallest(rest);\n  }\n  return smallest;\n}\n", "  if\
    \ (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  return smallest < rest ? smallest : next_smallest(rest);\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const index = lst.indexOf(smallest);\n  if (index === lst.length\
    \ - 1) {\n    return undefined;\n  }\n  return lst[index + 1];\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const min = lst[0];\n  const min_index\
    \ = lst.indexOf(min);\n  if (min_index === lst.length - 1) {\n    return min;\n\
    \  }\n  return lst[min_index + 1];\n}\n", "  if (lst.length === 0) {\n    return\
    \ undefined;\n  }\n  const smallest = lst[0];\n  const index = lst.indexOf(smallest);\n\
    \  if (index === lst.length - 1) {\n    return undefined;\n  }\n  return lst[index\
    \ + 1];\n}\n", "  if (lst.length < 2) {\n    return undefined;\n  }\n  return\
    \ lst[1];\n}\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const\
    \ smallest = lst[0];\n  const rest = lst.slice(1);\n  return smallest === rest\
    \ ? smallest : next_smallest(rest);\n}\n", "  if (lst.length === 0) {\n    return\
    \ undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  if (rest.length > 0) {\n    return next_smallest(rest);\n  }\n  return smallest;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length === 0) {\n    return\
    \ smallest;\n  }\n  return smallest < next_smallest(rest) ? smallest : next_smallest(rest);\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  return lst[1];\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return\
    \ smallest;\n  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return\
    \ undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  if (rest.length > 0) {\n    return next_smallest(rest);\n  }\n  return smallest;\n\
    }\n", "  if (lst.length < 2) {\n    return undefined;\n  }\n  return lst[1];\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const min = Math.min(...lst);\n\
    \  const index = lst.indexOf(min);\n  if (index === lst.length - 1) {\n    return\
    \ min;\n  }\n  return lst[index + 1];\n}\n", "  if (lst.length === 0) {\n    return\
    \ undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  if (rest.length > 0) {\n    return next_smallest(rest);\n  }\n  return smallest;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length === 0) {\n    return\
    \ smallest;\n  }\n  return smallest > next_smallest(rest) ? smallest : next_smallest(rest);\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  let secondSmallest = lst[1];\n  for (let i = 2; i < lst.length;\
    \ i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n   \
    \   smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest\
    \ = lst[i];\n    }\n  }\n  return secondSmallest;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest =\
    \ lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n \
    \ }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const [smallest, secondSmallest] = lst;\n  if (smallest < secondSmallest)\
    \ {\n    return secondSmallest;\n  }\n  return smallest;\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  return lst[1];\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest\
    \ = lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const min = lst[0];\n  const minIndex = lst.indexOf(min);\n  if (minIndex\
    \ === lst.length - 1) {\n    return min;\n  }\n  return lst[minIndex + 1];\n}\n",
  "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  return smallest === rest ? smallest : next_smallest(rest);\n\
    }\n", "  if (lst.length < 2) {\n    return undefined;\n  }\n  const smallest =\
    \ lst[0];\n  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length;\
    \ i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n   \
    \   smallest = lst[i];\n    } else if (lst[i] > smallest) {\n      secondSmallest\
    \ = lst[i];\n    }\n  }\n  return secondSmallest;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest =\
    \ lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n \
    \ }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const [smallest, secondSmallest] = lst;\n  if (smallest < secondSmallest)\
    \ {\n    return secondSmallest;\n  }\n  return smallest;\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest\
    \ = lst.slice(1);\n  return smallest === rest ? smallest : next_smallest(rest);\n\
    }\n", "  if (lst.length < 2) {\n    return undefined;\n  }\n  return lst[1];\n\
    }\n", "  if (lst.length < 2) return undefined;\n  return lst[1];\n}\n", "  if\
    \ (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return next_smallest(rest);\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  return smallest\
    \ === rest ? smallest : next_smallest(rest);\n}\n", "  if (lst.length === 0) {\n\
    \    return undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  return smallest === rest ? smallest : next_smallest(rest);\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest\
    \ = lst.slice(1);\n  if (rest.length > 0) {\n    return smallest;\n  }\n  return\
    \ smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const\
    \ smallest = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length > 0) {\n\
    \    return next_smallest(rest);\n  }\n  return smallest;\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest\
    \ = lst.slice(1);\n  return smallest === rest ? smallest : next_smallest(rest);\n\
    }\n", "  if (lst.length < 2) {\n    return undefined;\n  }\n  const smallest =\
    \ lst[0];\n  const secondSmallest = lst[1];\n  for (let i = 2; i < lst.length;\
    \ i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n   \
    \   smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest\
    \ = lst[i];\n    }\n  }\n  return secondSmallest;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return undefined;\n  }\n  const [smallest, secondSmallest] = lst;\n\
    \  return secondSmallest < smallest ? secondSmallest : smallest;\n}\n", "  if\
    \ (lst.length === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n\
    \  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return smallest;\n\
    \  }\n  return smallest;\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n   \
    \ if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const smallest\
    \ = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length > 0) {\n    return\
    \ next_smallest(rest);\n  }\n  return smallest;\n}\n", "  if (lst.length === 0)\
    \ {\n    return undefined;\n  }\n  return lst[1];\n}\n", "  if (lst.length ===\
    \ 0) {\n    return undefined;\n  }\n  return lst[1];\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest\
    \ = lst.slice(1);\n  return smallest === rest ? smallest : next_smallest(rest);\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const min = lst[0];\n\
    \  const min_index = lst.indexOf(min);\n  if (min_index === lst.length - 1) {\n\
    \    return min;\n  }\n  const next_min_index = min_index + 1;\n  if (next_min_index\
    \ < lst.length) {\n    return lst[next_min_index];\n  }\n  return undefined;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  const min = lst[0];\n\
    \  const minIndex = lst.indexOf(min);\n  if (minIndex === lst.length - 1) {\n\
    \    return min;\n  }\n  return lst[minIndex + 1];\n}\n", "  if (lst.length ===\
    \ 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const rest =\
    \ lst.slice(1);\n  if (rest.length === 0) {\n    return smallest;\n  }\n  return\
    \ smallest > next_smallest(rest) ? smallest : next_smallest(rest);\n}\n", "  if\
    \ (lst.length === 0) {\n    return undefined;\n  }\n  const min = lst[0];\n  const\
    \ min_index = lst.indexOf(min);\n  if (min_index === lst.length - 1) {\n    return\
    \ min;\n  }\n  return lst[min_index + 1];\n}\n", "  if (lst.length === 0) {\n\
    \    return undefined;\n  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n\
    \  return smallest < rest ? smallest : next_smallest(rest);\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const smallest = lst[0];\n  const index\
    \ = lst.indexOf(smallest);\n  if (index === lst.length - 1) {\n    return undefined;\n\
    \  }\n  return lst[index + 1];\n}\n", "  if (lst.length === 0) {\n    return undefined;\n\
    \  }\n  const smallest = lst[0];\n  const rest = lst.slice(1);\n  if (rest.length\
    \ > 0) {\n    return smallest;\n  }\n  return smallest;\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  let smallest = lst[0];\n  let index\
    \ = lst.indexOf(smallest);\n  if (index === lst.length - 1) {\n    return undefined;\n\
    \  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n\
    \      smallest = lst[i];\n      index = i;\n    }\n  }\n  return smallest;\n\
    }\n", "  if (lst.length === 0) {\n    return undefined;\n  }\n  let smallest =\
    \ lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n}\n", "  if (lst.length\
    \ <= 1) return undefined;\n  const [smallest, secondSmallest] = lst;\n  return\
    \ secondSmallest < smallest ? secondSmallest : smallest;\n}\n", "  if (lst.length\
    \ === 0) {\n    return undefined;\n  }\n  const min = lst[0];\n  const minIndex\
    \ = lst.indexOf(min);\n  if (minIndex === lst.length - 1) {\n    return min;\n\
    \  }\n  return lst[minIndex + 1];\n}\n", "  if (lst.length < 2) {\n    return\
    \ undefined;\n  }\n  return lst[1];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
