name: HumanEval_57_monotonic
language: ts
prompt: "//Return true is array elements are monotonically increasing or decreasing.\n\
  // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n\
  // >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4,\
  \ 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
  \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4,\
  \ 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9,\
  \ 9, 9, 9]),true);\n}\n\ntest();"
completions: ["  if (l.length === 0) {\n    return false;\n  }\n  let firstValue =\
    \ l[0];\n  for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n\
    \    if (currentValue < firstValue) {\n      return false;\n    }\n    if (currentValue\
    \ > firstValue) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ const m = l[i];\n    if (m <= n) {\n      return false;\n    }\n    n = m;\n\
    \  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const firstValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  let\
    \ n = l.length;\n  if (n <= 1) return true;\n  for (let i = 1; i < n; ++i) {\n\
    \    if (l[i - 1] > l[i]) return false;\n  }\n  return true;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  let prev: number[] = [];\n  let curr = [0];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    const val = l[i];\n    if (val > curr[curr.length - 1]) {\n    \
    \  curr.push(val);\n    } else if (val < prev[prev.length - 1]) {\n      curr.push(val);\n\
    \    } else {\n      curr.push(prev[prev.length - 1]);\n    }\n    prev = curr;\n\
    \    curr = [0];\n  }\n  return prev[prev.length - 1] === l[l.length - 1];\n}\n",
  "  const n = l.length;\n  if (n <= 1) return false;\n  const m = l[n - 1];\n  for\
    \ (let i = n - 2; i >= 0; i--) {\n    if (l[i] < m && l[i + 1] > m) return true;\n\
    \  }\n  return false;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const n = l.length;\n  if (n === 1) {\n    return l[0] >= 0;\n  }\n  let i\
    \ = 0;\n  let j = n - 1;\n  while (i < j) {\n    const m = l[i];\n    const k\
    \ = l[j];\n    if (m <= k) {\n      i++;\n    } else if (m > k) {\n      j--;\n\
    \    } else {\n      return true;\n    }\n  }\n  return false;\n}\n", "  let isIncreasing\
    \ = true;\n  let isDecreasing = true;\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (l[i] > l[i + 1]) {\n      isIncreasing = false;\n    } else if (l[i]\
    \ < l[i + 1]) {\n      isDecreasing = false;\n    }\n  }\n  return isIncreasing\
    \ || isDecreasing;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n \
    \ const firstValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const\
    \ currentValue = l[i];\n    if (currentValue < firstValue) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0] >= 0;\n  }\n  let\
    \ i = 0;\n  let x = 0;\n  let y = 0;\n  while (i < n) {\n    x = l[i];\n    y\
    \ = l[++i];\n    if (x < y) {\n      return false;\n    }\n    if (y < x) {\n\
    \      return true;\n    }\n  }\n  return false;\n}\n", "  if (l.length === 0)\
    \ {\n    return false;\n  }\n  const first = l[0];\n  let last;\n  let index =\
    \ -1;\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n   \
    \ if (current < first) {\n      return false;\n    }\n    if (current > last)\
    \ {\n      last = current;\n      index = i;\n    }\n  }\n  return index === -1\
    \ ? false : true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n  const\
    \ n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const m = l[i];\n   \
    \ if (m <= n) {\n      return false;\n    }\n    n = m;\n  }\n  return true;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if\
    \ (currentValue < firstValue) {\n      return false;\n    }\n    if (currentValue\
    \ > firstValue) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  let\
    \ n = l.length;\n  if (n <= 1) return false;\n  for (let i = 1; i < n; ++i) {\n\
    \    if (l[i - 1] > l[i]) return false;\n  }\n  return true;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n  const lastValue\
    \ = l[l.length - 1];\n  return firstValue <= lastValue && l.every(function (v,\
    \ i) {\n    return v === firstValue || (v === lastValue && i === l.length - 1);\n\
    \  });\n}\n", "  let n = l.length;\n  if (n <= 1) return false;\n  for (let i\
    \ = 1; i < n; ++i) {\n    if (l[i - 1] > l[i]) return false;\n  }\n  return true;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  const n = l.length;\n  if (n === 0) return\
    \ false;\n  const firstValue = l[0];\n  for (let i = 1; i < n; ++i) {\n    const\
    \ currentValue = l[i];\n    if (currentValue < firstValue) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
