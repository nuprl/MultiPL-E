name: HumanEval_57_monotonic
language: ts
prompt: "//Return true is array elements are monotonically increasing or decreasing.\n\
  // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n\
  // >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4,\
  \ 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
  \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4,\
  \ 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9,\
  \ 9, 9, 9]),true);\n}\n\ntest();"
completions: ["  if (l.length === 0) {\n    return false;\n  }\n  let firstValue =\
    \ l[0];\n  for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n\
    \    if (currentValue < firstValue) {\n      return false;\n    }\n    if (currentValue\
    \ > firstValue) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ const m = l[i];\n    if (m <= n) {\n      return false;\n    }\n    n = m;\n\
    \  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const firstValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  let\
    \ n = l.length;\n  if (n <= 1) return true;\n  for (let i = 1; i < n; ++i) {\n\
    \    if (l[i - 1] > l[i]) return false;\n  }\n  return true;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  let prev: number[] = [];\n  let curr = [0];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    const val = l[i];\n    if (val > curr[curr.length - 1]) {\n    \
    \  curr.push(val);\n    } else if (val < prev[prev.length - 1]) {\n      curr.push(val);\n\
    \    } else {\n      curr.push(prev[prev.length - 1]);\n    }\n    prev = curr;\n\
    \    curr = [0];\n  }\n  return prev[prev.length - 1] === l[l.length - 1];\n}\n",
  "  const n = l.length;\n  if (n <= 1) return false;\n  const m = l[n - 1];\n  for\
    \ (let i = n - 2; i >= 0; i--) {\n    if (l[i] < m && l[i + 1] > m) return true;\n\
    \  }\n  return false;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const n = l.length;\n  if (n === 1) {\n    return l[0] >= 0;\n  }\n  let i\
    \ = 0;\n  let j = n - 1;\n  while (i < j) {\n    const m = l[i];\n    const k\
    \ = l[j];\n    if (m <= k) {\n      i++;\n    } else if (m > k) {\n      j--;\n\
    \    } else {\n      return true;\n    }\n  }\n  return false;\n}\n", "  let isIncreasing\
    \ = true;\n  let isDecreasing = true;\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (l[i] > l[i + 1]) {\n      isIncreasing = false;\n    } else if (l[i]\
    \ < l[i + 1]) {\n      isDecreasing = false;\n    }\n  }\n  return isIncreasing\
    \ || isDecreasing;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n \
    \ const firstValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const\
    \ currentValue = l[i];\n    if (currentValue < firstValue) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0] >= 0;\n  }\n  let\
    \ i = 0;\n  let x = 0;\n  let y = 0;\n  while (i < n) {\n    x = l[i];\n    y\
    \ = l[++i];\n    if (x < y) {\n      return false;\n    }\n    if (y < x) {\n\
    \      return true;\n    }\n  }\n  return false;\n}\n", "  if (l.length === 0)\
    \ {\n    return false;\n  }\n  const first = l[0];\n  let last;\n  let index =\
    \ -1;\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n   \
    \ if (current < first) {\n      return false;\n    }\n    if (current > last)\
    \ {\n      last = current;\n      index = i;\n    }\n  }\n  return index === -1\
    \ ? false : true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n  const\
    \ n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const m = l[i];\n   \
    \ if (m <= n) {\n      return false;\n    }\n    n = m;\n  }\n  return true;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if\
    \ (currentValue < firstValue) {\n      return false;\n    }\n    if (currentValue\
    \ > firstValue) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  let\
    \ n = l.length;\n  if (n <= 1) return false;\n  for (let i = 1; i < n; ++i) {\n\
    \    if (l[i - 1] > l[i]) return false;\n  }\n  return true;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n  const lastValue\
    \ = l[l.length - 1];\n  return firstValue <= lastValue && l.every(function (v,\
    \ i) {\n    return v === firstValue || (v === lastValue && i === l.length - 1);\n\
    \  });\n}\n", "  let n = l.length;\n  if (n <= 1) return false;\n  for (let i\
    \ = 1; i < n; ++i) {\n    if (l[i - 1] > l[i]) return false;\n  }\n  return true;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  const n = l.length;\n  if (n === 0) return\
    \ false;\n  const firstValue = l[0];\n  for (let i = 1; i < n; ++i) {\n    const\
    \ currentValue = l[i];\n    if (currentValue < firstValue) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  let monotonic = true;\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      monotonic = false;\n\
    \      break;\n    }\n  }\n  return monotonic;\n}\n", "  if (l.length === 0) {\n\
    \    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "  if (l.length === 0) {\n    return false;\n  }\n  const n = l.length;\n  if (n\
    \ === 1) {\n    return l[0] >= 0;\n  }\n  const p = l[n - 1];\n  for (let i =\
    \ 0; i < n - 1; ++i) {\n    if (l[i] <= p && l[i + 1] >= p) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\n", "  const n = l.length;\n  if (n <= 1) {\n\
    \    return true;\n  }\n  let prev = l[0];\n  for (let i = 1; i < n; ++i) {\n\
    \    const curr = l[i];\n    if (curr < prev) {\n      return false;\n    }\n\
    \    prev = curr;\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < n)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    const m = l[i];\n    if (m <= n) {\n      return false;\n    }\n\
    \    n = m;\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ <= n) {\n      return false;\n    }\n    n = l[i];\n  }\n  return true;\n}\n",
  "  const n = l.length;\n  if (n === 0) return false;\n  const firstValue = l[0];\n\
    \  for (let i = 1; i < n; ++i) {\n    const currentValue = l[i];\n    if (currentValue\
    \ < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  const n = l.length;\n  if (n ===\
    \ 0) {\n    return false;\n  }\n  const firstValue = l[0];\n  for (let i = 1;\
    \ i < n; ++i) {\n    const currentValue = l[i];\n    if (currentValue < firstValue)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  let prev = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n\
    \  }\n  return true;\n}\n", "  let prev: number[] = [];\n  let cur: number[] =\
    \ [];\n  for (let i = 0; i < l.length; i++) {\n    cur[i] = l[i];\n    if (cur[i]\
    \ !== prev[i]) {\n      if (prev.length > 0) {\n        if (cur.length > 0) {\n\
    \          if (cur[cur.length - 1] < prev[prev.length - 1]) {\n            return\
    \ true;\n          }\n        } else {\n          return true;\n        }\n  \
    \    } else {\n        return true;\n      }\n    }\n    prev[i] = cur[i];\n \
    \ }\n  return false;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const n = l.length;\n  if (n === 1) {\n    return l[0] >= 0;\n  }\n  const\
    \ m = l[n - 1];\n  for (let i = n - 2; i >= 0; i--) {\n    if (l[i] < m && l[i\
    \ + 1] > m) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n  for (let i =\
    \ 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
    \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  let prev = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n\
    \  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const firstValue = l[0];\n  const lastValue = l[l.length - 1];\n  return firstValue\
    \ <= lastValue && l.every(function (v, i) {\n    return v === lastValue || (v\
    \ > lastValue && v < firstValue);\n  });\n}\n", "  if (l.length === 0) {\n   \
    \ return false;\n  }\n  let firstValue = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    const currentValue = l[i];\n    if (currentValue < firstValue) {\n\
    \      return false;\n    }\n    if (currentValue > firstValue) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  let\
    \ isIncreasing = true;\n  let isDecreasing = true;\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] > l[i - 1]) {\n      isIncreasing = false;\n    }\n   \
    \ if (l[i] < l[i - 1]) {\n      isDecreasing = false;\n    }\n  }\n  return isIncreasing\
    \ || isDecreasing;\n}\n", "  let i = 0;\n  let j = l.length - 1;\n  while (i <\
    \ j) {\n    const m = (i + j) >> 1;\n    if (l[m] < l[i]) j = m;\n    else i =\
    \ m;\n  }\n  return l[i] < l[l.length - 1];\n}\n", "  let isIncreasing = true;\n\
    \  let isDecreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    const\
    \ x = l[i];\n    if (x < l[i - 1]) {\n      isDecreasing = false;\n    } else\
    \ if (x > l[i - 1]) {\n      isIncreasing = false;\n    } else {\n      isIncreasing\
    \ &= x > l[i - 1];\n      isDecreasing &= x < l[i - 1];\n    }\n  }\n  return\
    \ isIncreasing || isDecreasing;\n}\n", "  let isIncreasing = true;\n  let isDecreasing\
    \ = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n\
    \      isDecreasing = false;\n    }\n    if (l[i] > l[i - 1]) {\n      isIncreasing\
    \ = false;\n    }\n  }\n  return isIncreasing || isDecreasing;\n}\n", "  const\
    \ n = l.length;\n  if (n === 0) {\n    return false;\n  }\n  const a0 = l[n -\
    \ 1];\n  const a1 = l[n - 2];\n  return a0 > a1;\n}\n", "  if (l.length === 0)\
    \ {\n    return false;\n  }\n  const n = l.length;\n  const m = l[n - 1];\n  for\
    \ (let i = n - 2; i >= 0; i--) {\n    if (l[i] < m && l[i + 1] > m) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m <= n) {\n      return\
    \ false;\n    }\n    n = m;\n  }\n  return true;\n}\n", "  if (l.length === 0)\
    \ {\n    return false;\n  }\n  const firstValue = l[0];\n  for (let i = 1; i <\
    \ l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue < firstValue)\
    \ {\n      return false;\n    }\n    if (currentValue > firstValue) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n", "  let prev: number[] = l.slice()\n\
    \  let monotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]\
    \ !== prev[i]) {\n      monotonic = false\n      break\n    }\n  }\n  return monotonic\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n\
    \  let lastValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const currentValue\
    \ = l[i];\n    if (currentValue < firstValue) {\n      firstValue = currentValue;\n\
    \    }\n    if (currentValue > lastValue) {\n      lastValue = currentValue;\n\
    \    }\n  }\n  return firstValue === lastValue;\n}\n", "  if (l.length === 0)\
    \ {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m <= n) {\n \
    \     return false;\n    }\n    n = m;\n  }\n  return true;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] <= n) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m > n) {\n  \
    \    return false;\n    }\n    n = m;\n  }\n  return true;\n}\n", "  const n =\
    \ l.length;\n  if (n <= 1) {\n    return true;\n  }\n  let prev = l[0];\n  for\
    \ (let i = 1; i < n; ++i) {\n    if (l[i] < prev) {\n      return false;\n   \
    \ }\n    prev = l[i];\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n \
    \   return false;\n  }\n  const firstValue = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    const currentValue = l[i];\n    if (currentValue < firstValue) {\n\
    \      return false;\n    }\n    if (currentValue > firstValue) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0] >= 0;\n\
    \  }\n  const p = l[0], q = l[0], i;\n  for (i = 1; i < n; ++i) {\n    p = l[i];\n\
    \    q = l[i];\n    if (p < q) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if\
    \ (currentValue < firstValue) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  let i = 0;\n  let j = l.length - 1;\n  let k = l[0];\n  while (i < j)\
    \ {\n    if (l[i] < k) {\n      i++;\n    } else if (l[j] > k) {\n      j--;\n\
    \    } else {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m <= n) {\n \
    \     return false;\n    }\n    n = m;\n  }\n  return true;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    const m = l[i];\n    if (m <= n) {\n      return false;\n    }\n\
    \    n = m;\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0] >= 0;\n  }\n  const\
    \ p = l[0];\n  for (let i = 1; i < n; ++i) {\n    if (l[i] <= p) {\n      return\
    \ false;\n    }\n    p = l[i];\n  }\n  return true;\n}\n", "  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  let n = l.length;\n  if (n <= 1) return true;\n  for (let i = 1; i <\
    \ n; ++i) {\n    if (l[i - 1] > l[i]) return false;\n  }\n  return true;\n}\n",
  "  let monotonic = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >\
    \ l[i - 1]) {\n      monotonic = false;\n      break;\n    }\n  }\n  return monotonic;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if\
    \ (currentValue < firstValue) {\n      return false;\n    }\n    if (currentValue\
    \ > firstValue) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  const n = l.length;\n  const a0\
    \ = l[n - 1];\n  const a1 = l[n - 2];\n  const a2 = l[n - 3];\n  const a3 = l[n\
    \ - 4];\n  return a0 > a1 && a0 > a2 && a0 > a3 && a1 > a2 && a1 > a3 && a2 >\
    \ a3 && a2 > a0;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n  const\
    \ n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n   \
    \   return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n\
    \    return false;\n  }\n  let firstValue = l[0];\n  let lastValue = l[0];\n \
    \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if\
    \ (currentValue < firstValue) {\n      firstValue = currentValue;\n    }\n   \
    \ if (currentValue > lastValue) {\n      lastValue = currentValue;\n    }\n  }\n\
    \  return firstValue === lastValue;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  let firstValue = l[0];\n  let lastValue = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
    \ < firstValue) {\n      firstValue = currentValue;\n    }\n    if (currentValue\
    \ > lastValue) {\n      lastValue = currentValue;\n    }\n  }\n  return firstValue\
    \ <= lastValue;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n  const\
    \ firstValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const currentValue\
    \ = l[i];\n    if (currentValue < firstValue) {\n      return true;\n    }\n \
    \   if (currentValue > firstValue) {\n      return false;\n    }\n  }\n  return\
    \ false;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n\
    \    if (currentValue < firstValue) {\n      return false;\n    }\n    if (currentValue\
    \ > firstValue) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const n = l.length;\n  if (n === 1) {\n    return l[0] >= 0;\n  }\n  const\
    \ m = l[n - 1];\n  for (let i = n - 2; i >= 0; --i) {\n    if (l[i] < m && l[i\
    \ + 1] > m) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  const\
    \ n = l.length;\n  if (n === 0) return true;\n  if (n === 1) return false;\n \
    \ if (l[0] > l[1]) return true;\n  if (l[0] < l[1]) return false;\n  for (let\
    \ i = 1; i < n; ++i) {\n    if (l[i] < l[i - 1]) return false;\n  }\n  return\
    \ true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ < n) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  const n = l.length;\n  if (n === 0) {\n    return false;\n  }\n  const\
    \ firstValue = l[0];\n  for (let i = 1; i < n; ++i) {\n    const currentValue\
    \ = l[i];\n    if (currentValue < firstValue) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev)\
    \ {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n}\n",
  "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
    \ i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m <= n) {\n      return\
    \ false;\n    }\n    n = m;\n  }\n  return true;\n}\n", "  if (l.length === 0)\
    \ {\n    return false;\n  }\n  let firstValue = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    const currentValue = l[i];\n    if (currentValue < firstValue) {\n\
    \      return true;\n    }\n    if (currentValue > firstValue) {\n      return\
    \ false;\n    }\n  }\n  return false;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  let first = l[0];\n  for (let i = 1; i < l.length; i++) {\n \
    \   const current = l[i];\n    if (current < first) {\n      return false;\n \
    \   }\n    if (current > first) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0] >= 0;\n  }\n  let\
    \ i = 0;\n  let j = n - 1;\n  while (i < j) {\n    const m = (i + j) >> 1;\n \
    \   if (l[m] < 0 || l[m] > l[j]) {\n      j = m;\n    } else {\n      i = m +\
    \ 1;\n    }\n  }\n  return l[i] < 0;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < n)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  let first = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current\
    \ < first) {\n      return false;\n    }\n    if (current > first) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
    \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
    \ {\n      return true;\n    }\n    if (current > first) {\n      return false;\n\
    \    }\n  }\n  return false;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const m =\
    \ l[i];\n    if (m <= n) {\n      return false;\n    }\n    n = m;\n  }\n  return\
    \ true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l.length;\n\
    \  if (n === 1) {\n    return l[0] >= 0;\n  }\n  let i = 0;\n  let j = n - 1;\n\
    \  while (i < j) {\n    const m = (i + j) >> 1;\n    if (l[m] < l[i]) {\n    \
    \  j = m;\n    } else {\n      i = m;\n    }\n  }\n  return l[i] > l[j];\n}\n",
  "  let prev: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]\
    \ !== prev[i]) {\n      return true;\n    }\n    prev[i] = l[i];\n  }\n  return\
    \ false;\n}\n", "  let isIncreasing = true;\n  let isDecreasing = true;\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isIncreasing\
    \ = false;\n    }\n    if (l[i] < l[i - 1]) {\n      isDecreasing = false;\n \
    \   }\n  }\n  return isIncreasing || isDecreasing;\n}\n", "  let i = 0;\n  let\
    \ j = 1;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n   \
    \   i++;\n    } else if (l[i] > l[j]) {\n      j++;\n    } else {\n      i++;\n\
    \      j++;\n    }\n  }\n  return j - i === 1;\n}\n", "  let isIncreasing = true;\n\
    \  let isDecreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    const\
    \ x = l[i];\n    if (x < l[i - 1]) {\n      isDecreasing = false;\n    } else\
    \ if (x > l[i - 1]) {\n      isIncreasing = false;\n    } else {\n      isIncreasing\
    \ = isDecreasing = true;\n      break;\n    }\n  }\n  return isIncreasing || isDecreasing;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if\
    \ (currentValue < firstValue) {\n      return true;\n    }\n    if (currentValue\
    \ > firstValue) {\n      return false;\n    }\n  }\n  return false;\n}\n", " \
    \ if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
    \ i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m > n) {\n      return\
    \ false;\n    } else if (m === n) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n =\
    \ l.length;\n  let i = 0;\n  let x = 0;\n  let y = 0;\n  while (i < n) {\n   \
    \ const xi = l[i];\n    const yi = l[++i];\n    const xx = x;\n    const yy =\
    \ y;\n    if (xx < yx) {\n      x = xi;\n    } else {\n      y = yi;\n    }\n\
    \    if (x === yx) {\n      continue;\n    }\n    if (x === yx && y === yx) {\n\
    \      return true;\n    }\n    if (x === yx && y < yx) {\n      return false;\n\
    \    }\n    if (x < yx && y === yx) {\n      return true;\n    }\n    if (x <\
    \ yx && y < yx) {\n      return false;\n    }\n  }\n  return false;\n}\n", " \
    \ if (l.length === 0) {\n    return false;\n  }\n  let firstVal = l[0];\n  let\
    \ lastVal = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const currentVal\
    \ = l[i];\n    if (currentVal < firstVal) {\n      firstVal = currentVal;\n  \
    \  }\n    if (currentVal > lastVal) {\n      lastVal = currentVal;\n    }\n  }\n\
    \  return firstVal >= lastVal;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  let firstValue = l[0];\n  let lastValue = l[0];\n  for (let i = 1; i <\
    \ l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue < firstValue)\
    \ {\n      firstValue = currentValue;\n    }\n    if (currentValue > lastValue)\
    \ {\n      lastValue = currentValue;\n    }\n  }\n  return firstValue === lastValue;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if\
    \ (currentValue < firstValue) {\n      return false;\n    }\n    if (currentValue\
    \ > firstValue) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  const n = l.length;\n  const m\
    \ = l[n - 1];\n  for (let i = n - 2; i >= 0; i--) {\n    if (l[i] < m && l[i +\
    \ 1] > m) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  const n\
    \ = l.length;\n  if (n < 2) {\n    return true;\n  }\n  let prev = l[0];\n  for\
    \ (let i = 1; i < n; ++i) {\n    if (l[i] <= prev) {\n      return false;\n  \
    \  }\n    prev = l[i];\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n\
    \    return false;\n  }\n  let firstValue = l[0];\n  let lastValue = l[0];\n \
    \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if\
    \ (currentValue < firstValue) {\n      firstValue = currentValue;\n    }\n   \
    \ if (currentValue > lastValue) {\n      lastValue = currentValue;\n    }\n  }\n\
    \  return firstValue === lastValue;\n}\n", "  let n = l.length;\n  if (n < 2)\
    \ {\n    return false;\n  }\n  let first = 0;\n  let last = n - 1;\n  let mid\
    \ = 0;\n  while (first < last) {\n    mid = first + Math.floor((last - first)\
    \ / 2);\n    if (l[mid] < l[first]) {\n      first = mid + 1;\n    } else {\n\
    \      last = mid - 1;\n    }\n  }\n  return l[first] === l[last];\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m <= n) {\n      return\
    \ false;\n    }\n    n = m;\n  }\n  return true;\n}\n", "  let n = l.length;\n\
    \  if (n === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  let lastValue\
    \ = l[n - 1];\n  for (let i = 1; i < n; ++i) {\n    const currentValue = l[i];\n\
    \    if (currentValue < firstValue) {\n      return false;\n    }\n    if (currentValue\
    \ > lastValue) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  const n = l.length;\n  if (n <=\
    \ 2) {\n    return true;\n  }\n  const m = l[n - 1];\n  for (let i = n - 2; i\
    \ >= 0; --i) {\n    if (l[i] < m && l[i + 1] > m) {\n      return false;\n   \
    \ }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const m =\
    \ l[i];\n    if (m <= n) {\n      return false;\n    }\n    n = m;\n  }\n  return\
    \ true;\n}\n", "  let isIncreasing = true;\n  let isDecreasing = true;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    const x = l[i];\n    if (x < l[i - 1])\
    \ {\n      isDecreasing = false;\n    } else if (x > l[i - 1]) {\n      isIncreasing\
    \ = false;\n    } else {\n      isIncreasing = isDecreasing = true;\n    }\n \
    \ }\n  return isIncreasing || isDecreasing;\n}\n", "  let i = 0;\n  let j = l.length\
    \ - 1;\n  while (i < j) {\n    const m = (i + j) >> 1;\n    if (l[m] < l[i]) j\
    \ = m;\n    else i = m;\n  }\n  return l[j] < l[i];\n}\n", "  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    const m = l[i];\n    if (m <= n) {\n      return false;\n    }\n\
    \    n = m;\n  }\n  return true;\n}\n", "  let i = 0;\n  let j = l.length - 1;\n\
    \  while (i < j) {\n    const m = (i + j) >> 1;\n    if (l[m] < l[i]) j = m;\n\
    \    else i = m;\n  }\n  return l[i] < l[l.length - 1];\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    const m = l[i];\n    if (m <= n) {\n      return false;\n    }\n\
    \    n = m;\n  }\n  return true;\n}\n", "  const n = l.length;\n  if (n < 2) return\
    \ false;\n  const s = l[0];\n  for (let i = 1; i < n; ++i) {\n    if (l[i] < s)\
    \ return false;\n    if (l[i] > s) return true;\n  }\n  return false;\n}\n", " \
    \ if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  let\
    \ lastValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const currentValue\
    \ = l[i];\n    if (currentValue < firstValue) {\n      firstValue = currentValue;\n\
    \    }\n    if (currentValue > lastValue) {\n      lastValue = currentValue;\n\
    \    }\n  }\n  return firstValue === lastValue;\n}\n", "  if (l.length === 0)\
    \ {\n    return false;\n  }\n  const n = l.length;\n  if (n === 1) {\n    return\
    \ l[0] >= 0;\n  }\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    const\
    \ m = l[i];\n    const k = l[j];\n    if (m > k && m > l[++i]) {\n      return\
    \ false;\n    }\n    if (k < m && k < l[--j]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < n)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  let lastValue = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if\
    \ (currentValue < firstValue) {\n      firstValue = currentValue;\n    }\n   \
    \ if (currentValue > lastValue) {\n      lastValue = currentValue;\n    }\n  }\n\
    \  return firstValue <= lastValue;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  const firstValue = l[0];\n  const lastValue = l[l.length - 1];\n\
    \  for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if\
    \ (currentValue < firstValue) {\n      return false;\n    }\n    if (currentValue\
    \ > lastValue) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const n = l.length;\n  const m = l[n - 1];\n  for (let i = n - 2; i >= 0; i--)\
    \ {\n    if (l[i] < m && l[i + 1] > m) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m <= n)\
    \ {\n      return false;\n    }\n    n = m;\n  }\n  return true;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
    \ i = 1; i < l.length; i++) {\n    if (l[i] < first) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const firstValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ const currentValue = l[i];\n    if (currentValue < firstValue) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  const firstValue = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    const currentValue = l[i];\n    if (currentValue < firstValue) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n\
    \    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    const m = l[i];\n    if (m <= n) {\n      return false;\n    }\n    n\
    \ = m;\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0] >= 0;\n  }\n  const\
    \ m = l[n - 1];\n  for (let i = n - 2; i >= 0; --i) {\n    const a = l[i];\n \
    \   const b = l[i + 1];\n    if (a < m && b >= m) {\n      return false;\n   \
    \ }\n    if (a >= m && b < m) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] <= n) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ < n) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for (let i = 1;\
    \ i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue <\
    \ firstValue) {\n      return true;\n    }\n    if (currentValue > firstValue)\
    \ {\n      return false;\n    }\n  }\n  return false;\n}\n", "  let monotonicCount\
    \ = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    const current = l[i];\n    if (current > max) {\n      max = current;\n \
    \   }\n    if (current < min) {\n      min = current;\n    }\n    monotonicCount\
    \ += 1;\n  }\n  return monotonicCount === l.length;\n}\n", "  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  const n = l.length;\n  const m = l[n - 1];\n\
    \  for (let i = n - 2; i >= 0; --i) {\n    if (l[i] < m && l[i + 1] > m) {\n \
    \     return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length === 0)\
    \ {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l.length;\n\
    \  if (n === 1) {\n    return l[0] >= 0;\n  }\n  let i = 0;\n  let x = 0;\n  let\
    \ y = l[0];\n  while (i < n) {\n    const slope = (l[i] - y) / (x - i);\n    if\
    \ (slope >= 0) {\n      x = i;\n      y = l[i];\n    } else {\n      i = i + 1;\n\
    \    }\n  }\n  return y >= 0;\n}\n", "  let n = l.length;\n  if (n <= 1) return\
    \ true;\n  for (let i = 1; i < n; ++i) {\n    if (l[i-1] > l[i] || l[i-1] ===\
    \ l[i] && l[i] !== 0) return false;\n  }\n  return true;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for (let i = 1;\
    \ i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue <\
    \ firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for (let i = 1; i\
    \ < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue < firstValue)\
    \ {\n      return false;\n    }\n    if (currentValue > firstValue) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  const firstValue = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    const currentValue = l[i];\n    if (currentValue < firstValue) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n\
    \    return false;\n  }\n  const firstValue = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    const currentValue = l[i];\n    if (currentValue < firstValue) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length === 0)\
    \ {\n    return false;\n  }\n  const n = l.length;\n  if (n === 1) {\n    return\
    \ l[0] >= 0;\n  }\n  const m = l[n - 1];\n  for (let i = n - 2; i >= 0; --i) {\n\
    \    const a = l[i];\n    const b = l[i + 1];\n    if (a < b) continue;\n    if\
    \ (a > b) return false;\n    if (a > m) return false;\n    m = a;\n  }\n  return\
    \ true;\n}\n", "  let n = l.length;\n  if (n <= 1) {\n    return true;\n  }\n\
    \  let prev = l[0];\n  let curr = l[1];\n  for (let i = 2; i < n; ++i) {\n   \
    \ const cur = l[i];\n    if (prev < cur) {\n      return true;\n    }\n    prev\
    \ = cur;\n  }\n  return false;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  let firstValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const\
    \ currentValue = l[i];\n    if (currentValue < firstValue) {\n      return true;\n\
    \    } else if (currentValue > firstValue) {\n      return false;\n    }\n  }\n\
    \  return false;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n  let\
    \ firstValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  let isIncreasing\
    \ = true;\n  let isDecreasing = true;\n  for (let i = 1; i < l.length; i++) {\n\
    \    if (l[i] > l[i - 1]) {\n      isIncreasing = false;\n    }\n    if (l[i]\
    \ < l[i - 1]) {\n      isDecreasing = false;\n    }\n  }\n  return isIncreasing\
    \ || isDecreasing;\n}\n", "  let i = 0;\n  let j = l.length - 1;\n  while (i <\
    \ j) {\n    const m = (i + j) >> 1;\n    if (l[m] < l[i]) j = m;\n    else i =\
    \ m;\n  }\n  return l[j] < l[i];\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  let firstValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const\
    \ currentValue = l[i];\n    if (currentValue < firstValue) {\n      return true;\n\
    \    }\n    if (currentValue > firstValue) {\n      return false;\n    }\n  }\n\
    \  return false;\n}\n", "  const n = l.length;\n  if (n === 0) return false;\n\
    \  if (n === 1) return true;\n  const p = l[0], s = l[1], e = l[n-1];\n  return\
    \ e < 0 || p < e || (p === e && p > s) || (p < s && p > e);\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n  const lastValue\
    \ = l[l.length - 1];\n  return firstValue <= lastValue && l.every(function (v,\
    \ i) { return v === lastValue || v >= firstValue; });\n}\n", "  const n = l.length;\n\
    \  if (n === 0) return false;\n  if (n === 1) return true;\n  if (l[0] > l[n-1])\
    \ return false;\n  if (l[0] === l[n-1]) return true;\n  for (let i = 1; i < n;\
    \ ++i) {\n    if (l[i] > l[i-1]) return false;\n    if (l[i] === l[i-1]) return\
    \ true;\n  }\n  return false;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const m =\
    \ l[i];\n    if (m <= n) {\n      return false;\n    }\n    n = m;\n  }\n  return\
    \ true;\n}\n", "  const n = l.length;\n  if (n === 0) return true;\n  if (n ===\
    \ 1) return false;\n  const p = l[0];\n  const q = l[n - 1];\n  for (let i = 1;\
    \ i < n; ++i) {\n    if (l[i] < p) {\n      return false;\n    }\n    if (l[i]\
    \ > q) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const n = l.length;\n  const a0 = l[n -\
    \ 1];\n  let a1 = l[0];\n  let a2 = l[1];\n  let a3 = l[2];\n  let a4 = l[3];\n\
    \  let a5 = l[4];\n  let a6 = l[5];\n  let a7 = l[6];\n  let a8 = l[7];\n  let\
    \ a9 = l[8];\n  let a10 = l[9];\n  let a11 = l[10];\n  let a12 = l[11];\n  let\
    \ a13 = l[12];\n  let a14 = l[13];\n  let a15 = l[14];\n  let a16 = l[15];\n \
    \ let a17 = l[16];\n  let a18 = l[17];\n  let a19 = l[18];\n  let a20 = l[19];\n\
    \  let a21 = l[20];\n  let a22 = l[21];\n  let a23 = l[22];\n  let a24 = l[23];\n\
    \  let a25 = l[24];\n  let a26 = l[25];\n  let a27 = l[26];\n  let a28 = l[27];\n\
    \  let a29 = l[28];\n  let a30 = l[29];\n  let a31 = l[30];\n  let a32 = l[31];\n\
    \  let a33 = l[32];\n  let a34 = l[33];\n  let a35 = l[34];\n  let a36 = l[35];\n\
    \  let a37 = l[36];\n  let a38 = l[37];\n  let a39 = l[38];\n  let a40 = l[39];\n\
    \  let a41 = l[40];\n  let a42 = l[41];\n  let a43 = l[42];\n  let a44 = l[43];\n\
    \  let a45 = l[44];\n  let a46 = l[45];\n  let a47 = l[46];\n  let a48 = l[47];\n\
    \  let a49 = l[48];\n  let a50 = l[49];\n  let a51 = l[50];\n  let a52 = l[51];\n\
    \  let a53 = l[52];\n  let a54 = l[53];\n  let a55 = l[54];\n  let a56 = l[55];\n\
    \  let a57 = l[56];\n  let a58 = l[57];\n  let a59 = l[58];\n  let ", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i\
    \ < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n\
    \      return false;\n    }\n    if (current > first) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\n", "  let n = l.length;\n  if (n <= 1) return\
    \ true;\n  for (let i = 1; i < n; ++i) {\n    if (l[i - 1] > l[i]) return false;\n\
    \  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < n)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  const n = l.length;\n  if (n <= 2) {\n    return\
    \ true;\n  }\n  const m = l[n - 1];\n  for (let i = n - 2; i >= 0; --i) {\n  \
    \  const a = l[i];\n    const b = l[i + 1];\n    if (a < b && b < m) {\n     \
    \ return false;\n    }\n    if (a > b && a < m) {\n      return true;\n    }\n\
    \  }\n  return false;\n}\n", "  const n = l.length;\n  if (n === 0) return false;\n\
    \  if (n === 1) return true;\n  const p = l[0], q = l[0], i;\n  for (i = 1; i\
    \ < n; ++i) {\n    p = l[i];\n    q = l[i];\n    if (p < q) continue;\n    if\
    \ (p > q) return false;\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n\
    \    return false;\n  }\n  const firstValue = l[0];\n  const lastValue = l[l.length\
    \ - 1];\n  return firstValue <= lastValue && l.every(function (v, i) {\n    return\
    \ v === lastValue || (v === firstValue && i === 0);\n  });\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n  for (let i =\
    \ 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
    \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  const n = l.length;\n  if (n === 1) {\n    return\
    \ l[0] >= 0;\n  }\n  const m = l[n - 1];\n  for (let i = n - 2; i >= 0; --i) {\n\
    \    const a = l[i];\n    const b = l[i + 1];\n    if (a < b) continue;\n    if\
    \ (a > b) return true;\n    return false;\n  }\n  return m >= 0;\n}\n", "  let\
    \ i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n\
    \      i++;\n    } else if (l[i] > l[j]) {\n      j--;\n    } else {\n      i++;\n\
    \      j--;\n    }\n  }\n  return i === j;\n}\n", "  if (l.length === 0) {\n \
    \   return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    const m = l[i];\n    if (m > n) {\n      return false;\n    } else if\
    \ (m === n) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    const m = l[i];\n    if (m > n) {\n      return false;\n    }\n\
    \    if (m === n) {\n      continue;\n    }\n    return false;\n  }\n  return\
    \ true;\n}\n", "  let isIncreasing = true;\n  let isDecreasing = true;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      isIncreasing\
    \ = false;\n    }\n    if (l[i] < l[i + 1]) {\n      isDecreasing = false;\n \
    \   }\n  }\n  return isIncreasing || isDecreasing;\n}\n", "  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    const m = l[i];\n    if (m <= n) {\n      return false;\n    }\n\
    \    n = m;\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ < n) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  let firstVal = l[0];\n  for (let i = 1;\
    \ i < l.length; i++) {\n    if (l[i] < firstVal) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  let monotonic = true;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    const x = l[i];\n    if (x < l[i - 1] || x > l[i + 1]) {\n     \
    \ monotonic = false;\n      break;\n    }\n  }\n  return monotonic;\n}\n", " \
    \ if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  let\
    \ last = 0;\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n\
    \    if (current < first) {\n      return false;\n    }\n    if (current > last)\
    \ {\n      return true;\n    }\n    last = current;\n  }\n  return false;\n}\n",
  "  let isIncreasing = true;\n  let isDecreasing = true;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (l[i] < l[i - 1]) {\n      isIncreasing = false;\n    }\n   \
    \ if (l[i] > l[i - 1]) {\n      isDecreasing = false;\n    }\n  }\n  return isIncreasing\
    \ || isDecreasing;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n \
    \ const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length === 0)\
    \ {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ < n) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  const n =\
    \ l.length;\n  if (n <= 1) {\n    return true;\n  }\n  const firstValue = l[0];\n\
    \  for (let i = 1; i < n; ++i) {\n    const currentValue = l[i];\n    if (currentValue\
    \ < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  let\
    \ monotonic = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l[i\
    \ - 1]) {\n      monotonic = false;\n      break;\n    }\n  }\n  return monotonic;\n\
    }\n", "  let isIncreasing = true;\n  let isDecreasing = true;\n  for (let i =\
    \ 1; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isIncreasing = false;\n\
    \    }\n    if (l[i] < l[i - 1]) {\n      isDecreasing = false;\n    }\n  }\n\
    \  return isIncreasing || isDecreasing;\n}\n", "  let isIncreasing = true;\n \
    \ let isDecreasing = true;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ > l[i - 1]) {\n      isIncreasing = false;\n    }\n    if (l[i] < l[i - 1])\
    \ {\n      isDecreasing = false;\n    }\n  }\n  return isIncreasing || isDecreasing;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  let i = 0;\n  let j = l.length - 1;\n  while\
    \ (i < j) {\n    const m = (i + j) >> 1;\n    if (l[m] < l[i]) j = m;\n    else\
    \ i = m;\n  }\n  return l[j] < l[i];\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n  \
    \  if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return\
    \ true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l.length;\n\
    \  if (n === 1) {\n    return l[0] >= 0;\n  }\n  const m = l[n - 1];\n  for (let\
    \ i = n - 2; i >= 0; i--) {\n    if (l[i] < m && l[i + 1] > m) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return\
    \ false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] < n) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
    \ < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  let n = l.length;\n  if (n < 2) {\n    return true;\n\
    \  }\n  let first = 0;\n  let last = n - 1;\n  let mid = 0;\n  while (first <\
    \ last) {\n    mid = first + Math.floor((last - first) / 2);\n    if (l[mid] <\
    \ l[first]) {\n      first = mid + 1;\n    } else {\n      last = mid - 1;\n \
    \   }\n  }\n  return l[first] === l[last];\n}\n", "  let n = l.length;\n  if (n\
    \ < 2) {\n    return true;\n  }\n  let first = 0;\n  let last = n - 1;\n  let\
    \ mid = 0;\n  while (first < last) {\n    mid = first + Math.floor((last - first)\
    \ / 2);\n    if (l[mid] < l[first]) {\n      first = mid + 1;\n    } else {\n\
    \      last = mid - 1;\n    }\n  }\n  return l[first] === l[last];\n}\n", "  if\
    \ (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n\
    \  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const m = l[i];\n\
    \    if (m <= n) {\n      return false;\n    }\n    n = m;\n  }\n  return true;\n\
    }\n", "  let i = 0;\n  let j = 0;\n  let len = l.length;\n  let monotonic = true;\n\
    \  while (i < len) {\n    if (l[i] > l[j]) {\n      monotonic = false;\n     \
    \ break;\n    }\n    i++;\n    j++;\n  }\n  return monotonic;\n}\n", "  const\
    \ n = l.length;\n  if (n < 2) {\n    return false;\n  }\n  const firstValue =\
    \ l[0];\n  for (let i = 1; i < n; ++i) {\n    const currentValue = l[i];\n   \
    \ if (currentValue < firstValue) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  let monotonic = true;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (l[i] < l[i - 1]) {\n      monotonic = false;\n      break;\n    }\n\
    \  }\n  return monotonic;\n}\n", "  let i = 0;\n  let j = l.length - 1;\n  let\
    \ monotonic = false;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      j--;\n\
    \    } else if (l[i] < l[j]) {\n      i++;\n    } else {\n      monotonic = true;\n\
    \      break;\n    }\n  }\n  return monotonic;\n}\n", "  if (l.length === 0) {\n\
    \    return false;\n  }\n  const n = l.length;\n  const m = l[n - 1];\n  for (let\
    \ i = n - 2; i >= 0; i--) {\n    if (l[i] < m) {\n      return false;\n    }\n\
    \    if (l[i] > m) {\n      return true;\n    }\n  }\n  return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
