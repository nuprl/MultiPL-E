name: HumanEval_128_prod_signs
language: ts
prompt: "//You are given an array arr of integers and you need to return\n// sum of\
  \ magnitudes of integers multiplied by product of all signs\n// of each number in\
  \ the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n\
  // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
  // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]): number\
  \ | undefined {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2,\
  \ -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
  \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
  \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
  \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
  \ 1, 1, 0]),0);\n}\n\ntest();"
completions: ["  if (arr.length === 0) return undefined;\n  let sum = 0;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n  }\n  return sum\
    \ * prod_signs(arr.slice(1));\n}\n", "  if (arr.length === 0) {\n    return undefined;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\
    \ * Math.sign(i);\n  }\n  return sum;\n}\n", "  if (arr.length === 0) return undefined;\n\
    \  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] *\
    \ Math.sign(i);\n  }\n  return sum;\n}\n", "  if (arr.length === 0) return undefined;\n\
    \  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i]\
    \ < 0 ? -1 : 1;\n    sum += sign * Math.pow(Math.abs(arr[i]), 2);\n  }\n  return\
    \ sum;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n  let sum\
    \ = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n\
    \  }\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product\
    \ *= arr[i] >= 0 ? 1 : -1;\n  }\n  return sum * product;\n}\n", "  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n  let sum = 0;\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    const sign = arr[i] < 0 ? -1 : 1;\n    sum += sign *\
    \ Math.abs(arr[i]);\n  }\n  return sum;\n}\n", "  if (arr.length === 0) return\
    \ undefined;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ sign = arr[i] < 0 ? -1 : 1;\n    sum += sign * Math.abs(arr[i]);\n  }\n  return\
    \ sum;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n  let sum\
    \ = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0\
    \ ? -1 : 1;\n    sum += sign * Math.pow(Math.abs(arr[i]), 2);\n  }\n  return sum;\n\
    }\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0 ? -1 :\
    \ 1;\n    sum += sign * Math.abs(arr[i]);\n  }\n  return sum;\n}\n", "  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n  let sum = 0;\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    const sign = arr[i] < 0 ? -1 : 1;\n    sum += sign *\
    \ Math.pow(Math.abs(arr[i]), 2);\n  }\n  return sum;\n}\n", "  if (arr.length\
    \ === 0) return undefined;\n  let sum = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    const sign = arr[i] < 0 ? -1 : 1;\n    sum += sign * Math.pow(Math.abs(arr[i]),\
    \ i);\n  }\n  return sum;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const sign\
    \ = arr[i] < 0 ? -1 : 1;\n    sum += sign * Math.pow(Math.abs(arr[i]), 2);\n \
    \ }\n  return sum;\n}\n", "  if (arr.length === 0) return undefined;\n  let sign\
    \ = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n  \
    \  if (num > 0) sign *= -1;\n    else if (num < 0) sign *= -1;\n  }\n  return\
    \ sign;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n  const\
    \ [first] = arr;\n  const sign = first >= 0 ? 1 : -1;\n  let sum = 0;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    sum += sign * Math.pow(Math.abs(num),\
    \ i);\n  }\n  return sum;\n}\n", "  if (arr.length === 0) return undefined;\n\
    \  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i]\
    \ < 0 ? -1 : 1;\n    sum += sign * Math.pow(Math.abs(arr[i]), 2);\n  }\n  return\
    \ sum;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n  let sum\
    \ = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n\
    \  }\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\
    \ >= 0 ? 1 : -1;\n  }\n  return sum * prod;\n}\n", "  if (arr.length === 0) {\n\
    \    return undefined;\n  }\n  let sum = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    sum += arr[i] * Math.sign(i);\n  }\n  return sum;\n}\n", "  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n  let sum = 0;\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    const sign = arr[i] < 0 ? -1 : 1;\n    sum += sign *\
    \ Math.pow(Math.abs(arr[i]), 2);\n  }\n  return sum;\n}\n", "  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n  let sum = 0;\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    sum += Math.abs(arr[i]) * Math.sign(arr[i]);\n  }\n\
    \  return sum;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i]\
    \ < 0 ? -1 : 1;\n    sum += sign * Math.pow(Math.abs(arr[i]), 2);\n  }\n  return\
    \ sum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
