language: ts
name: HumanEval_132_is_nested
results:
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet open_brackets =\
    \ 0;\n\tlet close_brackets = 0;\n\tlet open_brackets_stack: string[] = [];\n\t\
    let close_brackets_stack: string[] = [];\n\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet char = string[i];\n\t\tif (char === '[') {\n\t\t\topen_brackets_stack.push(char);\n\
    \t\t\topen_brackets++;\n\t\t} else if (char === ']') {\n\t\t\tclose_brackets_stack.push(char);\n\
    \t\t\tclose_brackets++;\n\t\t} else if (char === ']' && open_brackets_stack.length\
    \ > 0 && close_brackets_stack.length > 0) {\n\t\t\tlet open_bracket = open_brackets_stack.pop();\n\
    \t\t\tlet close_bracket = close_brackets_stack.pop();\n\t\t\tif (open_bracket\
    \ === close_bracket) {\n\t\t\t\tclose_brackets--;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn\
    \ open_brackets === close_brackets;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp41k5nhk2.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp41k5nhk2.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets = string.match(/\\\
    [.*?\\]/g);\n    if (brackets) {\n        let nested = false;\n        for (let\
    \ i = 0; i < brackets.length; i++) {\n            if (brackets[i].match(/[\\[\\\
    ]]/)) {\n                nested = true;\n                break;\n            }\n\
    \        }\n        return nested;\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7hb5wvp9.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7hb5wvp9.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    // Create a stack\
    \ to keep track of brackets.\n    const stack: string[] = [];\n    // Iterate\
    \ over the string and push brackets to the stack.\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(\"[\");\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        } else if (string[i] === \"[\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            }\n            stack.push(\"[\"\
    );\n        } else if (string[i] === \"]\") {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    // If there are any brackets left on the stack then there\
    \ must be a nested bracket.\n    return stack.length > 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2xgfbevs.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2xgfbevs.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_quotes: number[] = [];\n    let close_quotes: number[] =\
    \ [];\n    let open_parens: number[] = [];\n    let close_parens: number[] = [];\n\
    \    let open_curly: number[] = [];\n    let close_curly: number[] = [];\n   \
    \ let open_angle: number[] = [];\n    let close_angle: number[] = [];\n    let\
    \ open_paren_curly: number[] = [];\n    let close_paren_curly: number[] = [];\n\
    \    let open_paren_angle: number[] = [];\n    let close_paren_angle: number[]\
    \ = [];\n    let open_curly_curly: number[] = [];\n    let close_curly_curly:\
    \ number[] = [];\n    let open_curly_angle: number[] = [];\n    let close_curly_angle:\
    \ number[] = [];\n    let open_angle_curly: number[] = [];\n    let close_angle_curly:\
    \ number[] = [];\n    let open_angle_paren: number[] = [];\n    let close_angle_paren:\
    \ number[] = [];\n    let open_angle_paren_curly: number[] = [];\n    let close_angle_paren_curly:\
    \ number[] = [];\n    let open_angle_curly_curly: number[] = [];\n    let close_angle_curly_curly:\
    \ number[] = [];\n    let open_angle_curly_angle: number[] = [];\n    let close_angle_curly_angle:\
    \ number[] = [];\n    let open_angle_paren_curly_angle: number[] = [];\n    let\
    \ close_angle_paren_curly_angle: number[] = [];\n    let open_angle_paren_curly_curly:\
    \ number[] = [];\n    let close_angle_paren_curly_curly: number[] = [];\n    let\
    \ open_angle_paren_curly_angle_curly: number[] = [];\n    let close_angle_paren_curly_angle_curly:\
    \ number[] = [];\n    let open_angle_curly_angle_curly: number[] = [];\n    let\
    \ close_angle_curly_angle_curly: number[] = [];\n    let open_angle_paren_curly_angle_curly:\
    \ number[] = [];\n    let close_angle_paren_curly_angle_curly: number[] = [];\n\
    \    let open_angle_curly_angle_paren: number[] = [];\n    let close_angle_curly_angle_paren:\
    \ number[] = [];\n    let open_angle_paren_curly_angle_paren: number[] = [];\n\
    \    let close_angle_paren_curly_angle_paren: number[] = [];\n    let open_angle_curly_angle_paren_curly:\
    \ number[] = [];\n    let close_angle_curly_angle_paren_curly: number[] = [];\n\
    \    let open_angle_paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf6o9qi6u.ts(85,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738759
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_curly: number[] = [];\n\tlet close_curly: number[] = [];\n\t\
    let open_paren: number[] = [];\n\tlet close_paren: number[] = [];\n\tlet open_brackets_stack:\
    \ number[] = [];\n\tlet close_brackets_stack: number[] = [];\n\tlet open_curly_stack:\
    \ number[] = [];\n\tlet close_curly_stack: number[] = [];\n\tlet open_paren_stack:\
    \ number[] = [];\n\tlet close_paren_stack: number[] = [];\n\tlet open_brackets_stack_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string: string[] = [];\n\tlet open_curly_stack_string:\
    \ string[] = [];\n\tlet close_curly_stack_string: string[] = [];\n\tlet open_paren_stack_string:\
    \ string[] = [];\n\tlet close_paren_stack_string: string[] = [];\n\tlet open_brackets_stack_string_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string_string: string[] = [];\n\t\
    let open_curly_stack_string_string: string[] = [];\n\tlet close_curly_stack_string_string:\
    \ string[] = [];\n\tlet open_paren_stack_string_string: string[] = [];\n\tlet\
    \ close_paren_stack_string_string: string[] = [];\n\tlet open_brackets_stack_string_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string_string: string[] = [];\n\t\
    let open_curly_stack_string_string: string[] = [];\n\tlet close_curly_stack_string_string:\
    \ string[] = [];\n\tlet open_paren_stack_string_string: string[] = [];\n\tlet\
    \ close_paren_stack_string_string: string[] = [];\n\tlet open_brackets_stack_string_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string_string: string[] = [];\n\t\
    let open_curly_stack_string_string: string[] = [];\n\tlet close_curly_stack_string_string:\
    \ string[] = [];\n\tlet open_paren_stack_string_string: string[] = [];\n\tlet\
    \ close_paren_stack_string_string: string[] = [];\n\tlet open_brackets_stack_string_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string_string: string[] = [];\n\t\
    let open_curly_stack_string_string: string[] = [];\n\tlet close_curly_stack_string_string:\
    \ string[] = [];\n\tlet open_paren_stack_string_string: string[] = [];\n\tlet\
    \ close_paren_stack_string_string: string[] = [];\n\t\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9j1ou_nn.ts(83,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            open_brackets.push(i);\n        } else\
    \ if (char === ']') {\n            close_brackets.push(i);\n        } else if\
    \ (char === '[' || char === ']') {\n            if (open_brackets.length === 0)\
    \ {\n                return false;\n            }\n            let open_bracket\
    \ = open_brackets.pop();\n            let close_bracket = close_brackets.pop();\n\
    \            if (close_bracket < open_bracket) {\n                return false;\n\
    \            }\n            stack.push(string[i]);\n        }\n    }\n    if (open_brackets.length\
    \ !== 0 || close_brackets.length !== 0) {\n        return false;\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplmn6n5zo.js:48:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplmn6n5zo.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let open_brackets:\
    \ number[] = [];\n    let close_brackets: number[] = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        let char = string[i];\n        if (char ===\
    \ '[') {\n            open_brackets.push(i);\n        } else if (char === ']')\
    \ {\n            close_brackets.push(i);\n        }\n    }\n    if (open_brackets.length\
    \ !== close_brackets.length) {\n        return false;\n    }\n    for (let i =\
    \ 0; i < open_brackets.length; i++) {\n        let open = open_brackets[i];\n\
    \        let close = close_brackets[i];\n        if (open < close) {\n       \
    \     return false;\n        }\n        let open_bracket = open_brackets[i];\n\
    \        let close_bracket = close_brackets[i];\n        for (let j = open + 1;\
    \ j < close_bracket; j++) {\n            if (string[j] === '[') {\n          \
    \      open_bracket++;\n            } else if (string[j] === ']') {\n        \
    \        close_bracket++;\n            }\n        }\n        if (open_bracket\
    \ !== close_bracket) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpynufoph0.js:56:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpynufoph0.js:71:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets = 0;\n\t\
    let open_brackets = 0;\n\tlet close_brackets = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet char = string[i];\n\t\tif (char === '[') {\n\t\t\tbrackets++;\n\
    \t\t\tif (brackets === 1) {\n\t\t\t\topen_brackets++;\n\t\t\t}\n\t\t} else if\
    \ (char === ']') {\n\t\t\tbrackets--;\n\t\t\tif (brackets === 0) {\n\t\t\t\tclose_brackets++;\n\
    \t\t\t}\n\t\t} else if (char === '[' && brackets === 0) {\n\t\t\tclose_brackets++;\n\
    \t\t} else if (char === ']' && brackets === 0) {\n\t\t\topen_brackets--;\n\t\t\
    }\n\t}\n\treturn open_brackets <= close_brackets;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpuj4o5ru1.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuj4o5ru1.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    // TODO: Write a function\
    \ that takes a string as input which contains only square brackets.\n    // The\
    \ function should return true if and only if there is a valid subsequence of brackets\
    \ \n    // where at least one bracket in the subsequence is nested.\n    // >>>\
    \ is_nested(\"[[]]\")\n    // true\n    // >>> is_nested(\"[]]]]]]][[[[[]\")\n\
    \    // false\n    // >>> is_nested(\"[][]\")\n    // false\n    // >>> is_nested(\"\
    []\")\n    // false\n    // >>> is_nested(\"[[][]]\")\n    // true\n    // >>>\
    \ is_nested(\"[[]][[\")\n    // true\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjxf1azfb.ts(16,37): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1659738759
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet closed_brackets: number[]\
    \ = [];\n\tlet open_brackets_length: number = 0;\n\tlet closed_brackets_length:\
    \ number = 0;\n\tlet open_chars: number[] = [];\n\tlet close_chars: number[] =\
    \ [];\n\tlet open_chars_length: number = 0;\n\tlet close_chars_length: number\
    \ = 0;\n\tlet open_char: string = \"\";\n\tlet close_char: string = \"\";\n\t\
    let open_char_index: number = 0;\n\tlet close_char_index: number = 0;\n\tlet open_char_index2:\
    \ number = 0;\n\tlet close_char_index2: number = 0;\n\tlet open_char_index3: number\
    \ = 0;\n\tlet close_char_index3: number = 0;\n\tlet open_char_index4: number =\
    \ 0;\n\tlet close_char_index4: number = 0;\n\tlet open_char_index5: number = 0;\n\
    \tlet close_char_index5: number = 0;\n\tlet open_char_index6: number = 0;\n\t\
    let close_char_index6: number = 0;\n\tlet open_char_index7: number = 0;\n\tlet\
    \ close_char_index7: number = 0;\n\tlet open_char_index8: number = 0;\n\tlet close_char_index8:\
    \ number = 0;\n\tlet open_char_index9: number = 0;\n\tlet close_char_index9: number\
    \ = 0;\n\tlet open_char_index10: number = 0;\n\tlet close_char_index10: number\
    \ = 0;\n\tlet open_char_index11: number = 0;\n\tlet close_char_index11: number\
    \ = 0;\n\tlet open_char_index12: number = 0;\n\tlet close_char_index12: number\
    \ = 0;\n\tlet open_char_index13: number = 0;\n\tlet close_char_index13: number\
    \ = 0;\n\tlet open_char_index14: number = 0;\n\tlet close_char_index14: number\
    \ = 0;\n\tlet open_char_index15: number = 0;\n\tlet close_char_index15: number\
    \ = 0;\n\tlet open_char_index16: number = 0;\n\tlet close_char_index16: number\
    \ = 0;\n\tlet open_char_index17: number = 0;\n\tlet close_char_index17: number\
    \ = 0;\n\tlet open_char_index18: number = 0;\n\tlet close_char_index18: number\
    \ = 0;\n\tlet open_char_index19: number = 0;\n\tlet close_char_index19: number\
    \ = 0;\n\tlet open_char_index20: number = 0;\n\tlet close_char_index20: number\
    \ = 0;\n\tlet open_char_index21: number = 0;\n\tlet close_char_index21: number\
    \ = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxb7m3i_m.ts(93,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738759
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_index = 0;\n\tlet close_brackets_index = 0;\n\tlet\
    \ open_brackets_length = 0;\n\tlet close_brackets_length = 0;\n\tlet open_brackets_index_in_string\
    \ = 0;\n\tlet close_brackets_index_in_string = 0;\n\tlet open_brackets_length_in_string\
    \ = 0;\n\tlet close_brackets_length_in_string = 0;\n\tlet open_brackets_index_in_string_in_string\
    \ = 0;\n\tlet close_brackets_index_in_string_in_string = 0;\n\tlet open_brackets_length_in_string_in_string\
    \ = 0;\n\tlet close_brackets_length_in_string_in_string = 0;\n\tlet open_brackets_index_in_string_in_string_in_string\
    \ = 0;\n\tlet close_brackets_index_in_string_in_string_in_string = 0;\n\tlet open_brackets_length_in_string_in_string_in_string\
    \ = 0;\n\tlet close_brackets_length_in_string_in_string_in_string = 0;\n\tlet\
    \ open_brackets_index_in_string_in_string_in_string = 0;\n\tlet close_brackets_index_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_length_in_string_in_string_in_string = 0;\n\tlet close_brackets_length_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_index_in_string_in_string_in_string = 0;\n\tlet close_brackets_index_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_length_in_string_in_string_in_string = 0;\n\tlet close_brackets_length_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_index_in_string_in_string_in_string = 0;\n\tlet close_brackets_index_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_length_in_string_in_string_in_string = 0;\n\tlet close_brackets_length_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_index_in_string_in_string_in_string = 0;\n\tlet close_brackets_index_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_length_in_string_in_string_in_string = 0;\n\tlet close_brackets_length_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_index_in_string_in_string_in_string = 0;\n\tlet close\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp17uwx76.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: string[]\
    \ = string.split(\"\");\n    let open_brackets: number[] = [];\n    let closed_brackets:\
    \ number[] = [];\n    let open_brackets_length: number = 0;\n    let closed_brackets_length:\
    \ number = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ == \"[\")\n            open_brackets.push(open_brackets_length);\n        if\
    \ (brackets[i] == \"]\")\n            closed_brackets.push(closed_brackets_length);\n\
    \        if (brackets[i] == \"[\")\n            open_brackets_length++;\n    \
    \    if (brackets[i] == \"]\")\n            closed_brackets_length++;\n    }\n\
    \    if (open_brackets.length != closed_brackets.length)\n        return false;\n\
    \    for (let i = 0; i < open_brackets.length; i++) {\n        if (open_brackets[i]\
    \ != closed_brackets[i])\n            return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpi8zhx701.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi8zhx701.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_brackets_stack: number[] = [];\n    let close_brackets_stack:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwgt9964v.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    const stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            const top = stack.pop();\n            if\
    \ (top !== ']') {\n                return false;\n            }\n        }\n \
    \   }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxjxpkul2.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxjxpkul2.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ == \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ == \"]\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            let openBracket = stack.pop();\n            if (openBracket\
    \ != string[i]) {\n                return false;\n            }\n        }\n \
    \   }\n    return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzdteo7qu.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzdteo7qu.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    if (stack.length\
    \ === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5cg_ljml.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5cg_ljml.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length !== 0) {\n                let\
    \ openBracket = stack.pop();\n                if (openBracket !== '[') {\n   \
    \                 return false;\n                }\n            } else {\n   \
    \             return false;\n            }\n        }\n    }\n    if (stack.length\
    \ !== 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpl_rse90i.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl_rse90i.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let open_brackets:\
    \ number[] = [];\n    let closed_brackets: number[] = [];\n    let open_brackets_length:\
    \ number = 0;\n    let closed_brackets_length: number = 0;\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            open_brackets[open_brackets_length]\
    \ = i;\n            open_brackets_length++;\n        } else if (string[i] ===\
    \ \"]\") {\n            closed_brackets[closed_brackets_length] = i;\n       \
    \     closed_brackets_length++;\n        }\n    }\n    if (open_brackets_length\
    \ + closed_brackets_length === 0) {\n        return false;\n    }\n    for (let\
    \ i = 0; i < open_brackets_length; i++) {\n        for (let j = 0; j < closed_brackets_length;\
    \ j++) {\n            if (open_brackets[i] === closed_brackets[j]) {\n       \
    \         return false;\n            }\n        }\n    }\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpi4u__w4_.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi4u__w4_.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push('[');\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            let openBracket = stack.pop();\n        \
    \    if (openBracket !== '[') {\n                return false;\n            }\n\
    \        } else if (char === '\\'') {\n            stack.push('\\'');\n      \
    \  } else if (char === '\\'') {\n            stack.push('\\'');\n        } else\
    \ if (char === '\\'') {\n            stack.push('\\'');\n        } else if (char\
    \ === '\\'') {\n            stack.push('\\'');\n        } else if (char === '\\\
    '') {\n            stack.push('\\'');\n        } else if (char === '\\'') {\n\
    \            stack.push('\\'');\n        } else if (char === '\\'') {\n      \
    \      stack.push('\\'');\n        } else if (char === '\\'') {\n            stack.push('\\\
    '');\n        } else if (char === '\\'') {\n            stack.push('\\'');\n \
    \       } else if (char === '\\'') {\n            stack.push('\\'');\n       \
    \ } else if (char === '\\'') {\n            stack.push('\\'');\n        } else\
    \ if (char === '\\'') {\n            stack.push('\\'');\n        } else if (char\
    \ === '\\'') {\n            stack.push('\\'');\n        } else if (char === '\\\
    '') {\n            stack.push('\\'');\n        } else if (char === '\\'') {\n\
    \            stack.push('\\'');\n        } else if (char === '\\'') {\n      \
    \      stack.push('\\'');\n        } else if (char === '\\'') {\n            stack.push('\\\
    '');\n        } else if (char === '\\'') {\n            stack.push('\\'');\n \
    \       } else if (char === '\\'') {\n            stack.push('\\'');\n       \
    \ } else if (char === '\\'') {\n            stack.push('\\'');\n        } else\
    \ if (char === '\\'') {\n            stack.push('\\'');\n        } else if (char\
    \ === '\\'') {\n            stack.push('\\'');\n        } else if (char === '\\\
    '') {\n            stack.push('\\'');\n        } else if (char === '\\'') {\n\
    \            stack.push('\\'');\n        } else if (char === '\\'') {\n      \
    \      stack.push('\\'');\n        } else if (char === '\\'') {\n            stack.push('\\\
    '');\n        } else if (char === '\\'') {\n            stack.push('\\'');\n \
    \       } else if (char === '\\'') {\n            stack.push('\\'');\n       \
    \ } else if (char === '\\'') {\n            stack.push('\\'');\n        } else\
    \ if (char === '\\'') {\n            stack.push('\\'');\n        } else if (char\
    \ === '\\'') {\n            stack.push('\\'');\n        } else if (char === '\\\
    '') {\n            stack.push('\\''\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphci2osl5.ts(94,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphci2osl5.ts(94,9): error TS1005: '','' expected.

    ../../../../../tmp/tmphci2osl5.ts(116,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738759
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets = string.match(/\\\
    [.*?\\]/g);\n\tlet brackets_count = brackets ? brackets.length : 0;\n\tlet brackets_count_nested\
    \ = 0;\n\tlet brackets_count_nested2 = 0; //count nested brackets\n\tlet brackets_count_nested3\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested4 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested5 = 0; //count nested brackets\n\tlet brackets_count_nested6\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested7 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested8 = 0; //count nested brackets\n\tlet brackets_count_nested9\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested10 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested11 = 0; //count nested brackets\n\tlet\
    \ brackets_count_nested12 = 0; //count nested brackets\n\tlet brackets_count_nested13\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested14 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested15 = 0; //count nested brackets\n\tlet\
    \ brackets_count_nested16 = 0; //count nested brackets\n\tlet brackets_count_nested17\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested18 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested19 = 0; //count nested brackets\n\tlet\
    \ brackets_count_nested20 = 0; //count nested brackets\n\tlet brackets_count_nested21\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested22 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested23 = 0; //count nested brackets\n\tlet\
    \ brackets_count_nested24 = 0; //count nested brackets\n\tlet brackets_count_nested25\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested26 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested27 = 0; //count nested brackets\n\tlet\
    \ brackets_count_nested28 = 0; //count nested brackets\n\tlet brackets_count_nested29\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested30 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested31 = 0; //count nested brackets\n\tlet\
    \ brackets_count_nested32 = 0; //count nested brackets\n\tlet brackets_count_nested33\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested34 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested35 = 0; //count nested brackets\n\tlet\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6lvjr6a1.ts(55,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp6lvjr6a1.ts(77,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738759
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[]\
    \ = [];\n\tlet opening_chars: number[] = [];\n\tlet closing_chars: number[] =\
    \ [];\n\tlet opening_char: number[] = [];\n\tlet closing_char: number[] = [];\n\
    \tlet opening_chars: number[] = [];\n\tlet closing_chars: number[] = [];\n\tlet\
    \ opening_char: number[] = [];\n\tlet closing_char: number[] = [];\n\tlet opening_chars:\
    \ number[] = [];\n\tlet closing_chars: number[] = [];\n\tlet opening_char: number[]\
    \ = [];\n\tlet closing_char: number[] = [];\n\tlet opening_chars: number[] = [];\n\
    \tlet closing_chars: number[] = [];\n\tlet opening_char: number[] = [];\n\tlet\
    \ closing_char: number[] = [];\n\tlet opening_chars: number[] = [];\n\tlet closing_chars:\
    \ number[] = [];\n\tlet opening_char: number[] = [];\n\tlet closing_char: number[]\
    \ = [];\n\tlet opening_chars: number[] = [];\n\tlet closing_chars: number[] =\
    \ [];\n\tlet opening_char: number[] = [];\n\tlet closing_char: number[] = [];\n\
    \tlet opening_chars: number[] = [];\n\tlet closing_chars: number[] = [];\n\tlet\
    \ opening_char: number[] = [];\n\tlet closing_char: number[] = [];\n\tlet opening_chars:\
    \ number[] = [];\n\tlet closing_chars: number[] = [];\n\tlet opening_char: number[]\
    \ = [];\n\tlet closing_char: number[] = [];\n\tlet opening_chars: number[] = [];\n\
    \tlet closing_chars: number[] = [];\n\tlet opening_char: number[] = [];\n\tlet\
    \ closing_char: number[] = [];\n\tlet opening_chars: number[] = [];\n\tlet closing_chars:\
    \ number[] = [];\n\tlet opening_char: number[] = [];\n\tlet closing_char: number[]\
    \ = [];\n\tlet opening_chars: number[] = [];\n\tlet closing_chars: number[] =\
    \ [];\n\tlet opening_char: number[] = [];\n\tlet closing_char: number[] = [];\n\
    \tlet opening_chars: number[] = [];\n\tlet closing_chars: number[] = [];\n\tlet\
    \ opening_char: number[] = [];\n\tlet closing_char: number[] = [];\n\tlet \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjb8rjcxu.ts(69,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpjb8rjcxu.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ == \"[\") {\n            stack.push(\"[\");\n        } else if (string[i] ==\
    \ \"]\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        } else if (string[i] == \"]\"\
    \ && stack.length > 0) {\n            if (stack[stack.length - 1] == \"[\") {\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5tivnqbn.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5tivnqbn.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let opening_brackets: number[] = [];\n    let closing_brackets: number[]\
    \ = [];\n    let opening_opening_brackets: number[] = [];\n    let opening_closing_brackets:\
    \ number[] = [];\n    let closing_brackets_opening_brackets: number[] = [];\n\
    \    let closing_brackets_closing_brackets: number[] = [];\n    let opening_closing_brackets_opening_brackets:\
    \ number[] = [];\n    let opening_closing_brackets_closing_brackets: number[]\
    \ = [];\n    let opening_closing_brackets_closing_brackets_opening_brackets: number[]\
    \ = [];\n    let opening_closing_brackets_closing_brackets_closing_brackets: number[]\
    \ = [];\n    let opening_closing_brackets_closing_brackets_closing_brackets_opening_brackets:\
    \ number[] = [];\n    let opening_closing_brackets_closing_brackets_closing_brackets_closing_brackets:\
    \ number[] = [];\n    let opening_closing_brackets_closing_brackets_closing_brackets_closing_brackets_opening_brackets:\
    \ number[] = [];\n    let opening_closing_brackets_closing_brackets_closing_brackets_closing_brackets_closing_brackets:\
    \ number[] = [];\n    let opening_closing_brackets_closing_brackets_closing_brackets_closing_brackets_closing_brackets_opening_brackets:\
    \ number[] = [];\n    let opening_closing_brackets_closing_brackets_closing_brackets_closing_brackets_closing_brackets_closing_brackets:\
    \ number[] = [];\n    let opening_closing_brackets_closing_brackets_closing_brackets_closing_brackets_closing_brackets_closing_brackets_opening_brackets:\
    \ number[] = [];\n    let opening_closing_brackets_closing_brackets_closing_brackets_closing_brackets_closing_brackets_closing_brackets_closing_brackets_opening_brackets:\
    \ number[] = [];\n    let opening_closing_brackets_closing_brackets_closing_brackets_closing_brackets_closing_brackets_closing_brackets_closing_brackets_closing_brackets_opening_brackets:\
    \ number[] = [];\n    let opening_closing_brackets_closing\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpypjykn6g.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets = string.match(/\\\
    [.*?\\]/g);\n    if (brackets == null) return false; // no brackets found\n  \
    \  let brackets_count = brackets.length;\n    let nesting = false;\n    for (let\
    \ i = 0; i < brackets_count - 1; i++) {\n        let bracket = brackets[i];\n\
    \        let next_bracket = brackets[i + 1];\n        if (next_bracket != null\
    \ && next_bracket.match(/\\[.*?\\]/)) {\n            nesting = true;\n       \
    \     break;\n        }\n    }\n    return nesting;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjm1i5cyo.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjm1i5cyo.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738761
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    if (string.length\
    \ <= 1) {\n        return false;\n    }\n    let opening_brackets = 0;\n    let\
    \ closing_brackets = 0;\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === \"[\") {\n            opening_brackets++;\n        }\n \
    \       if (string[i] === \"]\") {\n            closing_brackets++;\n        }\n\
    \    }\n    return opening_brackets <= closing_brackets;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7f9_2n6t.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7f9_2n6t.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet closed_brackets: number[]\
    \ = [];\n\tlet open_brackets_size: number = 0;\n\tlet closed_brackets_size: number\
    \ = 0;\n\tlet open_brackets_index: number = 0;\n\tlet closed_brackets_index: number\
    \ = 0;\n\tlet open_brackets_length: number = 0;\n\tlet closed_brackets_length:\
    \ number = 0;\n\tlet open_brackets_last_index: number = 0;\n\tlet closed_brackets_last_index:\
    \ number = 0;\n\tlet open_brackets_last_length: number = 0;\n\tlet closed_brackets_last_length:\
    \ number = 0;\n\tlet open_brackets_last_last_index: number = 0;\n\tlet closed_brackets_last_last_index:\
    \ number = 0;\n\tlet open_brackets_last_last_length: number = 0;\n\tlet closed_brackets_last_last_length:\
    \ number = 0;\n\tlet open_brackets_last_last_last_index: number = 0;\n\tlet closed_brackets_last_last_last_index:\
    \ number = 0;\n\tlet open_brackets_last_last_last_length: number = 0;\n\tlet closed_brackets_last_last_last_length:\
    \ number = 0;\n\tlet open_brackets_last_last_last_last_index: number = 0;\n\t\
    let closed_brackets_last_last_last_last_index: number = 0;\n\tlet open_brackets_last_last_last_last_length:\
    \ number = 0;\n\tlet closed_brackets_last_last_last_last_length: number = 0;\n\
    \tlet open_brackets_last_last_last_last_last_index: number = 0;\n\tlet closed_brackets_last_last_last_last_last_index:\
    \ number = 0;\n\tlet open_brackets_last_last_last_last_last_length: number = 0;\n\
    \tlet closed_brackets_last_last_last_last_last_length: number = 0;\n\tlet open_brackets_last_last_last_last_last_last_index:\
    \ number = 0;\n\tlet closed_brackets_last_last_last_last_last_last_index: number\
    \ = 0;\n\tlet open_brackets_last_last_last_last_last_last_length: number = 0;\n\
    \tlet closed_brackets_last_last_last_last_last_last_length: number = 0;\n\tlet\
    \ open_brackets_last_last_last_last_last_last_last_index: number = 0;\n\tlet closed_brackets_last_last_last_last_last_last_last_index:\
    \ number = 0;\n\tlet open_brackets_last_last_last_last_last_last_last_length:\
    \ number = 0;\n\tlet closed_brackets_last_last_last_last_last_last_last_length:\
    \ number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy71p990j.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738762
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet closed_brackets: number[]\
    \ = [];\n\tlet open_parens: number[] = [];\n\tlet close_parens: number[] = [];\n\
    \tlet open_brackets_stack: number[] = [];\n\tlet closed_brackets_stack: number[]\
    \ = [];\n\tlet open_parens_stack: number[] = [];\n\tlet close_parens_stack: number[]\
    \ = [];\n\tlet open_brackets_stack_index: number = 0;\n\tlet closed_brackets_stack_index:\
    \ number = 0;\n\tlet open_parens_stack_index: number = 0;\n\tlet close_parens_stack_index:\
    \ number = 0;\n\tlet open_brackets_stack_string: string = \"\";\n\tlet closed_brackets_stack_string:\
    \ string = \"\";\n\tlet open_parens_stack_string: string = \"\";\n\tlet close_parens_stack_string:\
    \ string = \"\";\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char =\
    \ string[i];\n\t\tif (char === \"[\") {\n\t\t\tbrackets.push(char);\n\t\t\topen_brackets.push(open_brackets_stack[open_brackets_stack_index]);\n\
    \t\t\tclosed_brackets.push(closed_brackets_stack[closed_brackets_stack_index]);\n\
    \t\t\topen_parens.push(open_parens_stack[open_parens_stack_index]);\n\t\t\tclose_parens.push(close_parens_stack[close_parens_stack_index]);\n\
    \t\t\topen_brackets_stack_string = open_brackets_stack_string + open_brackets_stack[open_brackets_stack_index];\n\
    \t\t\tclosed_brackets_stack_string = closed_brackets_stack_string + closed_brackets_stack[closed_brackets_stack_index];\n\
    \t\t\topen_parens_stack_string = open_parens_stack_string + open_parens_stack[open_parens_stack_index];\n\
    \t\t\tclose_parens_stack_string = close_parens_stack_string + close_parens_stack[close_parens_stack_index];\n\
    \t\t\topen_brackets_stack_index++;\n\t\t\tclosed_brackets_stack_index++;\n\t\t\
    \topen_parens_stack_index++;\n\t\t\tclose_parens_stack_index++;\n\t\t} else if\
    \ (char === \"]\") {\n\t\t\topen_brackets_stack[open_brackets_stack_index] = open_brackets_stack_string;\n\
    \t\t\tclosed_brackets_stack[closed_brackets_stack_index] = closed_brackets_stack_string;\n\
    \t\t\topen_parens_stack[open_parens_stack_index] = open_parens_stack_string;\n\
    \t\t\tclose_parens_stack[close_parens_stack_index\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdc4avqli.ts(55,1): error TS1005: '']'' expected.

    ../../../../../tmp/tmpdc4avqli.ts(77,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738762
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: string[]\
    \ = string.split(\"\");\n\tlet open_brackets: number[] = [];\n\tlet close_brackets:\
    \ number[] = [];\n\tlet open_brackets_size: number[] = [];\n\tlet close_brackets_size:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpora0z2t9.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738762
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_brackets_stack: number[] = [];\n    let close_brackets_stack:\
    \ number[] = [];\n    let open_brackets_length: number = 0;\n    let close_brackets_length:\
    \ number = 0;\n    let open_brackets_index: number = 0;\n    let close_brackets_index:\
    \ number = 0;\n    let open_brackets_index_stack: number[] = [];\n    let close_brackets_index_stack:\
    \ number[] = [];\n    let open_brackets_index_length: number = 0;\n    let close_brackets_index_length:\
    \ number = 0;\n    let open_brackets_index_index: number = 0;\n    let close_brackets_index_index:\
    \ number = 0;\n    let open_brackets_index_index_stack: number[] = [];\n    let\
    \ close_brackets_index_index_stack: number[] = [];\n    let open_brackets_index_index_length:\
    \ number = 0;\n    let close_brackets_index_index_length: number = 0;\n    let\
    \ open_brackets_index_index_index: number = 0;\n    let close_brackets_index_index_index:\
    \ number = 0;\n    let open_brackets_index_index_index_stack: number[] = [];\n\
    \    let close_brackets_index_index_index_stack: number[] = [];\n    let open_brackets_index_index_index_length:\
    \ number = 0;\n    let close_brackets_index_index_index_length: number = 0;\n\
    \    let open_brackets_index_index_index_index: number = 0;\n    let close_brackets_index_index_index_index:\
    \ number = 0;\n    let open_brackets_index_index_index_index_stack: number[] =\
    \ [];\n    let close_brackets_index_index_index_index_stack: number[] = [];\n\
    \    let open_brackets_index_index_index_index_length: number = 0;\n    let close_brackets_index_index_index_length:\
    \ number = 0;\n    let open_brackets_index_index_index_index_index: number = 0;\n\
    \    let close_brackets_index_index_index_index_index: number = 0;\n    let open_brackets_index_index_index_index_index_stack:\
    \ number[] = [];\n    let close_brackets_index_index_index_index_stack: number[]\
    \ = [];\n    let open_brackets_index_index_index_index_length: number = 0;\n \
    \   let close_brackets_index_index_index_index_length: number = 0;\n    let open_brackets_index_index_index_index_index:\
    \ number = 0;\n    let close_brackets_index_index_index_index_index: number =\
    \ 0;\n    let open_bracket\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkrx3p3r9.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738762
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet open_brackets: number[]\
    \ = [];\n\tlet closed_brackets: number[] = [];\n\tlet open_brackets_stack: number[]\
    \ = [];\n\tlet closed_brackets_stack: number[] = [];\n\tlet open_brackets_length:\
    \ number = 0;\n\tlet closed_brackets_length: number = 0;\n\tlet open_brackets_index:\
    \ number = 0;\n\tlet closed_brackets_index: number = 0;\n\tlet open_brackets_string:\
    \ string = \"\";\n\tlet closed_brackets_string: string = \"\";\n\tlet open_brackets_string_index:\
    \ number = 0;\n\tlet closed_brackets_string_index: number = 0;\n\tlet open_brackets_string_index2:\
    \ number = 0;\n\tlet closed_brackets_string_index2: number = 0;\n\tlet open_brackets_string_index3:\
    \ number = 0;\n\tlet closed_brackets_string_index3: number = 0;\n\tlet open_brackets_string_index4:\
    \ number = 0;\n\tlet closed_brackets_string_index4: number = 0;\n\tlet open_brackets_string_index5:\
    \ number = 0;\n\tlet closed_brackets_string_index5: number = 0;\n\tlet open_brackets_string_index6:\
    \ number = 0;\n\tlet closed_brackets_string_index6: number = 0;\n\tlet open_brackets_string_index7:\
    \ number = 0;\n\tlet closed_brackets_string_index7: number = 0;\n\tlet open_brackets_string_index8:\
    \ number = 0;\n\tlet closed_brackets_string_index8: number = 0;\n\tlet open_brackets_string_index9:\
    \ number = 0;\n\tlet closed_brackets_string_index9: number = 0;\n\tlet open_brackets_string_index10:\
    \ number = 0;\n\tlet closed_brackets_string_index10: number = 0;\n\tlet open_brackets_string_index11:\
    \ number = 0;\n\tlet closed_brackets_string_index11: number = 0;\n\tlet open_brackets_string_index12:\
    \ number = 0;\n\tlet closed_brackets_string_index12: number = 0;\n\tlet open_brackets_string_index13:\
    \ number = 0;\n\tlet closed_brackets_string_index13: number = 0;\n\tlet open_brackets_string_index14:\
    \ number = 0;\n\tlet closed_brackets_string_index14: number = 0;\n\tlet open_brackets_string_index15:\
    \ number = 0;\n\tlet closed_brackets_string_index15: number = 0;\n\tlet open_bracket\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxc10jgjs.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push('[');\n        } else if\
    \ (char === ']') {\n            if (stack.length !== 0) {\n                stack.pop();\n\
    \            } else {\n                return false;\n            }\n        }\
    \ else if (char === '\\'') {\n            if (stack.length !== 0) {\n        \
    \        stack.pop();\n            } else {\n                return false;\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmprf05x3j9.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprf05x3j9.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets = string.match(/\\\
    [.*?\\]/g);\n\treturn brackets && brackets.length > 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpakmsjimd.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpakmsjimd.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ == \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ == \"]\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmxd9c9n6.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmxd9c9n6.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets = string.match(/\\\
    [.*?\\]/g);\n\tlet bracketsCount = brackets ? brackets.length : 0;\n\treturn bracketsCount\
    \ > 0 && bracketsCount % 2 === 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxrehl8nn.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxrehl8nn.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ == \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ == \"]\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmxd9c9n6.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmxd9c9n6.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\" || string[i] === \"{\") {\n            stack.push(string[i]);\n  \
    \      } else if (string[i] === \"}\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp12acjf1s.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp12acjf1s.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(\"[\")\n        } else if (string[i] ===\
    \ \"]\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        } else if (string[i] === \"\
    }\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    if (stack.length\
    \ === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmprk7m2bqj.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprk7m2bqj.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: string[]\
    \ = string.split(\"\");\n    let stack: string[] = [];\n    for (let i = 0; i\
    \ < brackets.length; i++) {\n        if (brackets[i] === \"[\" || brackets[i]\
    \ === \"(\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    if (stack.length\
    \ === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5fgerivb.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5fgerivb.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet open_brackets: number[]\
    \ = [];\n\tlet closed_brackets: number[] = [];\n\tlet open_brackets_stack: number[]\
    \ = [];\n\tlet closed_brackets_stack: number[] = [];\n\tlet open_brackets_length:\
    \ number = 0;\n\tlet closed_brackets_length: number = 0;\n\tlet open_brackets_index_stack:\
    \ number[] = [];\n\tlet closed_brackets_index_stack: number[] = [];\n\tlet open_brackets_index_length:\
    \ number = 0;\n\tlet closed_brackets_index_length: number = 0;\n\tlet open_brackets_index_index_stack:\
    \ number[] = [];\n\tlet closed_brackets_index_index_stack: number[] = [];\n\t\
    let open_brackets_index_index_length: number = 0;\n\tlet closed_brackets_index_index_length:\
    \ number = 0;\n\tlet open_brackets_index_index_index_stack: number[] = [];\n\t\
    let closed_brackets_index_index_stack: number[] = [];\n\tlet open_brackets_index_index_index_length:\
    \ number = 0;\n\tlet closed_brackets_index_index_length: number = 0;\n\tlet open_brackets_index_index_index_stack:\
    \ number[] = [];\n\tlet closed_brackets_index_index_stack: number[] = [];\n\t\
    let open_brackets_index_index_index_length: number = 0;\n\tlet closed_brackets_index_index_length:\
    \ number = 0;\n\tlet open_brackets_index_index_index_stack: number[] = [];\n\t\
    let closed_brackets_index_index_stack: number[] = [];\n\tlet open_brackets_index_index_index_length:\
    \ number = 0;\n\tlet closed_brackets_index_index_length: number = 0;\n\tlet open_brackets_index_index_index_stack:\
    \ number[] = [];\n\tlet closed_brackets_index_index_stack: number[] = [];\n\t\
    let open_brackets_index_index_index_length: number = 0;\n\tlet closed_brackets_index_index_length:\
    \ number = 0;\n\tlet open_brackets_index_index_index_stack: number[] = [];\n\t\
    let closed_brackets_index_index_stack: number[] = [];\n\tlet open_brackets_index_index_index_length:\
    \ number = 0;\n\tlet closed_brackets_index_index_length: number = 0;\n\tlet open_brackets_index_index_index_stack:\
    \ number[] = [];\n\tlet closed_brackets_index_index_stack: number[] = [];\n\t\
    let open_brackets_index_index_index_length: number = 0;\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpatb0p01i.ts(77,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\" && stack.length !== 0) {\n            stack.push(string[i]);\n   \
    \     } else if (string[i] === \"]\" && stack.length !== 0) {\n            if\
    \ (stack[stack.length - 1] === \"[\" && stack[stack.length - 1] === string[i])\
    \ {\n                stack.pop();\n            } else {\n                return\
    \ false;\n            }\n        } else {\n            return false;\n       \
    \ }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp20om8kjh.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp20om8kjh.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets = string.match(/\\\
    [.*?\\]/g);\n    if (brackets) {\n        let nested = true;\n        for (let\
    \ i = 0; i < brackets.length; i++) {\n            if (brackets[i] === brackets[brackets.length\
    \ - 1 - i]) {\n                nested = false;\n            }\n        }\n   \
    \     return nested;\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_8s3wzxi.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_8s3wzxi.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_stack: number[] = [];\n\tlet close_brackets_stack:\
    \ number[] = [];\n\tlet open_brackets_size: number = 0;\n\tlet close_brackets_size:\
    \ number = 0;\n\tlet open_brackets_index = 0;\n\tlet close_brackets_index = 0;\n\
    \tlet open_brackets_string: string = \"\";\n\tlet close_brackets_string: string\
    \ = \"\";\n\tlet open_brackets_string_index = 0;\n\tlet close_brackets_string_index\
    \ = 0;\n\tlet open_brackets_string_size = 0;\n\tlet close_brackets_string_size\
    \ = 0;\n\tlet open_brackets_string_index2 = 0;\n\tlet close_brackets_string_index2\
    \ = 0;\n\tlet open_brackets_string_size2 = 0;\n\tlet close_brackets_string_size2\
    \ = 0;\n\tlet open_brackets_string_index3 = 0;\n\tlet close_brackets_string_index3\
    \ = 0;\n\tlet open_brackets_string_size3 = 0;\n\tlet close_brackets_string_size3\
    \ = 0;\n\tlet open_brackets_string_index4 = 0;\n\tlet close_brackets_string_index4\
    \ = 0;\n\tlet open_brackets_string_size4 = 0;\n\tlet close_brackets_string_size4\
    \ = 0;\n\tlet open_brackets_string_index5 = 0;\n\tlet close_brackets_string_index5\
    \ = 0;\n\tlet open_brackets_string_size5 = 0;\n\tlet close_brackets_string_size5\
    \ = 0;\n\tlet open_brackets_string_index6 = 0;\n\tlet close_brackets_string_index6\
    \ = 0;\n\tlet open_brackets_string_size6 = 0;\n\tlet close_brackets_string_size6\
    \ = 0;\n\tlet open_brackets_string_index7 = 0;\n\tlet close_brackets_string_index7\
    \ = 0;\n\tlet open_brackets_string_size7 = 0;\n\tlet close_brackets_string_size7\
    \ = 0;\n\tlet open_brackets_string_index8 = 0;\n\tlet close_brackets_string_index8\
    \ = 0;\n\tlet open_brackets_string_size8 = 0;\n\tlet close_brackets_string_size8\
    \ = 0;\n\tlet open_brackets_string_index9 = 0;\n\tlet close_brackets_string_index9\
    \ = 0;\n\tlet open_b\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn0vln3jq.ts(85,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet open_brackets: number\
    \ = 0;\n\tlet close_brackets: number = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tconst c = string[i];\n\t\tif (c == '[') {\n\t\t\topen_brackets++;\n\
    \t\t} else if (c == ']') {\n\t\t\tclose_brackets++;\n\t\t}\n\t\tif (open_brackets\
    \ > 0 && close_brackets > 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplk3qttop.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplk3qttop.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    // Write your code\
    \ here\n    let stack: string[] = [];\n    let openBracketCount = 0;\n    let\
    \ closeBracketCount = 0;\n    for (let i = 0; i < string.length; i++) {\n    \
    \    if (string[i] === \"[\") {\n            openBracketCount++;\n        } else\
    \ if (string[i] === \"]\") {\n            closeBracketCount++;\n        } else\
    \ if (string[i] === \"[\") {\n            openBracketCount++;\n        } else\
    \ if (string[i] === \"]\") {\n            closeBracketCount++;\n        } else\
    \ if (openBracketCount === closeBracketCount) {\n            stack.push(string[i]);\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfr9pnmac.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfr9pnmac.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length: number\
    \ = 0;\n\tlet open_brackets_index: number = 0;\n\tlet close_brackets_index: number\
    \ = 0;\n\tlet open_brackets_index_length: number = 0;\n\tlet close_brackets_index_length:\
    \ number = 0;\n\tlet open_brackets_index_count: number = 0;\n\tlet close_brackets_index_count:\
    \ number = 0;\n\tlet open_brackets_index_count_length: number = 0;\n\tlet close_brackets_index_count_length:\
    \ number = 0;\n\tlet open_brackets_index_count_count: number = 0;\n\tlet close_brackets_index_count_count:\
    \ number = 0;\n\tlet open_brackets_index_count_count_length: number = 0;\n\tlet\
    \ close_brackets_index_count_count_length: number = 0;\n\tlet open_brackets_index_count_count_count:\
    \ number = 0;\n\tlet close_brackets_index_count_count_count: number = 0;\n\tlet\
    \ open_brackets_index_count_count_count_length: number = 0;\n\tlet close_brackets_index_count_count_count_length:\
    \ number = 0;\n\tlet open_brackets_index_count_count_count_count: number = 0;\n\
    \tlet close_brackets_index_count_count_count_count: number = 0;\n\tlet open_brackets_index_count_count_count_count_length:\
    \ number = 0;\n\tlet close_brackets_index_count_count_count_count_length: number\
    \ = 0;\n\tlet open_brackets_index_count_count_count_count_count: number = 0;\n\
    \tlet close_brackets_index_count_count_count_count_count: number = 0;\n\tlet open_brackets_index_count_count_count_count_count_length:\
    \ number = 0;\n\tlet close_brackets_index_count_count_count_count_count_length:\
    \ number = 0;\n\tlet open_brackets_index_count_count_count_count_count_count:\
    \ number = 0;\n\tlet close_brackets_index_count_count_count_count_count: number\
    \ = 0;\n\tlet open_brackets_index_count_count_count_count_count_count_length:\
    \ number = 0;\n\tlet close_brackets_index_count_count_count_count_count_count_length:\
    \ number = 0;\n\tlet open_brackets_index_count_count_count_count_count_count_count:\
    \ number = 0;\n\tlet close_brackets_index_count_count_count_count_count_count_count:\
    \ number = 0;\n\tlet open\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnzo82uxo.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ == \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ == \"]\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmxd9c9n6.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmxd9c9n6.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets = string.match(/\\\
    [.*?\\]/g);\n    return brackets && brackets.some(bracket => is_nested(bracket));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmph91mn_ui.js:17\n    var brackets = string.match(/\\[.*?\\]/g);\n\
    \                          ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at String.match (<anonymous>)\n    at is_nested (/tmp/tmph91mn_ui.js:17:27)\n\
    \    at /tmp/tmph91mn_ui.js:18:66\n    at Array.some (<anonymous>)\n    at is_nested\
    \ (/tmp/tmph91mn_ui.js:18:33)\n    at /tmp/tmph91mn_ui.js:18:66\n    at Array.some\
    \ (<anonymous>)\n    at is_nested (/tmp/tmph91mn_ui.js:18:33)\n    at /tmp/tmph91mn_ui.js:18:66\n\
    \    at Array.some (<anonymous>)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let bracketCount =\
    \ 0;\n    let openingBracketCount = 0;\n    let closingBracketCount = 0;\n   \
    \ let openingBrackets: number[] = [];\n    let closingBrackets: number[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        const c = string.charAt(i);\n\
    \        if (c == '[') {\n            bracketCount++;\n            openingBracketCount++;\n\
    \            openingBrackets.push(i);\n        } else if (c == ']') {\n      \
    \      bracketCount--;\n            closingBracketCount++;\n            closingBrackets.push(i);\n\
    \        } else if (c == '[' && bracketCount > 0) {\n            bracketCount--;\n\
    \        } else if (c == ']' && bracketCount > 0) {\n            bracketCount++;\n\
    \        }\n    }\n    if (openingBracketCount > closingBracketCount) {\n    \
    \    return true;\n    }\n    for (let i = 0; i < openingBrackets.length; i++)\
    \ {\n        const openingBracket = openingBrackets[i];\n        const closingBracket\
    \ = closingBrackets[i];\n        if (openingBracket < closingBracket) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp966dczor.js:56:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp966dczor.js:71:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets = string.match(/\\\
    [.*?\\]/g);\n\tlet nested = false;\n\tfor (let i = 0; i < brackets.length; i++)\
    \ {\n\t\tlet bracket = brackets[i];\n\t\tlet open_brackets = bracket.match(/\\\
    [/g);\n\t\tlet close_brackets = bracket.match(/\\]/g);\n\t\tif (open_brackets\
    \ && close_brackets) {\n\t\t\tnested = true;\n\t\t}\n\t}\n\treturn nested;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk7ruxlxb.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk7ruxlxb.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738764
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_parens: number[] = [];\n\tlet close_parens: number[] = [];\n\
    \tlet open_parens_stack: number[] = [];\n\tlet close_parens_stack: number[] =\
    \ [];\n\tlet open_brackets_stack: number[] = [];\n\tlet close_brackets_stack:\
    \ number[] = [];\n\tlet open_parens_stack_index: number = 0;\n\tlet close_parens_stack_index:\
    \ number = 0;\n\tlet open_brackets_stack_index: number = 0;\n\tlet close_brackets_stack_index:\
    \ number = 0;\n\tlet open_parens_stack_string: string = \"\";\n\tlet close_parens_stack_string:\
    \ string = \"\";\n\tlet open_brackets_stack_string: string = \"\";\n\tlet close_brackets_stack_string:\
    \ string = \"\";\n\tlet open_parens_stack_string_index: number = 0;\n\tlet close_parens_stack_string_index:\
    \ number = 0;\n\tlet open_brackets_stack_string_index: number = 0;\n\tlet close_brackets_stack_string_index:\
    \ number = 0;\n\tlet open_parens_stack_string_index: number = 0;\n\tlet close_parens_stack_string_index:\
    \ number = 0;\n\tlet open_brackets_stack_string_index: number = 0;\n\tlet close_brackets_stack_string_index:\
    \ number = 0;\n\tlet open_parens_stack_string_index: number = 0;\n\tlet close_parens_stack_string_index:\
    \ number = 0;\n\tlet open_brackets_stack_string_index: number = 0;\n\tlet close_brackets_stack_string_index:\
    \ number = 0;\n\tlet open_parens_stack_string_index: number = 0;\n\tlet close_parens_stack_string_index:\
    \ number = 0;\n\tlet open_brackets_stack_string_index: number = 0;\n\tlet close_brackets_stack_string_index:\
    \ number = 0;\n\tlet open_parens_stack_string_index: number = 0;\n\tlet close_parens_stack_string_index:\
    \ number = 0;\n\tlet open_brackets_stack_string_index: number = 0;\n\tlet close_brackets_stack_string_index:\
    \ number = 0;\n\tlet open_parens_stack_string_index: number = 0;\n\tlet close_parens_stack_string_index:\
    \ number = 0;\n\tlet open_brackets_stack_string_index: number = 0;\n\tlet close_brackets_stack_string_index:\
    \ number = 0;\n\tlet open_parens_stack_string_index: number = 0;\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppv43w_n9.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738764
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    // Write your code\
    \ here.\n    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5q8ahxoo.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5q8ahxoo.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738764
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets = string.match(/[\\\
    [\\]]/g);\n    let nesting = false;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === brackets[brackets.length - 1 - i]) {\n \
    \           nesting = true;\n        }\n    }\n    return nesting;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp24uhrceo.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp24uhrceo.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738764
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    if (string.length\
    \ <= 1) {\n        return false;\n    }\n    let open_brackets = 0;\n    let close_brackets\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] ===\
    \ \"[\") {\n            open_brackets++;\n        } else if (string[i] === \"\
    ]\") {\n            close_brackets++;\n        }\n        if (open_brackets >\
    \ close_brackets) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0o2wjw9p.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0o2wjw9p.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738764
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            let openBracket = stack.pop();\n        \
    \    if (openBracket !== '[') {\n                return false;\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb6_h4b2w.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb6_h4b2w.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738764
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_stack: number[] = [];\n\tlet close_brackets_stack:\
    \ number[] = [];\n\tlet open_parens: number[] = [];\n\tlet close_parens: number[]\
    \ = [];\n\tlet open_parens_stack: number[] = [];\n\tlet close_parens_stack: number[]\
    \ = [];\n\tlet open_brackets_stack_index: number[] = [];\n\tlet close_brackets_stack_index:\
    \ number[] = [];\n\tlet open_parens_stack_index: number[] = [];\n\tlet close_parens_stack_index:\
    \ number[] = [];\n\tlet open_brackets_stack_index2: number[] = [];\n\tlet close_brackets_stack_index2:\
    \ number[] = [];\n\tlet open_parens_stack_index2: number[] = [];\n\tlet close_parens_stack_index2:\
    \ number[] = [];\n\tlet open_brackets_stack_index3: number[] = [];\n\tlet close_brackets_stack_index3:\
    \ number[] = [];\n\tlet open_parens_stack_index3: number[] = [];\n\tlet close_parens_stack_index3:\
    \ number[] = [];\n\tlet open_brackets_stack_index4: number[] = [];\n\tlet close_brackets_stack_index4:\
    \ number[] = [];\n\tlet open_parens_stack_index4: number[] = [];\n\tlet close_parens_stack_index4:\
    \ number[] = [];\n\tlet open_brackets_stack_index5: number[] = [];\n\tlet close_brackets_stack_index5:\
    \ number[] = [];\n\tlet open_parens_stack_index5: number[] = [];\n\tlet close_parens_stack_index5:\
    \ number[] = [];\n\tlet open_brackets_stack_index6: number[] = [];\n\tlet close_brackets_stack_index6:\
    \ number[] = [];\n\tlet open_parens_stack_index6: number[] = [];\n\tlet close_parens_stack_index6:\
    \ number[] = [];\n\tlet open_brackets_stack_index7: number[] = [];\n\tlet close_brackets_stack_index7:\
    \ number[] = [];\n\tlet open_parens_stack_index7: number[] = [];\n\tlet close_parens_stack_index7:\
    \ number[] = [];\n\tlet open_brackets_stack_index8: number[] = [];\n\tlet close_brackets_stack_index8:\
    \ number[] = [];\n\tlet open_parens_stack_index8: number[] = [];\n\t\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2kkq2tpm.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738764
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            brackets.push(i);\n        } else if (string[i] ===\
    \ \"]\") {\n            close_brackets.push(i);\n        } else if (string[i]\
    \ === \"[\") {\n            open_brackets.push(i);\n        }\n    }\n    if (brackets.length\
    \ === 0) {\n        return false;\n    }\n    let open_brackets_count = open_brackets.length;\n\
    \    let close_brackets_count = close_brackets.length;\n    for (let i = 0; i\
    \ < open_brackets_count; i++) {\n        for (let j = 0; j < close_brackets_count;\
    \ j++) {\n            if (open_brackets[i] === close_brackets[j]) {\n        \
    \        open_brackets_count -= 1;\n                close_brackets_count -= 1;\n\
    \            }\n        }\n    }\n    return open_brackets_count === 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwct5u8_k.js:50:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwct5u8_k.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738764
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(\"[\");\n        } else if (string[i] ===\
    \ \"]\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        } else if (string[i] === \"\
    [\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            stack.pop();\n            stack.push(\"[\");\n   \
    \     } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            }\n            stack.push(\"]\");\n\
    \        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp40tg1rpb.js:52:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp40tg1rpb.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738764
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_parens: number[] = [];\n    let close_parens: number[] =\
    \ [];\n    let open_brackets_index: number[] = [];\n    let close_brackets_index:\
    \ number[] = [];\n    let open_parens_index: number[] = [];\n    let close_parens_index:\
    \ number[] = [];\n    let open_brackets_length: number[] = [];\n    let close_brackets_length:\
    \ number[] = [];\n    let open_parens_length: number[] = [];\n    let close_parens_length:\
    \ number[] = [];\n    let open_brackets_length_counter: number[] = [];\n    let\
    \ close_brackets_length_counter: number[] = [];\n    let open_parens_length_counter:\
    \ number[] = [];\n    let close_parens_length_counter: number[] = [];\n    let\
    \ open_brackets_length_counter_index: number[] = [];\n    let close_brackets_length_counter_index:\
    \ number[] = [];\n    let open_parens_length_counter_index: number[] = [];\n \
    \   let close_parens_length_counter_index: number[] = [];\n    let open_brackets_length_counter_index2:\
    \ number[] = [];\n    let close_brackets_length_counter_index2: number[] = [];\n\
    \    let open_parens_length_counter_index2: number[] = [];\n    let close_parens_length_counter_index2:\
    \ number[] = [];\n    let open_brackets_length_counter_index3: number[] = [];\n\
    \    let close_brackets_length_counter_index3: number[] = [];\n    let open_parens_length_counter_index3:\
    \ number[] = [];\n    let close_parens_length_counter_index3: number[] = [];\n\
    \    let open_brackets_length_counter_index4: number[] = [];\n    let close_brackets_length_counter_index4:\
    \ number[] = [];\n    let open_parens_length_counter_index4: number[] = [];\n\
    \    let close_parens_length_counter_index4: number[] = [];\n    let open_brackets_length_counter_index5:\
    \ number[] = [];\n    let close_brackets_length_counter_index5: number[] = [];\n\
    \    let open_parens_length_counter_index5: number[] = [];\n    let close_parens_length_counter_index5:\
    \ number[] = [];\n    let open_brackets_length_counter_index6: number[] = [];\n\
    \    let close_brackets_length_counter_index6: number[] = [];\n    let open_parens_length_counter_index6:\
    \ number[] = [];\n    let close_parens_length_counter_index6: number[] = [];\n\
    \    let open_brackets_length_counter_index7: number[] = [];\n    let close_brackets_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5d0c4s_2.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738764
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets = string.match(/\\\
    [.*?\\]/g);\n    if (brackets) {\n        let nested = brackets.filter(x => x.match(/\\\
    [.*?\\]/));\n        if (nested.length > 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp57lhqprz.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp57lhqprz.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738764
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzly6bjdc.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzly6bjdc.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738765
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_parens: number[] = [];\n\tlet close_parens: number[] = [];\n\
    \tlet open_brackets_stack: number[] = [];\n\tlet close_brackets_stack: number[]\
    \ = [];\n\tlet open_parens_stack: number[] = [];\n\tlet close_parens_stack: number[]\
    \ = [];\n\tlet open_brackets_size: number = 0;\n\tlet close_brackets_size: number\
    \ = 0;\n\tlet open_parens_size: number = 0;\n\tlet close_parens_size: number =\
    \ 0;\n\tlet open_brackets_index: number = 0;\n\tlet close_brackets_index: number\
    \ = 0;\n\tlet open_parens_index: number = 0;\n\tlet close_parens_index: number\
    \ = 0;\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length:\
    \ number = 0;\n\tlet open_parens_length: number = 0;\n\tlet close_parens_length:\
    \ number = 0;\n\tlet open_brackets_stack_index: number = 0;\n\tlet close_brackets_stack_index:\
    \ number = 0;\n\tlet open_parens_stack_index: number = 0;\n\tlet close_parens_stack_index:\
    \ number = 0;\n\tlet open_brackets_stack: number[] = [];\n\tlet close_brackets_stack:\
    \ number[] = [];\n\tlet open_parens_stack: number[] = [];\n\tlet close_parens_stack:\
    \ number[] = [];\n\tlet open_brackets_size: number = 0;\n\tlet close_brackets_size:\
    \ number = 0;\n\tlet open_parens_size: number = 0;\n\tlet close_parens_size: number\
    \ = 0;\n\tlet open_brackets_index: number = 0;\n\tlet close_brackets_index: number\
    \ = 0;\n\tlet open_parens_index: number = 0;\n\tlet close_parens_index: number\
    \ = 0;\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length:\
    \ number = 0;\n\tlet open_parens_length: number = 0;\n\tlet close_parens_length:\
    \ number = 0;\n\tlet open_brackets_stack_index: number = 0;\n\tlet close_brackets_stack_index:\
    \ number = 0;\n\tlet open_parens_stack_index: number = 0;\n\tlet close_parens_stack_index:\
    \ number = 0;\n\tlet open_brackets_stack: number[] = [];\n\tlet close_brackets_stack:\
    \ number[]\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuestwxay.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738764
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets = string.match(/[\\\
    [\\]]/g);\n    return brackets && brackets.length >= 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmph81hgz4v.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph81hgz4v.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738765
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(\"[\");\n        } else if (string[i] ===\
    \ \"]\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        } else if (string[i] === \"\
    [\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            stack.push(\"[\");\n        } else if (string[i] ===\
    \ \"]\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk3kjnki0.js:48:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk3kjnki0.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738765
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\" || string[i] === \"{\") {\n            stack.push(string[i]);\n  \
    \      } else if (string[i] === \"]\" || string[i] === \"}\") {\n            if\
    \ (stack.length === 0) {\n                return false;\n            } else {\n\
    \                stack.pop();\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwjdwb5uy.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwjdwb5uy.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738765
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let open_brackets:\
    \ number[] = [];\n    let closed_brackets: number[] = [];\n    let open_brackets_length:\
    \ number = 0;\n    let closed_brackets_length: number = 0;\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            open_brackets.push(open_brackets_length);\n\
    \            open_brackets_length++;\n        } else if (string[i] === \"]\")\
    \ {\n            closed_brackets.push(closed_brackets_length);\n            closed_brackets_length++;\n\
    \        }\n    }\n    if (open_brackets.length !== closed_brackets.length) {\n\
    \        return false;\n    }\n    for (let i = 0; i < open_brackets.length; i++)\
    \ {\n        if (open_brackets[i] === closed_brackets[i]) {\n            continue;\n\
    \        }\n        if (open_brackets[i] > closed_brackets[i]) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn4ajp1d2.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn4ajp1d2.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738765
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    const stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (char === \"[\" || char === \"]\") {\n            stack.push(char);\n\
    \        } else if (char === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3lznntjz.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3lznntjz.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738765
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push('[');\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            let openBracket = stack.pop();\n        \
    \    if (openBracket !== '[') {\n                return false;\n            }\n\
    \        } else if (char === '\\'') {\n            stack.push('\\'');\n      \
    \  } else if (char === '\\'') {\n            stack.push('\\'');\n        } else\
    \ if (char === '\\'') {\n            stack.push('\\'');\n        } else if (char\
    \ === '\\'') {\n            stack.push('\\'');\n        } else if (char === '\\\
    '') {\n            stack.push('\\'');\n        } else if (char === '\\'') {\n\
    \            stack.push('\\'');\n        } else if (char === '\\'') {\n      \
    \      stack.push('\\'');\n        } else if (char === '\\'') {\n            stack.push('\\\
    '');\n        } else if (char === '\\'') {\n            stack.push('\\'');\n \
    \       } else if (char === '\\'') {\n            stack.push('\\'');\n       \
    \ } else if (char === '\\'') {\n            stack.push('\\'');\n        } else\
    \ if (char === '\\'') {\n            stack.push('\\'');\n        } else if (char\
    \ === '\\'') {\n            stack.push('\\'');\n        } else if (char === '\\\
    '') {\n            stack.push('\\'');\n        } else if (char === '\\'') {\n\
    \            stack.push('\\'');\n        } else if (char === '\\'') {\n      \
    \      stack.push('\\'');\n        } else if (char === '\\'') {\n            stack.push('\\\
    '');\n        } else if (char === '\\'') {\n            stack.push('\\'');\n \
    \       } else if (char === '\\'') {\n            stack.push('\\'');\n       \
    \ } else if (char === '\\'') {\n            stack.push('\\'');\n        } else\
    \ if (char === '\\'') {\n            stack.push('\\'');\n        } else if (char\
    \ === '\\'') {\n            stack.push('\\'');\n        } else if (char === '\\\
    '') {\n            stack.push('\\'');\n        } else if (char === '\\'') {\n\
    \            stack.push('\\'');\n        } else if (char === '\\'') {\n      \
    \      stack.push('\\'');\n        } else if (char === '\\'') {\n            stack.push('\\\
    '');\n        } else if (char === '\\'') {\n            stack.push('\\'');\n \
    \       } else if (char === '\\'') {\n            stack.push('\\'');\n       \
    \ } else if (char === '\\'') {\n            stack.push('\\'');\n        } else\
    \ if (char === '\\'') {\n            stack.push('\\'');\n        } else if (char\
    \ === '\\'') {\n            stack.push('\\'');\n        } else if (char === '\\\
    '') {\n            stack.push('\\''\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphci2osl5.ts(94,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphci2osl5.ts(94,9): error TS1005: '','' expected.

    ../../../../../tmp/tmphci2osl5.ts(116,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let open_brackets:\
    \ number[] = [];\n    let closed_brackets: number[] = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            open_brackets.push(i);\n\
    \        } else if (string[i] === \"]\") {\n            closed_brackets.push(i);\n\
    \        }\n    }\n    if (open_brackets.length !== closed_brackets.length) {\n\
    \        return false;\n    }\n    for (let i = 0; i < open_brackets.length; i++)\
    \ {\n        let open_bracket = open_brackets[i];\n        let closed_bracket\
    \ = closed_brackets[i];\n        if (open_bracket === closed_bracket) {\n    \
    \        continue;\n        }\n        if (open_bracket > closed_bracket) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6d4xf4oo.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6d4xf4oo.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738765
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets = string.match(/\\\
    [.*?\\]/g);\n\tlet nested: boolean = false;\n\t\n\tfor (let i = 0; i < brackets.length;\
    \ i++) {\n\t\tlet bracket = brackets[i];\n\t\tlet open = bracket.match(/\\[/);\n\
    \t\tlet close = bracket.match(/\\]/);\n\t\t\n\t\tif (open && close) {\n\t\t\t\
    nested = true;\n\t\t}\n\t}\n\t\n\treturn nested;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6ayn_5e3.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6ayn_5e3.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738765
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_brackets_stack: number[] = [];\n    let close_brackets_stack:\
    \ number[] = [];\n    let open_stack: number[] = [];\n    let close_stack: number[]\
    \ = [];\n    let open_stack_index: number[] = [];\n    let close_stack_index:\
    \ number[] = [];\n    let open_stack_string: string = \"\";\n    let close_stack_string:\
    \ string = \"\";\n    let open_stack_string_index: number[] = [];\n    let close_stack_string_index:\
    \ number[] = [];\n    let open_stack_string_index2: number[] = [];\n    let close_stack_string_index2:\
    \ number[] = [];\n    let open_stack_string_index3: number[] = [];\n    let close_stack_string_index3:\
    \ number[] = [];\n    let open_stack_string_index4: number[] = [];\n    let close_stack_string_index4:\
    \ number[] = [];\n    let open_stack_string_index5: number[] = [];\n    let close_stack_string_index5:\
    \ number[] = [];\n    let open_stack_string_index6: number[] = [];\n    let close_stack_string_index6:\
    \ number[] = [];\n    let open_stack_string_index7: number[] = [];\n    let close_stack_string_index7:\
    \ number[] = [];\n    let open_stack_string_index8: number[] = [];\n    let close_stack_string_index8:\
    \ number[] = [];\n    let open_stack_string_index9: number[] = [];\n    let close_stack_string_index9:\
    \ number[] = [];\n    let open_stack_string_index10: number[] = [];\n    let close_stack_string_index10:\
    \ number[] = [];\n    let open_stack_string_index11: number[] = [];\n    let close_stack_string_index11:\
    \ number[] = [];\n    let open_stack_string_index12: number[] = [];\n    let close_stack_string_index12:\
    \ number[] = [];\n    let open_stack_string_index13: number[] = [];\n    let close_stack_string_index13:\
    \ number[] = [];\n    let open_stack_string_index14: number[] = [];\n    let close_stack_string_index14:\
    \ number[] = [];\n    let open_stack_string_index15: number[] = [];\n    let close_stack_string_index15:\
    \ number[] = [];\n    let open_stack_string_index16: number[] = [];\n    let close_stack_string_index16:\
    \ number[] = [];\n    let open_stack_string_index17: number[] = [];\n    let close_stack_string_index17:\
    \ number[] = [];\n    let open_stack_string_index18: number[] = [];\n    let close_stack_string_index18:\
    \ number[] = [];\n    let open_stack_string_index19: number[] = [];\n    let close_stack_string_index19:\
    \ number[] = [];\n    let open_stack_string_index\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2e85w82z.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738765
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet open_brackets: number\
    \ = 0;\n\tlet closed_brackets: number = 0;\n\tlet open_brackets_stack: string[]\
    \ = [];\n\tlet closed_brackets_stack: string[] = [];\n\tlet open_brackets_length:\
    \ number = 0;\n\tlet closed_brackets_length: number = 0;\n\tlet open_characters:\
    \ number = 0;\n\tlet close_characters: number = 0;\n\tlet open_characters_stack:\
    \ string[] = [];\n\tlet close_characters_stack: string[] = [];\n\tlet open_characters_length:\
    \ number = 0;\n\tlet close_characters_length: number = 0;\n\tlet open_brackets_characters:\
    \ number = 0;\n\tlet closed_brackets_characters: number = 0;\n\tlet open_brackets_characters_stack:\
    \ string[] = [];\n\tlet closed_brackets_characters_stack: string[] = [];\n\tlet\
    \ open_brackets_characters_length: number = 0;\n\tlet closed_brackets_characters_length:\
    \ number = 0;\n\tlet open_characters_characters: number = 0;\n\tlet close_characters_characters:\
    \ number = 0;\n\tlet open_characters_characters_stack: string[] = [];\n\tlet close_characters_characters_stack:\
    \ string[] = [];\n\tlet open_characters_characters_length: number = 0;\n\tlet\
    \ close_characters_characters_length: number = 0;\n\tlet open_brackets_characters_characters:\
    \ number = 0;\n\tlet closed_brackets_characters_characters: number = 0;\n\tlet\
    \ open_brackets_characters_characters_stack: string[] = [];\n\tlet closed_brackets_characters_characters_stack:\
    \ string[] = [];\n\tlet open_brackets_characters_characters_length: number = 0;\n\
    \tlet closed_brackets_characters_characters_length: number = 0;\n\tlet open_characters_characters_characters:\
    \ number = 0;\n\tlet close_characters_characters_characters: number = 0;\n\tlet\
    \ open_characters_characters_characters_stack: string[] = [];\n\tlet close_characters_characters_characters_stack:\
    \ string[] = [];\n\tlet open_characters_characters_characters_length: number =\
    \ 0;\n\tlet close_characters_characters_characters_length: number = 0;\n\tlet\
    \ open_brackets_characters_characters_characters: number = 0;\n\tlet closed_brackets_characters_characters_characters:\
    \ number = 0;\n\tlet open_brackets_characters_characters_characters_stack: string[]\
    \ = [];\n\tlet closed_brackets_characters_characters_characters_stack: string[]\
    \ = [];\n\tlet open_brackets_characters_characters_\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8tkyry4p.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738764
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: string[]\
    \ = string.split(\"\");\n    let stack: string[] = [];\n    for (let i = 0; i\
    \ < brackets.length; i++) {\n        if (brackets[i] == \"[\") {\n           \
    \ stack.push(brackets[i]);\n        } else if (brackets[i] == \"]\") {\n     \
    \       if (stack.length == 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    if\
    \ (stack.length != 0) {\n        return false;\n    } else {\n        return true;\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp410531lf.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp410531lf.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738765
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet open_brackets: number[]\
    \ = [];\n\tlet closed_brackets: number[] = [];\n\tlet open_brackets_length: number\
    \ = 0;\n\tlet closed_brackets_length: number = 0;\n\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet char = string[i];\n\t\tif (char === '[') {\n\t\t\topen_brackets.push(open_brackets_length);\n\
    \t\t\topen_brackets_length++;\n\t\t} else if (char === ']') {\n\t\t\tclosed_brackets.push(closed_brackets_length);\n\
    \t\t\tclosed_brackets_length++;\n\t\t}\n\t}\n\n\tif (open_brackets.length !==\
    \ closed_brackets.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < open_brackets.length;\
    \ i++) {\n\t\tlet open_brackets_index = open_brackets[i];\n\t\tlet closed_brackets_index\
    \ = closed_brackets[i];\n\n\t\tfor (let j = open_brackets_index + 1; j < closed_brackets_index;\
    \ j++) {\n\t\t\tif (string[j] === '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    }\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp39t5j4uy.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp39t5j4uy.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738766
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet closed_brackets: number[]\
    \ = [];\n\tlet open_open_brackets: number[] = [];\n\tlet open_closed_brackets:\
    \ number[] = [];\n\tlet close_open_brackets: number[] = [];\n\tlet close_closed_brackets:\
    \ number[] = [];\n\tlet open_closed_open_brackets: number[] = [];\n\tlet close_open_brackets_closed_brackets:\
    \ number[] = [];\n\tlet open_open_brackets_closed_brackets: number[] = [];\n\t\
    let open_closed_brackets_closed_brackets: number[] = [];\n\tlet open_closed_brackets_open_closed_brackets:\
    \ number[] = [];\n\tlet open_open_brackets_open_closed_brackets: number[] = [];\n\
    \tlet open_closed_brackets_open_open_brackets: number[] = [];\n\tlet open_closed_brackets_open_closed_open_brackets:\
    \ number[] = [];\n\tlet open_open_brackets_open_open_brackets: number[] = [];\n\
    \tlet open_closed_brackets_open_closed_closed_brackets: number[] = [];\n\tlet\
    \ open_closed_brackets_open_closed_open_brackets: number[] = [];\n\tlet open_open_brackets_open_closed_open_brackets:\
    \ number[] = [];\n\tlet open_closed_brackets_open_open_brackets_closed_brackets:\
    \ number[] = [];\n\tlet open_closed_brackets_open_closed_closed_brackets: number[]\
    \ = [];\n\tlet open_closed_brackets_open_closed_open_brackets_open_closed_brackets:\
    \ number[] = [];\n\tlet open_closed_brackets_open_closed_open_brackets_open_open_brackets:\
    \ number[] = [];\n\tlet open_closed_brackets_open_closed_open_brackets_open_closed_open_brackets:\
    \ number[] = [];\n\tlet open_closed_brackets_open_closed_open_brackets_open_closed_closed_brackets:\
    \ number[] = [];\n\tlet open_closed_brackets_open_closed_open_brackets_open_closed_open_brackets_open_closed_open_brackets:\
    \ number[] = [];\n\tlet open_closed_brackets_open_closed_open_brackets_open_closed_closed_open_brackets_open_closed_closed_brackets:\
    \ number[] = [];\n\tlet open_closed_brackets_open_closed_open_brackets_open_closed_closed_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplllqe05q.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738766
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_brackets_stack: number[] = [];\n    let close_brackets_stack:\
    \ number[] = [];\n    let open_stack: number[] = [];\n    let close_stack: number[]\
    \ = [];\n    let open_stack_index: number = 0;\n    let close_stack_index: number\
    \ = 0;\n    let open_stack_string: string = \"\";\n    let close_stack_string:\
    \ string = \"\";\n    let open_stack_string_index: number = 0;\n    let close_stack_string_index:\
    \ number = 0;\n    let open_stack_string_count: number = 0;\n    let close_stack_string_count:\
    \ number = 0;\n    let open_stack_strings: string[] = [];\n    let close_stack_strings:\
    \ string[] = [];\n    let open_stack_strings_index: number = 0;\n    let close_stack_strings_index:\
    \ number = 0;\n    let open_stack_strings_count: number = 0;\n    let close_stack_strings_count:\
    \ number = 0;\n    let open_stack_strings_string: string = \"\";\n    let close_stack_strings_string:\
    \ string = \"\";\n    let open_stack_strings_string_index: number = 0;\n    let\
    \ close_stack_strings_string_index: number = 0;\n    let open_stack_strings_string_count:\
    \ number = 0;\n    let close_stack_strings_string_count: number = 0;\n    let\
    \ open_stack_strings_strings: string[] = [];\n    let close_stack_strings_strings:\
    \ string[] = [];\n    let open_stack_strings_strings_index: number = 0;\n    let\
    \ close_stack_strings_strings_index: number = 0;\n    let open_stack_strings_strings_count:\
    \ number = 0;\n    let close_stack_strings_strings_count: number = 0;\n    let\
    \ open_stack_strings_strings_string: string = \"\";\n    let close_stack_strings_strings_string:\
    \ string = \"\";\n    let open_stack_strings_strings_string_index: number = 0;\n\
    \    let close_stack_strings_strings_string_index: number = 0;\n    let open_stack_strings_strings_string_count:\
    \ number = 0;\n    let close_stack_strings_strings_string_count: number = 0;\n\
    \    let open_stack_strings_strings_strings: string[] = [];\n    let close_stack_strings_strings_strings:\
    \ string[] = [];\n    let open_stack_strings_strings_strings_index: number = 0;\n\
    \    let close_stack_strings_strings_strings_index: number = 0;\n    let open_stack_strings_strings_strings_count:\
    \ number = 0;\n    let close_stack_strings_strings_strings_count: number = 0;\n\
    \    let open_stack_strings_strings_strings_string: string = \"\";\n    let close_stack_strings_strings_strings_string:\
    \ string = \"\";\n    let open_stack_strings_strings_strings_string_index: number\
    \ = 0;\n    let close_stack_string\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3fhx4a0d.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738767
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    if (string.length\
    \ < 2) {\n        return false;\n    }\n    const first = string.charAt(0);\n\
    \    const last = string.charAt(string.length - 1);\n    if (first === '[' &&\
    \ last === ']') {\n        return true;\n    }\n    if (first === '{' && last\
    \ === '}') {\n        return true;\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzboen8ov.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzboen8ov.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738767
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_length: number[] = [];\n\tlet close_brackets_length:\
    \ number[] = [];\n\tlet open_parens: number[] = [];\n\tlet close_parens: number[]\
    \ = [];\n\tlet open_parens_length: number[] = [];\n\tlet close_parens_length:\
    \ number[] = [];\n\tlet open_brackets_length_index: number[] = [];\n\tlet close_brackets_length_index:\
    \ number[] = [];\n\tlet open_parens_length_index: number[] = [];\n\tlet close_parens_length_index:\
    \ number[] = [];\n\tlet open_brackets_length_index_max: number[] = [];\n\tlet\
    \ close_brackets_length_index_max: number[] = [];\n\tlet open_parens_length_index_max:\
    \ number[] = [];\n\tlet close_parens_length_index_max: number[] = [];\n\tlet open_brackets_length_index_max_index\
    \ = 0;\n\tlet close_brackets_length_index_max_index = 0;\n\tlet open_parens_length_index_max_index\
    \ = 0;\n\tlet close_parens_length_index_max_index = 0;\n\tlet open_brackets_index_max\
    \ = 0;\n\tlet close_brackets_index_max = 0;\n\tlet open_parens_index_max = 0;\n\
    \tlet close_parens_index_max = 0;\n\tlet open_brackets_index_max_index = 0;\n\t\
    let close_brackets_index_max_index = 0;\n\tlet open_parens_index_max_index = 0;\n\
    \tlet close_parens_index_max_index = 0;\n\tlet open_brackets_index_max_index =\
    \ 0;\n\tlet close_brackets_index_max_index = 0;\n\tlet open_parens_index_max_index\
    \ = 0;\n\tlet close_parens_index_max_index = 0;\n\tlet open_brackets_index_max_index\
    \ = 0;\n\tlet close_brackets_index_max_index = 0;\n\tlet open_parens_index_max_index\
    \ = 0;\n\tlet close_parens_index_max_index = 0;\n\tlet open_brackets_index_max_index\
    \ = 0;\n\tlet close_brackets_index_max_index = 0;\n\tlet open_parens_index_max_index\
    \ = 0;\n\tlet close_parens_index_max_index = 0;\n\tlet open_brackets_index_max_index\
    \ = 0;\n\tlet close_brackets_index_max_index = 0;\n\tlet open_parens_index_max_index\
    \ = 0;\n\tlet close_parens_index_max_index = 0;\n\t\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv3l66nvx.ts(85,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738767
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    const stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            const top = stack.pop();\n            if\
    \ (top !== char) {\n                return false;\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplwpsopw8.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplwpsopw8.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738767
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets = string.match(/[\\\
    [\\]]/g);\n    if (brackets == null) {\n        return false;\n    }\n    let\
    \ nestedBrackets = brackets.filter(x => x.match(/[\\[\\]]/g));\n    return nestedBrackets.length\
    \ > 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6xshx5r4.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6xshx5r4.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738767
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            let open = stack.pop();\n            if (open\
    \ !== \"[\") {\n                return false;\n            }\n        }\n    }\n\
    \    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp560t8t1z.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp560t8t1z.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738767
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\" && stack.length > 0) {\n            stack.pop();\n        } else if\
    \ (string[i] === \"]\" && stack.length > 0) {\n            if (stack[stack.length\
    \ - 1] === \"[\")\n                stack.pop();\n            else\n          \
    \      return false;\n        } else if (string[i] === \"[\" && stack.length ===\
    \ 0) {\n            stack.push(\"[\");\n        } else if (string[i] === \"]\"\
    \ && stack.length === 0) {\n            if (stack[stack.length - 1] === \"[\"\
    )\n                stack.push(\"[\");\n            else\n                return\
    \ false;\n        } else {\n            return false;\n        }\n    }\n    if\
    \ (stack.length > 0)\n        return false;\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpisb2ellu.js:48:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpisb2ellu.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738767
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_brackets_stack: number[] = [];\n    let close_brackets_stack:\
    \ number[] = [];\n    let bracket_stack: number[] = [];\n    let bracket_stack_length:\
    \ number = 0;\n    let bracket_stack_pointer: number = 0;\n    let bracket_stack_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer: number = 0;\n    let bracket_stack_pointer_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer: number = 0;\n  \
    \  let bracket_stack_pointer_pointer_pointer_length: number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_length: number\
    \ = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_pointer_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_pointer_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_pointer_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_pointer_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_pointer_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length:\
    \ number = 0;\n    let bracket_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_length:\
    \ number = 0;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcsh36p7j.ts(47,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpcsh36p7j.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738767
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_stack: number[] = [];\n\tlet close_brackets_stack:\
    \ number[] = [];\n\tlet open_stack: number[] = [];\n\tlet close_stack: number[]\
    \ = [];\n\tlet open_brackets_stack_index: number[] = [];\n\tlet close_brackets_stack_index:\
    \ number[] = [];\n\tlet open_stack_index: number[] = [];\n\tlet close_stack_index:\
    \ number[] = [];\n\tlet open_brackets_stack_index2: number[] = [];\n\tlet close_brackets_stack_index2:\
    \ number[] = [];\n\tlet open_stack_index2: number[] = [];\n\tlet close_stack_index2:\
    \ number[] = [];\n\tlet open_brackets_stack_index3: number[] = [];\n\tlet close_brackets_stack_index3:\
    \ number[] = [];\n\tlet open_stack_index3: number[] = [];\n\tlet close_stack_index3:\
    \ number[] = [];\n\tlet open_brackets_stack_index4: number[] = [];\n\tlet close_brackets_stack_index4:\
    \ number[] = [];\n\tlet open_stack_index4: number[] = [];\n\tlet close_stack_index4:\
    \ number[] = [];\n\tlet open_brackets_stack_index5: number[] = [];\n\tlet close_brackets_stack_index5:\
    \ number[] = [];\n\tlet open_stack_index5: number[] = [];\n\tlet close_stack_index5:\
    \ number[] = [];\n\tlet open_brackets_stack_index6: number[] = [];\n\tlet close_brackets_stack_index6:\
    \ number[] = [];\n\tlet open_stack_index6: number[] = [];\n\tlet close_stack_index6:\
    \ number[] = [];\n\tlet open_brackets_stack_index7: number[] = [];\n\tlet close_brackets_stack_index7:\
    \ number[] = [];\n\tlet open_stack_index7: number[] = [];\n\tlet close_stack_index7:\
    \ number[] = [];\n\tlet open_brackets_stack_index8: number[] = [];\n\tlet close_brackets_stack_index8:\
    \ number[] = [];\n\tlet open_stack_index8: number[] = [];\n\tlet close_stack_index8:\
    \ number[] = [];\n\tlet open_brackets_stack_index9: number[] = [];\n\tlet close_brackets_stack_index9:\
    \ number[] = [];\n\tlet open_stack_index9: number[] = [];\n\t\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7j2ba54f.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738767
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_stack: string[] = [];\n\tlet close_brackets_stack:\
    \ string[] = [];\n\tlet open_parens: number[] = [];\n\tlet close_parens: number[]\
    \ = [];\n\tlet open_parens_stack: string[] = [];\n\tlet close_parens_stack: string[]\
    \ = [];\n\tlet open_brackets_stack_string: string = \"\";\n\tlet close_brackets_stack_string:\
    \ string = \"\";\n\tlet open_parens_stack_string: string = \"\";\n\tlet close_parens_stack_string:\
    \ string = \"\";\n\tlet open_brackets_stack_string_length = 0;\n\tlet close_brackets_stack_string_length\
    \ = 0;\n\tlet open_parens_stack_string_length = 0;\n\tlet close_parens_stack_string_length\
    \ = 0;\n\tlet open_brackets_stack_string_length_length = 0;\n\tlet close_brackets_stack_string_length_length\
    \ = 0;\n\tlet open_parens_stack_string_length_length = 0;\n\tlet close_parens_stack_string_length_length\
    \ = 0;\n\tlet open_brackets_stack_string_length_length_length = 0;\n\tlet close_brackets_stack_string_length_length_length\
    \ = 0;\n\tlet open_parens_stack_string_length_length_length = 0;\n\tlet close_parens_stack_string_length_length_length\
    \ = 0;\n\tlet open_brackets_stack_string_length_length_length_length = 0;\n\t\
    let close_brackets_stack_string_length_length_length_length = 0;\n\tlet open_parens_stack_string_length_length_length_length\
    \ = 0;\n\tlet close_parens_stack_string_length_length_length_length = 0;\n\tlet\
    \ open_brackets_stack_string_length_length_length_length_length = 0;\n\tlet close_brackets_stack_string_length_length_length_length_length\
    \ = 0;\n\tlet open_parens_stack_string_length_length_length_length_length = 0;\n\
    \tlet close_parens_stack_string_length_length_length_length_length = 0;\n\tlet\
    \ open_brackets_stack_string_length_length_length_length_length_length = 0;\n\t\
    let close_brackets_stack_string_length_length_length_length_length_length = 0;\n\
    \tlet open_parens_stack_string_length_length_length_length_length_length = 0;\n\
    \tlet close_parens_stack_string_length_length_length_length_length_length = 0;\n\
    \tlet open_brackets_stack_string_length_length_length_length_length_length_length\
    \ = 0;\n\tlet close_brackets_stack_string_length_length_length_length_length_length_length\
    \ = 0;\n\tlet open_parens_stack_string_length_length_length_length_length_length_length\
    \ = 0;\n\t\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc_jjc3z2.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738767
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet open_brackets: number[]\
    \ = [];\n\tlet close_brackets: number[] = [];\n\tlet open_brackets_stack: number[]\
    \ = [];\n\tlet close_brackets_stack: number[] = [];\n\tlet open_parens: number[]\
    \ = [];\n\tlet close_parens: number[] = [];\n\tlet open_parens_stack: number[]\
    \ = [];\n\tlet close_parens_stack: number[] = [];\n\tlet bracket_stack: number[]\
    \ = [];\n\tlet paren_stack: number[] = [];\n\tlet bracket_stack_string: string\
    \ = \"\";\n\tlet paren_stack_string: string = \"\";\n\tlet bracket_stack_index:\
    \ number = 0;\n\tlet paren_stack_index: number = 0;\n\tlet bracket_stack_string_index:\
    \ number = 0;\n\tlet paren_stack_string_index: number = 0;\n\tlet bracket_stack_length:\
    \ number = 0;\n\tlet paren_stack_length: number = 0;\n\tlet bracket_stack_last_index:\
    \ number = 0;\n\tlet paren_stack_last_index: number = 0;\n\tlet bracket_stack_last_string_index:\
    \ number = 0;\n\tlet paren_stack_last_string_index: number = 0;\n\tlet bracket_stack_last_length:\
    \ number = 0;\n\tlet paren_stack_last_length: number = 0;\n\tlet bracket_stack_last_last_index:\
    \ number = 0;\n\tlet paren_stack_last_last_index: number = 0;\n\tlet bracket_stack_last_last_string_index:\
    \ number = 0;\n\tlet paren_stack_last_last_string_index: number = 0;\n\tlet bracket_stack_last_last_length:\
    \ number = 0;\n\tlet paren_stack_last_last_length: number = 0;\n\tlet bracket_stack_last_last_last_index:\
    \ number = 0;\n\tlet paren_stack_last_last_last_index: number = 0;\n\tlet bracket_stack_last_last_last_string_index:\
    \ number = 0;\n\tlet paren_stack_last_last_last_string_index: number = 0;\n\t\
    let bracket_stack_last_last_last_length: number = 0;\n\tlet paren_stack_last_last_last_length:\
    \ number = 0;\n\tlet bracket_stack_last_last_last_last_index: number = 0;\n\t\
    let paren_stack_last_last_last_last_index: number = 0;\n\tlet bracket_stack_last_last_last_last_string_index:\
    \ number = 0;\n\tlet paren_stack_last_last_last_last_string_index: number = 0;\n\
    \tlet bracket_stack_last_last_last_last_length: number = 0;\n\tlet paren_stack_last_last_last_last_length:\
    \ number = 0;\n\tlet bracket_stack_last_\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphehxr6dl.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738767
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet open_brackets: number[]\
    \ = [];\n\tlet close_brackets: number[] = [];\n\tlet open_brackets_stack: number[]\
    \ = [];\n\tlet close_brackets_stack: number[] = [];\n\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet char = string[i];\n\t\tif (char === '[') {\n\t\t\topen_brackets_stack.push(open_brackets.length);\n\
    \t\t\topen_brackets.push(0);\n\t\t} else if (char === ']') {\n\t\t\tclose_brackets_stack.push(close_brackets.length);\n\
    \t\t\tclose_brackets.push(0);\n\t\t} else if (char === '[') {\n\t\t\topen_brackets.push(0);\n\
    \t\t} else if (char === ']') {\n\t\t\tclose_brackets.push(0);\n\t\t}\n\t}\n\n\t\
    while (open_brackets_stack.length > 0) {\n\t\tlet open_brackets_index = open_brackets_stack.pop();\n\
    \t\tlet close_brackets_index = close_brackets_stack.pop();\n\n\t\tif (open_brackets_index\
    \ === close_brackets_index) {\n\t\t\topen_brackets[open_brackets_index] = open_brackets[open_brackets_index]\
    \ + 1;\n\t\t} else {\n\t\t\topen_brackets[open_brackets_index] = open_brackets[open_brackets_index]\
    \ + 1;\n\t\t\tclose_brackets[close_brackets_index] = close_brackets[close_brackets_index]\
    \ + 1;\n\t\t}\n\t}\n\n\tfor (let i = 0; i < open_brackets.length; i++) {\n\t\t\
    if (open_brackets[i] === close_brackets[i]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp27_e46_h.js:61:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp27_e46_h.js:74:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738767
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_stack: number[] = [];\n\tlet close_brackets_stack:\
    \ number[] = [];\n\tlet open_parens: number[] = [];\n\tlet close_parens: number[]\
    \ = [];\n\tlet open_parens_stack: number[] = [];\n\tlet close_parens_stack: number[]\
    \ = [];\n\tlet open_brackets_stack_index: number[] = [];\n\tlet close_brackets_stack_index:\
    \ number[] = [];\n\tlet open_parens_stack_index: number[] = [];\n\tlet close_parens_stack_index:\
    \ number[] = [];\n\tlet open_brackets_stack_index2: number[] = [];\n\tlet close_brackets_stack_index2:\
    \ number[] = [];\n\tlet open_parens_stack_index2: number[] = [];\n\tlet close_parens_stack_index2:\
    \ number[] = [];\n\tlet open_brackets_stack_index3: number[] = [];\n\tlet close_brackets_stack_index3:\
    \ number[] = [];\n\tlet open_parens_stack_index3: number[] = [];\n\tlet close_parens_stack_index3:\
    \ number[] = [];\n\tlet open_brackets_stack_index4: number[] = [];\n\tlet close_brackets_stack_index4:\
    \ number[] = [];\n\tlet open_parens_stack_index4: number[] = [];\n\tlet close_parens_stack_index4:\
    \ number[] = [];\n\tlet open_brackets_stack_index5: number[] = [];\n\tlet close_brackets_stack_index5:\
    \ number[] = [];\n\tlet open_parens_stack_index5: number[] = [];\n\tlet close_parens_stack_index5:\
    \ number[] = [];\n\tlet open_brackets_stack_index6: number[] = [];\n\tlet close_brackets_stack_index6:\
    \ number[] = [];\n\tlet open_parens_stack_index6: number[] = [];\n\tlet close_parens_stack_index6:\
    \ number[] = [];\n\tlet open_brackets_stack_index7: number[] = [];\n\tlet close_brackets_stack_index7:\
    \ number[] = [];\n\tlet open_parens_stack_index7: number[] = [];\n\tlet close_parens_stack_index7:\
    \ number[] = [];\n\tlet open_brackets_stack_index8: number[] = [];\n\tlet close_brackets_stack_index8:\
    \ number[] = [];\n\tlet open_parens_stack_index8: number[] = [];\n\tlet \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3qh6tw2v.ts(58,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp3qh6tw2v.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738767
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length: number\
    \ = 0;\n\tlet open_brackets_depth: number = 0;\n\tlet close_brackets_depth: number\
    \ = 0;\n\tlet open_brackets_index: number = 0;\n\tlet close_brackets_index: number\
    \ = 0;\n\tlet open_brackets_depth_index: number = 0;\n\tlet close_brackets_depth_index:\
    \ number = 0;\n\tlet open_brackets_depth_index2: number = 0;\n\tlet close_brackets_depth_index2:\
    \ number = 0;\n\tlet open_brackets_depth_index3: number = 0;\n\tlet close_brackets_depth_index3:\
    \ number = 0;\n\tlet open_brackets_depth_index4: number = 0;\n\tlet close_brackets_depth_index4:\
    \ number = 0;\n\tlet open_brackets_depth_index5: number = 0;\n\tlet close_brackets_depth_index5:\
    \ number = 0;\n\tlet open_brackets_depth_index6: number = 0;\n\tlet close_brackets_depth_index6:\
    \ number = 0;\n\tlet open_brackets_depth_index7: number = 0;\n\tlet close_brackets_depth_index7:\
    \ number = 0;\n\tlet open_brackets_depth_index8: number = 0;\n\tlet close_brackets_depth_index8:\
    \ number = 0;\n\tlet open_brackets_depth_index9: number = 0;\n\tlet close_brackets_depth_index9:\
    \ number = 0;\n\tlet open_brackets_depth_index10: number = 0;\n\tlet close_brackets_depth_index10:\
    \ number = 0;\n\tlet open_brackets_depth_index11: number = 0;\n\tlet close_brackets_depth_index11:\
    \ number = 0;\n\tlet open_brackets_depth_index12: number = 0;\n\tlet close_brackets_depth_index12:\
    \ number = 0;\n\tlet open_brackets_depth_index13: number = 0;\n\tlet close_brackets_depth_index13:\
    \ number = 0;\n\tlet open_brackets_depth_index14: number = 0;\n\tlet close_brackets_depth_index14:\
    \ number = 0;\n\tlet open_brackets_depth_index15: number = 0;\n\tlet close_brackets_depth_index15:\
    \ number = 0;\n\tlet open\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnbso038m.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738767
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdvh6clfc.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdvh6clfc.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738767
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            let open = stack.pop();\n            if (open\
    \ !== '[') {\n                return false;\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9vwbs9e_.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vwbs9e_.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738767
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let closed_brackets: number[]\
    \ = [];\n    let open_brackets_length: number = 0;\n    let closed_brackets_length:\
    \ number = 0;\n    let open_chars: number[] = [];\n    let close_chars: number[]\
    \ = [];\n    let open_chars_length: number = 0;\n    let close_chars_length: number\
    \ = 0;\n    let open_char: string = \"\";\n    let close_char: string = \"\";\n\
    \    let open_char_length: number = 0;\n    let close_char_length: number = 0;\n\
    \    let open_char_found: boolean = false;\n    let close_char_found: boolean\
    \ = false;\n    let open_char_found2: boolean = false;\n    let close_char_found2:\
    \ boolean = false;\n    let open_char_found3: boolean = false;\n    let close_char_found3:\
    \ boolean = false;\n    let open_char_found4: boolean = false;\n    let close_char_found4:\
    \ boolean = false;\n    let open_char_found5: boolean = false;\n    let close_char_found5:\
    \ boolean = false;\n    let open_char_found6: boolean = false;\n    let close_char_found6:\
    \ boolean = false;\n    let open_char_found7: boolean = false;\n    let close_char_found7:\
    \ boolean = false;\n    let open_char_found8: boolean = false;\n    let close_char_found8:\
    \ boolean = false;\n    let open_char_found9: boolean = false;\n    let close_char_found9:\
    \ boolean = false;\n    let open_char_found10: boolean = false;\n    let close_char_found10:\
    \ boolean = false;\n    let open_char_found11: boolean = false;\n    let close_char_found11:\
    \ boolean = false;\n    let open_char_found12: boolean = false;\n    let close_char_found12:\
    \ boolean = false;\n    let open_char_found13: boolean = false;\n    let close_char_found13:\
    \ boolean = false;\n    let open_char_found14: boolean = false;\n    let close_char_found14:\
    \ boolean = false;\n    let open_char_found15: boolean = false;\n    let close_char_found15:\
    \ boolean = false;\n    let open_char_found16: boolean = false;\n    let close_char_found16:\
    \ boolean = false;\n    let open_char_found17: boolean = false;\n    let close_char_found17:\
    \ boolean = false;\n    let open_char_found18: boolean = false;\n    let close_char_found18:\
    \ boolean = false;\n    let open_char_found19: boolean = false;\n    let close_char_found19:\
    \ boolean = false;\n    let open_char_found20: boolean = false;\n    let close_char_found20:\
    \ boolean = false;\n    let open_char_found21: boolean = false;\n    let close_char_found21:\
    \ boolean = false;\n    let open_char_found22: boolean = false;\n    let close_char_found22:\
    \ boolean = false;\n    let open_char_found23: boolean = false;\n    let close_char_found23:\
    \ boolean = false;\n    let open_char_found24: boolean = false;\n    let close_char_found24:\
    \ boolean = false;\n    let open_char_found25: boolean = false;\n    let close_char_found25:\
    \ boolean = false;\n    let open_char_found26: boolean = false;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpipvp1ivu.ts(103,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738767
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\" || string[i] === \"(\") {\n            stack.push(string[i]);\n  \
    \      } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpq38mbro7.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq38mbro7.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738767
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    const stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            const openBracket = stack.pop();\n      \
    \      if (openBracket !== '[') {\n                return false;\n           \
    \ }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n \
    \   }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwn88955e.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwn88955e.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738767
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === \"[\") {\n            open_brackets.push(i);\n        }\
    \ else if (char === \"]\") {\n            close_brackets.push(i);\n        } else\
    \ if (char === \"]\" && open_brackets.length > 0 && close_brackets.length > 0)\
    \ {\n            brackets.push(i);\n        }\n    }\n    if (brackets.length\
    \ === 0) {\n        return false;\n    }\n    for (let i = 0; i < open_brackets.length;\
    \ i++) {\n        let open_bracket = open_brackets[i];\n        let close_bracket\
    \ = close_brackets[i];\n        if (open_bracket === close_bracket) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgsg0e2m3.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgsg0e2m3.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738768
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            let openBracket = stack.pop();\n        \
    \    if (openBracket !== '[') {\n                return false;\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb6_h4b2w.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb6_h4b2w.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738764
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: string[]\
    \ = string.split(\"\");\n    let stack: string[] = [];\n    for (let i = 0; i\
    \ < brackets.length; i++) {\n        if (brackets[i] == \"[\") {\n           \
    \ stack.push(brackets[i]);\n        } else if (brackets[i] == \"]\") {\n     \
    \       if (stack.length == 0) {\n                return false;\n            }\n\
    \            stack.pop();\n        }\n    }\n    if (stack.length != 0) {\n  \
    \      return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb5h8sqt7.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb5h8sqt7.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738768
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_brackets_stack: number[] = [];\n    let close_brackets_stack:\
    \ number[] = [];\n    let open_parens: number[] = [];\n    let close_parens: number[]\
    \ = [];\n    let open_parens_stack: number[] = [];\n    let close_parens_stack:\
    \ number[] = [];\n    let open_brackets_stack_index: number[] = [];\n    let close_brackets_stack_index:\
    \ number[] = [];\n    let open_parens_stack_index: number[] = [];\n    let close_parens_stack_index:\
    \ number[] = [];\n    let open_brackets_stack_index2: number[] = [];\n    let\
    \ close_brackets_stack_index2: number[] = [];\n    let open_parens_stack_index2:\
    \ number[] = [];\n    let close_parens_stack_index2: number[] = [];\n    let open_brackets_stack_index3:\
    \ number[] = [];\n    let close_brackets_stack_index3: number[] = [];\n    let\
    \ open_parens_stack_index3: number[] = [];\n    let close_parens_stack_index3:\
    \ number[] = [];\n    let open_brackets_stack_index4: number[] = [];\n    let\
    \ close_brackets_stack_index4: number[] = [];\n    let open_parens_stack_index4:\
    \ number[] = [];\n    let close_parens_stack_index4: number[] = [];\n    let open_brackets_stack_index5:\
    \ number[] = [];\n    let close_brackets_stack_index5: number[] = [];\n    let\
    \ open_parens_stack_index5: number[] = [];\n    let close_parens_stack_index5:\
    \ number[] = [];\n    let open_brackets_stack_index6: number[] = [];\n    let\
    \ close_brackets_stack_index6: number[] = [];\n    let open_parens_stack_index6:\
    \ number[] = [];\n    let close_parens_stack_index6: number[] = [];\n    let open_brackets_stack_index7:\
    \ number[] = [];\n    let close_brackets_stack_index7: number[] = [];\n    let\
    \ open_parens_stack_index7: number[] = [];\n    let close_parens_stack_index7:\
    \ number[] = [];\n    let open_brackets_stack_index8: number[] = [];\n    let\
    \ close_brackets_stack_index8: number[] = [];\n    let open_parens_stack_index8:\
    \ number[] = [];\n    let close_parens_stack_index8: number[] = [];\n    let open_brackets_stack_index9:\
    \ number[] = [];\n    let close_brackets_stack_index9: number[] = [];\n    let\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwy612_i_.ts(61,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpwy612_i_.ts(83,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738769
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets = string.match(/[\\\
    [\\]]/g);\n\treturn brackets && brackets.length >= 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpv56z4gw8.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv56z4gw8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    // TODO: Write a function\
    \ that takes a string as input which contains only square brackets.\n    // The\
    \ function should return true if and only if there is a valid subsequence of brackets\
    \ \n    // where at least one bracket in the subsequence is nested.\n    // >>>\
    \ is_nested(\"[[]]\")\n    // true\n    // >>> is_nested(\"[]]]]]]][[[[[]\")\n\
    \    // false\n    // >>> is_nested(\"[][]\")\n    // false\n    // >>> is_nested(\"\
    []\")\n    // false\n    // >>> is_nested(\"[[][]]\")\n    // true\n    // >>>\
    \ is_nested(\"[[]][[\")\n    // true\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjxf1azfb.ts(16,37): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets = string.match(/\\\
    [.*?\\]/g);\n    if (brackets == null) {\n        return false;\n    }\n    let\
    \ nested = false;\n    for (let i = 0; i < brackets.length; i++) {\n        let\
    \ bracket = brackets[i];\n        let open = bracket.match(/\\[/);\n        let\
    \ close = bracket.match(/\\]/);\n        if (open != null && close != null) {\n\
    \            if (open[0].length == close[0].length) {\n                nested\
    \ = true;\n            } else {\n                return false;\n            }\n\
    \        }\n    }\n    return nested;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpolmcu6z3.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpolmcu6z3.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets = string.match(/\\\
    [.*?\\]/g);\n\tlet nested = false;\n\tif (brackets) {\n\t\tbrackets.forEach(bracket\
    \ => {\n\t\t\tlet brackets = bracket.match(/\\[.*?\\]/g);\n\t\t\tif (brackets)\
    \ {\n\t\t\t\tnested = true;\n\t\t\t}\n\t\t});\n\t}\n\treturn nested;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdsgjonw_.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdsgjonw_.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_parens: number[] = [];\n\tlet close_parens: number[] = [];\n\
    \tlet open_brackets_stack: number[] = [];\n\tlet close_brackets_stack: number[]\
    \ = [];\n\tlet open_parens_stack: number[] = [];\n\tlet close_parens_stack: number[]\
    \ = [];\n\tlet open_brackets_stack_index: number[] = [];\n\tlet close_brackets_stack_index:\
    \ number[] = [];\n\tlet open_parens_stack_index: number[] = [];\n\tlet close_parens_stack_index:\
    \ number[] = [];\n\tlet open_brackets_stack_index2: number[] = [];\n\tlet close_brackets_stack_index2:\
    \ number[] = [];\n\tlet open_parens_stack_index2: number[] = [];\n\tlet close_parens_stack_index2:\
    \ number[] = [];\n\tlet open_brackets_stack_index3: number[] = [];\n\tlet close_brackets_stack_index3:\
    \ number[] = [];\n\tlet open_parens_stack_index3: number[] = [];\n\tlet close_parens_stack_index3:\
    \ number[] = [];\n\tlet open_brackets_stack_index4: number[] = [];\n\tlet close_brackets_stack_index4:\
    \ number[] = [];\n\tlet open_parens_stack_index4: number[] = [];\n\tlet close_parens_stack_index4:\
    \ number[] = [];\n\tlet open_brackets_stack_index5: number[] = [];\n\tlet close_brackets_stack_index5:\
    \ number[] = [];\n\tlet open_parens_stack_index5: number[] = [];\n\tlet close_parens_stack_index5:\
    \ number[] = [];\n\tlet open_brackets_stack_index6: number[] = [];\n\tlet close_brackets_stack_index6:\
    \ number[] = [];\n\tlet open_parens_stack_index6: number[] = [];\n\tlet close_parens_stack_index6:\
    \ number[] = [];\n\tlet open_brackets_stack_index7: number[] = [];\n\tlet close_brackets_stack_index7:\
    \ number[] = [];\n\tlet open_parens_stack_index7: number[] = [];\n\tlet close_parens_stack_index7:\
    \ number[] = [];\n\tlet open_brackets_stack_index8: number[] = [];\n\tlet close_brackets_stack_index8:\
    \ number[] = [];\n\tlet open_parens_stack_index8: number[] = [];\n\t\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqf3__in9.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738769
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let bracketCount =\
    \ 0;\n    let openBracketCount = 0;\n    let closeBracketCount = 0;\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] == \"[\") {\n      \
    \      bracketCount++;\n        }\n        if (string[i] == \"]\") {\n       \
    \     bracketCount--;\n        }\n        if (string[i] == \"(\") {\n        \
    \    openBracketCount++;\n        }\n        if (string[i] == \")\") {\n     \
    \       openBracketCount--;\n        }\n        if (bracketCount === 0 && openBracketCount\
    \ === 0 && closeBracketCount === 0) {\n            return true;\n        }\n \
    \   }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmjskreih.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmjskreih.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738769
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ == \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ == \"]\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        } else {\n            if (stack.length\
    \ == 0) {\n                return false;\n            }\n        }\n    }\n  \
    \  if (stack.length != 0) {\n        return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3gj50u21.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3gj50u21.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738770
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_parens: number[] = [];\n\tlet close_parens: number[] = [];\n\
    \tlet open_brackets_stack: number[] = [];\n\tlet close_brackets_stack: number[]\
    \ = [];\n\tlet open_parens_stack: number[] = [];\n\tlet close_parens_stack: number[]\
    \ = [];\n\tlet open_brackets_stack_index: number[] = [];\n\tlet close_brackets_stack_index:\
    \ number[] = [];\n\tlet open_parens_stack_index: number[] = [];\n\tlet close_parens_stack_index:\
    \ number[] = [];\n\tlet open_brackets_stack_index2: number[] = [];\n\tlet close_brackets_stack_index2:\
    \ number[] = [];\n\tlet open_parens_stack_index2: number[] = [];\n\tlet close_parens_stack_index2:\
    \ number[] = [];\n\tlet open_brackets_stack_index3: number[] = [];\n\tlet close_brackets_stack_index3:\
    \ number[] = [];\n\tlet open_parens_stack_index3: number[] = [];\n\tlet close_parens_stack_index3:\
    \ number[] = [];\n\tlet open_brackets_stack_index4: number[] = [];\n\tlet close_brackets_stack_index4:\
    \ number[] = [];\n\tlet open_parens_stack_index4: number[] = [];\n\tlet close_parens_stack_index4:\
    \ number[] = [];\n\tlet open_brackets_stack_index5: number[] = [];\n\tlet close_brackets_stack_index5:\
    \ number[] = [];\n\tlet open_parens_stack_index5: number[] = [];\n\tlet close_parens_stack_index5:\
    \ number[] = [];\n\tlet open_brackets_stack_index6: number[] = [];\n\tlet close_brackets_stack_index6:\
    \ number[] = [];\n\tlet open_parens_stack_index6: number[] = [];\n\tlet close_parens_stack_index6:\
    \ number[] = [];\n\tlet open_brackets_stack_index7: number[] = [];\n\tlet close_brackets_stack_index7:\
    \ number[] = [];\n\tlet open_parens_stack_index7: number[] = [];\n\tlet close_parens_stack_index7:\
    \ number[] = [];\n\tlet open_brackets_stack_index8: number[] = [];\n\tlet close_brackets_stack_index8:\
    \ number[] = [];\n\tlet open_parens_stack_index8: number[] = [];\n\tlet \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuxzv_8fk.ts(58,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpuxzv_8fk.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738769
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    const stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length !== 1) {\n                return\
    \ false;\n            }\n            stack.pop();\n        } else if (char ===\
    \ ']' && stack.length === 0) {\n            return false;\n        }\n    }\n\
    \    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8ypoxr4_.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8ypoxr4_.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738770
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let open_brackets:\
    \ number[] = [];\n    let closed_brackets: number[] = [];\n    let open_brackets_stack:\
    \ number[] = [];\n    let closed_brackets_stack: number[] = [];\n    let open_brackets_length:\
    \ number = 0;\n    let closed_brackets_length: number = 0;\n    let open_brackets_stack_index:\
    \ number = 0;\n    let closed_brackets_stack_index: number = 0;\n    let open_brackets_stack_string:\
    \ string = \"\";\n    let closed_brackets_stack_string: string = \"\";\n    let\
    \ open_brackets_string: string = \"\";\n    let closed_brackets_string: string\
    \ = \"\";\n    let open_brackets_length_string: string = \"\";\n    let closed_brackets_length_string:\
    \ string = \"\";\n    let open_brackets_stack_string_index: number = 0;\n    let\
    \ closed_brackets_stack_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string_index: number = 0;\n    let open_brackets_string_index:\
    \ number = 0;\n    let closed_brackets_string\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp64n4kr6d.ts(85,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738769
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    if (string.length\
    \ < 2) return false;\n    if (string[0] != \"[\" || string[string.length - 1]\
    \ != \"]\") return false;\n    for (let i = 1; i < string.length - 1; i++) {\n\
    \        if (string[i] != \"[\" || string[string.length - 1] != \"]\") return\
    \ false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm5s0y_no.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm5s0y_no.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738770
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_size: number[] = [];\n\tlet close_brackets_size: number[]\
    \ = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6eqp3u7b.ts(61,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp6eqp3u7b.ts(83,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738769
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdvh6clfc.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdvh6clfc.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738767
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number = 0;\n\tlet close_brackets: number = 0;\n\
    \tlet open_brackets_stack: string[] = [];\n\tlet close_brackets_stack: string[]\
    \ = [];\n\tlet open_brackets_stack_string: string = \"\";\n\tlet close_brackets_stack_string:\
    \ string = \"\";\n\tlet open_brackets_stack_string_index: number = 0;\n\tlet close_brackets_stack_string_index:\
    \ number = 0;\n\tlet open_brackets_stack_string_index2: number = 0;\n\tlet close_brackets_stack_string_index2:\
    \ number = 0;\n\tlet open_brackets_stack_string_index3: number = 0;\n\tlet close_brackets_stack_string_index3:\
    \ number = 0;\n\tlet open_brackets_stack_string_index4: number = 0;\n\tlet close_brackets_stack_string_index4:\
    \ number = 0;\n\tlet open_brackets_stack_string_index5: number = 0;\n\tlet close_brackets_stack_string_index5:\
    \ number = 0;\n\tlet open_brackets_stack_string_index6: number = 0;\n\tlet close_brackets_stack_string_index6:\
    \ number = 0;\n\tlet open_brackets_stack_string_index7: number = 0;\n\tlet close_brackets_stack_string_index7:\
    \ number = 0;\n\tlet open_brackets_stack_string_index8: number = 0;\n\tlet close_brackets_stack_string_index8:\
    \ number = 0;\n\tlet open_brackets_stack_string_index9: number = 0;\n\tlet close_brackets_stack_string_index9:\
    \ number = 0;\n\tlet open_brackets_stack_string_index10: number = 0;\n\tlet close_brackets_stack_string_index10:\
    \ number = 0;\n\tlet open_brackets_stack_string_index11: number = 0;\n\tlet close_brackets_stack_string_index11:\
    \ number = 0;\n\tlet open_brackets_stack_string_index12: number = 0;\n\tlet close_brackets_stack_string_index12:\
    \ number = 0;\n\tlet open_brackets_stack_string_index13: number = 0;\n\tlet close_brackets_stack_string_index13:\
    \ number = 0;\n\tlet open_brackets_stack_string_index14: number = 0;\n\tlet close_brackets_stack_string_index14:\
    \ number = 0;\n\tlet open_brackets_stack_string_index15: number = 0;\n\tlet close_brackets_stack_string_index15:\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpanmuxnux.ts(54,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpanmuxnux.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738769
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let closed_brackets: number[]\
    \ = [];\n    let open_brackets_size: number[] = [];\n    let closed_brackets_size:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_brackets_position: number[] = [];\n    let closed_brackets_position:\
    \ number[] = [];\n    let open_b\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqdz7k1b7.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738770
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet closed_brackets: number[]\
    \ = [];\n\tlet open_brackets_length: number[] = [];\n\tlet closed_brackets_length:\
    \ number[] = [];\n\tlet open_length: number[] = [];\n\tlet close_length: number[]\
    \ = [];\n\tlet open_length_index: number[] = [];\n\tlet close_length_index: number[]\
    \ = [];\n\tlet open_length_index2: number[] = [];\n\tlet close_length_index2:\
    \ number[] = [];\n\tlet open_length_index3: number[] = [];\n\tlet close_length_index3:\
    \ number[] = [];\n\tlet open_length_index4: number[] = [];\n\tlet close_length_index4:\
    \ number[] = [];\n\tlet open_length_index5: number[] = [];\n\tlet close_length_index5:\
    \ number[] = [];\n\tlet open_length_index6: number[] = [];\n\tlet close_length_index6:\
    \ number[] = [];\n\tlet open_length_index7: number[] = [];\n\tlet close_length_index7:\
    \ number[] = [];\n\tlet open_length_index8: number[] = [];\n\tlet close_length_index8:\
    \ number[] = [];\n\tlet open_length_index9: number[] = [];\n\tlet close_length_index9:\
    \ number[] = [];\n\tlet open_length_index10: number[] = [];\n\tlet close_length_index10:\
    \ number[] = [];\n\tlet open_length_index11: number[] = [];\n\tlet close_length_index11:\
    \ number[] = [];\n\tlet open_length_index12: number[] = [];\n\tlet close_length_index12:\
    \ number[] = [];\n\tlet open_length_index13: number[] = [];\n\tlet close_length_index13:\
    \ number[] = [];\n\tlet open_length_index14: number[] = [];\n\tlet close_length_index14:\
    \ number[] = [];\n\tlet open_length_index15: number[] = [];\n\tlet close_length_index15:\
    \ number[] = [];\n\tlet open_length_index16: number[] = [];\n\tlet close_length_index16:\
    \ number[] = [];\n\tlet open_length_index17: number[] = [];\n\tlet close_length_index17:\
    \ number[] = [];\n\tlet open_length_index18: number[] = [];\n\tlet close_length_index18:\
    \ number[] = [];\n\tlet open_length_index19: number[] = [];\n\tlet close_length_index19:\
    \ number[] = [];\n\tlet open_length_index20: number[] = [];\n\tlet close_length_index20:\
    \ number[] = [];\n\tlet open_length_index21: number[] = [];\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_huxmjrn.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738770
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet open_brackets: number\
    \ = 0;\n\tlet closed_brackets: number = 0;\n\tlet open_brackets_stack: string[]\
    \ = [];\n\tlet closed_brackets_stack: string[] = [];\n\tlet open_brackets_stack_string:\
    \ string = \"\";\n\tlet closed_brackets_stack_string: string = \"\";\n\tlet open_brackets_stack_string_index:\
    \ number = 0;\n\tlet closed_brackets_stack_string_index: number = 0;\n\tlet open_brackets_stack_string_index2:\
    \ number = 0;\n\tlet closed_brackets_stack_string_index2: number = 0;\n\tlet open_brackets_stack_string_index3:\
    \ number = 0;\n\tlet closed_brackets_stack_string_index3: number = 0;\n\tlet open_brackets_stack_string_index4:\
    \ number = 0;\n\tlet closed_brackets_stack_string_index4: number = 0;\n\tlet open_brackets_stack_string_index5:\
    \ number = 0;\n\tlet closed_brackets_stack_string_index5: number = 0;\n\tlet open_brackets_stack_string_index6:\
    \ number = 0;\n\tlet closed_brackets_stack_string_index6: number = 0;\n\tlet open_brackets_stack_string_index7:\
    \ number = 0;\n\tlet closed_brackets_stack_string_index7: number = 0;\n\tlet open_brackets_stack_string_index8:\
    \ number = 0;\n\tlet closed_brackets_stack_string_index8: number = 0;\n\tlet open_brackets_stack_string_index9:\
    \ number = 0;\n\tlet closed_brackets_stack_string_index9: number = 0;\n\tlet open_brackets_stack_string_index10:\
    \ number = 0;\n\tlet closed_brackets_stack_string_index10: number = 0;\n\tlet\
    \ open_brackets_stack_string_index11: number = 0;\n\tlet closed_brackets_stack_string_index11:\
    \ number = 0;\n\tlet open_brackets_stack_string_index12: number = 0;\n\tlet closed_brackets_stack_string_index12:\
    \ number = 0;\n\tlet open_brackets_stack_string_index13: number = 0;\n\tlet closed_brackets_stack_string_index13:\
    \ number = 0;\n\tlet open_brackets_stack_string_index14: number = 0;\n\tlet closed_brackets_stack_string_index14:\
    \ number = 0;\n\tlet open_brackets_stack_string_index15: number = 0;\n\tlet closed_brackets_stack_string_index15:\
    \ number = 0;\n\tlet open_brackets_stack_string_index16: number = 0;\n\tlet closed_brackets_stack\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpctsvpr5l.ts(77,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738770
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_size: number[] = [];\n\tlet close_brackets_size: number[]\
    \ = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet close_brackets_position:\
    \ number[] = [];\n\tlet open\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcgqtdf4x.ts(83,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738770
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets = string.match(/\\\
    [.*?\\]/g);\n\tlet nested = false;\n\tfor (let i = 0; i < brackets.length; i++)\
    \ {\n\t\tlet bracket = brackets[i];\n\t\tlet open = bracket.match(/\\[/);\n\t\t\
    let close = bracket.match(/\\]/);\n\t\tif (open && close) {\n\t\t\tnested = true;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn nested;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpalxlm6ey.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpalxlm6ey.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738770
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_parens: number[] = [];\n    let close_parens: number[] =\
    \ [];\n    let open_parens_stack: number[] = [];\n    let close_parens_stack:\
    \ number[] = [];\n    let open_parens_stack_index: number = 0;\n    let close_parens_stack_index:\
    \ number = 0;\n    let open_parens_stack_string: string = \"\";\n    let close_parens_stack_string:\
    \ string = \"\";\n    let open_parens_string: string = \"\";\n    let close_parens_string:\
    \ string = \"\";\n    let open_parens_string_index: number = 0;\n    let close_parens_string_index:\
    \ number = 0;\n    let open_parens_string_index2: number = 0;\n    let close_parens_string_index2:\
    \ number = 0;\n    let open_parens_string_index3: number = 0;\n    let close_parens_string_index3:\
    \ number = 0;\n    let open_parens_string_index4: number = 0;\n    let close_parens_string_index4:\
    \ number = 0;\n    let open_parens_string_index5: number = 0;\n    let close_parens_string_index5:\
    \ number = 0;\n    let open_parens_string_index6: number = 0;\n    let close_parens_string_index6:\
    \ number = 0;\n    let open_parens_string_index7: number = 0;\n    let close_parens_string_index7:\
    \ number = 0;\n    let open_parens_string_index8: number = 0;\n    let close_parens_string_index8:\
    \ number = 0;\n    let open_parens_string_index9: number = 0;\n    let close_parens_string_index9:\
    \ number = 0;\n    let open_parens_string_index10: number = 0;\n    let close_parens_string_index10:\
    \ number = 0;\n    let open_parens_string_index11: number = 0;\n    let close_parens_string_index11:\
    \ number = 0;\n    let open_parens_string_index12: number = 0;\n    let close_parens_string_index12:\
    \ number = 0;\n    let open_parens_string_index13: number = 0;\n    let close_parens_string_index13:\
    \ number = 0;\n    let open_parens_string_index14: number = 0;\n    let close_parens_string_index14:\
    \ number = 0;\n    let open_parens_string_index15: number = 0;\n    let close_parens_string_index15:\
    \ number = 0;\n    let open_parens_string_index16: number = 0;\n    let close_parens_string_index16:\
    \ number = 0;\n    let open_parens_string_index17: number = 0;\n    let close_parens_string_index17:\
    \ number = 0;\n    let open_parens_string_index18: number = 0;\n    let close_parens_string_index18:\
    \ number = 0;\n    let open_parens_string_index19: number\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe89s86ud.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738770
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_size: number = 0;\n\tlet close_brackets_size: number\
    \ = 0;\n\tlet open_brackets_position: number = 0;\n\tlet close_brackets_position:\
    \ number = 0;\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length:\
    \ number = 0;\n\tlet open_brackets_position: number = 0;\n\tlet close_brackets_position:\
    \ number = 0;\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length:\
    \ number = 0;\n\tlet open_brackets_position: number = 0;\n\tlet close_brackets_position:\
    \ number = 0;\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length:\
    \ number = 0;\n\tlet open_brackets_position: number = 0;\n\tlet close_brackets_position:\
    \ number = 0;\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length:\
    \ number = 0;\n\tlet open_brackets_position: number = 0;\n\tlet close_brackets_position:\
    \ number = 0;\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length:\
    \ number = 0;\n\tlet open_brackets_position: number = 0;\n\tlet close_brackets_position:\
    \ number = 0;\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length:\
    \ number = 0;\n\tlet open_brackets_position: number = 0;\n\tlet close_brackets_position:\
    \ number = 0;\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length:\
    \ number = 0;\n\tlet open_brackets_position: number = 0;\n\tlet close_brackets_position:\
    \ number = 0;\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length:\
    \ number = 0;\n\tlet open_brackets_position: number = 0;\n\tlet close_brackets_position:\
    \ number = 0;\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length:\
    \ number = 0;\n\tlet open_brackets_position: number = 0;\n\tlet close_brackets_position:\
    \ number = 0;\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length:\
    \ number = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmagknpyy.ts(85,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738770
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet closed_brackets: number[]\
    \ = [];\n\tlet open_brackets_length: number = 0;\n\tlet closed_brackets_length:\
    \ number = 0;\n\tlet bracket_count: number;\n\tlet bracket_open: boolean;\n\t\
    let bracket_close: boolean;\n\tlet bracket_open_index: number;\n\tlet bracket_close_index:\
    \ number;\n\tlet bracket_open_index2: number;\n\tlet bracket_close_index2: number;\n\
    \tlet bracket_open_index3: number;\n\tlet bracket_close_index3: number;\n\tlet\
    \ bracket_open_index4: number;\n\tlet bracket_close_index4: number;\n\tlet bracket_open_index5:\
    \ number;\n\tlet bracket_close_index5: number;\n\tlet bracket_open_index6: number;\n\
    \tlet bracket_close_index6: number;\n\tlet bracket_open_index7: number;\n\tlet\
    \ bracket_close_index7: number;\n\tlet bracket_open_index8: number;\n\tlet bracket_close_index8:\
    \ number;\n\tlet bracket_open_index9: number;\n\tlet bracket_close_index9: number;\n\
    \tlet bracket_open_index10: number;\n\tlet bracket_close_index10: number;\n\t\
    let bracket_open_index11: number;\n\tlet bracket_close_index11: number;\n\tlet\
    \ bracket_open_index12: number;\n\tlet bracket_close_index12: number;\n\tlet bracket_open_index13:\
    \ number;\n\tlet bracket_close_index13: number;\n\tlet bracket_open_index14: number;\n\
    \tlet bracket_close_index14: number;\n\tlet bracket_open_index15: number;\n\t\
    let bracket_close_index15: number;\n\tlet bracket_open_index16: number;\n\tlet\
    \ bracket_close_index16: number;\n\tlet bracket_open_index17: number;\n\tlet bracket_close_index17:\
    \ number;\n\tlet bracket_open_index18: number;\n\tlet bracket_close_index18: number;\n\
    \tlet bracket_open_index19: number;\n\tlet bracket_close_index19: number;\n\t\
    let bracket_open_index20: number;\n\tlet bracket_close_index20: number;\n\tlet\
    \ bracket_open_index21: number;\n\tlet bracket_close_index21: number;\n\tlet bracket_open_index22:\
    \ number;\n\tlet bracket_close_index\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2rvtyitp.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738770
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet bracketCount = 0;\n\
    \tlet openBracketCount = 0;\n\tlet closeBracketCount = 0;\n\tlet openBracketCount2\
    \ = 0;\n\tlet closeBracketCount2 = 0;\n\tlet openBracketCount3 = 0;\n\tlet closeBracketCount3\
    \ = 0;\n\tlet openBracketCount4 = 0;\n\tlet closeBracketCount4 = 0;\n\tlet openBracketCount5\
    \ = 0;\n\tlet closeBracketCount5 = 0;\n\tlet openBracketCount6 = 0;\n\tlet closeBracketCount6\
    \ = 0;\n\tlet openBracketCount7 = 0;\n\tlet closeBracketCount7 = 0;\n\tlet openBracketCount8\
    \ = 0;\n\tlet closeBracketCount8 = 0;\n\tlet openBracketCount9 = 0;\n\tlet closeBracketCount9\
    \ = 0;\n\tlet openBracketCount10 = 0;\n\tlet closeBracketCount10 = 0;\n\tlet openBracketCount11\
    \ = 0;\n\tlet closeBracketCount11 = 0;\n\tlet openBracketCount12 = 0;\n\tlet closeBracketCount12\
    \ = 0;\n\tlet openBracketCount13 = 0;\n\tlet closeBracketCount13 = 0;\n\tlet openBracketCount14\
    \ = 0;\n\tlet closeBracketCount14 = 0;\n\tlet openBracketCount15 = 0;\n\tlet closeBracketCount15\
    \ = 0;\n\tlet openBracketCount16 = 0;\n\tlet closeBracketCount16 = 0;\n\tlet openBracketCount17\
    \ = 0;\n\tlet closeBracketCount17 = 0;\n\tlet openBracketCount18 = 0;\n\tlet closeBracketCount18\
    \ = 0;\n\tlet openBracketCount19 = 0;\n\tlet closeBracketCount19 = 0;\n\tlet openBracketCount20\
    \ = 0;\n\tlet closeBracketCount20 = 0;\n\tlet openBracketCount21 = 0;\n\tlet closeBracketCount21\
    \ = 0;\n\tlet openBracketCount22 = 0;\n\tlet closeBracketCount22 = 0;\n\tlet openBracketCount23\
    \ = 0;\n\tlet closeBracketCount23 = 0;\n\tlet openBracketCount24 = 0;\n\tlet closeBracketCount24\
    \ = 0;\n\tlet openBracketCount25 = 0;\n\tlet closeBracketCount25 = 0;\n\tlet openBracketCount26\
    \ = 0;\n\tlet closeBracketCount26 = 0;\n\tlet openBracketCount27 = 0;\n\tlet closeBracketCount27\
    \ = 0;\n\tlet openBracketCount28 = 0;\n\tlet closeBracketCount28 = 0;\n\tlet openBracketCount29\
    \ = 0;\n\tlet close\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuwx8io6y.ts(98,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738770
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    const stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            const openBracket = stack.pop();\n      \
    \      if (openBracket !== '[') {\n                return false;\n           \
    \ }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4g6pd8_a.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4g6pd8_a.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738770
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_index = 0;\n\tlet close_brackets_index = 0;\n\tlet\
    \ bracket_count = 0;\n\tlet bracket_count_max = 0;\n\tlet bracket_count_min =\
    \ 0;\n\tlet bracket_count_current = 0;\n\tlet bracket_count_current_max = 0;\n\
    \tlet bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\t\
    let bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max = 0;\n\tlet\
    \ bracket_count_current_min = 0;\n\tlet bracket_count_current_max\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeab4e1l1.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738771
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    const stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length !== 0) {\n                const\
    \ openBracket = stack.pop();\n                if (openBracket !== char) {\n  \
    \                  return false;\n                }\n            } else {\n  \
    \              return false;\n            }\n        }\n    }\n    if (stack.length\
    \ !== 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp79bliq2l.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp79bliq2l.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738772
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    let opening_brackets: string[] = [];\n    let closing_brackets: string[]\
    \ = [];\n    let opening_curly: string[] = [];\n    let closing_curly: string[]\
    \ = [];\n    let opening_square: string[] = [];\n    let closing_square: string[]\
    \ = [];\n    let opening_angle: string[] = [];\n    let closing_angle: string[]\
    \ = [];\n    let opening_paren: string[] = [];\n    let closing_paren: string[]\
    \ = [];\n    let opening_square_paren: string[] = [];\n    let closing_square_paren:\
    \ string[] = [];\n    let opening_angle_paren: string[] = [];\n    let closing_angle_paren:\
    \ string[] = [];\n    let opening_curly_paren: string[] = [];\n    let closing_curly_paren:\
    \ string[] = [];\n    let opening_square_curly_paren: string[] = [];\n    let\
    \ closing_square_curly_paren: string[] = [];\n    let opening_angle_curly_paren:\
    \ string[] = [];\n    let closing_angle_curly_paren: string[] = [];\n    let opening_paren_paren:\
    \ string[] = [];\n    let closing_paren_paren: string[] = [];\n    let opening_square_paren_paren:\
    \ string[] = [];\n    let closing_square_paren_paren: string[] = [];\n    let\
    \ opening_angle_paren_paren: string[] = [];\n    let closing_angle_paren_paren:\
    \ string[] = [];\n    let opening_curly_paren_paren: string[] = [];\n    let closing_curly_paren_paren:\
    \ string[] = [];\n    let opening_square_curly_paren_paren: string[] = [];\n \
    \   let closing_square_curly_paren_paren: string[] = [];\n    let opening_angle_curly_paren_paren:\
    \ string[] = [];\n    let closing_angle_curly_paren_paren: string[] = [];\n  \
    \  let opening_square_paren_curly_paren: string[] = [];\n    let closing_square_paren_curly_paren:\
    \ string[] = [];\n    let opening_angle_paren_curly_paren: string[] = [];\n  \
    \  let closing_angle_paren_curly_paren: string[] = [];\n    let opening_curly_paren_curly_paren:\
    \ string[] = [];\n    let closing_curly_paren_curly_paren: string[] = [];\n  \
    \  let opening_square_curly_paren_curly_paren: string[] = [];\n    let closing_square_curly_paren_curly_paren:\
    \ string[] = [];\n    let opening_angle_curly_paren_curly_paren: string[] = [];\n\
    \    let closing_angle_curly_paren_curly_paren: string[] = [];\n    let opening_square_paren_curly_curly_paren:\
    \ string[] = [];\n    let closing_square_paren_curly_curly_paren: string[] = [];\n\
    \    let opening_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp34amflbd.ts(85,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738771
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\" || string[i] === \"{\") {\n            stack.push(string[i]);\n  \
    \      } else if (string[i] === \"}\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp12acjf1s.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp12acjf1s.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_stack: number[] = [];\n\tlet close_brackets_stack:\
    \ number[] = [];\n\tlet open_curly: number[] = [];\n\tlet close_curly: number[]\
    \ = [];\n\tlet open_curly_stack: number[] = [];\n\tlet close_curly_stack: number[]\
    \ = [];\n\tlet open_paren: number[] = [];\n\tlet close_paren: number[] = [];\n\
    \tlet open_paren_stack: number[] = [];\n\tlet close_paren_stack: number[] = [];\n\
    \tlet open_paren_stack_string: string[] = [];\n\tlet close_paren_stack_string:\
    \ string[] = [];\n\tlet open_curly_stack_string: string[] = [];\n\tlet close_curly_stack_string:\
    \ string[] = [];\n\tlet open_paren_stack_string: string[] = [];\n\tlet close_paren_stack_string:\
    \ string[] = [];\n\tlet open_curly_stack_string: string[] = [];\n\tlet close_curly_stack_string:\
    \ string[] = [];\n\tlet open_paren_stack_string: string[] = [];\n\tlet close_paren_stack_string:\
    \ string[] = [];\n\tlet open_curly_stack_string: string[] = [];\n\tlet close_curly_stack_string:\
    \ string[] = [];\n\tlet open_paren_stack_string: string[] = [];\n\tlet close_paren_stack_string:\
    \ string[] = [];\n\tlet open_curly_stack_string: string[] = [];\n\tlet close_curly_stack_string:\
    \ string[] = [];\n\tlet open_paren_stack_string: string[] = [];\n\tlet close_paren_stack_string:\
    \ string[] = [];\n\tlet open_curly_stack_string: string[] = [];\n\tlet close_curly_stack_string:\
    \ string[] = [];\n\tlet open_paren_stack_string: string[] = [];\n\tlet close_paren_stack_string:\
    \ string[] = [];\n\tlet open_curly_stack_string: string[] = [];\n\tlet close_curly_stack_string:\
    \ string[] = [];\n\tlet open_paren_stack_string: string[] = [];\n\tlet close_paren_stack_string:\
    \ string[] = [];\n\tlet open_curly_stack_string: string[] = [];\n\tlet close_curly_stack_string:\
    \ string[] = [];\n\tlet open_paren_stack_string: string[] = [];\n\tlet close_paren_stack_string:\
    \ string[] = [];\n\tlet open_curly_stack_string: string[] = [];\n\tlet close_curly_stack_string:\
    \ string[] = [];\n\tlet open_paren_stack_string: string[] = [];\n\tlet close_paren_stack_string:\
    \ string[] = [];\n\t\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp72h5i6y0.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738772
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets = 0;\n\t\
    for (let i = 0; i < string.length; i++) {\n\t\tconst c = string[i];\n\t\tif (c\
    \ === \"[\") {\n\t\t\tbrackets++;\n\t\t} else if (c === \"]\") {\n\t\t\tbrackets--;\n\
    \t\t}\n\t\tif (brackets < 0) return false;\n\t}\n\treturn brackets === 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbu6kg6tg.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbu6kg6tg.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738772
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    const stack: string[]\
    \ = [];\n    let opening_brackets: number = 0;\n    let closing_brackets: number\
    \ = 0;\n    let opening_square_brackets: number = 0;\n    let closing_square_brackets:\
    \ number = 0;\n    for (let i = 0; i < string.length; i++) {\n        const char\
    \ = string[i];\n        if (char === '[') {\n            opening_brackets++;\n\
    \            stack.push(char);\n        } else if (char === ']') {\n         \
    \   closing_brackets++;\n            opening_brackets--;\n        } else if (char\
    \ === '[') {\n            opening_square_brackets++;\n            stack.push(char);\n\
    \        } else if (char === ']') {\n            closing_square_brackets++;\n\
    \            opening_square_brackets--;\n        } else if (char === '{') {\n\
    \            stack.push(char);\n        } else if (char === '}') {\n         \
    \   opening_brackets--;\n        } else if (char === '{') {\n            opening_square_brackets--;\n\
    \        } else if (char === '}') {\n            closing_brackets--;\n       \
    \ } else if (char === '[') {\n            opening_square_brackets++;\n       \
    \ } else if (char === ']') {\n            closing_square_brackets++;\n       \
    \ }\n    }\n    return opening_brackets === 0 && closing_brackets === 0 && opening_square_brackets\
    \ === 0 && closing_square_brackets === 0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuy0fnxfk.js:64:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuy0fnxfk.js:79:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738772
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_stack: number[] = [];\n\tlet close_brackets_stack:\
    \ number[] = [];\n\tlet open_stack: number[] = [];\n\tlet close_stack: number[]\
    \ = [];\n\tlet open_stack_index: number = 0;\n\tlet close_stack_index: number\
    \ = 0;\n\tlet open_stack_string: string = \"\";\n\tlet close_stack_string: string\
    \ = \"\";\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_len: number = 0;\n\tlet close_stack_string_len:\
    \ number = 0;\n\tlet open_stack_string_len_index: number = 0;\n\tlet close_stack_string_len_index:\
    \ number = 0;\n\tlet open_stack_string_len_len: number = 0;\n\tlet close_stack_string_len_len:\
    \ number = 0;\n\tlet open_stack_string_len_index: number = 0;\n\tlet close_stack_string_len_index:\
    \ number = 0;\n\tlet open_stack_string_len: number = 0;\n\tlet close_stack_string_len:\
    \ number = 0;\n\tlet open_stack_string_len_index: number = 0;\n\tlet close_stack_string_len_index:\
    \ number = 0;\n\tlet open_stack_string_len: number = 0;\n\tlet close_stack_string_len:\
    \ number = 0;\n\tlet open_stack_string_len_index: number = 0;\n\tlet close_stack_string_len_index:\
    \ number = 0;\n\tlet open_stack_string_len: number = 0;\n\tlet close_stack_string_len:\
    \ number = 0;\n\tlet open_stack_string_len_index: number = 0;\n\tlet close_stack_string_len_index:\
    \ number = 0;\n\tlet open_stack_string_len: number = 0;\n\tlet close_stack_string_len:\
    \ number = 0;\n\tlet open_stack_string_len_index: number = 0;\n\tlet close_stack_string_len_index:\
    \ number = 0;\n\tlet open_stack_string_len: number = 0;\n\tlet close_stack_string_len:\
    \ number = 0;\n\tlet open_stack_string_len_index: number = 0;\n\tlet close_stack_string_len_index:\
    \ number = 0;\n\tlet open_stack_string_len: number = 0;\n\tlet close_stack_string_len:\
    \ number = 0;\n\tlet open_stack_string_len_index: number = 0;\n\tlet close_stack_string_len_index:\
    \ number = 0;\n\tlet open_stack_string_len: number = 0;\n\tlet close_stack_string_len:\
    \ number = 0;\n\tlet open_stack_string_len_index: number = 0;\n\tlet close_stack_string_len_index:\
    \ number = 0;\n\tlet open_stack\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwdqg5mz9.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738772
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let open_brackets:\
    \ number[] = [];\n    let close_brackets: number[] = [];\n    let open_brackets_stack:\
    \ number[] = [];\n    let close_brackets_stack: number[] = [];\n    let open_brackets_length:\
    \ number = 0;\n    let close_brackets_length: number = 0;\n    let open_brackets_stack_index:\
    \ number = 0;\n    let close_brackets_stack_index: number = 0;\n    let open_brackets_length_index:\
    \ number = 0;\n    let close_brackets_length_index: number = 0;\n    let open_brackets_stack_string:\
    \ string = \"\";\n    let close_brackets_stack_string: string = \"\";\n    let\
    \ open_brackets_length_string: string = \"\";\n    let close_brackets_length_string:\
    \ string = \"\";\n    let open_brackets_stack_string_index: number = 0;\n    let\
    \ close_brackets_stack_string_index: number = 0;\n    let open_brackets_length_string_index:\
    \ number = 0;\n    let close_brackets_length_string_index: number = 0;\n    let\
    \ open_brackets_stack_string_index2: number = 0;\n    let close_brackets_stack_string_index2:\
    \ number = 0;\n    let open_brackets_length_string_index2: number = 0;\n    let\
    \ close_brackets_length_string_index2: number = 0;\n    let open_brackets_stack_string_index3:\
    \ number = 0;\n    let close_brackets_stack_string_index3: number = 0;\n    let\
    \ open_brackets_length_string_index3: number = 0;\n    let close_brackets_length_string_index3:\
    \ number = 0;\n    let open_brackets_stack_string_index4: number = 0;\n    let\
    \ close_brackets_stack_string_index4: number = 0;\n    let open_brackets_length_string_index4:\
    \ number = 0;\n    let close_brackets_length_string_index4: number = 0;\n    let\
    \ open_brackets_stack_string_index5: number = 0;\n    let close_brackets_stack_string_index5:\
    \ number = 0;\n    let open_brackets_length_string_index5: number = 0;\n    let\
    \ close_brackets_length_string_index5: number = 0;\n    let open_brackets_stack_string_index6:\
    \ number = 0;\n    let close_brackets_stack_string_index6: number = 0;\n    let\
    \ open_brackets_length_string_index6: number = 0;\n    let close_brackets_length_string_index6:\
    \ number = 0;\n    let open_brackets_stack_string_index7: number = 0;\n    let\
    \ close_brackets_stack_string_index7: number = 0;\n    let open_brackets_length_string_index7\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgnpcx_or.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738772
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ == \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ == \"]\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmxd9c9n6.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmxd9c9n6.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet open_brackets: number\
    \ = 0;\n\tlet close_brackets: number = 0;\n\tlet open_brackets_stack: string[]\
    \ = [];\n\tlet close_brackets_stack: string[] = [];\n\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet char = string[i];\n\t\tif (char === '[') {\n\t\t\topen_brackets++;\n\
    \t\t\topen_brackets_stack.push(char);\n\t\t} else if (char === ']') {\n\t\t\t\
    close_brackets++;\n\t\t\tclose_brackets_stack.push(char);\n\t\t} else if (char\
    \ === ']' && open_brackets > 0 && close_brackets > 0) {\n\t\t\topen_brackets--;\n\
    \t\t\tclose_brackets--;\n\t\t\tif (open_brackets === 0 && close_brackets === 0)\
    \ {\n\t\t\t\topen_brackets_stack.pop();\n\t\t\t\tclose_brackets_stack.pop();\n\
    \t\t\t\tif (open_brackets_stack.length === 0 && close_brackets_stack.length ===\
    \ 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgeb412zn.js:48:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgeb412zn.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738772
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            brackets.push(i);\n        } else if (string[i] ===\
    \ \"]\") {\n            close_brackets.push(i);\n        } else if (string[i]\
    \ === \"[\") {\n            open_brackets.push(i);\n        }\n    }\n    if (brackets.length\
    \ !== close_brackets.length + open_brackets.length) {\n        return false;\n\
    \    }\n    for (let i = 0; i < brackets.length; i++) {\n        let open = open_brackets[i];\n\
    \        let close = close_brackets[i];\n        if (open < close && close > open)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyce8ccs2.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyce8ccs2.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738772
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length !== 0) {\n                stack.pop();\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk7wkeg29.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk7wkeg29.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738772
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === \"[\") {\n            stack.push(char);\n        } else\
    \ if (char === \"]\") {\n            if (stack.length === 0) {\n             \
    \   return false;\n            }\n            let top = stack.pop();\n       \
    \     if (top !== \"[\") {\n                return false;\n            }\n   \
    \     }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n \
    \   return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpris9lv4t.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpris9lv4t.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738772
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet closed_brackets: number[]\
    \ = [];\n\tlet open_parens: number[] = [];\n\tlet close_parens: number[] = [];\n\
    \tlet open_brackets_stack: number[] = [];\n\tlet closed_brackets_stack: number[]\
    \ = [];\n\tlet open_parens_stack: number[] = [];\n\tlet close_parens_stack: number[]\
    \ = [];\n\tlet open_brackets_stack_index: number[] = [];\n\tlet closed_brackets_stack_index:\
    \ number[] = [];\n\tlet open_parens_stack_index: number[] = [];\n\tlet close_parens_stack_index:\
    \ number[] = [];\n\tlet open_brackets_stack_index2: number[] = [];\n\tlet closed_brackets_stack_index2:\
    \ number[] = [];\n\tlet open_parens_stack_index2: number[] = [];\n\tlet close_parens_stack_index2:\
    \ number[] = [];\n\tlet open_brackets_stack_index3: number[] = [];\n\tlet closed_brackets_stack_index3:\
    \ number[] = [];\n\tlet open_parens_stack_index3: number[] = [];\n\tlet close_parens_stack_index3:\
    \ number[] = [];\n\tlet open_brackets_stack_index4: number[] = [];\n\tlet closed_brackets_stack_index4:\
    \ number[] = [];\n\tlet open_parens_stack_index4: number[] = [];\n\tlet close_parens_stack_index4:\
    \ number[] = [];\n\tlet open_brackets_stack_index5: number[] = [];\n\tlet closed_brackets_stack_index5:\
    \ number[] = [];\n\tlet open_parens_stack_index5: number[] = [];\n\tlet close_parens_stack_index5:\
    \ number[] = [];\n\tlet open_brackets_stack_index6: number[] = [];\n\tlet closed_brackets_stack_index6:\
    \ number[] = [];\n\tlet open_parens_stack_index6: number[] = [];\n\tlet close_parens_stack_index6:\
    \ number[] = [];\n\tlet open_brackets_stack_index7: number[] = [];\n\tlet closed_brackets_stack_index7:\
    \ number[] = [];\n\tlet open_parens_stack_index7: number[] = [];\n\tlet close_parens_stack_index7:\
    \ number[] = [];\n\tlet open_brackets_stack_index8: number[] = [];\n\tlet closed_brackets_stack_index8:\
    \ number[] = [];\n\tlet open_parens_stack_index8: number[] = [];\n\tlet close_parens_stack_index8:\
    \ number[]\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdhdqmojq.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738772
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    let opening_brackets: number[] = [];\n    let closing_brackets: number[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let c = string[i];\n\
    \        if (c === \"[\") {\n            opening_brackets.push(i);\n        }\
    \ else if (c === \"]\") {\n            closing_brackets.push(i);\n        } else\
    \ if (c === \"[\") {\n            if (stack.length !== 0) {\n                let\
    \ opening_index = opening_brackets.pop();\n                let closing_index =\
    \ closing_brackets.pop();\n                if (opening_index < closing_index)\
    \ {\n                    stack.push(string.slice(opening_index, closing_index));\n\
    \                }\n            }\n        } else if (c === \"]\") {\n       \
    \     if (stack.length !== 0) {\n                let opening_index = opening_brackets.pop();\n\
    \                let closing_index = closing_brackets.pop();\n               \
    \ if (opening_index < closing_index) {\n                    stack.push(string.slice(opening_index,\
    \ closing_index));\n                }\n            }\n        }\n    }\n    return\
    \ stack.length !== 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuyaq_gh2.js:52:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuyaq_gh2.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738772
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            let openBracket = stack.pop();\n        \
    \    if (openBracket !== '[') {\n                return false;\n            }\n\
    \        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpz1ypjgm0.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz1ypjgm0.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738773
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_parens: number[] = [];\n    let close_parens: number[] =\
    \ [];\n    let open_parens_stack: number[] = [];\n    let close_parens_stack:\
    \ number[] = [];\n    let open_parens_stack_index: number = 0;\n    let close_parens_stack_index:\
    \ number = 0;\n    let open_brackets_stack: number[] = [];\n    let close_brackets_stack:\
    \ number[] = [];\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp92s3clq_.ts(62,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp92s3clq_.ts(84,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738772
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            let openBracket = stack.pop();\n        \
    \    if (openBracket !== '[') {\n                return false;\n            }\n\
    \        } else {\n            if (stack.length > 0) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5k6k5bbn.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5k6k5bbn.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738772
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: string[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_parens: number[] = [];\n    let close_parens: number[] =\
    \ [];\n    let open_brackets_stack: number[] = [];\n    let close_brackets_stack:\
    \ number[] = [];\n    let open_parens_stack: number[] = [];\n    let close_parens_stack:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_parens_size: number[] = [];\n    let close_parens_size:\
    \ number[] = [];\n    let open_brackets_index: number[] = [];\n    let close_brackets_index:\
    \ number[] = [];\n    let open_parens_index: number[] = [];\n    let close_parens_index:\
    \ number[] = [];\n    let open_brackets_index_stack: number[] = [];\n    let close_brackets_index_stack:\
    \ number[] = [];\n    let open_parens_index_stack: number[] = [];\n    let close_parens_index_stack:\
    \ number[] = [];\n    let open_brackets_index_size: number[] = [];\n    let close_brackets_index_size:\
    \ number[] = [];\n    let open_parens_index_size: number[] = [];\n    let close_parens_index_size:\
    \ number[] = [];\n    let open_brackets_index_index: number[] = [];\n    let close_brackets_index_index:\
    \ number[] = [];\n    let open_parens_index_index: number[] = [];\n    let close_parens_index_index:\
    \ number[] = [];\n    let open_brackets_index_index_stack: number[] = [];\n  \
    \  let close_brackets_index_index_stack: number[] = [];\n    let open_parens_index_index_stack:\
    \ number[] = [];\n    let close_parens_index_index_stack: number[] = [];\n   \
    \ let open_brackets_index_index_size: number[] = [];\n    let close_brackets_index_index_size:\
    \ number[] = [];\n    let open_parens_index_index_size: number[] = [];\n    let\
    \ close_parens_index_index_size: number[] = [];\n    let open_brackets_index_index_index:\
    \ number[] = [];\n    let close_brackets_index_index_index: number[] = [];\n \
    \   let open_parens_index_index_index: number[] = [];\n    let close_parens_index_index_index:\
    \ number[] = [];\n    let open_brackets_index_index_index_stack: number[] = [];\n\
    \    let close_brackets_index_index_index_stack: number[] = [];\n    let open_parens_index_index_index_stack:\
    \ number[] = [];\n    let close_parens_index_index_index_stack: number[] = [];\n\
    \    let open_bracket\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnxoy2rov.ts(85,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738772
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ == \"[\") {\n            stack.push(\"[\");\n        } else if (string[i] ==\
    \ \"]\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        } else if (stack.length != 0)\
    \ {\n            if (stack[stack.length - 1] == \"[\" && string[i] == \"]\") {\n\
    \                stack.pop();\n            }\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb6o_k3dg.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb6o_k3dg.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738772
- exit_code: -5
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    // Create a stack\
    \ to keep track of brackets.\n    const stack: Array<string> = [];\n    // Iterate\
    \ over the string and push each character onto the stack.\n    for (let i = 0;\
    \ i < string.length; i++) {\n        stack.push(string[i]);\n    }\n    // Iterate\
    \ over the stack until we encounter a closing bracket.\n    while (stack.length\
    \ > 0) {\n        // Pop the top bracket off the stack.\n        const top = stack.pop();\n\
    \        // If the top bracket is a closing bracket, return true.\n        if\
    \ (top == \"[\") {\n            return true;\n        }\n        // If the top\
    \ bracket is not a closing bracket, continue iterating.\n        else {\n    \
    \        // Iterate over the string and push each character onto the stack.\n\
    \            for (let i = 0; i < string.length; i++) {\n                stack.push(string[i]);\n\
    \            }\n        }\n    }\n    // If we reach this point, the string contains\
    \ no nested brackets.\n    return false;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff7678f060\n 1: 0x2b16635dd727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b166417228e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b1663aacf8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b1663c3e9f0  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b1663c46390  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b1663e307db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b166378f7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738776
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    // TODO: Write a function\
    \ that takes a string as input which contains only square brackets.\n    // The\
    \ function should return true if and only if there is a valid subsequence of brackets\
    \ \n    // where at least one bracket in the subsequence is nested.\n    // >>>\
    \ is_nested(\"[[]]\")\n    // true\n    // >>> is_nested(\"[]]]]]]][[[[[]\")\n\
    \    // false\n    // >>> is_nested(\"[][]\")\n    // false\n    // >>> is_nested(\"\
    []\")\n    // false\n    // >>> is_nested(\"[[][]]\")\n    // true\n    // >>>\
    \ is_nested(\"[[]][[\")\n    // true\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjxf1azfb.ts(16,37): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1659738759
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === \"[\") {\n            brackets.push(i);\n            open_brackets.push(i);\n\
    \        } else if (char === \"]\") {\n            close_brackets.push(i);\n \
    \       }\n    }\n    if (brackets.length === 0) {\n        return false;\n  \
    \  }\n    for (let i = 0; i < brackets.length; i++) {\n        let open_bracket\
    \ = open_brackets[i];\n        let close_bracket = close_brackets[i];\n      \
    \  if (open_bracket === close_bracket) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0pw8n_lc.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0pw8n_lc.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738773
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_length: number = 0;\n\tlet close_brackets_length: number\
    \ = 0;\n\tlet i: number;\n\tlet j: number;\n\tlet bracket: string;\n\tlet bracket_length:\
    \ number;\n\tlet bracket_open: boolean;\n\tlet bracket_close: boolean;\n\tlet\
    \ bracket_open_index: number;\n\tlet bracket_close_index: number;\n\tlet bracket_open_index2:\
    \ number;\n\tlet bracket_close_index2: number;\n\tlet bracket_open_index3: number;\n\
    \tlet bracket_close_index3: number;\n\tlet bracket_open_index4: number;\n\tlet\
    \ bracket_close_index4: number;\n\tlet bracket_open_index5: number;\n\tlet bracket_close_index5:\
    \ number;\n\tlet bracket_open_index6: number;\n\tlet bracket_close_index6: number;\n\
    \tlet bracket_open_index7: number;\n\tlet bracket_close_index7: number;\n\tlet\
    \ bracket_open_index8: number;\n\tlet bracket_close_index8: number;\n\tlet bracket_open_index9:\
    \ number;\n\tlet bracket_close_index9: number;\n\tlet bracket_open_index10: number;\n\
    \tlet bracket_close_index10: number;\n\tlet bracket_open_index11: number;\n\t\
    let bracket_close_index11: number;\n\tlet bracket_open_index12: number;\n\tlet\
    \ bracket_close_index12: number;\n\tlet bracket_open_index13: number;\n\tlet bracket_close_index13:\
    \ number;\n\tlet bracket_open_index14: number;\n\tlet bracket_close_index14: number;\n\
    \tlet bracket_open_index15: number;\n\tlet bracket_close_index15: number;\n\t\
    let bracket_open_index16: number;\n\tlet bracket_close_index16: number;\n\tlet\
    \ bracket_open_index17: number;\n\tlet bracket_close_index17: number;\n\tlet bracket_open_index18:\
    \ number;\n\tlet bracket_close_index18: number;\n\tlet bracket_open_index19: number;\n\
    \tlet bracket_close_index19: number;\n\tlet bracket_open_index20: number;\n\t\
    let bracket_close_index20: number;\n\tlet bracket_open_index21: number;\n\tlet\
    \ bracket_close_index21: number;\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo26v4u1t.ts(93,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738772
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            let top = stack.pop();\n            if (top\
    \ !== '[') {\n                return false;\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpj117pezh.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj117pezh.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738773
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let open_brackets:\
    \ number[] = [];\n    let closed_brackets: number[] = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            open_brackets.push(i);\n\
    \        } else if (string[i] === \"]\") {\n            closed_brackets.push(i);\n\
    \        }\n    }\n    if (open_brackets.length !== closed_brackets.length) {\n\
    \        return false;\n    }\n    for (let i = 0; i < open_brackets.length; i++)\
    \ {\n        let open_bracket = open_brackets[i];\n        let closed_bracket\
    \ = closed_brackets[i];\n        if (open_bracket === closed_bracket) {\n    \
    \        continue;\n        }\n        let open_brackets_count = open_brackets.length;\n\
    \        let closed_brackets_count = closed_brackets.length;\n        while (open_brackets_count\
    \ > 0 && closed_brackets_count > 0) {\n            if (open_brackets[open_brackets_count\
    \ - 1] === closed_brackets[closed_brackets_count - 1]) {\n                open_brackets_count--;\n\
    \                closed_brackets_count--;\n            } else {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7wq6z90h.js:53:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7wq6z90h.js:68:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet open_brackets: number\
    \ = 0;\n\tlet close_brackets: number = 0;\n\tlet open_brackets_stack: string[]\
    \ = [];\n\tlet close_brackets_stack: string[] = [];\n\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet c = string[i];\n\t\tif (c == '[') {\n\t\t\topen_brackets++;\n\
    \t\t\topen_brackets_stack.push(string[i]);\n\t\t} else if (c == ']') {\n\t\t\t\
    close_brackets++;\n\t\t\tclose_brackets_stack.push(string[i]);\n\t\t} else if\
    \ (c == ']' && open_brackets > 0 && close_brackets == open_brackets) {\n\t\t\t\
    close_brackets--;\n\t\t\tclose_brackets_stack.pop();\n\t\t}\n\t}\n\n\treturn open_brackets\
    \ == 0 && close_brackets == 0;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfostgz2n.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfostgz2n.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            let openBracket = stack.pop();\n        \
    \    if (openBracket !== '[') {\n                return false;\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb6_h4b2w.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb6_h4b2w.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738764
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    const stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            const top = stack.pop();\n            if\
    \ (top !== '[' || stack.length === 0) {\n                return false;\n     \
    \       }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8qb7qq0l.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8qb7qq0l.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet open_brackets =\
    \ 0;\n\tlet closed_brackets = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\
    \t\tif (string[i] === \"[\") {\n\t\t\topen_brackets++;\n\t\t} else if (string[i]\
    \ === \"]\") {\n\t\t\tclosed_brackets++;\n\t\t}\n\t\tif (open_brackets === closed_brackets)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa5ja9abv.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa5ja9abv.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    const stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length !== 1) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5anzh7l_.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5anzh7l_.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let open_brackets:\
    \ number[] = [];\n    let close_brackets: number[] = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        let char = string[i];\n        if (char ===\
    \ \"[\") {\n            open_brackets.push(i);\n        } else if (char === \"\
    ]\") {\n            close_brackets.push(i);\n        }\n    }\n    if (open_brackets.length\
    \ !== close_brackets.length) {\n        return false;\n    }\n    for (let i =\
    \ 0; i < open_brackets.length; i++) {\n        let open_bracket = open_brackets[i];\n\
    \        let close_bracket = close_brackets[i];\n        if (open_bracket ===\
    \ close_bracket) {\n            continue;\n        }\n        let open_brackets_count\
    \ = open_brackets.length;\n        let close_brackets_count = close_brackets.length;\n\
    \        for (let j = open_bracket; j < close_bracket; j++) {\n            if\
    \ (open_brackets[j] === close_brackets[j]) {\n                open_brackets_count--;\n\
    \                close_brackets_count--;\n            }\n        }\n        if\
    \ (open_brackets_count === 0 && close_brackets_count === 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp09ntdj4c.js:54:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp09ntdj4c.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet open_brackets: number[]\
    \ = [];\n\tlet closed_brackets: number[] = [];\n\tlet open_brackets_stack: number[]\
    \ = [];\n\tlet closed_brackets_stack: number[] = [];\n\tlet open_brackets_size:\
    \ number = 0;\n\tlet closed_brackets_size: number = 0;\n\tlet open_brackets_stack_index:\
    \ number = 0;\n\tlet closed_brackets_stack_index: number = 0;\n\tlet open_brackets_string:\
    \ string = \"\";\n\tlet closed_brackets_string: string = \"\";\n\tlet open_brackets_string_index:\
    \ number = 0;\n\tlet closed_brackets_string_index: number = 0;\n\tlet open_brackets_string_size:\
    \ number = 0;\n\tlet closed_brackets_string_size: number = 0;\n\tlet open_brackets_string_size_index:\
    \ number = 0;\n\tlet closed_brackets_string_size_index: number = 0;\n\tlet open_brackets_string_size_size:\
    \ number = 0;\n\tlet closed_brackets_string_size_size: number = 0;\n\tlet open_brackets_string_size_size_index:\
    \ number = 0;\n\tlet closed_brackets_string_size_size_index: number = 0;\n\tlet\
    \ open_brackets_string_size_size_size: number = 0;\n\tlet closed_brackets_string_size_size_size:\
    \ number = 0;\n\tlet open_brackets_string_size_size_size_index: number = 0;\n\t\
    let closed_brackets_string_size_size_size_index: number = 0;\n\tlet open_brackets_string_size_size_size_size:\
    \ number = 0;\n\tlet closed_brackets_string_size_size_size_size: number = 0;\n\
    \tlet open_brackets_string_size_size_size_size_index: number = 0;\n\tlet closed_brackets_string_size_size_size_size_index:\
    \ number = 0;\n\tlet open_brackets_string_size_size_size_size_size: number = 0;\n\
    \tlet closed_brackets_string_size_size_size_size_size: number = 0;\n\tlet open_brackets_string_size_size_size_size_size_index:\
    \ number = 0;\n\tlet closed_brackets_string_size_size_size_size_size_index: number\
    \ = 0;\n\tlet open_brackets_string_size_size_size_size_size_size: number = 0;\n\
    \tlet closed_brackets_string_size_size_size_size_size_size: number = 0;\n\tlet\
    \ open_brackets_string_size_size_size_size_size_size_index: number = 0;\n\tlet\
    \ closed_brackets_string_size_size_size_size_size_size_index: number = 0;\n\t\
    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprr3aeljp.ts(54,9): error TS1005: '','' expected.

    ../../../../../tmp/tmprr3aeljp.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738774
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets = string.match(/\\\
    [.*?\\]/g);\n    return brackets !== null;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbrsz38dd.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrsz38dd.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push('[');\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        } else if (char ===\
    \ ']' && stack.length === 0) {\n            return false;\n        }\n    }\n\
    \    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdjehi12h.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdjehi12h.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738775
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(\"[\");\n        } else if (string[i] ===\
    \ \"]\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        } else if (stack.length ===\
    \ 0) {\n            return false;\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfeb89ctd.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfeb89ctd.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738775
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push('[');\n        } else if\
    \ (char === ']') {\n            if (stack.length > 0) {\n                let last\
    \ = stack.pop();\n                if (last === '[') {\n                    return\
    \ true;\n                }\n            }\n        } else {\n            if (stack.length\
    \ > 0) {\n                let last = stack.pop();\n                if (last ===\
    \ '[' && char !== ']') {\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt98f3kgr.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt98f3kgr.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738775
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === \"]\") {\n            if (stack.length === 0) {\n      \
    \          return false;\n            }\n            stack.pop();\n        } else\
    \ if (char === \"[\") {\n            stack.push(char);\n        }\n    }\n   \
    \ return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_am1oiqb.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_am1oiqb.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738775
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_brackets_stack: number[] = [];\n    let close_brackets_stack:\
    \ number[] = [];\n    let open_stack: number[] = [];\n    let close_stack: number[]\
    \ = [];\n    let open_stack_index: number = 0;\n    let close_stack_index: number\
    \ = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_stack_index: number = 0;\n    let close_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_stack_index: number = 0;\n    let close_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_stack_index: number = 0;\n    let close_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_stack_index: number = 0;\n    let close_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_stack_index: number = 0;\n    let close_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_stack_index: number = 0;\n    let close_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_stack_index: number = 0;\n    let close_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_stack_index: number = 0;\n    let close_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_stack_index: number = 0;\n    let close_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_stack_index: number = 0;\n    let close_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_stack_index: \ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8t84_vj8.ts(69,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp8t84_vj8.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738774
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\" || string[i] === \"(\") {\n            stack.push(string[i]);\n  \
    \      } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpq38mbro7.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq38mbro7.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738767
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets = string.match(/\\\
    [.*?\\]/g);\n    return brackets && brackets.length >= 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0qoubppo.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0qoubppo.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738775
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[]\
    \ = [];\n\tlet opening_square_brackets: number[] = [];\n\tlet closing_square_brackets:\
    \ number[] = [];\n\tlet opening_curly_brackets: number[] = [];\n\tlet closing_curly_brackets:\
    \ number[] = [];\n\tlet opening_square_curly_brackets: number[] = [];\n\tlet closing_square_curly_brackets:\
    \ number[] = [];\n\tlet opening_curly_curly_brackets: number[] = [];\n\tlet closing_curly_curly_brackets:\
    \ number[] = [];\n\tlet opening_square_curly_curly_brackets: number[] = [];\n\t\
    let closing_square_curly_curly_brackets: number[] = [];\n\tlet opening_square_brackets_number:\
    \ number[] = [];\n\tlet closing_brackets_number: number[] = [];\n\tlet opening_curly_brackets_number:\
    \ number[] = [];\n\tlet closing_curly_brackets_number: number[] = [];\n\tlet opening_square_curly_brackets_number:\
    \ number[] = [];\n\tlet closing_square_curly_brackets_number: number[] = [];\n\
    \tlet opening_square_brackets_number_number: number[] = [];\n\tlet closing_brackets_number_number:\
    \ number[] = [];\n\tlet opening_curly_brackets_number_number: number[] = [];\n\
    \tlet closing_curly_brackets_number_number: number[] = [];\n\tlet opening_square_curly_brackets_number_number:\
    \ number[] = [];\n\tlet closing_square_curly_brackets_number_number: number[]\
    \ = [];\n\tlet opening_square_brackets_number_number_number: number[] = [];\n\t\
    let closing_brackets_number_number_number: number[] = [];\n\tlet opening_curly_brackets_number_number_number:\
    \ number[] = [];\n\tlet closing_curly_brackets_number_number_number: number[]\
    \ = [];\n\tlet opening_square_curly_brackets_number_number_number: number[] =\
    \ [];\n\tlet closing_square_curly_brackets_number_number_number: number[] = [];\n\
    \tlet opening_square_brackets_number_number_number_number: number[] = [];\n\t\
    let closing_brackets_number_number_number_number: number[] = [];\n\tlet opening_curly_brackets_number_number_number_number:\
    \ number[] = [];\n\tlet closing_curly_brackets_number_number_number_number: number[]\
    \ = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo8738g4q.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738775
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets = string.match(/\\\
    [.*?\\]/g);\n    if (brackets == null) {\n        return false;\n    }\n    for\
    \ (let i = 0; i < brackets.length; i++) {\n        let bracket = brackets[i];\n\
    \        let brackets = bracket.match(/\\[.*?\\]/g);\n        if (brackets ==\
    \ null) {\n            return false;\n        }\n        for (let j = 0; j < brackets.length;\
    \ j++) {\n            let bracket2 = brackets[j];\n            if (bracket2.indexOf(bracket)\
    \ != -1) {\n                return true;\n            }\n        }\n    }\n  \
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa3ozyfd6.ts(22,23): error TS2448: Block-scoped variable
    ''brackets'' used before its declaration.

    '
  timestamp: 1659738775
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let closed_brackets: number[]\
    \ = [];\n    let open_brackets_length: number = 0;\n    let closed_brackets_length:\
    \ number = 0;\n    let open_brackets_counter: number = 0;\n    let closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_length:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_brackets_counter: number = 0;\n    let open_closed_brackets_counter:\
    \ number = 0;\n    let open_closed_\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgwxuxjlk.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738775
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number = 0;\n\tlet close_brackets: number = 0;\n\
    \tlet open_brackets_stack: string[] = [];\n\tlet close_brackets_stack: string[]\
    \ = [];\n\tlet open_brackets_stack_string: string = \"\";\n\tlet close_brackets_stack_string:\
    \ string = \"\";\n\tlet open_brackets_stack_string_index: number = 0;\n\tlet close_brackets_stack_string_index:\
    \ number = 0;\n\tlet open_brackets_stack_string_index2: number = 0;\n\tlet close_brackets_stack_string_index2:\
    \ number = 0;\n\tlet open_brackets_stack_string_index3: number = 0;\n\tlet close_brackets_stack_string_index3:\
    \ number = 0;\n\tlet open_brackets_stack_string_index4: number = 0;\n\tlet close_brackets_stack_string_index4:\
    \ number = 0;\n\tlet open_brackets_stack_string_index5: number = 0;\n\tlet close_brackets_stack_string_index5:\
    \ number = 0;\n\tlet open_brackets_stack_string_index6: number = 0;\n\tlet close_brackets_stack_string_index6:\
    \ number = 0;\n\tlet open_brackets_stack_string_index7: number = 0;\n\tlet close_brackets_stack_string_index7:\
    \ number = 0;\n\tlet open_brackets_stack_string_index8: number = 0;\n\tlet close_brackets_stack_string_index8:\
    \ number = 0;\n\tlet open_brackets_stack_string_index9: number = 0;\n\tlet close_brackets_stack_string_index9:\
    \ number = 0;\n\tlet open_brackets_stack_string_index10: number = 0;\n\tlet close_brackets_stack_string_index10:\
    \ number = 0;\n\tlet open_brackets_stack_string_index11: number = 0;\n\tlet close_brackets_stack_string_index11:\
    \ number = 0;\n\tlet open_brackets_stack_string_index12: number = 0;\n\tlet close_brackets_stack_string_index12:\
    \ number = 0;\n\tlet open_brackets_stack_string_index13: number = 0;\n\tlet close_brackets_stack_string_index13:\
    \ number = 0;\n\tlet open_brackets_stack_string_index14: number = 0;\n\tlet close_brackets_stack_string_index14:\
    \ number = 0;\n\tlet open_brackets_stack_string_index15: number = 0;\n\tlet close_brackets_stack_string_index15:\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpanmuxnux.ts(54,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpanmuxnux.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738769
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    // TODO: Write a function\
    \ that takes a string as input which contains only square brackets.\n    // The\
    \ function should return true if and only if there is a valid subsequence of brackets\
    \ \n    // where at least one bracket in the subsequence is nested.\n    // >>>\
    \ is_nested(\"[[]]\")\n    // true\n    // >>> is_nested(\"[]]]]]]][[[[[]\")\n\
    \    // false\n    // >>> is_nested(\"[][]\")\n    // false\n    // >>> is_nested(\"\
    []\")\n    // false\n    // >>> is_nested(\"[[][]]\")\n    // true\n    // >>>\
    \ is_nested(\"[[]][[\")\n    // true\n    \n    // TODO: Write a function that\
    \ takes a string as input which contains only square brackets.\n    // The function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    \    // where at least one bracket in the subsequence is nested.\n    // >>> is_nested(\"\
    [[]]\")\n    // true\n    // >>> is_nested(\"[]]]]]]][[[[[]\")\n    // false\n\
    \    // >>> is_nested(\"[][]\")\n    // false\n    // >>> is_nested(\"[]\")\n\
    \    // false\n    // >>> is_nested(\"[[][]]\")\n    // true\n    // >>> is_nested(\"\
    [[]][[\")\n    // true\n    \n    // TODO: Write a function that takes a string\
    \ as input which contains only square brackets.\n    // The function should return\
    \ true if and only if there is a valid subsequence of brackets \n    // where\
    \ at least one bracket in the subsequence is nested.\n    // >>> is_nested(\"\
    [[]]\")\n    // true\n    // >>> is_nested(\"[]]]]]]][[[[[]\")\n    // false\n\
    \    // >>> is_nested(\"[][]\")\n    // false\n    // >>> is_nested(\"[]\")\n\
    \    // false\n    // >>> is_nested(\"[[][]]\")\n    // true\n    // >>> is_nested(\"\
    [[]][[\")\n    // true\n    \n    // TODO: Write a function that takes a string\
    \ as input which contains only square brackets.\n    // The function should return\
    \ true if and only if there is a valid subsequence of brackets \n    // where\
    \ at least one bracket in the subsequence is nested.\n    // >>> is_nested(\"\
    [[]]\")\n    // true\n    // >>> is_nested(\"[]]]]]]][[[[[]\")\n    // false\n\
    \    // >>> is_nested(\"[][]\")\n    // false\n    // >>> is_nested(\"[]\")\n\
    \    // false\n    // >>> is_nested(\"[[][]]\")\n    // true\n    // >>> is_nested(\"\
    [[]][[\")\n    // true\n    \n    // TODO: Write a function that takes a string\
    \ as input which contains only \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr10wysy8.ts(104,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738775
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_parens: number[] = [];\n    let close_parens: number[] =\
    \ [];\n    let open_brackets_stack: number[] = [];\n    let close_brackets_stack:\
    \ number[] = [];\n    let open_parens_stack: number[] = [];\n    let close_parens_stack:\
    \ number[] = [];\n    let open_brackets_length = 0;\n    let close_brackets_length\
    \ = 0;\n    let open_parens_length = 0;\n    let close_parens_length = 0;\n  \
    \  let open_brackets_index = 0;\n    let close_brackets_index = 0;\n    let open_parens_index\
    \ = 0;\n    let close_parens_index = 0;\n    let open_brackets_index_stack: number[]\
    \ = [];\n    let close_brackets_index_stack: number[] = [];\n    let open_parens_index_stack:\
    \ number[] = [];\n    let close_parens_index_stack: number[] = [];\n    let open_brackets_index_length\
    \ = 0;\n    let close_brackets_index_length = 0;\n    let open_parens_index_length\
    \ = 0;\n    let close_parens_index_length = 0;\n    let open_brackets_index_index\
    \ = 0;\n    let close_brackets_index_index = 0;\n    let open_parens_index_index\
    \ = 0;\n    let close_parens_index_index = 0;\n    let open_brackets_index_index_stack:\
    \ number[] = [];\n    let close_brackets_index_index_stack: number[] = [];\n \
    \   let open_parens_index_index_stack: number[] = [];\n    let close_parens_index_index_stack:\
    \ number[] = [];\n    let open_brackets_index_index_length = 0;\n    let close_brackets_index_index_length\
    \ = 0;\n    let open_parens_index_index_length = 0;\n    let close_parens_index_index_length\
    \ = 0;\n    let open_brackets_index_index_index = 0;\n    let close_brackets_index_index_index\
    \ = 0;\n    let open_parens_index_index_index = 0;\n    let close_parens_index_index_index\
    \ = 0;\n    let open_brackets_index_index_index_stack: number[] = [];\n    let\
    \ close_brackets_index_index_index_stack: number[] = [];\n    let open_parens_index_index_index_stack:\
    \ number[] = [];\n    let close_parens_index_index_index_stack: number[] = [];\n\
    \    let open_brackets_index_index_index_length = 0;\n    let close_brackets_index_index_index_length\
    \ = 0;\n    let open_parens_index_index_index_length = 0;\n    let close_parens_index_index_index_length\
    \ = 0;\n    let open_brackets_index_index_index_\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprbigeecg.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738775
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ == \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ == \"]\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmxd9c9n6.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmxd9c9n6.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: string[]\
    \ = string.split(\"\");\n\tlet open_brackets: number[] = [];\n\tlet closed_brackets:\
    \ number[] = [];\n\tlet open_brackets_size: number[] = [];\n\tlet closed_brackets_size:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number[] = [];\n\tlet open_brackets_position: number[] = [];\n\tlet closed_brackets_position:\
    \ number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9aueblj5.ts(84,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738775
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            brackets.push(i);\n        } else if (string[i] ===\
    \ \"]\") {\n            close_brackets.push(i);\n        } else if (string[i]\
    \ === \"[\") {\n            open_brackets.push(i);\n        }\n    }\n    if (brackets.length\
    \ === 0) {\n        return false;\n    }\n    for (let i = 0; i < open_brackets.length;\
    \ i++) {\n        if (close_brackets.indexOf(open_brackets[i]) > -1) {\n     \
    \       return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplje8i74q.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplje8i74q.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738775
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push('[');\n        } else if\
    \ (char === ']') {\n            if (stack.length !== 0) return false;\n      \
    \      stack.pop();\n        } else if (char === '[' || char === ']') {\n    \
    \        if (stack.length !== 0) return false;\n            stack.push(char);\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfodgq2ie.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfodgq2ie.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738775
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: string[]\
    \ = string.split(\"\");\n    let stack: string[] = [];\n    for (let i = 0; i\
    \ < brackets.length; i++) {\n        if (brackets[i] == \"[\" || brackets[i] ==\
    \ \"(\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ == \"]\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8ovdqlnx.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8ovdqlnx.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push(\"[\" + char);\n        }\
    \ else if (char === ']') {\n            if (stack.length !== 1) {\n          \
    \      return false;\n            }\n            stack.pop();\n        } else\
    \ if (char === '[' || char === ']') {\n            if (stack.length !== 1) {\n\
    \                return false;\n            }\n            stack.pop();\n    \
    \    } else {\n            if (stack.length !== 1) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprc969mh7.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprc969mh7.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    // Your code here\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn8plkxzd.ts(16,37): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1659738776
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: string[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_parens: number[] = [];\n    let close_parens: number[] =\
    \ [];\n    let open_brackets_stack: number[] = [];\n    let close_brackets_stack:\
    \ number[] = [];\n    let open_parens_stack: number[] = [];\n    let close_parens_stack:\
    \ number[] = [];\n    let open_parens_stack_index: number = 0;\n    let close_parens_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_string: string = \"\";\n    let close_brackets_stack_string:\
    \ string = \"\";\n    let open_parens_stack_string: string = \"\";\n    let close_parens_stack_string:\
    \ string = \"\";\n    let open_parens_stack_index: number = 0;\n    let close_parens_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_string: string = \"\";\n    let close_brackets_stack_string:\
    \ string = \"\";\n    let open_parens_stack_string: string = \"\";\n    let close_parens_stack_string:\
    \ string = \"\";\n    let open_parens_stack_index: number = 0;\n    let close_parens_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_string: string = \"\";\n    let close_brackets_stack_string:\
    \ string = \"\";\n    let open_parens_stack_string: string = \"\";\n    let close_parens_stack_string:\
    \ string = \"\";\n    let open_parens_stack_index: number = 0;\n    let close_parens_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_string: string = \"\";\n    let close_brackets_stack_string:\
    \ string = \"\";\n    let open_parens_stack_string: string = \"\";\n    let close_parens_stack_string:\
    \ string = \"\";\n    let open_parens_stack_index: number = 0;\n    let close_parens_stack_index:\
    \ number = 0;\n    let open_brackets_stack_index: number = 0;\n    let close_brackets_stack_index:\
    \ number = 0;\n    let open_brackets_stack_string: string = \"\";\n    let close_brackets_stack_string:\
    \ string = \"\";\n    let open_parens_stack_string: string = \"\";\n    let close_parens_stack_string:\
    \ string = \"\";\n    let open_parens_stack\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphdj016y6.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738776
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            let openBracket = stack.pop();\n        \
    \    if (openBracket !== \"[\") {\n                return false;\n           \
    \ }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n \
    \   }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpuj78n921.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuj78n921.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_stack: string[] = [];\n\tlet close_brackets_stack:\
    \ string[] = [];\n\tlet open_brackets_stack_index: number[] = [];\n\tlet close_brackets_stack_index:\
    \ number[] = [];\n\tlet open_brackets_stack_string: string[] = [];\n\tlet close_brackets_stack_string:\
    \ string[] = [];\n\tlet open_brackets_stack_string_index: number[] = [];\n\tlet\
    \ close_brackets_stack_string_index: number[] = [];\n\tlet open_brackets_stack_string_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string_string: string[] = [];\n\t\
    let open_brackets_stack_string_string_index: number[] = [];\n\tlet close_brackets_stack_string_string_index:\
    \ number[] = [];\n\tlet open_brackets_stack_string_string_string: string[] = [];\n\
    \tlet close_brackets_stack_string_string_string: string[] = [];\n\tlet open_brackets_stack_string_string_string_index:\
    \ number[] = [];\n\tlet close_brackets_stack_string_string_string_index: number[]\
    \ = [];\n\tlet open_brackets_stack_string_string_string_string: string[] = [];\n\
    \tlet close_brackets_stack_string_string_string: string[] = [];\n\tlet open_brackets_stack_string_string_string_index:\
    \ number[] = [];\n\tlet close_brackets_stack_string_string_string_index: number[]\
    \ = [];\n\tlet open_brackets_stack_string_string_string_string: string[] = [];\n\
    \tlet close_brackets_stack_string_string_string: string[] = [];\n\tlet open_brackets_stack_string_string_string_string_index:\
    \ number[] = [];\n\tlet close_brackets_stack_string_string_string_string_index:\
    \ number[] = [];\n\tlet open_brackets_stack_string_string_string_string: string[]\
    \ = [];\n\tlet close_brackets_stack_string_string_string: string[] = [];\n\tlet\
    \ open_brackets_stack_string_string_string_string_index: number[] = [];\n\tlet\
    \ close_brackets_stack_string_string_string_string_index: number[] = [];\n\tlet\
    \ open_brackets_stack_string_string_string_string: string[] = [];\n\tlet close_brackets_stack_string_string_string:\
    \ string[] = [];\n\tlet open_brackets_stack_string_string_string_string_index:\
    \ number[] = [];\n\tlet close\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprg3wmjms.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738777
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let open_brackets:\
    \ number[] = [];\n    let closed_brackets: number[] = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            open_brackets.push(i);\n\
    \        } else if (string[i] === \"]\") {\n            closed_brackets.push(i);\n\
    \        }\n    }\n    if (open_brackets.length !== closed_brackets.length) {\n\
    \        return false;\n    }\n    for (let i = 0; i < open_brackets.length; i++)\
    \ {\n        let open_bracket = open_brackets[i];\n        let closed_bracket\
    \ = closed_brackets[i];\n        if (open_bracket === closed_bracket) {\n    \
    \        continue;\n        }\n        let open_brackets_count = open_brackets.length;\n\
    \        let closed_brackets_count = closed_brackets.length;\n        let open_brackets_index\
    \ = open_bracket;\n        let closed_brackets_index = closed_bracket;\n     \
    \   while (open_brackets_count > 0 && closed_brackets_count > 0) {\n         \
    \   if (open_brackets[open_brackets_index] === closed_brackets[closed_brackets_index])\
    \ {\n                open_brackets_count--;\n                closed_brackets_count--;\n\
    \            } else {\n                break;\n            }\n            open_brackets_index++;\n\
    \            closed_brackets_index++;\n        }\n        if (open_brackets_count\
    \ === 0 && closed_brackets_count === 0) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpodegdjx7.js:60:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpodegdjx7.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_parens: number[] = [];\n    let close_parens: number[] =\
    \ [];\n    let open_brackets_stack: number[] = [];\n    let close_brackets_stack:\
    \ number[] = [];\n    let open_parens_stack: number[] = [];\n    let close_parens_stack:\
    \ number[] = [];\n    let open_brackets_length = 0;\n    let close_brackets_length\
    \ = 0;\n    let open_parens_length = 0;\n    let close_parens_length = 0;\n  \
    \  let open_brackets_index = 0;\n    let close_brackets_index = 0;\n    let open_parens_index\
    \ = 0;\n    let close_parens_index = 0;\n    let open_brackets_index_stack: number[]\
    \ = [];\n    let close_brackets_index_stack: number[] = [];\n    let open_parens_index_stack:\
    \ number[] = [];\n    let close_parens_index_stack: number[] = [];\n    let open_brackets_index_length\
    \ = 0;\n    let close_brackets_index_length = 0;\n    let open_parens_index_length\
    \ = 0;\n    let close_parens_index_length = 0;\n    let open_brackets_index_index\
    \ = 0;\n    let close_brackets_index_index = 0;\n    let open_parens_index_index\
    \ = 0;\n    let close_parens_index_index = 0;\n    let open_brackets_index_index_stack:\
    \ number[] = [];\n    let close_brackets_index_index_stack: number[] = [];\n \
    \   let open_parens_index_index_stack: number[] = [];\n    let close_parens_index_index_stack:\
    \ number[] = [];\n    let open_brackets_index_index_length = 0;\n    let close_brackets_index_index_length\
    \ = 0;\n    let open_parens_index_index_length = 0;\n    let close_parens_index_index_length\
    \ = 0;\n    let open_brackets_index_index_index = 0;\n    let close_brackets_index_index_index\
    \ = 0;\n    let open_parens_index_index_index = 0;\n    let close_parens_index_index_index\
    \ = 0;\n    let open_brackets_index_index_index_stack: number[] = [];\n    let\
    \ close_brackets_index_index_index_stack: number[] = [];\n    let open_parens_index_index_index_stack:\
    \ number[] = [];\n    let close_parens_index_index_index_stack: number[] = [];\n\
    \    let open_brackets_index_index_index_length = 0;\n    let close_brackets_index_index_index_length\
    \ = 0;\n    let open_parens_index_index_index_length = 0;\n    let close_parens_index_index_index_length\
    \ = 0;\n    let open_brackets_index_index_index_\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprbigeecg.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738775
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let opening_brackets:\
    \ number[] = [];\n    let closing_brackets: number[] = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            opening_brackets.push(i);\n\
    \        } else if (string[i] === \"]\") {\n            closing_brackets.push(i);\n\
    \        }\n    }\n    if (opening_brackets.length !== closing_brackets.length)\
    \ {\n        return false;\n    }\n    for (let i = 0; i < opening_brackets.length;\
    \ i++) {\n        let opening_bracket = opening_brackets[i];\n        let closing_bracket\
    \ = closing_brackets[i];\n        if (opening_bracket === closing_bracket) {\n\
    \            continue;\n        }\n        let opening_brackets_count = opening_brackets\
    \ - closing_bracket;\n        if (opening_brackets_count === 1) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsekmx7g5.ts(35,38): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1659738777
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_parens: number[] = [];\n\tlet close_parens: number[] = [];\n\
    \tlet open_brackets_stack: number[] = [];\n\tlet close_brackets_stack: number[]\
    \ = [];\n\tlet open_parens_stack: number[] = [];\n\tlet close_parens_stack: number[]\
    \ = [];\n\tlet open_brackets_size: number = 0;\n\tlet close_brackets_size: number\
    \ = 0;\n\tlet open_parens_size: number = 0;\n\tlet close_parens_size: number =\
    \ 0;\n\tlet open_brackets_index: number = 0;\n\tlet close_brackets_index: number\
    \ = 0;\n\tlet open_parens_index: number = 0;\n\tlet close_parens_index: number\
    \ = 0;\n\tlet open_brackets_index_stack: number[] = [];\n\tlet close_brackets_index_stack:\
    \ number[] = [];\n\tlet open_parens_index_stack: number[] = [];\n\tlet close_parens_index_stack:\
    \ number[] = [];\n\tlet open_brackets_index_size: number = 0;\n\tlet close_brackets_index_size:\
    \ number = 0;\n\tlet open_parens_index_size: number = 0;\n\tlet close_parens_index_size:\
    \ number = 0;\n\tlet open_brackets_index_index_stack: number[] = [];\n\tlet close_brackets_index_index_stack:\
    \ number[] = [];\n\tlet open_parens_index_index_stack: number[] = [];\n\tlet close_parens_index_index_stack:\
    \ number[] = [];\n\tlet open_brackets_index_index_size: number = 0;\n\tlet close_brackets_index_index_size:\
    \ number = 0;\n\tlet open_parens_index_index_size: number = 0;\n\tlet close_parens_index_index_size:\
    \ number = 0;\n\tlet open_brackets_index_index_index_stack: number[] = [];\n\t\
    let close_brackets_index_index_index_stack: number[] = [];\n\tlet open_parens_index_index_index_stack:\
    \ number[] = [];\n\tlet close_parens_index_index_index_stack: number[] = [];\n\
    \tlet open_brackets_index_index_index_size: number = 0;\n\tlet close_brackets_index_index_index_size:\
    \ number = 0;\n\tlet open_parens_index_index_index_size: number = 0;\n\tlet close_parens_index_index_index_size:\
    \ number = 0;\n\tlet open_brackets_index_index_index_index_stack: number[] = [];\n\
    \tlet close_brackets_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcf89ofz1.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738777
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzly6bjdc.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzly6bjdc.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738765
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ == \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ == \"]\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmxd9c9n6.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmxd9c9n6.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    const stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            const top = stack.pop();\n            if\
    \ (top !== '[' || stack.length === 0) {\n                return false;\n     \
    \       }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8qb7qq0l.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8qb7qq0l.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738774
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push('[');\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            let openBracket = stack.pop();\n        \
    \    if (openBracket !== '[') {\n                return false;\n            }\n\
    \        } else if (char === '\\'') {\n            stack.push('\\'');\n      \
    \  } else if (char === '\\'') {\n            if (stack.length === 0) {\n     \
    \           return false;\n            }\n            let openQuote = stack.pop();\n\
    \            if (openQuote !== '\\'') {\n                return false;\n     \
    \       }\n        }\n    }\n    if (stack.length > 0) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphen41nqj.js:55:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphen41nqj.js:68:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let open_brackets:\
    \ number[] = [];\n    let closed_brackets: number[] = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\")\n            open_brackets.push(i);\n\
    \        if (string[i] === \"]\")\n            closed_brackets.push(i);\n    }\n\
    \    if (open_brackets.length !== closed_brackets.length)\n        return false;\n\
    \    for (let i = 0; i < open_brackets.length; i++) {\n        let open = open_brackets[i];\n\
    \        let close = closed_brackets[i];\n        if (open < close && string[open\
    \ + 1] === string[close])\n            return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyha6md9j.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyha6md9j.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            brackets.push(i);\n            open_brackets.push(i);\n\
    \        } else if (string[i] === \"]\") {\n            close_brackets.push(i);\n\
    \        }\n    }\n    if (brackets.length === 0) {\n        return false;\n \
    \   }\n    for (let i = 0; i < brackets.length; i++) {\n        let start = brackets[i];\n\
    \        let end = close_brackets[i];\n        if (start === end) {\n        \
    \    continue;\n        }\n        let open_bracket = open_brackets[i];\n    \
    \    let close_bracket = close_brackets[i];\n        if (open_bracket === close_bracket)\
    \ {\n            continue;\n        }\n        if (open_bracket > end) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphqsmf8vt.js:54:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphqsmf8vt.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_index: number[] = [];\n\tlet close_brackets_index:\
    \ number[] = [];\n\tlet open_brackets_length: number[] = [];\n\tlet close_brackets_length:\
    \ number[] = [];\n\tlet open_brackets_length_index: number[] = [];\n\tlet close_brackets_length_index:\
    \ number[] = [];\n\tlet open_brackets_length_length: number[] = [];\n\tlet close_brackets_length_length:\
    \ number[] = [];\n\tlet open_brackets_length_length_index: number[] = [];\n\t\
    let close_brackets_length_length_index: number[] = [];\n\tlet open_brackets_length_length_length:\
    \ number[] = [];\n\tlet close_brackets_length_length_length: number[] = [];\n\t\
    let open_brackets_length_length_length_index: number[] = [];\n\tlet close_brackets_length_length_length_index:\
    \ number[] = [];\n\tlet open_brackets_length_length_length_length: number[] =\
    \ [];\n\tlet close_brackets_length_length_length_length: number[] = [];\n\tlet\
    \ open_brackets_length_length_length_length_index: number[] = [];\n\tlet close_brackets_length_length_length_length_index:\
    \ number[] = [];\n\tlet open_brackets_length_length_length_length_length: number[]\
    \ = [];\n\tlet close_brackets_length_length_length_length_length: number[] = [];\n\
    \tlet open_brackets_length_length_length_length_length_index: number[] = [];\n\
    \tlet close_brackets_length_length_length_length_length_index: number[] = [];\n\
    \tlet open_brackets_length_length_length_length_length_length: number[] = [];\n\
    \tlet close_brackets_length_length_length_length_length_length: number[] = [];\n\
    \tlet open_brackets_length_length_length_length_length_length_index: number[]\
    \ = [];\n\tlet close_brackets_length_length_length_length_length_length_index:\
    \ number[] = [];\n\tlet open_brackets_length_length_length_length_length_length_length:\
    \ number[] = [];\n\tlet close_brackets_length_length_length_length_length_length_length:\
    \ number[] = [];\n\tlet open_brackets_length_length_length_length_length_length_length_index:\
    \ number[] = [];\n\tlet close_brackets_length_length_length_length_length_length_length_index:\
    \ number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmev0oohw.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738777
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let bracketCount =\
    \ 0;\n    let openingBracketCount = 0;\n    let closingBracketCount = 0;\n   \
    \ let openingBrackets: number[] = [];\n    let closingBrackets: number[] = [];\n\
    \n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (char === '[') {\n            openingBracketCount++;\n           \
    \ openingBrackets.push(openingBracketCount);\n        } else if (char === ']')\
    \ {\n            closingBracketCount++;\n            closingBrackets.push(closingBracketCount);\n\
    \        } else if (char === '[' && openingBracketCount > 0) {\n            openingBracketCount--;\n\
    \        } else if (char === ']' && closingBracketCount > 0) {\n            closingBracketCount--;\n\
    \        }\n    }\n\n    if (openingBracketCount > closingBracketCount) {\n  \
    \      return true;\n    }\n\n    for (let i = 0; i < openingBrackets.length;\
    \ i++) {\n        const openingBracket = openingBrackets[i];\n        const closingBracket\
    \ = closingBrackets[i];\n        if (openingBracket < closingBracket) {\n    \
    \        return true;\n        }\n    }\n\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb4e3iguy.js:54:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb4e3iguy.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_brackets_size: number = 0;\n    let close_brackets_size:\
    \ number = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            open_brackets_size++;\n            open_brackets.push(i);\n\
    \        } else if (string[i] === \"]\") {\n            close_brackets_size++;\n\
    \            close_brackets.push(i);\n        } else if (string[i] === \"[\")\
    \ {\n            open_brackets_size++;\n        } else if (string[i] === \"]\"\
    ) {\n            close_brackets_size++;\n        }\n    }\n    if (open_brackets_size\
    \ === close_brackets_size) {\n        for (let i = 0; i < open_brackets.length;\
    \ i++) {\n            let start = open_brackets[i];\n            let end = close_brackets[i];\n\
    \            let substr = string.substring(start, end);\n            if (substr.indexOf(\"\
    [\") !== -1 && substr.indexOf(\"]\") !== -1) {\n                return true;\n\
    \            }\n        }\n        return false;\n    }\n    return false;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6oir1bkp.js:63:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6oir1bkp.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[]\
    \ = [];\n\tlet opening_quotes: number[] = [];\n\tlet closing_quotes: number[]\
    \ = [];\n\tlet opening_curly_brackets: number[] = [];\n\tlet closing_curly_brackets:\
    \ number[] = [];\n\tlet opening_square_brackets: number[] = [];\n\tlet closing_square_brackets:\
    \ number[] = [];\n\tlet opening_curly_brace: number[] = [];\n\tlet closing_curly_brace:\
    \ number[] = [];\n\tlet opening_square_brace: number[] = [];\n\tlet closing_square_brace:\
    \ number[] = [];\n\tlet opening_curly_brace_pair: number[] = [];\n\tlet closing_curly_brace_pair:\
    \ number[] = [];\n\tlet opening_square_brace_pair: number[] = [];\n\tlet closing_square_brace_pair:\
    \ number[] = [];\n\tlet opening_curly_brace_pair_pair: number[] = [];\n\tlet closing_curly_brace_pair_pair:\
    \ number[] = [];\n\tlet opening_square_brace_pair_pair: number[] = [];\n\tlet\
    \ closing_square_brace_pair_pair: number[] = [];\n\tlet opening_curly_brace_pair_pair_pair:\
    \ number[] = [];\n\tlet closing_curly_brace_pair_pair_pair: number[] = [];\n\t\
    let opening_square_brace_pair_pair_pair: number[] = [];\n\tlet closing_square_brace_pair_pair_pair:\
    \ number[] = [];\n\tlet opening_curly_brace_pair_pair_pair_pair: number[] = [];\n\
    \tlet closing_curly_brace_pair_pair_pair_pair: number[] = [];\n\tlet opening_square_brace_pair_pair_pair_pair:\
    \ number[] = [];\n\tlet closing_square_brace_pair_pair_pair_pair: number[] = [];\n\
    \tlet opening_curly_brace_pair_pair_pair_pair_pair: number[] = [];\n\tlet closing_curly_brace_pair_pair_pair_pair_pair:\
    \ number[] = [];\n\tlet opening_square_brace_pair_pair_pair_pair_pair: number[]\
    \ = [];\n\tlet closing_square_brace_pair_pair_pair_pair_pair: number[] = [];\n\
    \tlet opening_curly_brace_pair_pair_pair_pair_pair_pair: number[] = [];\n\tlet\
    \ closing_curly_brace_pair_pair_pair_pair_pair_pair: number[] = [];\n\tlet opening_square_b\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgyzw6pe_.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738777
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_brackets_stack: number[] = [];\n    let close_brackets_stack:\
    \ number[] = [];\n    let open_stack: number[] = [];\n    let close_stack: number[]\
    \ = [];\n    let open_stack_index: number = 0;\n    let close_stack_index: number\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === \"[\") {\n            brackets.push(open_stack_index);\n\
    \            open_brackets.push(open_stack_index);\n            open_stack.push(open_stack_index);\n\
    \            open_brackets_stack.push(open_stack_index);\n            open_stack_index++;\n\
    \        } else if (char === \"]\") {\n            close_brackets.push(close_stack_index);\n\
    \            close_brackets_stack.push(close_stack_index);\n            close_stack.push(close_stack_index);\n\
    \            close_brackets_stack.push(close_stack_index);\n            close_stack_index++;\n\
    \        } else if (char === \"]\") {\n            close_brackets.push(close_stack_index);\n\
    \            close_brackets_stack.push(close_stack_index);\n            close_stack.push(close_stack_index);\n\
    \            close_brackets_stack.push(close_stack_index);\n            close_stack_index++;\n\
    \        } else if (char === \"[\") {\n            open_brackets.push(open_stack_index);\n\
    \            open_stack.push(open_stack_index);\n            open_brackets_stack.push(open_stack_index);\n\
    \            open_stack_index++;\n        } else if (char === \"]\") {\n     \
    \       open_brackets.push(open_stack_index);\n            open_stack.push(open_stack_index);\n\
    \            open_brackets_stack.push(open_stack_index);\n            open_stack_index++;\n\
    \        } else {\n            open_stack.push(open_stack_index);\n          \
    \  open_stack_index++;\n        }\n    }\n    for (let i = 0; i < open_brackets.length;\
    \ i++) {\n        if (open_brackets[i] === close_brackets[i]) {\n            return\
    \ false;\n        }\n    }\n    for (let i = 0; i < open_brackets.length; i++)\
    \ {\n        if (open_brackets[i] === close_brackets_stack[i]) {\n           \
    \ return false;\n        }\n    }\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === close_brackets_stack[i]) {\n            return\
    \ false;\n        }\n    }\n    for (let i = 0; i < brackets.length; i++) {\n\
    \        if (brackets[i] === open_brackets_stack[i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfppstt2j.js:91:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfppstt2j.js:106:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738777
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_length: number[] = [];\n\tlet close_brackets_length:\
    \ number[] = [];\n\tlet open_parens: number[] = [];\n\tlet close_parens: number[]\
    \ = [];\n\tlet open_parens_length: number[] = [];\n\tlet close_parens_length:\
    \ number[] = [];\n\tlet open_brackets_index: number[] = [];\n\tlet close_brackets_index:\
    \ number[] = [];\n\tlet open_parens_index: number[] = [];\n\tlet close_parens_index:\
    \ number[] = [];\n\tlet open_brackets_index_length: number[] = [];\n\tlet close_brackets_index_length:\
    \ number[] = [];\n\tlet open_parens_index_length: number[] = [];\n\tlet close_parens_index_length:\
    \ number[] = [];\n\tlet open_brackets_index_count: number[] = [];\n\tlet close_brackets_index_count:\
    \ number[] = [];\n\tlet open_parens_index_count: number[] = [];\n\tlet close_parens_index_count:\
    \ number[] = [];\n\tlet open_brackets_index_count_length: number[] = [];\n\tlet\
    \ close_brackets_index_count_length: number[] = [];\n\tlet open_parens_index_count_length:\
    \ number[] = [];\n\tlet close_parens_index_count_length: number[] = [];\n\tlet\
    \ open_brackets_index_count_index: number[] = [];\n\tlet close_brackets_index_count_index:\
    \ number[] = [];\n\tlet open_parens_index_count_index: number[] = [];\n\tlet close_parens_index_count_index:\
    \ number[] = [];\n\tlet open_brackets_index_count_index_length: number[] = [];\n\
    \tlet close_brackets_index_count_index_length: number[] = [];\n\tlet open_parens_index_count_index_length:\
    \ number[] = [];\n\tlet close_parens_index_count_index_length: number[] = [];\n\
    \tlet open_brackets_index_count_index_count: number[] = [];\n\tlet close_brackets_index_count_index_count:\
    \ number[] = [];\n\tlet open_parens_index_count_index_count: number[] = [];\n\t\
    let close_parens_index_count_index_count: number[] = [];\n\tlet open_brackets_index_count_index_count_length:\
    \ number[] = [];\n\tlet close_brackets_index_count_index_count_length: number[]\
    \ = [];\n\tlet open_parens_index_count_index_count_length: number[] = [];\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnfp1lpnb.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738777
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: number[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    let open_brackets_index: number[] = [];\n    let close_brackets_index:\
    \ number[] = [];\n    let open_brackets_length: number[] = [];\n    let close_brackets_length:\
    \ number[] = [];\n    let open_brackets_length_index: number[] = [];\n    let\
    \ close_brackets_length_index: number[] = [];\n    let open_brackets_length_index2:\
    \ number[] = [];\n    let close_brackets_length_index2: number[] = [];\n    let\
    \ open_brackets_length_index3: number[] = [];\n    let close_brackets_length_index3:\
    \ number[] = [];\n    let open_brackets_length_index4: number[] = [];\n    let\
    \ close_brackets_length_index4: number[] = [];\n    let open_brackets_length_index5:\
    \ number[] = [];\n    let close_brackets_length_index5: number[] = [];\n    let\
    \ open_brackets_length_index6: number[] = [];\n    let close_brackets_length_index6:\
    \ number[] = [];\n    let open_brackets_length_index7: number[] = [];\n    let\
    \ close_brackets_length_index7: number[] = [];\n    let open_brackets_length_index8:\
    \ number[] = [];\n    let close_brackets_length_index8: number[] = [];\n    let\
    \ open_brackets_length_index9: number[] = [];\n    let close_brackets_length_index9:\
    \ number[] = [];\n    let open_brackets_length_index10: number[] = [];\n    let\
    \ close_brackets_length_index10: number[] = [];\n    let open_brackets_length_index11:\
    \ number[] = [];\n    let close_brackets_length_index11: number[] = [];\n    let\
    \ open_brackets_length_index12: number[] = [];\n    let close_brackets_length_index12:\
    \ number[] = [];\n    let open_brackets_length_index13: number[] = [];\n    let\
    \ close_brackets_length_index13: number[] = [];\n    let open_brackets_length_index14:\
    \ number[] = [];\n    let close_brackets_length_index14: number[] = [];\n    let\
    \ open_brackets_length_index15: number[] = [];\n    let close_brackets_length_index15:\
    \ number[] = [];\n    let open_brackets_length_index16: number[] = [];\n    let\
    \ close_brackets_length_index16: number[] = [];\n    let \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj0fquzq1.ts(57,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpj0fquzq1.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738777
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_curly: number[] = [];\n\tlet close_curly: number[] = [];\n\t\
    let open_paren: number[] = [];\n\tlet close_paren: number[] = [];\n\tlet open_brackets_stack:\
    \ string[] = [];\n\tlet close_brackets_stack: string[] = [];\n\tlet open_curly_stack:\
    \ string[] = [];\n\tlet close_curly_stack: string[] = [];\n\tlet open_paren_stack:\
    \ string[] = [];\n\tlet close_paren_stack: string[] = [];\n\tlet open_brackets_stack_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string: string[] = [];\n\tlet open_curly_stack_string:\
    \ string[] = [];\n\tlet close_curly_stack_string: string[] = [];\n\tlet open_paren_stack_string:\
    \ string[] = [];\n\tlet close_paren_stack_string: string[] = [];\n\tlet open_brackets_stack_string_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string_string: string[] = [];\n\t\
    let open_curly_stack_string_string: string[] = [];\n\tlet close_curly_stack_string_string:\
    \ string[] = [];\n\tlet open_paren_stack_string_string: string[] = [];\n\tlet\
    \ close_paren_stack_string_string: string[] = [];\n\tlet open_brackets_stack_string_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string_string: string[] = [];\n\t\
    let open_curly_stack_string_string: string[] = [];\n\tlet close_curly_stack_string_string:\
    \ string[] = [];\n\tlet open_paren_stack_string_string: string[] = [];\n\tlet\
    \ close_paren_stack_string_string: string[] = [];\n\tlet open_brackets_stack_string_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string_string: string[] = [];\n\t\
    let open_curly_stack_string_string: string[] = [];\n\tlet close_curly_stack_string_string:\
    \ string[] = [];\n\tlet open_paren_stack_string_string: string[] = [];\n\tlet\
    \ close_paren_stack_string_string: string[] = [];\n\tlet open_brackets_stack_string_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string_string: string[] = [];\n\t\
    let open_curly_stack_string_string: string[] = [];\n\tlet close_curly_stack_string_string:\
    \ string[] = [];\n\tlet open_paren_stack_string_string: string[] = [];\n\tlet\
    \ close_paren_stack_string_string: string[] = [];\n\tlet open_brackets_\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpknawfccx.ts(83,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738777
- exit_code: 1
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n    let brackets: string[]\
    \ = string.split(\"\");\n    for (let i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] == \"[\" || brackets[i] == \"(\") {\n            if (brackets[i\
    \ + 1] == \"[\" || brackets[i + 1] == \"(\") {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsdbf_8vd.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsdbf_8vd.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738778
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet closed_brackets: number[]\
    \ = [];\n\tlet open_brackets_stack: number[] = [];\n\tlet closed_brackets_stack:\
    \ number[] = [];\n\tlet open_stack: number[] = [];\n\tlet close_stack: number[]\
    \ = [];\n\tlet open_stack_index: number = 0;\n\tlet close_stack_index: number\
    \ = 0;\n\tlet open_stack_string: string = \"\";\n\tlet close_stack_string: string\
    \ = \"\";\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index: number = 0;\n\tlet close_stack_string_index:\
    \ number = 0;\n\tlet open_stack_string_index\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo40ddtok.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738777
- exit_code: 2
  program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return true if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n\
    // false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n\
    // true\nfunction is_nested(string: string): boolean {\n\tlet brackets: number[]\
    \ = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[]\
    \ = [];\n\tlet opening_opening_brackets: number[] = [];\n\tlet opening_closing_brackets:\
    \ number[] = [];\n\tlet closing_brackets_opening_brackets: number[] = [];\n\t\
    let closing_brackets_closing_brackets: number[] = [];\n\tlet opening_closing_brackets_opening_brackets:\
    \ number[] = [];\n\tlet opening_closing_brackets_closing_brackets: number[] =\
    \ [];\n\tlet opening_opening_brackets_closing_brackets_opening_brackets: number[]\
    \ = [];\n\tlet opening_opening_brackets_closing_brackets_closing_brackets: number[]\
    \ = [];\n\tlet opening_opening_brackets_opening_brackets_closing_brackets_opening_brackets:\
    \ number[] = [];\n\tlet opening_opening_brackets_opening_brackets_closing_brackets_closing_brackets:\
    \ number[] = [];\n\tlet opening_opening_brackets_opening_brackets_opening_brackets_closing_brackets_opening_brackets:\
    \ number[] = [];\n\tlet opening_opening_brackets_opening_brackets_opening_brackets_opening_brackets_closing_brackets_closing_brackets:\
    \ number[] = [];\n\tlet opening_opening_brackets_opening_brackets_opening_brackets_opening_brackets_opening_brackets_closing_brackets_opening_brackets_closing_brackets:\
    \ number[] = [];\n\tlet opening_opening_brackets_opening_brackets_opening_brackets_opening_brackets_opening_brackets_opening_brackets_opening_brackets_closing_brackets_closing_brackets:\
    \ number[] = [];\n\tlet opening_opening_brackets_opening_brackets_opening_brackets_opening_brackets_opening_brackets_opening_brackets_opening_brackets_opening_brackets_opening_brackets_closing_brackets_closing_brackets:\
    \ number[] = [];\n\tlet opening_opening_bracket\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpei_whr8y.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738778
