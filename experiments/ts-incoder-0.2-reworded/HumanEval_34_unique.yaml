name: HumanEval_34_unique
language: ts
prompt: "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = unique;\n  assert.deepEqual(candidate([5, 3, 5, 2,\
  \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);\n}\n\ntest();"
completions: ["\tconst u: number[] = [];\n\tfor (let i = 0; i < l.length; i++) {\n\
    \t\tif (u.indexOf(l[i]) === -1) {\n\t\t\tu.push(l[i]);\n\t\t}\n\t}\n\treturn u;\n\
    }\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n   \
    \ if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n\
    }\n", "  return l.filter((v, i, a) => a.indexOf(v) === i);\n}\n", "\tconst a:\
    \ number[] = [];\n\tfor (let i = 0; i < l.length; i++) {\n\t\tconst v = l[i];\n\
    \t\tif (a.indexOf(v) < 0) {\n\t\t\ta.push(v);\n\t\t}\n\t}\n\treturn a;\n}\n",
  "  const a: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i])\
    \ === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  const u: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1)\
    \ {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const a: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1)\
    \ {\n      a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  const u: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1)\
    \ {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const u: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1)\
    \ {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "\tconst a: number[]\
    \ = [];\n\tfor (let i = 0; i < l.length; i++) {\n\t\tconst v = l[i];\n\t\tif (a.indexOf(v)\
    \ === -1) {\n\t\t\ta.push(v);\n\t\t}\n\t}\n\treturn a;\n}\n", "  const a: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1)\
    \ {\n      a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  const u: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1)\
    \ {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const u: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1)\
    \ {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const o = new Set<number>();\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (o.has(+l[i])) {\n      continue;\n\
    \    }\n    o.add(+l[i]);\n  }\n  return Array.from(o);\n}\n", "  const a: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1)\
    \ {\n      a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  return l.filter((v,\
    \ i, a) => a.indexOf(v) === i);\n}\n", "  const u: number[] = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  return l.filter((v, i, a) => a.indexOf(v) ===\
    \ i);\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return\
    \ u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return\
    \ u;\n}\n", "\tlet u: number[] = [];\n\tfor (let i = 0; i < l.length; i++) {\n\
    \t\tif (u.indexOf(l[i]) === -1) {\n\t\t\tu.push(l[i]);\n\t\t}\n\t}\n\treturn u;\n\
    }\n", "\tconst a: number[] = [];\n\tfor (let i = 0; i < l.length; i++) {\n\t\t\
    const v = l[i];\n\t\tif (a.indexOf(v) < 0) {\n\t\t\ta.push(v);\n\t\t}\n\t}\n\t\
    return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (u.indexOf(+l[i]) === -1) {\n      u.push(+l[i]);\n    }\n  }\n  return\
    \ u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return\
    \ u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return\
    \ u;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n}\n", "  const\
    \ u: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i])\
    \ === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const u: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1)\
    \ {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const o = new Set<number>();\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (!o.has(l[i])) {\n      o.add(l[i]);\n\
    \    }\n  }\n  return Array.from(o);\n}\n", "  const u: number[] = [];\n  for\
    \ (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "\tconst a: number[] = [];\n\tfor (let i = 0;\
    \ i < l.length; i++) {\n\t\tif (a.indexOf(l[i]) === -1) {\n\t\t\ta.push(l[i]);\n\
    \t\t}\n\t}\n\treturn a;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "    const u: number[] = [];\n    for (let i =\
    \ 0; i < l.length; i++) {\n        if (u.indexOf(l[i]) === -1) {\n           \
    \ u.push(l[i]);\n        }\n    }\n    return u;\n}\n", "  const u: number[] =\
    \ [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1)\
    \ {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  return l.filter((v,\
    \ i, a) => a.indexOf(v) === i);\n}\n", "  return l.filter((v, i, a) => a.indexOf(v)\
    \ === i);\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return\
    \ u;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n}\n", "  const\
    \ u: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i])\
    \ === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  return l.filter((v,\
    \ i, a) => a.indexOf(v) === i);\n}\n", "  const a: number[] = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n\
    \  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "    const a: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (a.indexOf(l[i]) === -1) {\n            a.push(l[i]);\n \
    \       }\n    }\n    return a;\n}\n", "  const u: number[] = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "\tconst u: number[] = [];\n\tfor (let i = 0;\
    \ i < l.length; i++) {\n\t\tif (u.indexOf(l[i]) === -1) {\n\t\t\tu.push(l[i]);\n\
    \t\t}\n\t}\n\treturn u;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "\tconst u: number[] = [];\n\tfor (let i = 0;\
    \ i < l.length; i++) {\n\t\tif (u.indexOf(l[i]) === -1) {\n\t\t\tu.push(l[i]);\n\
    \t\t}\n\t}\n\treturn u;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(+l[i]) === -1) {\n      u.push(+l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "\tlet result: number[] = [];\n\tfor (let i =\
    \ 0; i < l.length; i++) {\n\t\tlet j = result.indexOf(l[i]);\n\t\tif (j === -1)\
    \ {\n\t\t\tresult.push(l[i]);\n\t\t}\n\t}\n\treturn result;\n}\n", "  const a:\
    \ number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i])\
    \ === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  return l.filter((v,\
    \ i, a) => a.indexOf(v) === i);\n}\n", "  const u: number[] = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (u.indexOf(+l[i]) === -1) u.push(+l[i]);\n\
    \  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(+l[i]) === -1) {\n      u.push(+l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(+l[i]) === -1) {\n      u.push(+l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n\
    \  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "    const u: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (u.indexOf(l[i]) === -1) {\n            u.push(l[i]);\n \
    \       }\n    }\n    return u;\n}\n", "\tconst a: number[] = [];\n\tfor (let\
    \ i = 0; i < l.length; i++) {\n\t\tif (a.indexOf(l[i]) === -1) {\n\t\t\ta.push(l[i]);\n\
    \t\t}\n\t}\n\treturn a;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n \
    \ return a;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n\
    \  return a;\n}\n", "\tconst a: number[] = [];\n\tfor (let i = 0; i < l.length;\
    \ i++) {\n\t\tif (a.indexOf(l[i]) === -1) {\n\t\t\ta.push(l[i]);\n\t\t}\n\t}\n\
    \treturn a;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n\
    \  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  return l.filter((v, i, a) => a.indexOf(v) === i);\n}\n",
  "  const a: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i])\
    \ === -1) a.push(l[i]);\n  }\n  return a;\n}\n", "  const a: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n \
    \     a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n \
    \     u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n \
    \     u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n \
    \     u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n \
    \     u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const a: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n \
    \     a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n \
    \     u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const a: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n \
    \     a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  const a: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n \
    \     a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "\tconst u: number[] = [];\n\
    \tfor (let i = 0; i < l.length; i++) {\n\t\tif (u.indexOf(l[i]) === -1) {\n\t\t\
    \tu.push(l[i]);\n\t\t}\n\t}\n\treturn u;\n}\n", "  const u: number[] = [];\n \
    \ for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n  \
    \    u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n \
    \     u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n \
    \     u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "\tconst o: number[] = [];\n\
    \tfor (let i = 0; i < l.length; i++) {\n\t\tif (o.indexOf(l[i]) === -1) {\n\t\t\
    \to.push(l[i]);\n\t\t}\n\t}\n\treturn o;\n}\n", "  const o = new Set(l);\n  return\
    \ Array.from(o) as number[];\n}\n", "  const o = new Set<number>();\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (!o.has(l[i])) {\n      o.add(l[i]);\n \
    \   }\n  }\n  return Array.from(o);\n}\n", "  const a: number[] = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) u.push(l[i]);\n  }\n \
    \ return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n\
    \  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  const o: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (o.indexOf(l[i]) === -1) {\n      o.push(l[i]);\n    }\n  }\n\
    \  return o;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n\
    \  return a;\n}\n", "\tlet a: number[] = [];\n\tfor (let i = 0; i < l.length;\
    \ i++) {\n\t\tlet j = a.indexOf(l[i]);\n\t\tif (j === -1) {\n\t\t\ta.push(l[i]);\n\
    \t\t}\n\t}\n\treturn a;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  return l.filter((v, i, a) => a.indexOf(v) ===\
    \ i);\n}\n", "  return l.filter((v, i, a) => a.indexOf(v) === i);\n}\n", "  const\
    \ a: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i])\
    \ === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  const u: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(+l[i]) ===\
    \ -1) u.push(+l[i]);\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for\
    \ (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "\tconst a: number[] = [];\n\tfor (let i = 0;\
    \ i < l.length; i++) {\n\t\tif (a.indexOf(l[i]) === -1) {\n\t\t\ta.push(l[i]);\n\
    \t\t}\n\t}\n\treturn a;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  return l.filter((v, i, a) => a.indexOf(v) ===\
    \ i);\n}\n", "  const a: number[] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return\
    \ a;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return\
    \ a;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n}\n", "  const\
    \ u: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(+l[i])\
    \ === -1) {\n      u.push(+l[i]);\n    }\n  }\n  return u;\n}\n", "  const u:\
    \ number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i])\
    \ === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  return l.filter((v,\
    \ i, a) => a.indexOf(v) === i);\n}\n", "  const u: number[] = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "\tconst a: number[] = [];\n\tfor (let i = 0;\
    \ i < l.length; i++) {\n\t\tconst j = a.indexOf(l[i]);\n\t\tif (j === -1) {\n\t\
    \t\ta.push(l[i]);\n\t\t}\n\t}\n\treturn a;\n}\n", "  const u: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n \
    \     u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const a: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n \
    \     a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "\tlet a: number[] = [];\n\
    \tfor (let i = 0; i < l.length; i++) {\n\t\tif (a.indexOf(l[i]) === -1) {\n\t\t\
    \ta.push(l[i]);\n\t\t}\n\t}\n\treturn a;\n}\n", "  const u: number[] = [];\n \
    \ for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n  \
    \    u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n \
    \     u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "    const u: number[] = [];\n\
    \    for (let i = 0; i < l.length; i++) {\n        if (u.indexOf(l[i]) === -1)\
    \ {\n            u.push(l[i]);\n        }\n    }\n    return u;\n}\n", "    const\
    \ u: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (u.indexOf(l[i])\
    \ === -1) {\n            u.push(l[i]);\n        }\n    }\n    return u;\n}\n",
  "  const u: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(+l[i])\
    \ === -1) u.push(+l[i]);\n  }\n  return u;\n}\n", "  const a: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n \
    \     a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  const a: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n \
    \     a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  const a: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n \
    \     a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "\tconst u: number[] = [];\n\
    \tfor (let i = 0; i < l.length; i++) {\n\t\tif (u.indexOf(l[i]) === -1) {\n\t\t\
    \tu.push(l[i]);\n\t\t}\n\t}\n\treturn u;\n}\n", "  const u: number[] = [];\n \
    \ for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n  \
    \    u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n \
    \     u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const a: number[] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n\
    \  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n\
    \  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n\
    \  return a;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n\
    \  return a;\n}\n", "  const o: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (o.indexOf(l[i]) === -1) {\n      o.push(l[i]);\n    }\n  }\n\
    \  return o;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "\tlet u: number[] = [];\n\tfor (let i = 0; i < l.length;\
    \ i++) {\n\t\tif (u.indexOf(l[i]) === -1) {\n\t\t\tu.push(l[i]);\n\t\t}\n\t}\n\
    \treturn u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n\
    \  return u;\n}\n", "\tconst a: number[] = [];\n\tfor (let i = 0; i < l.length;\
    \ i++) {\n\t\tconst v = l[i];\n\t\tif (a.indexOf(v) === -1) {\n\t\t\ta.push(v);\n\
    \t\t}\n\t}\n\treturn a;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "\tconst a: number[] = [];\n\tfor (let i = 0;\
    \ i < l.length; i++) {\n\t\tif (a.indexOf(l[i]) === -1) {\n\t\t\ta.push(l[i]);\n\
    \t\t}\n\t}\n\treturn a;\n}\n", "\tconst a: number[] = [];\n\tfor (let i = 0; i\
    \ < l.length; i++) {\n\t\tif (a.indexOf(l[i]) === -1) {\n\t\t\ta.push(l[i]);\n\
    \t\t}\n\t}\n\treturn a;\n}\n", "  return l.filter((v, i, a) => a.indexOf(v) ===\
    \ i);\n}\n", "\tlet i: number;\n\tlet j: number;\n\tlet k: number;\n\tlet l2:\
    \ number;\n\tlet l3: number;\n\tlet l4: number;\n\tlet l5: number;\n\tlet l6:\
    \ number;\n\tlet l7: number;\n\tlet l8: number;\n\tlet l9: number;\n\tlet l10:\
    \ number;\n\tlet l11: number;\n\tlet l12: number;\n\tlet l13: number;\n\tlet l14:\
    \ number;\n\tlet l15: number;\n\tlet l16: number;\n\tlet l17: number;\n\tlet l18:\
    \ number;\n\tlet l19: number;\n\tlet l20: number;\n\tlet l21: number;\n\tlet l22:\
    \ number;\n\tlet l23: number;\n\tlet l24: number;\n\tlet l25: number;\n\tlet l26:\
    \ number;\n\tlet l27: number;\n\tlet l28: number;\n\tlet l29: number;\n\tlet l30:\
    \ number;\n\tlet l31: number;\n\tlet l32: number;\n\tlet l33: number;\n\tlet l34:\
    \ number;\n\tlet l35: number;\n\tlet l36: number;\n\tlet l37: number;\n\tlet l38:\
    \ number;\n\tlet l39: number;\n\tlet l40: number;\n\tlet l41: number;\n\tlet l42:\
    \ number;\n\tlet l43: number;\n\tlet l44: number;\n\tlet l45: number;\n\tlet l46:\
    \ number;\n\tlet l47: number;\n\tlet l48: number;\n\tlet l49: number;\n\tlet l50:\
    \ number;\n\tlet l51: number;\n\tlet l52: number;\n\tlet l53: number;\n\tlet l54:\
    \ number;\n\tlet l55: number;\n\tlet l56: number;\n\tlet l57: number;\n\tlet l58:\
    \ number;\n\tlet l59: number;\n\tlet l60: number;\n\tlet l61: number;\n\tlet l62:\
    \ number;\n\tlet l63: number;\n\tlet l64: number;\n\tlet l65: number;\n\tlet l66:\
    \ number;\n\tlet l67: number;\n\tlet l68: number;\n\tlet l69: number;\n\tlet l70:\
    \ number;\n\tlet l71: number;\n\tlet l72: number;\n\tlet l73: number;\n\tlet l74:\
    \ number;\n\tlet l75: number;\n\tlet l76: number;\n\tlet l77: number;\n\tlet l78:\
    \ number;\n\tlet l79: number;\n\tlet l80: number;\n\tlet l81: number;\n\tlet l82:\
    \ number;\n\tlet l83: number;\n\tlet ", "  const u: number[] = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const a: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "\tlet u: number[] = [];\n\tfor (let i = 0; i\
    \ < l.length; i++) {\n\t\tif (u.indexOf(l[i]) === -1) {\n\t\t\tu.push(l[i]);\n\
    \t\t}\n\t}\n\treturn u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "\tconst u: number[] = [];\n\tfor (let i = 0;\
    \ i < l.length; i++) {\n\t\tif (u.indexOf(l[i]) === -1) {\n\t\t\tu.push(l[i]);\n\
    \t\t}\n\t}\n\treturn u;\n}\n", "  const a: number[] = [];\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  const u: number[] = [];\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
