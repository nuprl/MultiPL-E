name: HumanEval_34_unique
language: ts
prompt: "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = unique;\n  assert.deepEqual(candidate([5, 3, 5, 2,\
  \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);\n}\n\ntest();"
completions: ["\tconst u: number[] = [];\n\tfor (let i = 0; i < l.length; i++) {\n\
    \t\tif (u.indexOf(l[i]) === -1) {\n\t\t\tu.push(l[i]);\n\t\t}\n\t}\n\treturn u;\n\
    }\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n   \
    \ if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n\
    }\n", "  return l.filter((v, i, a) => a.indexOf(v) === i);\n}\n", "\tconst a:\
    \ number[] = [];\n\tfor (let i = 0; i < l.length; i++) {\n\t\tconst v = l[i];\n\
    \t\tif (a.indexOf(v) < 0) {\n\t\t\ta.push(v);\n\t\t}\n\t}\n\treturn a;\n}\n",
  "  const a: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i])\
    \ === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  const u: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1)\
    \ {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const a: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1)\
    \ {\n      a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  const u: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1)\
    \ {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const u: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1)\
    \ {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "\tconst a: number[]\
    \ = [];\n\tfor (let i = 0; i < l.length; i++) {\n\t\tconst v = l[i];\n\t\tif (a.indexOf(v)\
    \ === -1) {\n\t\t\ta.push(v);\n\t\t}\n\t}\n\treturn a;\n}\n", "  const a: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1)\
    \ {\n      a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  const u: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1)\
    \ {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const u: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1)\
    \ {\n      u.push(l[i]);\n    }\n  }\n  return u;\n}\n", "  const o = new Set<number>();\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (o.has(+l[i])) {\n      continue;\n\
    \    }\n    o.add(+l[i]);\n  }\n  return Array.from(o);\n}\n", "  const a: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1)\
    \ {\n      a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "  return l.filter((v,\
    \ i, a) => a.indexOf(v) === i);\n}\n", "  const u: number[] = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n\
    \    }\n  }\n  return u;\n}\n", "  return l.filter((v, i, a) => a.indexOf(v) ===\
    \ i);\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return\
    \ u;\n}\n", "  const u: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return\
    \ u;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
