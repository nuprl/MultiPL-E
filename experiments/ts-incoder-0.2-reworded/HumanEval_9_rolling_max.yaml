name: HumanEval_9_rolling_max
language: ts
prompt: "//From a given array of integers, generate an array of rolling maximum element\
  \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2,\
  \ 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
  \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
  \ 3, 3, 100, 100]);\n}\n\ntest();"
completions: ["\tlet result: number[] = [];\n\tlet max: number = 0;\n\tfor (let i\
    \ = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] ===\
    \ max) {\n\t\t\tresult.push(max);\n\t\t}\n\t}\n\treturn result;\n}\n", "  const\
    \ result: number[] = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n", "  const rolling_maxes: number[] = [];\n  let max_number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    max_number = Math.max(max_number,\
    \ numbers[i]);\n    rolling_maxes.push(max_number);\n  }\n  return rolling_maxes;\n\
    }\n", "  const result: number[] = [];\n  let max: number = 0;\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      result.push(max);\n      max = numbers[i];\n    } else {\n \
    \     result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n \
    \   if (numbers[i] === max) {\n      result.push(numbers[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "    const result: number[] = [];\n    let max: number = 0;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n\
    \        }\n    }\n    return result;\n}\n", "  const result: number[] = [];\n\
    \  let max: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "    const result: number[] = [];\n    let max: number = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n", "    const result = [];\n    let max\
    \ = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    for (let i = maxIndex; i < numbers.length; i++)\
    \ {\n        result.push(numbers[i]);\n    }\n    return result;\n}\n", "  const\
    \ rolling_max_array: number[] = [];\n  let max_value: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_value) {\n     \
    \ max_value = numbers[i];\n    }\n    rolling_max_array.push(max_value);\n  }\n\
    \  return rolling_max_array;\n}\n", "  const result: number[] = [];\n  let max:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n\
    \  return result;\n}\n", "  const result: number[] = [];\n  let max: number =\
    \ 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max)\
    \ {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "    const\
    \ rolling_max_array: number[] = [];\n    let rolling_max_value: number = 0;\n\
    \    let rolling_max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (rolling_max_index < numbers.length - 1) {\n            rolling_max_value\
    \ = Math.max(rolling_max_value, numbers[rolling_max_index]);\n            rolling_max_array[i]\
    \ = rolling_max_value;\n            rolling_max_index++;\n        } else {\n \
    \           rolling_max_value = Math.max(rolling_max_value, numbers[i]);\n   \
    \         rolling_max_array[i] = rolling_max_value;\n        }\n    }\n    return\
    \ rolling_max_array;\n}\n", "  const result: number[] = [];\n  let max: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max)\
    \ {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n\
    \  return result;\n}\n", "  const result = [];\n  let max = 0;\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ === max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "    let result: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] === max) {\n            result.push(max);\n      \
    \  }\n    }\n    return result;\n}\n", "  const result = [];\n  let max = 0;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n \
    \     max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n  \
    \    result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "    const\
    \ rolling_max_array: number[] = [];\n    let rolling_max_value: number = 0;\n\
    \    let rolling_max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (rolling_max_value < numbers[i]) {\n            rolling_max_value\
    \ = numbers[i];\n            rolling_max_index = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \    for (let i = rolling_max_index + 1; i < numbers.length; i++) {\n        rolling_max_value\
    \ = Math.max(rolling_max_value, numbers[i]);\n        rolling_max_array.push(rolling_max_value);\n\
    \    }\n    return rolling_max_array;\n}", "  const rolling_max_array: number[]\
    \ = [];\n  let rolling_max_value: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (rolling_max_value < numbers[i]) {\n      rolling_max_value =\
    \ numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n  }\n  return\
    \ rolling_max_array;\n}\n", "  const result: number[] = [];\n  let max: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max)\
    \ {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
