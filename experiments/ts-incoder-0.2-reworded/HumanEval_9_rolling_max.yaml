name: HumanEval_9_rolling_max
language: ts
prompt: "//From a given array of integers, generate an array of rolling maximum element\
  \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2,\
  \ 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
  \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
  \ 3, 3, 100, 100]);\n}\n\ntest();"
completions: ["\tlet result: number[] = [];\n\tlet max: number = 0;\n\tfor (let i\
    \ = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] ===\
    \ max) {\n\t\t\tresult.push(max);\n\t\t}\n\t}\n\treturn result;\n}\n", "  const\
    \ result: number[] = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n", "  const rolling_maxes: number[] = [];\n  let max_number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    max_number = Math.max(max_number,\
    \ numbers[i]);\n    rolling_maxes.push(max_number);\n  }\n  return rolling_maxes;\n\
    }\n", "  const result: number[] = [];\n  let max: number = 0;\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      result.push(max);\n      max = numbers[i];\n    } else {\n \
    \     result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n \
    \   if (numbers[i] === max) {\n      result.push(numbers[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "    const result: number[] = [];\n    let max: number = 0;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n\
    \        }\n    }\n    return result;\n}\n", "  const result: number[] = [];\n\
    \  let max: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "    const result: number[] = [];\n    let max: number = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n", "    const result = [];\n    let max\
    \ = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    for (let i = maxIndex; i < numbers.length; i++)\
    \ {\n        result.push(numbers[i]);\n    }\n    return result;\n}\n", "  const\
    \ rolling_max_array: number[] = [];\n  let max_value: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_value) {\n     \
    \ max_value = numbers[i];\n    }\n    rolling_max_array.push(max_value);\n  }\n\
    \  return rolling_max_array;\n}\n", "  const result: number[] = [];\n  let max:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n\
    \  return result;\n}\n", "  const result: number[] = [];\n  let max: number =\
    \ 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max)\
    \ {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "    const\
    \ rolling_max_array: number[] = [];\n    let rolling_max_value: number = 0;\n\
    \    let rolling_max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (rolling_max_index < numbers.length - 1) {\n            rolling_max_value\
    \ = Math.max(rolling_max_value, numbers[rolling_max_index]);\n            rolling_max_array[i]\
    \ = rolling_max_value;\n            rolling_max_index++;\n        } else {\n \
    \           rolling_max_value = Math.max(rolling_max_value, numbers[i]);\n   \
    \         rolling_max_array[i] = rolling_max_value;\n        }\n    }\n    return\
    \ rolling_max_array;\n}\n", "  const result: number[] = [];\n  let max: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max)\
    \ {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n\
    \  return result;\n}\n", "  const result = [];\n  let max = 0;\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ === max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "    let result: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] === max) {\n            result.push(max);\n      \
    \  }\n    }\n    return result;\n}\n", "  const result = [];\n  let max = 0;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n \
    \     max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n  \
    \    result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "    const\
    \ rolling_max_array: number[] = [];\n    let rolling_max_value: number = 0;\n\
    \    let rolling_max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (rolling_max_value < numbers[i]) {\n            rolling_max_value\
    \ = numbers[i];\n            rolling_max_index = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \    for (let i = rolling_max_index + 1; i < numbers.length; i++) {\n        rolling_max_value\
    \ = Math.max(rolling_max_value, numbers[i]);\n        rolling_max_array.push(rolling_max_value);\n\
    \    }\n    return rolling_max_array;\n}", "  const rolling_max_array: number[]\
    \ = [];\n  let rolling_max_value: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (rolling_max_value < numbers[i]) {\n      rolling_max_value =\
    \ numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n  }\n  return\
    \ rolling_max_array;\n}\n", "  const result: number[] = [];\n  let max: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max)\
    \ {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "    const\
    \ rolling_max_array: number[] = [];\n    let rolling_max_number: number = 0;\n\
    \    let rolling_max_index = 0;\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > rolling_max_number) {\n            rolling_max_number\
    \ = numbers[i];\n            rolling_max_index = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_number);\n\
    \    for (let i = numbers.length - 1; i >= rolling_max_index; i--) {\n       \
    \ rolling_max_number = numbers[i];\n        rolling_max_index = i;\n        for\
    \ (let j = i - 1; j >= rolling_max_index; j--) {\n            if (numbers[j] >\
    \ rolling_max_number) {\n                rolling_max_number = numbers[j];\n  \
    \              rolling_max_index = j;\n            }\n        }\n        rolling_max_array.push(rolling_max_number);\n\
    \    }\n    return rolling_max_array;\n}\n", "    const rolling_max_array: number[]\
    \ = [];\n    let rolling_max_index = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (rolling_max_index >= numbers.length - 1) {\n           \
    \ rolling_max_array.push(numbers[i]);\n        } else {\n            if (numbers[i]\
    \ > rolling_max_array[rolling_max_index]) {\n                rolling_max_array.push(numbers[i]);\n\
    \            }\n        }\n        rolling_max_index++;\n    }\n    return rolling_max_array;\n\
    }\n", "  const rolling_max_array: number[] = [];\n  let max_value = numbers[0];\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_value)\
    \ {\n      max_value = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    rolling_max_array.push(max_value);\n  }\n  return rolling_max_array;\n\
    }\n", "  let max: number[] = [];\n  let currentMax: number[] = [];\n  let currentIndex:\
    \ number[] = [];\n  let currentIndexMax: number[] = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    currentMax.push(numbers[i]);\n    currentIndex.push(i);\n\
    \    currentIndexMax.push(numbers[i]);\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (currentMax[i] > max[i]) {\n      max[i] = currentMax[i];\n \
    \     currentIndexMax[i] = currentIndex[i];\n    }\n  }\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    if (currentMax[i] > max[i]) {\n      max[i] = currentMax[i];\n\
    \      currentIndexMax[i] = currentIndex[i];\n    }\n  }\n  for (let i = 0; i\
    \ < numbers.length; i++) {\n    if (currentMax[i] > max[i]) {\n      max[i] =\
    \ currentMax[i];\n      currentIndexMax[i] = currentIndex[i];\n    }\n  }\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (currentMax[i] > max[i]) {\n\
    \      max[i] = currentMax[i];\n      currentIndexMax[i] = currentIndex[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (currentMax[i]\
    \ > max[i]) {\n      max[i] = currentMax[i];\n      currentIndexMax[i] = currentIndex[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (currentMax[i]\
    \ > max[i]) {\n      max[i] = currentMax[i];\n      currentIndexMax[i] = currentIndex[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (currentMax[i]\
    \ > max[i]) {\n      max[i] = currentMax[i];\n      currentIndexMax[i] = currentIndex[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (currentMax[i]\
    \ > max[i]) {\n      max[i] = currentMax[i];\n      currentIndexMax[i] = currentIndex[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (currentMax[i]\
    \ > max[i]) {\n      max[i] = currentMax[i];\n      currentIndexMax[i] = currentIndex[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (currentMax[i]\
    \ > max[i]) {\n      max[i] = currentMax[i];\n      currentIndexMax[i] = currentIndex[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (currentMax[i]\
    \ > max[i]) {\n      max[i] = currentMax[i];\n      currentIndexMax[i] = currentIndex[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (currentMax[i]\
    \ > max[i]) {\n      max[i] = currentMax[i];\n      currentIndexMax[i] = currentIndex[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (currentMax[i]\
    \ > max[i]) {\n      max[i] = currentMax[i];\n      currentIndexMax[i] = currentIndex[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n", "    let max: number[]\
    \ = [];\n    let maxIndex: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        let index = numbers.length - i - 1;\n        if (numbers[index]\
    \ > max[maxIndex[0]]) {\n            max[maxIndex[0]] = numbers[index];\n    \
    \        maxIndex[0] = index;\n        }\n        if (numbers[index] > max[maxIndex[1]])\
    \ {\n            max[maxIndex[1]] = numbers[index];\n            maxIndex[1] =\
    \ index;\n        }\n    }\n    return max;\n}\n", "  const result: number[] =\
    \ [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  let max: number = 0;\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  let max: number[] = [];\n  let current:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    current.push(numbers[i]);\n\
    \    if (current.length > max) {\n      max = current.length;\n    }\n  }\n  return\
    \ max;\n}\n", "    const rolling_maxes: number[] = [];\n    let max_number = 0;\n\
    \    let max_index = 0;\n    for (let i = 0; i < numbers.length; i++) {\n    \
    \    if (numbers[i] > max_number) {\n            max_number = numbers[i];\n  \
    \          max_index = i;\n        }\n    }\n    for (let i = max_index + 1; i\
    \ < numbers.length; i++) {\n        rolling_maxes[i - max_index - 1] = numbers[i];\n\
    \    }\n    return rolling_maxes;\n}", "  const result: number[] = [];\n  let\
    \ max: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "    let\
    \ result: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ === max) {\n            result.push(max);\n        }\n    }\n    return result;\n\
    }\n", "    const result: number[] = [];\n    let max: number = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n", "    let result: number[] = [];\n\
    \    let max: number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n  \
    \      if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] ===\
    \ max) {\n            result.push(max);\n        }\n    }\n    return result;\n\
    }\n", "  const rolling_max_array: number[] = [];\n  let rolling_max_value: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_value =\
    \ Math.max(rolling_max_value, numbers[i]);\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n", "    let rolling_max: number[] = [];\n\
    \    let max_index: number = 0;\n    let max_value: number = numbers[0];\n   \
    \ for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_value)\
    \ {\n            max_value = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    rolling_max = [max_value];\n    for (let i = max_index + 1; i\
    \ < numbers.length; i++) {\n        rolling_max.push(numbers[i]);\n    }\n   \
    \ return rolling_max;\n}\n", "  const result = [];\n  let max = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "  const rolling_max_array: number[] = [];\n  let rolling_max_value: number;\n\
    \  let rolling_max_index: number;\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    rolling_max_value = numbers[i];\n    rolling_max_index = i;\n    while\
    \ (numbers[rolling_max_index] > rolling_max_value) {\n      rolling_max_value\
    \ = numbers[rolling_max_index];\n      rolling_max_index++;\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n", "    let max: number[] = [];\n    let\
    \ rolling_max: number[] = [];\n    let rolling_max_index: number[] = [];\n   \
    \ let rolling_max_value: number[] = [];\n    let rolling_max_index1: number[]\
    \ = [];\n    let rolling_max_value1: number[] = [];\n    let rolling_max_index2:\
    \ number[] = [];\n    let rolling_max_value2: number[] = [];\n    let rolling_max_index3:\
    \ number[] = [];\n    let rolling_max_value3: number[] = [];\n    let rolling_max_index4:\
    \ number[] = [];\n    let rolling_max_value4: number[] = [];\n    let rolling_max_index5:\
    \ number[] = [];\n    let rolling_max_value5: number[] = [];\n    let rolling_max_index6:\
    \ number[] = [];\n    let rolling_max_value6: number[] = [];\n    let rolling_max_index7:\
    \ number[] = [];\n    let rolling_max_value7: number[] = [];\n    let rolling_max_index8:\
    \ number[] = [];\n    let rolling_max_value8: number[] = [];\n    let rolling_max_index9:\
    \ number[] = [];\n    let rolling_max_value9: number[] = [];\n    let rolling_max_index10:\
    \ number[] = [];\n    let rolling_max_value10: number[] = [];\n    let rolling_max_index11:\
    \ number[] = [];\n    let rolling_max_value11: number[] = [];\n    let rolling_max_index12:\
    \ number[] = [];\n    let rolling_max_value12: number[] = [];\n    let rolling_max_index13:\
    \ number[] = [];\n    let rolling_max_value13: number[] = [];\n    let rolling_max_index14:\
    \ number[] = [];\n    let rolling_max_value14: number[] = [];\n    let rolling_max_index15:\
    \ number[] = [];\n    let rolling_max_value15: number[] = [];\n    let rolling_max_index16:\
    \ number[] = [];\n    let rolling_max_value16: number[] = [];\n    let rolling_max_index17:\
    \ number[] = [];\n    let rolling_max_value17: number[] = [];\n    let rolling_max_index18:\
    \ number[] = [];\n    let rolling_max_value18: number[] = [];\n    let rolling_max_index19:\
    \ number[] = [];\n    let rolling_max_value19: number[] = [];\n    let rolling_max_index20:\
    \ number[] = [];\n    let rolling_max_value20: number[] = [];\n    let rolling_max_index21:\
    \ number[] = [];\n    let rolling_max_value21: number[] = [];\n    let rolling_max_index22:\
    \ number[] = [];\n    let rolling_max_value22: number[] = [];\n    let rolling_max_",
  "    const result: number[] = [];\n    let max: number = 0;\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max\
    \ = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > max) {\n            result.push(max);\n        \
    \    max = numbers[i];\n        }\n    }\n    return result;\n}\n", "  let max:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let maxIndex\
    \ = i;\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j]\
    \ > numbers[maxIndex]) {\n        maxIndex = j;\n      }\n    }\n    max.push(numbers[maxIndex]);\n\
    \  }\n  return max;\n}\n", "    let result: number[] = [];\n    let max: number\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n           \
    \ result.push(max);\n            max = numbers[i];\n        } else {\n       \
    \     result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", " \
    \ const result: number[] = [];\n  let max: number = 0;\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  let max = 0;\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n  \
    \    max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers[i] === max) {\n      result.push(numbers[i]);\n    }\n  }\n\
    \  return result;\n}\n", "    const result: number[] = [];\n    let max: number\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        if (numbers[i] === max) {\n         \
    \   result.push(max);\n        }\n    }\n    return result;\n}\n", "    const\
    \ rolling_max_array: number[] = [];\n    let rolling_max_value: number = 0;\n\
    \    let rolling_max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (rolling_max_value <= numbers[i]) {\n            rolling_max_value\
    \ = numbers[i];\n            rolling_max_index = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \    for (let i = rolling_max_index + 1; i < numbers.length; i++) {\n        rolling_max_value\
    \ = Math.max(rolling_max_value, numbers[i]);\n        rolling_max_array.push(rolling_max_value);\n\
    \    }\n    return rolling_max_array;\n}", "  let max: number[] = [];\n  let currentMax:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > currentMax[0]) {\n      currentMax[0] = numbers[i];\n      currentMax[1] =\
    \ i;\n    } else {\n      currentMax[0] = numbers[i];\n      currentMax[1] = i;\n\
    \    }\n    if (currentMax[1] === numbers.length - 1) {\n      max.push(currentMax[0]);\n\
    \    }\n  }\n  return max;\n}\n", "  const rolling_max_array: number[] = [];\n\
    \  let max_element: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] > max_element) {\n      max_element = numbers[i];\n    }\n\
    \  }\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_array.push(max_element);\n\
    \  }\n  return rolling_max_array;\n}\n", "  const rolling_max_array: number[]\
    \ = [];\n  let rolling_max_value: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (rolling_max_value < numbers[i]) {\n      rolling_max_value =\
    \ numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n  }\n  return\
    \ rolling_max_array;\n}\n", "  const result: number[] = [];\n  let max: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max)\
    \ {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "\tlet max:\
    \ number[] = [];\n\tlet maxIndex: number[] = [];\n\tlet maxIndexIndex: number[]\
    \ = [];\n\tlet maxIndexIndexIndex: number[] = [];\n\tlet maxIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndex: number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \tlet maxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\tlet maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n\t", "  let result: number[] = [];\n  let max: number = 0;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n \
    \     max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n  \
    \    result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n  \
    \    result.push(max);\n      max = numbers[i];\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  let max:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "    const\
    \ rolling_max_array: number[] = [];\n    let rolling_max_value: number = 0;\n\
    \    let rolling_max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > rolling_max_value) {\n            rolling_max_value\
    \ = numbers[i];\n            rolling_max_index = i;\n        }\n    }\n    for\
    \ (let i = numbers.length - 1; i >= 0; i--) {\n        if (numbers[i] > rolling_max_value)\
    \ {\n            rolling_max_value = numbers[i];\n            rolling_max_index\
    \ = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_value);\n   \
    \ return rolling_max_array;\n}\n", "    const result: number[] = [];\n    let\
    \ max: number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] === max) {\n\
    \            result.push(max);\n        }\n    }\n    return result;\n}\n", " \
    \ const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
    \    }\n  }\n  return result;\n}\n", "    let result: number[] = [];\n    let\
    \ currentMax: number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n  \
    \      if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n\
    \        }\n        result.push(currentMax);\n    }\n    return result;\n}\n",
  "    const result: number[] = [];\n    let max: number = 0;\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max\
    \ = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] === max) {\n            result.push(max);\n      \
    \  } else {\n            result.push(numbers[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "  let result: number[] = [];\n  let currentMax: number = 0;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    currentMax = Math.max(currentMax,\
    \ numbers[i]);\n    if (currentMax > numbers[i]) {\n      result.push(currentMax);\n\
    \      currentMax = numbers[i];\n    }\n  }\n  result.push(currentMax);\n  return\
    \ result;\n}\n", "  const result: number[] = [];\n  let max: number = 0;\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max\
    \ = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n  \
    \  if (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    const rolling_max_array: number[] =\
    \ [];\n    let max_element: number = 0;\n    let max_index: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    for (let i = max_index; i < numbers.length; i++) {\n       \
    \ rolling_max_array.push(numbers[i]);\n    }\n    return rolling_max_array;\n}",
  "  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "    let result: number[] = [];\n    let max: number = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  const result: number[] = [];\n\
    \  let max: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (numbers[i]\
    \ > max) {\n      result.push(max);\n    }\n  }\n  return result;\n}\n", "  const\
    \ result: number[] = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n  \
    \    result.push(max);\n      max = numbers[i];\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    let max: number[] = [];\n    let current:\
    \ number[] = [];\n    let maxIndex: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max[maxIndex[0]]) {\n            current =\
    \ [numbers[i]];\n            maxIndex.push(i);\n        } else {\n           \
    \ current[maxIndex[0]] = numbers[i];\n        }\n        max = current;\n    }\n\
    \    return max;\n}\n", "  const result: number[] = [];\n  let max: number = 0;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n \
    \     max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    result.push(numbers[i]);\n    if (numbers[i] > max) {\n      result.push(max);\n\
    \    }\n  }\n  return result;\n}\n", "  const rolling_max_array: number[] = [];\n\
    \  let rolling_max_value: number;\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    rolling_max_value = Math.max(rolling_max_value, numbers[i]);\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n", "  const result: number[] = [];\n  let\
    \ max: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ rolling_max_result: number[] = [];\n  let rolling_max_value: number = 0;\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_value < numbers[i])\
    \ {\n      rolling_max_value = numbers[i];\n    }\n    rolling_max_result.push(rolling_max_value);\n\
    \  }\n  return rolling_max_result;\n}\n", "    let max: number[] = [];\n    let\
    \ currentMax: number[] = [];\n    let currentMaxIndex: number[] = [];\n    let\
    \ currentMaxIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex: number[]\
    \ = [];\n    let currentMaxIndexIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndex: number[] =\
    \ [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[]", "  const rolling_max_array: number[] = [];\n  let rolling_max_value:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_value\
    \ < numbers[i]) {\n      rolling_max_value = numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n", "  const rolling_max_array: number[]\
    \ = [];\n  let rolling_max_value: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > rolling_max_value) {\n      rolling_max_value =\
    \ numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n  }\n  return\
    \ rolling_max_array;\n}\n", "  let result: number[] = [];\n  let max: number =\
    \ 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max)\
    \ {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "  let max: number[] = [];\n  let currentMax: number[] = [];\n  let currentIndex:\
    \ number[] = [];\n  let currentIndexMax: number[] = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    currentMax.push(numbers[i]);\n    currentIndex.push(i);\n\
    \    currentIndexMax.push(numbers[i]);\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (currentMax[i] > max[i]) {\n      max = currentMax;\n      currentMax\
    \ = currentIndexMax;\n      currentIndex = currentIndex;\n      currentIndexMax\
    \ = currentIndexMax;\n    }\n    currentMax[i] = Math.max(currentMax[i], numbers[i]);\n\
    \    currentIndexMax[i] = Math.max(currentIndexMax[i], numbers[i]);\n  }\n  return\
    \ currentMax;\n}\n", "  const result: number[] = [];\n  let max: number = 0;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n \
    \     max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n  \
    \    result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "  const rolling_max_array:\
    \ number[] = [];\n  let rolling_max_value: number = 0;\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    rolling_max_value = Math.max(rolling_max_value,\
    \ numbers[i]);\n    rolling_max_array.push(rolling_max_value);\n  }\n  return\
    \ rolling_max_array;\n}\n", "  const result = [];\n  let max = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(numbers[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const result: number[] = [];\n  let max: number = 0;\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max\
    \ = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n  \
    \  result.push(numbers[i]);\n    if (numbers[i] > max) {\n      result.push(max);\n\
    \    }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  let max:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n      max =\
    \ numbers[i];\n    }\n  }\n  return result;\n}\n", "  const rolling_max_array:\
    \ number[] = [];\n  let rolling_max_value: number = 0;\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    if (numbers[i] > rolling_max_value) {\n      rolling_max_value\
    \ = numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n  }\n\
    \  return rolling_max_array;\n}\n", "  let max: number[] = [];\n  let currentMax:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    currentMax.push(numbers[i]);\n\
    \    if (currentMax.length > 0) {\n      max = currentMax;\n      currentMax =\
    \ [];\n    }\n  }\n  return max;\n}\n", "  const rolling_max_array: number[] =\
    \ [];\n  let rolling_max_value: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    rolling_max_value = Math.max(rolling_max_value, numbers[i]);\n \
    \   rolling_max_array.push(rolling_max_value);\n  }\n  return rolling_max_array;\n\
    }\n", "  let result: number[] = [];\n  let max: number = 0;\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    const result: number[] = [];\n    let\
    \ max: number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] === max) {\n\
    \            result.push(max);\n        }\n    }\n    return result;\n}\n", " \
    \ const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  let max: number = 0;\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const rolling_max_arr: number[] = [];\n\
    \  let max_number: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] > max_number) {\n      max_number = numbers[i];\n    }\n \
    \ }\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_arr.push(max_number);\n\
    \  }\n  return rolling_max_arr;\n}\n", "  const result: number[] = [];\n  let\
    \ max: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n\
    \  return result;\n}\n", "  const result: number[] = [];\n  let max: number =\
    \ 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max)\
    \ {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ rolling_max_array: number[] = [];\n  let rolling_max_value: number = 0;\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_value < numbers[i])\
    \ {\n      rolling_max_value = numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n", "\tlet rolling_max: number[] = [];\n\t\
    let rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet rolling_max_index: number[] = [];\n\tlet rolling_max_value: number[] = [];\n\
    \tlet ", "    const rolling_max_array: number[] = [];\n    let rolling_max_index\
    \ = 0;\n    let rolling_max_value = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > rolling_max_value) {\n            rolling_max_value\
    \ = numbers[i];\n            rolling_max_index = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \    return rolling_max_array;\n}\n", "    const rolling_max_array: number[] =\
    \ [];\n    let rolling_max_value: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        rolling_max_value = Math.max(rolling_max_value, numbers[i]);\n\
    \        rolling_max_array.push(rolling_max_value);\n    }\n    return rolling_max_array;\n\
    }\n", "  const result = [];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ result.push(max);\n  return result;\n}\n", "  const result: number[] = [];\n\
    \  let max: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "  let rolling_max_array: number[] = [];\n  let max_value: number = 0;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_value)\
    \ {\n      rolling_max_array.push(max_value);\n      max_value = numbers[i];\n\
    \    } else {\n      max_value = numbers[i];\n    }\n  }\n  rolling_max_array.push(max_value);\n\
    \  return rolling_max_array;\n}\n", "    const result: number[] = [];\n    let\
    \ max: number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] === max) {\n\
    \            result.push(max);\n        }\n    }\n    return result;\n}\n", " \
    \ const rolling_max_array: number[] = [];\n  let max_element: number = 0;\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_element) {\n\
    \      max_element = numbers[i];\n    }\n    rolling_max_array.push(max_element);\n\
    \  }\n  return rolling_max_array;\n}\n", "  let result: number[] = [];\n  let\
    \ max: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "    let\
    \ result: number[] = [];\n    let currentMax: number = 0;\n    let currentIndex:\
    \ number = 0;\n    while (currentIndex < numbers.length) {\n        if (numbers[currentIndex]\
    \ > currentMax) {\n            currentMax = numbers[currentIndex];\n        }\n\
    \        currentIndex++;\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > currentMax) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  const rolling_max_array: number[]\
    \ = [];\n  let max_number: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max_number) {\n      rolling_max_array.push(max_number);\n\
    \      max_number = numbers[i];\n    } else {\n      max_number = Math.max(max_number,\
    \ numbers[i]);\n    }\n  }\n  rolling_max_array.push(max_number);\n  return rolling_max_array;\n\
    }\n", "    let result: number[] = [];\n    let currentMax: number = 0;\n    let\
    \ currentIndex: number = 0;\n    while (currentIndex < numbers.length) {\n   \
    \     if (numbers[currentIndex] > currentMax) {\n            currentMax = numbers[currentIndex];\n\
    \        }\n        currentIndex++;\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > currentMax) {\n            result.push(currentMax);\n\
    \            currentMax = numbers[i];\n        }\n    }\n    return result;\n\
    }\n", "    const rolling_max_array: number[] = [];\n    let max_element: number\
    \ = 0;\n    let max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for (let i = max_index; i <\
    \ numbers.length; i++) {\n        rolling_max_array.push(numbers[i]);\n    }\n\
    \    return rolling_max_array;\n}\n", "  const result: number[] = [];\n  let max:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    result.push(numbers[i]);\n    if (numbers[i] > max) {\n      result.push(max);\n\
    \    }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  let max:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "    let max: number[] = [];\n    let maxIndex: number[] = [];\n    let\
    \ maxIndexIndex: number[] = [];\n    let maxIndexIndexIndex: number[] = [];\n\
    \    let maxIndexIndexIndexIndex: number[] = [];\n    let maxIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let maxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex", " \
    \ const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    const rolling_max_array: number[] =\
    \ [];\n    let rolling_max_value: number;\n    let rolling_max_index: number;\n\
    \    let rolling_max_found = false;\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (rolling_max_found) {\n            rolling_max_array[rolling_max_index]\
    \ = rolling_max_value;\n        }\n        rolling_max_value = numbers[i];\n \
    \       rolling_max_index = i;\n        rolling_max_found = false;\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            if (numbers[j] > rolling_max_value)\
    \ {\n                rolling_max_value = numbers[j];\n                rolling_max_index\
    \ = j;\n                rolling_max_found = true;\n            }\n        }\n\
    \    }\n    return rolling_max_array;\n}", "    const result = [];\n    let max\
    \ = 0;\n    numbers.forEach((n) => {\n        if (n > max) {\n            max\
    \ = n;\n        }\n    });\n    numbers.forEach((n) => {\n        if (n > max)\
    \ {\n            result.push(n);\n        }\n    });\n    return result;\n}\n",
  "  let max: number[] = [];\n  let maxIndex: number[] = [];\n  for (let i = 0; i\
    \ < numbers.length; i++) {\n    if (numbers[i] > max[maxIndex[0]]) {\n      maxIndex[0]\
    \ = i;\n      max = [numbers[i]];\n    } else {\n      max.push(numbers[i]);\n\
    \    }\n  }\n  return max;\n}\n", "    const rolling_max_array: number[] = [];\n\
    \    let rolling_max_value: number;\n    let rolling_max_index = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (rolling_max_index >= rolling_max_array.length)\
    \ {\n            rolling_max_array.push(numbers[i]);\n        } else {\n     \
    \       if (numbers[i] > rolling_max_array[rolling_max_index]) {\n           \
    \     rolling_max_value = numbers[i];\n                rolling_max_index = i;\n\
    \            }\n        }\n    }\n    return rolling_max_array;\n}\n", "  const\
    \ result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n", "  const rolling_max_array: number[] = [];\n  let\
    \ rolling_max_number: number = 0;\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (rolling_max_number < numbers[i]) {\n      rolling_max_number = numbers[i];\n\
    \    }\n    rolling_max_array.push(rolling_max_number);\n  }\n  return rolling_max_array;\n\
    }\n", "  let result: number[] = [];\n  let max: number = 0;\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    const result = [];\n    let max = 0;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        }\n    }\n    return result;\n}\n", " \
    \ const rolling_max_array: number[] = [];\n  let rolling_max_value: number;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_value = Math.max(rolling_max_value,\
    \ numbers[i]);\n    rolling_max_array.push(rolling_max_value);\n  }\n  return\
    \ rolling_max_array;\n}\n", "    const result: number[] = [];\n    let max: number\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        if (numbers[i] === max) {\n         \
    \   result.push(max);\n        }\n    }\n    return result;\n}\n", "    let max:\
    \ number[] = [];\n    let maxIndex: number[] = [];\n    let maxIndexCount: number[]\
    \ = [];\n    let maxIndexCountMax: number[] = [];\n    let maxIndexCountMaxIndex:\
    \ number[] = [];\n    let maxIndexCountMaxIndexCount: number[] = [];\n    let\
    \ maxIndexCountMaxIndexCountMax: number[] = [];\n    let maxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n    let maxIndexCountMaxIndexCountMaxIndexCount: number[] =\
    \ [];\n    let maxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  \
    \  let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n    let\
    \ maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[]\
    \ = [];\n    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n\
    \    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n   \
    \ let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n    let\
    \ maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[]\
    \ = [];\n    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n\
    \    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n   \
    \ let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n    let\
    \ maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[]\
    \ = [];\n    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n\
    \    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n   \
    \ let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n    let\
    \ maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[]\
    \ = [];\n    let maxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n\
    \    let maxIndexCountMaxIndex", "  const result: number[] = [];\n  let max: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max)\
    \ {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "  let max: number[] = [];\n  let rolling_max: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    let rolling_max_element = rolling_max_element(numbers[i]);\n\
    \    if (rolling_max_element > max[0]) {\n      max = rolling_max_element;\n \
    \   }\n    rolling_max = rolling_max.concat(rolling_max_element);\n  }\n  return\
    \ rolling_max;\n}\n", "  const result: number[] = [];\n  let max: number = 0;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n \
    \     max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n  \
    \    result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "  const result\
    \ = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "  let rolling_max_numbers: number[] = [];\n  let rolling_max_numbers_length:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_numbers_length\
    \ < numbers[i]) {\n      rolling_max_numbers_length = numbers[i];\n      rolling_max_numbers\
    \ = numbers;\n    }\n  }\n  return rolling_max_numbers;\n}\n", "  const result\
    \ = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  let max = 0;\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n  \
    \    max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "  const rolling_max_array: number[] = [];\n  let rolling_max_value: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_value =\
    \ Math.max(rolling_max_value, numbers[i]);\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n", "  const rolling_max_array: number[]\
    \ = [];\n  let rolling_max_value: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    rolling_max_value = Math.max(rolling_max_value, numbers[i]);\n \
    \   rolling_max_array.push(rolling_max_value);\n  }\n  return rolling_max_array;\n\
    }\n", "    const result = [];\n    let max = 0;\n    let index = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        if (numbers[i] >= max) {\n       \
    \     result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", " \
    \   const rolling_max_array: number[] = [];\n    let rolling_max_value: number\
    \ = 0;\n    let rolling_max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > rolling_max_value) {\n            rolling_max_value\
    \ = numbers[i];\n            rolling_max_index = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \    for (let i = rolling_max_index + 1; i < numbers.length; i++) {\n        rolling_max_value\
    \ = Math.max(rolling_max_value, numbers[i]);\n        rolling_max_array.push(rolling_max_value);\n\
    \    }\n    return rolling_max_array;\n}", "    const result: number[] = [];\n\
    \    let max: number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n  \
    \      if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            result.push(max);\n            max = numbers[i];\n     \
    \   }\n    }\n    return result;\n}\n", "  const result = [];\n  let max = 0;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n \
    \     max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n\
    \    }\n  }\n  return result;\n}\n", "  const rolling_max_array: number[] = [];\n\
    \  let rolling_max_index = 0;\n  let rolling_max_value = numbers[0];\n  for (let\
    \ i = 1; i < numbers.length; i++) {\n    if (numbers[i] > rolling_max_value) {\n\
    \      rolling_max_value = numbers[i];\n      rolling_max_index = i;\n    }\n\
    \  }\n  rolling_max_array.push(rolling_max_value);\n  rolling_max_array.push(rolling_max_index);\n\
    \  return rolling_max_array;\n}\n", "    const result: number[] = [];\n    let\
    \ max: number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] === max) {\n\
    \            result.push(max);\n        }\n    }\n    return result;\n}\n", " \
    \   let max: number[] = [];\n    let maxIndex: number[] = [];\n    let currentMax:\
    \ number = 0;\n    let currentMaxIndex: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n\
    \            currentMaxIndex = i;\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === currentMax) {\n            max.push(numbers[i]);\n\
    \            maxIndex.push(i);\n        }\n    }\n    return max;\n}\n", "   \
    \ let max: number[] = [];\n    let maxIndex: number[] = [];\n    let maxIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndex: number[] = [];\n    let maxIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndex: number[] = [];\n    let\
    \ maxIndexIndexIndexIndexIndexIndex: number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] =\
    \ [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex",
  "    const result: number[] = [];\n    let max: number = 0;\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max\
    \ = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] === max) {\n            result.push(max);\n      \
    \  }\n    }\n    return result;\n}\n", "  const result: number[] = [];\n  let\
    \ max: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "    const\
    \ result: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ === max) {\n            result.push(max);\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  let max: number[] = [];\n  let\
    \ currentMax: number[] = [];\n  let currentMaxIndex: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    currentMax.push(numbers[i]);\n    currentMaxIndex.push(i);\n\
    \  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (currentMaxIndex.length\
    \ <= i) {\n      continue;\n    }\n    if (currentMax[i] === numbers[i]) {\n \
    \     continue;\n    }\n    if (currentMax[i] > numbers[i]) {\n      max = currentMax;\n\
    \      currentMax = currentMaxIndex;\n      currentMaxIndex = [];\n    }\n   \
    \ currentMaxIndex.push(i);\n  }\n  return max;\n}\n", "  const result: number[]\
    \ = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "    let result: number[] = [];\n    let max: number = 0;\n    let current:\
    \ number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n            current = i;\n        }\n\
    \    }\n    for (let i = current; i < numbers.length; i++) {\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n", "  const rolling_maxes: number[] = [];\n  let\
    \ max_value: number = 0;\n  let max_index: number = 0;\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    if (numbers[i] > max_value) {\n      max_value =\
    \ numbers[i];\n      max_index = i;\n    }\n  }\n  rolling_maxes.push(max_value);\n\
    \  for (let i = max_index + 1; i < numbers.length; i++) {\n    rolling_maxes.push(numbers[i]);\n\
    \  }\n  return rolling_maxes;\n}\n", "  const result: number[] = [];\n  let max:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "    const\
    \ rolling_max_array: number[] = [];\n    let rolling_max_value: number = 0;\n\
    \    let rolling_max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (rolling_max_value < numbers[i]) {\n            rolling_max_value\
    \ = numbers[i];\n            rolling_max_index = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \    for (let i = rolling_max_index + 1; i < numbers.length; i++) {\n        rolling_max_value\
    \ = Math.max(rolling_max_value, numbers[i]);\n        rolling_max_array.push(rolling_max_value);\n\
    \    }\n    return rolling_max_array;\n}\n", "  let max: number[] = [];\n  let\
    \ currentMax: number[] = [];\n  let currentMaxIndex: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (currentMaxIndex.length == 0) {\n\
    \      currentMax.push(numbers[i]);\n      currentMaxIndex.push(i);\n    } else\
    \ {\n      if (numbers[i] > currentMax[currentMaxIndex[0]]) {\n        currentMax.push(numbers[i]);\n\
    \        currentMaxIndex.push(i);\n      } else {\n        currentMaxIndex.shift();\n\
    \      }\n    }\n  }\n  return currentMax;\n}\n", "  const result: number[] =\
    \ [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "  const rolling_max_array: number[] = [];\n  let rolling_max_value: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > rolling_max_value)\
    \ {\n      rolling_max_value = numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n", "  const rolling_maxes: number[] = [];\n\
    \  let max_value = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n\
    \    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n  }\n\
    \  rolling_maxes.push(max_value);\n  return rolling_maxes;\n}\n", "    let result:\
    \ number[] = [];\n    let max: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ === max) {\n            result.push(max);\n        }\n    }\n    return result;\n\
    }\n", "    let max: number[] = [];\n    let maxIndex: number[] = [];\n    let\
    \ currentIndex: number[] = [];\n    let currentMax: number[] = [];\n    let currentMaxIndex:\
    \ number[] = [];\n    let currentMaxIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n    let currentMaxIndexIndexIndex:\
    \ number[] = [];\n    let currentMaxIndexIndexIndex: number[] = [];\n", "  const\
    \ rolling_max_array: number[] = [];\n  let max_element: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_element) {\n   \
    \   max_element = numbers[i];\n    }\n    rolling_max_array.push(max_element);\n\
    \  }\n  return rolling_max_array;\n}\n", "    let result = [];\n    let max =\
    \ 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        }\n    }\n    return result;\n}\n", " \
    \ const result: number[] = [];\n  let max: number = 0;\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    const result: number[] = [];\n    let\
    \ max: number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] === max) {\n\
    \            result.push(max);\n        }\n    }\n    return result;\n}\n", " \
    \ let rolling_max: number[] = [];\n  let rolling_max_index: number[] = [];\n \
    \ let rolling_max_value: number[] = [];\n  let rolling_max_index1: number[] =\
    \ [];\n  let rolling_max_value1: number[] = [];\n  let rolling_max_index2: number[]\
    \ = [];\n  let rolling_max_value2: number[] = [];\n  let rolling_max_index3: number[]\
    \ = [];\n  let rolling_max_value3: number[] = [];\n  let rolling_max_index4: number[]\
    \ = [];\n  let rolling_max_value4: number[] = [];\n  let rolling_max_index5: number[]\
    \ = [];\n  let rolling_max_value5: number[] = [];\n  let rolling_max_index6: number[]\
    \ = [];\n  let rolling_max_value6: number[] = [];\n  let rolling_max_index7: number[]\
    \ = [];\n  let rolling_max_value7: number[] = [];\n  let rolling_max_index8: number[]\
    \ = [];\n  let rolling_max_value8: number[] = [];\n  let rolling_max_index9: number[]\
    \ = [];\n  let rolling_max_value9: number[] = [];\n  let rolling_max_index10:\
    \ number[] = [];\n  let rolling_max_value10: number[] = [];\n  let rolling_max_index11:\
    \ number[] = [];\n  let rolling_max_value11: number[] = [];\n  let rolling_max_index12:\
    \ number[] = [];\n  let rolling_max_value12: number[] = [];\n  let rolling_max_index13:\
    \ number[] = [];\n  let rolling_max_value13: number[] = [];\n  let rolling_max_index14:\
    \ number[] = [];\n  let rolling_max_value14: number[] = [];\n  let rolling_max_index15:\
    \ number[] = [];\n  let rolling_max_value15: number[] = [];\n  let rolling_max_index16:\
    \ number[] = [];\n  let rolling_max_value16: number[] = [];\n  let rolling_max_index17:\
    \ number[] = [];\n  let rolling_max_value17: number[] = [];\n  let rolling_max_index18:\
    \ number[] = [];\n  let rolling_max_value18: number[] = [];\n  let rolling_max_index19:\
    \ number[] = [];\n  let rolling_max_value19: number[] = [];\n  let rolling_max_index20:\
    \ number[] = [];\n  let rolling_max_value20: number[] = [];\n  let rolling_max_index21:\
    \ number[] = [];\n  let rolling_max_value21: number[] = [];\n  let rolling_max_index22:\
    \ number[] = [];\n  let rolling_max_value22: number[] = [];\n  let rolling_max_index23:\
    \ number[] = [];\n", "    let result: number[] = [];\n    let max: number = 0;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n\
    \        }\n    }\n    return result;\n}\n", "  let rolling_max_array: number[]\
    \ = [];\n  let rolling_max_value: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    rolling_max_value = Math.max(rolling_max_value, numbers[i]);\n \
    \   rolling_max_array.push(rolling_max_value);\n  }\n  return rolling_max_array;\n\
    }\n", "    let max: number[] = [];\n    let maxIndex: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        let maxElement = numbers[i];\n\
    \        let maxIndex = i;\n        for (let j = i + 1; j < numbers.length; j++)\
    \ {\n            if (numbers[j] > maxElement) {\n                maxElement =\
    \ numbers[j];\n                maxIndex = j;\n            }\n        }\n     \
    \   max.push(maxElement);\n        maxIndex.push(maxIndex);\n    }\n    return\
    \ max;\n}\n", "    const result = [];\n    let max = 0;\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] === max) {\n            result.push(max);\n      \
    \  } else {\n            result.push(numbers[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "    const result: number[] = [];\n    let max: number = 0;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n    }\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        }\n    }\n    return result;\n}\n", " \
    \ const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  let max: number = 0;\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ === max) {\n      result.push(max);\n    }\n  }\n  return result;\n}\n", " \
    \ const rolling_max_array: number[] = [];\n  let max_value: number = 0;\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_value) {\n\
    \      rolling_max_array.push(max_value);\n      max_value = numbers[i];\n   \
    \ } else {\n      max_value = Math.max(max_value, numbers[i]);\n    }\n  }\n \
    \ rolling_max_array.push(max_value);\n  return rolling_max_array;\n}\n", "  const\
    \ result: number[] = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n", "  const rolling_max_array: number[] = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    const rolling_max_value = Math.max(...rolling_max_array);\n\
    \    rolling_max_array.push(numbers[i]);\n    if (rolling_max_value >= numbers[i])\
    \ {\n      rolling_max_array.shift();\n    }\n  }\n  return rolling_max_array;\n\
    }\n", "  const result: number[] = [];\n  let max: number = 0;\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ === max) {\n      result.push(max);\n    }\n  }\n  return result;\n}\n", " \
    \ const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      result.push(max);\n\
    \      max = numbers[i];\n    } else {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n", "    const rolling_max_array: number[] = [];\n \
    \   let rolling_max_value: number = 0;\n    let rolling_max_index: number = 0;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (rolling_max_value\
    \ < numbers[i]) {\n            rolling_max_value = numbers[i];\n            rolling_max_index\
    \ = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_value);\n   \
    \ for (let i = rolling_max_index + 1; i < numbers.length; i++) {\n        rolling_max_value\
    \ = Math.max(rolling_max_value, numbers[i]);\n        rolling_max_array.push(rolling_max_value);\n\
    \    }\n    return rolling_max_array;\n}\n", "  let max: number[] = [];\n  let\
    \ maxIndex: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n   \
    \ if (numbers[i] > max[maxIndex[0]]) {\n      maxIndex[0] = i;\n      max = [numbers[i]];\n\
    \    } else {\n      max.push(numbers[i]);\n    }\n  }\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    if (numbers[i] >= max[maxIndex[0]]) {\n      maxIndex[0]\
    \ = i;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ >= max[maxIndex[0]]) {\n      maxIndex[0] = i;\n    }\n  }\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers[i] >= max[maxIndex[0]]) {\n    \
    \  maxIndex[0] = i;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] >= max[maxIndex[0]]) {\n      maxIndex[0] = i;\n    }\n  }\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= max[maxIndex[0]])\
    \ {\n      maxIndex[0] = i;\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] >= max[maxIndex[0]]) {\n      maxIndex[0] = i;\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ >= max[maxIndex[0]]) {\n      maxIndex[0] = i;\n    }\n  }\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers[i] >= max[maxIndex[0]]) {\n    \
    \  maxIndex[0] = i;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] >= max[maxIndex[0]]) {\n      maxIndex[0] = i;\n    }\n  }\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= max[maxIndex[0]])\
    \ {\n      maxIndex[0] = i;\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] >= max[maxIndex[0]]) {\n      maxIndex[0] = i;\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ >= max[maxIndex[0]]) {\n      maxIndex[0] = i;\n    }\n  }\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers[i] >= max[maxIndex[0]]) {\n    \
    \  maxIndex[0] = i;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] >= max[maxIndex[0]]) {\n      maxIndex[0] = i;\n    }\n  }\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= max[maxIndex[0]])\
    \ {\n      maxIndex[0] = i;\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] >= max[maxIndex[0]]) {\n      maxIndex[0] = i;\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ >= max[maxIndex[0]]) {\n      maxIndex[0] = i;\n", "\tlet result: number[] =\
    \ [];\n\tlet max: number = 0;\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\
    \tmax = Math.max(max, numbers[i]);\n\t\tresult.push(max);\n\t}\n\treturn result;\n\
    }\n", "  let rolling_max_numbers: number[] = [];\n  let rolling_max_numbers_length:\
    \ number = 0;\n  let rolling_max_numbers_sum: number = 0;\n  for (let i = 0; i\
    \ < numbers.length; i++) {\n    rolling_max_numbers_sum += numbers[i];\n    if\
    \ (rolling_max_numbers_sum > rolling_max_numbers[rolling_max_numbers_length -\
    \ 1]) {\n      rolling_max_numbers[rolling_max_numbers_length] = rolling_max_numbers_sum;\n\
    \      rolling_max_numbers_length++;\n    }\n  }\n  return rolling_max_numbers;\n\
    }\n", "  let max: number[] = [];\n  let maxIndex: number[] = [];\n  for (let i\
    \ = 0; i < numbers.length; i++) {\n    if (numbers[i] > max[maxIndex[0]]) {\n\
    \      maxIndex[0] = i;\n      max = [numbers[i]];\n    } else {\n      max.push(numbers[i]);\n\
    \    }\n  }\n  for (let i = 1; i < maxIndex.length; i++) {\n    max[maxIndex[i]]\
    \ = Math.max(max[maxIndex[i]], max[maxIndex[i - 1]]);\n  }\n  return max;\n}\n",
  "  const rolling_max_array: number[] = [];\n  let max_value: number;\n  let max_index:\
    \ number;\n  for (let i = 0; i < numbers.length; i++) {\n    max_value = numbers[i];\n\
    \    max_index = i;\n    for (let j = i + 1; j < numbers.length; j++) {\n    \
    \  if (numbers[j] > max_value) {\n        max_value = numbers[j];\n        max_index\
    \ = j;\n      }\n    }\n    rolling_max_array.push(max_value);\n  }\n  return\
    \ rolling_max_array;\n}\n", "  const result = [];\n  let max = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "    const rolling_max_arr: number[] = [];\n    let rolling_max_value: number;\n\
    \    let rolling_max_index: number;\n    let rolling_max_found = false;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (!rolling_max_found) {\n\
    \            rolling_max_value = numbers[i];\n            rolling_max_index =\
    \ i;\n            rolling_max_found = true;\n        } else {\n            if\
    \ (numbers[i] > rolling_max_value) {\n                rolling_max_value = numbers[i];\n\
    \                rolling_max_index = i;\n                rolling_max_found = true;\n\
    \            }\n        }\n    }\n    rolling_max_arr.push(rolling_max_value);\n\
    \    for (let i = rolling_max_index + 1; i < numbers.length; i++) {\n        if\
    \ (!rolling_max_found) {\n            rolling_max_value = numbers[i];\n      \
    \      rolling_max_index = i;\n            rolling_max_found = true;\n       \
    \ } else {\n            if (numbers[i] > rolling_max_value) {\n              \
    \  rolling_max_value = numbers[i];\n                rolling_max_index = i;\n \
    \               rolling_max_found = true;\n            }\n        }\n    }\n \
    \   rolling_max_arr.push(rolling_max_value);\n    return rolling_max_arr;\n}",
  "    const result: number[] = [];\n    let max: number = 0;\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max\
    \ = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] === max) {\n            result.push(max);\n      \
    \  }\n    }\n    return result;\n}\n", "    let result: number[] = [];\n    let\
    \ max: number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] === max) {\n\
    \            result.push(max);\n        }\n    }\n    return result;\n}\n", " \
    \   const rolling_maxes: number[] = [];\n    let max_value = numbers[0];\n   \
    \ let max_index = 0;\n    for (let i = 1; i < numbers.length; i++) {\n       \
    \ if (numbers[i] > max_value) {\n            max_value = numbers[i];\n       \
    \     max_index = i;\n        }\n    }\n    rolling_maxes.push(max_value);\n \
    \   for (let i = max_index + 1; i < numbers.length; i++) {\n        rolling_maxes.push(numbers[i]);\n\
    \    }\n    return rolling_maxes;\n}\n", "  const rolling_max_array: number[]\
    \ = [];\n  let rolling_max_value: number;\n  let rolling_max_index = 0;\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_index >= numbers.length\
    \ - 1) {\n      rolling_max_array.push(rolling_max_value);\n      rolling_max_index\
    \ = 0;\n      rolling_max_value = numbers[i];\n    } else {\n      if (numbers[i]\
    \ > rolling_max_value) {\n        rolling_max_value = numbers[i];\n        rolling_max_index\
    \ = i;\n      }\n    }\n  }\n  return rolling_max_array;\n}\n", "    const rolling_max_array:\
    \ number[] = [];\n    let max_element: number = 0;\n    let current_element: number\
    \ = 0;\n    let max_index: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        current_element = numbers[i];\n        if (current_element >\
    \ max_element) {\n            max_element = current_element;\n            max_index\
    \ = i;\n        }\n        rolling_max_array[max_index] = max_element;\n    }\n\
    \    return rolling_max_array;\n}\n", "  const rolling_max_arr: number[] = [];\n\
    \  let rolling_max_number: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    rolling_max_number = Math.max(rolling_max_number, numbers[i]);\n\
    \    rolling_max_arr.push(rolling_max_number);\n  }\n  return rolling_max_arr;\n\
    }\n", "    const rolling_max_array: number[] = [];\n    let rolling_max_value:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (rolling_max_value < numbers[i]) {\n    \
    \        rolling_max_value = numbers[i];\n            rolling_max_index = i;\n\
    \        }\n    }\n    rolling_max_array.push(rolling_max_value);\n    for (let\
    \ i = rolling_max_index + 1; i < numbers.length; i++) {\n        rolling_max_value\
    \ = Math.max(rolling_max_value, numbers[i]);\n        rolling_max_array.push(rolling_max_value);\n\
    \    }\n    return rolling_max_array;\n}\n", "  const rolling_max_array: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_array.push(Math.max(...numbers));\n\
    \  }\n  return rolling_max_array;\n}\n", "    const result = [];\n    let max\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        if (numbers[i] === max) {\n         \
    \   result.push(max);\n        }\n    }\n    return result;\n}\n", "  const result:\
    \ number[] = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n\
    }\n", "  const rolling_maxes: number[] = [];\n  let rolling_max: number = 0;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    rolling_max = Math.max(rolling_max,\
    \ numbers[i]);\n    rolling_maxes.push(rolling_max);\n  }\n  return rolling_maxes;\n\
    }\n", "  const result: number[] = [];\n  let max: number = 0;\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ === max) {\n      result.push(max);\n    }\n  }\n  return result;\n}\n", " \
    \ let max: number[] = [];\n  let maxIndex: number[] = [];\n  for (let i = 0; i\
    \ < numbers.length; i++) {\n    if (numbers[i] > max[maxIndex[0]]) {\n      maxIndex[0]\
    \ = i;\n      max = [numbers[i]];\n    } else {\n      max.push(numbers[i]);\n\
    \    }\n  }\n  for (let i = 0; i < maxIndex.length; i++) {\n    numbers[maxIndex[i]]\
    \ = max[maxIndex[i]];\n  }\n  return numbers;\n}\n", "  const rolling_max_array:\
    \ number[] = [];\n  let rolling_max_value: number = 0;\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    if (numbers[i] > rolling_max_value) {\n      rolling_max_value\
    \ = numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n  }\n\
    \  return rolling_max_array;\n}\n", "  let rolling_max: number[] = [];\n  let\
    \ rolling_max_index: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (rolling_max[rolling_max_index] === undefined) {\n      rolling_max[rolling_max_index]\
    \ = numbers[i];\n      rolling_max_index++;\n    } else {\n      if (numbers[i]\
    \ > rolling_max[rolling_max_index]) {\n        rolling_max[rolling_max_index]\
    \ = numbers[i];\n      }\n    }\n  }\n  return rolling_max;\n}\n", "    let max:\
    \ number[] = [];\n    let current: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        current.push(numbers[i]);\n        if (i === 0) {\n        \
    \    max = current;\n        } else {\n            if (current[0] > max[0]) {\n\
    \                max = current;\n            }\n        }\n    }\n    return max;\n\
    }\n", "    let result: number[] = [];\n    let max: number = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n", "  const rolling_max_array: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const rolling_max_element\
    \ = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      if\
    \ (numbers[j] > rolling_max_element) {\n        rolling_max_element = numbers[j];\n\
    \      }\n    }\n    rolling_max_array.push(rolling_max_element);\n  }\n  return\
    \ rolling_max_array;\n}\n", "  const result: number[] = [];\n  let max: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max)\
    \ {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ result: number[] = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n", "    let result: number[] = [];\n    let max: number\
    \ = 0;\n    let index: number = 0;\n    while (index < numbers.length) {\n   \
    \     if (numbers[index] > max) {\n            max = numbers[index];\n       \
    \ }\n        index++;\n    }\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] > max) {\n            result.push(max);\n            max\
    \ = numbers[i];\n        }\n    }\n    result.push(max);\n    return result;\n\
    }\n", "    let rolling_max: number[] = [];\n    let max_element: number = 0;\n\
    \    let max_index: number = 0;\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for (let i = max_index; i <\
    \ numbers.length; i++) {\n        rolling_max.push(numbers[i]);\n    }\n    return\
    \ rolling_max;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
