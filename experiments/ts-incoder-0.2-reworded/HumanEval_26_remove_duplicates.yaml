name: HumanEval_26_remove_duplicates
language: ts
prompt: "//From an array of integers, remove all elements that occur more than once.\n\
  // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();"
completions: ["    const result: number[] = [];\n    let seen: number[] = [];\n  \
    \  for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i])\
    \ !== -1) {\n            continue;\n        }\n        result.push(numbers[i]);\n\
    \        seen.push(numbers[i]);\n    }\n    return result;\n}\n", "  const result\
    \ = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const\
    \ number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number]\
    \ = true;\n    result.push(number);\n  }\n  return result;\n}\n", "  const result\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "    const uniqueNumbers: number[] = [];\n    const numberSet = new Set(numbers);\n\
    \    numbers.forEach((num) => {\n        if (numberSet.has(num)) {\n         \
    \   numberSet.delete(num);\n        } else {\n            uniqueNumbers.push(num);\n\
    \        }\n    });\n    return uniqueNumbers;\n}\n", "    const unique: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i])\
    \ === -1) {\n            unique.push(numbers[i]);\n        }\n    }\n    return\
    \ unique;\n}\n", "  const hashTable = {};\n  const result = [];\n  for (let i\
    \ = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hashTable[number])\
    \ {\n      continue;\n    }\n    hashTable[number] = true;\n    result.push(number);\n\
    \  }\n  return result;\n}\n", "    const result = [];\n    const seen = new Set<number>();\n\
    \    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n\
    \        }\n        seen.add(num);\n        result.push(num);\n    }\n    return\
    \ result;\n}\n", "    const unique: number[] = [];\n    numbers.forEach((num)\
    \ => {\n        if (unique.indexOf(num) === -1) {\n            unique.push(num);\n\
    \        }\n    });\n    return unique;\n}\n", "  const unique: number[] = [];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i])\
    \ === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n",
  "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n   \
    \   seen.push(numbers[i]);\n      result.push(numbers[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
    \    }\n  }\n  return unique;\n}\n", "    const unique: number[] = [];\n    const\
    \ seen: number[] = [];\n    numbers.forEach((num) => {\n        if (seen.indexOf(num)\
    \ === -1) {\n            seen.push(num);\n            unique.push(num);\n    \
    \    }\n    });\n    return unique;\n}\n</code>\n<|/ a tags=javascript,typescript\
    \ |>\n<| a dscore=0 |>\n<code>\nconst arr = [1, 2, 3, 2, 4];\nconst unique = arr.filter((item,\
    \ index) => arr.indexOf(item) === index);\nconsole.log(unique);</code>\n<|/ a\
    \ tags=javascript,typescript |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    const arr = [1, 2, 3, 2, 4];\nconst unique = arr.filter((item, index) => arr.indexOf(item)\
    \ === index);\nconsole.log(unique);</code>\n<|/ a tags=javascript,typescript |>\n\
    <| a tags=javascript,typescript |>\n<code>\nconst arr = [1, 2, 3, 2, 4];\nconst\
    \ unique = arr.filter((item, index) => arr.indexOf(item) === index);\nconsole.log(unique);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst arr = [1, 2, 3, 2,\
    \ 4];\nconst unique = arr.filter((item, index) => arr.indexOf(item) === index);\n\
    console.log(unique);\n</code>\n<|/ a tags=javascript,typescript |>\n<| a tags=javascript,typescript\
    \ |>\n<code>\nconst arr = [1, 2, 3, 2, 4];\nconst unique = arr.filter((item, index)\
    \ => arr.indexOf(item) === index);\nconsole.log(unique);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nconst arr = [1, 2, 3, 2, 4];\nconst unique = arr.filter((item,\
    \ index) => arr.indexOf(item) === index);\nconsole.log(unique);\n</code>\n<|/\
    \ a tags=javascript,typescript |>\n<| a tags=javascript,typescript |>\n<code>\n\
    const arr = [1, 2, 3, 2, 4];\nconst unique = arr.filter((item, index) => arr.indexOf(item)\
    \ === index);\nconsole.log(unique);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nconst arr = [1, 2, 3, 2, 4];\nconst unique = arr.filter((item, index)\
    \ => arr.indexOf(item) === index);\nconsole.log(unique);\n</code>\n<|/ a tags=javascript,typescript\
    \ |>\n<| a |>\n<code>\nconst arr = [1, 2, 3, 2, 4];\nconst unique = arr.filter((",
  "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n   \
    \   continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number)\
    \ === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n}\n", " \
    \   const result = [];\n    const seen = new Set<number>();\n    for (const num\
    \ of numbers) {\n        if (seen.has(num)) {\n            continue;\n       \
    \ }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n\
    }\n", "  const result = [];\n  const seen = new Set<number>();\n  for (const num\
    \ of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "  const result = [];\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i])\
    \ === i) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
    \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n  \
    \  result.push(num);\n  }\n  return result;\n}\n", "  const unique: number[] =\
    \ [];\n  const seen: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (seen.indexOf(numbers[i]) !== -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n\
    \    unique.push(numbers[i]);\n  }\n  return unique;\n}\n", "    const output:\
    \ number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        const number = numbers[i];\n        if (seen.indexOf(number)\
    \ !== -1) {\n            continue;\n        }\n        seen.push(number);\n  \
    \      output.push(number);\n    }\n    return output;\n}\n", "  const hashTable:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number\
    \ = numbers[i];\n    if (hashTable.indexOf(number) === -1) {\n      hashTable.push(number);\n\
    \    }\n  }\n  return hashTable;\n}\n", "  const result = [];\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "    const output: number[] = [];\n    const seen: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !==\
    \ -1) {\n            continue;\n        }\n        seen.push(numbers[i]);\n  \
    \      output.push(numbers[i]);\n    }\n    return output;\n}\n", "    const unique:\
    \ number[] = [];\n    numbers.forEach((number) => {\n        if (unique.indexOf(number)\
    \ === -1) {\n            unique.push(number);\n        }\n    });\n    return\
    \ unique;\n}\n", "  const uniqueNumbers: number[] = [];\n  const numberSet = new\
    \ Set(numbers);\n  for (const num of numberSet) {\n    if (uniqueNumbers.indexOf(num)\
    \ === -1) {\n      uniqueNumbers.push(num);\n    }\n  }\n  return uniqueNumbers;\n\
    }\n", "    const result = [];\n    numbers.forEach((num) => {\n        if (result.indexOf(num)\
    \ === -1) {\n            result.push(num);\n        }\n    });\n    return result;\n\
    }\n", "  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n\
    \    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n\
    }\n", "    const result = [];\n    let seen = {};\n    numbers.forEach((num) =>\
    \ {\n        if (seen[num]) {\n            return;\n        }\n        seen[num]\
    \ = true;\n        result.push(num);\n    });\n    return result;\n}\n", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n", "    const unique: number[] = [];\n    numbers.forEach((num)\
    \ => {\n        if (unique.indexOf(num) === -1) {\n            unique.push(num);\n\
    \        }\n    });\n    return unique;\n}\n", "  const result = [];\n  let seen\
    \ = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
    \    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n \
    \   result.push(number);\n  }\n  return result;\n}\n", "  const result = [];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "    const unique: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((num)\
    \ => {\n        if (seen.indexOf(num) === -1) {\n            unique.push(num);\n\
    \            seen.push(num);\n        }\n    });\n    return unique;\n}\n", " \
    \   const result = [];\n    let seen = {};\n    numbers.forEach(n => {\n     \
    \   if (seen[n]) {\n            return;\n        }\n        seen[n] = true;\n\
    \        result.push(n);\n    });\n    return result;\n}\n", "  const result =\
    \ [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n\
    \      return;\n    }\n    seen[num] = true;\n    result.push(num);\n  });\n \
    \ return result;\n}\n", "    const result = [];\n    const seen = new Set<number>();\n\
    \    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n\
    \        }\n        seen.add(num);\n        result.push(num);\n    }\n    return\
    \ result;\n}\n", "    const result = [];\n    const seen = new Set();\n    for\
    \ (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n\
    \        }\n        seen.add(num);\n        result.push(num);\n    }\n    return\
    \ result;\n}\n", "    const unique: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (unique.indexOf(numbers[i]) === -1) {\n            unique.push(numbers[i]);\n\
    \        }\n    }\n    return unique;\n}\n", "    const unique: number[] = [];\n\
    \    const result: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (unique.indexOf(numbers[i]) === -1) {\n            unique.push(numbers[i]);\n\
    \            result.push(numbers[i]);\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis solution does not preserve the order\
    \ of elements in the input array. For example, `remove_duplicates([1, 2, 3, 2,\
    \ 4])` returns `[1, 3, 2, 4]` instead of `[1, 3, 4]`.\n<|/ c |>\n<| c |>\nI believe\
    \ this solution preserves the order of the elements in the input array. `remove_duplicates([1,\
    \ 2, 3, 2, 4])` returns `[1, 3, 4]` instead of `[1, 3, 2, 4]`.\n<|/ c |>\n<| c\
    \ |>\nThis solution does not preserve the order of the elements in the input array.\
    \ For example, `remove_duplicates([1, 2, 3, 2, 4])` returns `[1, 3, 2, 4]` instead\
    \ of `[1, 3, 4]`.\n<|/ c |>\n<| c |>\nThis solution does not preserve the order\
    \ of the elements in the input array. For example, `remove_duplicates([1, 2, 3,\
    \ 2, 4])` returns `[1, 3, 2, 4]` instead of `[1, 3, 4]`.\n<|/ c |>\n<| c |>\n\
    This solution does not preserve the order of the elements in the input array.\
    \ For example, `remove_duplicates([1, 2, 3, 2, 4])` returns `[1, 3, 2, 4]` instead\
    \ of `[1, 3, 4]`.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "    const result = [];\n\
    \    const seen = new Set<number>();\n    numbers.forEach((num) => {\n       \
    \ if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n\
    \        result.push(num);\n    });\n    return result;\n}\n", "    const result\
    \ = [];\n    const seen = new Set<number>();\n    numbers.forEach(n => {\n   \
    \     if (!seen.has(n)) {\n            seen.add(n);\n            result.push(n);\n\
    \        }\n    });\n    return result;\n}\n", "  const result = [];\n  const\
    \ seen = new Set<number>();\n  for (const num of numbers) {\n    if (seen.has(num))\
    \ {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n\
    \  return result;\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number)\
    \ === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n}\n", " \
    \ const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const output: number[] = [];\n  let seen: number[] = [];\n  for (let i = 0; i\
    \ < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n     \
    \ output.push(numbers[i]);\n      seen.push(numbers[i]);\n    }\n  }\n  return\
    \ output;\n}\n", "  const result = [];\n  let seen = {};\n  for (let i = 0; i\
    \ < numbers.length; i++) {\n    const num = numbers[i];\n    if (seen[num]) {\n\
    \      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n  }\n \
    \ return result;\n}\n", "  const result = [];\n  let seen = {};\n  for (let i\
    \ = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number])\
    \ {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n\
    \  }\n  return result;\n}\n", "    const result: number[] = [];\n    const seen:\
    \ number[] = [];\n    for (const num of numbers) {\n        if (seen.indexOf(num)\
    \ === -1) {\n            seen.push(num);\n            result.push(num);\n    \
    \    }\n    }\n    return result;\n}\n", "  const result = [];\n  const seen =\
    \ new Set<number>();\n  for (const num of numbers) {\n    if (seen.has(num)) {\n\
    \      continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n  return\
    \ result;\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    const result: number[] = [];\n    let\
    \ seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n     \
    \   const num = numbers[i];\n        if (seen.indexOf(num) >= 0) {\n         \
    \   continue;\n        }\n        result.push(num);\n        seen.push(num);\n\
    \    }\n    return result;\n}\n", "    const result: number[] = [];\n    const\
    \ seen: number[] = [];\n    for (const num of numbers) {\n        if (seen.indexOf(num)\
    \ >= 0) {\n            continue;\n        }\n        result.push(num);\n     \
    \   seen.push(num);\n    }\n    return result;\n}\n", "  const map = new Map<number,\
    \ number>();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num,\
    \ map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const\
    \ result = [];\n  for (const [key, value] of map) {\n    if (value === 1) {\n\
    \      result.push(key);\n    }\n  }\n  return result;\n}\n", "  const map = new\
    \ Map<number, number>();\n  for (const num of numbers) {\n    if (!map.has(num))\
    \ {\n      map.set(num, num);\n    }\n  }\n  return Array.from(map.values());\n\
    }\n", "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n\
    \    }\n  }\n  return uniqueNumbers;\n}\n", "  const output: number[] = [];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i])\
    \ === -1) {\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n}\n",
  "    const unique: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (unique.indexOf(numbers[i]) === -1) {\n            unique.push(numbers[i]);\n\
    \        }\n    }\n    return unique;\n}\n", "  const uniqueNumbers: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i])\
    \ === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n\
    }\n", "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n\
    \  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n \
    \   }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const unique: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n   \
    \   continue;\n    }\n    seen.push(numbers[i]);\n    unique.push(numbers[i]);\n\
    \  }\n  return unique;\n}\n", "    const unique: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i]) ===\
    \ -1) {\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n\
    }\n", "    const result = [];\n    let seen: number[] = [];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        const number = numbers[i];\n        if\
    \ (seen.indexOf(number) !== -1) {\n            continue;\n        }\n        seen.push(number);\n\
    \        result.push(number);\n    }\n    return result;\n}\n", "  const uniqueNumbers:\
    \ number[] = [];\n  const numberSet = new Set(numbers);\n  for (const num of numberSet)\
    \ {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n\
    \    }\n  }\n  return uniqueNumbers;\n}\n", "  const result: number[] = [];\n\
    \  const seen: Set<number> = new Set();\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    seen.add(numbers[i]);\n\
    \    result.push(numbers[i]);\n  }\n  return result;\n}\n", "  const uniqueNumbers:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i])\
    \ === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n\
    \      result.push(number);\n    }\n  }\n  return result;\n}\n", "  const result\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "    const unique: number[] = [];\n    const result: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i]) ===\
    \ -1) {\n            unique.push(numbers[i]);\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  const map = new Map<number, number>();\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
    \    if (map.has(number)) {\n      map.set(number, map.get(number) + 1);\n   \
    \ } else {\n      map.set(number, 1);\n    }\n  }\n  const result = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n   \
    \ if (map.has(number)) {\n      result.push(number);\n      map.delete(number);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n \
    \     result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "    const\
    \ result = [];\n    const seen = new Set<number>();\n    for (const num of numbers)\
    \ {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n\
    \        result.push(num);\n    }\n    return result;\n}\n", "  const result =\
    \ [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    const number = numbers[i];\n    if (seen.has(number)) {\n      continue;\n\
    \    }\n    seen.add(number);\n    result.push(number);\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n\
    \  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n \
    \   }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "    const uniqueNumbers: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n          \
    \  uniqueNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers;\n\
    }\n", "    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((num)\
    \ => {\n        if (seen.indexOf(num) === -1) {\n            seen.push(num);\n\
    \            result.push(num);\n        }\n    });\n    return result;\n}\n",
  "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
    \    }\n  }\n  return unique;\n}\n", "  const result = [];\n  const seen = new\
    \ Set<number>();\n  for (const num of numbers) {\n    if (seen.has(num)) {\n \
    \     continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n  return\
    \ result;\n}\n", "    const result = [];\n    const seen = new Set<number>();\n\
    \    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n\
    \        }\n        seen.add(num);\n        result.push(num);\n    }\n    return\
    \ result;\n}\n", "    const result = [];\n    const seen = new Set();\n    numbers.forEach((num)\
    \ => {\n        if (seen.has(num)) {\n            return;\n        }\n       \
    \ seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n",
  "    const result = [];\n    let seen = {};\n    numbers.forEach((num) => {\n  \
    \      if (seen[num]) {\n            return;\n        }\n        seen[num] = true;\n\
    \        result.push(num);\n    });\n    return result;\n}\n", "    const result:\
    \ number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n\
    \            result.push(numbers[i]);\n        }\n    }\n    return result;\n\
    }\n", "    const unique: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        const number = numbers[i];\n        if (unique.indexOf(number)\
    \ === -1) {\n            unique.push(number);\n        }\n    }\n    return unique;\n\
    }\n", "  const output: number[] = [];\n  const seen: Set<number> = new Set();\n\
    \  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n \
    \   }\n    seen.add(num);\n    output.push(num);\n  }\n  return output;\n}\n",
  "  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n\
    \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "  const unique: number[] = [];\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n\
    \      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "  const\
    \ result = [];\n  const seen = new Set<number>();\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    seen.add(numbers[i]);\n\
    \    result.push(numbers[i]);\n  }\n  return result;\n}\n", "  const output: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i])\
    \ === -1) {\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n}\n",
  "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
    \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "  const result = [];\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
    \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "  const result = [];\n \
    \ const seen = new Set();\n  for (const num of numbers) {\n    if (seen.has(num))\
    \ {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n\
    \  return result;\n}\n", "    const result = [];\n    let seen = {};\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n\
    \        if (seen[number]) {\n            continue;\n        }\n        seen[number]\
    \ = true;\n        result.push(number);\n    }\n    return result;\n}\n", "  const\
    \ result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n  \
    \  if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n", "    const result = [];\n    const seen = new Set<number>();\n\
    \    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n\
    \        }\n        seen.add(num);\n        result.push(num);\n    }\n    return\
    \ result;\n}\n", "    const output: number[] = [];\n    const seen: number[] =\
    \ [];\n    for (let i = 0; i < numbers.length; i++) {\n        const number =\
    \ numbers[i];\n        if (seen.indexOf(number) >= 0) {\n            continue;\n\
    \        }\n        seen.push(number);\n        output.push(number);\n    }\n\
    \    return output;\n}\n", "    const result: number[] = [];\n    const seen:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i])\
    \ === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  const result = [];\n  const seen\
    \ = new Set<number>();\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i]))\
    \ {\n      continue;\n    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ hash: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (hash.indexOf(numbers[i])\
    \ === -1) {\n      hash.push(numbers[i]);\n    }\n  }\n  return hash;\n}\n", " \
    \   const result = [];\n    let seen = {};\n    numbers.forEach((num) => {\n \
    \       if (seen[num]) {\n            return;\n        }\n        seen[num] =\
    \ true;\n        result.push(num);\n    });\n    return result;\n}\n", "    const\
    \ result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n\
    \            result.push(numbers[i]);\n            seen.push(numbers[i]);\n  \
    \      }\n    }\n    return result;\n}\n", "  const uniqueNumbers: number[] =\
    \ [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i])\
    \ === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n\
    }\n", "  const result = [];\n  const seen = new Set<number>();\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n\
    \    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return\
    \ result;\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers.indexOf(numbers[i]) > -1) continue;\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  const seen = new\
    \ Set();\n  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n\
    \    }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const result = [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    seen.add(numbers[i]);\n\
    \    result.push(numbers[i]);\n  }\n  return result;\n}\n", "  const result =\
    \ [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i])\
    \ === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return\
    \ result;\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    const result = [];\n    const seen =\
    \ new Set();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n\
    \            continue;\n        }\n        seen.add(num);\n        result.push(num);\n\
    \    }\n    return result;\n}\n", "    const result: number[] = [];\n    let seen:\
    \ Set<number> = new Set();\n    numbers.forEach((num) => {\n        if (seen.has(num))\
    \ {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n\
    \    });\n    return result;\n}\n", "    const result: number[] = [];\n    let\
    \ seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n     \
    \   const number = numbers[i];\n        if (seen.indexOf(number) !== -1) {\n \
    \           continue;\n        }\n        seen.push(number);\n        result.push(number);\n\
    \    }\n    return result;\n}\n", "  const result = [];\n  const seen = new Set<number>();\n\
    \  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n \
    \   }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const hash: number[] = [];\n  const result: number[] = [];\n\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (hash.indexOf(num)\
    \ === -1) {\n      result.push(num);\n      hash.push(num);\n    }\n  }\n\n  return\
    \ result;\n}\n", "  const result: number[] = [];\n  const seen: Set<number> =\
    \ new Set();\n  for (const num of numbers) {\n    if (seen.has(num)) {\n     \
    \ continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n\
    }\n", "  const map = new Map<number, number>();\n  for (const num of numbers)\
    \ {\n    if (!map.has(num)) {\n      map.set(num, num);\n    }\n  }\n  return\
    \ Array.from(map.values());\n}\n", "  const unique: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1)\
    \ {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "  const\
    \ unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n\
    \  }\n  return unique;\n}\n", "  const unique: number[] = [];\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n\
    \      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "  const\
    \ map = new Map<number, number>();\n  for (const num of numbers) {\n    if (map.has(num))\
    \ {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n\
    \    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries())\
    \ {\n    if (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  let seen: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (seen.indexOf(num)\
    \ >= 0) {\n      continue;\n    }\n    seen.push(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "  const uniqueNumbers: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i])\
    \ === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n\
    }\n", "  const result = [];\n  let seen: number[] = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    const num = numbers[i];\n    if (seen.indexOf(num)\
    \ >= 0) {\n      continue;\n    }\n    seen.push(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "    const unique: number[] = [];\n    const seen:\
    \ number[] = [];\n    numbers.forEach((num) => {\n        if (seen.indexOf(num)\
    \ === -1) {\n            unique.push(num);\n            seen.push(num);\n    \
    \    }\n    });\n    return unique;\n}", "    const result: number[] = [];\n \
    \   let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n\
    \            result.push(numbers[i]);\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,javascript,typescript |>\n<| a tags=arrays,javascript,typescript\
    \ |>\n<code>", "  const result = [];\n  let seen = {};\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number])\
    \ {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  const seen: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n\
    \    if (seen.indexOf(num) >= 0) {\n      continue;\n    }\n    seen.push(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "  const result = [];\n \
    \ const seen = new Set<number>();\n  for (const num of numbers) {\n    if (seen.has(num))\
    \ {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n\
    \  return result;\n}\n", "  const unique: number[] = [];\n  for (let i = 0; i\
    \ < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n   \
    \   unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "  const result\
    \ = [];\n  const seen = new Set();\n  for (const num of numbers) {\n    if (seen.has(num))\
    \ {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n\
    \  return result;\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const unique: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1)\
    \ {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "   \
    \ const result = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        const num = numbers[i];\n        if (seen.indexOf(num) >= 0)\
    \ {\n            continue;\n        }\n        result.push(num);\n        seen.push(num);\n\
    \    }\n    return result;\n}\n", "  const unique: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1)\
    \ {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "  const\
    \ map = new Map<number, number>();\n  for (const num of numbers) {\n    if (map.has(num))\
    \ {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n\
    \    }\n  }\n  return Array.from(map.entries()).filter(([, count]) => count >\
    \ 1).map(([num]) => num);\n}\n", "  const map = new Map<number, number>();\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
    \    if (map.has(number)) {\n      map.set(number, map.get(number) + 1);\n   \
    \ } else {\n      map.set(number, 1);\n    }\n  }\n  const result = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n   \
    \ if (map.has(number)) {\n      result.push(number);\n      map.delete(number);\n\
    \    }\n  }\n  return result;\n}\n", "  const unique: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1)\
    \ {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "  const\
    \ result = [];\n  let seen: Set<number> = new Set();\n  for (const num of numbers)\
    \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n  \
    \  result.push(num);\n  }\n  return result;\n}\n", "    const result = [];\n \
    \   const seen = new Set<number>();\n    for (const num of numbers) {\n      \
    \  if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n\
    \        result.push(num);\n    }\n    return result;\n}\n", "  const result =\
    \ [];\n  const seen = new Set();\n  for (const num of numbers) {\n    if (seen.has(num))\
    \ {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n\
    \  return result;\n}\n", "  const result: number[] = [];\n  const seen: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
    \    if (seen.indexOf(number) >= 0) {\n      continue;\n    }\n    seen.push(number);\n\
    \    result.push(number);\n  }\n  return result;\n}\n", "  const result = [];\n\
    \  let seen: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n  \
    \  const num = numbers[i];\n    if (seen.indexOf(num) >= 0) {\n      continue;\n\
    \    }\n    seen.push(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  const seen = new\
    \ Set();\n  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n\
    \    }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n   \
    \   seen.push(numbers[i]);\n      result.push(numbers[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const unique: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1)\
    \ {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "   \
    \ const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((num)\
    \ => {\n        if (seen.indexOf(num) === -1) {\n            seen.push(num);\n\
    \            result.push(num);\n        }\n    });\n    return result;\n}\n",
  "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
    \ (!map.has(num)) {\n      map.set(num, num);\n    }\n  }\n  return Array.from(map.values());\n\
    }\n", "    const result = [];\n    const seen = new Set<number>();\n    for (const\
    \ num of numbers) {\n        if (seen.has(num)) {\n            continue;\n   \
    \     }\n        seen.add(num);\n        result.push(num);\n    }\n    return\
    \ result;\n}\n", "    const uniqueNumbers: number[] = [];\n    let uniqueCount\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (uniqueCount\
    \ < numbers[i]) {\n            uniqueCount++;\n            uniqueNumbers.push(numbers[i]);\n\
    \        }\n    }\n    return uniqueNumbers;\n}\n", "    const result = [];\n\
    \    const seen = new Set<number>();\n    for (const num of numbers) {\n     \
    \   if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n\
    \        result.push(num);\n    }\n    return result;\n}\n", "    const unique:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i])\
    \ === -1) {\n            unique.push(numbers[i]);\n        }\n    }\n    return\
    \ unique;\n}\n", "    const unique: number[] = [];\n    const seen: number[] =\
    \ [];\n    for (let i = 0; i < numbers.length; i++) {\n        const number =\
    \ numbers[i];\n        if (seen.indexOf(number) !== -1) {\n            continue;\n\
    \        }\n        seen.push(number);\n        unique.push(number);\n    }\n\
    \    return unique;\n}\n", "  const result: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n \
    \     result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  const seen: Set<number> = new Set();\n  for (const num of\
    \ numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "  const map = new Map<number,\
    \ number>();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num,\
    \ map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const\
    \ result = [];\n  for (const [key, value] of map) {\n    if (value > 1) {\n  \
    \    result.push(key);\n    }\n  }\n  return result;\n}\n", "    const result:\
    \ number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n\
    \            result.push(numbers[i]);\n        }\n    }\n    return result;\n\
    }\n", "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n  \
    \  if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const unique: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1)\
    \ {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "  const\
    \ unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n\
    \  }\n  return unique;\n}\n", "    const uniqueNumbers: number[] = [];\n    const\
    \ numberSet = new Set<number>();\n    for (const num of numbers) {\n        if\
    \ (numberSet.has(num)) {\n            continue;\n        }\n        numberSet.add(num);\n\
    \        uniqueNumbers.push(num);\n    }\n    return uniqueNumbers;\n}\n</code>\n\
    <|/ a tags=arrays,javascript,typescript |>\n<| c |>\nThis solution has O(n^2)\
    \ complexity. Not sure if that is acceptable for OP's use case.\n<|/ c |>\n<|\
    \ c |>\nYes, I agree with you. My solution has O(n) complexity. My solution is\
    \ more readable and easy to understand.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ my solution is more readable and easy to understand.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, my solution is more readable and easy to understand.\n<|/ c |>\n<|\
    \ c |>\nI agree with you, my solution is more readable and easy to understand.\n\
    <|/ c |>\n<| a tags=arrays,javascript,typescript |>\n<code>\nconst arr = [1, 2,\
    \ 3, 2, 4];\n\nconst result = arr.reduce((acc, cur) => {\n  const index = acc.findIndex(item\
    \ => item === cur);\n  if (index === -1) {\n    acc.push(cur);\n  } else {\n \
    \   acc[index] = cur;\n  }\n  return acc;\n}, []);\n\nconsole.log(result);</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis solution has O(n^2) complexity. Not sure if that\
    \ is acceptable for OP's use case.\n<|/ c |>\n<| c |>\nThis solution is O(n) complexity\n\
    <|/ c |>\n<| c |>\nThis solution is O(n) complexity\n<|/ c |>\n<| c |>\nThis solution\
    \ is O(n) complexity\n<|/ c |>\n<| c |>\nThis solution is O(n) complexity\n<|/\
    \ c |>\n<| a tags=arrays,javascript,typescript |>\n<code>\nconst arr = [1, 2,\
    \ 3, 2, 4];\nconst unique = arr.reduce((acc, cur) => {\n  const index = acc.findIndex(item\
    \ => item === cur);\n  if (index === -1) {\n    acc.push(cur);\n  } else {\n \
    \   acc[index] = cur;\n  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis solution is O(n) complexity\n", "  const result\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
    \ (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n    \
    \  map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (const [key, value]\
    \ of map.entries()) {\n    if (value > 1) {\n      result.push(key);\n    }\n\
    \  }\n  return result;\n}\n", "  const result = [];\n  let seen = {};\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number])\
    \ {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n\
    \  }\n  return result;\n}\n", "    const output: number[] = [];\n    const seen:\
    \ number[] = [];\n    numbers.forEach(n => {\n        if (seen.indexOf(n) >= 0)\
    \ {\n            return;\n        }\n        seen.push(n);\n        output.push(n);\n\
    \    });\n    return output;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>", "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n\
    \  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n \
    \   }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
    \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "  const result = [];\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
    \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n  \
    \  result.push(num);\n  }\n  return result;\n}\n", "    const result = [];\n \
    \   const seen = new Set<number>();\n    for (const num of numbers) {\n      \
    \  if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n\
    \        result.push(num);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=javascript,arrays |>\n<code>", "    const result: number[] = [];\n\
    \    const seen: number[] = [];\n    numbers.forEach((num) => {\n        if (seen.indexOf(num)\
    \ === -1) {\n            seen.push(num);\n            result.push(num);\n    \
    \    }\n    });\n    return result;\n}\n", "    const result: number[] = [];\n\
    \    const seen: number[] = [];\n    numbers.forEach((number) => {\n        if\
    \ (seen.indexOf(number) === -1) {\n            result.push(number);\n        \
    \    seen.push(number);\n        }\n    });\n    return result;\n}\n", "    const\
    \ unique: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        const number = numbers[i];\n        if (seen.indexOf(number)\
    \ !== -1) {\n            continue;\n        }\n        seen.push(number);\n  \
    \      unique.push(number);\n    }\n    return unique;\n}", "  const unique: number[]\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i])\
    \ === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n",
  "  const hash = new Set<number>();\n  const result = [];\n  for (const num of numbers)\
    \ {\n    if (hash.has(num)) {\n      continue;\n    }\n    result.push(num);\n\
    \    hash.add(num);\n  }\n  return result;\n}\n", "    const result = [];\n  \
    \  let seen = {};\n    for (let i = 0; i < numbers.length; i++) {\n        const\
    \ number = numbers[i];\n        if (seen[number]) {\n            continue;\n \
    \       }\n        seen[number] = true;\n        result.push(number);\n    }\n\
    \    return result;\n}\n", "    const unique: number[] = [];\n    numbers.forEach((num)\
    \ => {\n        if (unique.indexOf(num) === -1) {\n            unique.push(num);\n\
    \        }\n    });\n    return unique;\n}\n", "  const map = new Map<number,\
    \ number>();\n  for (const num of numbers) {\n    if (map.has(num)) {\n      map.set(num,\
    \ map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const\
    \ result = [];\n  for (const [key, value] of map) {\n    if (value > 1) {\n  \
    \    result.push(key);\n    }\n  }\n  return result;\n}\n", "    const result\
    \ = [];\n    numbers.forEach((num) => {\n        if (result.indexOf(num) === -1)\
    \ {\n            result.push(num);\n        }\n    });\n    return result;\n}\n\
    </code>\n<|/ a tags=arrays,javascript,typescript |>\n<| a tags=arrays,javascript,typescript\
    \ |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, ", "  const result = [];\n  const seen = new Set<number>();\n\
    \  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n \
    \   }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n",
  "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number\
    \ = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  const seen = new\
    \ Set<number>();\n  for (const num of numbers) {\n    if (seen.has(num)) {\n \
    \     continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n  return\
    \ result;\n}\n", "  const map = new Map<number, number>();\n  for (const num of\
    \ numbers) {\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n\
    \    } else {\n      map.set(num, 1);\n    }\n  }\n  return Array.from(map.keys()).sort((a,\
    \ b) => a - b);\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  const\
    \ seen: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i])\
    \ !== -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\n", "  const unique: number[] = [];\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n\
    \      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "  const\
    \ result = [];\n  let seen: Set<number> = new Set();\n  for (const num of numbers)\
    \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n  \
    \  result.push(num);\n  }\n  return result;\n}\n", "  const result: number[] =\
    \ [];\n  const seen: Set<number> = new Set();\n  for (const num of numbers) {\n\
    \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n", "  const hashTable = {};\n  const uniqueNumbers\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
    \    if (hashTable[number]) {\n      hashTable[number]++;\n    } else {\n    \
    \  hashTable[number] = 1;\n      uniqueNumbers.push(number);\n    }\n  }\n  return\
    \ uniqueNumbers;\n}\n", "    const result: number[] = [];\n    const seen: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i])\
    \ === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  const result: number[] = [];\n\
    \  const seen: Set<number> = new Set();\n  for (const num of numbers) {\n    if\
    \ (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
    \  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
