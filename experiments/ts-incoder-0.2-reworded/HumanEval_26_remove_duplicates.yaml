name: HumanEval_26_remove_duplicates
language: ts
prompt: "//From an array of integers, remove all elements that occur more than once.\n\
  // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();"
completions: ["    const result: number[] = [];\n    let seen: number[] = [];\n  \
    \  for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i])\
    \ !== -1) {\n            continue;\n        }\n        result.push(numbers[i]);\n\
    \        seen.push(numbers[i]);\n    }\n    return result;\n}\n", "  const result\
    \ = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const\
    \ number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number]\
    \ = true;\n    result.push(number);\n  }\n  return result;\n}\n", "  const result\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "    const uniqueNumbers: number[] = [];\n    const numberSet = new Set(numbers);\n\
    \    numbers.forEach((num) => {\n        if (numberSet.has(num)) {\n         \
    \   numberSet.delete(num);\n        } else {\n            uniqueNumbers.push(num);\n\
    \        }\n    });\n    return uniqueNumbers;\n}\n", "    const unique: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i])\
    \ === -1) {\n            unique.push(numbers[i]);\n        }\n    }\n    return\
    \ unique;\n}\n", "  const hashTable = {};\n  const result = [];\n  for (let i\
    \ = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hashTable[number])\
    \ {\n      continue;\n    }\n    hashTable[number] = true;\n    result.push(number);\n\
    \  }\n  return result;\n}\n", "    const result = [];\n    const seen = new Set<number>();\n\
    \    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n\
    \        }\n        seen.add(num);\n        result.push(num);\n    }\n    return\
    \ result;\n}\n", "    const unique: number[] = [];\n    numbers.forEach((num)\
    \ => {\n        if (unique.indexOf(num) === -1) {\n            unique.push(num);\n\
    \        }\n    });\n    return unique;\n}\n", "  const unique: number[] = [];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i])\
    \ === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n",
  "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n   \
    \   seen.push(numbers[i]);\n      result.push(numbers[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
    \    }\n  }\n  return unique;\n}\n", "    const unique: number[] = [];\n    const\
    \ seen: number[] = [];\n    numbers.forEach((num) => {\n        if (seen.indexOf(num)\
    \ === -1) {\n            seen.push(num);\n            unique.push(num);\n    \
    \    }\n    });\n    return unique;\n}\n</code>\n<|/ a tags=javascript,typescript\
    \ |>\n<| a dscore=0 |>\n<code>\nconst arr = [1, 2, 3, 2, 4];\nconst unique = arr.filter((item,\
    \ index) => arr.indexOf(item) === index);\nconsole.log(unique);</code>\n<|/ a\
    \ tags=javascript,typescript |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    const arr = [1, 2, 3, 2, 4];\nconst unique = arr.filter((item, index) => arr.indexOf(item)\
    \ === index);\nconsole.log(unique);</code>\n<|/ a tags=javascript,typescript |>\n\
    <| a tags=javascript,typescript |>\n<code>\nconst arr = [1, 2, 3, 2, 4];\nconst\
    \ unique = arr.filter((item, index) => arr.indexOf(item) === index);\nconsole.log(unique);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst arr = [1, 2, 3, 2,\
    \ 4];\nconst unique = arr.filter((item, index) => arr.indexOf(item) === index);\n\
    console.log(unique);\n</code>\n<|/ a tags=javascript,typescript |>\n<| a tags=javascript,typescript\
    \ |>\n<code>\nconst arr = [1, 2, 3, 2, 4];\nconst unique = arr.filter((item, index)\
    \ => arr.indexOf(item) === index);\nconsole.log(unique);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nconst arr = [1, 2, 3, 2, 4];\nconst unique = arr.filter((item,\
    \ index) => arr.indexOf(item) === index);\nconsole.log(unique);\n</code>\n<|/\
    \ a tags=javascript,typescript |>\n<| a tags=javascript,typescript |>\n<code>\n\
    const arr = [1, 2, 3, 2, 4];\nconst unique = arr.filter((item, index) => arr.indexOf(item)\
    \ === index);\nconsole.log(unique);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nconst arr = [1, 2, 3, 2, 4];\nconst unique = arr.filter((item, index)\
    \ => arr.indexOf(item) === index);\nconsole.log(unique);\n</code>\n<|/ a tags=javascript,typescript\
    \ |>\n<| a |>\n<code>\nconst arr = [1, 2, 3, 2, 4];\nconst unique = arr.filter((",
  "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n   \
    \   continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number)\
    \ === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n}\n", " \
    \   const result = [];\n    const seen = new Set<number>();\n    for (const num\
    \ of numbers) {\n        if (seen.has(num)) {\n            continue;\n       \
    \ }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n\
    }\n", "  const result = [];\n  const seen = new Set<number>();\n  for (const num\
    \ of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
    \    result.push(num);\n  }\n  return result;\n}\n", "  const result = [];\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i])\
    \ === i) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
    \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n  \
    \  result.push(num);\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
