name: HumanEval_160_do_algebra
language: ts
prompt: "//Given two arrays operator, and operand. The first array has basic algebra\
  \ operations, and \n// the second array is an array of integers. Use the two given\
  \ arrays to build the algebric \n// expression and return the evaluation of this\
  \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
  \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
  \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n//\
  \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
  \ array is equal to the length of operand array minus one.\n// Operand is an array\
  \ of of non-negative integers.\n// Operator array has at least one operator, and\
  \ operand array has at least two operands.\nfunction do_algebra(operator: string[],\
  \ operand: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\"\
  , \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\"\
  , \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3,\
  \ 4]),8);\n}\n\ntest();"
completions: ["  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n \
    \   let op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 =\
    \ operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n    let\
    \ op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 =\
    \ operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n    let\
    \ op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result +=\
    \ operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n}\n",
  "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 =\
    \ operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n    let\
    \ op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 =\
    \ operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n    let\
    \ op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \   let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        switch\
    \ (operator[i]) {\n            case '+':\n                result += operand[i];\n\
    \                break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,javascript,typescript\
    \ |>\n<| c |>\nThis is not an answer to the question. OP asked for help with his\
    \ code not for someone to write it for him.\n<|/ c |>\n<| c |>\nI did it for him.\
    \ He asked for help with his code not for someone to write it for him. He asked\
    \ for help with his code not for someone to write it for him. He asked for help\
    \ with his code not for someone to write it for him. He asked for help with his\
    \ code not for someone to write it for him. He asked for help with his code not\
    \ for someone to write it for him. He asked for help with his code not for someone\
    \ to write it for him. He asked for help with his code not for someone to write\
    \ it for him. He asked for help with his code not for someone to write it for\
    \ him. He asked for help with his code not for someone to write it for him. He\
    \ asked for help with his code not for someone to write it for him. He asked for\
    \ help with his code not for someone to write it for him. He asked for help with\
    \ his code not for someone to write it for him. He asked for help with his code\
    \ not for someone to write it for him. He asked for help with his code not for\
    \ someone to write it for him. He asked for help with his code not for someone\
    \ to write it for him. He asked for help with his code not for someone to write\
    \ it for him. He asked for help with his code not for someone to write it for\
    \ him. He asked for help with his code not for someone to write it for him. He\
    \ asked for help with his code not for someone to write it for him. H", "    let\
    \ result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        result\
    \ += operand[i] * operator[operand.length - 1 - i];\n    }\n    return result;\n\
    }\n", "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let\
    \ op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \   let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        switch\
    \ (operator[i]) {\n            case '+':\n                result += operand[i];\n\
    \                break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n        }\n    }\n    return result;\n}\n", "  let result\
    \ = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[i]\
    \ * operator[i];\n  }\n  return result;\n}\n", "    let result = 0;\n    for (let\
    \ i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n       \
    \     case '+':\n                result = result + operand[i];\n             \
    \   break;\n            case '-':\n                result = result - operand[i];\n\
    \                break;\n            case '*':\n                result = result\
    \ * operand[i];\n                break;\n            case '/':\n             \
    \   result = result / operand[i];\n                break;\n            case '**':\n\
    \                result = result ** operand[i];\n                break;\n    \
    \        default:\n                break;\n        }\n    }\n    return result;\n\
    }\n", "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result\
    \ += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n}\n",
  "    let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        switch\
    \ (operator[i]) {\n            case '+':\n                result += operand[i];\n\
    \                break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                console.log('Invalid\
    \ operator');\n                break;\n        }\n    }\n    return result;\n\
    }\n", "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let\
    \ op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \   let result = 0;\n    let operator_index = 0;\n    let operand_index = 0;\n\
    \    while (operator_index < operator.length) {\n        switch (operator[operator_index])\
    \ {\n            case '+':\n                result += operand[operand_index];\n\
    \                operand_index++;\n                break;\n            case '-':\n\
    \                result -= operand[operand_index];\n                operand_index++;\n\
    \                break;\n            case '*':\n                result *= operand[operand_index];\n\
    \                operand_index++;\n                break;\n            case '/':\n\
    \                result /= operand[operand_index];\n                operand_index++;\n\
    \                break;\n            case '**':\n                result **= operand[operand_index];\n\
    \                operand_index++;\n                break;\n            default:\n\
    \                throw 'Invalid operator';\n        }\n        operator_index++;\n\
    \    }\n    return result;\n}\n", "    let result = 0;\n    for (let i = 0; i\
    \ < operand.length; i++) {\n        let op1 = operator[0];\n        let op2 =\
    \ operator[1];\n        let op3 = operator[2];\n        let op4 = operator[3];\n\
    \        let op5 = operator[4];\n        let op6 = operator[5];\n        let op7\
    \ = operator[6];\n        let op8 = operator[7];\n        let op9 = operator[8];\n\
    \        let op10 = operator[9];\n        let op11 = operator[10];\n        let\
    \ op12 = operator[11];\n        let op13 = operator[12];\n        let op14 = operator[13];\n\
    \        let op15 = operator[14];\n        let op16 = operator[15];\n        let\
    \ op17 = operator[16];\n        let op18 = operator[17];\n        let op19 = operator[18];\n\
    \        let op20 = operator[19];\n        let op21 = operator[20];\n        let\
    \ op22 = operator[21];\n        let op23 = operator[22];\n        let op24 = operator[23];\n\
    \        let op25 = operator[24];\n        let op26 = operator[25];\n        let\
    \ op27 = operator[26];\n        let op28 = operator[27];\n        let op29 = operator[28];\n\
    \        let op30 = operator[29];\n        let op31 = operator[30];\n        let\
    \ op32 = operator[31];\n        let op33 = operator[32];\n        let op34 = operator[33];\n\
    \        let op35 = operator[34];\n        let op36 = operator[35];\n        let\
    \ op37 = operator[36];\n        let op38 = operator[37];\n        let op39 = operator[38];\n\
    \        let op40 = operator[39];\n        let op41 = operator[40];\n        let\
    \ op42 = operator[41];\n        let op43 = operator[42];\n        let op44 = operator[43];\n\
    \        let op45 = operator[44];\n        let op46 = operator[45];\n        let\
    \ op47 = operator[46];\n        let op48 = operator[47];\n        let op49 = operator[48];\n\
    \        let op50 = operator[49];\n        let op51 = operator[50];\n        let\
    \ op52 = operator[51];\n        let op53 = operator[52];\n        let op54 = operator[53];\n\
    \        let op55 = operator[54];\n        let op56 = operator[55];\n        let\
    \ op57 = operator[56];\n        let op58 = operator[57];\n        let op59 = operator[58];\n\
    \        let op60", "  let result = 0;\n  for (let i = 0; i < operand.length;\
    \ i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3\
    \ = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n   \
    \ let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    let operator\
    \ = operator[i];\n    let operand1 = operand[i];\n    let operand2 = operand[i\
    \ - 1];\n    switch (operator) {\n      case '+':\n        result += operand1;\n\
    \        break;\n      case '-':\n        result -= operand1;\n        break;\n\
    \      case '*':\n        result *= operand1;\n        break;\n      case '/':\n\
    \        result /= operand1;\n        break;\n      case '**':\n        result\
    \ **= operand1;\n        break;\n      default:\n        throw 'Invalid operator';\n\
    \    }\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = 0; i <\
    \ operand.length; i++) {\n    let oper = operator[i];\n    let operand1 = operand[i];\n\
    \    let operand2 = operand[i + 1];\n    switch (oper) {\n      case '+':\n  \
    \      result += operand1;\n        break;\n      case '-':\n        result -=\
    \ operand1;\n        break;\n      case '*':\n        result *= operand1;\n  \
    \      break;\n      case '/':\n        result /= operand1;\n        break;\n\
    \      case '**':\n        result **= operand1;\n        break;\n      default:\n\
    \        throw 'Invalid operator';\n    }\n  }\n  return result;\n}\n", "    let\
    \ result = 0;\n    let i = 0;\n    while (i < operand.length) {\n        let op\
    \ = operator[i];\n        let a = operand[i];\n        let b = operand[i + 1];\n\
    \        switch (op) {\n            case '+':\n                result = a + b;\n\
    \                break;\n            case '-':\n                result = a - b;\n\
    \                break;\n            case '*':\n                result = a * b;\n\
    \                break;\n            case '/':\n                result = a / b;\n\
    \                break;\n            case '**':\n                result = a **\
    \ b;\n                break;\n            default:\n                console.log(`Invalid\
    \ operator: ${op}`);\n        }\n        i += 2;\n    }\n    return result;\n\
    }\n", "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let\
    \ op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i]\
    \ === '+') {\n      result += operand[i];\n    } else if (operator[i] === '-')\
    \ {\n      result -= operand[i];\n    } else if (operator[i] === '*') {\n    \
    \  result *= operand[i];\n    } else if (operator[i] === '/') {\n      result\
    \ /= operand[i];\n    } else if (operator[i] === '**') {\n      result **= operand[i];\n\
    \    }\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = 0; i <\
    \ operand.length; i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n\
    \    let op3 = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n\
    \    let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "    let result = 0;\n    for (let i = 0; i < operand.length;\
    \ i++) {\n        let op1 = operator[i];\n        let op2 = operator[(i + 1) %\
    \ operator.length];\n        let op3 = operator[(i + 2) % operator.length];\n\
    \        let op4 = operator[(i + 3) % operator.length];\n        let op5 = operator[(i\
    \ + 4) % operator.length];\n        let op6 = operator[(i + 5) % operator.length];\n\
    \        let op7 = operator[(i + 6) % operator.length];\n        let op8 = operator[(i\
    \ + 7) % operator.length];\n        let op9 = operator[(i + 8) % operator.length];\n\
    \        let op10 = operator[(i + 9) % operator.length];\n        let op11 = operator[(i\
    \ + 10) % operator.length];\n        let op12 = operator[(i + 11) % operator.length];\n\
    \        let op13 = operator[(i + 12) % operator.length];\n        let op14 =\
    \ operator[(i + 13) % operator.length];\n        let op15 = operator[(i + 14)\
    \ % operator.length];\n        let op16 = operator[(i + 15) % operator.length];\n\
    \        let op17 = operator[(i + 16) % operator.length];\n        let op18 =\
    \ operator[(i + 17) % operator.length];\n        let op19 = operator[(i + 18)\
    \ % operator.length];\n        let op20 = operator[(i + 19) % operator.length];\n\
    \        let op21 = operator[(i + 20) % operator.length];\n        let op22 =\
    \ operator[(i + 21) % operator.length];\n        let op23 = operator[(i + 22)\
    \ % operator.length];\n        let op24 = operator[(i + 23) % operator.length];\n\
    \        let op25 = operator[(i + 24) % operator.length];\n        let op26 =\
    \ operator[(i + 25) % operator.length];\n        let op27 = operator[(i + 26)\
    \ % operator.length];\n        let op28 = operator[(i + 27) % operator.length];\n\
    \        let op29 = operator[(i + 28) % operator.length];\n        let op30 =\
    \ operator[(i + 29) % operator.length];\n        let op31 = operator[(i + 30)\
    \ % operator.length];\n        let op32 = operator[(i + 31) % operator.length];\n\
    \        let op33 = operator[(i + 32) % operator.length];\n        let op34 =\
    \ operator[(i + 33) % operator.length];\n        let op35 = operator[(i + 34)\
    \ % operator.length];\n        let op36 = operator[(i + 35) % operator.length];\n\
    \        let op37 = operator[(i + 36) % operator.length];\n        let op38 = ",
  "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper =\
    \ operator[i];\n    let operand2 = operand[i];\n    switch (oper) {\n      case\
    \ '+':\n        result += operand2;\n        break;\n      case '-':\n       \
    \ result -= operand2;\n        break;\n      case '*':\n        result *= operand2;\n\
    \        break;\n      case '/':\n        result /= operand2;\n        break;\n\
    \      case '**':\n        result **= operand2;\n        break;\n      default:\n\
    \        throw 'Invalid operator';\n    }\n  }\n  return result;\n}\n", "    let\
    \ result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        result\
    \ += operand[i] * operator[operand.length - 1 - i];\n    }\n    return result;\n\
    }\n", "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let\
    \ op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \   let result = 0;\n    let operator_index = 0;\n    let operand_index = 0;\n\
    \    while (operator_index < operator.length) {\n        switch (operator[operator_index])\
    \ {\n            case '+':\n                result += operand[operand_index];\n\
    \                operand_index++;\n                break;\n            case '-':\n\
    \                result -= operand[operand_index];\n                operand_index++;\n\
    \                break;\n            case '*':\n                result *= operand[operand_index];\n\
    \                operand_index++;\n                break;\n            case '/':\n\
    \                result /= operand[operand_index];\n                operand_index++;\n\
    \                break;\n            case '**':\n                result **= operand[operand_index];\n\
    \                operand_index++;\n                break;\n            default:\n\
    \                throw 'Invalid operator';\n        }\n        operator_index++;\n\
    \    }\n    return result;\n}\n", "  let result = 0;\n  for (let i = 0; i < operand.length;\
    \ i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3\
    \ = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n   \
    \ let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return\
    \ result;\n}\n", "    let result = 0;\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    result += operand[i];\n                break;\n            case '-':\n  \
    \              result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '**':\n                result **= operand[i];\n            \
    \    break;\n        }\n    }\n    return result;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < operand.length; i++) {\n    let op = operator[i];\n   \
    \ let a = operand[i];\n    let b = operand[i - 1];\n    switch (op) {\n      case\
    \ '+':\n        result += a;\n        break;\n      case '-':\n        result\
    \ -= a;\n        break;\n      case '*':\n        result *= a;\n        break;\n\
    \      case '/':\n        result /= a;\n        break;\n      case '**':\n   \
    \     result **= a;\n        break;\n      default:\n        throw 'Invalid operator';\n\
    \    }\n  }\n  return result;\n}\n", "    let result = 0;\n    for (let i = 0;\
    \ i < operand.length; i++) {\n        switch (operator[i]) {\n            case\
    \ '+':\n                result += operand[i];\n                break;\n      \
    \      case '-':\n                result -= operand[i];\n                break;\n\
    \            case '*':\n                result *= operand[i];\n              \
    \  break;\n            case '/':\n                result /= operand[i];\n    \
    \            break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                throw 'Invalid\
    \ operator';\n        }\n    }\n    return result;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < operand.length; i++) {\n    let op1 = operator[0];\n  \
    \  let op2 = operator[1];\n    let op3 = operator[2];\n    let op4 = operator[3];\n\
    \    let op5 = operator[4];\n    let op6 = operator[5];\n    let op7 = operator[6];\n\
    \    let op8 = operator[7];\n    let op9 = operator[8];\n    let op10 = operator[9];\n\
    \    let op11 = operator[10];\n    let op12 = operator[11];\n    let op13 = operator[12];\n\
    \    let op14 = operator[13];\n    let op15 = operator[14];\n    let op16 = operator[15];\n\
    \    let op17 = operator[16];\n    let op18 = operator[17];\n    let op19 = operator[18];\n\
    \    let op20 = operator[19];\n    let op21 = operator[20];\n    let op22 = operator[21];\n\
    \    let op23 = operator[22];\n    let op24 = operator[23];\n    let op25 = operator[24];\n\
    \    let op26 = operator[25];\n    let op27 = operator[26];\n    let op28 = operator[27];\n\
    \    let op29 = operator[28];\n    let op30 = operator[29];\n    let op31 = operator[30];\n\
    \    let op32 = operator[31];\n    let op33 = operator[32];\n    let op34 = operator[33];\n\
    \    let op35 = operator[34];\n    let op36 = operator[35];\n    let op37 = operator[36];\n\
    \    let op38 = operator[37];\n    let op39 = operator[38];\n    let op40 = operator[39];\n\
    \    let op41 = operator[40];\n    let op42 = operator[41];\n    let op43 = operator[42];\n\
    \    let op44 = operator[43];\n    let op45 = operator[44];\n    let op46 = operator[45];\n\
    \    let op47 = operator[46];\n    let op48 = operator[47];\n    let op49 = operator[48];\n\
    \    let op50 = operator[49];\n    let op51 = operator[50];\n    let op52 = operator[51];\n\
    \    let op53 = operator[52];\n    let op54 = operator[53];\n    let op55 = operator[54];\n\
    \    let op56 = operator[55];\n    let op57 = operator[56];\n    let op58 = operator[57];\n\
    \    let op59 = operator[58];\n    let op60", "    let result = 0;\n    for (let\
    \ i = 0; i < operand.length; i++) {\n        switch (operator[i]) {\n        \
    \    case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                console.log('Invalid\
    \ operator');\n        }\n    }\n    return result;\n}\n", "    let result = 0;\n\
    \    for (let i = 0; i < operand.length; i++) {\n        let op: number = operator[i];\n\
    \        let a: number = operand[i];\n        switch (op) {\n            case\
    \ '+':\n                result += a;\n                break;\n            case\
    \ '-':\n                result -= a;\n                break;\n            case\
    \ '*':\n                result *= a;\n                break;\n            case\
    \ '/':\n                result /= a;\n                break;\n            case\
    \ '**':\n                result **= a;\n                break;\n            default:\n\
    \                throw 'Invalid operator';\n        }\n    }\n    return result;\n\
    }\n", "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let\
    \ op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \   let result = 0;\n    for (let i = 0; i < operator.length; i++) {\n       \
    \ switch (operator[i]) {\n            case '+':\n                result += operand[i];\n\
    \                break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                console.log('Invalid\
    \ operator');\n        }\n    }\n    return result;\n}\n", "    let result = 0;\n\
    \    for (let i = 0; i < operand.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                result += operand[i];\n          \
    \      break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\n", "  let result = 0;\n  for (let i = 0; i\
    \ < operand.length; i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n\
    \    let op3 = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n\
    \    let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "    let result = 0;\n    for (let i = 0; i < operand.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    result += operand[i];\n                break;\n            case '-':\n  \
    \              result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '**':\n                result **= operand[i];\n            \
    \    break;\n            default:\n                break;\n        }\n    }\n\
    \    return result;\n}\n", "  let result = 0;\n  for (let i = 0; i < operand.length;\
    \ i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3\
    \ = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n   \
    \ let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "    let result = 0;\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    result = result + operand[i];\n                break;\n            case '-':\n\
    \                result = result - operand[i];\n                break;\n     \
    \       case '*':\n                result = result * operand[i];\n           \
    \     break;\n            case '/':\n                result = result / operand[i];\n\
    \                break;\n            case '**':\n                result = result\
    \ ** operand[i];\n                break;\n            default:\n             \
    \   throw 'Invalid operator';\n        }\n    }\n    return result;\n}\n", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result +=\
    \ operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n}\n",
  "    let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        let\
    \ op1 = operator[0];\n        let op2 = operator[1];\n        let op3 = operator[2];\n\
    \        let op4 = operator[3];\n        let op5 = operator[4];\n        let op6\
    \ = operator[5];\n        let op7 = operator[6];\n        let op8 = operator[7];\n\
    \        let op9 = operator[8];\n        let op10 = operator[9];\n        let\
    \ op11 = operator[10];\n        let op12 = operator[11];\n        let op13 = operator[12];\n\
    \        let op14 = operator[13];\n        let op15 = operator[14];\n        let\
    \ op16 = operator[15];\n        let op17 = operator[16];\n        let op18 = operator[17];\n\
    \        let op19 = operator[18];\n        let op20 = operator[19];\n        let\
    \ op21 = operator[20];\n        let op22 = operator[21];\n        let op23 = operator[22];\n\
    \        let op24 = operator[23];\n        let op25 = operator[24];\n        let\
    \ op26 = operator[25];\n        let op27 = operator[26];\n        let op28 = operator[27];\n\
    \        let op29 = operator[28];\n        let op30 = operator[29];\n        let\
    \ op31 = operator[30];\n        let op32 = operator[31];\n        let op33 = operator[32];\n\
    \        let op34 = operator[33];\n        let op35 = operator[34];\n        let\
    \ op36 = operator[35];\n        let op37 = operator[36];\n        let op38 = operator[37];\n\
    \        let op39 = operator[38];\n        let op40 = operator[39];\n        let\
    \ op41 = operator[40];\n        let op42 = operator[41];\n        let op43 = operator[42];\n\
    \        let op44 = operator[43];\n        let op45 = operator[44];\n        let\
    \ op46 = operator[45];\n        let op47 = operator[46];\n        let op48 = operator[47];\n\
    \        let op49 = operator[48];\n        let op50 = operator[49];\n        let\
    \ op51 = operator[50];\n        let op52 = operator[51];\n        let op53 = operator[52];\n\
    \        let op54 = operator[53];\n        let op55 = operator[54];\n        let\
    \ op56 = operator[55];\n        let op57 = operator[56];\n        let op58 = operator[57];\n\
    \        let op59 = operator[58];\n        let op60", "  let result = 0;\n  for\
    \ (let i = 0; i < operand.length; i++) {\n    let op1 = operator[0];\n    let\
    \ op2 = operator[1];\n    let op3 = operator[2];\n    let op4 = operator[3];\n\
    \    let op5 = operator[4];\n    let op6 = operator[5];\n    let op7 = operator[6];\n\
    \    let op8 = operator[7];\n    let op9 = operator[8];\n    let op10 = operator[9];\n\
    \    let op11 = operator[10];\n    let op12 = operator[11];\n    let op13 = operator[12];\n\
    \    let op14 = operator[13];\n    let op15 = operator[14];\n    let op16 = operator[15];\n\
    \    let op17 = operator[16];\n    let op18 = operator[17];\n    let op19 = operator[18];\n\
    \    let op20 = operator[19];\n    let op21 = operator[20];\n    let op22 = operator[21];\n\
    \    let op23 = operator[22];\n    let op24 = operator[23];\n    let op25 = operator[24];\n\
    \    let op26 = operator[25];\n    let op27 = operator[26];\n    let op28 = operator[27];\n\
    \    let op29 = operator[28];\n    let op30 = operator[29];\n    let op31 = operator[30];\n\
    \    let op32 = operator[31];\n    let op33 = operator[32];\n    let op34 = operator[33];\n\
    \    let op35 = operator[34];\n    let op36 = operator[35];\n    let op37 = operator[36];\n\
    \    let op38 = operator[37];\n    let op39 = operator[38];\n    let op40 = operator[39];\n\
    \    let op41 = operator[40];\n    let op42 = operator[41];\n    let op43 = operator[42];\n\
    \    let op44 = operator[43];\n    let op45 = operator[44];\n    let op46 = operator[45];\n\
    \    let op47 = operator[46];\n    let op48 = operator[47];\n    let op49 = operator[48];\n\
    \    let op50 = operator[49];\n    let op51 = operator[50];\n    let op52 = operator[51];\n\
    \    let op53 = operator[52];\n    let op54 = operator[53];\n    let op55 = operator[54];\n\
    \    let op56 = operator[55];\n    let op57 = operator[56];\n    let op58 = operator[57];\n\
    \    let op59 = operator[58];\n    let op60", "  let result = 0;\n  for (let i\
    \ = 0; i < operand.length; i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n\
    \    let op3 = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n\
    \    let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    let op: number = operator[i];\n    let a: number = operand[i];\n    switch\
    \ (op) {\n      case '+':\n        result += a;\n        break;\n      case '-':\n\
    \        result -= a;\n        break;\n      case '*':\n        result *= a;\n\
    \        break;\n      case '//':\n        result /= a;\n        break;\n    \
    \  case '**':\n        result **= a;\n        break;\n    }\n  }\n  return result;\n\
    }\n", "    let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n \
    \       let op1 = operator[0];\n        let op2 = operator[1];\n        let op3\
    \ = operator[2];\n        let op4 = operator[3];\n        let op5 = operator[4];\n\
    \        let op6 = operator[5];\n        let op7 = operator[6];\n        let op8\
    \ = operator[7];\n        let op9 = operator[8];\n        let op10 = operator[9];\n\
    \        let op11 = operator[10];\n        let op12 = operator[11];\n        let\
    \ op13 = operator[12];\n        let op14 = operator[13];\n        let op15 = operator[14];\n\
    \        let op16 = operator[15];\n        let op17 = operator[16];\n        let\
    \ op18 = operator[17];\n        let op19 = operator[18];\n        let op20 = operator[19];\n\
    \        let op21 = operator[20];\n        let op22 = operator[21];\n        let\
    \ op23 = operator[22];\n        let op24 = operator[23];\n        let op25 = operator[24];\n\
    \        let op26 = operator[25];\n        let op27 = operator[26];\n        let\
    \ op28 = operator[27];\n        let op29 = operator[28];\n        let op30 = operator[29];\n\
    \        let op31 = operator[30];\n        let op32 = operator[31];\n        let\
    \ op33 = operator[32];\n        let op34 = operator[33];\n        let op35 = operator[34];\n\
    \        let op36 = operator[35];\n        let op37 = operator[36];\n        let\
    \ op38 = operator[37];\n        let op39 = operator[38];\n        let op40 = operator[39];\n\
    \        let op41 = operator[40];\n        let op42 = operator[41];\n        let\
    \ op43 = operator[42];\n        let op44 = operator[43];\n        let op45 = operator[44];\n\
    \        let op46 = operator[45];\n        let op47 = operator[46];\n        let\
    \ op48 = operator[47];\n        let op49 = operator[48];\n        let op50 = operator[49];\n\
    \        let op51 = operator[50];\n        let op52 = operator[51];\n        let\
    \ op53 = operator[52];\n        let op54 = operator[53];\n        let op55 = operator[54];\n\
    \        let op56 = operator[55];\n        let op57 = operator[56];\n        let\
    \ op58 = operator[57];\n        let op59 = operator[58];\n        let op60", " \
    \   let result = 0;\n    for (let i = 0; i < operator.length; i++) {\n       \
    \ switch (operator[i]) {\n            case '+':\n                result += operand[i];\n\
    \                break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                throw 'Invalid\
    \ operator';\n        }\n    }\n    return result;\n}\n", "    let result = 0;\n\
    \    for (let i = 0; i < operand.length; i++) {\n        let op1 = operator[0];\n\
    \        let op2 = operator[1];\n        let op3 = operator[2];\n        let op4\
    \ = operator[3];\n        let op5 = operator[4];\n        let op6 = operator[5];\n\
    \        let op7 = operator[6];\n        let op8 = operator[7];\n        let op9\
    \ = operator[8];\n        let op10 = operator[9];\n        let op11 = operator[10];\n\
    \        let op12 = operator[11];\n        let op13 = operator[12];\n        let\
    \ op14 = operator[13];\n        let op15 = operator[14];\n        let op16 = operator[15];\n\
    \        let op17 = operator[16];\n        let op18 = operator[17];\n        let\
    \ op19 = operator[18];\n        let op20 = operator[19];\n        let op21 = operator[20];\n\
    \        let op22 = operator[21];\n        let op23 = operator[22];\n        let\
    \ op24 = operator[23];\n        let op25 = operator[24];\n        let op26 = operator[25];\n\
    \        let op27 = operator[26];\n        let op28 = operator[27];\n        let\
    \ op29 = operator[28];\n        let op30 = operator[29];\n        let op31 = operator[30];\n\
    \        let op32 = operator[31];\n        let op33 = operator[32];\n        let\
    \ op34 = operator[33];\n        let op35 = operator[34];\n        let op36 = operator[35];\n\
    \        let op37 = operator[36];\n        let op38 = operator[37];\n        let\
    \ op39 = operator[38];\n        let op40 = operator[39];\n        let op41 = operator[40];\n\
    \        let op42 = operator[41];\n        let op43 = operator[42];\n        let\
    \ op44 = operator[43];\n        let op45 = operator[44];\n        let op46 = operator[45];\n\
    \        let op47 = operator[46];\n        let op48 = operator[47];\n        let\
    \ op49 = operator[48];\n        let op50 = operator[49];\n        let op51 = operator[50];\n\
    \        let op52 = operator[51];\n        let op53 = operator[52];\n        let\
    \ op54 = operator[53];\n        let op55 = operator[54];\n        let op56 = operator[55];\n\
    \        let op57 = operator[56];\n        let op58 = operator[57];\n        let\
    \ op59 = operator[58];\n        let op60", "  let result = 0;\n  for (let i =\
    \ 0; i < operand.length; i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n\
    \    let op3 = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n\
    \    let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return\
    \ result;\n}\n", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i]\
    \ === '+') {\n      result += operand[i];\n    } else if (operator[i] === '-')\
    \ {\n      result -= operand[i];\n    } else if (operator[i] === '*') {\n    \
    \  result *= operand[i];\n    } else if (operator[i] === '/') {\n      result\
    \ /= operand[i];\n    } else if (operator[i] === '**') {\n      result **= operand[i];\n\
    \    }\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = 0; i <\
    \ operand.length; i++) {\n    result += operand[i] * operator[operand.length -\
    \ 1 - i];\n  }\n  return result;\n}\n", "    let result = 0;\n    for (let i =\
    \ 0; i < operand.length; i++) {\n        switch (operator[i]) {\n            case\
    \ '+':\n                result += operand[i];\n                break;\n      \
    \      case '-':\n                result -= operand[i];\n                break;\n\
    \            case '*':\n                result *= operand[i];\n              \
    \  break;\n            case '/':\n                result /= operand[i];\n    \
    \            break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                throw 'Invalid\
    \ operator';\n        }\n    }\n    return result;\n}\n", "    let result = 0;\n\
    \    for (let i = 0; i < operand.length; i++) {\n        let op1 = operator[0];\n\
    \        let op2 = operator[1];\n        let op3 = operator[2];\n        let op4\
    \ = operator[3];\n        let op5 = operator[4];\n        let op6 = operator[5];\n\
    \        let op7 = operator[6];\n        let op8 = operator[7];\n        let op9\
    \ = operator[8];\n        let op10 = operator[9];\n        let op11 = operator[10];\n\
    \        let op12 = operator[11];\n        let op13 = operator[12];\n        let\
    \ op14 = operator[13];\n        let op15 = operator[14];\n        let op16 = operator[15];\n\
    \        let op17 = operator[16];\n        let op18 = operator[17];\n        let\
    \ op19 = operator[18];\n        let op20 = operator[19];\n        let op21 = operator[20];\n\
    \        let op22 = operator[21];\n        let op23 = operator[22];\n        let\
    \ op24 = operator[23];\n        let op25 = operator[24];\n        let op26 = operator[25];\n\
    \        let op27 = operator[26];\n        let op28 = operator[27];\n        let\
    \ op29 = operator[28];\n        let op30 = operator[29];\n        let op31 = operator[30];\n\
    \        let op32 = operator[31];\n        let op33 = operator[32];\n        let\
    \ op34 = operator[33];\n        let op35 = operator[34];\n        let op36 = operator[35];\n\
    \        let op37 = operator[36];\n        let op38 = operator[37];\n        let\
    \ op39 = operator[38];\n        let op40 = operator[39];\n        let op41 = operator[40];\n\
    \        let op42 = operator[41];\n        let op43 = operator[42];\n        let\
    \ op44 = operator[43];\n        let op45 = operator[44];\n        let op46 = operator[45];\n\
    \        let op47 = operator[46];\n        let op48 = operator[47];\n        let\
    \ op49 = operator[48];\n        let op50 = operator[49];\n        let op51 = operator[50];\n\
    \        let op52 = operator[51];\n        let op53 = operator[52];\n        let\
    \ op54 = operator[53];\n        let op55 = operator[54];\n        let op56 = operator[55];\n\
    \        let op57 = operator[56];\n        let op58 = operator[57];\n        let\
    \ op59 = operator[58];\n        let op60", "  let result = 0;\n  for (let i =\
    \ 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length\
    \ - 1 - i];\n  }\n  return result;\n}\n", "    let result = 0;\n    for (let i\
    \ = 0; i < operand.length; i++) {\n        switch (operator[i]) {\n          \
    \  case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                throw 'Invalid\
    \ operator';\n        }\n    }\n    return result;\n}\n", "    let result = 0;\n\
    \    for (let i = 0; i < operand.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                result += operand[i];\n          \
    \      break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                console.log('Invalid\
    \ operator');\n        }\n    }\n    return result;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length\
    \ - 1 - i];\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = 0;\
    \ i < operand.length; i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n\
    \    let op3 = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n\
    \    let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result +=\
    \ operand[i] * operator[i]\n  }\n  return result;\n}\n", "    let result = 0;\n\
    \    for (let i = 0; i < operand.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                result += operand[i];\n          \
    \      break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                console.log(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n", "  let result\
    \ = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n\
    \    let num = operand[i];\n    switch (oper) {\n      case '+':\n        result\
    \ += num;\n        break;\n      case '-':\n        result -= num;\n        break;\n\
    \      case '*':\n        result *= num;\n        break;\n      case '/':\n  \
    \      result /= num;\n        break;\n      case '**':\n        result **= num;\n\
    \        break;\n    }\n  }\n  return result;\n}\n", "  let result = 0;\n  for\
    \ (let i = 0; i < operand.length; i++) {\n    let op1 = operator[0];\n    let\
    \ op2 = operator[1];\n    let op3 = operator[2];\n    let op4 = operator[3];\n\
    \    let op5 = operator[4];\n    let op6 = operator[5];\n    let op7 = operator[6];\n\
    \    let op8 = operator[7];\n    let op9 = operator[8];\n    let op10 = operator[9];\n\
    \    let op11 = operator[10];\n    let op12 = operator[11];\n    let op13 = operator[12];\n\
    \    let op14 = operator[13];\n    let op15 = operator[14];\n    let op16 = operator[15];\n\
    \    let op17 = operator[16];\n    let op18 = operator[17];\n    let op19 = operator[18];\n\
    \    let op20 = operator[19];\n    let op21 = operator[20];\n    let op22 = operator[21];\n\
    \    let op23 = operator[22];\n    let op24 = operator[23];\n    let op25 = operator[24];\n\
    \    let op26 = operator[25];\n    let op27 = operator[26];\n    let op28 = operator[27];\n\
    \    let op29 = operator[28];\n    let op30 = operator[29];\n    let op31 = operator[30];\n\
    \    let op32 = operator[31];\n    let op33 = operator[32];\n    let op34 = operator[33];\n\
    \    let op35 = operator[34];\n    let op36 = operator[35];\n    let op37 = operator[36];\n\
    \    let op38 = operator[37];\n    let op39 = operator[38];\n    let op40 = operator[39];\n\
    \    let op41 = operator[40];\n    let op42 = operator[41];\n    let op43 = operator[42];\n\
    \    let op44 = operator[43];\n    let op45 = operator[44];\n    let op46 = operator[45];\n\
    \    let op47 = operator[46];\n    let op48 = operator[47];\n    let op49 = operator[48];\n\
    \    let op50 = operator[49];\n    let op51 = operator[50];\n    let op52 = operator[51];\n\
    \    let op53 = operator[52];\n    let op54 = operator[53];\n    let op55 = operator[54];\n\
    \    let op56 = operator[55];\n    let op57 = operator[56];\n    let op58 = operator[57];\n\
    \    let op59 = operator[58];\n    let op60", "    let result = 0;\n    for (let\
    \ i = 0; i < operand.length; i++) {\n        let op = operator[i];\n        let\
    \ operand2 = operand[i];\n        switch (op) {\n            case '+':\n     \
    \           result = result + operand2;\n                break;\n            case\
    \ '-':\n                result = result - operand2;\n                break;\n\
    \            case '*':\n                result = result * operand2;\n        \
    \        break;\n            case '/':\n                result = result / operand2;\n\
    \                break;\n            case '**':\n                result = result\
    \ ** operand2;\n                break;\n            default:\n               \
    \ throw 'Invalid operator';\n        }\n    }\n    return result;\n}\n", "  let\
    \ result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op = operator[i];\n\
    \    let operand1 = operand[i];\n    let operand2 = operand[i + 1];\n    switch\
    \ (op) {\n      case '+':\n        result += operand1;\n        break;\n     \
    \ case '-':\n        result -= operand1;\n        break;\n      case '*':\n  \
    \      result *= operand1;\n        break;\n      case '/':\n        result /=\
    \ operand1;\n        break;\n      case '**':\n        result **= operand1;\n\
    \        break;\n    }\n  }\n  return result;\n}\n", "  let result = 0;\n  for\
    \ (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let\
    \ operand1 = operand[i];\n    switch (oper) {\n      case '+':\n        result\
    \ += operand1;\n        break;\n      case '-':\n        result -= operand1;\n\
    \        break;\n      case '*':\n        result *= operand1;\n        break;\n\
    \      case '/':\n        result /= operand1;\n        break;\n      case '**':\n\
    \        result **= operand1;\n        break;\n      default:\n        throw 'Invalid\
    \ operator';\n    }\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let\
    \ i = 0; i < operand.length; i++) {\n    let op1 = operator[0];\n    let op2 =\
    \ operator[1];\n    let op3 = operator[2];\n    let op4 = operator[3];\n    let\
    \ op5 = operator[4];\n    let op6 = operator[5];\n    let op7 = operator[6];\n\
    \    let op8 = operator[7];\n    let op9 = operator[8];\n    let op10 = operator[9];\n\
    \    let op11 = operator[10];\n    let op12 = operator[11];\n    let op13 = operator[12];\n\
    \    let op14 = operator[13];\n    let op15 = operator[14];\n    let op16 = operator[15];\n\
    \    let op17 = operator[16];\n    let op18 = operator[17];\n    let op19 = operator[18];\n\
    \    let op20 = operator[19];\n    let op21 = operator[20];\n    let op22 = operator[21];\n\
    \    let op23 = operator[22];\n    let op24 = operator[23];\n    let op25 = operator[24];\n\
    \    let op26 = operator[25];\n    let op27 = operator[26];\n    let op28 = operator[27];\n\
    \    let op29 = operator[28];\n    let op30 = operator[29];\n    let op31 = operator[30];\n\
    \    let op32 = operator[31];\n    let op33 = operator[32];\n    let op34 = operator[33];\n\
    \    let op35 = operator[34];\n    let op36 = operator[35];\n    let op37 = operator[36];\n\
    \    let op38 = operator[37];\n    let op39 = operator[38];\n    let op40 = operator[39];\n\
    \    let op41 = operator[40];\n    let op42 = operator[41];\n    let op43 = operator[42];\n\
    \    let op44 = operator[43];\n    let op45 = operator[44];\n    let op46 = operator[45];\n\
    \    let op47 = operator[46];\n    let op48 = operator[47];\n    let op49 = operator[48];\n\
    \    let op50 = operator[49];\n    let op51 = operator[50];\n    let op52 = operator[51];\n\
    \    let op53 = operator[52];\n    let op54 = operator[53];\n    let op55 = operator[54];\n\
    \    let op56 = operator[55];\n    let op57 = operator[56];\n    let op58 = operator[57];\n\
    \    let op59 = operator[58];\n    let op60", "    let result = 0;\n    for (let\
    \ i = 0; i < operand.length; i++) {\n        let oper = operator[i];\n       \
    \ let operand1 = operand[i];\n        switch (oper) {\n            case '+':\n\
    \                result += operand1;\n                break;\n            case\
    \ '-':\n                result -= operand1;\n                break;\n        \
    \    case '*':\n                result *= operand1;\n                break;\n\
    \            case '/':\n                result /= operand1;\n                break;\n\
    \            case '**':\n                result **= operand1;\n              \
    \  break;\n            default:\n                console.log('Operator not recognized');\n\
    \        }\n    }\n    return result;\n}\n", "    let result = 0;\n    let operator_index\
    \ = 0;\n    let operand_index = 0;\n    while (operator_index < operator.length)\
    \ {\n        switch (operator[operator_index]) {\n            case '+':\n    \
    \            result += operand[operand_index];\n                operand_index++;\n\
    \                break;\n            case '-':\n                result -= operand[operand_index];\n\
    \                operand_index++;\n                break;\n            case '*':\n\
    \                result *= operand[operand_index];\n                operand_index++;\n\
    \                break;\n            case '//':\n                result /= operand[operand_index];\n\
    \                operand_index++;\n                break;\n            case '**':\n\
    \                result **= operand[operand_index];\n                operand_index++;\n\
    \                break;\n            default:\n                throw 'Invalid\
    \ operator';\n        }\n        operator_index++;\n    }\n    return result;\n\
    }\n", "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let\
    \ op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \   let result = 0;\n    for (let i = 0; i < operator.length; i++) {\n       \
    \ switch (operator[i]) {\n            case '+':\n                result += operand[i];\n\
    \                break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                throw 'Invalid\
    \ operator';\n        }\n    }\n    return result;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < operand.length; i++) {\n    let op1 = operator[0];\n  \
    \  let op2 = operator[1];\n    let op3 = operator[2];\n    let op4 = operator[3];\n\
    \    let op5 = operator[4];\n    let op6 = operator[5];\n    let op7 = operator[6];\n\
    \    let op8 = operator[7];\n    let op9 = operator[8];\n    let op10 = operator[9];\n\
    \    let op11 = operator[10];\n    let op12 = operator[11];\n    let op13 = operator[12];\n\
    \    let op14 = operator[13];\n    let op15 = operator[14];\n    let op16 = operator[15];\n\
    \    let op17 = operator[16];\n    let op18 = operator[17];\n    let op19 = operator[18];\n\
    \    let op20 = operator[19];\n    let op21 = operator[20];\n    let op22 = operator[21];\n\
    \    let op23 = operator[22];\n    let op24 = operator[23];\n    let op25 = operator[24];\n\
    \    let op26 = operator[25];\n    let op27 = operator[26];\n    let op28 = operator[27];\n\
    \    let op29 = operator[28];\n    let op30 = operator[29];\n    let op31 = operator[30];\n\
    \    let op32 = operator[31];\n    let op33 = operator[32];\n    let op34 = operator[33];\n\
    \    let op35 = operator[34];\n    let op36 = operator[35];\n    let op37 = operator[36];\n\
    \    let op38 = operator[37];\n    let op39 = operator[38];\n    let op40 = operator[39];\n\
    \    let op41 = operator[40];\n    let op42 = operator[41];\n    let op43 = operator[42];\n\
    \    let op44 = operator[43];\n    let op45 = operator[44];\n    let op46 = operator[45];\n\
    \    let op47 = operator[46];\n    let op48 = operator[47];\n    let op49 = operator[48];\n\
    \    let op50 = operator[49];\n    let op51 = operator[50];\n    let op52 = operator[51];\n\
    \    let op53 = operator[52];\n    let op54 = operator[53];\n    let op55 = operator[54];\n\
    \    let op56 = operator[55];\n    let op57 = operator[56];\n    let op58 = operator[57];\n\
    \    let op59 = operator[58];\n    let op60", "  let result = 0;\n  for (let i\
    \ = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length\
    \ - 1 - i];\n  }\n  return result;\n}\n", "    let result = 0;\n    let operator_index\
    \ = 0;\n    let operand_index = 0;\n    while (operator_index < operator.length)\
    \ {\n        let operator = operator[operator_index];\n        let operand = operand[operand_index];\n\
    \        switch (operator) {\n            case '+':\n                result +=\
    \ operand;\n                break;\n            case '-':\n                result\
    \ -= operand;\n                break;\n            case '*':\n               \
    \ result *= operand;\n                break;\n            case '/':\n        \
    \        result /= operand;\n                break;\n            case '**':\n\
    \                result **= operand;\n                break;\n            default:\n\
    \                break;\n        }\n        operator_index++;\n        operand_index++;\n\
    \    }\n    return result;\n}\n", "    let result = 0;\n    for (let i = 0; i\
    \ < operand.length; i++) {\n        let op1 = operator[0];\n        let op2 =\
    \ operator[1];\n        let op3 = operator[2];\n        let op4 = operator[3];\n\
    \        let op5 = operator[4];\n        let op6 = operator[5];\n        let op7\
    \ = operator[6];\n        let op8 = operator[7];\n        let op9 = operator[8];\n\
    \        let op10 = operator[9];\n        let op11 = operator[10];\n        let\
    \ op12 = operator[11];\n        let op13 = operator[12];\n        let op14 = operator[13];\n\
    \        let op15 = operator[14];\n        let op16 = operator[15];\n        let\
    \ op17 = operator[16];\n        let op18 = operator[17];\n        let op19 = operator[18];\n\
    \        let op20 = operator[19];\n        let op21 = operator[20];\n        let\
    \ op22 = operator[21];\n        let op23 = operator[22];\n        let op24 = operator[23];\n\
    \        let op25 = operator[24];\n        let op26 = operator[25];\n        let\
    \ op27 = operator[26];\n        let op28 = operator[27];\n        let op29 = operator[28];\n\
    \        let op30 = operator[29];\n        let op31 = operator[30];\n        let\
    \ op32 = operator[31];\n        let op33 = operator[32];\n        let op34 = operator[33];\n\
    \        let op35 = operator[34];\n        let op36 = operator[35];\n        let\
    \ op37 = operator[36];\n        let op38 = operator[37];\n        let op39 = operator[38];\n\
    \        let op40 = operator[39];\n        let op41 = operator[40];\n        let\
    \ op42 = operator[41];\n        let op43 = operator[42];\n        let op44 = operator[43];\n\
    \        let op45 = operator[44];\n        let op46 = operator[45];\n        let\
    \ op47 = operator[46];\n        let op48 = operator[47];\n        let op49 = operator[48];\n\
    \        let op50 = operator[49];\n        let op51 = operator[50];\n        let\
    \ op52 = operator[51];\n        let op53 = operator[52];\n        let op54 = operator[53];\n\
    \        let op55 = operator[54];\n        let op56 = operator[55];\n        let\
    \ op57 = operator[56];\n        let op58 = operator[57];\n        let op59 = operator[58];\n\
    \        let op60", "  let result = 0;\n  for (let i = 0; i < operator.length;\
    \ i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n}\n",
  "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 =\
    \ operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n    let\
    \ op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \   let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        switch\
    \ (operator[i]) {\n            case '+':\n                result += operand[i];\n\
    \                break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                throw 'Invalid\
    \ operator';\n        }\n    }\n    return result;\n}\n", "    let result = 0;\n\
    \    for (let i = 0; i < operand.length; i++) {\n        let op1 = operator[0];\n\
    \        let op2 = operator[1];\n        let op3 = operator[2];\n        let op4\
    \ = operator[3];\n        let op5 = operator[4];\n        let op6 = operator[5];\n\
    \        let op7 = operator[6];\n        let op8 = operator[7];\n        let op9\
    \ = operator[8];\n        let op10 = operator[9];\n        let op11 = operator[10];\n\
    \        let op12 = operator[11];\n        let op13 = operator[12];\n        let\
    \ op14 = operator[13];\n        let op15 = operator[14];\n        let op16 = operator[15];\n\
    \        let op17 = operator[16];\n        let op18 = operator[17];\n        let\
    \ op19 = operator[18];\n        let op20 = operator[19];\n        let op21 = operator[20];\n\
    \        let op22 = operator[21];\n        let op23 = operator[22];\n        let\
    \ op24 = operator[23];\n        let op25 = operator[24];\n        let op26 = operator[25];\n\
    \        let op27 = operator[26];\n        let op28 = operator[27];\n        let\
    \ op29 = operator[28];\n        let op30 = operator[29];\n        let op31 = operator[30];\n\
    \        let op32 = operator[31];\n        let op33 = operator[32];\n        let\
    \ op34 = operator[33];\n        let op35 = operator[34];\n        let op36 = operator[35];\n\
    \        let op37 = operator[36];\n        let op38 = operator[37];\n        let\
    \ op39 = operator[38];\n        let op40 = operator[39];\n        let op41 = operator[40];\n\
    \        let op42 = operator[41];\n        let op43 = operator[42];\n        let\
    \ op44 = operator[43];\n        let op45 = operator[44];\n        let op46 = operator[45];\n\
    \        let op47 = operator[46];\n        let op48 = operator[47];\n        let\
    \ op49 = operator[48];\n        let op50 = operator[49];\n        let op51 = operator[50];\n\
    \        let op52 = operator[51];\n        let op53 = operator[52];\n        let\
    \ op54 = operator[53];\n        let op55 = operator[54];\n        let op56 = operator[55];\n\
    \        let op57 = operator[56];\n        let op58 = operator[57];\n        let\
    \ op59 = operator[58];\n        let op60", "    let result = 0;\n    for (let\
    \ i = 0; i < operand.length; i++) {\n        let oper = operator[i];\n       \
    \ let num = operand[i];\n        switch (oper) {\n            case '+':\n    \
    \            result = result + num;\n                break;\n            case\
    \ '-':\n                result = result - num;\n                break;\n     \
    \       case '*':\n                result = result * num;\n                break;\n\
    \            case '/':\n                result = result / num;\n             \
    \   break;\n            case '**':\n                result = result ** num;\n\
    \                break;\n            default:\n                console.log(`Invalid\
    \ operator: ${oper}`);\n                break;\n        }\n    }\n    return result;\n\
    }\n", "  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result\
    \ += operand[i] * operator[i];\n  }\n  return result;\n}\n", "    let result =\
    \ 0;\n    for (let i = 0; i < operand.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                result += operand[i];\n          \
    \      break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank\
    \ you for your answer! I appreciate it! However, I do not understand how this\
    \ would work. Could you please explain how this would work?\n<|/ c |>\n<| c |>\n\
    I added some comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThank you\
    \ for your answer! I appreciate it! However, I do not understand how this would\
    \ work. Could you please explain how this would work?\n<|/ c |>\n<| c |>\nI added\
    \ some comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThank you for\
    \ your answer! I appreciate it! However, I do not understand how this would work.\
    \ Could you please explain how this would work?\n<|/ c |>\n<| a tags=javascript,algorithm,math\
    \ |>\n<code>", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return\
    \ result;\n}\n", "    let result = 0;\n    for (let i = 0; i < operand.length;\
    \ i++) {\n        let op1 = operator[0];\n        let op2 = operator[1];\n   \
    \     let op3 = operator[2];\n        let op4 = operator[3];\n        let op5\
    \ = operator[4];\n        let op6 = operator[5];\n        let op7 = operator[6];\n\
    \        let op8 = operator[7];\n        let op9 = operator[8];\n        let op10\
    \ = operator[9];\n        let op11 = operator[10];\n        let op12 = operator[11];\n\
    \        let op13 = operator[12];\n        let op14 = operator[13];\n        let\
    \ op15 = operator[14];\n        let op16 = operator[15];\n        let op17 = operator[16];\n\
    \        let op18 = operator[17];\n        let op19 = operator[18];\n        let\
    \ op20 = operator[19];\n        let op21 = operator[20];\n        let op22 = operator[21];\n\
    \        let op23 = operator[22];\n        let op24 = operator[23];\n        let\
    \ op25 = operator[24];\n        let op26 = operator[25];\n        let op27 = operator[26];\n\
    \        let op28 = operator[27];\n        let op29 = operator[28];\n        let\
    \ op30 = operator[29];\n        let op31 = operator[30];\n        let op32 = operator[31];\n\
    \        let op33 = operator[32];\n        let op34 = operator[33];\n        let\
    \ op35 = operator[34];\n        let op36 = operator[35];\n        let op37 = operator[36];\n\
    \        let op38 = operator[37];\n        let op39 = operator[38];\n        let\
    \ op40 = operator[39];\n        let op41 = operator[40];\n        let op42 = operator[41];\n\
    \        let op43 = operator[42];\n        let op44 = operator[43];\n        let\
    \ op45 = operator[44];\n        let op46 = operator[45];\n        let op47 = operator[46];\n\
    \        let op48 = operator[47];\n        let op49 = operator[48];\n        let\
    \ op50 = operator[49];\n        let op51 = operator[50];\n        let op52 = operator[51];\n\
    \        let op53 = operator[52];\n        let op54 = operator[53];\n        let\
    \ op55 = operator[54];\n        let op56 = operator[55];\n        let op57 = operator[56];\n\
    \        let op58 = operator[57];\n        let op59 = operator[58];\n        let\
    \ op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n  \
    \  let oper = operator[i];\n    let operand1 = operand[i];\n    switch (oper)\
    \ {\n      case '+':\n        result += operand1;\n        break;\n      case\
    \ '-':\n        result -= operand1;\n        break;\n      case '*':\n       \
    \ result *= operand1;\n        break;\n      case '/':\n        result /= operand1;\n\
    \        break;\n      case '**':\n        result **= operand1;\n        break;\n\
    \    }\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = 0; i <\
    \ operator.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return\
    \ result;\n}\n", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    let oper = operator[i];\n    let operand1 = operand[i];\n    let operand2\
    \ = operand[operand.length - 1];\n    if (oper === '+') {\n      result += operand1;\n\
    \    } else if (oper === '-') {\n      result -= operand1;\n    } else if (oper\
    \ === '*') {\n      result *= operand1;\n    } else if (oper === '/') {\n    \
    \  result /= operand1;\n    } else if (oper === '**') {\n      result **= operand1;\n\
    \    }\n  }\n  return result;\n}\n", "    let result = 0;\n    for (let i = 0;\
    \ i < operand.length; i++) {\n        switch (operator[i]) {\n            case\
    \ '+':\n                result += operand[i];\n                break;\n      \
    \      case '-':\n                result -= operand[i];\n                break;\n\
    \            case '*':\n                result *= operand[i];\n              \
    \  break;\n            case '/':\n                result /= operand[i];\n    \
    \            break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\n", "  let result = 0;\n  for (let i = 0; i\
    \ < operand.length; i++) {\n    let oper = operator[i];\n    let num = operand[i];\n\
    \    switch (oper) {\n      case '+':\n        result += num;\n        break;\n\
    \      case '-':\n        result -= num;\n        break;\n      case '*':\n  \
    \      result *= num;\n        break;\n      case '/':\n        result /= num;\n\
    \        break;\n      case '**':\n        result **= num;\n        break;\n \
    \   }\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = 0; i <\
    \ operand.length; i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n\
    \    let op3 = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n\
    \    let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "    let result = 0;\n    for (let i = 0; i < operand.length;\
    \ i++) {\n        let op1 = operator[0];\n        let op2 = operator[1];\n   \
    \     let op3 = operator[2];\n        let op4 = operator[3];\n        let op5\
    \ = operator[4];\n        let op6 = operator[5];\n        let op7 = operator[6];\n\
    \        let op8 = operator[7];\n        let op9 = operator[8];\n        let op10\
    \ = operator[9];\n        let op11 = operator[10];\n        let op12 = operator[11];\n\
    \        let op13 = operator[12];\n        let op14 = operator[13];\n        let\
    \ op15 = operator[14];\n        let op16 = operator[15];\n        let op17 = operator[16];\n\
    \        let op18 = operator[17];\n        let op19 = operator[18];\n        let\
    \ op20 = operator[19];\n        let op21 = operator[20];\n        let op22 = operator[21];\n\
    \        let op23 = operator[22];\n        let op24 = operator[23];\n        let\
    \ op25 = operator[24];\n        let op26 = operator[25];\n        let op27 = operator[26];\n\
    \        let op28 = operator[27];\n        let op29 = operator[28];\n        let\
    \ op30 = operator[29];\n        let op31 = operator[30];\n        let op32 = operator[31];\n\
    \        let op33 = operator[32];\n        let op34 = operator[33];\n        let\
    \ op35 = operator[34];\n        let op36 = operator[35];\n        let op37 = operator[36];\n\
    \        let op38 = operator[37];\n        let op39 = operator[38];\n        let\
    \ op40 = operator[39];\n        let op41 = operator[40];\n        let op42 = operator[41];\n\
    \        let op43 = operator[42];\n        let op44 = operator[43];\n        let\
    \ op45 = operator[44];\n        let op46 = operator[45];\n        let op47 = operator[46];\n\
    \        let op48 = operator[47];\n        let op49 = operator[48];\n        let\
    \ op50 = operator[49];\n        let op51 = operator[50];\n        let op52 = operator[51];\n\
    \        let op53 = operator[52];\n        let op54 = operator[53];\n        let\
    \ op55 = operator[54];\n        let op56 = operator[55];\n        let op57 = operator[56];\n\
    \        let op58 = operator[57];\n        let op59 = operator[58];\n        let\
    \ op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n  \
    \  let op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op: number\
    \ = operator[i];\n    let a: number = operand[i];\n    switch (op) {\n      case\
    \ '+':\n        result += a;\n        break;\n      case '-':\n        result\
    \ -= a;\n        break;\n      case '*':\n        result *= a;\n        break;\n\
    \      case '/':\n        result /= a;\n        break;\n      case '**':\n   \
    \     result **= a;\n        break;\n      default:\n        throw 'Invalid operator';\n\
    \    }\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = 0; i <\
    \ operand.length; i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n\
    \    let op3 = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n\
    \    let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "  let result = 0;\n  for (let i = 0; i < operator.length; i++)\
    \ {\n    if (operator[i] == '+') {\n      result += operand[i];\n    } else if\
    \ (operator[i] == '-') {\n      result -= operand[i];\n    } else if (operator[i]\
    \ == '*') {\n      result *= operand[i];\n    } else if (operator[i] == '/') {\n\
    \      result /= operand[i];\n    } else if (operator[i] == '**') {\n      result\
    \ **= operand[i];\n    }\n  }\n  return result;\n}\n", "    let result = 0;\n\
    \    for (let i = 0; i < operand.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                result += operand[i];\n          \
    \      break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                console.log(`The\
    \ operator ${operator[i]} is not supported.`);\n                break;\n     \
    \   }\n    }\n    return result;\n}\n", "  let result = 0;\n  for (let i = 0;\
    \ i < operand.length; i++) {\n    result += operand[i] * operator[operand.length\
    \ - 1 - i];\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = 0;\
    \ i < operand.length; i++) {\n    let oper = operator[i];\n    let operand1 =\
    \ operand[i];\n    let operand2 = operand[i + 1];\n    switch (oper) {\n     \
    \ case '+':\n        result += operand1;\n        break;\n      case '-':\n  \
    \      result -= operand1;\n        break;\n      case '*':\n        result *=\
    \ operand1;\n        break;\n      case '/':\n        result /= operand1;\n  \
    \      break;\n      case '**':\n        result **= operand1;\n        break;\n\
    \      default:\n        throw 'Invalid operator';\n    }\n  }\n  return result;\n\
    }\n", "    let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n \
    \       switch (operator[i]) {\n            case '+':\n                result\
    \ += operand[i];\n                break;\n            case '-':\n            \
    \    result -= operand[i];\n                break;\n            case '*':\n  \
    \              result *= operand[i];\n                break;\n            case\
    \ '/':\n                result /= operand[i];\n                break;\n      \
    \      case '**':\n                result **= operand[i];\n                break;\n\
    \            default:\n                throw 'Invalid operator';\n        }\n\
    \    }\n    return result;\n}\n", "    let result = 0;\n    for (let i = 0; i\
    \ < operand.length; i++) {\n        let op = operator[i];\n        let a = operand[i];\n\
    \        if (op === '+') {\n            result += a;\n        } else if (op ===\
    \ '-') {\n            result -= a;\n        } else if (op === '*') {\n       \
    \     result *= a;\n        } else if (op === '/') {\n            result /= a;\n\
    \        } else if (op === '**') {\n            result **= a;\n        }\n   \
    \ }\n    return result;\n}\n", "  let result = 0;\n  for (let i = 0; i < operand.length;\
    \ i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3\
    \ = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n   \
    \ let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \   let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        switch\
    \ (operator[i]) {\n            case '+':\n                result = result + operand[i];\n\
    \                break;\n            case '-':\n                result = result\
    \ - operand[i];\n                break;\n            case '*':\n             \
    \   result = result * operand[i];\n                break;\n            case '/':\n\
    \                result = result / operand[i];\n                break;\n     \
    \       case '**':\n                result = result ** operand[i];\n         \
    \       break;\n            default:\n                throw 'Invalid operator';\n\
    \        }\n    }\n    return result;\n}\n", "  let result = 0;\n  for (let i\
    \ = 0; i < operand.length; i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n\
    \    let op3 = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n\
    \    let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return\
    \ result;\n}\n", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 =\
    \ operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n    let\
    \ op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \   let result = 0;\n    let index = 0;\n    while (index < operator.length) {\n\
    \        switch (operator[index]) {\n            case '+':\n                result\
    \ = result + operand[index];\n                break;\n            case '-':\n\
    \                result = result - operand[index];\n                break;\n \
    \           case '*':\n                result = result * operand[index];\n   \
    \             break;\n            case '/':\n                result = result /\
    \ operand[index];\n                break;\n            case '**':\n          \
    \      result = result ** operand[index];\n                break;\n          \
    \  default:\n                throw 'Invalid operator';\n        }\n        index++;\n\
    \    }\n    return result;\n}\n", "    let result = 0;\n    for (let i = 0; i\
    \ < operand.length; i++) {\n        let op1 = operator[0];\n        let op2 =\
    \ operator[1];\n        let op3 = operator[2];\n        let op4 = operator[3];\n\
    \        let op5 = operator[4];\n        let op6 = operator[5];\n        let op7\
    \ = operator[6];\n        let op8 = operator[7];\n        let op9 = operator[8];\n\
    \        let op10 = operator[9];\n        let op11 = operator[10];\n        let\
    \ op12 = operator[11];\n        let op13 = operator[12];\n        let op14 = operator[13];\n\
    \        let op15 = operator[14];\n        let op16 = operator[15];\n        let\
    \ op17 = operator[16];\n        let op18 = operator[17];\n        let op19 = operator[18];\n\
    \        let op20 = operator[19];\n        let op21 = operator[20];\n        let\
    \ op22 = operator[21];\n        let op23 = operator[22];\n        let op24 = operator[23];\n\
    \        let op25 = operator[24];\n        let op26 = operator[25];\n        let\
    \ op27 = operator[26];\n        let op28 = operator[27];\n        let op29 = operator[28];\n\
    \        let op30 = operator[29];\n        let op31 = operator[30];\n        let\
    \ op32 = operator[31];\n        let op33 = operator[32];\n        let op34 = operator[33];\n\
    \        let op35 = operator[34];\n        let op36 = operator[35];\n        let\
    \ op37 = operator[36];\n        let op38 = operator[37];\n        let op39 = operator[38];\n\
    \        let op40 = operator[39];\n        let op41 = operator[40];\n        let\
    \ op42 = operator[41];\n        let op43 = operator[42];\n        let op44 = operator[43];\n\
    \        let op45 = operator[44];\n        let op46 = operator[45];\n        let\
    \ op47 = operator[46];\n        let op48 = operator[47];\n        let op49 = operator[48];\n\
    \        let op50 = operator[49];\n        let op51 = operator[50];\n        let\
    \ op52 = operator[51];\n        let op53 = operator[52];\n        let op54 = operator[53];\n\
    \        let op55 = operator[54];\n        let op56 = operator[55];\n        let\
    \ op57 = operator[56];\n        let op58 = operator[57];\n        let op59 = operator[58];\n\
    \        let op60", "    let result = 0;\n    for (let i = 0; i < operand.length;\
    \ i++) {\n        let op1 = operator[0];\n        let op2 = operator[1];\n   \
    \     let op3 = operator[2];\n        let op4 = operator[3];\n        let op5\
    \ = operator[4];\n        let op6 = operator[5];\n        let op7 = operator[6];\n\
    \        let op8 = operator[7];\n        let op9 = operator[8];\n        let op10\
    \ = operator[9];\n        let op11 = operator[10];\n        let op12 = operator[11];\n\
    \        let op13 = operator[12];\n        let op14 = operator[13];\n        let\
    \ op15 = operator[14];\n        let op16 = operator[15];\n        let op17 = operator[16];\n\
    \        let op18 = operator[17];\n        let op19 = operator[18];\n        let\
    \ op20 = operator[19];\n        let op21 = operator[20];\n        let op22 = operator[21];\n\
    \        let op23 = operator[22];\n        let op24 = operator[23];\n        let\
    \ op25 = operator[24];\n        let op26 = operator[25];\n        let op27 = operator[26];\n\
    \        let op28 = operator[27];\n        let op29 = operator[28];\n        let\
    \ op30 = operator[29];\n        let op31 = operator[30];\n        let op32 = operator[31];\n\
    \        let op33 = operator[32];\n        let op34 = operator[33];\n        let\
    \ op35 = operator[34];\n        let op36 = operator[35];\n        let op37 = operator[36];\n\
    \        let op38 = operator[37];\n        let op39 = operator[38];\n        let\
    \ op40 = operator[39];\n        let op41 = operator[40];\n        let op42 = operator[41];\n\
    \        let op43 = operator[42];\n        let op44 = operator[43];\n        let\
    \ op45 = operator[44];\n        let op46 = operator[45];\n        let op47 = operator[46];\n\
    \        let op48 = operator[47];\n        let op49 = operator[48];\n        let\
    \ op50 = operator[49];\n        let op51 = operator[50];\n        let op52 = operator[51];\n\
    \        let op53 = operator[52];\n        let op54 = operator[53];\n        let\
    \ op55 = operator[54];\n        let op56 = operator[55];\n        let op57 = operator[56];\n\
    \        let op58 = operator[57];\n        let op59 = operator[58];\n        let\
    \ op60", "    let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n\
    \        let oper = operator[i];\n        let operand1 = operand[i];\n       \
    \ switch (oper) {\n            case '+':\n                result += operand1;\n\
    \                break;\n            case '-':\n                result -= operand1;\n\
    \                break;\n            case '*':\n                result *= operand1;\n\
    \                break;\n            case '/':\n                result /= operand1;\n\
    \                break;\n            case '**':\n                result **= operand1;\n\
    \                break;\n            default:\n                throw 'Invalid\
    \ operator';\n        }\n    }\n    return result;\n}\n", "    let result = 0;\n\
    \    for (let i = 0; i < operand.length; i++) {\n        let op = operator[i];\n\
    \        let operand1 = operand[i];\n        switch (op) {\n            case '+':\n\
    \                result = result + operand1;\n                break;\n       \
    \     case '-':\n                result = result - operand1;\n               \
    \ break;\n            case '*':\n                result = result * operand1;\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand1;\n                break;\n            case '**':\n              \
    \  result = result ** operand1;\n                break;\n            default:\n\
    \                throw 'Invalid operator';\n        }\n    }\n    return result;\n\
    }\n", "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let\
    \ op = operator[i];\n    let a = operand[i];\n    switch (op) {\n      case '+':\n\
    \        result += a;\n        break;\n      case '-':\n        result -= a;\n\
    \        break;\n      case '*':\n        result *= a;\n        break;\n     \
    \ case '/':\n        result /= a;\n        break;\n      case '**':\n        result\
    \ **= a;\n        break;\n      default:\n        throw 'Invalid operator';\n\
    \    }\n  }\n  return result;\n}\n", "    let result = 0;\n    for (let i = 0;\
    \ i < operator.length; i++) {\n        switch (operator[i]) {\n            case\
    \ '+':\n                result += operand[i];\n                break;\n      \
    \      case '-':\n                result -= operand[i];\n                break;\n\
    \            case '*':\n                result *= operand[i];\n              \
    \  break;\n            case '/':\n                result /= operand[i];\n    \
    \            break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n        }\n    }\n    return result;\n}\n", "  let result\
    \ = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 = operator[0];\n\
    \    let op2 = operator[1];\n    let op3 = operator[2];\n    let op4 = operator[3];\n\
    \    let op5 = operator[4];\n    let op6 = operator[5];\n    let op7 = operator[6];\n\
    \    let op8 = operator[7];\n    let op9 = operator[8];\n    let op10 = operator[9];\n\
    \    let op11 = operator[10];\n    let op12 = operator[11];\n    let op13 = operator[12];\n\
    \    let op14 = operator[13];\n    let op15 = operator[14];\n    let op16 = operator[15];\n\
    \    let op17 = operator[16];\n    let op18 = operator[17];\n    let op19 = operator[18];\n\
    \    let op20 = operator[19];\n    let op21 = operator[20];\n    let op22 = operator[21];\n\
    \    let op23 = operator[22];\n    let op24 = operator[23];\n    let op25 = operator[24];\n\
    \    let op26 = operator[25];\n    let op27 = operator[26];\n    let op28 = operator[27];\n\
    \    let op29 = operator[28];\n    let op30 = operator[29];\n    let op31 = operator[30];\n\
    \    let op32 = operator[31];\n    let op33 = operator[32];\n    let op34 = operator[33];\n\
    \    let op35 = operator[34];\n    let op36 = operator[35];\n    let op37 = operator[36];\n\
    \    let op38 = operator[37];\n    let op39 = operator[38];\n    let op40 = operator[39];\n\
    \    let op41 = operator[40];\n    let op42 = operator[41];\n    let op43 = operator[42];\n\
    \    let op44 = operator[43];\n    let op45 = operator[44];\n    let op46 = operator[45];\n\
    \    let op47 = operator[46];\n    let op48 = operator[47];\n    let op49 = operator[48];\n\
    \    let op50 = operator[49];\n    let op51 = operator[50];\n    let op52 = operator[51];\n\
    \    let op53 = operator[52];\n    let op54 = operator[53];\n    let op55 = operator[54];\n\
    \    let op56 = operator[55];\n    let op57 = operator[56];\n    let op58 = operator[57];\n\
    \    let op59 = operator[58];\n    let op60", "  let result = 0;\n  for (let i\
    \ = 0; i < operand.length; i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n\
    \    let op3 = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n\
    \    let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "  let result = 0;\n  for (let i = 0; i < operator.length; i++)\
    \ {\n    result += operand[i] * operator[i];\n  }\n  return result;\n}\n", " \
    \   let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        switch\
    \ (operator[i]) {\n            case '+':\n                result += operand[i];\n\
    \                break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                console.log('Invalid\
    \ operator');\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,algorithm,math,typescript\
    \ |>\n<| c |>\nThis answer would be better if you explained what you did and why.\n\
    <|/ c |>\n<| c |>\nI added some comments to explain what each line does. I hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! I understand it now. I'm\
    \ going to try and implement this in my code and see how it goes. Thanks again!\n\
    <|/ c |>\n<| c |>\nI added some comments to explain what each line does. I hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! I understand it now. I'm\
    \ going to try and implement this in my code and see how it goes. Thanks again!\n\
    <|/ c |>\n<| a tags=javascript,algorithm,math,typescript |>\nI wrote a recursive\
    \ function which solves the problem for me:\n<code>", "  let result = 0;\n  for\
    \ (let i = 0; i < operand.length; i++) {\n    let op: number = operator[i];\n\
    \    let a: number = operand[i];\n    switch (op) {\n      case '+':\n       \
    \ result += a;\n        break;\n      case '-':\n        result -= a;\n      \
    \  break;\n      case '*':\n        result *= a;\n        break;\n      case '//':\n\
    \        result /= a;\n        break;\n      case '**':\n        result **= a;\n\
    \        break;\n      default:\n        throw 'Invalid operator';\n    }\n  }\n\
    \  return result;\n}\n", "    let result = 0;\n    for (let i = 0; i < operand.length;\
    \ i++) {\n        result += operand[i] * operator[operand.length - 1 - i];\n \
    \   }\n    return result;\n}\n", "  let result = 0;\n  for (let i = 0; i < operand.length;\
    \ i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3\
    \ = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n   \
    \ let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 =\
    \ operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n    let\
    \ op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 =\
    \ operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n    let\
    \ op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 =\
    \ operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n    let\
    \ op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 =\
    \ operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n    let\
    \ op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \   let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        let\
    \ op1 = operator[0];\n        let op2 = operator[1];\n        let op3 = operator[2];\n\
    \        let op4 = operator[3];\n        let op5 = operator[4];\n        let op6\
    \ = operator[5];\n        let op7 = operator[6];\n        let op8 = operator[7];\n\
    \        let op9 = operator[8];\n        let op10 = operator[9];\n        let\
    \ op11 = operator[10];\n        let op12 = operator[11];\n        let op13 = operator[12];\n\
    \        let op14 = operator[13];\n        let op15 = operator[14];\n        let\
    \ op16 = operator[15];\n        let op17 = operator[16];\n        let op18 = operator[17];\n\
    \        let op19 = operator[18];\n        let op20 = operator[19];\n        let\
    \ op21 = operator[20];\n        let op22 = operator[21];\n        let op23 = operator[22];\n\
    \        let op24 = operator[23];\n        let op25 = operator[24];\n        let\
    \ op26 = operator[25];\n        let op27 = operator[26];\n        let op28 = operator[27];\n\
    \        let op29 = operator[28];\n        let op30 = operator[29];\n        let\
    \ op31 = operator[30];\n        let op32 = operator[31];\n        let op33 = operator[32];\n\
    \        let op34 = operator[33];\n        let op35 = operator[34];\n        let\
    \ op36 = operator[35];\n        let op37 = operator[36];\n        let op38 = operator[37];\n\
    \        let op39 = operator[38];\n        let op40 = operator[39];\n        let\
    \ op41 = operator[40];\n        let op42 = operator[41];\n        let op43 = operator[42];\n\
    \        let op44 = operator[43];\n        let op45 = operator[44];\n        let\
    \ op46 = operator[45];\n        let op47 = operator[46];\n        let op48 = operator[47];\n\
    \        let op49 = operator[48];\n        let op50 = operator[49];\n        let\
    \ op51 = operator[50];\n        let op52 = operator[51];\n        let op53 = operator[52];\n\
    \        let op54 = operator[53];\n        let op55 = operator[54];\n        let\
    \ op56 = operator[55];\n        let op57 = operator[56];\n        let op58 = operator[57];\n\
    \        let op59 = operator[58];\n        let op60", "    let result = 0;\n \
    \   for (let i = 0; i < operand.length; i++) {\n        switch (operator[i]) {\n\
    \            case '+':\n                result += operand[i];\n              \
    \  break;\n            case '-':\n                result -= operand[i];\n    \
    \            break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                throw 'Invalid\
    \ operator';\n        }\n    }\n    return result;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length\
    \ - i - 1];\n  }\n  return result;\n}\n", "    let result = 0;\n    for (let i\
    \ = 0; i < operand.length; i++) {\n        let op1 = operator[0];\n        let\
    \ op2 = operator[1];\n        let op3 = operator[2];\n        let op4 = operator[3];\n\
    \        let op5 = operator[4];\n        let op6 = operator[5];\n        let op7\
    \ = operator[6];\n        let op8 = operator[7];\n        let op9 = operator[8];\n\
    \        let op10 = operator[9];\n        let op11 = operator[10];\n        let\
    \ op12 = operator[11];\n        let op13 = operator[12];\n        let op14 = operator[13];\n\
    \        let op15 = operator[14];\n        let op16 = operator[15];\n        let\
    \ op17 = operator[16];\n        let op18 = operator[17];\n        let op19 = operator[18];\n\
    \        let op20 = operator[19];\n        let op21 = operator[20];\n        let\
    \ op22 = operator[21];\n        let op23 = operator[22];\n        let op24 = operator[23];\n\
    \        let op25 = operator[24];\n        let op26 = operator[25];\n        let\
    \ op27 = operator[26];\n        let op28 = operator[27];\n        let op29 = operator[28];\n\
    \        let op30 = operator[29];\n        let op31 = operator[30];\n        let\
    \ op32 = operator[31];\n        let op33 = operator[32];\n        let op34 = operator[33];\n\
    \        let op35 = operator[34];\n        let op36 = operator[35];\n        let\
    \ op37 = operator[36];\n        let op38 = operator[37];\n        let op39 = operator[38];\n\
    \        let op40 = operator[39];\n        let op41 = operator[40];\n        let\
    \ op42 = operator[41];\n        let op43 = operator[42];\n        let op44 = operator[43];\n\
    \        let op45 = operator[44];\n        let op46 = operator[45];\n        let\
    \ op47 = operator[46];\n        let op48 = operator[47];\n        let op49 = operator[48];\n\
    \        let op50 = operator[49];\n        let op51 = operator[50];\n        let\
    \ op52 = operator[51];\n        let op53 = operator[52];\n        let op54 = operator[53];\n\
    \        let op55 = operator[54];\n        let op56 = operator[55];\n        let\
    \ op57 = operator[56];\n        let op58 = operator[57];\n        let op59 = operator[58];\n\
    \        let op60", "    let result = 0;\n    for (let i = 0; i < operand.length;\
    \ i++) {\n        let op1 = operator[0];\n        let op2 = operator[1];\n   \
    \     let op3 = operator[2];\n        let op4 = operator[3];\n        let op5\
    \ = operator[4];\n        let op6 = operator[5];\n        let op7 = operator[6];\n\
    \        let op8 = operator[7];\n        let op9 = operator[8];\n        let op10\
    \ = operator[9];\n        let op11 = operator[10];\n        let op12 = operator[11];\n\
    \        let op13 = operator[12];\n        let op14 = operator[13];\n        let\
    \ op15 = operator[14];\n        let op16 = operator[15];\n        let op17 = operator[16];\n\
    \        let op18 = operator[17];\n        let op19 = operator[18];\n        let\
    \ op20 = operator[19];\n        let op21 = operator[20];\n        let op22 = operator[21];\n\
    \        let op23 = operator[22];\n        let op24 = operator[23];\n        let\
    \ op25 = operator[24];\n        let op26 = operator[25];\n        let op27 = operator[26];\n\
    \        let op28 = operator[27];\n        let op29 = operator[28];\n        let\
    \ op30 = operator[29];\n        let op31 = operator[30];\n        let op32 = operator[31];\n\
    \        let op33 = operator[32];\n        let op34 = operator[33];\n        let\
    \ op35 = operator[34];\n        let op36 = operator[35];\n        let op37 = operator[36];\n\
    \        let op38 = operator[37];\n        let op39 = operator[38];\n        let\
    \ op40 = operator[39];\n        let op41 = operator[40];\n        let op42 = operator[41];\n\
    \        let op43 = operator[42];\n        let op44 = operator[43];\n        let\
    \ op45 = operator[44];\n        let op46 = operator[45];\n        let op47 = operator[46];\n\
    \        let op48 = operator[47];\n        let op49 = operator[48];\n        let\
    \ op50 = operator[49];\n        let op51 = operator[50];\n        let op52 = operator[51];\n\
    \        let op53 = operator[52];\n        let op54 = operator[53];\n        let\
    \ op55 = operator[54];\n        let op56 = operator[55];\n        let op57 = operator[56];\n\
    \        let op58 = operator[57];\n        let op59 = operator[58];\n        let\
    \ op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n  \
    \  let op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \   let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        let\
    \ oper = operator[i];\n        let num = operand[i];\n        switch (oper) {\n\
    \            case '+':\n                result += num;\n                break;\n\
    \            case '-':\n                result -= num;\n                break;\n\
    \            case '*':\n                result *= num;\n                break;\n\
    \            case '/':\n                result /= num;\n                break;\n\
    \            case '**':\n                result **= num;\n                break;\n\
    \            default:\n                console.log('Invalid operator');\n    \
    \    }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,algorithm,math,typescript\
    \ |>\n<| c |>\nThis doesn't seem to work for me. `do_algebra` returns `NaN` when\
    \ I test it with `operator = ['+', '*']` and `operand = [2, 3]`.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works fine for me. Did you copy the code correctly?\
    \ I tested it with `operator = ['+', '*']` and `operand = [2, 3]`\n<|/ c |>\n\
    <| c |>\nI did copy it correctly. I'm running it in TypeScript and it's returning\
    \ `NaN`.\n<|/ c |>\n<| c |>\nI tested it in TypeScript and it works fine. Did\
    \ you copy the code correctly? I tested it with `operator = ['+', '*']` and `operand\
    \ = [2, 3]`\n<|/ c |>\n<| c |>\nI copied it exactly as you wrote it. I even tried\
    \ it with `operator = ['+']` and `operand = [2, 3]` and it still returns `NaN`.\n\
    <|/ c |>\n<| a tags=javascript,algorithm,math,typescript |>\n<code>", "  let result\
    \ = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[i]\
    \ * operator[i];\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let\
    \ i = 0; i < operator.length; i++) {\n    result += operand[i] * operator[i];\n\
    \  }\n  return result;\n}\n", "    let result = 0;\n    for (let i = 0; i < operand.length;\
    \ i++) {\n        let op1 = operator[0];\n        let op2 = operator[1];\n   \
    \     let op3 = operator[2];\n        let op4 = operator[3];\n        let op5\
    \ = operator[4];\n        let op6 = operator[5];\n        let op7 = operator[6];\n\
    \        let op8 = operator[7];\n        let op9 = operator[8];\n        let op10\
    \ = operator[9];\n        let op11 = operator[10];\n        let op12 = operator[11];\n\
    \        let op13 = operator[12];\n        let op14 = operator[13];\n        let\
    \ op15 = operator[14];\n        let op16 = operator[15];\n        let op17 = operator[16];\n\
    \        let op18 = operator[17];\n        let op19 = operator[18];\n        let\
    \ op20 = operator[19];\n        let op21 = operator[20];\n        let op22 = operator[21];\n\
    \        let op23 = operator[22];\n        let op24 = operator[23];\n        let\
    \ op25 = operator[24];\n        let op26 = operator[25];\n        let op27 = operator[26];\n\
    \        let op28 = operator[27];\n        let op29 = operator[28];\n        let\
    \ op30 = operator[29];\n        let op31 = operator[30];\n        let op32 = operator[31];\n\
    \        let op33 = operator[32];\n        let op34 = operator[33];\n        let\
    \ op35 = operator[34];\n        let op36 = operator[35];\n        let op37 = operator[36];\n\
    \        let op38 = operator[37];\n        let op39 = operator[38];\n        let\
    \ op40 = operator[39];\n        let op41 = operator[40];\n        let op42 = operator[41];\n\
    \        let op43 = operator[42];\n        let op44 = operator[43];\n        let\
    \ op45 = operator[44];\n        let op46 = operator[45];\n        let op47 = operator[46];\n\
    \        let op48 = operator[47];\n        let op49 = operator[48];\n        let\
    \ op50 = operator[49];\n        let op51 = operator[50];\n        let op52 = operator[51];\n\
    \        let op53 = operator[52];\n        let op54 = operator[53];\n        let\
    \ op55 = operator[54];\n        let op56 = operator[55];\n        let op57 = operator[56];\n\
    \        let op58 = operator[57];\n        let op59 = operator[58];\n        let\
    \ op60", "    let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n\
    \        let op1 = operator[0];\n        let op2 = operator[1];\n        let op3\
    \ = operator[2];\n        let op4 = operator[3];\n        let op5 = operator[4];\n\
    \        let op6 = operator[5];\n        let op7 = operator[6];\n        let op8\
    \ = operator[7];\n        let op9 = operator[8];\n        let op10 = operator[9];\n\
    \        let op11 = operator[10];\n        let op12 = operator[11];\n        let\
    \ op13 = operator[12];\n        let op14 = operator[13];\n        let op15 = operator[14];\n\
    \        let op16 = operator[15];\n        let op17 = operator[16];\n        let\
    \ op18 = operator[17];\n        let op19 = operator[18];\n        let op20 = operator[19];\n\
    \        let op21 = operator[20];\n        let op22 = operator[21];\n        let\
    \ op23 = operator[22];\n        let op24 = operator[23];\n        let op25 = operator[24];\n\
    \        let op26 = operator[25];\n        let op27 = operator[26];\n        let\
    \ op28 = operator[27];\n        let op29 = operator[28];\n        let op30 = operator[29];\n\
    \        let op31 = operator[30];\n        let op32 = operator[31];\n        let\
    \ op33 = operator[32];\n        let op34 = operator[33];\n        let op35 = operator[34];\n\
    \        let op36 = operator[35];\n        let op37 = operator[36];\n        let\
    \ op38 = operator[37];\n        let op39 = operator[38];\n        let op40 = operator[39];\n\
    \        let op41 = operator[40];\n        let op42 = operator[41];\n        let\
    \ op43 = operator[42];\n        let op44 = operator[43];\n        let op45 = operator[44];\n\
    \        let op46 = operator[45];\n        let op47 = operator[46];\n        let\
    \ op48 = operator[47];\n        let op49 = operator[48];\n        let op50 = operator[49];\n\
    \        let op51 = operator[50];\n        let op52 = operator[51];\n        let\
    \ op53 = operator[52];\n        let op54 = operator[53];\n        let op55 = operator[54];\n\
    \        let op56 = operator[55];\n        let op57 = operator[56];\n        let\
    \ op58 = operator[57];\n        let op59 = operator[58];\n        let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op: number\
    \ = operator[i];\n    let a: number = operand[i];\n    switch (op) {\n      case\
    \ '+':\n        result += a;\n        break;\n      case '-':\n        result\
    \ -= a;\n        break;\n      case '*':\n        result *= a;\n        break;\n\
    \      case '/':\n        result /= a;\n        break;\n      case '**':\n   \
    \     result **= a;\n        break;\n      default:\n        throw 'Invalid operator';\n\
    \    }\n  }\n  return result;\n}\n", "    let result = 0;\n    for (let i = 0;\
    \ i < operand.length; i++) {\n        switch (operator[i]) {\n            case\
    \ '+':\n                result += operand[i];\n                break;\n      \
    \      case '-':\n                result -= operand[i];\n                break;\n\
    \            case '*':\n                result *= operand[i];\n              \
    \  break;\n            case '/':\n                result /= operand[i];\n    \
    \            break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                console.log(`Invalid\
    \ operator: ${operator[i]}`);\n        }\n    }\n    return result;\n}\n", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result +=\
    \ operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n}\n",
  "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 =\
    \ operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n    let\
    \ op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 =\
    \ operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n    let\
    \ op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result +=\
    \ operand[i] * operator[i];\n  }\n  return result;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < operand.length; i++) {\n    let op1 = operator[0];\n  \
    \  let op2 = operator[1];\n    let op3 = operator[2];\n    let op4 = operator[3];\n\
    \    let op5 = operator[4];\n    let op6 = operator[5];\n    let op7 = operator[6];\n\
    \    let op8 = operator[7];\n    let op9 = operator[8];\n    let op10 = operator[9];\n\
    \    let op11 = operator[10];\n    let op12 = operator[11];\n    let op13 = operator[12];\n\
    \    let op14 = operator[13];\n    let op15 = operator[14];\n    let op16 = operator[15];\n\
    \    let op17 = operator[16];\n    let op18 = operator[17];\n    let op19 = operator[18];\n\
    \    let op20 = operator[19];\n    let op21 = operator[20];\n    let op22 = operator[21];\n\
    \    let op23 = operator[22];\n    let op24 = operator[23];\n    let op25 = operator[24];\n\
    \    let op26 = operator[25];\n    let op27 = operator[26];\n    let op28 = operator[27];\n\
    \    let op29 = operator[28];\n    let op30 = operator[29];\n    let op31 = operator[30];\n\
    \    let op32 = operator[31];\n    let op33 = operator[32];\n    let op34 = operator[33];\n\
    \    let op35 = operator[34];\n    let op36 = operator[35];\n    let op37 = operator[36];\n\
    \    let op38 = operator[37];\n    let op39 = operator[38];\n    let op40 = operator[39];\n\
    \    let op41 = operator[40];\n    let op42 = operator[41];\n    let op43 = operator[42];\n\
    \    let op44 = operator[43];\n    let op45 = operator[44];\n    let op46 = operator[45];\n\
    \    let op47 = operator[46];\n    let op48 = operator[47];\n    let op49 = operator[48];\n\
    \    let op50 = operator[49];\n    let op51 = operator[50];\n    let op52 = operator[51];\n\
    \    let op53 = operator[52];\n    let op54 = operator[53];\n    let op55 = operator[54];\n\
    \    let op56 = operator[55];\n    let op57 = operator[56];\n    let op58 = operator[57];\n\
    \    let op59 = operator[58];\n    let op60", "  let result = 0;\n  for (let i\
    \ = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length\
    \ - 1 - i];\n  }\n  return result;\n}\n", "    let result = 0;\n    for (let i\
    \ = 0; i < operand.length; i++) {\n        let op1 = operator[0];\n        let\
    \ op2 = operator[1];\n        let op3 = operator[2];\n        let op4 = operator[3];\n\
    \        let op5 = operator[4];\n        let op6 = operator[5];\n        let op7\
    \ = operator[6];\n        let op8 = operator[7];\n        let op9 = operator[8];\n\
    \        let op10 = operator[9];\n        let op11 = operator[10];\n        let\
    \ op12 = operator[11];\n        let op13 = operator[12];\n        let op14 = operator[13];\n\
    \        let op15 = operator[14];\n        let op16 = operator[15];\n        let\
    \ op17 = operator[16];\n        let op18 = operator[17];\n        let op19 = operator[18];\n\
    \        let op20 = operator[19];\n        let op21 = operator[20];\n        let\
    \ op22 = operator[21];\n        let op23 = operator[22];\n        let op24 = operator[23];\n\
    \        let op25 = operator[24];\n        let op26 = operator[25];\n        let\
    \ op27 = operator[26];\n        let op28 = operator[27];\n        let op29 = operator[28];\n\
    \        let op30 = operator[29];\n        let op31 = operator[30];\n        let\
    \ op32 = operator[31];\n        let op33 = operator[32];\n        let op34 = operator[33];\n\
    \        let op35 = operator[34];\n        let op36 = operator[35];\n        let\
    \ op37 = operator[36];\n        let op38 = operator[37];\n        let op39 = operator[38];\n\
    \        let op40 = operator[39];\n        let op41 = operator[40];\n        let\
    \ op42 = operator[41];\n        let op43 = operator[42];\n        let op44 = operator[43];\n\
    \        let op45 = operator[44];\n        let op46 = operator[45];\n        let\
    \ op47 = operator[46];\n        let op48 = operator[47];\n        let op49 = operator[48];\n\
    \        let op50 = operator[49];\n        let op51 = operator[50];\n        let\
    \ op52 = operator[51];\n        let op53 = operator[52];\n        let op54 = operator[53];\n\
    \        let op55 = operator[54];\n        let op56 = operator[55];\n        let\
    \ op57 = operator[56];\n        let op58 = operator[57];\n        let op59 = operator[58];\n\
    \        let op60", "  let result = 0;\n  for (let i = 0; i < operand.length;\
    \ i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3\
    \ = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n   \
    \ let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "  let result = 0;\n  for (let i = 0; i < operator.length; i++)\
    \ {\n    result += operand[i] * operator[i];\n  }\n  return result;\n}\n", " \
    \   let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        let\
    \ op1 = operator[0];\n        let op2 = operator[1];\n        let op3 = operator[2];\n\
    \        let op4 = operator[3];\n        let op5 = operator[4];\n        let op6\
    \ = operator[5];\n        let op7 = operator[6];\n        let op8 = operator[7];\n\
    \        let op9 = operator[8];\n        let op10 = operator[9];\n        let\
    \ op11 = operator[10];\n        let op12 = operator[11];\n        let op13 = operator[12];\n\
    \        let op14 = operator[13];\n        let op15 = operator[14];\n        let\
    \ op16 = operator[15];\n        let op17 = operator[16];\n        let op18 = operator[17];\n\
    \        let op19 = operator[18];\n        let op20 = operator[19];\n        let\
    \ op21 = operator[20];\n        let op22 = operator[21];\n        let op23 = operator[22];\n\
    \        let op24 = operator[23];\n        let op25 = operator[24];\n        let\
    \ op26 = operator[25];\n        let op27 = operator[26];\n        let op28 = operator[27];\n\
    \        let op29 = operator[28];\n        let op30 = operator[29];\n        let\
    \ op31 = operator[30];\n        let op32 = operator[31];\n        let op33 = operator[32];\n\
    \        let op34 = operator[33];\n        let op35 = operator[34];\n        let\
    \ op36 = operator[35];\n        let op37 = operator[36];\n        let op38 = operator[37];\n\
    \        let op39 = operator[38];\n        let op40 = operator[39];\n        let\
    \ op41 = operator[40];\n        let op42 = operator[41];\n        let op43 = operator[42];\n\
    \        let op44 = operator[43];\n        let op45 = operator[44];\n        let\
    \ op46 = operator[45];\n        let op47 = operator[46];\n        let op48 = operator[47];\n\
    \        let op49 = operator[48];\n        let op50 = operator[49];\n        let\
    \ op51 = operator[50];\n        let op52 = operator[51];\n        let op53 = operator[52];\n\
    \        let op54 = operator[53];\n        let op55 = operator[54];\n        let\
    \ op56 = operator[55];\n        let op57 = operator[56];\n        let op58 = operator[57];\n\
    \        let op59 = operator[58];\n        let op60", "    let result = 0;\n \
    \   let operator_index = 0;\n    let operand_index = 0;\n    while (operator_index\
    \ < operator.length) {\n        switch (operator[operator_index]) {\n        \
    \    case '+':\n                result += operand[operand_index];\n          \
    \      operand_index++;\n                break;\n            case '-':\n     \
    \           result -= operand[operand_index];\n                operand_index++;\n\
    \                break;\n            case '*':\n                result *= operand[operand_index];\n\
    \                operand_index++;\n                break;\n            case '/':\n\
    \                result /= operand[operand_index];\n                operand_index++;\n\
    \                break;\n            case '**':\n                result **= operand[operand_index];\n\
    \                operand_index++;\n                break;\n            default:\n\
    \                throw 'Invalid operator';\n        }\n        operator_index++;\n\
    \    }\n    return result;\n}\n", "    let result = 0;\n    for (let i = 0; i\
    \ < operand.length; i++) {\n        switch (operator[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '**':\n                result **= operand[i];\n  \
    \              break;\n            default:\n                console.log('Invalid\
    \ operator');\n        }\n    }\n    return result;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length\
    \ - 1 - i];\n  }\n  return result;\n}\n", "    let result = 0;\n    for (let i\
    \ = 0; i < operand.length; i++) {\n        switch (operator[i]) {\n          \
    \  case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                throw 'Invalid\
    \ operator';\n        }\n    }\n    return result;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n \
    \   let num = operand[i];\n    switch (oper) {\n      case '+':\n        result\
    \ += num;\n        break;\n      case '-':\n        result -= num;\n        break;\n\
    \      case '*':\n        result *= num;\n        break;\n      case '/':\n  \
    \      result /= num;\n        break;\n      case '**':\n        result **= num;\n\
    \        break;\n      default:\n        throw 'Invalid operator';\n    }\n  }\n\
    \  return result;\n}\n", "  let result = 0;\n  for (let i = 0; i < operand.length;\
    \ i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n\
    \  return result;\n}\n", "  let result = 0;\n  for (let i = 0; i < operator.length;\
    \ i++) {\n    let op: number = operator[i];\n    let a: number = operand[i];\n\
    \    let b: number = operand[i + 1];\n    switch (op) {\n      case '+':\n   \
    \     result = a + b;\n        break;\n      case '-':\n        result = a - b;\n\
    \        break;\n      case '*':\n        result = a * b;\n        break;\n  \
    \    case '/':\n        result = a / b;\n        break;\n      case '**':\n  \
    \      result = a ** b;\n        break;\n      default:\n        throw 'Invalid\
    \ operator';\n    }\n  }\n  return result;\n}\n", "    let result = 0;\n    for\
    \ (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n  \
    \          case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                throw 'Invalid\
    \ operator';\n        }\n    }\n    return result;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n \
    \   let operand1 = operand[i];\n    switch (oper) {\n      case '+':\n       \
    \ result += operand1;\n        break;\n      case '-':\n        result -= operand1;\n\
    \        break;\n      case '*':\n        result *= operand1;\n        break;\n\
    \      case '/':\n        result /= operand1;\n        break;\n      case '**':\n\
    \        result **= operand1;\n        break;\n      default:\n        throw 'Invalid\
    \ operator';\n    }\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let\
    \ i = 0; i < operand.length; i++) {\n    let op1 = operator[0];\n    let op2 =\
    \ operator[1];\n    let op3 = operator[2];\n    let op4 = operator[3];\n    let\
    \ op5 = operator[4];\n    let op6 = operator[5];\n    let op7 = operator[6];\n\
    \    let op8 = operator[7];\n    let op9 = operator[8];\n    let op10 = operator[9];\n\
    \    let op11 = operator[10];\n    let op12 = operator[11];\n    let op13 = operator[12];\n\
    \    let op14 = operator[13];\n    let op15 = operator[14];\n    let op16 = operator[15];\n\
    \    let op17 = operator[16];\n    let op18 = operator[17];\n    let op19 = operator[18];\n\
    \    let op20 = operator[19];\n    let op21 = operator[20];\n    let op22 = operator[21];\n\
    \    let op23 = operator[22];\n    let op24 = operator[23];\n    let op25 = operator[24];\n\
    \    let op26 = operator[25];\n    let op27 = operator[26];\n    let op28 = operator[27];\n\
    \    let op29 = operator[28];\n    let op30 = operator[29];\n    let op31 = operator[30];\n\
    \    let op32 = operator[31];\n    let op33 = operator[32];\n    let op34 = operator[33];\n\
    \    let op35 = operator[34];\n    let op36 = operator[35];\n    let op37 = operator[36];\n\
    \    let op38 = operator[37];\n    let op39 = operator[38];\n    let op40 = operator[39];\n\
    \    let op41 = operator[40];\n    let op42 = operator[41];\n    let op43 = operator[42];\n\
    \    let op44 = operator[43];\n    let op45 = operator[44];\n    let op46 = operator[45];\n\
    \    let op47 = operator[46];\n    let op48 = operator[47];\n    let op49 = operator[48];\n\
    \    let op50 = operator[49];\n    let op51 = operator[50];\n    let op52 = operator[51];\n\
    \    let op53 = operator[52];\n    let op54 = operator[53];\n    let op55 = operator[54];\n\
    \    let op56 = operator[55];\n    let op57 = operator[56];\n    let op58 = operator[57];\n\
    \    let op59 = operator[58];\n    let op60", "    let result = 0;\n    for (let\
    \ i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n       \
    \     case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                console.log('Invalid\
    \ operator');\n                break;\n        }\n    }\n    return result;\n\
    }\n", "  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result\
    \ += operand[i] * operator[i];\n  }\n  return result;\n}\n", "    let result =\
    \ 0;\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                result += operand[i];\n          \
    \      break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\n", "    let result = 0;\n    for (let i =\
    \ 0; i < operator.length; i++) {\n        switch (operator[i]) {\n           \
    \ case '+':\n                result += operand[i];\n                break;\n \
    \           case '-':\n                result -= operand[i];\n               \
    \ break;\n            case '*':\n                result *= operand[i];\n     \
    \           break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                console.log('Error:\
    \ Operator not found.');\n        }\n    }\n    return result;\n}\n", "    let\
    \ result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        let op1\
    \ = operator[0];\n        let op2 = operator[1];\n        let op3 = operator[2];\n\
    \        let op4 = operator[3];\n        let op5 = operator[4];\n        let op6\
    \ = operator[5];\n        let op7 = operator[6];\n        let op8 = operator[7];\n\
    \        let op9 = operator[8];\n        let op10 = operator[9];\n        let\
    \ op11 = operator[10];\n        let op12 = operator[11];\n        let op13 = operator[12];\n\
    \        let op14 = operator[13];\n        let op15 = operator[14];\n        let\
    \ op16 = operator[15];\n        let op17 = operator[16];\n        let op18 = operator[17];\n\
    \        let op19 = operator[18];\n        let op20 = operator[19];\n        let\
    \ op21 = operator[20];\n        let op22 = operator[21];\n        let op23 = operator[22];\n\
    \        let op24 = operator[23];\n        let op25 = operator[24];\n        let\
    \ op26 = operator[25];\n        let op27 = operator[26];\n        let op28 = operator[27];\n\
    \        let op29 = operator[28];\n        let op30 = operator[29];\n        let\
    \ op31 = operator[30];\n        let op32 = operator[31];\n        let op33 = operator[32];\n\
    \        let op34 = operator[33];\n        let op35 = operator[34];\n        let\
    \ op36 = operator[35];\n        let op37 = operator[36];\n        let op38 = operator[37];\n\
    \        let op39 = operator[38];\n        let op40 = operator[39];\n        let\
    \ op41 = operator[40];\n        let op42 = operator[41];\n        let op43 = operator[42];\n\
    \        let op44 = operator[43];\n        let op45 = operator[44];\n        let\
    \ op46 = operator[45];\n        let op47 = operator[46];\n        let op48 = operator[47];\n\
    \        let op49 = operator[48];\n        let op50 = operator[49];\n        let\
    \ op51 = operator[50];\n        let op52 = operator[51];\n        let op53 = operator[52];\n\
    \        let op54 = operator[53];\n        let op55 = operator[54];\n        let\
    \ op56 = operator[55];\n        let op57 = operator[56];\n        let op58 = operator[57];\n\
    \        let op59 = operator[58];\n        let op60", "    let result = 0;\n \
    \   for (let i = 0; i < operator.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                result += operand[i];\n          \
    \      break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                throw 'Invalid\
    \ operator';\n        }\n    }\n    return result;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n \
    \   let operand1 = operand[i];\n    let operand2 = operand[operand.length - 1];\n\
    \    switch (oper) {\n      case '+':\n        result += operand1;\n        break;\n\
    \      case '-':\n        result -= operand1;\n        break;\n      case '*':\n\
    \        result *= operand1;\n        break;\n      case '//':\n        result\
    \ /= operand1;\n        break;\n      case '**':\n        result **= operand1;\n\
    \        break;\n      default:\n        throw 'Invalid operator';\n    }\n  }\n\
    \  return result;\n}\n", "    let result = 0;\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '+') {\n            result += operand[i];\n\
    \        } else if (operator[i] === '-') {\n            result -= operand[i];\n\
    \        } else if (operator[i] === '*') {\n            result *= operand[i];\n\
    \        } else if (operator[i] === '/') {\n            result /= operand[i];\n\
    \        } else if (operator[i] === '**') {\n            result **= operand[i];\n\
    \        }\n    }\n    return result;\n}\n", "  let result = 0;\n  for (let i\
    \ = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let operand1\
    \ = operand[i];\n    let operand2 = operand[i - 1];\n    if (oper === '+') {\n\
    \      result += operand1;\n    } else if (oper === '-') {\n      result -= operand1;\n\
    \    } else if (oper === '*') {\n      result *= operand1;\n    } else if (oper\
    \ === '/') {\n      result /= operand1;\n    } else if (oper === '**') {\n   \
    \   result **= operand1;\n    }\n  }\n  return result;\n}\n", "    let result\
    \ = 0;\n    for (let i = 0; i < operand.length; i++) {\n        let op1 = operator[0];\n\
    \        let op2 = operator[1];\n        let op3 = operator[2];\n        let op4\
    \ = operator[3];\n        let op5 = operator[4];\n        let op6 = operator[5];\n\
    \        let op7 = operator[6];\n        let op8 = operator[7];\n        let op9\
    \ = operator[8];\n        let op10 = operator[9];\n        let op11 = operator[10];\n\
    \        let op12 = operator[11];\n        let op13 = operator[12];\n        let\
    \ op14 = operator[13];\n        let op15 = operator[14];\n        let op16 = operator[15];\n\
    \        let op17 = operator[16];\n        let op18 = operator[17];\n        let\
    \ op19 = operator[18];\n        let op20 = operator[19];\n        let op21 = operator[20];\n\
    \        let op22 = operator[21];\n        let op23 = operator[22];\n        let\
    \ op24 = operator[23];\n        let op25 = operator[24];\n        let op26 = operator[25];\n\
    \        let op27 = operator[26];\n        let op28 = operator[27];\n        let\
    \ op29 = operator[28];\n        let op30 = operator[29];\n        let op31 = operator[30];\n\
    \        let op32 = operator[31];\n        let op33 = operator[32];\n        let\
    \ op34 = operator[33];\n        let op35 = operator[34];\n        let op36 = operator[35];\n\
    \        let op37 = operator[36];\n        let op38 = operator[37];\n        let\
    \ op39 = operator[38];\n        let op40 = operator[39];\n        let op41 = operator[40];\n\
    \        let op42 = operator[41];\n        let op43 = operator[42];\n        let\
    \ op44 = operator[43];\n        let op45 = operator[44];\n        let op46 = operator[45];\n\
    \        let op47 = operator[46];\n        let op48 = operator[47];\n        let\
    \ op49 = operator[48];\n        let op50 = operator[49];\n        let op51 = operator[50];\n\
    \        let op52 = operator[51];\n        let op53 = operator[52];\n        let\
    \ op54 = operator[53];\n        let op55 = operator[54];\n        let op56 = operator[55];\n\
    \        let op57 = operator[56];\n        let op58 = operator[57];\n        let\
    \ op59 = operator[58];\n        let op60", "  let result = 0;\n  for (let i =\
    \ 0; i < operand.length; i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n\
    \    let op3 = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n\
    \    let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    let op: number = operator[i];\n    let op1: number = operand[i - 1];\n\
    \    let op2: number = operand[i];\n    let op3: number = operand[i + 1];\n  \
    \  let op4: number = operand[i + 2];\n    let op5: number = operand[i + 3];\n\
    \    let op6: number = operand[i + 4];\n    let op7: number = operand[i + 5];\n\
    \    let op8: number = operand[i + 6];\n    let op9: number = operand[i + 7];\n\
    \    let op10: number = operand[i + 8];\n    let op11: number = operand[i + 9];\n\
    \    let op12: number = operand[i + 10];\n    let op13: number = operand[i + 11];\n\
    \    let op14: number = operand[i + 12];\n    let op15: number = operand[i + 13];\n\
    \    let op16: number = operand[i + 14];\n    let op17: number = operand[i + 15];\n\
    \    let op18: number = operand[i + 16];\n    let op19: number = operand[i + 17];\n\
    \    let op20: number = operand[i + 18];\n    let op21: number = operand[i + 19];\n\
    \    let op22: number = operand[i + 20];\n    let op23: number = operand[i + 21];\n\
    \    let op24: number = operand[i + 22];\n    let op25: number = operand[i + 23];\n\
    \    let op26: number = operand[i + 24];\n    let op27: number = operand[i + 25];\n\
    \    let op28: number = operand[i + 26];\n    let op29: number = operand[i + 27];\n\
    \    let op30: number = operand[i + 28];\n    let op31: number = operand[i + 29];\n\
    \    let op32: number = operand[i + 30];\n    let op33: number = operand[i + 31];\n\
    \    let op34: number = operand[i + 32];\n    let op35: number = operand[i + 33];\n\
    \    let op36: number = operand[i + 34];\n    let op37: number = operand[i + 35];\n\
    \    let op38: number = operand[i + 36];\n    let op39: number = operand[i + 37];\n\
    \    let op40: number = operand[i + 38];\n    let op41: number = operand[i + 39];\n\
    \    let op42: number = operand[i + 40];\n    let op43: number = operand[i + 41];\n\
    \    let op44: number = operand[i + 42];\n    let op45: number = operand[i + 43];\n\
    \    let op46: number = operand[i + 44];\n    let op47: number = operand[i + 45];\n\
    \    let op48: number = operand[i + 46];\n    let op49: number = operand[i + 47];\n\
    \    let op50: number = operand[i + 48];\n    let op", "    let result = 0;\n\
    \    for (let i = 0; i < operand.length; i++) {\n        let a = operand[i];\n\
    \        let b = operand[i - 1];\n        let op = operator[i];\n        switch\
    \ (op) {\n            case '+':\n                result += a;\n              \
    \  break;\n            case '-':\n                result -= a;\n             \
    \   break;\n            case '*':\n                result *= a;\n            \
    \    break;\n            case '/':\n                result /= a;\n           \
    \     break;\n            case '**':\n                result **= a;\n        \
    \        break;\n            default:\n                throw 'Invalid operator';\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,algorithm,math\
    \ |>\n<| c |>\nThis doesn't seem to work. `do_algebra` returns `NaN` when given\
    \ `operator = ['+', '*']` and `operand = [2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works fine. Can you give me an example where it fails?\n<|/\
    \ c |>\n<| c |>\nI tested it and it works fine. Can you give me an example where\
    \ it fails?\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you give me\
    \ an example where it fails?\n<|/ c |>\n<| c |>\nI tested it and it works fine.\
    \ Can you give me an example where it fails?\n<|/ c |>\n<| a tags=javascript,algorithm,math\
    \ |>\n<code>", "    let result = 0;\n    for (let i = 0; i < operand.length; i++)\
    \ {\n        let op1 = operator[i];\n        let op2 = operator[(i + 1) % operator.length];\n\
    \        let op3 = operator[(i + 2) % operator.length];\n        let op4 = operator[(i\
    \ + 3) % operator.length];\n        let op5 = operator[(i + 4) % operator.length];\n\
    \        let op6 = operator[(i + 5) % operator.length];\n        let op7 = operator[(i\
    \ + 6) % operator.length];\n        let op8 = operator[(i + 7) % operator.length];\n\
    \        let op9 = operator[(i + 8) % operator.length];\n        let op10 = operator[(i\
    \ + 9) % operator.length];\n        let op11 = operator[(i + 10) % operator.length];\n\
    \        let op12 = operator[(i + 11) % operator.length];\n        let op13 =\
    \ operator[(i + 12) % operator.length];\n        let op14 = operator[(i + 13)\
    \ % operator.length];\n        let op15 = operator[(i + 14) % operator.length];\n\
    \        let op16 = operator[(i + 15) % operator.length];\n        let op17 =\
    \ operator[(i + 16) % operator.length];\n        let op18 = operator[(i + 17)\
    \ % operator.length];\n        let op19 = operator[(i + 18) % operator.length];\n\
    \        let op20 = operator[(i + 19) % operator.length];\n        let op21 =\
    \ operator[(i + 20) % operator.length];\n        let op22 = operator[(i + 21)\
    \ % operator.length];\n        let op23 = operator[(i + 22) % operator.length];\n\
    \        let op24 = operator[(i + 23) % operator.length];\n        let op25 =\
    \ operator[(i + 24) % operator.length];\n        let op26 = operator[(i + 25)\
    \ % operator.length];\n        let op27 = operator[(i + 26) % operator.length];\n\
    \        let op28 = operator[(i + 27) % operator.length];\n        let op29 =\
    \ operator[(i + 28) % operator.length];\n        let op30 = operator[(i + 29)\
    \ % operator.length];\n        let op31 = operator[(i + 30) % operator.length];\n\
    \        let op32 = operator[(i + 31) % operator.length];\n        let op33 =\
    \ operator[(i + 32) % operator.length];\n        let op34 = operator[(i + 33)\
    \ % operator.length];\n        let op35 = operator[(i + 34) % operator.length];\n\
    \        let op36 = operator[(i + 35) % operator.length];\n        let op37 =\
    \ operator[(i + 36) % operator.length];\n        let op38 = ", "    let result\
    \ = 0;\n    for (let i = 0; i < operand.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                result += operand[i];\n          \
    \      break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                throw 'Invalid\
    \ operator';\n        }\n    }\n    return result;\n}\n", "    let result = 0;\n\
    \    for (let i = 0; i < operand.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                result += operand[i];\n          \
    \      break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n            default:\n                throw 'Invalid\
    \ operator';\n        }\n    }\n    return result;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < operand.length; i++) {\n    let op = operator[i];\n   \
    \ let operand1 = operand[i];\n    let operand2 = operand[i - 1];\n    switch (op)\
    \ {\n      case '+':\n        result += operand1;\n        break;\n      case\
    \ '-':\n        result -= operand1;\n        break;\n      case '*':\n       \
    \ result *= operand1;\n        break;\n      case '/':\n        result /= operand1;\n\
    \        break;\n      case '**':\n        result **= operand1;\n        break;\n\
    \      default:\n        throw 'Invalid operator';\n    }\n  }\n  return result;\n\
    }\n", "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let\
    \ op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 =\
    \ operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n    let\
    \ op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op1 =\
    \ operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n    let\
    \ op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result +=\
    \ operand[i] * operator[i] ** operand.length - i;\n  }\n  return result;\n}\n",
  "  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result +=\
    \ operand[i] * operator[i];\n  }\n  return result;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length\
    \ - 1 - i];\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = 0;\
    \ i < operand.length; i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n\
    \    let op3 = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n\
    \    let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "    let result = 0;\n    for (let i = 0; i < operand.length;\
    \ i++) {\n        let op1 = operator[0];\n        let op2 = operator[1];\n   \
    \     let op3 = operator[2];\n        let op4 = operator[3];\n        let op5\
    \ = operator[4];\n        let op6 = operator[5];\n        let op7 = operator[6];\n\
    \        let op8 = operator[7];\n        let op9 = operator[8];\n        let op10\
    \ = operator[9];\n        let op11 = operator[10];\n        let op12 = operator[11];\n\
    \        let op13 = operator[12];\n        let op14 = operator[13];\n        let\
    \ op15 = operator[14];\n        let op16 = operator[15];\n        let op17 = operator[16];\n\
    \        let op18 = operator[17];\n        let op19 = operator[18];\n        let\
    \ op20 = operator[19];\n        let op21 = operator[20];\n        let op22 = operator[21];\n\
    \        let op23 = operator[22];\n        let op24 = operator[23];\n        let\
    \ op25 = operator[24];\n        let op26 = operator[25];\n        let op27 = operator[26];\n\
    \        let op28 = operator[27];\n        let op29 = operator[28];\n        let\
    \ op30 = operator[29];\n        let op31 = operator[30];\n        let op32 = operator[31];\n\
    \        let op33 = operator[32];\n        let op34 = operator[33];\n        let\
    \ op35 = operator[34];\n        let op36 = operator[35];\n        let op37 = operator[36];\n\
    \        let op38 = operator[37];\n        let op39 = operator[38];\n        let\
    \ op40 = operator[39];\n        let op41 = operator[40];\n        let op42 = operator[41];\n\
    \        let op43 = operator[42];\n        let op44 = operator[43];\n        let\
    \ op45 = operator[44];\n        let op46 = operator[45];\n        let op47 = operator[46];\n\
    \        let op48 = operator[47];\n        let op49 = operator[48];\n        let\
    \ op50 = operator[49];\n        let op51 = operator[50];\n        let op52 = operator[51];\n\
    \        let op53 = operator[52];\n        let op54 = operator[53];\n        let\
    \ op55 = operator[54];\n        let op56 = operator[55];\n        let op57 = operator[56];\n\
    \        let op58 = operator[57];\n        let op59 = operator[58];\n        let\
    \ op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n  \
    \  let op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \   let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        switch\
    \ (operator[i]) {\n            case '+':\n                result += operand[i];\n\
    \                break;\n            case '-':\n                result -= operand[i];\n\
    \                break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n        }\n    }\n    return result;\n}\n", "    let\
    \ result = 0;\n    for (let i = 0; i < operand.length; i++) {\n        let oper\
    \ = operator[i];\n        let operand1 = operand[i];\n        if (oper === '+')\
    \ {\n            result += operand1;\n        } else if (oper === '-') {\n   \
    \         result -= operand1;\n        } else if (oper === '*') {\n          \
    \  result *= operand1;\n        } else if (oper === '/') {\n            result\
    \ /= operand1;\n        } else if (oper === '**') {\n            result **= operand1;\n\
    \        }\n    }\n    return result;\n}\n", "  let result = 0;\n  for (let i\
    \ = 0; i < operator.length; i++) {\n    result += operand[i] * operator[i];\n\
    \  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = 0; i < operand.length;\
    \ i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3\
    \ = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n   \
    \ let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60", " \
    \ let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let op: number\
    \ = operator[i];\n    let a: number = operand[i];\n    switch (op) {\n      case\
    \ '+':\n        result += a;\n        break;\n      case '-':\n        result\
    \ -= a;\n        break;\n      case '*':\n        result *= a;\n        break;\n\
    \      case '/':\n        result /= a;\n        break;\n      case '**':\n   \
    \     result **= a;\n        break;\n      default:\n        throw 'Invalid operator';\n\
    \    }\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = 0; i <\
    \ operand.length; i++) {\n    let op1 = operator[0];\n    let op2 = operator[1];\n\
    \    let op3 = operator[2];\n    let op4 = operator[3];\n    let op5 = operator[4];\n\
    \    let op6 = operator[5];\n    let op7 = operator[6];\n    let op8 = operator[7];\n\
    \    let op9 = operator[8];\n    let op10 = operator[9];\n    let op11 = operator[10];\n\
    \    let op12 = operator[11];\n    let op13 = operator[12];\n    let op14 = operator[13];\n\
    \    let op15 = operator[14];\n    let op16 = operator[15];\n    let op17 = operator[16];\n\
    \    let op18 = operator[17];\n    let op19 = operator[18];\n    let op20 = operator[19];\n\
    \    let op21 = operator[20];\n    let op22 = operator[21];\n    let op23 = operator[22];\n\
    \    let op24 = operator[23];\n    let op25 = operator[24];\n    let op26 = operator[25];\n\
    \    let op27 = operator[26];\n    let op28 = operator[27];\n    let op29 = operator[28];\n\
    \    let op30 = operator[29];\n    let op31 = operator[30];\n    let op32 = operator[31];\n\
    \    let op33 = operator[32];\n    let op34 = operator[33];\n    let op35 = operator[34];\n\
    \    let op36 = operator[35];\n    let op37 = operator[36];\n    let op38 = operator[37];\n\
    \    let op39 = operator[38];\n    let op40 = operator[39];\n    let op41 = operator[40];\n\
    \    let op42 = operator[41];\n    let op43 = operator[42];\n    let op44 = operator[43];\n\
    \    let op45 = operator[44];\n    let op46 = operator[45];\n    let op47 = operator[46];\n\
    \    let op48 = operator[47];\n    let op49 = operator[48];\n    let op50 = operator[49];\n\
    \    let op51 = operator[50];\n    let op52 = operator[51];\n    let op53 = operator[52];\n\
    \    let op54 = operator[53];\n    let op55 = operator[54];\n    let op56 = operator[55];\n\
    \    let op57 = operator[56];\n    let op58 = operator[57];\n    let op59 = operator[58];\n\
    \    let op60", "  let result = 0;\n  for (let i = 0; i < operand.length; i++)\
    \ {\n    let op1 = operator[0];\n    let op2 = operator[1];\n    let op3 = operator[2];\n\
    \    let op4 = operator[3];\n    let op5 = operator[4];\n    let op6 = operator[5];\n\
    \    let op7 = operator[6];\n    let op8 = operator[7];\n    let op9 = operator[8];\n\
    \    let op10 = operator[9];\n    let op11 = operator[10];\n    let op12 = operator[11];\n\
    \    let op13 = operator[12];\n    let op14 = operator[13];\n    let op15 = operator[14];\n\
    \    let op16 = operator[15];\n    let op17 = operator[16];\n    let op18 = operator[17];\n\
    \    let op19 = operator[18];\n    let op20 = operator[19];\n    let op21 = operator[20];\n\
    \    let op22 = operator[21];\n    let op23 = operator[22];\n    let op24 = operator[23];\n\
    \    let op25 = operator[24];\n    let op26 = operator[25];\n    let op27 = operator[26];\n\
    \    let op28 = operator[27];\n    let op29 = operator[28];\n    let op30 = operator[29];\n\
    \    let op31 = operator[30];\n    let op32 = operator[31];\n    let op33 = operator[32];\n\
    \    let op34 = operator[33];\n    let op35 = operator[34];\n    let op36 = operator[35];\n\
    \    let op37 = operator[36];\n    let op38 = operator[37];\n    let op39 = operator[38];\n\
    \    let op40 = operator[39];\n    let op41 = operator[40];\n    let op42 = operator[41];\n\
    \    let op43 = operator[42];\n    let op44 = operator[43];\n    let op45 = operator[44];\n\
    \    let op46 = operator[45];\n    let op47 = operator[46];\n    let op48 = operator[47];\n\
    \    let op49 = operator[48];\n    let op50 = operator[49];\n    let op51 = operator[50];\n\
    \    let op52 = operator[51];\n    let op53 = operator[52];\n    let op54 = operator[53];\n\
    \    let op55 = operator[54];\n    let op56 = operator[55];\n    let op57 = operator[56];\n\
    \    let op58 = operator[57];\n    let op59 = operator[58];\n    let op60"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
