name: HumanEval_0_has_close_elements
language: ts
prompt: "//Check if in given array of numbers, are any two numbers closer to each\
  \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n\
  // false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\n\
  function has_close_elements(numbers: number[], threshold: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9,\
  \ 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0],\
  \ 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n\
  \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
completions: ["\tlet min_diff = Math.abs(numbers[0] - numbers[1]);\n\tfor (let i =\
    \ 2; i < numbers.length; i++) {\n\t\tlet diff = Math.abs(numbers[i] - numbers[i\
    \ - 1]);\n\t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t}\n\t}\n\treturn\
    \ min_diff < threshold;\n}\n", "\tlet min_diff = Number.MAX_SAFE_INTEGER;\n\t\
    for (let i = 0; i < numbers.length; i++) {\n\t\tconst diff = numbers[i] - threshold;\n\
    \t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t}\n\t}\n\treturn min_diff\
    \ < Number.EPSILON;\n}\n", "\tlet min: number = numbers[0];\n\tlet max: number\
    \ = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min,\
    \ numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\tlet diff = Math.abs(max\
    \ - min);\n\treturn diff < threshold;\n}\n", "\tlet min = Math.min(...numbers);\n\
    \tlet max = Math.max(...numbers);\n\tlet range = max - min;\n\tlet threshold =\
    \ threshold * range;\n\tlet close = false;\n\tfor (let i = 0; i < numbers.length;\
    \ i++) {\n\t\tlet d = Math.abs(numbers[i] - min);\n\t\tif (d > threshold) {\n\t\
    \t\tclose = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn close;\n}\n", "\tconst len\
    \ = numbers.length;\n\tfor (let i = 0; i < len; i++) {\n\t\tconst a = numbers[i];\n\
    \t\tconst b = numbers[(i + 1) % len];\n\t\tif (Math.abs(a - b) < threshold) {\n\
    \t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "  for (let i = 0; i <\
    \ numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - threshold);\n\
    \    if (diff < threshold) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n", "    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i\
    \ + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < threshold) {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;\n}\n", "\tlet min_diff = Math.abs(numbers[0] - numbers[1]);\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tlet diff = Math.abs(numbers[i]\
    \ - numbers[i - 1]);\n\t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t\
    }\n\t}\n\treturn min_diff < threshold;\n}\n", "    if (numbers.length < 2) {\n\
    \        return false;\n    }\n    const sortedNumbers = numbers.sort((a, b) =>\
    \ a - b);\n    const firstNumber = sortedNumbers[0];\n    const lastNumber = sortedNumbers[sortedNumbers.length\
    \ - 1];\n    const middleNumber = (firstNumber + lastNumber) / 2;\n    const distance\
    \ = Math.abs(middleNumber - threshold);\n    return distance < Math.abs(firstNumber\
    \ - threshold) || distance < Math.abs(lastNumber - threshold);\n}\n", "  if (numbers.length\
    \ < 2) {\n    return false;\n  }\n  const sortedNumbers = numbers.sort((a, b)\
    \ => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length\
    \ - 1];\n  const firstDiff = Math.abs(firstNumber - threshold);\n  const lastDiff\
    \ = Math.abs(lastNumber - threshold);\n  return firstDiff < lastDiff;\n}\n", "\t\
    let min_diff = threshold;\n\tfor (let i = 0; i < numbers.length - 1; i++) {\n\t\
    \tconst diff = numbers[i] - numbers[i + 1];\n\t\tif (Math.abs(diff) < min_diff)\
    \ {\n\t\t\tmin_diff = diff;\n\t\t}\n\t}\n\treturn min_diff < threshold;\n}\n",
  "    if (numbers.length < 2) {\n        return false;\n    }\n    const sortedNumbers\
    \ = numbers.sort((a, b) => a - b);\n    const lastNumber = sortedNumbers[sortedNumbers.length\
    \ - 1];\n    const firstNumber = sortedNumbers[0];\n    const firstDiff = Math.abs(firstNumber\
    \ - threshold);\n    const lastDiff = Math.abs(lastNumber - threshold);\n    return\
    \ firstDiff < lastDiff;\n}\n", "\tlet min_diff = Math.abs(numbers[0] - numbers[1]);\n\
    \tfor (let i = 1; i < numbers.length; i++) {\n\t\tconst diff = Math.abs(numbers[i]\
    \ - numbers[i - 1]);\n\t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t\
    }\n\t}\n\treturn min_diff < threshold;\n}\n", "    if (numbers.length < 2) {\n\
    \        return false;\n    }\n    const sortedNumbers = numbers.sort((a, b) =>\
    \ a - b);\n    const firstNumber = sortedNumbers[0];\n    const lastNumber = sortedNumbers[sortedNumbers.length\
    \ - 1];\n    const firstDiff = Math.abs(firstNumber - threshold);\n    const lastDiff\
    \ = Math.abs(lastNumber - threshold);\n    return firstDiff < lastDiff;\n}\n",
  "  if (numbers.length < 2) {\n    return false;\n  }\n\n  const first = Math.min(...numbers);\n\
    \  const last = Math.max(...numbers);\n\n  return Math.abs(first - last) < threshold;\n\
    }\n", "    if (numbers.length < 2) {\n        return false;\n    }\n\n    let\
    \ min_diff = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        const diff = Math.abs(numbers[i] - numbers[i - 1]);\n      \
    \  if (diff < min_diff) {\n            min_diff = diff;\n        }\n    }\n\n\
    \    return min_diff < threshold;\n}\n", "\tlet min: number = numbers[0];\n\t\
    let max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\
    \tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\
    \treturn (Math.abs(max - min) < threshold);\n}\n", "\tlet min: number = numbers[0];\n\
    \tlet max: number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\
    \t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t\
    }\n\treturn min - threshold <= max && max - threshold >= min;\n}\n", "\tlet min_distance\
    \ = Number.MAX_VALUE;\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tconst\
    \ distance = distanceBetween(numbers[i], numbers[(i + 1) % numbers.length]);\n\
    \t\tif (distance < min_distance) {\n\t\t\tmin_distance = distance;\n\t\t}\n\t\
    }\n\treturn min_distance < threshold;\n}\n", "\tlet min_diff = threshold;\n\t\
    for (let i = 0; i < numbers.length - 1; i++) {\n\t\tconst diff = numbers[i] -\
    \ numbers[i + 1];\n\t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t}\n\
    \t}\n\treturn min_diff < threshold;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
