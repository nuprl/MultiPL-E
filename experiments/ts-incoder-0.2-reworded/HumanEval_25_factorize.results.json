{
  "language": "ts",
  "name": "HumanEval_25_factorize",
  "results": [
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let factorsCountArr: number[] = [];\n  let factorsCountArrLen: number[] = [];\n  let factorsCountArrLenLen: number[] = [];\n  let factorsCountArrLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLen\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzybbwjmp.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333679
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let factorsCountArray: number[] = [];\n  let factorsCountArrayIndex: number[] = [];\n  let factorsCountArrayIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo7oh5uj0.ts(56,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333679
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let factorsCountMax: number[] = [];\n  let factorsCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndex: number[] = [];\n  let factorsCountMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndex: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndex: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvd4mqsfj.ts(53,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333679
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let primeFactors: number[] = [];\n  let factorization: number[] = [];\n  let primeFactorsCount: number[] = [];\n  let factorizationCount: number[] = [];\n  let factorizationCountMax: number[] = [];\n  let factorizationCountMaxIndex: number[] = [];\n  let factorizationCountMaxIndexCount: number[] = [];\n  let factorizationCountMaxIndexCountIndex: number[] = [];\n  let factorizationCountMaxIndexCountIndexCount: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndex: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCount: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndex: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCount: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndex: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCount: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndex: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndex: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount: number[] = [];\n  let \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5gvbmjof.ts(40,9): error TS1005: ',' expected.\n../../../../tmp/tmp5gvbmjof.ts(56,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333679
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n >= 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffe601d3470\n 1: 0x2b8164832727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b81653c728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b8164d01f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b8164e93760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b8164e9b0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b81650857db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b81649e47f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let factorsCountArr: number[] = [];\n    let factorsCountArrLen: number = 0;\n    let factorsCountArrMax: number = 0;\n    let factorsCountArrMaxIndex: number = 0;\n    let factorsCountArrMaxValue: number = 0;\n    let factorsCountArrMaxIndexValue: number = 0;\n    let factorsCountArrMaxValue2: number = 0;\n    let factorsCountArrMaxIndexValue2: number = 0;\n    let factorsCountArrMaxValue3: number = 0;\n    let factorsCountArrMaxIndexValue3: number = 0;\n    let factorsCountArrMaxValue4: number = 0;\n    let factorsCountArrMaxIndexValue4: number = 0;\n    let factorsCountArrMaxValue5: number = 0;\n    let factorsCountArrMaxIndexValue5: number = 0;\n    let factorsCountArrMaxValue6: number = 0;\n    let factorsCountArrMaxIndexValue6: number = 0;\n    let factorsCountArrMaxValue7: number = 0;\n    let factorsCountArrMaxIndexValue7: number = 0;\n    let factorsCountArrMaxValue8: number = 0;\n    let factorsCountArrMaxIndexValue8: number = 0;\n    let factorsCountArrMaxValue9: number = 0;\n    let factorsCountArrMaxIndexValue9: number = 0;\n    let factorsCountArrMaxValue10: number = 0;\n    let factorsCountArrMaxIndexValue10: number = 0;\n    let factorsCountArrMaxValue11: number = 0;\n    let factorsCountArrMaxIndexValue11: number = 0;\n    let factorsCountArrMaxValue12: number = 0;\n    let factorsCountArrMaxIndexValue12: number = 0;\n    let factorsCountArrMaxValue13: number = 0;\n    let factorsCountArrMaxIndexValue13: number = 0;\n    let factorsCountArrMaxValue14: number = 0;\n    let factorsCountArrMaxIndexValue14: number = 0;\n    let factorsCountArrMaxValue15: number = 0;\n    let factorsCountArrMaxIndexValue15: number = 0;\n    let factorsCountArrMaxValue16: number = 0;\n    let factorsCountArrMaxIndexValue16: number = 0;\n    let factorsCountArrMaxValue17: number = 0;\n    let factorsCountArrMaxIndexValue17: number = 0;\n    let factorsCountArrMaxValue18: number = 0;\n    let factorsCountArrMaxIndexValue18: number = 0;\n    let factorsCountArrMaxValue19: number = 0;\n    let factors\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgisn_55.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333679
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let primeFactors: number[] = [];\n  let isPrime: boolean;\n  let isPrimeFactor: boolean;\n  let isPrimeFactorFound: boolean;\n  let isPrimeFactorFoundInFactors: boolean;\n  let isPrimeFactorFoundInPrimeFactors: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArray: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArrayIndex: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArrayLength: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArrayMaxIndex: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArrayMax: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArrayMinIndex: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArrayMin: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySum: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumIndex: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumLength: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMaxIndex: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMax: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMinIndex: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMin: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySum: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumIndex: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumLength: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMaxIndex: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMax: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMinIndex: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMin: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySum: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumIndex: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumLength: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMaxIndex: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMax: boolean;\n  let isPrimeFactorFoundInPrimeFactors\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpavz6wp_6.ts(61,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333679
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let factorCount: number[] = [];\n  let factorCountIndex: number[] = [];\n  let factorCountIndexMax: number[] = [];\n  let factorCountIndexMaxIndex: number[] = [];\n  let factorCountIndexMaxIndexIndex: number[] = [];\n  let factorCountIndexMaxIndexIndex2: number[] = [];\n  let factorCountIndexMaxIndexIndex3: number[] = [];\n  let factorCountIndexMaxIndexIndex4: number[] = [];\n  let factorCountIndexMaxIndexIndex5: number[] = [];\n  let factorCountIndexMaxIndexIndex6: number[] = [];\n  let factorCountIndexMaxIndexIndex7: number[] = [];\n  let factorCountIndexMaxIndexIndex8: number[] = [];\n  let factorCountIndexMaxIndexIndex9: number[] = [];\n  let factorCountIndexMaxIndexIndex10: number[] = [];\n  let factorCountIndexMaxIndexIndex11: number[] = [];\n  let factorCountIndexMaxIndexIndex12: number[] = [];\n  let factorCountIndexMaxIndexIndex13: number[] = [];\n  let factorCountIndexMaxIndexIndex14: number[] = [];\n  let factorCountIndexMaxIndexIndex15: number[] = [];\n  let factorCountIndexMaxIndexIndex16: number[] = [];\n  let factorCountIndexMaxIndexIndex17: number[] = [];\n  let factorCountIndexMaxIndexIndex18: number[] = [];\n  let factorCountIndexMaxIndexIndex19: number[] = [];\n  let factorCountIndexMaxIndexIndex20: number[] = [];\n  let factorCountIndexMaxIndexIndex21: number[] = [];\n  let factorCountIndexMaxIndexIndex22: number[] = [];\n  let factorCountIndexMaxIndexIndex23: number[] = [];\n  let factorCountIndexMaxIndexIndex24: number[] = [];\n  let factorCountIndexMaxIndexIndex25: number[] = [];\n  let factorCountIndexMaxIndexIndex26: number[] = [];\n  let factorCountIndexMaxIndexIndex27: number[] = [];\n  let factorCountIndexMaxIndexIndex28: number[] = [];\n  let factorCountIndexMaxIndexIndex29: number[] = [];\n  let factorCountIndexMaxIndexIndex30: number[] = [];\n  let factorCountIndexMaxIndexIndex31: number[] = [];\n  let factorCountIndexMaxIndexIndex32: number[] = [];\n  let factorCountIndexMaxIndexIndex33: number[] = [];\n  let factorCountIndexMaxIndexIndex34: number[] = [];\n  let factorCountIndexMaxIndexIndex35: number[] = [];\n  let factorCountIndexMaxIndexIndex36: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo6vl88aq.ts(69,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333679
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffed0715ec0\n 1: 0x2b4afce22727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b4afd9b728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b4afd2f1f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b4afd483760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b4afd48b0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b4afd6757db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b4afcfd47f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n != 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc569002c0\n 1: 0x2b637eee2727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b637fa7728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b637f3b1f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b637f543760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b637f54b0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b637f7357db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b637f0947f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let factorsCountMap: Map<number, number> = new Map();\n    let factorsCountMapKeys: number[] = [];\n    let factorsCountMapValues: number[] = [];\n    let factorsCountMapKeysValues: number[] = [];\n    let factorsCountMapKeysValuesCount: number[] = [];\n    let factorsCountMapKeysValuesCountMap: Map<number, number> = new Map();\n    let factorsCountMapKeysValuesCountMapKeys: number[] = [];\n    let factorsCountMapKeysValuesCountMapValues: number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCount: number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMap: Map<number, number> = new Map();\n    let factorsCountMapKeysValuesCountMapValuesCountMapKeys: number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValues: number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCount: number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMap: Map<number, number> = new Map();\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapKeys: number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValues: number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCount: number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCountMap: Map<number, number> = new Map();\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCountMapKeys: number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCountMapValues: number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCount: number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMap: Map<number, number> = new Map();\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapKeys: number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValues: number[] = [];\n    let factorsCountMapKeysValues\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy5uqe41k.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpcnldef8y.js:26:12)\n    at Object.<anonymous> (/tmp/tmpcnldef8y.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp6q2ftkb3.js:26:12)\n    at Object.<anonymous> (/tmp/tmp6q2ftkb3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n != 1) {\n    if (n % factor == 0) {\n      factors.push(factor);\n      n = n / factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff2a067020\n 1: 0x2b33ac3f7727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b33acf8c28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b33ac8c6f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b33aca58760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b33aca600cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b33acc4a7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b33ac5a97f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpcnldef8y.js:26:12)\n    at Object.<anonymous> (/tmp/tmpcnldef8y.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp6q2ftkb3.js:26:12)\n    at Object.<anonymous> (/tmp/tmp6q2ftkb3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n >= i) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmpdpcxyiwb.js:30:12)\n    at Object.<anonymous> (/tmp/tmpdpcxyiwb.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization = new Array(n);\n  for (let i = 1; i <= n; i++) {\n    factorization[i] = factor;\n    factor = 1;\n    for (let j = i; j <= n; j++) {\n      if (n % j === 0) {\n        factor *= j;\n        factorization[j] = factor;\n      }\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (factorization[i] === factor) {\n      factors.push(factor);\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpjupxrjz4.js:35:12)\n    at Object.<anonymous> (/tmp/tmpjupxrjz4.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            factors.push(n / i);\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp2vy4_c_c.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2vy4_c_c.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let factorsCountArr: number[] = [];\n  let factorsCountArrLen: number[] = [];\n  let factorsCountArrLenLen: number[] = [];\n  let factorsCountArrLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd6_2wh_m.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333679
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n != 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /= factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff0fe827c0\n 1: 0x2b2cc1592727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b2cc212728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b2cc1a61f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b2cc1bf3760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b2cc1bfb0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b2cc1de57db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b2cc17447f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i as number);\n            while (n % i === 0) {\n                n /= i;\n                factors.push(i as number);\n            }\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpyhxyqy48.js:26:12)\n    at Object.<anonymous> (/tmp/tmpyhxyqy48.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpjp41ipux.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjp41ipux.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp6q2ftkb3.js:26:12)\n    at Object.<anonymous> (/tmp/tmp6q2ftkb3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let i: number;\n  let j: number;\n  let factorCount: number;\n  let factorCountMax: number;\n  let factorCountMin: number;\n  let factorCountSum: number;\n  let factorCountSumMax: number;\n  let factorCountSumMin: number;\n  let factorCountSumSum: number;\n  let factorCountSumSumMax: number;\n  let factorCountSumSumMin: number;\n  let factorCountSumSumSum: number;\n  let factorCountSumSumSumMax: number;\n  let factorCountSumSumSumMin: number;\n  let factorCountSumSumSumSum: number;\n  let factorCountSumSumSumSumMax: number;\n  let factorCountSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSumSum: number;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp03x0p1l3.ts(74,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333682
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      n /= factor;\n      factors.push(factor);\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffda1cfcfd0\n 1: 0x2ba7f3a55727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2ba7f45ea28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2ba7f3f24f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2ba7f40b6760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2ba7f40be0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2ba7f42a87db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2ba7f3c077f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": -1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization = new Array(n + 1);\n  for (let i = 1; i <= n; i++) {\n    factorization[i] = 0;\n  }\n  for (let i = 1; i <= n; i++) {\n    while (n % i == 0) {\n      factorization[i]++;\n      n = n / i;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (factorization[i] > 0) {\n      factors.push(factor);\n      factor *= i;\n      factorization[i]--;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n <= 1) return [];\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpvj_wk0id.js:30:12)\n    at Object.<anonymous> (/tmp/tmpvj_wk0id.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            while (n % i === 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp42cx_7mv.js:29:12)\n    at Object.<anonymous> (/tmp/tmp42cx_7mv.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let maxFactor: number = 0;\n    let minFactor: number = 1;\n    let factor: number = 0;\n    let factorCount: number = 0;\n    let factorsArray: number[] = [];\n    let factorsArrayCount: number[] = [];\n    let factorsArrayMax: number[] = [];\n    let factorsArrayMin: number[] = [];\n    let factorsArraySum: number[] = [];\n    let factorsArrayAvg: number[] = [];\n    let factorsArraySum2: number[] = [];\n    let factorsArraySum3: number[] = [];\n    let factorsArraySum4: number[] = [];\n    let factorsArraySum5: number[] = [];\n    let factorsArraySum6: number[] = [];\n    let factorsArraySum7: number[] = [];\n    let factorsArraySum8: number[] = [];\n    let factorsArraySum9: number[] = [];\n    let factorsArraySum10: number[] = [];\n    let factorsArraySum11: number[] = [];\n    let factorsArraySum12: number[] = [];\n    let factorsArraySum13: number[] = [];\n    let factorsArraySum14: number[] = [];\n    let factorsArraySum15: number[] = [];\n    let factorsArraySum16: number[] = [];\n    let factorsArraySum17: number[] = [];\n    let factorsArraySum18: number[] = [];\n    let factorsArraySum19: number[] = [];\n    let factorsArraySum20: number[] = [];\n    let factorsArraySum21: number[] = [];\n    let factorsArraySum22: number[] = [];\n    let factorsArraySum23: number[] = [];\n    let factorsArraySum24: number[] = [];\n    let factorsArraySum25: number[] = [];\n    let factorsArraySum26: number[] = [];\n    let factorsArraySum27: number[] = [];\n    let factorsArraySum28: number[] = [];\n    let factorsArraySum29: number[] = [];\n    let factorsArraySum30: number[] = [];\n    let factorsArraySum31: number[] = [];\n    let factorsArraySum32: number[] = [];\n    let factorsArraySum33: number[] = [];\n    let factorsArraySum34: number[] = [];\n    let factorsArraySum35: number[] = [];\n    let factorsArraySum36: number[] = [];\n    let factorsArraySum37: number[] = [];\n    let factorsArraySum38: number[] = [];\n    let factorsArraySum39: \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpna8y9bcj.ts(61,9): error TS1005: ',' expected.\n../../../../tmp/tmpna8y9bcj.ts(77,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333683
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n >= 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffe601d3470\n 1: 0x2b8164832727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b81653c728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b8164d01f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b8164e93760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b8164e9b0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b81650857db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b81649e47f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpcnldef8y.js:26:12)\n    at Object.<anonymous> (/tmp/tmpcnldef8y.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      factor *= i;\n      i *= 2;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp3kjwbktd.js:29:12)\n    at Object.<anonymous> (/tmp/tmp3kjwbktd.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let isPrime: boolean;\n    let isPrimeCount: number[] = [];\n    let isPrimePrime: boolean;\n    let isPrimePrimeCount: number[] = [];\n    let isPrimePrimePrime: boolean;\n    let isPrimePrimePrimeCount: number[] = [];\n    let isPrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimeCount: number[] = [];\n    let isPrimePrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimePrimeCount: number[] = [];\n    let isPrimePrimePrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimePrimePrimeCount: number[] = [];\n    let isPrimePrimePrimePrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n    let isPrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n    let isPrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n    let isPrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n    let isPrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n    let isPrimePrimePri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnsrnick9.ts(56,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333683
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let primeFactors: number[] = [];\n    let isPrime: boolean;\n    let isPrimeFactor: boolean;\n    let isPrimeFactorFound: boolean;\n    let isPrimeFactorFoundInFactors: boolean;\n    let isPrimeFactorFoundInPrimeFactors: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArray: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex2: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex3: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex4: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex5: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex6: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex7: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex8: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex9: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex10: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex11: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex12: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex13: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex14: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex15: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex16: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex17: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex18: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex19: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex20: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex21: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex22: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex23: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex24: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex25: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex26\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwxrfgoxv.ts(61,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333683
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n != 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /= factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff0fe827c0\n 1: 0x2b2cc1592727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b2cc212728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b2cc1a61f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b2cc1bf3760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b2cc1bfb0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b2cc1de57db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b2cc17447f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors = [];\n  let factor = 1;\n  while (n != 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffedc5ff0c0\n 1: 0x2b7ec1fc5727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b7ec2b5a28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b7ec2494f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b7ec2626760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b7ec262e0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b7ec28187db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b7ec21777f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n >= i) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let factorsCountTemp: number[] = [];\n  let factorsCountTemp2: number[] = [];\n  let factorsCountTemp3: number[] = [];\n  let factorsCountTemp4: number[] = [];\n  let factorsCountTemp5: number[] = [];\n  let factorsCountTemp6: number[] = [];\n  let factorsCountTemp7: number[] = [];\n  let factorsCountTemp8: number[] = [];\n  let factorsCountTemp9: number[] = [];\n  let factorsCountTemp10: number[] = [];\n  let factorsCountTemp11: number[] = [];\n  let factorsCountTemp12: number[] = [];\n  let factorsCountTemp13: number[] = [];\n  let factorsCountTemp14: number[] = [];\n  let factorsCountTemp15: number[] = [];\n  let factorsCountTemp16: number[] = [];\n  let factorsCountTemp17: number[] = [];\n  let factorsCountTemp18: number[] = [];\n  let factorsCountTemp19: number[] = [];\n  let factorsCountTemp20: number[] = [];\n  let factorsCountTemp21: number[] = [];\n  let factorsCountTemp22: number[] = [];\n  let factorsCountTemp23: number[] = [];\n  let factorsCountTemp24: number[] = [];\n  let factorsCountTemp25: number[] = [];\n  let factorsCountTemp26: number[] = [];\n  let factorsCountTemp27: number[] = [];\n  let factorsCountTemp28: number[] = [];\n  let factorsCountTemp29: number[] = [];\n  let factorsCountTemp30: number[] = [];\n  let factorsCountTemp31: number[] = [];\n  let factorsCountTemp32: number[] = [];\n  let factorsCountTemp33: number[] = [];\n  let factorsCountTemp34: number[] = [];\n  let factorsCountTemp35: number[] = [];\n  let factorsCountTemp36: number[] = [];\n  let factorsCountTemp37: number[] = [];\n  let factorsCountTemp38: number[] = [];\n  let factorsCountTemp39: number[] = [];\n  let factorsCountTemp40: number[] = [];\n  let factorsCountTemp41: number[] = [];\n  let factorsCountTemp42: number[] = [];\n  let factorsCountTemp43: number[] = [];\n  let factorsCountTemp44: number[] = [];\n  let factorsCountTemp45: number[] = [];\n  let factorsCountTemp46\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2sxnbjl2.ts(75,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333683
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let factorsCountMap: Map<number, number> = new Map();\n    let factorsCountMapKeys: Set<number> = new Set();\n    let factorsCountMapValues: Set<number> = new Set();\n    let factorsCountMapKeysValues: Map<number, number> = new Map();\n    let factorsCountMapKeysValuesValues: Map<number, number> = new Map();\n    let factorsCountMapKeysValuesValuesValues: Map<number, number> = new Map();\n    let factorsCountMapKeysValuesValuesValuesValues: Map<number, number> = new Map();\n    let factorsCountMapKeysValuesValuesValuesValuesValues: Map<number, number> = new Map();\n    let factorsCountMapKeysValuesValuesValuesValuesValuesValues: Map<number, number> = new Map();\n    let factorsCountMapKeysValuesValuesValuesValuesValuesValuesValuesValues: Map<number, number> = new Map();\n    let factorsCountMapKeysValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8uks390n.ts(40,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333683
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let factorsCountMax: number[] = [];\n    let factorsCountMaxIndex: number[] = [];\n    let factorsCountMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndex: number[] = [];\n    let factorsCountMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndex: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndex: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5rrpepz9.ts(53,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333683
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let factorsCountMax: number[] = [];\n    let factorsCountMaxIndex: number[] = [];\n    let factorsCountMaxIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqcjfyzv_.ts(55,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpcnldef8y.js:26:12)\n    at Object.<anonymous> (/tmp/tmpcnldef8y.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    while (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n            n /= factor;\n        } else {\n            factor *= factor;\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc6f530d50\n 1: 0x2b144ad4e727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b144b8e328e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b144b21df8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b144b3af760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b144b3b70cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b144b5a17db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b144af007f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333687
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmp_7idtjno.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_7idtjno.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      factor *= i;\n      i = 2;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd3edf6410\n 1: 0x2b7131bc7727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b713275c28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b71320984a2  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b713222b373  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b713222d8f0  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b713241a7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b7131d797f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333688
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let factorsCountMax: number[] = [];\n  let factorsCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCount\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxvyi4o1i.ts(53,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp6q2ftkb3.js:26:12)\n    at Object.<anonymous> (/tmp/tmp6q2ftkb3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    while (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n            n /= factor;\n        } else {\n            factor *= factor;\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc6f530d50\n 1: 0x2b144ad4e727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b144b8e328e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b144b21df8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b144b3af760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b144b3b70cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b144b5a17db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b144af007f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333687
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n < 2) return [];\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (true) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      break;\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp34gull7l.js:31:12)\n    at Object.<anonymous> (/tmp/tmp34gull7l.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  if (n !== 1) factors.push(n);\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      factor *= i;\n      i++;\n    } else {\n      factors.push(1);\n      factor *= i;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp3ryjdqr1.js:30:12)\n    at Object.<anonymous> (/tmp/tmp3ryjdqr1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp0ssy6_nr.js:23:12)\n    at Object.<anonymous> (/tmp/tmp0ssy6_nr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n !== 1) factors.push(n);\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp23yt983d.js:25:12)\n    at Object.<anonymous> (/tmp/tmp23yt983d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let factorsCountTemp: number[] = [];\n  let factorsCountTemp2: number[] = [];\n  let factorsCountTemp3: number[] = [];\n  let factorsCountTemp4: number[] = [];\n  let factorsCountTemp5: number[] = [];\n  let factorsCountTemp6: number[] = [];\n  let factorsCountTemp7: number[] = [];\n  let factorsCountTemp8: number[] = [];\n  let factorsCountTemp9: number[] = [];\n  let factorsCountTemp10: number[] = [];\n  let factorsCountTemp11: number[] = [];\n  let factorsCountTemp12: number[] = [];\n  let factorsCountTemp13: number[] = [];\n  let factorsCountTemp14: number[] = [];\n  let factorsCountTemp15: number[] = [];\n  let factorsCountTemp16: number[] = [];\n  let factorsCountTemp17: number[] = [];\n  let factorsCountTemp18: number[] = [];\n  let factorsCountTemp19: number[] = [];\n  let factorsCountTemp20: number[] = [];\n  let factorsCountTemp21: number[] = [];\n  let factorsCountTemp22: number[] = [];\n  let factorsCountTemp23: number[] = [];\n  let factorsCountTemp24: number[] = [];\n  let factorsCountTemp25: number[] = [];\n  let factorsCountTemp26: number[] = [];\n  let factorsCountTemp27: number[] = [];\n  let factorsCountTemp28: number[] = [];\n  let factorsCountTemp29: number[] = [];\n  let factorsCountTemp30: number[] = [];\n  let factorsCountTemp31: number[] = [];\n  let factorsCountTemp32: number[] = [];\n  let factorsCountTemp33: number[] = [];\n  let factorsCountTemp34: number[] = [];\n  let factorsCountTemp35: number[] = [];\n  let factorsCountTemp36: number[] = [];\n  let factorsCountTemp37: number[] = [];\n  let factorsCountTemp38: number[] = [];\n  let factorsCountTemp39: number[] = [];\n  let factorsCountTemp40: number[] = [];\n  let factorsCountTemp41: number[] = [];\n  let factorsCountTemp42: number[] = [];\n  let factorsCountTemp43: number[] = [];\n  let factorsCountTemp44: number[] = [];\n  let factorsCountTemp45: number[] = [];\n  let factorsCountTemp46\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2sxnbjl2.ts(75,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n            }\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpxe4bzozw.js:26:12)\n    at Object.<anonymous> (/tmp/tmpxe4bzozw.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let isPrime = true;\n  let isFactor = true;\n  let factor: number[] = [];\n  let factorCount: number[] = [];\n  let primeFactors: number[] = [];\n  let primeFactorsCount: number[] = [];\n  let isPrimeFactor = true;\n  let isPrimePrime = true;\n  let isPrimePrimeFactor = true;\n  let isPrimePrimePrime = true;\n  let isPrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9j2x9jiq.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            factors.push(i);\n            while (n % i === 0) {\n                n /= i;\n            }\n        }\n        i++;\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpqdshy8l1.js:28:12)\n    at Object.<anonymous> (/tmp/tmpqdshy8l1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            while (n % i === 0) {\n                n /= i;\n            }\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmplbddrbw0.js:25:12)\n    at Object.<anonymous> (/tmp/tmplbddrbw0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpcnldef8y.js:26:12)\n    at Object.<anonymous> (/tmp/tmpcnldef8y.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpcnldef8y.js:26:12)\n    at Object.<anonymous> (/tmp/tmpcnldef8y.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            while (n % i === 0) {\n                n /= i;\n            }\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmphkteugv7.js:25:12)\n    at Object.<anonymous> (/tmp/tmphkteugv7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n >= factor) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpm2noz46e.js:23:12)\n    at Object.<anonymous> (/tmp/tmpm2noz46e.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n !== 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpkvb6ccxs.js:26:12)\n    at Object.<anonymous> (/tmp/tmpkvb6ccxs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333687
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    while (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n            n /= factor;\n        } else {\n            factor *= factor;\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc6f530d50\n 1: 0x2b144ad4e727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b144b8e328e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b144b21df8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b144b3af760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b144b3b70cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b144b5a17db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b144af007f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333687
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let factorCount: number[] = [];\n  let factorCountIndex: number[] = [];\n  let factorCountIndexMax: number[] = [];\n  let factorCountIndexMaxIndex: number[] = [];\n  let factorCountIndexMaxIndexIndex: number[] = [];\n  let factorCountIndexMaxIndexIndex2: number[] = [];\n  let factorCountIndexMaxIndexIndex3: number[] = [];\n  let factorCountIndexMaxIndexIndex4: number[] = [];\n  let factorCountIndexMaxIndexIndex5: number[] = [];\n  let factorCountIndexMaxIndexIndex6: number[] = [];\n  let factorCountIndexMaxIndexIndex7: number[] = [];\n  let factorCountIndexMaxIndexIndex8: number[] = [];\n  let factorCountIndexMaxIndexIndex9: number[] = [];\n  let factorCountIndexMaxIndexIndex10: number[] = [];\n  let factorCountIndexMaxIndexIndex11: number[] = [];\n  let factorCountIndexMaxIndexIndex12: number[] = [];\n  let factorCountIndexMaxIndexIndex13: number[] = [];\n  let factorCountIndexMaxIndexIndex14: number[] = [];\n  let factorCountIndexMaxIndexIndex15: number[] = [];\n  let factorCountIndexMaxIndexIndex16: number[] = [];\n  let factorCountIndexMaxIndexIndex17: number[] = [];\n  let factorCountIndexMaxIndexIndex18: number[] = [];\n  let factorCountIndexMaxIndexIndex19: number[] = [];\n  let factorCountIndexMaxIndexIndex20: number[] = [];\n  let factorCountIndexMaxIndexIndex21: number[] = [];\n  let factorCountIndexMaxIndexIndex22: number[] = [];\n  let factorCountIndexMaxIndexIndex23: number[] = [];\n  let factorCountIndexMaxIndexIndex24: number[] = [];\n  let factorCountIndexMaxIndexIndex25: number[] = [];\n  let factorCountIndexMaxIndexIndex26: number[] = [];\n  let factorCountIndexMaxIndexIndex27: number[] = [];\n  let factorCountIndexMaxIndexIndex28: number[] = [];\n  let factorCountIndexMaxIndexIndex29: number[] = [];\n  let factorCountIndexMaxIndexIndex30: number[] = [];\n  let factorCountIndexMaxIndexIndex31: number[] = [];\n  let factorCountIndexMaxIndexIndex32: number[] = [];\n  let factorCountIndexMaxIndexIndex33: number[] = [];\n  let factorCountIndexMaxIndexIndex34: number[] = [];\n  let factorCountIndexMaxIndexIndex35: number[] = [];\n  let factorCountIndexMaxIndexIndex36: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo6vl88aq.ts(69,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333679
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors = [];\n  let i = 1;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff8d6e0f00\n 1: 0x2b32e6334727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b32e6ec928e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b32e6803f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b32e6995760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b32e699d0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b32e6b877db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b32e64e67f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333690
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors = [];\n    let factor = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            factors.push(factor);\n            factor *= i;\n            while (n % factor === 0) {\n                n /= factor;\n                factor++;\n            }\n        } else {\n            i++;\n        }\n    }\n    if (n !== 1) {\n        factors.push(factor);\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpa1iid7ip.js:35:12)\n    at Object.<anonymous> (/tmp/tmpa1iid7ip.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333687
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            while (n % i === 0) {\n                n /= i;\n            }\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmplbddrbw0.js:25:12)\n    at Object.<anonymous> (/tmp/tmplbddrbw0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n            }\n        }\n    }\n    if (n != 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpbd247b70.js:30:12)\n    at Object.<anonymous> (/tmp/tmpbd247b70.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2 ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333687
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    const factors: number[] = [];\n    let factor = 1;\n    while (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n            n /= factor;\n        } else {\n            factor *= factor;\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fffd3f6f550\n 1: 0x2ba931e63727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2ba9329f828e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2ba932332f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2ba9324c4760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2ba9324cc0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2ba9326b67db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2ba9320157f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333692
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n < 2) {\n    return [];\n  }\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n === 0) {\n    return [];\n  }\n\n  const factors: number[] = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp6m792qzd.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6m792qzd.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            while (n % i === 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpvwuqxdvl.js:29:12)\n    at Object.<anonymous> (/tmp/tmpvwuqxdvl.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333689
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n === 1) {\n    return [1];\n  }\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n !== 1) {\n    factors.push(n as number);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpmn_fkv8c.js:32:12)\n    at Object.<anonymous> (/tmp/tmpmn_fkv8c.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i === 0) {\n    factors.push(i);\n    i = i * 2;\n  }\n  if (n !== i) {\n    factors.push(i);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp5_gedjrh.js:25:12)\n    at Object.<anonymous> (/tmp/tmp5_gedjrh.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333689
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffed0715ec0\n 1: 0x2b4afce22727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b4afd9b728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b4afd2f1f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b4afd483760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b4afd48b0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b4afd6757db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b4afcfd47f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n    let factorCount: number = 0;\n    let i: number;\n    let j: number;\n    let factorCountArr: number[] = [];\n    let factorArr: number[] = [];\n    let factorCountArrLen: number = 0;\n    let factorArrLen: number = 0;\n    let factorCountArrMax: number = 0;\n    let factorArrMax: number = 0;\n    let factorCountArrMin: number = 0;\n    let factorArrMin: number = 0;\n    let factorCountArrSum: number = 0;\n    let factorArrSum: number = 0;\n    let factorCountArrAvg: number = 0;\n    let factorArrAvg: number = 0;\n    let factorCountArrSumSq: number = 0;\n    let factorArrSumSq: number = 0;\n    let factorCountArrAvgSq: number = 0;\n    let factorArrAvgSq: number = 0;\n    let factorCountArrSumSqMin: number = 0;\n    let factorArrSumSqMin: number = 0;\n    let factorCountArrAvgSqMin: number = 0;\n    let factorArrAvgSqMin: number = 0;\n    let factorCountArrSumSqMax: number = 0;\n    let factorArrSumSqMax: number = 0;\n    let factorCountArrAvgSqMax: number = 0;\n    let factorArrAvgSqMax: number = 0;\n    let factorCountArrSumSqMinMax: number = 0;\n    let factorArrSumSqMinMax: number = 0;\n    let factorCountArrAvgSqMinMax: number = 0;\n    let factorArrAvgSqMinMax: number = 0;\n    let factorCountArrSumSqMinMaxSq: number = 0;\n    let factorArrSumSqMinMaxSq: number = 0;\n    let factorCountArrAvgSqMinMaxSq: number = 0;\n    let factorArrAvgSqMinMaxSq: number = 0;\n    let factorCountArrSumSqMinMaxSqMin: number = 0;\n    let factorArrSumSqMinMaxSqMin: number = 0;\n    let factorCountArrAvgSqMinMaxSqMin: number = 0;\n    let factorArrAvgSqMinMaxSqMin: number = 0;\n    let factorCountArrSumSqMinMaxSqMax: number = 0;\n    let factorArrSumSqMinMaxSqMax: number = 0;\n    let factorCountArrAvgSqMinMaxSqMax: number = 0;\n    let factorArrAvgSqMinMaxSqMax: number = 0;\n    let factorCountArrSumSqMinMaxSqMinMax: number = 0;\n    let factorArrSumSqMinMaxSqMinMax: number = 0;\n    let factorCountArrAvgSqMinMaxSqMinMax: number = 0;\n    let factorArrAvgSqMinMaxSqMinMax: \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphwjbcisf.ts(60,9): error TS1005: ',' expected.\n../../../../tmp/tmphwjbcisf.ts(76,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    const factors: number[] = [];\n    let i = 2;\n    while (i <= Math.sqrt(n)) {\n        if (n % i === 0) {\n            factors.push(i);\n            while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n            }\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpi_lt4blo.js:32:12)\n    at Object.<anonymous> (/tmp/tmpi_lt4blo.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2 ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333690
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffed0715ec0\n 1: 0x2b4afce22727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b4afd9b728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b4afd2f1f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b4afd483760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b4afd48b0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b4afd6757db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b4afcfd47f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n !== 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpkvb6ccxs.js:26:12)\n    at Object.<anonymous> (/tmp/tmpkvb6ccxs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333687
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp6q2ftkb3.js:26:12)\n    at Object.<anonymous> (/tmp/tmp6q2ftkb3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let factorsSum: number[] = [];\n  let factorsSumCount: number[] = [];\n  let factorsSumCountSum: number[] = [];\n  let factorsSumCountSumCount: number[] = [];\n  let factorsSumCountSumCountSum: number[] = [];\n  let factorsSumCountSumCountSumCount: number[] = [];\n  let factorsSumCountSumCountSumCountSum: number[] = [];\n  let factorsSumCountSumCountSumCountSumCount: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSum: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCount: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n  let factorsSum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph5g0vspf.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    while (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n            n /= factor;\n        } else {\n            factor *= factor;\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc6f530d50\n 1: 0x2b144ad4e727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b144b8e328e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b144b21df8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b144b3af760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b144b3b70cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b144b5a17db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b144af007f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333687
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpgtxy96hf.js:23:12)\n    at Object.<anonymous> (/tmp/tmpgtxy96hf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333690
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let i = 1;\n  while (n >= i) {\n    let f = i;\n    while (n % f === 0) {\n      f = f + 1;\n    }\n    factors.push(f);\n    i = f + 1;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpz164eilg.js:26:12)\n    at Object.<anonymous> (/tmp/tmpz164eilg.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333690
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization: number[] = [];\n  let factorizationIndex = 0;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      factorization[factorizationIndex] = factor;\n      factorizationIndex++;\n      n /= factor;\n    } else {\n      factor++;\n    }\n  }\n  if (n !== 1) {\n    factors.push(1);\n    factorization[factorizationIndex] = n;\n    factorizationIndex++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffe28907f00\n 1: 0x2b3301878727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b330240d28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b3301d47f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b3301ed9760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b3301ee10cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b33020cb7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b3301a2a7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333695
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors = [];\n    let factor = 1;\n    while (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n            n /= factor;\n        } else {\n            factor *= factor;\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffe1962d660\n 1: 0x2b0e6d684727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b0e6e21928e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b0e6db53f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b0e6dce5760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b0e6dced0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b0e6ded77db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b0e6d8367f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333692
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n    let factorCount: number[] = [];\n    let factorCountIndex: number[] = [];\n    let factorCountIndexMax: number[] = [];\n    let factorCountIndexMaxIndex: number[] = [];\n    let factorCountIndexMaxIndexIndex: number[] = [];\n    let factorCountIndexMaxIndexIndex2: number[] = [];\n    let factorCountIndexMaxIndexIndex3: number[] = [];\n    let factorCountIndexMaxIndexIndex4: number[] = [];\n    let factorCountIndexMaxIndexIndex5: number[] = [];\n    let factorCountIndexMaxIndexIndex6: number[] = [];\n    let factorCountIndexMaxIndexIndex7: number[] = [];\n    let factorCountIndexMaxIndexIndex8: number[] = [];\n    let factorCountIndexMaxIndexIndex9: number[] = [];\n    let factorCountIndexMaxIndexIndex10: number[] = [];\n    let factorCountIndexMaxIndexIndex11: number[] = [];\n    let factorCountIndexMaxIndexIndex12: number[] = [];\n    let factorCountIndexMaxIndexIndex13: number[] = [];\n    let factorCountIndexMaxIndexIndex14: number[] = [];\n    let factorCountIndexMaxIndexIndex15: number[] = [];\n    let factorCountIndexMaxIndexIndex16: number[] = [];\n    let factorCountIndexMaxIndexIndex17: number[] = [];\n    let factorCountIndexMaxIndexIndex18: number[] = [];\n    let factorCountIndexMaxIndexIndex19: number[] = [];\n    let factorCountIndexMaxIndexIndex20: number[] = [];\n    let factorCountIndexMaxIndexIndex21: number[] = [];\n    let factorCountIndexMaxIndexIndex22: number[] = [];\n    let factorCountIndexMaxIndexIndex23: number[] = [];\n    let factorCountIndexMaxIndexIndex24: number[] = [];\n    let factorCountIndexMaxIndexIndex25: number[] = [];\n    let factorCountIndexMaxIndexIndex26: number[] = [];\n    let factorCountIndexMaxIndexIndex27: number[] = [];\n    let factorCountIndexMaxIndexIndex28: number[] = [];\n    let factorCountIndexMaxIndexIndex29: number[] = [];\n    let factorCountIndexMaxIndexIndex30: number[] = [];\n    let factorCountIndexMaxIndexIndex31: number[] = [];\n    let factorCountIndexMaxIndexIndex32: number[] = [];\n    let factorCountIndexMaxIndexIndex33: number[] = [];\n    let factorCountIndexMaxIndexIndex34: number[] = [];\n    let factorCountIndexMaxIndexIndex35: number[] = [];\n    let factorCountIndexMaxIndexIndex36: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc1cloe3f.ts(69,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333690
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp9tf_9b6q.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9tf_9b6q.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333690
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n !== 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmpfbq42hvn.js:28:12)\n    at Object.<anonymous> (/tmp/tmpfbq42hvn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333690
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let i = 1;\n  while (n != 1) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc757113b0\n 1: 0x2aad11f1b727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2aad12ab028e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2aad123eaf8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2aad1257c760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2aad125840cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2aad1276e7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2aad120cd7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n < 2) {\n    return [];\n  }\n  const factors = [];\n  let i = 2;\n  while (i <= n) {\n    const isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      factors.push(i);\n      i = i * 2;\n    } else {\n      i = i * 2;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprgvbaork.ts(20,9): error TS2588: Cannot assign to 'isPrime' because it is a constant.\n",
      "timestamp": 1660333690
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffea7afe1c0\n 1: 0x2b08926a3727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b089323828e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b0892b72f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b0892d04760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b0892d0c0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b0892ef67db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b08928557f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333694
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    let primeFactor = 1;\n    let primeFactorCount = 0;\n    let factorCount = 0;\n    let isPrime = true;\n    let isPrimeCount = 0;\n    let isPrimeFactor = true;\n    let isPrimeFactorCount = 0;\n    let isPrimePrime = true;\n    let isPrimePrimeCount = 0;\n    let isPrimePrimeFactor = true;\n    let isPrimePrimeFactorCount = 0;\n    let isPrimePrimePrime = true;\n    let isPrimePrimePrimeCount = 0;\n    let isPrimePrimePrimeFactor = true;\n    let isPrimePrimePrimeFactorCount = 0;\n    let isPrimePrimePrimePrime = true;\n    let isPrimePrimePrimePrimeCount = 0;\n    let isPrimePrimePrimePrimeFactor = true;\n    let isPrimePrimePrimePrimeFactorCount = 0;\n    let isPrimePrimePrimePrimePrime = true;\n    let isPrimePrimePrimePrimePrimeCount = 0;\n    let isPrimePrimePrimePrimePrimeFactor = true;\n    let isPrimePrimePrimePrimePrimeFactorCount = 0;\n    let isPrimePrimePrimePrimePrimePrime = true;\n    let isPrimePrimePrimePrimePrimeCount = 0;\n    let isPrimePrimePrimePrimePrimePrimeFactor = true;\n    let isPrimePrimePrimePrimePrimePrimeFactorCount = 0;\n    let isPrimePrimePrimePrimePrimePrimePrime = true;\n    let isPrimePrimePrimePrimePrimePrimePrimeCount = 0;\n    let isPrimePrimePrimePrimePrimePrimePrimeFactor = true;\n    let isPrimePrimePrimePrimePrimePrimePrimeFactorCount = 0;\n    let isPrimePrimePrimePrimePrimePrimePrimePrime = true;\n    let isPrimePrimePrimePrimePrimePrimePrimeCount = 0;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimeFactorCount = 0;\n    let isPrimePrimePrimePrimePrimePrimePrimePrime = true;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4x4615si.ts(67,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333690
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let i: number;\n  let j: number;\n  let factorCount: number = 0;\n  let factorsCount: number = 0;\n  let factorsCountMax: number = 0;\n  let factorsCountMin: number = 0;\n  let factorsCountMaxIndex: number = 0;\n  let factorsCountMinIndex: number = 0;\n  let factorsCountMaxIndex2: number = 0;\n  let factorsCountMinIndex2: number = 0;\n  let factorsCountMaxIndex3: number = 0;\n  let factorsCountMinIndex3: number = 0;\n  let factorsCountMaxIndex4: number = 0;\n  let factorsCountMinIndex4: number = 0;\n  let factorsCountMaxIndex5: number = 0;\n  let factorsCountMinIndex5: number = 0;\n  let factorsCountMaxIndex6: number = 0;\n  let factorsCountMinIndex6: number = 0;\n  let factorsCountMaxIndex7: number = 0;\n  let factorsCountMinIndex7: number = 0;\n  let factorsCountMaxIndex8: number = 0;\n  let factorsCountMinIndex8: number = 0;\n  let factorsCountMaxIndex9: number = 0;\n  let factorsCountMinIndex9: number = 0;\n  let factorsCountMaxIndex10: number = 0;\n  let factorsCountMinIndex10: number = 0;\n  let factorsCountMaxIndex11: number = 0;\n  let factorsCountMinIndex11: number = 0;\n  let factorsCountMaxIndex12: number = 0;\n  let factorsCountMinIndex12: number = 0;\n  let factorsCountMaxIndex13: number = 0;\n  let factorsCountMinIndex13: number = 0;\n  let factorsCountMaxIndex14: number = 0;\n  let factorsCountMinIndex14: number = 0;\n  let factorsCountMaxIndex15: number = 0;\n  let factorsCountMinIndex15: number = 0;\n  let factorsCountMaxIndex16: number = 0;\n  let factorsCountMinIndex16: number = 0;\n  let factorsCountMaxIndex17: number = 0;\n  let factorsCountMinIndex17: number = 0;\n  let factorsCountMaxIndex18: number = 0;\n  let factorsCountMinIndex18: number = 0;\n  let factorsCountMaxIndex19: number = 0;\n  let factorsCountMinIndex19: number = 0;\n  let factorsCountMaxIndex20: number = 0;\n  let factorsCountMinIndex20: number = 0;\n  let factorsCountMaxIndex21: number = 0;\n  let factorsCountMinIndex21: number = 0;\n  let factorsCountMax\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkae25mz3.ts(78,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333691
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let primeFactors: number[] = [];\n    let isPrime: boolean;\n    let isPrimeSet: boolean;\n    let isPrimeSet2: boolean;\n    let isPrimeSet3: boolean;\n    let isPrimeSet4: boolean;\n    let isPrimeSet5: boolean;\n    let isPrimeSet6: boolean;\n    let isPrimeSet7: boolean;\n    let isPrimeSet8: boolean;\n    let isPrimeSet9: boolean;\n    let isPrimeSet10: boolean;\n    let isPrimeSet11: boolean;\n    let isPrimeSet12: boolean;\n    let isPrimeSet13: boolean;\n    let isPrimeSet14: boolean;\n    let isPrimeSet15: boolean;\n    let isPrimeSet16: boolean;\n    let isPrimeSet17: boolean;\n    let isPrimeSet18: boolean;\n    let isPrimeSet19: boolean;\n    let isPrimeSet20: boolean;\n    let isPrimeSet21: boolean;\n    let isPrimeSet22: boolean;\n    let isPrimeSet23: boolean;\n    let isPrimeSet24: boolean;\n    let isPrimeSet25: boolean;\n    let isPrimeSet26: boolean;\n    let isPrimeSet27: boolean;\n    let isPrimeSet28: boolean;\n    let isPrimeSet29: boolean;\n    let isPrimeSet30: boolean;\n    let isPrimeSet31: boolean;\n    let isPrimeSet32: boolean;\n    let isPrimeSet33: boolean;\n    let isPrimeSet34: boolean;\n    let isPrimeSet35: boolean;\n    let isPrimeSet36: boolean;\n    let isPrimeSet37: boolean;\n    let isPrimeSet38: boolean;\n    let isPrimeSet39: boolean;\n    let isPrimeSet40: boolean;\n    let isPrimeSet41: boolean;\n    let isPrimeSet42: boolean;\n    let isPrimeSet43: boolean;\n    let isPrimeSet44: boolean;\n    let isPrimeSet45: boolean;\n    let isPrimeSet46: boolean;\n    let isPrimeSet47: boolean;\n    let isPrimeSet48: boolean;\n    let isPrimeSet49: boolean;\n    let isPrimeSet50: boolean;\n    let isPrimeSet51: boolean;\n    let isPrimeSet52: boolean;\n    let isPrimeSet53: boolean;\n    let isPrimeSet54: boolean;\n    let isPrimeSet55: boolean;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmyp22ync.ts(86,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333692
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffed0715ec0\n 1: 0x2b4afce22727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b4afd9b728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b4afd2f1f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b4afd483760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b4afd48b0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b4afd6757db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b4afcfd47f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let isPrime = true;\n  let isPrimeCount: number[] = [];\n  let isPrimePrime = true;\n  let isPrimePrimeCount: number[] = [];\n  let isPrimePrimePrime = true;\n  let isPrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxkyjonfp.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333692
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n >= 1) {\n    while (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff00430db0\n 1: 0x2b5909887727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b590a41c28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b5909d56f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b5909ee8760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b5909ef00cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b590a0da7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b5909a397f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333696
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let i: number;\n  let j: number;\n  let factorCount: number;\n  let factorCountMax: number;\n  let factorCountMin: number;\n  let factorCountSum: number;\n  let factorCountSumMax: number;\n  let factorCountSumMin: number;\n  let factorCountSumSum: number;\n  let factorCountSumSumMax: number;\n  let factorCountSumSumMin: number;\n  let factorCountSumSumSum: number;\n  let factorCountSumSumSumMax: number;\n  let factorCountSumSumSumMin: number;\n  let factorCountSumSumSumSum: number;\n  let factorCountSumSumSumSumMax: number;\n  let factorCountSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSumSum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbofregk8.ts(74,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n    let i: number;\n    let j: number;\n    let factorCount: number = 0;\n    let factorsCount: number = 0;\n    let factorsCountMax: number = Math.sqrt(n);\n    let factorsCountMin: number = Math.floor(factorsCountMax);\n    let factorsCountMaxInRange: number = factorsCountMax - factorsCountMin;\n    let factorsCountMinInRange: number = factorsCountMin - 1;\n    let factorsCountMaxInRangeInRange: number = factorsCountMaxInRange - factorsCountMinInRange;\n    let factorsCountMinInRangeInRange: number = factorsCountMinInRange + 1;\n    let factorsCountMaxInRangeInRangeInRange: number = factorsCountMaxInRangeInRange + 1;\n    let factorsCountMinInRangeInRangeInRange: number = factorsCountMinInRangeInRange + 2;\n    let factorsCountMaxInRangeInRangeInRangeInRange: number = factorsCountMaxInRangeInRangeInRange + 2;\n    let factorsCountMinInRangeInRangeInRangeInRange: number = factorsCountMinInRangeInRangeInRange + 3;\n    let factorsCountMaxInRangeInRangeInRangeInRange: number = factorsCountMaxInRangeInRangeInRange + 3;\n    let factorsCountMinInRangeInRangeInRangeInRange: number = factorsCountMinInRangeInRangeInRange + 4;\n    let factorsCountMaxInRangeInRangeInRangeInRange: number = factorsCountMaxInRangeInRangeInRange + 4;\n    let factorsCountMinInRangeInRangeInRangeInRange: number = factorsCountMinInRangeInRangeInRange + 5;\n    let factorsCountMaxInRangeInRangeInRangeInRange: number = factorsCountMaxInRangeInRangeInRange + 5;\n    let factorsCountMinInRangeInRangeInRangeInRange: number = factorsCountMinInRangeInRangeInRange + 6;\n    let factorsCountMaxInRangeInRangeInRangeInRange: number = factorsCountMaxInRangeInRangeInRange + 6;\n    let factorsCountMinInRangeInRangeInRangeInRange: number = factorsCountMinInRangeInRangeInRange + 7;\n    let factorsCountMaxInRangeInRangeInRangeInRange: number = factorsCountMaxInRangeInRangeInRange + 7;\n    let factorsCountMinInRangeInRangeInRangeIn\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0u63buzm.ts(53,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333692
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors = [];\n  let i = 1;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffce52d3230\n 1: 0x2b5846c8b727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b584782028e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b584715af8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b58472ec760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b58472f40cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b58474de7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b5846e3d7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333696
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    const factors: number[] = [];\n    let i = 2;\n    while (i <= n) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpyj3vcpp2.js:30:12)\n    at Object.<anonymous> (/tmp/tmpyj3vcpp2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    const factors: number[] = [];\n    let factor = 1;\n    while (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n            n /= factor;\n        } else {\n            factor *= factor;\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fffd3f6f550\n 1: 0x2ba931e63727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2ba9329f828e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2ba932332f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2ba9324c4760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2ba9324cc0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2ba9326b67db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2ba9320157f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333692
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n            }\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpqqe0tabm.js:30:12)\n    at Object.<anonymous> (/tmp/tmpqqe0tabm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2 ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpjp41ipux.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjp41ipux.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n            }\n            if (n !== 1) {\n                factors.push(n);\n            }\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmprhz1uvh1.js:28:12)\n    at Object.<anonymous> (/tmp/tmprhz1uvh1.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n < 2) return [];\n  let factors: number[] = [];\n  let i = 2;\n  while (true) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n    if (n === 1) break;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n < 2) {\n    return [];\n  }\n\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let factorsCountArr: number[] = [];\n    let factorsCountArrLen: number = 0;\n    let factorsCountArrMax: number = 0;\n    let factorsCountArrMaxIndex: number = 0;\n    let factorsCountArrMaxValue: number = 0;\n    let factorsCountArrMaxValueIndex: number = 0;\n    let factorsCountArrMaxValueIndex2: number = 0;\n    let factorsCountArrMaxValueIndex3: number = 0;\n    let factorsCountArrMaxValueIndex4: number = 0;\n    let factorsCountArrMaxValueIndex5: number = 0;\n    let factorsCountArrMaxValueIndex6: number = 0;\n    let factorsCountArrMaxValueIndex7: number = 0;\n    let factorsCountArrMaxValueIndex8: number = 0;\n    let factorsCountArrMaxValueIndex9: number = 0;\n    let factorsCountArrMaxValueIndex10: number = 0;\n    let factorsCountArrMaxValueIndex11: number = 0;\n    let factorsCountArrMaxValueIndex12: number = 0;\n    let factorsCountArrMaxValueIndex13: number = 0;\n    let factorsCountArrMaxValueIndex14: number = 0;\n    let factorsCountArrMaxValueIndex15: number = 0;\n    let factorsCountArrMaxValueIndex16: number = 0;\n    let factorsCountArrMaxValueIndex17: number = 0;\n    let factorsCountArrMaxValueIndex18: number = 0;\n    let factorsCountArrMaxValueIndex19: number = 0;\n    let factorsCountArrMaxValueIndex20: number = 0;\n    let factorsCountArrMaxValueIndex21: number = 0;\n    let factorsCountArrMaxValueIndex22: number = 0;\n    let factorsCountArrMaxValueIndex23: number = 0;\n    let factorsCountArrMaxValueIndex24: number = 0;\n    let factorsCountArrMaxValueIndex25: number = 0;\n    let factorsCountArrMaxValueIndex26: number = 0;\n    let factorsCountArrMaxValueIndex27: number = 0;\n    let factorsCountArrMaxValueIndex28: number = 0;\n    let factorsCountArrMaxValueIndex29: number = 0;\n    let factorsCountArrMaxValueIndex30: number = 0;\n    let factorsCountArrMaxValueIndex31: number = 0;\n    let factorsCountArrMaxValueIndex32: number = 0;\n    let factorsCountArrMaxValueIndex33: number = 0;\n    let factorsCountArrMaxValueIndex34: number = 0;\n    let factorsCountArrMaxValue\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpphsyun2f.ts(69,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n >= i) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fffa6774100\n 1: 0x2b432a439727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b432afce28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b432a908f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b432aa9a760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b432aaa20cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b432ac8c7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b432a5eb7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333697
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    const factors: number[] = [];\n    const primeFactors: number[] = [];\n    let factor: number[] = [];\n    let primeFactor: number[] = [];\n    let i: number;\n    let j: number;\n    let factorCount: number;\n    let primeFactorCount: number;\n    let factorIndex: number;\n    let primeFactorIndex: number;\n    let factorsCount: number;\n    let primeFactorsCount: number;\n    let factorsIndex: number;\n    let primeFactorsIndex: number;\n    let factorsLength: number;\n    let primeFactorsLength: number;\n    let factorsMax: number;\n    let primeFactorsMax: number;\n    let factorsMin: number;\n    let primeFactorsMin: number;\n    let factorsSum: number;\n    let primeFactorsSum: number;\n    let factorsProduct: number;\n    let primeFactorsProduct: number;\n    let factorsProductSum: number;\n    let primeFactorsProductSum: number;\n    let factorsProductProduct: number;\n    let primeFactorsProductProduct: number;\n    let factorsProductProductSum: number;\n    let primeFactorsProductProductSum: number;\n    let factorsProductProductProduct: number;\n    let primeFactorsProductProductProduct: number;\n    let factorsProductProductProductSum: number;\n    let primeFactorsProductProductProductSum: number;\n    let factorsProductProductProductProduct: number;\n    let primeFactorsProductProductProductProduct: number;\n    let factorsProductProductProductProductSum: number;\n    let primeFactorsProductProductProductSum: number;\n    let factorsProductProductProductProduct: number;\n    let primeFactorsProductProductProductProduct: number;\n    let factorsProductProductProductProductSum: number;\n    let primeFactorsProductProductProductSum: number;\n    let factorsProductProductProductProduct: number;\n    let primeFactorsProductProductProductProduct: number;\n    let factorsProductProductProductProductSum: number;\n    let primeFactorsProductProductProductSum: number;\n    let factorsProductProductProductProduct: number;\n    let primeFactorsProductProductProductProduct: number;\n    let factorsProductProductProductProductSum: number;\n    let primeFactorsProductProductProductSum: number;\n    let factorsProductProductProductProduct: number;\n    let primeFactorsProductProductProductProduct: number;\n    let factorsProductProductProductProductSum: number;\n    let primeFactorsProductProductProductSum: number;\n    let factorsProductProductProductProduct: number;\n    let primeFactorsProductProductProductProduct: number;\n    let factorsProductProductProductProductSum: number;\n    let primeFactorsProductProductProductSum: number;\n    let factorsProductProductProductProduct: number;\n    let primeFactorsProductProductProductProduct: number;\n    let factorsProductProductProductProductSum: number;\n    let primeFactorsProductProductProductSum: number;\n    let factorsProductProduct\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvwlzrqtv.ts(90,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  const factorsCount: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsCount.push(1);\n      while (n % i === 0) {\n        n /= i;\n        factorsCount[factorsCount.length - 1]++;\n      }\n    }\n  }\n  return [factors, factorsCount];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt9i3ohpv.ts(23,11): error TS2322: Type 'number[]' is not assignable to type 'number'.\n../../../../tmp/tmpt9i3ohpv.ts(23,20): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "timestamp": 1660333694
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n    let factorCount: number[] = [];\n    let factorCountIndex: number[] = [];\n    let factorCountIndexIndex: number[] = [];\n    let factorCountIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpygk38q2y.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333694
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    const factors: number[] = [];\n    let i = 2;\n    while (i <= Math.sqrt(n)) {\n        if (n % i === 0) {\n            factors.push(i);\n            while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n            }\n        }\n        i++;\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpm1w27z97.js:28:12)\n    at Object.<anonymous> (/tmp/tmpm1w27z97.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmp_7idtjno.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_7idtjno.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffed39b57d0\n 1: 0x2af9d2085727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2af9d2c1a28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2af9d2554f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2af9d26e6760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2af9d26ee0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2af9d28d87db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2af9d22377f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let factorsCountMax: number[] = [];\n    let factorsCountMaxIndex: number[] = [];\n    let factorsCountMaxIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqcjfyzv_.ts(55,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333683
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n != 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /= factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff0fe827c0\n 1: 0x2b2cc1592727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b2cc212728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b2cc1a61f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b2cc1bf3760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b2cc1bfb0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b2cc1de57db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b2cc17447f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffed39b57d0\n 1: 0x2af9d2085727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2af9d2c1a28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2af9d2554f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2af9d26e6760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2af9d26ee0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2af9d28d87db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2af9d22377f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let i: number;\n  let j: number;\n  let factorCount: number = 0;\n  let factorCountMax: number = 0;\n  let factorCountMaxIndex: number = 0;\n  let factorCountMaxValue: number = 0;\n  let factorCountMaxValueIndex: number = 0;\n  let factorCountMaxValueIndex2: number = 0;\n  let factorCountMaxValueIndex3: number = 0;\n  let factorCountMaxValueIndex4: number = 0;\n  let factorCountMaxValueIndex5: number = 0;\n  let factorCountMaxValueIndex6: number = 0;\n  let factorCountMaxValueIndex7: number = 0;\n  let factorCountMaxValueIndex8: number = 0;\n  let factorCountMaxValueIndex9: number = 0;\n  let factorCountMaxValueIndex10: number = 0;\n  let factorCountMaxValueIndex11: number = 0;\n  let factorCountMaxValueIndex12: number = 0;\n  let factorCountMaxValueIndex13: number = 0;\n  let factorCountMaxValueIndex14: number = 0;\n  let factorCountMaxValueIndex15: number = 0;\n  let factorCountMaxValueIndex16: number = 0;\n  let factorCountMaxValueIndex17: number = 0;\n  let factorCountMaxValueIndex18: number = 0;\n  let factorCountMaxValueIndex19: number = 0;\n  let factorCountMaxValueIndex20: number = 0;\n  let factorCountMaxValueIndex21: number = 0;\n  let factorCountMaxValueIndex22: number = 0;\n  let factorCountMaxValueIndex23: number = 0;\n  let factorCountMaxValueIndex24: number = 0;\n  let factorCountMaxValueIndex25: number = 0;\n  let factorCountMaxValueIndex26: number = 0;\n  let factorCountMaxValueIndex27: number = 0;\n  let factorCountMaxValueIndex28: number = 0;\n  let factorCountMaxValueIndex29: number = 0;\n  let factorCountMaxValueIndex30: number = 0;\n  let factorCountMaxValueIndex31: number = 0;\n  let factorCountMaxValueIndex32: number = 0;\n  let factorCountMaxValueIndex33: number = 0;\n  let factorCountMaxValueIndex34: number = 0;\n  let factorCountMaxValueIndex35: number = 0;\n  let factorCountMaxValueIndex36: number = 0;\n  let factorCountMaxValueIndex37: number = 0;\n  let factorCountMaxValueIndex38: number = 0;\n  let factorCountMaxValueIndex39: number = 0;\n  let factorCountMaxValueIndex40: number = 0;\n  let factorCountMaxValueIndex41: number = 0;\n  let factorCountMaxValueIndex42: number = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuv9r_dxi.ts(78,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333695
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let factorsSum: number[] = [];\n    let factorsSumCount: number[] = [];\n    let factorsSumCountSum: number[] = [];\n    let factorsSumCountSumCount: number[] = [];\n    let factorsSumCountSumCountSum: number[] = [];\n    let factorsSumCountSumCountSumCount: number[] = [];\n    let factorsSumCountSumCountSumCountSum: number[] = [];\n    let factorsSumCountSumCountSumCountSumCount: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSum: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCount: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n    let factorsSum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp224la0pq.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333695
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffcf69bd860\n 1: 0x2b327a8a4727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b327b43928e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b327ad73f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b327af05760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b327af0d0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b327b0f77db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b327aa567f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorization: number[] = [];\n    let factorizationCount: number = 0;\n    let factorizationNumber: number = 0;\n    let factorizationNumbers: number[] = [];\n    let factorizationNumbersCount: number = 0;\n    let factorizationNumbersIndex: number = 0;\n    let factorizationNumbersIndexCount: number = 0;\n    let factorizationNumbersIndexNumber: number = 0;\n    let factorizationNumbersIndexNumberCount: number = 0;\n    let factorizationNumbersIndexNumberNumber: number = 0;\n    let factorizationNumbersIndexNumberNumberCount: number = 0;\n    let factorizationNumbersIndexNumberNumberNumber: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberCount: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumber: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberCount: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumber: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberCount: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumber: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberCount: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumber: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberCount: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumber: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberCount: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumber: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberCount: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberCount: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberCount: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberCount: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber: number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumber\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzto_gftr.ts(61,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization = 1;\n  let factorizations = [];\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      factorizations.push(factorization);\n      factorization *= factor;\n      factorization = 1;\n      factor = 1;\n    } else {\n      factor *= factor;\n    }\n    n--;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp717_ncok.js:33:12)\n    at Object.<anonymous> (/tmp/tmp717_ncok.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization = [];\n  let factorizationIndex = 0;\n  let factorizationIndexMax = factorizationIndex + factors.length;\n  while (factorizationIndex < factorizationIndexMax) {\n    factors.push(factor);\n    factor *= n;\n    factorization[factorizationIndex] = factor;\n    factorizationIndex++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpvmj7tf1q.js:27:12)\n    at Object.<anonymous> (/tmp/tmpvmj7tf1q.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333696
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    let factorization: number[] = [];\n    let factorizationIndex = 0;\n    let factorizationIndexMax = factorization.length - 1;\n    let factorizationIndexMin = 0;\n    let factorizationIndexMaxMin = factorizationIndexMax - 1;\n    let factorizationIndexMinMax = factorizationIndexMin + 1;\n    let factorizationIndexMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptbvkwl10.ts(46,9): error TS1005: ',' expected.\n../../../../tmp/tmptbvkwl10.ts(62,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffed39b57d0\n 1: 0x2af9d2085727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2af9d2c1a28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2af9d2554f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2af9d26e6760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2af9d26ee0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2af9d28d87db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2af9d22377f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333699
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n < 2) {\n    return [];\n  }\n\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n !== 1) factors.push(n);\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp23yt983d.js:25:12)\n    at Object.<anonymous> (/tmp/tmp23yt983d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpcnldef8y.js:26:12)\n    at Object.<anonymous> (/tmp/tmpcnldef8y.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let factorsCountMax: number[] = [];\n  let factorsCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCount\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxvyi4o1i.ts(53,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i === 0) {\n    factors.push(i);\n    i = i * 2;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpy1y8p8fb.js:25:12)\n    at Object.<anonymous> (/tmp/tmpy1y8p8fb.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 2 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333696
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n    let factorCount: number[] = [];\n    let factorCountIndex: number[] = [];\n    let factorCountIndexIndex: number[] = [];\n    let factorCountIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpygk38q2y.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333694
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpcnldef8y.js:26:12)\n    at Object.<anonymous> (/tmp/tmpcnldef8y.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2j9r_xnw.ts(101,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n < 2) return [];\n  let factors: number[] = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(1);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  19\n]\n    at test (/tmp/tmpyg704jsi.js:30:12)\n    at Object.<anonymous> (/tmp/tmpyg704jsi.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 3, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333697
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n < 2) {\n    return [];\n  }\n\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333697
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n != 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /= factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff0fe827c0\n 1: 0x2b2cc1592727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b2cc212728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b2cc1a61f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b2cc1bf3760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b2cc1bfb0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b2cc1de57db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b2cc17447f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let factorsCountMax: number[] = [];\n    let factorsCountMaxIndex: number[] = [];\n    let factorsCountMaxIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqcjfyzv_.ts(55,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333683
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n >= 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffe601d3470\n 1: 0x2b8164832727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b81653c728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b8164d01f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b8164e93760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b8164e9b0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b81650857db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b81649e47f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  const primes: number[] = [];\n  let factor = 1;\n  let prime = 1;\n  let primeFactor = 1;\n  let isPrime = true;\n  let isPrimeFactor = true;\n  let isPrimePrime = true;\n  let isPrimePrimeFactor = true;\n  let isPrimePrimePrime = true;\n  let isPrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp96vjqfct.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n    let factorCount: number[] = [];\n    let factorCountIndex: number[] = [];\n    let factorCountIndexIndex: number[] = [];\n    let factorCountIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpygk38q2y.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333694
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n < 2) return [];\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc194ef3e0\n 1: 0x2b299ac2b727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b299b7c028e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b299b0faf8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b299b28c760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b299b2940cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b299b47e7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b299addd7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333700
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n === 1) return [];\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp7jz8x8kp.js:28:12)\n    at Object.<anonymous> (/tmp/tmp7jz8x8kp.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (true) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      break;\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp34gull7l.js:31:12)\n    at Object.<anonymous> (/tmp/tmp34gull7l.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n != 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /= factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff0fe827c0\n 1: 0x2b2cc1592727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b2cc212728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b2cc1a61f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b2cc1bf3760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b2cc1bfb0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b2cc1de57db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b2cc17447f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": -1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization = [];\n  let factorizationIndex = 0;\n  while (n != 1) {\n    if (n % factor == 0) {\n      factors.push(factor);\n      factor *= factorization[factorizationIndex];\n      factorizationIndex++;\n    } else {\n      factorization[factorizationIndex] = factor;\n      factorizationIndex++;\n      factor = 1;\n    }\n    n /= factor;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333715
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffed0715ec0\n 1: 0x2b4afce22727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b4afd9b728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b4afd2f1f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b4afd483760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b4afd48b0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b4afd6757db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b4afcfd47f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp7jz8x8kp.js:28:12)\n    at Object.<anonymous> (/tmp/tmp7jz8x8kp.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  const primeFactors = primeFactorization(n);\n  for (let i = 0; i < primeFactors.length; i++) {\n    const factor = primeFactors[i];\n    for (let j = 0; j < factor; j++) {\n      factors.push(factor);\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8i74h0vp.ts(12,24): error TS2304: Cannot find name 'primeFactorization'.\n",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let factorsCountArr: number[] = [];\n  let factorsCountArrLen: number[] = [];\n  let factorsCountArrLenLen: number[] = [];\n  let factorsCountArrLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd6_2wh_m.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333679
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n >= 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff6d2380e0\n 1: 0x2b0edf4e4727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b0ee007928e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b0edf9b3f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b0edfb45760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b0edfb4d0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b0edfd377db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b0edf6967f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpcnldef8y.js:26:12)\n    at Object.<anonymous> (/tmp/tmpcnldef8y.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpxve14l1n.js:25:12)\n    at Object.<anonymous> (/tmp/tmpxve14l1n.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let factorsCountArr: number[] = [];\n  let factorsCountArrLen: number[] = [];\n  let factorsCountArrLenLen: number[] = [];\n  let factorsCountArrLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd6_2wh_m.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333679
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let factorsCountMax: number[] = [];\n    let factorsCountMaxIndex: number[] = [];\n    let factorsCountMaxIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqcjfyzv_.ts(55,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333683
    },
    {
      "exit_code": -1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n / i > 0) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333716
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp6q2ftkb3.js:26:12)\n    at Object.<anonymous> (/tmp/tmp6q2ftkb3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let i = 2;\n  while (n >= i) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333700
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (true) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      break;\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp34gull7l.js:31:12)\n    at Object.<anonymous> (/tmp/tmp34gull7l.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n <= 1) return [];\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4d3i_8ah.js:28:12)\n    at Object.<anonymous> (/tmp/tmp4d3i_8ah.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333700
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let factorCount: number[] = [];\n  let factorCountIndex: number[] = [];\n  let factorCountIndexMax: number[] = [];\n  let factorCountIndexMaxIndex: number[] = [];\n  let factorCountIndexMaxIndexIndex: number[] = [];\n  let factorCountIndexMaxIndexIndex2: number[] = [];\n  let factorCountIndexMaxIndexIndex3: number[] = [];\n  let factorCountIndexMaxIndexIndex4: number[] = [];\n  let factorCountIndexMaxIndexIndex5: number[] = [];\n  let factorCountIndexMaxIndexIndex6: number[] = [];\n  let factorCountIndexMaxIndexIndex7: number[] = [];\n  let factorCountIndexMaxIndexIndex8: number[] = [];\n  let factorCountIndexMaxIndexIndex9: number[] = [];\n  let factorCountIndexMaxIndexIndex10: number[] = [];\n  let factorCountIndexMaxIndexIndex11: number[] = [];\n  let factorCountIndexMaxIndexIndex12: number[] = [];\n  let factorCountIndexMaxIndexIndex13: number[] = [];\n  let factorCountIndexMaxIndexIndex14: number[] = [];\n  let factorCountIndexMaxIndexIndex15: number[] = [];\n  let factorCountIndexMaxIndexIndex16: number[] = [];\n  let factorCountIndexMaxIndexIndex17: number[] = [];\n  let factorCountIndexMaxIndexIndex18: number[] = [];\n  let factorCountIndexMaxIndexIndex19: number[] = [];\n  let factorCountIndexMaxIndexIndex20: number[] = [];\n  let factorCountIndexMaxIndexIndex21: number[] = [];\n  let factorCountIndexMaxIndexIndex22: number[] = [];\n  let factorCountIndexMaxIndexIndex23: number[] = [];\n  let factorCountIndexMaxIndexIndex24: number[] = [];\n  let factorCountIndexMaxIndexIndex25: number[] = [];\n  let factorCountIndexMaxIndexIndex26: number[] = [];\n  let factorCountIndexMaxIndexIndex27: number[] = [];\n  let factorCountIndexMaxIndexIndex28: number[] = [];\n  let factorCountIndexMaxIndexIndex29: number[] = [];\n  let factorCountIndexMaxIndexIndex30: number[] = [];\n  let factorCountIndexMaxIndexIndex31: number[] = [];\n  let factorCountIndexMaxIndexIndex32: number[] = [];\n  let factorCountIndexMaxIndexIndex33: number[] = [];\n  let factorCountIndexMaxIndexIndex34: number[] = [];\n  let factorCountIndexMaxIndexIndex35: number[] = [];\n  let factorCountIndexMaxIndexIndex36: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo6vl88aq.ts(69,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333679
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    while (n % i === 0) {\n      n /= i;\n      i++;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmpgcpms09i.js:30:12)\n    at Object.<anonymous> (/tmp/tmpgcpms09i.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333700
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333680
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let maxFactor: number = 0;\n    let minFactor: number = 0;\n    let factor: number = 0;\n    let factorsCountIndex: number = 0;\n    let factorsCountLength: number = 0;\n    let factorsCountMax: number = 0;\n    let factorsCountMin: number = 0;\n    let factorsCountSum: number = 0;\n    let factorsCountSumIndex: number = 0;\n    let factorsCountSumLength: number = 0;\n    let factorsCountSumMax: number = 0;\n    let factorsCountSumMin: number = 0;\n    let factorsCountSumSum: number = 0;\n    let factorsCountSumSumIndex: number = 0;\n    let factorsCountSumSumLength: number = 0;\n    let factorsCountSumSumMax: number = 0;\n    let factorsCountSumSumMin: number = 0;\n    let factorsCountSumSumSum: number = 0;\n    let factorsCountSumSumSumIndex: number = 0;\n    let factorsCountSumSumSumLength: number = 0;\n    let factorsCountSumSumSumMax: number = 0;\n    let factorsCountSumSumSumMin: number = 0;\n    let factorsCountSumSumSumSum: number = 0;\n    let factorsCountSumSumSumSumIndex: number = 0;\n    let factorsCountSumSumSumSumLength: number = 0;\n    let factorsCountSumSumSumSumMax: number = 0;\n    let factorsCountSumSumSumSumMin: number = 0;\n    let factorsCountSumSumSumSumSum: number = 0;\n    let factorsCountSumSumSumSumSumIndex: number = 0;\n    let factorsCountSumSumSumSumSumLength: number = 0;\n    let factorsCountSumSumSumSumSumMax: number = 0;\n    let factorsCountSumSumSumSumSumMin: number = 0;\n    let factorsCountSumSumSumSumSumSum: number = 0;\n    let factorsCountSumSumSumSumSumSumIndex: number = 0;\n    let factorsCountSumSumSumSumSumSumLength: number = 0;\n    let factorsCountSumSumSumSumSumSumMax: number = 0;\n    let factorsCountSumSumSumSumSumSumMin: number = 0;\n    let factorsCountSumSumSumSumSumSumSum: number = 0;\n    let factorsCountSumSumSumSumSumSumSumIndex: number = 0;\n    let factorsCountSumSumSumSumSumSumSumLength: number = 0;\n    let factorsCountSumSumSumSumSumSumSumMax: number = 0;\n    let factorsCountSumSumSumSum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp19io4_bq.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffed0715ec0\n 1: 0x2b4afce22727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b4afd9b728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b4afd2f1f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b4afd483760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b4afd48b0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b4afd6757db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b4afcfd47f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpjp41ipux.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjp41ipux.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n != 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /= factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff0fe827c0\n 1: 0x2b2cc1592727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b2cc212728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b2cc1a61f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b2cc1bf3760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b2cc1bfb0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b2cc1de57db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b2cc17447f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333682
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors = [];\n  let i = 1;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffce52d3230\n 1: 0x2b5846c8b727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b584782028e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b584715af8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b58472ec760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b58472f40cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b58474de7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b5846e3d7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333696
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    const factors = [];\n    let i = 2;\n    while (i <= n) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333700
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let factorsCountMax: number[] = [];\n    let factorsCountMaxIndex: number[] = [];\n    let factorsCountMaxIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqcjfyzv_.ts(55,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333683
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let i = 2;\n    while (i <= n) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333700
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors: number[] = [];\n    let factorsCount: number[] = [];\n    let factorsCountMap: Map<number, number> = new Map();\n    let factorsCountMapCount: number[] = [];\n    let factorsCountMapCountMap: Map<number, Map<number, number>> = new Map();\n    let factorsCountMapCountMapCount: number[] = [];\n    let factorsCountMapCountMapCountMap: Map<number, Map<number, Map<number, number>>> = new Map();\n    let factorsCountMapCountMapCountMapCount: number[] = [];\n    let factorsCountMapCountMapCountMapCountMap: Map<number, Map<number, Map<number, Map<number, number>>>> = new Map();\n    let factorsCountMapCountMapCountMapCountMapCount: number[] = [];\n    let factorsCountMapCountMapCountMapCountMapCountMap: Map<number, Map<number, Map<number, Map<number, Map<number, number>>>>[] = new Map();\n    let factorsCountMapCountMapCountMapCountMapCountMapCount: number[] = [];\n    let factorsCountMapCountMapCountMapCountMapCountMapCountMap: Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, number>>>>[]> = new Map();\n    let factorsCountMapCountMapCountMapCountMapCountMapCountMapCount: number[] = [];\n    let factorsCountMapCountMapCountMapCountMapCountMapCountMapCount: Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3nslicnv.ts(21,131): error TS1005: '>' expected.\n../../../../tmp/tmp3nslicnv.ts(23,152): error TS1005: '>' expected.\n../../../../tmp/tmp3nslicnv.ts(26,9): error TS1005: '>' expected.\n../../../../tmp/tmp3nslicnv.ts(42,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333701
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let factorsCountMax: number[] = [];\n  let factorsCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7zl4ccx3.ts(56,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp16_2uora.js:26:12)\n    at Object.<anonymous> (/tmp/tmp16_2uora.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            factors.push(n / i);\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpf57mv8jt.js:23:12)\n    at Object.<anonymous> (/tmp/tmpf57mv8jt.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333701
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffed0715ec0\n 1: 0x2b4afce22727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b4afd9b728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b4afd2f1f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b4afd483760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b4afd48b0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b4afd6757db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b4afcfd47f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333683
    },
    {
      "exit_code": 0,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333700
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffea7afe1c0\n 1: 0x2b08926a3727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b089323828e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b0892b72f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b0892d04760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b0892d0c0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b0892ef67db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b08928557f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333694
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    let factors = [];\n    let factor = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            factors.push(factor);\n            factor *= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpe2jjy16a.js:26:12)\n    at Object.<anonymous> (/tmp/tmpe2jjy16a.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333701
    },
    {
      "exit_code": 2,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n  let factorsCountMax: number[] = [];\n  let factorsCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_m1vcee0.ts(53,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333701
    },
    {
      "exit_code": -5,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff99b66850\n 1: 0x2b2c33580727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b2c3411528e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b2c33a4ff8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b2c33be1760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b2c33be90cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b2c33dd37db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b2c337327f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "stdout": "",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  if (n <= 1) return [];\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp4d3i_8ah.js:28:12)\n    at Object.<anonymous> (/tmp/tmp4d3i_8ah.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333700
    }
  ]
}