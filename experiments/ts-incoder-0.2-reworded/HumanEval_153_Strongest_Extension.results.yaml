language: ts
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwpfcdzik.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpwpfcdzik.js:22:59)\n    at test (/tmp/tmpwpfcdzik.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpwpfcdzik.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_length = extension.length;\n    let extension_strength = extension_length\
    \ - strongest_extension.length;\n    if (extension_strength > 0) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpn3f7sui1.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn3f7sui1.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension.length;\n        if (extension_strength\
    \ > 0) {\n            strongest_extension = extension;\n        }\n    }\n   \
    \ return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpphmzjrm_.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpphmzjrm_.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_length\
    \ = extension.length;\n        let extension_strength = extension_length - strongest_extension;\n\
    \        if (extension_strength > 0) {\n            strongest_extension = extension_strength;\n\
    \            strongest_extension_str = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension_str;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Boku123.32145tggg'\n\
    \nshould loosely deep-equal\n\n'Boku123.YEs.WeCaNe'\n    at test (/tmp/tmp9bj8igev.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9bj8igev.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Boku123.32145tggg',\n\
    \  expected: 'Boku123.YEs.WeCaNe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
    \    let strength = cap.length - sm.length;\n    if (strength > strongest_extension.length)\
    \ {\n      strongest_extension = extension;\n    }\n  }\n  return class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpq6we0jrd.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq6we0jrd.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > strongest_extension.charCodeAt(0))\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkzzp7hdk.ts(23,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpkzzp7hdk.ts(23,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension = extensions[i];\n    \
    \    let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > strongest_extension)\
    \ {\n            strongest_extension = strength;\n            strongest_extension_str\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm8xl6bkt.ts(24,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpm8xl6bkt.ts(24,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738816
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpfh4q69mw.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfh4q69mw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1\n    let\
    \ max_extension = \"\"\n    for (let i = 0; i < extensions.length; i++) {\n  \
    \      let extension = extensions[i]\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength\n            max_extension\
    \ = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpywv80ftb.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpywv80ftb.js:22:59)\n    at test (/tmp/tmpywv80ftb.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpywv80ftb.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength = -1;\n\
    \  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_extension_strength)\
    \ {\n      max_extension_strength = extension_strength;\n      max_extension_name\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension_name;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvbfvzi_6.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpvbfvzi_6.js:22:59)\n    at test (/tmp/tmpvbfvzi_6.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpvbfvzi_6.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension = extensions[i];\n    \
    \    let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension_str.length;\n        if (extension_strength\
    \ > strongest_extension) {\n            strongest_extension = extension_strength;\n\
    \            strongest_extension_str = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension_str;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpx0_lyqlk.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpx0_lyqlk.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp2q6uy3j.ts(23,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpp2q6uy3j.ts(23,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_str: string = extensions[i];\n        let extension_str_length:\
    \ number = extension_str.length;\n        let extension_str_upper: number = extension_str.toUpperCase().length;\n\
    \        let extension_str_lower: number = extension_str.toLowerCase().length;\n\
    \        let extension_str_length_ratio: number = extension_str_upper - extension_str_lower;\n\
    \        let extension_str_strength: number = extension_str_length_ratio * CAP\
    \ - extension_str_lower;\n        if (extension_str_strength > strongest_extension)\
    \ {\n            strongest_extension = extension_str_strength;\n            strongest_extension_str\
    \ = extension_str;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg4fd4a1a.ts(26,75): error TS2304: Cannot find name
    ''CAP''.

    '
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    let strongest_extension_strength: number = -1;\n    for\
    \ (let i = 1; i < extensions.length; i++) {\n        let extension_strength =\
    \ extensions[i].length - extensions[i].toUpperCase().length;\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension = extensions[i];\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.niNE'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmppvrqoqgy.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmppvrqoqgy.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.niNE',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpfh4q69mw.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfh4q69mw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp2q6uy3j.ts(23,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpp2q6uy3j.ts(23,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz1cpbwej.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpz1cpbwej.js:22:59)\n    at test (/tmp/tmpz1cpbwej.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpz1cpbwej.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - extension_strength_count(extension);\n\t\tif (extension_strength > strongest_extension.length)\
    \ {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmmm4kq68.ts(22,47): error TS2304: Cannot find name
    ''extension_strength_count''.

    '
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1\n  let max_extension\
    \ = \"\"\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i]\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length\n\
    \    if (strength > max_strength) {\n      max_strength = strength\n      max_extension\
    \ = extension\n    }\n  }\n  return class_name + \".\" + max_extension\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp766nj61f.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp766nj61f.js:22:49)\n    at test (/tmp/tmp766nj61f.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp766nj61f.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/)).length;\n  let sm_extensions = extensions.filter(e => e.match(/[a-z]/)).length;\n\
    \  return `${class_name.slice(0, class_name.lastIndexOf('.')+1)}.${extensions[Math.max(cap_extensions\
    \ - sm_extensions, 0)]}`;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'.tEN'\n\nshould\
    \ loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpg2g0w1n_.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpg2g0w1n_.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ -1;\n\tlet strongest_extension_name: string = \"\";\n\tlet extensions_length:\
    \ number = extensions.length;\n\tfor (let i: number = 0; i < extensions_length;\
    \ i++) {\n\t\tlet extension: number = extensions[i].charCodeAt(0) - 65;\n\t\t\
    let extension_name: string = extensions[i].substring(1);\n\t\tlet extension_length:\
    \ number = extension_name.length;\n\t\tlet extension_strength: number = extension\
    \ - extension_name.length;\n\t\tif (extension_strength > strongest_extension)\
    \ {\n\t\t\tstrongest_extension = extension_strength;\n\t\t\tstrongest_extension_name\
    \ = extension_name;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension_name;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.EN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpngkegrsh.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpngkegrsh.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.EN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmix7u9h_.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpmix7u9h_.js:22:59)\n    at test (/tmp/tmpmix7u9h_.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpmix7u9h_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - CAP_SM_LENGTH;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return `${class_name}.${max_extension}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9nd9waye.ts(23,49): error TS2304: Cannot find name
    ''CAP_SM_LENGTH''.

    '
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet sm = extension.charAt(0).toLowerCase();\n\
    \t\tlet strength = cap - sm;\n\t\tif (strength > 0) {\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplqb5bha6.ts(23,18): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmplqb5bha6.ts(23,24): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmix7u9h_.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpmix7u9h_.js:22:59)\n    at test (/tmp/tmpmix7u9h_.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpmix7u9h_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet sm = extension.charAt(0).toLowerCase();\n\
    \t\tlet strength = cap.length - sm.length;\n\t\tif (strength > strongest_extension.length)\
    \ {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpmskoxeet.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmskoxeet.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp2q6uy3j.ts(23,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpp2q6uy3j.ts(23,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = class_name.split(extension).length - 1;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp0ertx3dl.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0ertx3dl.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738819
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwpfcdzik.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpwpfcdzik.js:22:59)\n    at test (/tmp/tmpwpfcdzik.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpwpfcdzik.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ 0;\n\tlet strongest_extension_index: number = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_length = extension.length;\n\
    \t\tlet extension_strength = extension_length - 1;\n\t\tlet extension_class_name\
    \ = class_name + extension;\n\t\tlet extension_class_name_length = extension_class_name.length;\n\
    \t\tlet extension_class_name_strength = extension_class_name_length - 1;\n\t\t\
    let extension_class_name_class_name = extension_class_name.substring(0, extension_class_name_length\
    \ - 1);\n\t\tlet extension_class_name_class_name_length = extension_class_name_class_name.length;\n\
    \t\tlet extension_class_name_class_name_strength = extension_class_name_class_name_length\
    \ - 1;\n\t\tlet extension_class_name_class_name_class_name = extension_class_name_class_name.substring(0,\
    \ extension_class_name_class_name_length - 1);\n\t\tlet extension_class_name_class_name_class_name_length\
    \ = extension_class_name_class_name_class_name.length;\n\t\tlet extension_class_name_class_name_class_name_strength\
    \ = extension_class_name_class_name_class_name_length - 1;\n\t\tlet extension_class_name_class_name_class_name_class_name\
    \ = extension_class_name_class_name_class_name.substring(0, extension_class_name_class_name_class_name_length\
    \ - 1);\n\t\tlet extension_class_name_class_name_class_name_class_name_length\
    \ = extension_class_name_class_name_class_name_class_name.length;\n\t\tlet extension_class_name_class_name_class_name_class_name_strength\
    \ = extension_class_name_class_name_class_name_class_name_length - 1;\n\t\tlet\
    \ extension_class_name_class_name_class_name_class_name_class_name = extension_class_name_class_name_class_name_class_name.substring(0,\
    \ extension_class_name_class_name_class_name_length - 1);\n\t\tlet extension_class_name_class_name_class_name_class_name_class_name_length\
    \ = extension_class_name_class_name_class_name_class_name_class_name.length;\n\
    \t\tlet extension_class_name_class_name_class_name_class_name_class_name_strength\
    \ = extension_class_name_class_name_class_name_class_name_class_name_length -\
    \ 1;\n\t\tlet extension_class_name_class_name_class_name_class_name_class_name_class_name\
    \ = extension_class_name_class_name_class_name_class_name_class_name.substring(0,\
    \ extension_class_name_class_name_class_name_length - 1);\n\t\tlet extension_class_name_class_name_class_name_class_name_class_name_length\
    \ = extension_class_name_class_name_class_name_class_name_class_name.length;\n\
    \t\tlet extension_class_name_class_name_class_name_class_name_class_name_strength\
    \ = extension_class_name_class_name_class_name_class_name_class_name_length -\
    \ 1;\n\t\tlet extension_class_name_class_name_class_name_class_name_class_name_class_name\
    \ = extension_class_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwjtcoczx.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738819
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.niNE'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpco8_03by.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpco8_03by.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.niNE',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738819
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_length_lower: number = extension_str_length;\n        let extension_str_length_upper:\
    \ number = extension_str_length;\n        for (let j = 0; j < extension_str_length;\
    \ j++) {\n            if (extension_str[j] === extension_str[j].toUpperCase())\
    \ {\n                extension_str_length_upper--;\n            }\n          \
    \  if (extension_str[j] === extension_str[j].toLowerCase()) {\n              \
    \  extension_str_length_lower--;\n            }\n        }\n        let extension_str_length_total:\
    \ number = extension_str_length_upper + extension_str_length_lower;\n        let\
    \ extension_strength: number = extension_str_length_total / extension_str_length;\n\
    \        if (extension_strength > strongest_extension) {\n            strongest_extension\
    \ = extension_strength;\n            strongest_extension_str = extension_str;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpqb3cg1sf.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqb3cg1sf.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738819
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmix7u9h_.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpmix7u9h_.js:22:59)\n    at test (/tmp/tmpmix7u9h_.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpmix7u9h_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let strength = class_name.split(extension).length\
    \ - 1;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmplnewt6mq.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmplnewt6mq.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738819
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let extension_strength: number[]\
    \ = [];\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i];\n    let extension_number = extension.charCodeAt(0) - 65;\n \
    \   extension_strength.push(extension_number);\n  }\n  let max_strength = Math.max.apply(null,\
    \ extension_strength);\n  let max_extension = extension_strength.indexOf(max_strength);\n\
    \  return class_name + extensions[max_extension];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'WatashitEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp8as_viqo.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8as_viqo.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'WatashitEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738819
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwpfcdzik.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpwpfcdzik.js:22:59)\n    at test (/tmp/tmpwpfcdzik.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpwpfcdzik.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_name: string = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension: number = extensions[i].charCodeAt(0)\
    \ - 65;\n        if (extension > strongest_extension) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_name = extensions[i];\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension_name;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmplei01ql0.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmplei01ql0.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738819
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1\n\tfor (let\
    \ i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i]\n\t\t\
    let class_name = class_name + extension\n\t\tlet class_name_lower = class_name.toLowerCase()\n\
    \t\tlet class_name_upper = class_name.toUpperCase()\n\t\tlet class_name_length\
    \ = class_name.length\n\t\tlet extension_length = extension.length\n\t\tlet extension_upper\
    \ = extension.toUpperCase()\n\t\tlet extension_lower = extension.toLowerCase()\n\
    \t\tlet extension_upper_index = extension_upper.indexOf(class_name_upper)\n\t\t\
    let extension_lower_index = extension_lower.indexOf(class_name_lower)\n\t\tlet\
    \ extension_length = extension_upper_index - extension_lower_index\n\t\tlet extension_strength\
    \ = extension_length - class_name_length\n\t\tif (extension_strength > max_strength)\
    \ {\n\t\t\tmax_strength = extension_strength\n\t\t}\n\t}\n\treturn class_name\
    \ + extensions[extensions.length - 1]\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcf6xe_kl.ts(21,20): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    ../../../../../tmp/tmpcf6xe_kl.ts(25,7): error TS2451: Cannot redeclare block-scoped
    variable ''extension_length''.

    ../../../../../tmp/tmpcf6xe_kl.ts(30,7): error TS2451: Cannot redeclare block-scoped
    variable ''extension_length''.

    '
  timestamp: 1659738819
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = class_name.split(extension).length - 1;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp0ertx3dl.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0ertx3dl.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738819
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: number =\
    \ -1;\n  let strongest_extension_name: string =\n    extensions[extensions.findIndex(extension\
    \ => extension.charAt(0).toUpperCase() === extension.charAt(0))];\n  for (let\
    \ i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n \
    \   let extension_name =\n      extension.charAt(0).toUpperCase() + extension.substr(1);\n\
    \    if (extension_name === strongest_extension_name) {\n      strongest_extension\
    \ = i;\n    }\n  }\n  return class_name + \".\" + strongest_extension_name;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8qwa9kfk.ts(20,27): error TS2339: Property ''findIndex''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738819
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmix7u9h_.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpmix7u9h_.js:22:59)\n    at test (/tmp/tmpmix7u9h_.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpmix7u9h_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz1cpbwej.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpz1cpbwej.js:22:59)\n    at test (/tmp/tmpz1cpbwej.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpz1cpbwej.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/));\n    let sm_extensions = extensions.filter(e => e.match(/[a-z]/));\n\
    \    let cap_extensions_count = cap_extensions.length;\n    let sm_extensions_count\
    \ = sm_extensions.length;\n    let cap_extensions_sm = cap_extensions_count -\
    \ sm_extensions_count;\n    let sm_extensions_sm = sm_extensions_count - cap_extensions_count;\n\
    \    let cap_extensions_strength = cap_extensions_sm/cap_extensions_count;\n \
    \   let sm_extensions_strength = sm_extensions_sm/sm_extensions_count;\n    let\
    \ cap_extensions_index = cap_extensions.indexOf(cap_extensions_strength);\n  \
    \  let sm_extensions_index = sm_extensions.indexOf(sm_extensions_strength);\n\
    \    return class_name + extensions[cap_extensions_index];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplk0r6alb.ts(26,55): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmplk0r6alb.ts(27,53): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1659738819
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_extension_strength = -1;\n\
    \    let max_extension_name = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_strength = extensions[i].toUpperCase().charCodeAt(0)\
    \ - extensions[i].toLowerCase().charCodeAt(0);\n        if (extension_strength\
    \ > max_extension_strength) {\n            max_extension_strength = extension_strength;\n\
    \            max_extension_name = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + max_extension_name;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp1eiaarxb.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1eiaarxb.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738820
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/));\n  let sm_extensions = extensions.filter(e => e.match(/[a-z]/));\n\
    \  let cap_extensions_count = cap_extensions.length;\n  let sm_extensions_count\
    \ = sm_extensions.length;\n  let cap_extension_strength = cap_extensions_count\
    \ - sm_extensions_count;\n  let sm_extension_strength = sm_extensions_count;\n\
    \  let max_extension_strength = cap_extension_strength;\n  let max_extension =\
    \ cap_extensions[0];\n  for (let i = 0; i < sm_extensions_count; i++) {\n    if\
    \ (sm_extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = sm_extension_strength;\n      max_extension = sm_extensions[i];\n    }\n \
    \   sm_extension_strength--;\n  }\n  return `${class_name}.${max_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp5j87_mlk.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5j87_mlk.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738819
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.niNE'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp0xwkitkm.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0xwkitkm.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.niNE',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738819
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension = extensions[i];\n    \
    \    let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n        if (extension_strength\
    \ > strongest_extension) {\n            strongest_extension = extension_strength;\n\
    \            strongest_extension_str = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension_str;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyzbl_bgz.ts(23,53): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    '
  timestamp: 1659738819
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
    \    let strength = cap.length - sm.length;\n    if (strength > strongest_extension.length)\n\
    \      strongest_extension = extension;\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpjlg8vmdo.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjlg8vmdo.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738820
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n    if (extension_strength\
    \ > max_strength) {\n      max_strength = extension_strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw7lzohhw.ts(23,49): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    '
  timestamp: 1659738819
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_length = extension.length;\n\t\tlet extension_strength\
    \ = extension_length - CAP_TO_STRONG[extension.charAt(0)] - SM_TO_STRONG[extension.charAt(extension_length\
    \ - 1)];\n\t\tif (extension_strength > max_strength) {\n\t\t\tmax_strength = extension_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa0s4tl8w.ts(23,47): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    ../../../../../tmp/tmpa0s4tl8w.ts(23,84): error TS2304: Cannot find name ''SM_TO_STRONG''.

    '
  timestamp: 1659738819
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmix7u9h_.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpmix7u9h_.js:22:59)\n    at test (/tmp/tmpmix7u9h_.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpmix7u9h_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension.length;\n        if (extension_strength\
    \ > 0) {\n            strongest_extension = extension;\n        }\n    }\n   \
    \ return `${class_name}.${strongest_extension}`;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp8mdyqtuy.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8mdyqtuy.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738820
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension: number = extensions[i].charCodeAt(0)\
    \ - 65;\n        if (extension > strongest_extension) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_str = extensions[i];\n       \
    \ }\n    }\n    return class_name + \".\" + strongest_extension_str;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmprf7n4qx4.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmprf7n4qx4.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738820
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/));\n  let sm_extensions = extensions.filter(e => e.match(/[a-z]/));\n\
    \  let cap_extensions_count = cap_extensions.length;\n  let sm_extensions_count\
    \ = sm_extensions.length;\n  let cap_extensions_sm = cap_extensions_count - sm_extensions_count;\n\
    \  let sm_extensions_sm = sm_extensions_count - cap_extensions_count;\n  let cap_extensions_cap\
    \ = cap_extensions_count - cap_extensions_sm;\n  let sm_extensions_cap = sm_extensions_count\
    \ - sm_extensions_sm;\n  let strongest_extension = cap_extensions[0];\n  if (cap_extensions_cap\
    \ > sm_extensions_cap) {\n    strongest_extension = cap_extensions[cap_extensions_cap];\n\
    \  }\n  if (sm_extensions_cap > cap_extensions_cap) {\n    strongest_extension\
    \ = sm_extensions[sm_extensions_cap];\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpjly_u17s.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjly_u17s.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738819
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = extensions.length;\n    let strongest_extension_name: string = \"\";\n   \
    \ for (let i = 0; i < strongest_extension; i++) {\n        let extension: number\
    \ = extensions[i];\n        let cap: number = extension.charCodeAt(0) - 97;\n\
    \        let sm: number = extension.charCodeAt(1) - 65;\n        let strength:\
    \ number = cap - sm;\n        if (strength > 0) {\n            strongest_extension_name\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_name;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo90sgfiw.ts(21,13): error TS2322: Type ''string''
    is not assignable to type ''number''.

    ../../../../../tmp/tmpo90sgfiw.ts(22,37): error TS2339: Property ''charCodeAt''
    does not exist on type ''number''.

    ../../../../../tmp/tmpo90sgfiw.ts(23,36): error TS2339: Property ''charCodeAt''
    does not exist on type ''number''.

    ../../../../../tmp/tmpo90sgfiw.ts(26,13): error TS2322: Type ''number'' is not
    assignable to type ''string''.

    '
  timestamp: 1659738819
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_cap: number = extension_str_length - 1;\n        let extension_sm:\
    \ number = extension_str_length - 2;\n        let extension_strength: number =\
    \ extension_cap - extension_sm;\n        if (extension_strength > strongest_extension)\
    \ {\n            strongest_extension = extension_strength;\n            strongest_extension_str\
    \ = extension_str;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpyn6kal7c.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyn6kal7c.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738820
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_class: string = class_name;\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension_class: string =\
    \ extensions[i];\n        let extension_class_cap: number = extension_class.toUpperCase().charCodeAt(0)\
    \ - 65;\n        let extension_class_sm: number = extension_class.toLowerCase().charCodeAt(0)\
    \ - 97;\n        let extension_class_strength: number = extension_class_cap -\
    \ extension_class_sm;\n        if (extension_class_strength > strongest_extension)\
    \ {\n            strongest_extension = extension_class_strength;\n           \
    \ strongest_extension_class = extension_class;\n        }\n    }\n    return strongest_extension_class;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tEN'\n\nshould\
    \ loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpghvnxs77.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpghvnxs77.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tEN',\n \
    \ expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738820
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpx45iqe2w.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpx45iqe2w.js:22:49)\n    at test (/tmp/tmpx45iqe2w.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpx45iqe2w.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738821
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp2q6uy3j.ts(23,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpp2q6uy3j.ts(23,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension = extensions[i];\n      \
    \  let extension_length = extension.length;\n        let extension_strength =\
    \ extension_length - strongest_extension;\n        if (extension_strength > 0)\
    \ {\n            strongest_extension = extension_strength;\n            strongest_extension_str\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Boku123.32145tggg'\n\
    \nshould loosely deep-equal\n\n'Boku123.YEs.WeCaNe'\n    at test (/tmp/tmpxaxicx3d.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxaxicx3d.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Boku123.32145tggg',\n\
    \  expected: 'Boku123.YEs.WeCaNe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738821
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmix7u9h_.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpmix7u9h_.js:22:59)\n    at test (/tmp/tmpmix7u9h_.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpmix7u9h_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension = extensions[i];\n      \
    \  let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension)\
    \ {\n            strongest_extension = strength;\n            strongest_extension_str\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpgq9z659e.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgq9z659e.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (strength > max_strength) {\n\
    \            max_strength = strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + max_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpcx_6oq7c.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpcx_6oq7c.js:22:49)\n    at test (/tmp/tmpcx_6oq7c.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpcx_6oq7c.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - extension_strength_count(extension);\n\t\tif (extension_strength > strongest_extension.length)\
    \ {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr__2f90v.ts(22,47): error TS2304: Cannot find name
    ''extension_strength_count''.

    '
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let cap = class_name.split('').filter(x\
    \ => x.toUpperCase() === x).length;\n  let sm = class_name.split('').filter(x\
    \ => x.toLowerCase() === x).length;\n  return class_name + extensions[cap - sm];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashiundefined'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpqb8hpgc4.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqb8hpgc4.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashiundefined',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/));\n    let sm_extensions = extensions.filter(e => e.match(/[a-z]/));\n\
    \    let cap_extensions_length = cap_extensions.length;\n    let sm_extensions_length\
    \ = sm_extensions.length;\n    let cap_extension_strength = cap_extensions_length\
    \ / extensions.length;\n    let sm_extension_strength = sm_extensions_length /\
    \ extensions.length;\n    let strongest_extension = extensions[0];\n    for (let\
    \ i = 1; i < extensions.length; i++) {\n        let extension_strength = extensions[i].match(/[A-Z]/).length\
    \ - extensions[i].match(/[a-z]/).length;\n        if (cap_extension_strength >\
    \ sm_extension_strength) {\n            strongest_extension = extensions[i];\n\
    \        } else if (cap_extension_strength < sm_extension_strength) {\n      \
    \      strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp2kmqpe72.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2kmqpe72.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength)\
    \ {\n\t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptcexvalq.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmptcexvalq.js:22:59)\n    at test (/tmp/tmptcexvalq.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmptcexvalq.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = -1;\n    for (let i\
    \ = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfsqfg3s2.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpfsqfg3s2.js:22:59)\n    at test (/tmp/tmpfsqfg3s2.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpfsqfg3s2.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = -1;\n    for (let i\
    \ = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfsqfg3s2.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpfsqfg3s2.js:22:59)\n    at test (/tmp/tmpfsqfg3s2.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpfsqfg3s2.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - extension_strength_count(extension);\n        if (extension_strength\
    \ > strongest_extension.length)\n            strongest_extension = extension;\n\
    \    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_9_panmt.ts(22,53): error TS2304: Cannot find name
    ''extension_strength_count''.

    '
  timestamp: 1659738822
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet sm = extension.charAt(0).toLowerCase();\n\
    \t\tlet strength = cap - sm;\n\t\tif (strength > 0) {\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplqb5bha6.ts(23,18): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmplqb5bha6.ts(23,24): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz1cpbwej.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpz1cpbwej.js:22:59)\n    at test (/tmp/tmpz1cpbwej.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpz1cpbwej.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet class_name = class_name + extension;\n\t\tlet class_name_lower\
    \ = class_name.toLowerCase();\n\t\tlet class_name_upper = class_name.toUpperCase();\n\
    \t\tlet class_name_length = class_name.length;\n\t\tlet extension_length = extension.length;\n\
    \t\tlet strength = class_name_length - extension_length;\n\t\tif (strength > max_strength)\
    \ {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\
    \t}\n\treturn class_name + \".\" + max_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi4ouasa4.ts(22,20): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    '
  timestamp: 1659738822
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let class_name = class_name + extension;\n    let class_name_lower\
    \ = class_name.toLowerCase();\n    let class_name_upper = class_name.toUpperCase();\n\
    \    let class_name_length = class_name.length;\n    let extension_length = extension.length;\n\
    \    let class_name_uppercase_length = class_name_upper.length;\n    let extension_uppercase_length\
    \ = extension_length;\n    let class_name_lowercase_length = class_name_lower.length;\n\
    \    let extension_lowercase_length = extension_length;\n    let class_name_uppercase_lowercase_length\
    \ = class_name_uppercase_length + class_name_lowercase_length;\n    let extension_uppercase_lowercase_length\
    \ = extension_uppercase_length + extension_lowercase_length;\n    let class_name_lowercase_uppercase_length\
    \ = class_name_lowercase_length + class_name_uppercase_length;\n    let extension_lowercase_uppercase_length\
    \ = extension_lowercase_length + extension_uppercase_length;\n    let class_name_uppercase_lowercase_uppercase_length\
    \ = class_name_uppercase_lowercase_length + class_name_lowercase_uppercase_length;\n\
    \    let extension_uppercase_lowercase_uppercase_length = extension_uppercase_lowercase_length\
    \ + extension_lowercase_uppercase_length;\n    let class_name_lowercase_uppercase_lowercase_uppercase_length\
    \ = class_name_lowercase_uppercase_lowercase_length + class_name_uppercase_lowercase_uppercase_length;\n\
    \    let extension_uppercase_lowercase_uppercase_lowercase_uppercase_length =\
    \ extension_uppercase_lowercase_uppercase_length + extension_lowercase_uppercase_lowercase_uppercase_length;\n\
    \    let class_name_uppercase_lowercase_uppercase_lowercase_uppercase_length =\
    \ class_name_uppercase_lowercase_uppercase_lowercase_uppercase_length + class_name_lowercase_uppercase_lowercase_uppercase_uppercase_length;\n\
    \    let extension_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length\
    \ = extension_uppercase_lowercase_uppercase_lowercase_uppercase_length + extension_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length;\n\
    \    let class_name_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length\
    \ = class_name_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length\
    \ + class_name_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length;\n\
    \    let extension_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length\
    \ = extension_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length\
    \ + extension_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length;\n\
    \    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwl0lmea9.ts(44,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpwl0lmea9.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength)\
    \ {\n\t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptcexvalq.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmptcexvalq.js:22:59)\n    at test (/tmp/tmptcexvalq.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmptcexvalq.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/)).length;\n  let sm_extensions = extensions.filter(e => e.match(/[a-z]/)).length;\n\
    \  return `${class_name}${cap_extensions - sm_extensions}`;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi0'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp76a7r3j4.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp76a7r3j4.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi0',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
    \    let strength = cap.length - sm.length;\n    if (strength > strongest_extension.length)\
    \ strongest_extension = extension;\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp9bkn7_ga.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9bkn7_ga.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let cap_extensions = extensions.filter(x\
    \ => x.match(/[A-Z]/));\n  let sm_extensions = extensions.filter(x => x.match(/[a-z]/));\n\
    \  let cap_extensions_count = cap_extensions.length;\n  let sm_extensions_count\
    \ = sm_extensions.length;\n  let cap_extension_strength = cap_extensions_count\
    \ - sm_extensions_count;\n  let sm_extension_strength = sm_extensions_count;\n\
    \  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let cap_extension = extension.match(/[A-Z]/);\n\
    \    let sm_extension = extension.match(/[a-z]/);\n    if (cap_extension_strength\
    \ > sm_extension_strength) {\n      strongest_extension = extension;\n      cap_extension_strength\
    \ = cap_extensions_count - sm_extensions_count;\n      sm_extension_strength =\
    \ sm_extensions_count;\n    } else if (cap_extension_strength < sm_extension_strength)\
    \ {\n      strongest_extension = extension;\n      cap_extension_strength = cap_extensions_count;\n\
    \      sm_extension_strength = sm_extensions_count;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.niNE'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpg9axvs_l.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpg9axvs_l.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.niNE',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n    if (extension_strength\
    \ > max_strength) {\n      max_strength = extension_strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw7lzohhw.ts(23,49): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    '
  timestamp: 1659738819
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension_strength = extensions[i].charCodeAt(0) - extensions[i].charCodeAt(0).toLowerCase();\n\
    \        if (extension_strength > strongest_extension.charCodeAt(0) - strongest_extension.charCodeAt(0).toLowerCase())\
    \ {\n            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphbeesw47.ts(20,92): error TS2339: Property ''toLowerCase''
    does not exist on type ''number''.

    ../../../../../tmp/tmphbeesw47.ts(21,104): error TS2339: Property ''toLowerCase''
    does not exist on type ''number''.

    '
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let extension_strength: number[]\
    \ = [];\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i].toUpperCase();\n    let extension_number = extension.charCodeAt(0)\
    \ - 65;\n    extension_strength.push(extension_number);\n  }\n  let max_strength\
    \ = extension_strength.reduce((a, b) => Math.max(a, b));\n  let max_index = extension_strength.indexOf(max_strength);\n\
    \  return class_name + extensions[max_index];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'WatashitEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpehf425vv.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpehf425vv.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'WatashitEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet sm = extension.charAt(0).toLowerCase();\n\
    \t\tlet strength = cap.length - sm.length;\n\t\tif (strength > strongest_extension.length)\
    \ {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpmskoxeet.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmskoxeet.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension_length = extensions[i].length;\n        let extension_strength\
    \ = extensions[i].toUpperCase().charCodeAt(0) - extensions[i].toLowerCase().charCodeAt(0);\n\
    \        if (extension_strength > 0) {\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp4i7rw3fw.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4i7rw3fw.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/)).length;\n  let sm_extensions = extensions.filter(e => e.match(/[a-z]/)).length;\n\
    \  let strength = cap_extensions - sm_extensions;\n  return class_name + extensions.find(e\
    \ => e.match(/[A-Z]/))[0] + \".\" + extensions.find(e => e.match(/[a-z]/))[0]\
    \ + \".\" + extensions[0];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprszlcodm.ts(21,34): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    ../../../../../tmp/tmprszlcodm.ts(21,84): error TS2339: Property ''find'' does
    not exist on type ''string[]''.

    '
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - extension.match(/[a-z]/).length;\n        if (extension_strength\
    \ > strongest_extension.length) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmps2659210.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmps2659210.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
    \    let strength = cap.length - sm.length;\n    if (strength > strongest_extension.length)\
    \ {\n      strongest_extension = extension;\n    }\n  }\n  return class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpq6we0jrd.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq6we0jrd.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ -1;\n\tlet strongest_extension_str: string = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension: number = extensions[i].charCodeAt(0) - 65;\n\t\t\
    let extension_str: string = extensions[i].toUpperCase();\n\t\tlet extension_str_length:\
    \ number = extension_str.length;\n\t\tlet extension_str_length_int: number = extension_str_length;\n\
    \t\tlet extension_str_length_int2: number = extension_str_length_int / 2;\n\t\t\
    let extension_str_length_int3: number = extension_str_length_int - extension_str_length_int2;\n\
    \t\tlet extension_str_length_int4: number = extension_str_length_int / 3;\n\t\t\
    let extension_str_length_int5: number = extension_str_length_int - extension_str_length_int4\
    \ - extension_str_length_int3;\n\t\tlet extension_str_length_int6: number = extension_str_length_int\
    \ / 4;\n\t\tlet extension_str_length_int7: number = extension_str_length_int -\
    \ extension_str_length_int6 - extension_str_length_int5;\n\t\tlet extension_str_length_int8:\
    \ number = extension_str_length_int / 5;\n\t\tlet extension_str_length_int9: number\
    \ = extension_str_length_int - extension_str_length_int7 - extension_str_length_int8;\n\
    \t\tlet extension_str_length_int10: number = extension_str_length_int / 6;\n\t\
    \tlet extension_str_length_int11: number = extension_str_length_int - extension_str_length_int9\
    \ - extension_str_length_int10;\n\t\tlet extension_str_length_int12: number =\
    \ extension_str_length_int / 7;\n\t\tlet extension_str_length_int13: number =\
    \ extension_str_length_int - extension_str_length_int12 - extension_str_length_int11;\n\
    \t\tlet extension_str_length_int14: number = extension_str_length_int / 8;\n\t\
    \tlet extension_str_length_int15: number = extension_str_length_int - extension_str_length_int13\
    \ - extension_str_length_int14;\n\t\tlet extension_str_length_int16: number =\
    \ extension_str_length_int / 9;\n\t\tlet extension_str_length_int17: number =\
    \ extension_str_length_int - extension_str_length_int15 - extension_str_length_int16;\n\
    \t\tlet extension_str_length_int18: number = extension_str_length_int / 10;\n\t\
    \tlet extension_str_length_int19: number = extension_str_length_int - extension_str_length_int17\
    \ - extension_str_length_int18;\n\t\t\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpznqf_4yj.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension.length;\n        if (extension_strength\
    \ > 0) {\n            strongest_extension = extension;\n        }\n    }\n   \
    \ return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpphmzjrm_.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpphmzjrm_.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz1cpbwej.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpz1cpbwej.js:22:59)\n    at test (/tmp/tmpz1cpbwej.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpz1cpbwej.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_upper: number = extension_str.toUpperCase().length;\n        let\
    \ extension_str_lower: number = extension_str.toLowerCase().length;\n        let\
    \ extension_str_length_ratio: number = extension_str_upper / extension_str_lower;\n\
    \        let extension_str_strength: number = extension_str_length_ratio - extension_str_length;\n\
    \        if (extension_str_strength > strongest_extension) {\n            strongest_extension\
    \ = extension_str_strength;\n            strongest_extension_str = extension_str;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpgpslbfcj.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgpslbfcj.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpfh4q69mw.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfh4q69mw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > strongest_extension.charCodeAt(0))\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkzzp7hdk.ts(23,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpkzzp7hdk.ts(23,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (strength > max_strength) {\n\
    \            max_strength = strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + max_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpcx_6oq7c.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpcx_6oq7c.js:22:49)\n    at test (/tmp/tmpcx_6oq7c.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpcx_6oq7c.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_length = extension.length;\n    let extension_strength = extension_length\
    \ - strongest_extension.length;\n    if (extension_strength > 0) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpn3f7sui1.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn3f7sui1.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1\n  let max_extension\
    \ = \"\"\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i]\n    let class_name = class_name + extension\n    let class_extensions\
    \ = Extensions(class_name)\n    let strength = class_extensions.length\n    if\
    \ (strength > max_strength) {\n      max_strength = strength\n      max_extension\
    \ = extension\n    }\n  }\n  return class_name + max_extension\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph1b2aktd.ts(22,22): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    ../../../../../tmp/tmph1b2aktd.ts(23,28): error TS2552: Cannot find name ''Extensions''.
    Did you mean ''extension''?

    '
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -Infinity;\n    let strongest_extension_name: string = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension)\
    \ {\n            strongest_extension = strength;\n            strongest_extension_name\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_name;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpta5s9tt2.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpta5s9tt2.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738824
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz1cpbwej.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpz1cpbwej.js:22:59)\n    at test (/tmp/tmpz1cpbwej.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpz1cpbwej.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpfh4q69mw.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfh4q69mw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwpfcdzik.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpwpfcdzik.js:22:59)\n    at test (/tmp/tmpwpfcdzik.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpwpfcdzik.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: number =\
    \ -Infinity;\n  let strongest_extension_str: string = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension_str: string = extensions[i];\n\
    \    let extension_str_length: number = extension_str.length;\n    let extension_str_upper:\
    \ number = extension_str.toUpperCase().length;\n    let extension_str_lower: number\
    \ = extension_str.toLowerCase().length;\n    let extension_str_length_ratio: number\
    \ = extension_str_upper / extension_str_lower;\n    let extension_str_strength:\
    \ number = extension_str_length_ratio * extension_str_length;\n    if (extension_str_strength\
    \ > strongest_extension) {\n      strongest_extension = extension_str_strength;\n\
    \      strongest_extension_str = extension_str;\n    }\n  }\n  return class_name\
    \ + \".\" + strongest_extension_str;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpmrw54rii.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmrw54rii.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738824
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_upper: number = extension_str.toUpperCase().charCodeAt(0);\n \
    \       let extension_str_lower: number = extension_str.toLowerCase().charCodeAt(0);\n\
    \        let extension_str_upper_small: number = extension_str_upper - extension_str_lower;\n\
    \        let extension_str_lower_small: number = extension_str_lower - extension_str_upper;\n\
    \        let extension_str_strength: number = extension_str_upper_small + extension_str_lower_small;\n\
    \        if (extension_str_strength > strongest_extension) {\n            strongest_extension\
    \ = extension_str_strength;\n            strongest_extension_str = extension_str;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpwc3zjltr.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwc3zjltr.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738824
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let extensions_count = extensions.length;\n\
    \  let extensions_count_cap = extensions_count.toUpperCase().length;\n  let extensions_count_sm\
    \ = extensions_count.toLowerCase().length;\n  let extensions_count_cap_sm = extensions_count_cap\
    \ - extensions_count_sm;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm\
    \ + 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index -\
    \ 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n\
    \  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let\
    \ extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index\
    \ = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index =\
    \ extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index\
    \ - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index -\
    \ 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n\
    \  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let\
    \ extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index\
    \ = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index =\
    \ extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index\
    \ - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index -\
    \ 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n\
    \  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let\
    \ extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index\
    \ = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index =\
    \ extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index\
    \ - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index -\
    \ 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n\
    \  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let\
    \ extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index\
    \ = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index =\
    \ extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9k4n239f.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738824
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_length_lowercase: number = extension_str_length.toLowerCase();\n\
    \        let extension_str_length_uppercase: number = extension_str_length.toUpperCase();\n\
    \        let extension_str_length_length_difference: number = extension_str_length\
    \ - extension_str_length_lowercase;\n        let extension_str_length_length_difference_ratio:\
    \ number = extension_str_length_length_difference / extension_str_length_uppercase;\n\
    \        let extension_str_length_length_difference_ratio_rounded: number = Math.ceil(extension_str_length_length_difference_ratio);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded: number\
    \ = Math.ceil(extension_str_length_length_difference_ratio_rounded);\n       \
    \ let extension_str_length_length_difference_ratio_rounded_rounded_rounded: number\
    \ = Math.ceil(extension_str_length_length_difference_ratio_rounded_rounded);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded:\
    \ number = Math.ceil(extension_str_length_length_difference_ratio_rounded_rounded_rounded);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded:\
    \ number = Math.ceil(extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_rounded:\
    \ number = Math.ceil(extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded:\
    \ number = Math.ceil(extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_rounded);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded:\
    \ number = Math.ceil(extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded:\
    \ number = Math.ceil(extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4o5ftc4b.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738824
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwpfcdzik.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpwpfcdzik.js:22:59)\n    at test (/tmp/tmpwpfcdzik.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpwpfcdzik.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension.length;\n        if (extension_strength\
    \ > 0) {\n            strongest_extension = extension;\n        }\n    }\n   \
    \ return `${class_name}.${strongest_extension}`;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp8mdyqtuy.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8mdyqtuy.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738820
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmix7u9h_.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpmix7u9h_.js:22:59)\n    at test (/tmp/tmpmix7u9h_.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpmix7u9h_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength = -1;\n\
    \  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_extension_strength)\
    \ {\n      max_extension_strength = extension_strength;\n      max_extension_name\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension_name;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvbfvzi_6.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpvbfvzi_6.js:22:59)\n    at test (/tmp/tmpvbfvzi_6.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpvbfvzi_6.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength = -1;\n\
    \  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension_strength = extensions[i].toUpperCase().charCodeAt(0) -\
    \ extensions[i].toLowerCase().charCodeAt(0);\n    if (extension_strength > max_extension_strength)\
    \ {\n      max_extension_strength = extension_strength;\n      max_extension_name\
    \ = extensions[i];\n    }\n  }\n  return class_name + \".\" + max_extension_name;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpcfhyd1ia.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcfhyd1ia.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738824
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpfh4q69mw.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfh4q69mw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\n\
    \            strongest_extension = extension;\n    }\n    return class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpn3rb9bdg.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn3rb9bdg.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738824
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tfor (let\
    \ i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\
    \tlet class_name = class_name + extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\
    \t\tlet class_name_upper = class_name.toUpperCase();\n\t\tlet class_name_length\
    \ = class_name.length;\n\t\tlet extension_length = extension.length;\n\t\tlet\
    \ extension_lower = extension.toLowerCase();\n\t\tlet extension_upper = extension.toUpperCase();\n\
    \t\tlet extension_strength = extension_length - extension_lower;\n\t\tlet extension_strength_upper\
    \ = extension_length - extension_upper;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower;\n\t\tlet extension_strength_upper = extension_length - extension_upper;\n\
    \t\tlet extension_strength_lower = extension_length - extension_lower;\n\t\tlet\
    \ extension_strength_upper = extension_length - extension_upper;\n\t\tlet extension_strength_lower\
    \ = extension_length - extension_lower;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper;\n\t\tlet extension_strength_lower = extension_length - extension_lower;\n\
    \t\tlet extension_strength_upper = extension_length - extension_upper;\n\t\tlet\
    \ extension_strength_lower = extension_length - extension_lower;\n\t\tlet extension_strength_upper\
    \ = extension_length - extension_upper;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower;\n\t\tlet extension_strength_upper = extension_length - extension_upper;\n\
    \t\tlet extension_strength_lower = extension_length - extension_lower;\n\t\tlet\
    \ extension_strength_upper = extension_length - extension_upper;\n\t\tlet extension_strength_lower\
    \ = extension_length - extension_lower;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper;\n\t\tlet extension_strength_lower = extension_length - extension_lower;\n\
    \t\tlet extension_strength_upper = extension_length - extension_upper;\n\t\tlet\
    \ extension_strength_lower = extension_length - extension_lower;\n\t\tlet extension_strength_upper\
    \ = extension_length - extension_upper;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower;\n\t\tlet extension_strength_upper = extension_length - extension_upper;\n\
    \t\tlet extension_strength_lower = extension_length - extension_lower;\n\t\tlet\
    \ extension_strength_upper = extension_length - extension_upper;\n\t\tlet extension_strength_lower\
    \ = extension_length - extension_lower\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3zls1aqo.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738824
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength = -1;\n\
    \  let max_extension_class = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i];\n    let extension_class = class_name\
    \ + extension;\n    let extension_strength = Extension_Strength(extension_class);\n\
    \    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_class = extension_class;\n    }\n\
    \  }\n  return max_extension_class;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp46oqjy1h.ts(23,30): error TS2552: Cannot find name
    ''Extension_Strength''. Did you mean ''extension_strength''?

    '
  timestamp: 1659738824
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (cap < sm) {\n   \
    \         strength = -1;\n        }\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpskofb8to.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpskofb8to.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738825
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let cap_exts = extensions.map(e\
    \ => e.toUpperCase()).sort((a, b) => b.length - a.length);\n    let sm_exts =\
    \ extensions.map(e => e.toLowerCase()).sort((a, b) => a.length - b.length);\n\
    \    let strength = cap_exts.length - sm_exts.length;\n    if (strength > 0) {\n\
    \        return `${class_name}.${cap_exts[0]}`;\n    } else if (strength < 0)\
    \ {\n        return `${class_name}.${sm_exts[0]}`;\n    } else {\n        return\
    \ class_name;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmps7shwxe_.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmps7shwxe_.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738824
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let cap = class_name.split('').map(c\
    \ => c.toUpperCase()).join('');\n  let sm = class_name.split('').map(c => c.toLowerCase()).join('');\n\
    \  let cap_num = cap.length - 1;\n  let sm_num = sm.length - 1;\n  let strength\
    \ = cap_num - sm_num;\n  let strongest_extension = extensions[0];\n  for (let\
    \ i = 1; i < extensions.length; i++) {\n    let ext_cap = extensions[i].split('').map(c\
    \ => c.toUpperCase()).join('');\n    let ext_sm = extensions[i].split('').map(c\
    \ => c.toLowerCase()).join('');\n    let ext_cap_num = ext_cap.length - 1;\n \
    \   let ext_sm_num = ext_sm.length - 1;\n    let ext_strength = ext_cap_num -\
    \ ext_sm_num;\n    if (ext_strength > strength) {\n      strongest_extension =\
    \ extensions[i];\n      strength = ext_strength;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpf5s5a2eo.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf5s5a2eo.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738825
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength: number\
    \ = -1;\n  let max_extension_class: string = class_name;\n  for (let i = 0; i\
    \ < extensions.length; i++) {\n    let extension_class: string = extensions[i];\n\
    \    let extension_strength: number = extension_class.split(\"\").reduce((a, b)\
    \ => a + b.charCodeAt(0) - b.charCodeAt(b.length - 1), 0);\n    if (extension_strength\
    \ > max_extension_strength) {\n      max_extension_strength = extension_strength;\n\
    \      max_extension_class = extension_class;\n    }\n  }\n  return max_extension_class\
    \ + \".\" + max_extension_strength;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tEN.0'\n\nshould\
    \ loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp5paerhyk.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5paerhyk.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tEN.0',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738824
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
    \    let strength = cap.length - sm.length;\n    if (strength > strongest_extension.length)\
    \ {\n      strongest_extension = extension;\n    }\n  }\n  return class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpq6we0jrd.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq6we0jrd.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp2q6uy3j.ts(23,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpp2q6uy3j.ts(23,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz1cpbwej.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpz1cpbwej.js:22:59)\n    at test (/tmp/tmpz1cpbwej.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpz1cpbwej.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_name: string =\n        extensions[0]; //\
    \ The first extension is the strongest extension.\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension: number = extensions[i].toUpperCase().charCodeAt(0)\
    \ - 65;\n        if (extension > strongest_extension) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_name = extensions[i];\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension_name;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.niNE'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp7_oom41h.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7_oom41h.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.niNE',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738825
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength = -1;\n\
    \  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension_name = extensions[i];\n    let extension_strength = class_name.split(extension_name)[1];\n\
    \    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_name = extension_name;\n    }\n \
    \ }\n  return class_name + \".\" + max_extension_name;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp60460mai.ts(23,9): error TS2365: Operator ''>'' cannot
    be applied to types ''string'' and ''number''.

    ../../../../../tmp/tmp60460mai.ts(24,7): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1659738824
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = class_name;\n    let strongest_extension_strength: number = -1;\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'eIGHt8OKe'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpddlxb_2b.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpddlxb_2b.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'eIGHt8OKe',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738825
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - extension_strength(extension);\n        if (extension_strength\
    \ > strongest_extension.length) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnuxx57xz.ts(22,53): error TS2448: Block-scoped variable
    ''extension_strength'' used before its declaration.

    '
  timestamp: 1659738824
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpfh4q69mw.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfh4q69mw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_extension_strength = -1;\n\
    \  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension_name = extensions[i];\n    let extension_strength = class_name.split(extension_name).length\
    \ - 1;\n    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_name = extension_name;\n    }\n \
    \ }\n  return class_name + \".\" + max_extension_name;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp6kc0eu0y.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6kc0eu0y.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738825
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpfh4q69mw.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfh4q69mw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension.length;\n        if (extension_strength\
    \ > 0) {\n            strongest_extension = extension;\n        }\n    }\n   \
    \ return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpphmzjrm_.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpphmzjrm_.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let max_extension_strength: number = -1;\n    for (let extension\
    \ of extensions) {\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_extension_strength)\
    \ {\n            max_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpg8weo8ws.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpg8weo8ws.js:22:59)\n    at test (/tmp/tmpg8weo8ws.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpg8weo8ws.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738825
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_index: number = 0;\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension = extensions[i];\n      \
    \  let extension_length = extension.length;\n        let extension_strength =\
    \ extension_length - strongest_extension_index;\n        if (extension_strength\
    \ > 0) {\n            strongest_extension = extension_strength;\n            strongest_extension_index\
    \ = i;\n        }\n    }\n    return `${class_name}.${extensions[strongest_extension_index]}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Boku123.32145tggg'\n\
    \nshould loosely deep-equal\n\n'Boku123.YEs.WeCaNe'\n    at test (/tmp/tmpg404a57o.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpg404a57o.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Boku123.32145tggg',\n\
    \  expected: 'Boku123.YEs.WeCaNe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738825
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ 0;\n\tlet strongest_extension_str: string = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_str = extension.charAt(0).toUpperCase()\
    \ + extension.slice(1);\n\t\tlet extension_strength = extension_str.length - extension_str.toLowerCase().length;\n\
    \t\tif (extension_strength > strongest_extension) {\n\t\t\tstrongest_extension\
    \ = extension_strength;\n\t\t\tstrongest_extension_str = extension_str;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension_str;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp5hrajhys.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5hrajhys.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738825
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_upper: number = extension_str_length - 1;\n        let extension_str_lower:\
    \ number = extension_str_length - 2;\n        let extension_str_first_upper: number\
    \ = extension_str_upper - 1;\n        let extension_str_first_lower: number =\
    \ extension_str_lower - 1;\n        let extension_str_first_first_upper: number\
    \ = extension_str_first_upper - 1;\n        let extension_str_first_first_lower:\
    \ number = extension_str_first_lower - 1;\n        let extension_str_first_first_first_upper:\
    \ number = extension_str_first_first_upper - 1;\n        let extension_str_first_first_first_lower:\
    \ number = extension_str_first_first_lower - 1;\n        let extension_str_first_first_first_first_upper:\
    \ number = extension_str_first_first_first_upper - 1;\n        let extension_str_first_first_first_first_lower:\
    \ number = extension_str_first_first_first_lower - 1;\n        let extension_str_first_first_first_first_first_upper:\
    \ number = extension_str_first_first_first_first_upper - 1;\n        let extension_str_first_first_first_first_first_lower:\
    \ number = extension_str_first_first_first_first_lower - 1;\n        let extension_str_first_first_first_first_first_first_upper:\
    \ number = extension_str_first_first_first_first_first_upper - 1;\n        let\
    \ extension_str_first_first_first_first_first_first_lower: number = extension_str_first_first_first_first_first_lower\
    \ - 1;\n        let extension_str_first_first_first_first_first_first_first_upper:\
    \ number = extension_str_first_first_first_first_first_first_first_upper - 1;\n\
    \        let extension_str_first_first_first_first_first_first_first_lower: number\
    \ = extension_str_first_first_first_first_first_first_first_lower - 1;\n     \
    \   let extension_str_first_first_first_first_first_first_first_first_upper: number\
    \ = extension_str_first_first_first_first_first_first_first_first_first_upper\
    \ - 1;\n        let extension_str_first_first_first_first_first_first_first_first_lower:\
    \ number = extension_str_first_first_first_first_first_first_first_first_first_lower\
    \ - 1;\n        let extension_str_first_first_first_first_first_first_first_first_first_upper:\
    \ number = extension_str_first_first_first_first_first_first_first_first_first_first_upper\
    \ - 1;\n        let extension_str_first_first_first_first_first_first_first_first_first_lower:\
    \ number = extension_str_first_first_first_first_first_first_first_first_first_first_lower\
    \ - 1;\n        let extension_str_first_first_first_first_first_first_first_first_first_first_upper:\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi9op0qg2.ts(44,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpi9op0qg2.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738825
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpfh4q69mw.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfh4q69mw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let extension_strength: number[]\
    \ = [];\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_letters = extension.length;\n      \
    \  let extension_lowercase_letters = extension_letters - extension_letters.toUpperCase().length;\n\
    \        let extension_strength_fraction = extension_lowercase_letters / extension_letters;\n\
    \        extension_strength.push(extension_strength_fraction);\n    }\n    let\
    \ max_strength = extension_strength.indexOf(Math.max(...extension_strength));\n\
    \    return class_name + extensions[max_strength];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz0_82hud.ts(22,81): error TS2339: Property ''toUpperCase''
    does not exist on type ''number''.

    '
  timestamp: 1659738825
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - extension.match(/[a-z]/).length;\n        if (extension_strength\
    \ > strongest_extension.length) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp2rc9xsyz.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2rc9xsyz.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738827
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = -1;\n    let extensions_length\
    \ = extensions.length;\n    for (let i = 0; i < extensions_length; i++) {\n  \
    \      let extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - CAP_SM_LENGTH;\n        if\
    \ (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfbajaqzc.ts(24,53): error TS2304: Cannot find name
    ''CAP_SM_LENGTH''.

    '
  timestamp: 1659738827
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - extension_strength(extension);\n        if (extension_strength\
    \ > strongest_extension.length) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnuxx57xz.ts(22,53): error TS2448: Block-scoped variable
    ''extension_strength'' used before its declaration.

    '
  timestamp: 1659738824
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: string =\
    \ extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n    let\
    \ sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length - sm.length;\n\
    \    if (strength > strongest_extension.length) strongest_extension = extension;\n\
    \  }\n  return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpz34lgx8w.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz34lgx8w.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738827
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp2q6uy3j.ts(23,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpp2q6uy3j.ts(23,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz1cpbwej.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpz1cpbwej.js:22:59)\n    at test (/tmp/tmpz1cpbwej.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpz1cpbwej.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz1cpbwej.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpz1cpbwej.js:22:59)\n    at test (/tmp/tmpz1cpbwej.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpz1cpbwej.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (strength > max_strength) {\n\
    \            max_strength = strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + max_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpcx_6oq7c.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpcx_6oq7c.js:22:49)\n    at test (/tmp/tmpcx_6oq7c.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpcx_6oq7c.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgsv4kbqw.ts(23,24): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpgsv4kbqw.ts(23,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738826
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ -1;\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension: number\
    \ = extensions[i].toUpperCase().charCodeAt(0) - 65;\n\t\tlet class_name_length:\
    \ number = class_name.length;\n\t\tlet extension_length: number = extension.length;\n\
    \t\tlet strength: number = class_name_length - extension_length;\n\t\tif (strength\
    \ > strongest_extension) {\n\t\t\tstrongest_extension = strength;\n\t\t}\n\t}\n\
    \treturn class_name + extensions[strongest_extension];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpexz_i394.ts(22,44): error TS2339: Property ''length''
    does not exist on type ''number''.

    '
  timestamp: 1659738826
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
    \    let strength = cap - sm;\n    if (strength > 0) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmz4lccvg.ts(23,20): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpmz4lccvg.ts(23,26): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738827
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\n\
    \            strongest_extension = extension;\n    }\n    return class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpn3rb9bdg.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn3rb9bdg.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738824
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ -1;\n\tlet strongest_extension_name: string = \"\";\n\tlet extension_counter:\
    \ number = 0;\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\textension_counter\
    \ = 0;\n\t\tfor (let j = 0; j < class_name.length; j++) {\n\t\t\tif (class_name[j].toUpperCase()\
    \ === extensions[i].toUpperCase()) {\n\t\t\t\textension_counter++;\n\t\t\t}\n\t\
    \t}\n\t\tif (extension_counter > strongest_extension) {\n\t\t\tstrongest_extension\
    \ = extension_counter;\n\t\t\tstrongest_extension_name = extensions[i];\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension_name;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpj3y0o2c8.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpj3y0o2c8.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738827
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_length_lowercase: number = extension_str_length - (extension_str_length\
    \ - 1);\n        let extension_str_length_uppercase: number = extension_str_length\
    \ - 1;\n        let extension_str_length_length_lowercase: number = extension_str_length_lowercase\
    \ - (extension_str_length_lowercase - 1);\n        let extension_str_length_length_uppercase:\
    \ number = extension_str_length_uppercase - (extension_str_length_uppercase -\
    \ 1);\n        let extension_str_length_length_length_lowercase: number = extension_str_length_length_lowercase\
    \ - (extension_str_length_length_lowercase - 1);\n        let extension_str_length_length_length_uppercase:\
    \ number = extension_str_length_length_uppercase - (extension_str_length_length_uppercase\
    \ - 1);\n        let extension_str_length_length_length_length_lowercase: number\
    \ = extension_str_length_length_length_lowercase - (extension_str_length_length_length_lowercase\
    \ - 1);\n        let extension_str_length_length_length_length_uppercase: number\
    \ = extension_str_length_length_length_uppercase - (extension_str_length_length_length_uppercase\
    \ - 1);\n        let extension_str_length_length_length_length_lowercase: number\
    \ = extension_str_length_length_length_lowercase - (extension_str_length_length_length_lowercase\
    \ - 1);\n        let extension_str_length_length_length_length_uppercase: number\
    \ = extension_str_length_length_length_uppercase - (extension_str_length_length_length_uppercase\
    \ - 1);\n        let extension_str_length_length_length_length_length_lowercase:\
    \ number = extension_str_length_length_length_length_lowercase - (extension_str_length_length_length_length_lowercase\
    \ - 1);\n        let extension_str_length_length_length_length_length_uppercase:\
    \ number = extension_str_length_length_length_length_uppercase - (extension_str_length_length_length_length_uppercase\
    \ - 1);\n        let extension_str_length_length_length_length_length_lowercase:\
    \ number = extension_str_length_length_length_length_lowercase - (extension_str_length_length_length_length_lowercase\
    \ - 1);\n        let extension_str_length_length_length_length_length_uppercase:\
    \ number = extension_str_length_length_length_length_uppercase - (extension_str_length_length_length_length_uppercase\
    \ - 1);\n        let extension_str_length_length_length_length_length_length_lowercase:\
    \ number = extension_str_length_length_length_length_length_lowercase - (extension_str_length_length_length_length_length_lowercase\
    \ - 1);\n        let extension_str_length_length_length_length_length_length_uppercase:\
    \ number = extension_str_length_length_length_length_length_uppercase - (extension_str_length_length_length_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz5698jd_.ts(39,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpz5698jd_.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738827
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpfh4q69mw.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfh4q69mw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension: number = extensions[i];\n        let cap: number = extension[0].toUpperCase().charCodeAt(0);\n\
    \        let sm: number = extension[0].toLowerCase().charCodeAt(0);\n        let\
    \ strength: number = cap - sm;\n        if (strength > strongest_extension) {\n\
    \            strongest_extension = strength;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5gjle8xx.ts(18,9): error TS2322: Type ''string''
    is not assignable to type ''number''.

    ../../../../../tmp/tmp5gjle8xx.ts(20,13): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1659738827
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - extension_strength(extension);\n\t\tif (extension_strength > strongest_extension.length)\
    \ {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5zgj9wex.ts(22,47): error TS2448: Block-scoped variable
    ''extension_strength'' used before its declaration.

    '
  timestamp: 1659738827
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_name: string = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension_letters: number = extensions[i].length;\n\
    \        let extension_letters_cap: number = extension_letters.toUpperCase().length;\n\
    \        let extension_letters_sm: number = extension_letters.toLowerCase();\n\
    \        let extension_strength: number = extension_letters_cap - extension_letters_sm;\n\
    \        if (extension_strength > strongest_extension) {\n            strongest_extension\
    \ = extension_strength;\n            strongest_extension_name = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension_name;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp32azcouu.ts(22,63): error TS2339: Property ''toUpperCase''
    does not exist on type ''number''.

    ../../../../../tmp/tmp32azcouu.ts(23,62): error TS2339: Property ''toLowerCase''
    does not exist on type ''number''.

    '
  timestamp: 1659738827
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: string =\
    \ \"\";\n\tlet strongest_extension_strength: number = -1;\n\tfor (let i = 0; i\
    \ < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\t\
    if (extension_strength > strongest_extension_strength) {\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpidajlzkz.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpidajlzkz.js:22:59)\n    at test (/tmp/tmpidajlzkz.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpidajlzkz.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738827
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz1cpbwej.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpz1cpbwej.js:22:59)\n    at test (/tmp/tmpz1cpbwej.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpz1cpbwej.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet class_name = class_name + extension;\n\t\tlet strength\
    \ = Extension_Strength(class_name);\n\t\tif (strength > max_strength) {\n\t\t\t\
    max_strength = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + max_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuqk6aucc.ts(22,20): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    ../../../../../tmp/tmpuqk6aucc.ts(23,18): error TS2304: Cannot find name ''Extension_Strength''.

    '
  timestamp: 1659738827
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - CAP_SM_LENGTH;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmple0tcl6a.ts(23,49): error TS2304: Cannot find name
    ''CAP_SM_LENGTH''.

    '
  timestamp: 1659738827
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension.length;\n        if (extension_strength\
    \ > 0) {\n            strongest_extension = extension;\n        }\n    }\n   \
    \ return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpphmzjrm_.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpphmzjrm_.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension: number = extensions[i].charCodeAt(0)\
    \ - 65;\n        if (extension > strongest_extension) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_str = extensions[i];\n       \
    \ }\n    }\n    return class_name + \".\" + strongest_extension_str;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmprf7n4qx4.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmprf7n4qx4.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738820
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz1cpbwej.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpz1cpbwej.js:22:59)\n    at test (/tmp/tmpz1cpbwej.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpz1cpbwej.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp13d1yqus.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp13d1yqus.js:22:49)\n    at test (/tmp/tmp13d1yqus.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp13d1yqus.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738827
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: string =\
    \ class_name;\n  let strongest_extension_strength: number = -1;\n  for (let i\
    \ = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n   \
    \ let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
    \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n\
    \  return strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'eIGHt8OKe'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpl4n3bx24.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl4n3bx24.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'eIGHt8OKe',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738827
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/)).length;\n  let sm_extensions = extensions.filter(e => e.match(/[a-z]/)).length;\n\
    \  let strength = cap_extensions - sm_extensions;\n  return class_name + extensions.find(e\
    \ => e.match(/[A-Z]/)).replace(/[A-Z]/g, \"\") + extensions.find(e => e.match(/[a-z]/)).replace(/[a-z]/g,\
    \ \"\") + `.${strength}`;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr5mwpbmh.ts(21,34): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    ../../../../../tmp/tmpr5mwpbmh.ts(21,97): error TS2339: Property ''find'' does
    not exist on type ''string[]''.

    '
  timestamp: 1659738827
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz1cpbwej.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpz1cpbwej.js:22:59)\n    at test (/tmp/tmpz1cpbwej.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpz1cpbwej.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: string =\
    \ extensions[0];\n\tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap - sm;\n\t\t\
    if (strength > 0) {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp147twve3.ts(23,18): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmp147twve3.ts(23,24): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738827
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
    \    let strength = cap - sm;\n    if (strength > 0) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxw_6ria7.ts(23,20): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpxw_6ria7.ts(23,26): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659738827
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_str: string\
    \ = extension.charAt(0).toUpperCase() + extension.slice(1);\n        let extension_strength\
    \ = extension_str.length - extension_str.toLowerCase().length;\n        if (extension_strength\
    \ > strongest_extension) {\n            strongest_extension = extension_strength;\n\
    \            strongest_extension_str = extension_str;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension_str;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.undefined'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp74zwl9_6.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp74zwl9_6.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.undefined',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738827
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let strength = class_name.split(extension).length - 1;\n\
    \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return `${class_name}.${max_extension}`;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpdnfap9nz.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdnfap9nz.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738828
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension = extensions[i];\n      \
    \  let extension_str: string = extension.charAt(0).toUpperCase() + extension.slice(1);\n\
    \        let extension_strength = extension_str.length - extension_str.toLowerCase().length;\n\
    \        if (extension_strength > strongest_extension) {\n            strongest_extension\
    \ = extension_strength;\n            strongest_extension_str = extension_str;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp_c68y2ep.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_c68y2ep.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738828
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (strength > max_strength) {\n\
    \            max_strength = strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + max_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpcx_6oq7c.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpcx_6oq7c.js:22:49)\n    at test (/tmp/tmpcx_6oq7c.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpcx_6oq7c.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmix7u9h_.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpmix7u9h_.js:22:59)\n    at test (/tmp/tmpmix7u9h_.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpmix7u9h_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1\n    let\
    \ max_extension = \"\"\n    for (let i = 0; i < extensions.length; i++) {\n  \
    \      let extension = extensions[i]\n        let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length\n        if (strength > max_strength) {\n\
    \            max_strength = strength\n            max_extension = extension\n\
    \        }\n    }\n    return class_name + \".\" + max_extension\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp7apqbd22.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp7apqbd22.js:22:49)\n    at test (/tmp/tmp7apqbd22.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp7apqbd22.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738828
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength)\
    \ {\n\t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptcexvalq.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmptcexvalq.js:22:59)\n    at test (/tmp/tmptcexvalq.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmptcexvalq.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    const extension = extensions[i];\n\
    \    const extension_length = extension.length;\n    const extension_strength\
    \ = extension_length - strongest_extension.length;\n    if (extension_strength\
    \ > 0) {\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp_su4v5b2.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_su4v5b2.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738829
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    let strongest_extension_strength: number = -1;\n    for\
    \ (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_erb1e5b.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp_erb1e5b.js:22:59)\n    at test (/tmp/tmp_erb1e5b.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp_erb1e5b.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738829
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpfh4q69mw.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfh4q69mw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension = extensions[i];\n      \
    \  let extension_length = extension.length;\n        let extension_strength =\
    \ extension_length - strongest_extension;\n        if (extension_strength > 0)\
    \ {\n            strongest_extension = extension_strength;\n            strongest_extension_str\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Boku123.32145tggg'\n\
    \nshould loosely deep-equal\n\n'Boku123.YEs.WeCaNe'\n    at test (/tmp/tmpxaxicx3d.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxaxicx3d.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Boku123.32145tggg',\n\
    \  expected: 'Boku123.YEs.WeCaNe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738821
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension: number =\
    \ -1;\n\tlet strongest_extension_str: string;\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension_str: string = extensions[i];\n\t\tlet extension_str_length:\
    \ number = extension_str.length;\n\t\tlet extension_str_length_lowercase: number\
    \ = extension_str_length.toLowerCase();\n\t\tlet extension_str_length_uppercase:\
    \ number = extension_str_length.toUpperCase();\n\t\tlet extension_str_length_length_difference:\
    \ number = extension_str_length_lowercase - extension_str_length_uppercase;\n\t\
    \tlet extension_str_length_length_difference2: number = extension_str_length -\
    \ extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference3:\
    \ number = extension_str_length - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference4:\
    \ number = extension_str_length - extension_str_length;\n\t\tlet extension_str_length_length_difference5:\
    \ number = extension_str_length - extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference6:\
    \ number = extension_str_length - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference7:\
    \ number = extension_str_length - extension_str_length;\n\t\tlet extension_str_length_length_difference8:\
    \ number = extension_str_length - extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference9:\
    \ number = extension_str_length - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference10:\
    \ number = extension_str_length - extension_str_length;\n\t\tlet extension_str_length_length_difference11:\
    \ number = extension_str_length - extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference12:\
    \ number = extension_str_length - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference13:\
    \ number = extension_str_length - extension_str_length;\n\t\tlet extension_str_length_length_difference14:\
    \ number = extension_str_length - extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference15:\
    \ number = extension_str_length - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference16:\
    \ number = extension_str_length - extension_str_length;\n\t\tlet extension_str_length_length_difference17:\
    \ number = extension_str_length - extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference18:\
    \ number = extension_str_length - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference19:\
    \ number = extension_str_length - extension_str_length;\n\t\tlet extension_str_length_length_difference20:\
    \ number = extension_str_length - extension_str_length_lowercase;\n\t\tlet extension_str_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp38nnx1oh.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738829
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - extension_strength_count(extension);\n\t\tif (extension_strength > strongest_extension.length)\
    \ {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr__2f90v.ts(22,47): error TS2304: Cannot find name
    ''extension_strength_count''.

    '
  timestamp: 1659738822
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1\n  let max_extension\
    \ = \"\"\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i]\n    let class_name = class_name + extension\n    let class_name_lower\
    \ = class_name.toLowerCase()\n    let class_name_upper = class_name.toUpperCase()\n\
    \    let class_name_length = class_name.length\n    let extension_length = extension.length\n\
    \    let extension_upper = extension.toUpperCase()\n    let extension_lower =\
    \ extension.toLowerCase()\n    let extension_strength = extension_length - extension_upper.length\
    \ - extension_lower.length\n    let extension_strength_abs = Math.abs(extension_strength)\n\
    \    if (extension_strength_abs > max_strength) {\n      max_strength = extension_strength_abs\n\
    \      max_extension = extension\n    }\n  }\n  return class_name + max_extension\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppyoulabs.ts(22,22): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    '
  timestamp: 1659738829
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1\n    let\
    \ max_extension = \"\"\n    for (let i = 0; i < extensions.length; i++) {\n  \
    \      let extension = extensions[i]\n        let class_name = class_name + extension\n\
    \        let class_name_lower = class_name.toLowerCase()\n        let class_name_upper\
    \ = class_name.toUpperCase()\n        let class_name_length = class_name.length\n\
    \        let extension_length = extension.length\n        let class_name_uppercase_length\
    \ = class_name_upper.length\n        let class_name_lowercase_length = class_name_lower.length\n\
    \        let extension_uppercase_length = extension_length\n        let extension_lowercase_length\
    \ = extension_length\n        if (class_name_length < extension_length) {\n  \
    \          class_name_length = extension_length\n        }\n        if (class_name_uppercase_length\
    \ < extension_uppercase_length) {\n            class_name_uppercase_length = extension_uppercase_length\n\
    \        }\n        if (class_name_lowercase_length < extension_lowercase_length)\
    \ {\n            class_name_lowercase_length = extension_lowercase_length\n  \
    \      }\n        if (class_name_length < extension_lowercase_length) {\n    \
    \        class_name_length = extension_lowercase_length\n        }\n        let\
    \ class_name_strength = class_name_length - class_name_uppercase_length - class_name_lowercase_length\n\
    \        if (class_name_strength > max_strength) {\n            max_strength =\
    \ class_name_strength\n            max_extension = extension\n        }\n    }\n\
    \    return class_name + max_extension\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8jb6dwhu.ts(22,26): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    '
  timestamp: 1659738829
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let extensions_count = extensions.length;\n\
    \  let extensions_count_cap = extensions_count.toUpperCase().length;\n  let extensions_count_sm\
    \ = extensions_count.toLowerCase().length;\n  let extensions_count_cap_sm = extensions_count_cap\
    \ - extensions_count_sm;\n  let extensions_count_cap_sm_max = extensions_count_cap_sm\
    \ > 0 ? extensions_count_cap_sm : 1;\n  let extensions_count_cap_sm_min = extensions_count_cap_sm\
    \ > 0 ? extensions_count_cap_sm - 1 : -1;\n  let extensions_count_cap_sm_max_min\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max =\
    \ extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max_min\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max_min_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max_min_max_min\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max_min_max_min_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max_min_max_min_max_min\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max_min_max_min_max_min_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max_min_max_min_max_min_max_min\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_s\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqqztjie_.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738829
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz1cpbwej.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpz1cpbwej.js:22:59)\n    at test (/tmp/tmpz1cpbwej.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpz1cpbwej.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (strength > max_strength) {\n\
    \            max_strength = strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + max_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpcx_6oq7c.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpcx_6oq7c.js:22:49)\n    at test (/tmp/tmpcx_6oq7c.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpcx_6oq7c.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1\n  let max_extension\
    \ = \"\"\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i]\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length\n\
    \    if (strength > max_strength) {\n      max_strength = strength\n      max_extension\
    \ = extension\n    }\n  }\n  return class_name + \".\" + max_extension\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp766nj61f.js:22\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp766nj61f.js:22:49)\n    at test (/tmp/tmp766nj61f.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp766nj61f.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwpfcdzik.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpwpfcdzik.js:22:59)\n    at test (/tmp/tmpwpfcdzik.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpwpfcdzik.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmix7u9h_.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpmix7u9h_.js:22:59)\n    at test (/tmp/tmpmix7u9h_.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpmix7u9h_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let extension_strengths: number[]\
    \ = [];\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    extension_strengths.push(extension_strength);\n\
    \  }\n  let max_strength = Math.max.apply(null, extension_strengths);\n  let max_index\
    \ = extension_strengths.indexOf(max_strength);\n  return class_name + extensions[max_index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'WatashieIGHt8OKe'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp6rvybcei.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6rvybcei.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'WatashieIGHt8OKe',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738829
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5dc0ikif.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp5dc0ikif.js:22:59)\n    at test (/tmp/tmp5dc0ikif.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmp5dc0ikif.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738829
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = -1;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_length_upper: number = extension_str_length;\n        let extension_str_length_lower:\
    \ number = extension_str_length;\n        for (let j = 0; j < extension_str.length;\
    \ j++) {\n            if (extension_str[j] === extension_str[j].toUpperCase())\
    \ {\n                extension_str_length_upper++;\n            }\n          \
    \  if (extension_str[j] === extension_str[j].toLowerCase()) {\n              \
    \  extension_str_length_lower++;\n            }\n        }\n        let extension_str_length_average:\
    \ number = extension_str_length_upper + extension_str_length_lower;\n        let\
    \ extension_str_length_difference: number = extension_str_length_average - extension_str_length;\n\
    \        if (extension_str_length_difference > strongest_extension) {\n      \
    \      strongest_extension = extension_str_length_difference;\n            strongest_extension_str\
    \ = extension_str;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Boku123.32145tggg'\n\
    \nshould loosely deep-equal\n\n'Boku123.YEs.WeCaNe'\n    at test (/tmp/tmptg1bnfwq.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmptg1bnfwq.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Boku123.32145tggg',\n\
    \  expected: 'Boku123.YEs.WeCaNe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738829
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet class_name = class_name + extension;\n\t\tlet strength\
    \ = Extension_Strength(class_name);\n\t\tif (strength > max_strength) {\n\t\t\t\
    max_strength = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + max_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuqk6aucc.ts(22,20): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    ../../../../../tmp/tmpuqk6aucc.ts(23,18): error TS2304: Cannot find name ''Extension_Strength''.

    '
  timestamp: 1659738827
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbk213syr.ts(23,53): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    '
  timestamp: 1659738829
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let strength = class_name.split(extension).length\
    \ - 1;\n        if (strength > max_strength) {\n            max_extension = extension;\n\
    \            max_strength = strength;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp9wqdn6gk.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9wqdn6gk.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738829
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - CAP_TO_STRONG[extension.charAt(0)] - SM_TO_STRONG[extension.charAt(extension_length\
    \ - 1)];\n    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoo1s0urb.ts(23,49): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    ../../../../../tmp/tmpoo1s0urb.ts(23,86): error TS2304: Cannot find name ''SM_TO_STRONG''.

    '
  timestamp: 1659738829
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmix7u9h_.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpmix7u9h_.js:22:59)\n    at test (/tmp/tmpmix7u9h_.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpmix7u9h_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_length = extension.length;\n    let extension_strength = extension_length\
    \ - extension_strength_count(extension);\n    if (extension_strength > strongest_extension.length)\
    \ strongest_extension = extension;\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjph0w1ro.ts(22,49): error TS2304: Cannot find name
    ''extension_strength_count''.

    '
  timestamp: 1659738829
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbk213syr.ts(23,53): error TS2304: Cannot find name
    ''CAP_TO_STRONG''.

    '
  timestamp: 1659738829
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmix7u9h_.js:22\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmpmix7u9h_.js:22:59)\n    at test (/tmp/tmpmix7u9h_.js:34:22)\n\
    \    at Object.<anonymous> (/tmp/tmpmix7u9h_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let extension_strength: number[]\
    \ = [];\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i];\n    let extension_letters = extension.length;\n    let extension_lowercase_letters\
    \ = extension_letters - extension_letters.toUpperCase().length;\n    extension_strength[i]\
    \ = extension_letters - extension_lowercase_letters;\n  }\n  let max_strength\
    \ = extension_strength.indexOf(Math.max(...extension_strength));\n  return class_name\
    \ + extensions[max_strength];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpac7xye85.ts(22,77): error TS2339: Property ''toUpperCase''
    does not exist on type ''number''.

    '
  timestamp: 1659738829
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_upper: number = extension_str.toUpperCase().length;\n        let\
    \ extension_str_lower: number = extension_str.toLowerCase().length;\n        let\
    \ extension_str_length_ratio: number = extension_str_upper - extension_str_lower;\n\
    \        let extension_str_strength: number = extension_str_length_ratio * CAP\
    \ - extension_str_lower;\n        if (extension_str_strength > strongest_extension)\
    \ {\n            strongest_extension = extension_str_strength;\n            strongest_extension_str\
    \ = extension_str;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7g5cnrh7.ts(26,75): error TS2304: Cannot find name
    ''CAP''.

    '
  timestamp: 1659738829
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_length = extension.length;\n    let extension_strength = extension_length\
    \ - extension_strength;\n    if (extension_strength > strongest_extension.length)\
    \ {\n      strongest_extension = extension;\n    }\n  }\n  return class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1e7rr00g.ts(22,49): error TS2448: Block-scoped variable
    ''extension_strength'' used before its declaration.

    '
  timestamp: 1659738829
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet class_name = class_name + extension;\n\t\tlet class_name_lower\
    \ = class_name.toLowerCase();\n\t\tlet class_name_upper = class_name.toUpperCase();\n\
    \t\tlet class_name_length = class_name.length;\n\t\tlet extension_length = extension.length;\n\
    \t\tlet strength = class_name_length - extension_length;\n\t\tif (strength > max_strength)\
    \ {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\
    \t}\n\treturn class_name + max_extension;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa4tj_4d0.ts(22,20): error TS2448: Block-scoped variable
    ''class_name'' used before its declaration.

    '
  timestamp: 1659738829
