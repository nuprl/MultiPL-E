name: HumanEval_111_histogram
language: ts
prompt: "//Given a string representing a space separated lowercase letters, return\
  \ an object\n// of the letter with the most repetition and containing the corresponding\
  \ count.\n// If several letters have the same occurrence, return all of them.\n\
  // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n//\
  \ >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c\
  \ a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n\
  // >>> histogram(\"\")\n// {}\nfunction histogram(test: string): {[key: string]:\
  \ number} {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"\
  ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2,\
  \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1,\
  \ \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
  : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\":\
  \ 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
  \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
  a\": 1});\n}\n\ntest();"
completions: ["  const histogram: {[key: string]: number} = {};\n  test.split(\" \"\
    ).forEach((letter) => {\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  const testArray = test.split(\" \");\n  testArray.forEach((letter:\
    \ string) => {\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test.split(\" \").forEach((letter: string) => {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test.charAt(i);\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  test.split(' ').forEach((letter:\
    \ string) => {\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n \
    \   histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (let i = 0; i <\
    \ test.length; i++) {\n    const letter = test[i];\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n \
    \   histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter =\
    \ test[i];\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1\
    \ : 1;\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n    if (histogram[letter]\
    \ === undefined) {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n\
    \  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number} =\
    \ {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n\
    \  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let i =\
    \ 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test[i];\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  test.split(\" \").forEach((letter) => {\n \
    \   const count = histogram[letter] ? histogram[letter] + 1 : 1;\n    histogram[letter]\
    \ = count;\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test.split(\" \").forEach((letter) => {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  test.split(\" \").forEach((letter:\
    \ string) => {\n    const letterCount = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n    histogram[letter] = letterCount;\n  });\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  test.split(\" \").forEach((letter)\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  for (const\
    \ letter of test.toLowerCase().split(' ')) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (const letter of\
    \ test.toLowerCase().split(\" \")) {\n    histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  test.split(\" \").forEach((letter) => {\n \
    \   histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  test.split(' ').forEach((letter)\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  for (const\
    \ letter of test.toLowerCase().split(\" \")) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  const splitted = test.split(\" \");\n  for (const letter of\
    \ splitted) {\n    histogram[letter] = histogram[letter] ? histogram[letter] +\
    \ 1 : 1;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test\n    .split(\" \")\n    .forEach((letter) => {\n     \
    \ histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n    });\n\
    \  return histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n\
    \  test.split(' ').forEach(letter => {\n    const count = histogram[letter] ?\
    \ histogram[letter] + 1 : 1;\n    histogram[letter] = count;\n  });\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  test\n\
    \    .split(\" \")\n    .forEach((letter) => {\n      histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n    });\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  test.split(\" \").forEach((letter) => {\n \
    \   const count = histogram[letter] ? histogram[letter] + 1 : 1;\n    histogram[letter]\
    \ = count;\n  });\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (const letter of test.split(\" \")) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter =\
    \ test[i];\n    const count = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \    histogram[letter] = count;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ any = {};\n  test.split(\" \").forEach((letter: string) => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n", "  const\
    \ histogram: {[key: string]: number} = {};\n  test.split(\" \").forEach(letter\
    \ => {\n    const count = histogram[letter] ? histogram[letter] + 1 : 1;\n   \
    \ histogram[letter] = count;\n  });\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  for (const letter of test.toLowerCase().split(\"\
    \ \")) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  for (const\
    \ letter of test.toLowerCase().split(\" \")) {\n    if (histogram[letter] == null)\
    \ {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  test.split(\"\
    \ \").forEach((letter: string) => {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n \
    \   histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  test.split(\" \").forEach((letter:\
    \ string) => {\n    if (histogram[letter] == null) {\n      histogram[letter]\
    \ = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (let i = 0; i <\
    \ test.length; i++) {\n    const letter = test[i];\n    histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  test\n    .split(\" \")\n    .forEach((letter)\
    \ => {\n      histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  test.split(\" \").forEach((letter) => {\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  });\n  return histogram;\n}\n", "  const histogram: any = {};\n  for\
    \ (const letter of test.toLowerCase().split(\" \")) {\n    histogram[letter] =\
    \ (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  for (const letter of test.toLowerCase().split(\"\
    \ \")) {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 :\
    \ 1;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n    const\
    \ count = histogram[letter] ? histogram[letter] + 1 : 1;\n    histogram[letter]\
    \ = count;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test\n    .split(\" \")\n    .forEach((letter: string) => {\n\
    \      histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  test.split(' ').forEach((letter)\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  for (const letter of test.toLowerCase().split(\"\
    \ \")) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  test.split(' ').forEach(letter\
    \ => {\n    const count = histogram[letter] ? histogram[letter] + 1 : 1;\n   \
    \ histogram[letter] = count;\n  });\n  return histogram;\n}\n", "  const histogram:\
    \ any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n  \
    \  } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n}\n",
  "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
    \ letter = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  test.split(\" \").forEach((letter)\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (let i = 0; i <\
    \ test.length; i++) {\n    const letter = test[i];\n    const count = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n    histogram[letter] = count;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  test.split(\"\
    \ \").forEach(letter => {\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test.split(\" \").forEach((letter) => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n", "  const\
    \ histogram: {[key: string]: number} = {};\n  for (const letter of test.toLowerCase().split(\"\
    \ \")) {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 :\
    \ 1;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n\
    \    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (let i = 0; i <\
    \ test.length; i++) {\n    const letter = test.charAt(i);\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  const testArray = test.split(\" \");\n  for (let i = 0; i <\
    \ testArray.length; i++) {\n    const letter = testArray[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  test.split(\" \").forEach(letter => {\n    const count = histogram[letter]\
    \ ?? 0;\n    histogram[letter] = count + 1;\n  });\n  return histogram;\n}\n",
  "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
    \ letter = test.charAt(i);\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (const letter of\
    \ test.toLowerCase().split(\" \")) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (let i = 0; i <\
    \ test.length; i++) {\n    const letter = test.charAt(i);\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n  }\n\
    \  return histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n\
    \  for (const letter of test.toLowerCase().split(\" \")) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  for (let i = 0; i < test.length; i++) {\n \
    \   const letter = test[i];\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for\
    \ (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  for (const letter of test.toLowerCase().split(\"\
    \ \")) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  test.split('\
    \ ').forEach(letter => {\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter =\
    \ test.charAt(i);\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (const letter of\
    \ test.toLowerCase().split(\" \")) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n\
    \    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n    \
    \  histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  test\n    .split(\" \")\n    .forEach(letter\
    \ => {\n      histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  for (const\
    \ letter of test.toLowerCase().split(\" \")) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test\n    .split(\" \")\n    .map((letter: string) => {\n \
    \     histogram[letter] = (histogram[letter] || 0) + 1;\n      return histogram;\n\
    \    })\n    .reduce((acc: {[key: string]: number}, current: {[key: string]: number})\
    \ => {\n      for (let key in current) {\n        acc[key] = Math.max(acc[key],\
    \ current[key]);\n      }\n      return acc;\n    }, {});\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (let i = 0; i <\
    \ test.length; i++) {\n    const letter = test[i];\n    const count = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n    histogram[letter] = count;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  test.split(\"\
    \ \").forEach((letter) => {\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test.split(\" \").forEach((letter) => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n", "  const\
    \ histogram: {[key: string]: number} = {};\n  test.split(\" \").forEach((letter)\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  for (const\
    \ letter of test.toLowerCase().split(\" \")) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter =\
    \ test.charAt(i);\n    if (histogram[letter] == null) {\n      histogram[letter]\
    \ = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (const letter of\
    \ test.toLowerCase().split(\" \")) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (const letter of test.toLowerCase().split(\" \")) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  test.split(\" \").forEach((letter) => {\n \
    \   histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n\
    \  return histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n\
    \  test.split(' ').forEach(letter => {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  const testArray = test.split(\" \");\n  for (let i = 0; i <\
    \ testArray.length; i++) {\n    const letter = testArray[i];\n    const count\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n    histogram[letter] = count;\n\
    \  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number} =\
    \ {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n\
    \    if (histogram[letter]) {\n      histogram[letter] += 1;\n    } else {\n \
    \     histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n", "  const\
    \ histogram: any = {};\n  for (const letter of test.split(\" \")) {\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n\
    \  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let i =\
    \ 0; i < test.length; i++) {\n    const letter = test[i];\n    const count = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n    histogram[letter] = count;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n\
    \  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number} =\
    \ {};\n  test.split(\" \").forEach((letter) => {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test.split(\" \").forEach((letter: string) => {\n    if (histogram[letter]\
    \ === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]\
    \ += 1;\n    }\n  });\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if\
    \ (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter]\
    \ = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test.split(\" \").forEach((letter) => {\n    if (histogram[letter])\
    \ {\n      histogram[letter] += 1;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test.split(\" \").forEach((letter) => {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (let i = 0; i <\
    \ test.length; i++) {\n    const letter = test[i];\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test.split(\" \").forEach(letter => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n", "  const\
    \ histogram: {[key: string]: number} = {};\n  test.split(\" \").forEach(letter\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n    \
    \  histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  test.split(\" \").forEach((letter) => {\n \
    \   histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  test.split(' ').forEach((letter)\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let i\
    \ = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n    \
    \  histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  for (const letter of test.toLowerCase().split(\"\
    \ \")) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]\
    \ += 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n\
    \    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n  \
    \  } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    const count = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n    histogram[letter] = count;\n  }\n  return histogram;\n}\n", " \
    \ const histogram: any = {};\n  test.split(\" \").forEach((letter: string) =>\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (const letter of\
    \ test.toLowerCase().split(\" \")) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (const letter of test.toLowerCase().split(\" \")) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n    \
    \  histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  test.split(\" \").forEach((letter: string)\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let i\
    \ = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (let i = 0; i <\
    \ test.length; i++) {\n    const letter = test[i];\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test.split(\" \").forEach((letter) => {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test.charAt(i);\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (const letter of\
    \ test.toLowerCase().split(\" \")) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n", "  const\
    \ histogram: {[key: string]: number} = {};\n  test.split(' ').forEach(letter =>\
    \ {\n    const count = histogram[letter] ? histogram[letter] + 1 : 1;\n    histogram[letter]\
    \ = count;\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  const splitTest = test.split(\" \");\n  for (const letter of\
    \ splitTest) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n \
    \ return histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n\
    \  for (const letter of test.toLowerCase().split(\" \")) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  test.split(\" \").forEach(letter => {\n   \
    \ histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (let i = 0; i <\
    \ test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n\
    \  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let i =\
    \ 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  const testArray = test.split(\" \");\n  for (let i = 0; i < testArray.length;\
    \ i++) {\n    const letter = testArray[i];\n    if (histogram[letter]) {\n   \
    \   histogram[letter] += 1;\n    } else {\n      histogram[letter] = 1;\n    }\n\
    \  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number} =\
    \ {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  test.split(\" \").forEach((letter) => {\n \
    \   histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (let i = 0; i <\
    \ test.length; i++) {\n    const letter = test[i];\n    const count = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n    histogram[letter] = count;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  const splitTest = test.split('\
    \ ');\n  for (const letter of splitTest) {\n    const letterCount = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n    histogram[letter] = letterCount;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  for (const letter of test.toLowerCase().split(\"\
    \ \")) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  test.split(\"\
    \ \").forEach((letter) => {\n    const count = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n    histogram[letter] = count;\n  });\n  return histogram;\n}\n",
  "  const histogram: any = {};\n  for (const letter of test.toLowerCase().split(\"\
    \ \")) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  test.split(\"\
    \ \").forEach(letter => {\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test.split(\" \").forEach((letter) => {\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (const letter of\
    \ test.toLowerCase().split(\" \")) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter =\
    \ test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else\
    \ {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n", "  const\
    \ histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter\
    \ = test.charAt(i);\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (let i = 0; i <\
    \ test.length; i++) {\n    const letter = test.charAt(i);\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]\
    \ += 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if\
    \ (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter]\
    \ = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test\n    .split(\" \")\n    .forEach((letter) => {\n     \
    \ histogram[letter] = (histogram[letter] || 0) + 1;\n    });\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (const letter of\
    \ test.toLowerCase().split(' ')) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if\
    \ (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter]\
    \ = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n \
    \   histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const letter = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (const letter of\
    \ test.toLowerCase().split(\" \")) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n \
    \   histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (const letter of test.split(\" \"))\
    \ {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  test.split(\" \").forEach((letter)\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  for (const letter of test.toLowerCase().split(\"\
    \ \")) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test[i];\n    histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  test.split(\" \").forEach(letter => {\n   \
    \ histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (const letter of test.toLowerCase().split(\"\
    \ \")) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: any = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const letter = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  for (const letter of test.toLowerCase().split(\"\
    \ \")) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  test.split(\"\
    \ \").forEach((letter) => {\n    histogram[letter] = (histogram[letter] || 0)\
    \ + 1;\n  });\n  return histogram;\n}\n", "  const histogram: any = {};\n  for\
    \ (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]\
    \ += 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  for (const letter of test.toLowerCase().split(' ')) {\n   \
    \ histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  test\n    .split(\"\
    \ \")\n    .forEach((letter: string) => {\n      histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n    });\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  test.split(\" \").forEach(letter => {\n    histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  for (let i = 0; i < test.length; i++) {\n \
    \   const letter = test[i];\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for\
    \ (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n  \
    \  if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter]\
    \ = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  test.split(\" \").forEach((letter) => {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n}\n", "  const\
    \ histogram: {[key: string]: number} = {};\n  test.split(\" \").forEach((letter)\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n", "  const histogram: any = {};\n  for (let i\
    \ = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n    \
    \  histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  test\n    .split(\" \")\n    .forEach((letter:\
    \ string) => {\n      histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n    });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n \
    \   histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  test.split(' ').forEach((letter: string)\
    \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return\
    \ histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n  test.split('\
    \ ').forEach(letter => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n\
    \  });\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ any = {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  test.split(\" \").forEach((letter) => {\n \
    \   histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n\
    \  return histogram;\n}\n", "  const histogram: {[key: string]: number} = {};\n\
    \  for (const letter of test.toLowerCase().split(\" \")) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ any = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n\
    \    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n    \
    \  histogram[letter] = 1;\n    }\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ any = {};\n  for (const letter of test.split(\" \")) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  for (let i = 0; i < test.length; i++) {\n \
    \   const letter = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: {[key: string]: number} = {};\n  for (const letter of\
    \ test.toLowerCase().split(\" \")) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n", "  const counts: Record<string,\
    \ number> = {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n \
    \   counts[letter] = (counts[letter] || 0) + 1;\n  }\n  return counts;\n}\n",
  "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
    \ letter = test[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n\
    \    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  const histogram: any = {};\n  test.split(\" \").forEach((letter: string)\
    \ => {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  });\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  test.split(\" \").forEach(letter => {\n    histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n}\n", "  const histogram:\
    \ any = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n}\n", "  const histogram:\
    \ {[key: string]: number} = {};\n  test.split(\" \").forEach(letter => {\n   \
    \ const count = histogram[letter] ? histogram[letter] + 1 : 1;\n    histogram[letter]\
    \ = count;\n  });\n  return histogram;\n}\n", "  const histogram: {[key: string]:\
    \ number} = {};\n  for (const letter of test.toLowerCase().split(\" \")) {\n \
    \   const count = histogram[letter] ? histogram[letter] + 1 : 1;\n    histogram[letter]\
    \ = count;\n  }\n  return histogram;\n}\n", "  const histogram: any = {};\n  for\
    \ (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter])\
    \ {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n\
    \    }\n  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number}\
    \ = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  });\n  return histogram;\n}\n", "  const histogram: any = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if\
    \ (histogram[letter] == null) {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n\
    \  }\n  return histogram;\n}\n", "  const histogram: {[key: string]: number} =\
    \ {};\n  test.split(\" \").forEach((letter) => {\n    histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n}\n", "  const counts:\
    \ {[key: string]: number} = {};\n  for (let i = 0; i < test.length; i++) {\n \
    \   const letter = test.charAt(i);\n    const count = counts[letter] ? counts[letter]\
    \ + 1 : 1;\n    counts[letter] = count;\n  }\n  return counts;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
