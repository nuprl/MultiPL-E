{
  "language": "ts",
  "name": "HumanEval_97_multiply",
  "results": [
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 1) {\n        return b;\n    }\n    if (b === 1) {\n        return a;\n    }\n    if (a === -1) {\n        return -a;\n    }\n    if (b === -1) {\n        return -b;\n    }\n    let product = a % b;\n    if (product === 0) {\n        return 0;\n    }\n    return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n148\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpzyxjxqrq.js:41:12)\n    at Object.<anonymous> (/tmp/tmpzyxjxqrq.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 148,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  if (a < 0 || b < 0) {\n    return 0\n  }\n  if (a > b) {\n    return 0\n  }\n  if (a === 1) {\n    return b\n  }\n  if (b === 1) {\n    return a\n  }\n  if (a === -1) {\n    return -b\n  }\n  if (b === -1) {\n    return -a\n  }\n  let product = 0\n  let sign = 1\n  let a = Math.abs(a)\n  let b = Math.abs(b)\n  while (a !== 0 && b !== 0) {\n    const c = a % b\n    product = product + c\n    a = Math.floor(a/b) | 0\n    b = Math.floor(b/b) | 0\n  }\n  if (a === 0) {\n    return product\n  }\n  if (b === 0) {\n    return -product\n  }\n  return product\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpaduy6nx2.ts(13,19): error TS2300: Duplicate identifier 'a'.\n../../../../tmp/tmpaduy6nx2.ts(13,30): error TS2300: Duplicate identifier 'b'.\n../../../../tmp/tmpaduy6nx2.ts(40,7): error TS2300: Duplicate identifier 'a'.\n../../../../tmp/tmpaduy6nx2.ts(41,7): error TS2300: Duplicate identifier 'b'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a < 0 ? multiply(-a, b) : multiply(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpoc94pwdx.js:14\n    if (b === 0) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at multiply (/tmp/tmpoc94pwdx.js:14:5)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0) {\n    return b;\n  }\n  return a % b + multiply(a / b, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n560.3600973236009\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmppa735q3r.js:25:12)\n    at Object.<anonymous> (/tmp/tmppa735q3r.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 560.3600973236009,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (a === 0) return 0;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a === -1) return -b;\n  if (b === -1) return a;\n  if (a === -2) return -b;\n  if (b === -2) return a;\n  if (a === -3) return -b;\n  if (b === -3) return a;\n  if (a === -4) return -b;\n  if (b === -4) return a;\n  if (a === -5) return -b;\n  if (b === -5) return a;\n  if (a === -6) return -b;\n  if (b === -6) return a;\n  if (a === -7) return -b;\n  if (b === -7) return a;\n  if (a === -8) return -b;\n  if (b === -8) return a;\n  if (a === -9) return -b;\n  if (b === -9) return a;\n  if (a === -10) return -b;\n  if (b === -10) return a;\n  if (a === -11) return -b;\n  if (b === -11) return a;\n  if (a === -12) return -b;\n  if (b === -12) return a;\n  if (a === -13) return -b;\n  if (b === -13) return a;\n  if (a === -14) return -b;\n  if (b === -14) return a;\n  if (a === -15) return -b;\n  if (b === -15) return a;\n  if (a === -16) return -b;\n  if (b === -16) return a;\n  if (a === -17) return -b;\n  if (b === -17) return a;\n  if (a === -18) return -b;\n  if (b === -18) return a;\n  if (a === -19) return -b;\n  if (b === -19) return a;\n  if (a === -20) return -b;\n  if (b === -20) return a;\n  if (a === -21) return -b;\n  if (b === -21) return a;\n  if (a === -22) return -b;\n  if (b === -22) return a;\n  if (a === -23) return -b;\n  if (b === -23) return a;\n  if (a === -24) return -b;\n  if (b === -24) return a;\n  if (a === -25) return -b;\n  if (b === -25) return a;\n  if (a === -26) return -b;\n  if (b === -26) return a;\n  if (a === -27) return -b;\n  if (b === -27) return a;\n  if (a === -28) return -b;\n  if (b === -28) return a;\n  if (a === -29) return -b;\n  if (b === -29) return a;\n  if (a === -30) return -b;\n  if (b === -30) return a;\n  if (a === -31) return -b;\n  if (b === -31) return a;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4dl4yo56.ts(96,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product: number = 0;\n  while (b > 0) {\n    const remainder = b % 10;\n    product = product * 10 + remainder;\n    b = Math.floor(Math.floor(a / 10) * 10);\n    a = Math.floor(a % 10);\n  }\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp3p0uwv2h.js:26:12)\n    at Object.<anonymous> (/tmp/tmp3p0uwv2h.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return multiply(b, a % b);\n  }\n  return multiply(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n412\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpipgpimor.js:37:12)\n    at Object.<anonymous> (/tmp/tmpipgpimor.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 412,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) return 0;\n    if (a === 0) return 0;\n    if (a === 1) return b;\n    if (b === 1) return a;\n    if (a === -1) return -b;\n    if (b === -1) return a;\n    if (a === -2) return -b;\n    if (b === -2) return a;\n    if (a === -3) return -b;\n    if (b === -3) return a;\n    if (a === -4) return -b;\n    if (b === -4) return a;\n    if (a === -5) return -b;\n    if (b === -5) return a;\n    if (a === -6) return -b;\n    if (b === -6) return a;\n    if (a === -7) return -b;\n    if (b === -7) return a;\n    if (a === -8) return -b;\n    if (b === -8) return a;\n    if (a === -9) return -b;\n    if (b === -9) return a;\n    if (a === -10) return -b;\n    if (b === -10) return a;\n    if (a === -11) return -b;\n    if (b === -11) return a;\n    if (a === -12) return -b;\n    if (b === -12) return a;\n    if (a === -13) return -b;\n    if (b === -13) return a;\n    if (a === -14) return -b;\n    if (b === -14) return a;\n    if (a === -15) return -b;\n    if (b === -15) return a;\n    if (a === -16) return -b;\n    if (b === -16) return a;\n    if (a === -17) return -b;\n    if (b === -17) return a;\n    if (a === -18) return -b;\n    if (b === -18) return a;\n    if (a === -19) return -b;\n    if (b === -19) return a;\n    if (a === -20) return -b;\n    if (b === -20) return a;\n    if (a === -21) return -b;\n    if (b === -21) return a;\n    if (a === -22) return -b;\n    if (b === -22) return a;\n    if (a === -23) return -b;\n    if (b === -23) return a;\n    if (a === -24) return -b;\n    if (b === -24) return a;\n    if (a === -25) return -b;\n    if (b === -25) return a;\n    if (a === -26) return -b;\n    if (b === -26) return a;\n    if (a === -27) return -b;\n    if (b === -27) return a;\n    if (a === -28) return -b;\n    if (b === -28) return a;\n    if (a === -29) return -b;\n    if (b === -29) return a;\n    if (a === -30) return -b;\n    if (b === -30) return a;\n    if (a === -31) return -b;\n    if (b === -31) return a;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0m475fje.ts(96,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) return 0;\n    if (a === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a === b) return 0;\n    if (a === 0) return 0;\n    if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfpracdfd.ts(88,9): error TS1005: ')' expected.\n../../../../tmp/tmpfpracdfd.ts(104,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 1) {\n        return b;\n    }\n    if (b === 1) {\n        return a;\n    }\n    if (a === -1) {\n        return -(b);\n    }\n    if (b === -1) {\n        return -(a);\n    }\n    if (a === -2) {\n        return -(b);\n    }\n    if (b === -2) {\n        return -(a);\n    }\n    if (a === -3) {\n        return -(b);\n    }\n    if (b === -3) {\n        return -(a);\n    }\n    if (a === -4) {\n        return -(b);\n    }\n    if (b === -4) {\n        return -(a);\n    }\n    if (a === -5) {\n        return -(b);\n    }\n    if (b === -5) {\n        return -(a);\n    }\n    if (a === -6) {\n        return -(b);\n    }\n    if (b === -6) {\n        return -(a);\n    }\n    if (a === -7) {\n        return -(b);\n    }\n    if (b === -7) {\n        return -(a);\n    }\n    if (a === -8) {\n        return -(b);\n    }\n    if (b === -8) {\n        return -(a);\n    }\n    if (a === -9) {\n        return -(b);\n    }\n    if (b === -9) {\n        return -(a);\n    }\n    if (a === -10) {\n        return -(b);\n    }\n    if (b === -10) {\n        return -(a);\n    }\n    if (a === -11) {\n        return -(b);\n    }\n    if (b === -11) {\n        return -(a);\n    }\n    if (a === -12) {\n        return -(b);\n    }\n    if (b === -12) {\n        return -(a);\n    }\n    if (a === -13) {\n        return -(b);\n    }\n    if (b === -13) {\n        return -(a);\n    }\n    if (a === -14) {\n        return -(b);\n    }\n    if (b === -14) {\n        return -(a);\n    }\n    if (a === -15) {\n        return -(b);\n    }\n    if (b === -15) {\n        return -(a);\n    }\n    if (a === -16) {\n        return -(b);\n    }\n    if (b === -16) {\n        return -(a);\n    }\n    if (a === -17) {\n        return -(b);\n    }\n    if (b === -17) {\n        return -(a);\n    }\n    if (a === -18) {\n        return -(b);\n    }\n    if (b === -18) {\n        return -(a);\n    }\n    if (a === -19) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp49im4mzw.ts(151,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) return 0;\n    if (a === 0) return 0;\n    if (a === 1) return b;\n    if (b === 1) return a;\n    if (a === -1) return -b;\n    if (b === -1) return a;\n    if (a === -2) return -b;\n    if (b === -2) return a;\n    if (a === -3) return -b;\n    if (b === -3) return a;\n    if (a === -4) return -b;\n    if (b === -4) return a;\n    if (a === -5) return -b;\n    if (b === -5) return a;\n    if (a === -6) return -b;\n    if (b === -6) return a;\n    if (a === -7) return -b;\n    if (b === -7) return a;\n    if (a === -8) return -b;\n    if (b === -8) return a;\n    if (a === -9) return -b;\n    if (b === -9) return a;\n    if (a === -10) return -b;\n    if (b === -10) return a;\n    if (a === -11) return -b;\n    if (b === -11) return a;\n    if (a === -12) return -b;\n    if (b === -12) return a;\n    if (a === -13) return -b;\n    if (b === -13) return a;\n    if (a === -14) return -b;\n    if (b === -14) return a;\n    if (a === -15) return -b;\n    if (b === -15) return a;\n    if (a === -16) return -b;\n    if (b === -16) return a;\n    if (a === -17) return -b;\n    if (b === -17) return a;\n    if (a === -18) return -b;\n    if (b === -18) return a;\n    if (a === -19) return -b;\n    if (b === -19) return a;\n    if (a === -20) return -b;\n    if (b === -20) return a;\n    if (a === -21) return -b;\n    if (b === -21) return a;\n    if (a === -22) return -b;\n    if (b === -22) return a;\n    if (a === -23) return -b;\n    if (b === -23) return a;\n    if (a === -24) return -b;\n    if (b === -24) return a;\n    if (a === -25) return -b;\n    if (b === -25) return a;\n    if (a === -26) return -b;\n    if (b === -26) return a;\n    if (a === -27) return -b;\n    if (b === -27) return a;\n    if (a === -28) return -b;\n    if (b === -28) return a;\n    if (a === -29) return -b;\n    if (b === -29) return a;\n    if (a === -30) return -b;\n    if (b === -30) return a;\n    if (a === -31) return -b;\n    if (b === -31) return a;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0m475fje.ts(96,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1) {\n    return -a;\n  }\n  if (b === -1) {\n    return -b;\n  }\n  if (a === -2) {\n    return -a;\n  }\n  if (b === -2) {\n    return -b;\n  }\n  if (a === -3) {\n    return -a;\n  }\n  if (b === -3) {\n    return -b;\n  }\n  if (a === -4) {\n    return -a;\n  }\n  if (b === -4) {\n    return -b;\n  }\n  if (a === -5) {\n    return -a;\n  }\n  if (b === -5) {\n    return -b;\n  }\n  if (a === -6) {\n    return -a;\n  }\n  if (b === -6) {\n    return -b;\n  }\n  if (a === -7) {\n    return -a;\n  }\n  if (b === -7) {\n    return -b;\n  }\n  if (a === -8) {\n    return -a;\n  }\n  if (b === -8) {\n    return -b;\n  }\n  if (a === -9) {\n    return -a;\n  }\n  if (b === -9) {\n    return -b;\n  }\n  if (a === -10) {\n    return -a;\n  }\n  if (b === -10) {\n    return -b;\n  }\n  if (a === -11) {\n    return -a;\n  }\n  if (b === -11) {\n    return -b;\n  }\n  if (a === -12) {\n    return -a;\n  }\n  if (b === -12) {\n    return -b;\n  }\n  if (a === -13) {\n    return -a;\n  }\n  if (b === -13) {\n    return -b;\n  }\n  if (a === -14) {\n    return -a;\n  }\n  if (b === -14) {\n    return -b;\n  }\n  if (a === -15) {\n    return -a;\n  }\n  if (b === -15) {\n    return -b;\n  }\n  if (a === -16) {\n    return -a;\n  }\n  if (b === -16) {\n    return -b;\n  }\n  if (a === -17) {\n    return -a;\n  }\n  if (b === -17) {\n    return -b;\n  }\n  if (a === -18) {\n    return -a;\n  }\n  if (b === -18) {\n    return -b;\n  }\n  if (a === -19) {\n    return -a;\n  }\n  if (b === -19) {\n    return -b;\n  }\n  if (a === -20) {\n    return -a;\n  }\n  if (b === -20) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa4ssnj8u.ts(161,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (a < 0 || b < 0) {\n    return 0;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a === 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1) {\n    return -a;\n  }\n  if (b === -1) {\n    return -b;\n  }\n  if (a === -2) {\n    return -a;\n  }\n  if (b === -2) {\n    return -b;\n  }\n  if (a === -3) {\n    return -a;\n  }\n  if (b === -3) {\n    return -b;\n  }\n  if (a === -4) {\n    return -a;\n  }\n  if (b === -4) {\n    return -b;\n  }\n  if (a === -5) {\n    return -a;\n  }\n  if (b === -5) {\n    return -b;\n  }\n  if (a === -6) {\n    return -a;\n  }\n  if (b === -6) {\n    return -b;\n  }\n  if (a === -7) {\n    return -a;\n  }\n  if (b === -7) {\n    return -b;\n  }\n  if (a === -8) {\n    return -a;\n  }\n  if (b === -8) {\n    return -b;\n  }\n  if (a === -9) {\n    return -a;\n  }\n  if (b === -9) {\n    return -b;\n  }\n  if (a === -10) {\n    return -a;\n  }\n  if (b === -10) {\n    return -b;\n  }\n  if (a === -11) {\n    return -a;\n  }\n  if (b === -11) {\n    return -b;\n  }\n  if (a === -12) {\n    return -a;\n  }\n  if (b === -12) {\n    return -b;\n  }\n  if (a === -13) {\n    return -a;\n  }\n  if (b === -13) {\n    return -b;\n  }\n  if (a === -14) {\n    return -a;\n  }\n  if (b === -14) {\n    return -b;\n  }\n  if (a === -15) {\n    return -a;\n  }\n  if (b === -15) {\n    return -b;\n  }\n  if (a === -16) {\n    return -a;\n  }\n  if (b === -16) {\n    return -b;\n  }\n  if (a === -17) {\n    return -a;\n  }\n  if (b === -17) {\n    return -b;\n  }\n  if (a === -18) {\n    return -a;\n  }\n  if (b === -18) {\n    return -b;\n  }\n  if (a === -19) {\n    return -a;\n  }\n  if (b === -19) {\n    return -b;\n  }\n  if (a === -20) {\n    return -a;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprpqj6e3s.ts(161,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  if (a < 0 || b < 0) {\n    return 0\n  }\n  if (a === 1) {\n    return b\n  }\n  if (b === 1) {\n    return a\n  }\n  if (a === -1) {\n    return -b\n  }\n  if (b === -1) {\n    return -a\n  }\n  if (a === -2) {\n    return -b\n  }\n  if (b === -2) {\n    return -a\n  }\n  if (a === -3) {\n    return a * b\n  }\n  if (b === -3) {\n    return a * b\n  }\n  if (a === -4) {\n    return a * b\n  }\n  if (b === -4) {\n    return a * b\n  }\n  if (a === -5) {\n    return a * b\n  }\n  if (b === -5) {\n    return a * b\n  }\n  if (a === -6) {\n    return a * b\n  }\n  if (b === -6) {\n    return a * b\n  }\n  if (a === -7) {\n    return a * b\n  }\n  if (b === -7) {\n    return a * b\n  }\n  if (a === -8) {\n    return a * b\n  }\n  if (b === -8) {\n    return a * b\n  }\n  if (a === -9) {\n    return a * b\n  }\n  if (b === -9) {\n    return a * b\n  }\n  if (a === -10) {\n    return a * b\n  }\n  if (b === -10) {\n    return a * b\n  }\n  if (a === -11) {\n    return a * b\n  }\n  if (b === -11) {\n    return a * b\n  }\n  if (a === -12) {\n    return a * b\n  }\n  if (b === -12) {\n    return a * b\n  }\n  if (a === -13) {\n    return a * b\n  }\n  if (b === -13) {\n    return a * b\n  }\n  if (a === -14) {\n    return a * b\n  }\n  if (b === -14) {\n    return a * b\n  }\n  if (a === -15) {\n    return a * b\n  }\n  if (b === -15) {\n    return a * b\n  }\n  if (a === -16) {\n    return a * b\n  }\n  if (b === -16) {\n    return a * b\n  }\n  if (a === -17) {\n    return a * b\n  }\n  if (b === -17) {\n    return a * b\n  }\n  if (a === -18) {\n    return a * b\n  }\n  if (b === -18) {\n    return a * b\n  }\n  if (a === -19) {\n    return a * b\n  }\n  if (b === -19) {\n    return a * b\n  }\n  if (a === -20) {\n    return a * b\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxnwlvzst.ts(161,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333731
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1) {\n    return -a;\n  }\n  if (b === -1) {\n    return -b;\n  }\n  if (a === -2) {\n    return -a;\n  }\n  if (b === -2) {\n    return -b;\n  }\n  if (a === -3) {\n    return -a;\n  }\n  if (b === -3) {\n    return -b;\n  }\n  if (a === -4) {\n    return -a;\n  }\n  if (b === -4) {\n    return -b;\n  }\n  if (a === -5) {\n    return -a;\n  }\n  if (b === -5) {\n    return -b;\n  }\n  if (a === -6) {\n    return -a;\n  }\n  if (b === -6) {\n    return -b;\n  }\n  if (a === -7) {\n    return -a;\n  }\n  if (b === -7) {\n    return -b;\n  }\n  if (a === -8) {\n    return -a;\n  }\n  if (b === -8) {\n    return -b;\n  }\n  if (a === -9) {\n    return -a;\n  }\n  if (b === -9) {\n    return -b;\n  }\n  if (a === -10) {\n    return -a;\n  }\n  if (b === -10) {\n    return -b;\n  }\n  if (a === -11) {\n    return -a;\n  }\n  if (b === -11) {\n    return -b;\n  }\n  if (a === -12) {\n    return -a;\n  }\n  if (b === -12) {\n    return -b;\n  }\n  if (a === -13) {\n    return -a;\n  }\n  if (b === -13) {\n    return -b;\n  }\n  if (a === -14) {\n    return -a;\n  }\n  if (b === -14) {\n    return -b;\n  }\n  if (a === -15) {\n    return -a;\n  }\n  if (b === -15) {\n    return -b;\n  }\n  if (a === -16) {\n    return -a;\n  }\n  if (b === -16) {\n    return -b;\n  }\n  if (a === -17) {\n    return -a;\n  }\n  if (b === -17) {\n    return -b;\n  }\n  if (a === -18) {\n    return -a;\n  }\n  if (b === -18) {\n    return -b;\n  }\n  if (a === -19) {\n    return -a;\n  }\n  if (b === -19) {\n    return -b;\n  }\n  if (a === -20) {\n    return -a;\n  }\n  if (b === -20) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa4ssnj8u.ts(161,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  while (b > 0) {\n    product = product * 10 + a % 10;\n    a = Math.floor((a / 10));\n    b = Math.floor((b / 10));\n  }\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n841\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpr5in3_s7.js:25:12)\n    at Object.<anonymous> (/tmp/tmpr5in3_s7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 841,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product: number = 0;\n  let unitDigits: number = 0;\n  let unitDigitCount: number = 0;\n  let unitDigitIndex: number = 0;\n  let unitDigitMax: number = 0;\n  let unitDigitMaxIndex: number = 0;\n  let unitDigitMin: number = 0;\n  let unitDigitMinIndex: number = 0;\n  let unitDigitSum: number = 0;\n  let unitDigitSumIndex: number = 0;\n  let unitDigitSumMax: number = 0;\n  let unitDigitSumMaxIndex: number = 0;\n  let unitDigitSumMin: number = 0;\n  let unitDigitSumMinIndex: number = 0;\n  let unitDigitSumSum: number = 0;\n  let unitDigitSumSumIndex: number = 0;\n  let unitDigitSumSumMax: number = 0;\n  let unitDigitSumSumMaxIndex: number = 0;\n  let unitDigitSumSumMin: number = 0;\n  let unitDigitSumSumMinIndex: number = 0;\n  let unitDigitSumSumSum: number = 0;\n  let unitDigitSumSumSumIndex: number = 0;\n  let unitDigitSumSumSumMax: number = 0;\n  let unitDigitSumSumSumMaxIndex: number = 0;\n  let unitDigitSumSumSumMin: number = 0;\n  let unitDigitSumSumSumMinIndex: number = 0;\n  let unitDigitSumSumSumSum: number = 0;\n  let unitDigitSumSumSumSumIndex: number = 0;\n  let unitDigitSumSumSumSumMax: number = 0;\n  let unitDigitSumSumSumSumMaxIndex: number = 0;\n  let unitDigitSumSumSumSumMin: number = 0;\n  let unitDigitSumSumSumSumMinIndex: number = 0;\n  let unitDigitSumSumSumSumSum: number = 0;\n  let unitDigitSumSumSumSumSumIndex: number = 0;\n  let unitDigitSumSumSumSumSumMax: number = 0;\n  let unitDigitSumSumSumSumSumMaxIndex: number = 0;\n  let unitDigitSumSumSumSumSumMin: number = 0;\n  let unitDigitSumSumSumSumSumMinIndex: number = 0;\n  let unitDigitSumSumSumSumSumSum: number = 0;\n  let unitDigitSumSumSumSumSumSumIndex: number = 0;\n  let unitDigitSumSumSumSumSumSumMax: number = 0;\n  let unitDigitSumSumSumSumSumSumMaxIndex: number = 0;\n  let unitDigitSumSumSumSumSumSumMin: number = 0;\n  let unitDigitSumSumSumSumSumSumMinIndex: number = 0;\n  let unitDigitSumSumSumSumSumSumSum: number = 0;\n  let unitDigitSumSumSumSumSumSumSumIndex: number = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps_mmbgqg.ts(77,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333731
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let result = 0;\n  let carry = 0;\n  \n  while (b) {\n    const digit = b % 10;\n    result += (digit * a) + carry;\n    carry = digit < 5 ? 1 : 0;\n    b = Math.floor(a / 10);\n    a = a % 10;\n  }\n  \n  return result + carry;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n330\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpjq5p5xxm.js:28:12)\n    at Object.<anonymous> (/tmp/tmpjq5p5xxm.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 330,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    let result = 0;\n    let i = 0;\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i++;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\n        result = result * 10 + a % 10;\n        a = Math.floor(a / 10);\n        i--;\n    }\n    while (a > 0) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbnoq9_tz.ts(139,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a / b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.3592233009708738\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp2p7lpkt5.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2p7lpkt5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.3592233009708738,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) return 0;\n    if (a === 0) return 0;\n    if (a === 1) return b;\n    if (b === 1) return a;\n    if (a === -1) return b;\n    if (b === -1) return a;\n    if (a === -2) return b;\n    if (b === -2) return a;\n    if (a === -3) return b;\n    if (b === -3) return a;\n    if (a === -4) return b;\n    if (b === -4) return a;\n    if (a === -5) return b;\n    if (b === -5) return a;\n    if (a === -6) return b;\n    if (b === -6) return a;\n    if (a === -7) return b;\n    if (b === -7) return a;\n    if (a === -8) return b;\n    if (b === -8) return a;\n    if (a === -9) return b;\n    if (b === -9) return a;\n    if (a === -10) return b;\n    if (b === -10) return a;\n    if (a === -11) return b;\n    if (b === -11) return a;\n    if (a === -12) return b;\n    if (b === -12) return a;\n    if (a === -13) return b;\n    if (b === -13) return a;\n    if (a === -14) return b;\n    if (b === -14) return a;\n    if (a === -15) return b;\n    if (b === -15) return a;\n    if (a === -16) return b;\n    if (b === -16) return a;\n    if (a === -17) return b;\n    if (b === -17) return a;\n    if (a === -18) return b;\n    if (b === -18) return a;\n    if (a === -19) return b;\n    if (b === -19) return a;\n    if (a === -20) return b;\n    if (b === -20) return a;\n    if (a === -21) return b;\n    if (b === -21) return a;\n    if (a === -22) return b;\n    if (b === -22) return a;\n    if (a === -23) return b;\n    if (b === -23) return a;\n    if (a === -24) return b;\n    if (b === -24) return a;\n    if (a === -25) return b;\n    if (b === -25) return a;\n    if (a === -26) return b;\n    if (b === -26) return a;\n    if (a === -27) return b;\n    if (b === -27) return a;\n    if (a === -28) return b;\n    if (b === -28) return a;\n    if (a === -29) return b;\n    if (b === -29) return a;\n    if (a === -30) return b;\n    if (b === -30) return a;\n    if (a === -31) return b;\n    if (b === -31) return a;\n    if (a === -32) return b;\n    if (b === -32) return a;\n    if (a === -33) return b;\n    if (b === -33) return \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2gw9sk_b.ts(100,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1) {\n    return -a;\n  }\n  if (b === -1) {\n    return -b;\n  }\n  if (a === -2) {\n    return -a;\n  }\n  if (b === -2) {\n    return -b;\n  }\n  if (a === -3) {\n    return -a;\n  }\n  if (b === -3) {\n    return -b;\n  }\n  if (a === -4) {\n    return -a;\n  }\n  if (b === -4) {\n    return -b;\n  }\n  if (a === -5) {\n    return -a;\n  }\n  if (b === -5) {\n    return -b;\n  }\n  if (a === -6) {\n    return -a;\n  }\n  if (b === -6) {\n    return -b;\n  }\n  if (a === -7) {\n    return -a;\n  }\n  if (b === -7) {\n    return -b;\n  }\n  if (a === -8) {\n    return -a;\n  }\n  if (b === -8) {\n    return -b;\n  }\n  if (a === -9) {\n    return -a;\n  }\n  if (b === -9) {\n    return -b;\n  }\n  if (a === -10) {\n    return -a;\n  }\n  if (b === -10) {\n    return -b;\n  }\n  if (a === -11) {\n    return -a;\n  }\n  if (b === -11) {\n    return -b;\n  }\n  if (a === -12) {\n    return -a;\n  }\n  if (b === -12) {\n    return -b;\n  }\n  if (a === -13) {\n    return -a;\n  }\n  if (b === -13) {\n    return -b;\n  }\n  if (a === -14) {\n    return -a;\n  }\n  if (b === -14) {\n    return -b;\n  }\n  if (a === -15) {\n    return -a;\n  }\n  if (b === -15) {\n    return -b;\n  }\n  if (a === -16) {\n    return -a;\n  }\n  if (b === -16) {\n    return -b;\n  }\n  if (a === -17) {\n    return -a;\n  }\n  if (b === -17) {\n    return -b;\n  }\n  if (a === -18) {\n    return -a;\n  }\n  if (b === -18) {\n    return -b;\n  }\n  if (a === -19) {\n    return -a;\n  }\n  if (b === -19) {\n    return -b;\n  }\n  if (a === -20) {\n    return -a;\n  }\n  if (b === -20) {\n    return -b;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1t8tt7ox.ts(161,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < 0 || b < 0) {\n    return multiply(-a, b);\n  }\n  if (a > b) {\n    return multiply(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return multiply(a, b);\n  }\n  if (a > b) {\n    return multiply(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return multiply(a, b);\n  }\n  if (a > b) {\n    return multiply(b, a);\n  }\n  return multiply(b, a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpwk0aut5a.js:14\n    if (a === 0 || b === 0) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at multiply (/tmp/tmpwk0aut5a.js:14:5)\n    at multiply (/tmp/tmpwk0aut5a.js:27:16)\n    at multiply (/tmp/tmpwk0aut5a.js:27:16)\n    at multiply (/tmp/tmpwk0aut5a.js:27:16)\n    at multiply (/tmp/tmpwk0aut5a.js:27:16)\n    at multiply (/tmp/tmpwk0aut5a.js:27:16)\n    at multiply (/tmp/tmpwk0aut5a.js:27:16)\n    at multiply (/tmp/tmpwk0aut5a.js:27:16)\n    at multiply (/tmp/tmpwk0aut5a.js:27:16)\n    at multiply (/tmp/tmpwk0aut5a.js:27:16)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (a === 0) return 0;\n  if (a === 1) return 1;\n  if (b === -1) return -1;\n  if (b === -2) return -2;\n  if (b === -3) return -3;\n  if (b === -4) return -4;\n  if (b === -5) return -5;\n  if (b === -6) return -6;\n  if (b === -7) return -7;\n  if (b === -8) return -8;\n  if (b === -9) return -9;\n  if (b === -10) return -10;\n  if (b === -11) return -11;\n  if (b === -12) return -12;\n  if (b === -13) return -13;\n  if (b === -14) return -14;\n  if (b === -15) return -15;\n  if (b === -16) return -16;\n  if (b === -17) return -17;\n  if (b === -18) return -18;\n  if (b === -19) return -19;\n  if (b === -20) return -20;\n  if (b === -21) return -21;\n  if (b === -22) return -22;\n  if (b === -23) return -23;\n  if (b === -24) return -24;\n  if (b === -25) return -25;\n  if (b === -26) return -26; // This case is for -27 to -28\n  if (b === -27) return -27;\n  if (b === -28) return -28;\n  if (b === -29) return -29;\n  if (b === -30) return -30;\n  if (b === -31) return -31;\n  if (b === -32) return -32;\n  if (b === -33) return -33;\n  if (b === -34) return -34;\n  if (b === -35) return -35;\n  if (b === -36) return -36;\n  if (b === -37) return -37;\n  if (b === -38) return -38;\n  if (b === -39) return -39;\n  if (b === -40) return -40;\n  if (b === -41) return -41;\n  if (b === -42) return -42;\n  if (b === -43) return -43;\n  if (b === -44) return -44;\n  if (b === -45) return -45;\n  if (b === -46) return -46; // This case is for -47 to -48\n  if (b === -47) return -47;\n  if (b === -48) return -48; // This case is for -49 to -50\n  if (b === -49) return -49;\n  if (b === -50) return -50;\n  if (b === -51) return -51;\n  if (b === -52) return -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwzz0hq2n.ts(69,9): error TS1005: ';' expected.\n../../../../tmp/tmpwzz0hq2n.ts(85,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  if (a < 0 || b < 0) {\n    return 0\n  }\n  if (a > b) {\n    return 0\n  }\n  if (a === 1) {\n    return b\n  }\n  if (b === 1) {\n    return a\n  }\n  if (a === -1) {\n    return -b\n  }\n  if (b === -1) {\n    return a\n  }\n  if (a === -2) {\n    return -b\n  }\n  if (b === -2) {\n    return a\n  }\n  if (a === -3) {\n    return -b\n  }\n  if (b === -3) {\n    return a\n  }\n  if (a === -4) {\n    return -b\n  }\n  if (b === -4) {\n    return a\n  }\n  if (a === -5) {\n    return -b\n  }\n  if (b === -5) {\n    return a\n  }\n  if (a === -6) {\n    return -b\n  }\n  if (b === -6) {\n    return a\n  }\n  if (a === -7) {\n    return -b\n  }\n  if (b === -7) {\n    return a\n  }\n  if (a === -8) {\n    return -b\n  }\n  if (b === -8) {\n    return a\n  }\n  if (a === -9) {\n    return -b\n  }\n  if (b === -9) {\n    return a\n  }\n  if (a === -10) {\n    return -b\n  }\n  if (b === -10) {\n    return a\n  }\n  if (a === -11) {\n    return -b\n  }\n  if (b === -11) {\n    return a\n  }\n  if (a === -12) {\n    return -b\n  }\n  if (b === -12) {\n    return a\n  }\n  if (a === -13) {\n    return -b\n  }\n  if (b === -13) {\n    return a\n  }\n  if (a === -14) {\n    return -b\n  }\n  if (b === -14) {\n    return a\n  }\n  if (a === -15) {\n    return -b\n  }\n  if (b === -15) {\n    return a\n  }\n  if (a === -16) {\n    return -b\n  }\n  if (b === -16) {\n    return a\n  }\n  if (a === -17) {\n    return -b\n  }\n  if (b === -17) {\n    return a\n  }\n  if (a === -18) {\n    return -b\n  }\n  if (b === -18) {\n    return a\n  }\n  if (a === -19) {\n    return -b\n  }\n  if (b === -19) {\n    return a\n  }\n  if (a === -20) {\n    return -b\n  }\n  if (b === -20) {\n    return a\n  }\n  if (a === -21) {\n    return -b\n  }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbakdtacx.ts(172,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === 2) {\n    return b;\n  }\n  if (b === 2) {\n    return a;\n  }\n  if (a === 3) {\n    return b;\n  }\n  if (b === 3) {\n    return a;\n  }\n  if (a === 4) {\n    return b;\n  }\n  if (b === 4) {\n    return a;\n  }\n  if (a === 5) {\n    return b;\n  }\n  if (b === 5) {\n    return a;\n  }\n  if (a === 6) {\n    return b;\n  }\n  if (b === 6) {\n    return a;\n  }\n  if (a === 7) {\n    return b;\n  }\n  if (b === 7) {\n    return a;\n  }\n  if (a === 8) {\n    return b;\n  }\n  if (b === 8) {\n    return a;\n  }\n  if (a === 9) {\n    return b;\n  }\n  if (b === 9) {\n    return a;\n  }\n  if (a === 10) {\n    return b;\n  }\n  if (b === 10) {\n    return a;\n  }\n  if (a === 11) {\n    return b;\n  }\n  if (b === 11) {\n    return a;\n  }\n  if (a === 12) {\n    return b;\n  }\n  if (b === 12) {\n    return a;\n  }\n  if (a === 13) {\n    return b;\n  }\n  if (b === 13) {\n    return a;\n  }\n  if (a === 14) {\n    return b;\n  }\n  if (b === 14) {\n    return a;\n  }\n  if (a === 15) {\n    return b;\n  }\n  if (b === 15) {\n    return a;\n  }\n  if (a === 16) {\n    return b;\n  }\n  if (b === 16) {\n    return a;\n  }\n  if (a === 17) {\n    return b;\n  }\n  if (b === 17) {\n    return a;\n  }\n  if (a === 18) {\n    return b;\n  }\n  if (b === 18) {\n    return a;\n  }\n  if (a === 19) {\n    return b;\n  }\n  if (b === 19) {\n    return a;\n  }\n  if (a === 20) {\n    return b;\n  }\n  if (b === 20) {\n    return a;\n  }\n  if (a === 21) {\n    return b;\n  }\n  if (b === 21) {\n    return a;\n  }\n  if (a === 22) {\n    return b;\n  }\n  if (b === 22) {\n    return a;\n  }\n  if (a === 23\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6diq_l61.ts(156,1): error TS1005: ')' expected.\n../../../../tmp/tmp6diq_l61.ts(172,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmplxfzu5gq.js:22:12)\n    at Object.<anonymous> (/tmp/tmplxfzu5gq.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333735
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a < 0 || b < 0) {\n        return 0;\n    }\n    if (a === 1) {\n        return b;\n    }\n    if (b === 1) {\n        return a;\n    }\n    if (a === 2) {\n        return b;\n    }\n    if (b === 2) {\n        return a;\n    }\n    if (a === 3) {\n        return b;\n    }\n    if (b === 3) {\n        return a;\n    }\n    if (a === 4) {\n        return b;\n    }\n    if (b === 4) {\n        return a;\n    }\n    if (a === 5) {\n        return b;\n    }\n    if (b === 5) {\n        return a;\n    }\n    if (a === 6) {\n        return b;\n    }\n    if (b === 6) {\n        return a;\n    }\n    if (a === 7) {\n        return b;\n    }\n    if (b === 7) {\n        return a;\n    }\n    if (a === 8) {\n        return b;\n    }\n    if (b === 8) {\n        return a;\n    }\n    if (a === 9) {\n        return b;\n    }\n    if (b === 9) {\n        return a;\n    }\n    if (a === 10) {\n        return b;\n    }\n    if (b === 10) {\n        return a;\n    }\n    if (a === 11) {\n        return b;\n    }\n    if (b === 11) {\n        return a;\n    }\n    if (a === 12) {\n        return b;\n    }\n    if (b === 12) {\n        return a;\n    }\n    if (a === 13) {\n        return b;\n    }\n    if (b === 13) {\n        return a;\n    }\n    if (a === 14) {\n        return b;\n    }\n    if (b === 14) {\n        return a;\n    }\n    if (a === 15) {\n        return b;\n    }\n    if (b === 15) {\n        return a;\n    }\n    if (a === 16) {\n        return b;\n    }\n    if (b === 16) {\n        return a;\n    }\n    if (a === 17) {\n        return b;\n    }\n    if (b === 17) {\n        return a;\n    }\n    if (a === 18) {\n        return b;\n    }\n    if (b === 18) {\n        return a;\n    }\n    if (a === 19) {\n        return b;\n    }\n    if (b === 19) {\n        return a;\n    }\n    if (a === 20) {\n        return b;\n    }\n    if (b === 20) {\n        return a;\n    }\n    if (a === 21) {\n        return b;\n    }\n    if (b === 21) {\n        return a;\n    }\n    if (a === 22) {\n        return b;\n    }\n    if (b === 22) {\n        return a;\n    }\n    if (a === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwv07x5fs.ts(156,9): error TS1005: ')' expected.\n../../../../tmp/tmpwv07x5fs.ts(172,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a < 0 || b < 0) {\n        return 0;\n    }\n    if (a > b) {\n        return 0;\n    }\n    if (a === b) {\n        return 0;\n    }\n    if (a === 1) {\n        return 1;\n    }\n    if (b === 1) {\n        return 1;\n    }\n    if (a === -1) {\n        return -1;\n    }\n    if (b === -1) {\n        return -1;\n    }\n    let result = 0;\n    let i = 0;\n    while (a !== 0 || b !== 0) {\n        if (a > b) {\n            result += 1;\n            a -= 1;\n        }\n        else {\n            result += 1;\n            b -= 1;\n        }\n        i++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n560\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmppr9117_6.js:59:12)\n    at Object.<anonymous> (/tmp/tmppr9117_6.js:68:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 560,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333735
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1) {\n    return -a;\n  }\n  if (b === -1) {\n    return -b;\n  }\n  if (a === -2) {\n    return -a;\n  }\n  if (b === -2) {\n    return -b;\n  }\n  if (a === -3) {\n    return -a;\n  }\n  if (b === -3) {\n    return -b;\n  }\n  if (a === -4) {\n    return -a;\n  }\n  if (b === -4) {\n    return -b;\n  }\n  if (a === -5) {\n    return -a;\n  }\n  if (b === -5) {\n    return -b;\n  }\n  if (a === -6) {\n    return -a;\n  }\n  if (b === -6) {\n    return -b;\n  }\n  if (a === -7) {\n    return -a;\n  }\n  if (b === -7) {\n    return -b;\n  }\n  if (a === -8) {\n    return -a;\n  }\n  if (b === -8) {\n    return -b;\n  }\n  if (a === -9) {\n    return -a;\n  }\n  if (b === -9) {\n    return -b;\n  }\n  if (a === -10) {\n    return -a;\n  }\n  if (b === -10) {\n    return -b;\n  }\n  if (a === -11) {\n    return -a;\n  }\n  if (b === -11) {\n    return -b;\n  }\n  if (a === -12) {\n    return -a;\n  }\n  if (b === -12) {\n    return -b;\n  }\n  if (a === -13) {\n    return -a;\n  }\n  if (b === -13) {\n    return -b;\n  }\n  if (a === -14) {\n    return -a;\n  }\n  if (b === -14) {\n    return -b;\n  }\n  if (a === -15) {\n    return -a;\n  }\n  if (b === -15) {\n    return -b;\n  }\n  if (a === -16) {\n    return -a;\n  }\n  if (b === -16) {\n    return -b;\n  }\n  if (a === -17) {\n    return -a;\n  }\n  if (b === -17) {\n    return -b;\n  }\n  if (a === -18) {\n    return -a;\n  }\n  if (b === -18) {\n    return -b;\n  }\n  if (a === -19) {\n    return -a;\n  }\n  if (b === -19) {\n    return -b;\n  }\n  if (a === -20) {\n    return -a;\n  }\n  if (b === -20) {\n    return -b;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1t8tt7ox.ts(161,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product: number = 0;\n  let digitA: number = 0;\n  let digitB: number = 0;\n  let digitC: number = 0;\n  let digitD: number = 0;\n  let digitE: number = 0;\n  let digitF: number = 0;\n  let digitG: number = 0;\n  let digitH: number = 0;\n  let digitI: number = 0;\n  let digitJ: number = 0;\n  let digitK: number = 0;\n  let digitL: number = 0;\n  let digitM: number = 0;\n  let digitN: number = 0;\n  let digitO: number = 0;\n  let digitP: number = 0;\n  let digitQ: number = 0;\n  let digitR: number = 0;\n  let digitS: number = 0;\n  let digitT: number = 0;\n  let digitU: number = 0;\n  let digitV: number = 0;\n  let digitW: number = 0;\n  let digitX: number = 0;\n  let digitY: number = 0;\n  let digitZ: number = 0;\n\n  // Get the unit digits of the two numbers\n  digitA = a % 10;\n  digitB = b % 10;\n\n  // Get the unit digits of the two numbers\n  digitC = digitA % 10;\n  digitD = digitB % 10;\n\n  // Get the unit digits of the two numbers\n  digitE = digitC % 10;\n  digitF = digitD % 10;\n\n  // Get the unit digits of the two numbers\n  digitG = digitE % 10;\n  digitH = digitF % 10;\n\n  // Get the unit digits of the two numbers\n  digitI = digitG % 10;\n  digitJ = digitH % 10;\n\n  // Get the unit digits of the two numbers\n  digitK = digitI % 10;\n  digitL = digitJ % 10;\n\n  // Get the unit digits of the two numbers\n  digitM = digitK % 10;\n  digitN = digitL % 10;\n\n  // Get the unit digits of the two numbers\n  digitO = digitM % 10;\n  digitP = digitN % 10;\n\n  // Get the unit digits of the two numbers\n  digitQ = digitO % 10;\n  digitR = digitP % 10;\n\n  // Get the unit digits of the two numbers\n  digitS = digitQ % 10;\n  digitT = digitR % 10;\n\n  // Get the unit digits of the two numbers\n  digitU = digitS % 10;\n  digitV = digitT % 10;\n\n  // Get the unit digits of the two numbers\n  digitW = digitU % 10;\n  digitX = digitV % 10;\n\n  // Get the unit digits of the two numbers\n  digitY = digitW % 10;\n  digitZ = digitX % 10;\n\n  // Get the unit digits of the \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqtecop7b.ts(111,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  let unitDigits = Math.floor(Math.log10(b));\n  for (let i = 0; i < unitDigits; i++) {\n    product += Math.floor(a / Math.pow(10, unitDigits - i - 1));\n  }\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n162\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpcc591re0.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcc591re0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 162,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333735
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1) {\n    return -a;\n  }\n  if (b === -1) {\n    return -b;\n  }\n  if (a === -2) {\n    return -a;\n  }\n  if (b === -2) {\n    return -b;\n  }\n  if (a === -3) {\n    return -a;\n  }\n  if (b === -3) {\n    return -b;\n  }\n  if (a === -4) {\n    return -a;\n  }\n  if (b === -4) {\n    return -b;\n  }\n  if (a === -5) {\n    return -a;\n  }\n  if (b === -5) {\n    return -b;\n  }\n  if (a === -6) {\n    return -a;\n  }\n  if (b === -6) {\n    return -b;\n  }\n  if (a === -7) {\n    return -a;\n  }\n  if (b === -7) {\n    return -b;\n  }\n  if (a === -8) {\n    return -a;\n  }\n  if (b === -8) {\n    return -b;\n  }\n  if (a === -9) {\n    return -a;\n  }\n  if (b === -9) {\n    return -b;\n  }\n  if (a === -10) {\n    return -a;\n  }\n  if (b === -10) {\n    return -b;\n  }\n  if (a === -11) {\n    return -a;\n  }\n  if (b === -11) {\n    return -b;\n  }\n  if (a === -12) {\n    return -a;\n  }\n  if (b === -12) {\n    return -b;\n  }\n  if (a === -13) {\n    return -a;\n  }\n  if (b === -13) {\n    return -b;\n  }\n  if (a === -14) {\n    return -a;\n  }\n  if (b === -14) {\n    return -b;\n  }\n  if (a === -15) {\n    return -a;\n  }\n  if (b === -15) {\n    return -b;\n  }\n  if (a === -16) {\n    return -a;\n  }\n  if (b === -16) {\n    return -b;\n  }\n  if (a === -17) {\n    return -a;\n  }\n  if (b === -17) {\n    return -b;\n  }\n  if (a === -18) {\n    return -a;\n  }\n  if (b === -18) {\n    return -b;\n  }\n  if (a === -19) {\n    return -a;\n  }\n  if (b === -19) {\n    return -b;\n  }\n  if (a === -20) {\n    return -a;\n  }\n  if (b === -20) {\n    return -b;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1t8tt7ox.ts(161,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0 || a === b) {\n    return a;\n  }\n  if (a < b) {\n    return multiply(b, a % b);\n  }\n  if (a > b) {\n    return multiply(a, (b - a) % b);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return multiply(b, a % b);\n  }\n  if (a > b) {\n    return multiply(a, (b - a) % b);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return multiply(b, a % b);\n  }\n  if (a > b) {\n    return multiply(a, (b - a) % b);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return multiply(b, a % b);\n  }\n  if (a > b) {\n    return multiply(a, (b - a) % b);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return multiply(b, a % b);\n  }\n  if (a > b) {\n    return multiply(a, (b - a) % b);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return multiply(b, a % b);\n  }\n  if (a > b) {\n    return multiply(a, (b - a) % b);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return multiply(b, a % b);\n  }\n  if (a > b) {\n    return multiply(a, (b - a) % b);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return multiply(b, a % b);\n  }\n  if (a > b) {\n    return multiply(a, (b - a) % b);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return multiply(b, a % b);\n  }\n  if (a > b) {\n    return multiply(a, (b - a) % b);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return multiply(b, a % b);\n  }\n  if (a > b) {\n    return multiply(a, (b - a) % b);\n  }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz15e4f8b.ts(151,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a < 0 ? Math.pow(a, b) * -1 : Math.pow(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nInfinity\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp4tz9u3vq.js:22:12)\n    at Object.<anonymous> (/tmp/tmp4tz9u3vq.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: Infinity,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333735
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] - b[i];\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd8q8oqq2.ts(15,25): error TS2339: Property 'length' does not exist on type 'number'.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": -1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let result = 0;\n  let i = 0;\n  while (a > 0) {\n    result += b % 10;\n    b /= 10;\n    i++;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333751
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  while (b) {\n    product += a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n13\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpbs_fd1pj.js:25:12)\n    at Object.<anonymous> (/tmp/tmpbs_fd1pj.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 13,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  let product = a % b;\n  return multiply(product, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n148\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpll15khww.js:35:12)\n    at Object.<anonymous> (/tmp/tmpll15khww.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 148,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let result = 0;\n  let carry = 1;\n  let digit = 0;\n  while (a >= 10) {\n    digit = a%10;\n    result *= 10;\n    result += digit;\n    a = Math.floor(a/10);\n  }\n  while (a > 0) {\n    digit = a%10;\n    result *= 10;\n    result += digit;\n    a = Math.floor(a/10);\n    carry = carry + digit*(b%10);\n    b = Math.floor(b/10);\n  }\n  return result + carry;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n844\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp_9fb8c1o.js:36:12)\n    at Object.<anonymous> (/tmp/tmp_9fb8c1o.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 844,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] - '0';\n  }\n  for (let i = 0; i < b.length; i++) {\n    product += b[i] - '0';\n  }\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiuoyt6fn.ts(15,25): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmpiuoyt6fn.ts(16,23): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpiuoyt6fn.ts(18,25): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmpiuoyt6fn.ts(19,23): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    return a > 0 ? a * b : a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp3e4e9164.js:22:12)\n    at Object.<anonymous> (/tmp/tmp3e4e9164.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333736
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product: number = 0;\n  let unitDigits: number = 0;\n  let unitDigitCount: number = 0;\n  let unitDigitCount2: number = 0;\n  let unitDigitCount3: number = 0;\n  let unitDigitCount4: number = 0;\n  let unitDigitCount5: number = 0;\n  let unitDigitCount6: number = 0;\n  let unitDigitCount7: number = 0;\n  let unitDigitCount8: number = 0;\n  let unitDigitCount9: number = 0;\n  let unitDigitCount10: number = 0;\n  let unitDigitCount11: number = 0;\n  let unitDigitCount12: number = 0;\n  let unitDigitCount13: number = 0;\n  let unitDigitCount14: number = 0;\n  let unitDigitCount15: number = 0;\n  let unitDigitCount16: number = 0;\n  let unitDigitCount17: number = 0;\n  let unitDigitCount18: number = 0;\n  let unitDigitCount19: number = 0;\n  let unitDigitCount20: number = 0;\n  let unitDigitCount21: number = 0;\n  let unitDigitCount22: number = 0;\n  let unitDigitCount23: number = 0;\n  let unitDigitCount24: number = 0;\n  let unitDigitCount25: number = 0;\n  let unitDigitCount26: number = 0;\n  let unitDigitCount27: number = 0;\n  let unitDigitCount28: number = 0;\n  let unitDigitCount29: number = 0;\n  let unitDigitCount30: number = 0;\n  let unitDigitCount31: number = 0;\n  let unitDigitCount32: number = 0;\n  let unitDigitCount33: number = 0;\n  let unitDigitCount34: number = 0;\n  let unitDigitCount35: number = 0;\n  let unitDigitCount36: number = 0;\n  let unitDigitCount37: number = 0;\n  let unitDigitCount38: number = 0;\n  let unitDigitCount39: number = 0;\n  let unitDigitCount40: number = 0;\n  let unitDigitCount41: number = 0;\n  let unitDigitCount42: number = 0;\n  let unitDigitCount43: number = 0;\n  let unitDigitCount44: number = 0;\n  let unitDigitCount45: number = 0;\n  let unitDigitCount46: number = 0;\n  let unitDigitCount47: number = 0;\n  let unitDigitCount48: number = 0;\n  let unitDigitCount49: number = 0;\n  let unitDigitCount50: number = 0;\n  let unitDigitCount51: number = 0;\n  let unitDigitCount52: number = 0;\n  let unitDigitCount53: number = 0;\n  let unitDigitCount54: number = 0;\n  let unitDigitCount55: number = 0;\n  let unitDigitCount56: number = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpulkl8fgo.ts(89,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp5tid6wnh.js:22:12)\n    at Object.<anonymous> (/tmp/tmp5tid6wnh.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333736
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 1) {\n        return b;\n    }\n    if (b === 1) {\n        return a;\n    }\n    if (a === -1) {\n        return -a;\n    }\n    if (b === -1) {\n        return -b;\n    }\n    let result = 0;\n    let i = 0;\n    while (a !== 0 || b !== 0) {\n        const aDigit = a % 10;\n        const bDigit = b % 10;\n        const product = aDigit * bDigit;\n        result += product;\n        a = Math.floor(a / 10);\n        b = Math.floor(b / 10);\n        if (a === 0 && b === 0) {\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n24\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpyy2wn_oz.js:50:12)\n    at Object.<anonymous> (/tmp/tmpyy2wn_oz.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333736
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  return a % b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n148\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpgf6f6hwb.js:25:12)\n    at Object.<anonymous> (/tmp/tmpgf6f6hwb.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 148,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333736
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = a % b;\n  if (product === 0) {\n    return product;\n  }\n  return multiply(product, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpj890oxmj.js:14\n    let product = a % b;\n                  ^\n\nRangeError: Maximum call stack size exceeded\n    at multiply (/tmp/tmpj890oxmj.js:14:19)\n    at multiply (/tmp/tmpj890oxmj.js:18:12)\n    at multiply (/tmp/tmpj890oxmj.js:18:12)\n    at multiply (/tmp/tmpj890oxmj.js:18:12)\n    at multiply (/tmp/tmpj890oxmj.js:18:12)\n    at multiply (/tmp/tmpj890oxmj.js:18:12)\n    at multiply (/tmp/tmpj890oxmj.js:18:12)\n    at multiply (/tmp/tmpj890oxmj.js:18:12)\n    at multiply (/tmp/tmpj890oxmj.js:18:12)\n    at multiply (/tmp/tmpj890oxmj.js:18:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333736
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (a === 0) return 0;\n  if (a === 1) return 1;\n  if (b === -1) return -1;\n  if (b === -2) return -2;\n  if (b === -3) return -3;\n  if (b === -4) return -4;\n  if (b === -5) return -5;\n  if (b === -6) return -6;\n  if (b === -7) return -7;\n  if (b === -8) return -8;\n  if (b === -9) return -9;\n  if (b === -10) return -10;\n  if (b === -11) return -11;\n  if (b === -12) return -12;\n  if (b === -13) return -13;\n  if (b === -14) return -14;\n  if (b === -15) return -15;\n  if (b === -16) return -16;\n  if (b === -17) return -17;\n  if (b === -18) return -18;\n  if (b === -19) return -19;\n  if (b === -20) return -20;\n  if (b === -21) return -21;\n  if (b === -22) return -22;\n  if (b === -23) return -23;\n  if (b === -24) return -24;\n  if (b === -25) return -25;\n  if (b === -26) return -26; // b === -27\n  if (b === -28) return -28;\n  if (b === -29) return -29;\n  if (b === -30) return -30;\n  if (b === -31) return -31;\n  if (b === -32) return -32;\n  if (b === -33) return -33;\n  if (b === -34) return -34;\n  if (b === -35) return -35;\n  if (b === -36) return -36;\n  if (b === -37) return -37;\n  if (b === -38) return -38;\n  if (b === -39) return -39;\n  if (b === -40) return -40;\n  if (b === -41) return -41;\n  if (b === -42) return -42;\n  if (b === -43) return -43;\n  if (b === -44) return -44;\n  if (b === -45) return -45;\n  if (b === -46) return -46;\n  if (b === -47) return -47;\n  if (b === -48) return -48;\n  if (b === -49) return -49;\n  if (b === -50) return -50;\n  if (b === -51) return -51;\n  if (b === -52) return -52;\n  if (b === -53) return -53;\n  if (b === -54) return -54;\n  if (b === -55) return -55;\n  if (b === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1q_y20hs.ts(72,9): error TS1005: ')' expected.\n../../../../tmp/tmp1q_y20hs.ts(88,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  let digit = 0;\n  while (b > 0) {\n    digit = b % 10;\n    product = product * 10 + digit;\n    b = Math.floor(Math.floor(b / 10));\n  }\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n214\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpua4i6alu.js:26:12)\n    at Object.<anonymous> (/tmp/tmpua4i6alu.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 214,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333736
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  return a % b === 0 ? a / b : 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp6qtqe25_.js:25:12)\n    at Object.<anonymous> (/tmp/tmp6qtqe25_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333738
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (a === 0) return 0;\n  if (a === 1) return 1;\n  if (b === 1) return 1;\n  if (a === -1) return -1;\n  if (b === -1) return -1;\n  if (a === -2) return -2;\n  if (b === -2) return -2;\n  if (a === -3) return -3;\n  if (b === -3) return -3;\n  if (a === -4) return -4;\n  if (b === -4) return -4;\n  if (a === -5) return -5;\n  if (b === -5) return -5;\n  if (a === -6) return -6;\n  if (b === -6) return -6;\n  if (a === -7) return -7;\n  if (b === -7) return -7;\n  if (a === -8) return -8;\n  if (b === -8) return -8;\n  if (a === -9) return -9;\n  if (b === -9) return -9;\n  if (a === -10) return -10;\n  if (b === -10) return -10;\n  if (a === -11) return -11;\n  if (b === -11) return -11;\n  if (a === -12) return -12;\n  if (b === -12) return -12;\n  if (a === -13) return -13;\n  if (b === -13) return -13;\n  if (a === -14) return -14;\n  if (b === -14) return -14;\n  if (a === -15) return -15;\n  if (b === -15) return -15;\n  if (a === -16) return -16;\n  if (b === -16) return -16;\n  if (a === -17) return -17;\n  if (b === -17) return -17;\n  if (a === -18) return -18;\n  if (b === -18) return -18;\n  if (a === -19) return -19;\n  if (b === -19) return -19;\n  if (a === -20) return -20;\n  if (b === -20) return -20;\n  if (a === -21) return -21;\n  if (b === -21) return -21;\n  if (a === -22) return -22;\n  if (b === -22) return -22;\n  if (a === -23) return -23;\n  if (b === -23) return -23;\n  if (a === -24) return -24;\n  if (b === -24) return -24;\n  if (a === -25) return -25;\n  if (b === -25) return -25;\n  if (a === -26) return -26; // -26 is treated as -26\n  if (b === -26) return -26; // -26 is treated as -26\n  if (a === -27) return -27;\n  if (b === -27) return -27;\n  if (a === -28) return -28;\n  if (b === -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp22kte1qv.ts(74,9): error TS1005: ')' expected.\n../../../../tmp/tmp22kte1qv.ts(90,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333738
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    let product = a % b;\n    if (product === 0) {\n        return 0;\n    }\n    return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n148\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp_mp7zk1w.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_mp7zk1w.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 148,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333738
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (a === 0) return 0;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (b === -1) return -a;\n  if (b === -2) return -b;\n  if (b === -3) return -a;\n  if (b === -4) return -a;\n  if (b === -5) return -a;\n  if (b === -6) return -a;\n  if (b === -7) return -a;\n  if (b === -8) return -a;\n  if (b === -9) return -a;\n  if (b === -10) return -a;\n  if (b === -11) return -a;\n  if (b === -12) return -a;\n  if (b === -13) return -a;\n  if (b === -14) return -a;\n  if (b === -15) return -a;\n  if (b === -16) return -a;\n  if (b === -17) return -a;\n  if (b === -18) return -a;\n  if (b === -19) return -a;\n  if (b === -20) return -a;\n  if (b === -21) return -a;\n  if (b === -22) return -a;\n  if (b === -23) return -a;\n  if (b === -24) return -a;\n  if (b === -25) return -a;\n  if (b === -26) return -a;\n  if (b === -27) return -a;\n  if (b === -28) return -a;\n  if (b === -29) return -a;\n  if (b === -30) return -a;\n  if (b === -31) return -a;\n  if (b === -32) return -a;\n  if (b === -33) return -a;\n  if (b === -34) return -a;\n  if (b === -35) return -a;\n  if (b === -36) return -a;\n  if (b === -37) return -a;\n  if (b === -38) return -a;\n  if (b === -39) return -a;\n  if (b === -40) return -a;\n  if (b === -41) return -a;\n  if (b === -42) return -a;\n  if (b === -43) return -a;\n  if (b === -44) return -a;\n  if (b === -45) return -a;\n  if (b === -46) return -a;\n  if (b === -47) return -a;\n  if (b === -48) return -a;\n  if (b === -49) return -a;\n  if (b === -50) return -a;\n  if (b === -51) return -a;\n  if (b === -52) return -a;\n  if (b === -53) return -a;\n  if (b === -54) return -a;\n  if (b === -55) return -a;\n  if (b === -56) return -a;\n  if (b\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_jj05xke.ts(75,1): error TS1005: ')' expected.\n../../../../tmp/tmp_jj05xke.ts(91,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333738
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1) {\n    return -a;\n  }\n  if (b === -1) {\n    return -b;\n  }\n  if (a === -2) {\n    return -a;\n  }\n  if (b === -2) {\n    return -b;\n  }\n  if (a === -3) {\n    return -a;\n  }\n  if (b === -3) {\n    return -b;\n  }\n  if (a === -4) {\n    return -a;\n  }\n  if (b === -4) {\n    return -b;\n  }\n  if (a === -5) {\n    return -a;\n  }\n  if (b === -5) {\n    return -b;\n  }\n  if (a === -6) {\n    return -a;\n  }\n  if (b === -6) {\n    return -b;\n  }\n  if (a === -7) {\n    return -a;\n  }\n  if (b === -7) {\n    return -b;\n  }\n  if (a === -8) {\n    return -a;\n  }\n  if (b === -8) {\n    return -b;\n  }\n  if (a === -9) {\n    return -a;\n  }\n  if (b === -9) {\n    return -b;\n  }\n  if (a === -10) {\n    return -a;\n  }\n  if (b === -10) {\n    return -b;\n  }\n  if (a === -11) {\n    return -a;\n  }\n  if (b === -11) {\n    return -b;\n  }\n  if (a === -12) {\n    return -a;\n  }\n  if (b === -12) {\n    return -b;\n  }\n  if (a === -13) {\n    return -a;\n  }\n  if (b === -13) {\n    return -b;\n  }\n  if (a === -14) {\n    return -a;\n  }\n  if (b === -14) {\n    return -b;\n  }\n  if (a === -15) {\n    return -a;\n  }\n  if (b === -15) {\n    return -b;\n  }\n  if (a === -16) {\n    return -a;\n  }\n  if (b === -16) {\n    return -b;\n  }\n  if (a === -17) {\n    return -a;\n  }\n  if (b === -17) {\n    return -b;\n  }\n  if (a === -18) {\n    return -a;\n  }\n  if (b === -18) {\n    return -b;\n  }\n  if (a === -19) {\n    return -a;\n  }\n  if (b === -19) {\n    return -b;\n  }\n  if (a === -20) {\n    return -a;\n  }\n  if (b === -20) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa4ssnj8u.ts(161,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1) {\n    return -a;\n  }\n  if (b === -1) {\n    return -b;\n  }\n  const c = a % b;\n  if (c === 0) {\n    return multiply(a, b);\n  }\n  if (c > 0) {\n    return multiply(a - b, c);\n  }\n  return multiply(a + b, c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpr2qfjp9t.js:14\n    if (b === 0) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at multiply (/tmp/tmpr2qfjp9t.js:14:5)\n    at multiply (/tmp/tmpr2qfjp9t.js:34:16)\n    at multiply (/tmp/tmpr2qfjp9t.js:34:16)\n    at multiply (/tmp/tmpr2qfjp9t.js:34:16)\n    at multiply (/tmp/tmpr2qfjp9t.js:34:16)\n    at multiply (/tmp/tmpr2qfjp9t.js:34:16)\n    at multiply (/tmp/tmpr2qfjp9t.js:34:16)\n    at multiply (/tmp/tmpr2qfjp9t.js:34:16)\n    at multiply (/tmp/tmpr2qfjp9t.js:34:16)\n    at multiply (/tmp/tmpr2qfjp9t.js:34:16)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333739
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < 0 || b < 0) {\n    return NaN;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === 2) {\n    return b;\n  }\n  if (b === 2) {\n    return a;\n  }\n  if (a === 3) {\n    return b;\n  }\n  if (b === 3) {\n    return a;\n  }\n  if (a === 4) {\n    return b;\n  }\n  if (b === 4) {\n    return a;\n  }\n  if (a === 5) {\n    return b;\n  }\n  if (b === 5) {\n    return a;\n  }\n  if (a === 6) {\n    return b;\n  }\n  if (b === 6) {\n    return a;\n  }\n  if (a === 7) {\n    return b;\n  }\n  if (b === 7) {\n    return a;\n  }\n  if (a === 8) {\n    return b;\n  }\n  if (b === 8) {\n    return a;\n  }\n  if (a === 9) {\n    return b;\n  }\n  if (b === 9) {\n    return a;\n  }\n  if (a === 10) {\n    return b;\n  }\n  if (b === 10) {\n    return a;\n  }\n  if (a === 11) {\n    return b;\n  }\n  if (b === 11) {\n    return a;\n  }\n  if (a === 12) {\n    return b;\n  }\n  if (b === 12) {\n    return a;\n  }\n  if (a === 13) {\n    return b;\n  }\n  if (b === 13) {\n    return a;\n  }\n  if (a === 14) {\n    return b;\n  }\n  if (b === 14) {\n    return a;\n  }\n  if (a === 15) {\n    return b;\n  }\n  if (b === 15) {\n    return a;\n  }\n  if (a === 16) {\n    return b;\n  }\n  if (b === 16) {\n    return a;\n  }\n  if (a === 17) {\n    return b;\n  }\n  if (b === 17) {\n    return a;\n  }\n  if (a === 18) {\n    return b;\n  }\n  if (b === 18) {\n    return a;\n  }\n  if (a === 19) {\n    return b;\n  }\n  if (b === 19) {\n    return a;\n  }\n  if (a === 20) {\n    return b;\n  }\n  if (b === 20) {\n    return a;\n  }\n  if (a === 21) {\n    return b;\n  }\n  if (b === 21) {\n    return a;\n  }\n  if (a === 22) {\n    return b;\n  }\n  if (b === 22) {\n    return a;\n  }\n  if (a === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprkm8cvw4.ts(156,9): error TS1005: ')' expected.\n../../../../tmp/tmprkm8cvw4.ts(172,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333739
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp5tid6wnh.js:22:12)\n    at Object.<anonymous> (/tmp/tmp5tid6wnh.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333736
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0) {\n    return b;\n  }\n  return a % b + multiply(b % a, a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n344\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpae42l76z.js:25:12)\n    at Object.<anonymous> (/tmp/tmpae42l76z.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 344,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333739
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmplxfzu5gq.js:22:12)\n    at Object.<anonymous> (/tmp/tmplxfzu5gq.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333735
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 1) {\n        return b;\n    }\n    if (b === 1) {\n        return a;\n    }\n    if (a === -1) {\n        return -a;\n    }\n    if (b === -1) {\n        return -b;\n    }\n    if (a === -2) {\n        return -a;\n    }\n    if (b === -2) {\n        return -b;\n    }\n    if (a === -3) {\n        return -a;\n    }\n    if (b === -3) {\n        return -b;\n    }\n    if (a === -4) {\n        return -a;\n    }\n    if (b === -4) {\n        return -b;\n    }\n    if (a === -5) {\n        return -a;\n    }\n    if (b === -5) {\n        return -b;\n    }\n    if (a === -6) {\n        return -a;\n    }\n    if (b === -6) {\n        return -b;\n    }\n    if (a === -7) {\n        return -a;\n    }\n    if (b === -7) {\n        return -b;\n    }\n    if (a === -8) {\n        return -a;\n    }\n    if (b === -8) {\n        return -b;\n    }\n    if (a === -9) {\n        return -a;\n    }\n    if (b === -9) {\n        return -b;\n    }\n    if (a === -10) {\n        return -a;\n    }\n    if (b === -10) {\n        return -b;\n    }\n    if (a === -11) {\n        return -a;\n    }\n    if (b === -11) {\n        return -b;\n    }\n    if (a === -12) {\n        return -a;\n    }\n    if (b === -12) {\n        return -b;\n    }\n    if (a === -13) {\n        return -a;\n    }\n    if (b === -13) {\n        return -b;\n    }\n    if (a === -14) {\n        return -a;\n    }\n    if (b === -14) {\n        return -b;\n    }\n    if (a === -15) {\n        return -a;\n    }\n    if (b === -15) {\n        return -b;\n    }\n    if (a === -16) {\n        return -a;\n    }\n    if (b === -16) {\n        return -b;\n    }\n    if (a === -17) {\n        return -a;\n    }\n    if (b === -17) {\n        return -b;\n    }\n    if (a === -18) {\n        return -a;\n    }\n    if (b === -18) {\n        return -b;\n    }\n    if (a === -19) {\n        return -a;\n    }\n    if (b === -19) {\n        return -b;\n    }\n    if (a === -20) {\n        return -a;\n    }\n    if (b === -20) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpayibg5j9.ts(160,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333739
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (a === 0) return 0;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (b === -1) return -a;\n  if (a === -1) return -a;\n  if (a === -2) return -b;\n  if (b === -2) return a;\n  if (b === -3) return -a;\n  if (b === -4) return -a;\n  if (b === -5) return -a;\n  if (b === -6) return -a;\n  if (b === -7) return -a;\n  if (b === -8) return -a;\n  if (b === -9) return -a;\n  if (b === -10) return -a;\n  if (b === -11) return -a;\n  if (b === -12) return -a;\n  if (b === -13) return -a;\n  if (b === -14) return -a;\n  if (b === -15) return -a;\n  if (b === -16) return -a;\n  if (b === -17) return -a;\n  if (b === -18) return -a;\n  if (b === -19) return -a;\n  if (b === -20) return -a;\n  if (b === -21) return -a;\n  if (b === -22) return -a;\n  if (b === -23) return -a;\n  if (b === -24) return -a;\n  if (b === -25) return -a;\n  if (b === -26) return -a;\n  if (b === -27) return -a;\n  if (b === -28) return -a;\n  if (b === -29) return -a;\n  if (b === -30) return -a;\n  if (b === -31) return -a;\n  if (b === -32) return -a;\n  if (b === -33) return -a;\n  if (b === -34) return -a;\n  if (b === -35) return -a;\n  if (b === -36) return -a;\n  if (b === -37) return -a;\n  if (b === -38) return -a;\n  if (b === -39) return -a;\n  if (b === -40) return -a;\n  if (b === -41) return -a;\n  if (b === -42) return -a;\n  if (b === -43) return -a;\n  if (b === -44) return -a;\n  if (b === -45) return -a;\n  if (b === -46) return -a;\n  if (b === -47) return -a;\n  if (b === -48) return -a;\n  if (b === -49) return -a;\n  if (b === -50) return -a;\n  if (b === -51) return -a;\n  if (b === -52) return -a;\n  if (b === -53) return -a;\n  if (b === -54) return -a;\n  if (b === -55\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzh2zqi2i.ts(75,1): error TS1005: ')' expected.\n../../../../tmp/tmpzh2zqi2i.ts(91,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333739
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmdtjyhou.ts(170,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333739
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n148\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpevmo5tex.js:40:12)\n    at Object.<anonymous> (/tmp/tmpevmo5tex.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 148,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333739
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (b === 1) return a;\n  if (b === -1) return -a;\n  if (b === -2) return -a;\n  if (b === -3) return -a;\n  if (b === -4) return -a;\n  if (b === -5) return -a;\n  if (b === -6) return -a;\n  if (b === -7) return -a;\n  if (b === -8) return -a;\n  if (b === -9) return -a;\n  if (b === -10) return -a;\n  if (b === -11) return -a;\n  if (b === -12) return -a;\n  if (b === -13) return -a;\n  if (b === -14) return -a;\n  if (b === -15) return -a;\n  if (b === -16) return -a;\n  if (b === -17) return -a;\n  if (b === -18) return -a;\n  if (b === -19) return -a;\n  if (b === -20) return -a;\n  if (b === -21) return -a;\n  if (b === -22) return -a;\n  if (b === -23) return -a;\n  if (b === -24) return -a;\n  if (b === -25) return -a;\n  if (b === -26) return -a;\n  if (b === -27) return -a;\n  if (b === -28) return -a;\n  if (b === -29) return -a;\n  if (b === -30) return -a;\n  if (b === -31) return -a;\n  if (b === -32) return -a;\n  if (b === -33) return -a;\n  if (b === -34) return -a;\n  if (b === -35) return -a;\n  if (b === -36) return -a;\n  if (b === -37) return -a;\n  if (b === -38) return -a;\n  if (b === -39) return -a;\n  if (b === -40) return -a;\n  if (b === -41) return -a;\n  if (b === -42) return -a;\n  if (b === -43) return -a;\n  if (b === -44) return -a;\n  if (b === -45) return -a;\n  if (b === -46) return -a;\n  if (b === -47) return -a;\n  if (b === -48) return -a;\n  if (b === -49) return -a;\n  if (b === -50) return -a;\n  if (b === -51) return -a;\n  if (b === -52) return -a;\n  if (b === -53) return -a;\n  if (b === -54) return -a;\n  if (b === -55) return -a;\n  if (b === -56) return -a;\n  if (b === -57) return -a;\n  if (b === -58) return -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9dwein1h.ts(74,9): error TS1005: ';' expected.\n../../../../tmp/tmp9dwein1h.ts(90,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333739
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a / b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.3592233009708738\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp2p7lpkt5.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2p7lpkt5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.3592233009708738,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  let digitA = a;\n  let digitB = b;\n  while (digitA > 0 || digitB > 0) {\n    const digitA = digitA % 10;\n    const digitB = digitB % 10;\n    product = product + (digitA * digitB);\n    digitA /= 10;\n    digitB /= 10;\n  }\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl5zxrx88.ts(18,20): error TS2448: Block-scoped variable 'digitA' used before its declaration.\n../../../../tmp/tmpl5zxrx88.ts(19,20): error TS2448: Block-scoped variable 'digitB' used before its declaration.\n../../../../tmp/tmpl5zxrx88.ts(21,5): error TS2588: Cannot assign to 'digitA' because it is a constant.\n../../../../tmp/tmpl5zxrx88.ts(22,5): error TS2588: Cannot assign to 'digitB' because it is a constant.\n",
      "timestamp": 1660333739
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  let digit = 0;\n  \n  while (b > 0) {\n    digit = b % 10;\n    product = product * 10 + digit;\n    b = Math.floor(a / 10);\n    a = Math.floor(a / 10);\n  }\n  \n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n241\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpbrvuh18m.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbrvuh18m.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 241,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333739
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (b === 1) return a;\n  if (b === -1) return -a;\n  var c = a * b;\n  var d = c % 10;\n  if (d === 0) return c;\n  if (d === 1) return 0;\n  if (d === -1) return -c;\n  return -c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp8qqub4cv.js:33:12)\n    at Object.<anonymous> (/tmp/tmp8qqub4cv.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333739
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (b === 1) return a;\n  if (b === -1) return -a;\n  if (b < 0) return multiply(-a, b);\n  if (a === 0) return 0;\n  if (a === 1) return b;\n  if (a === -1) return -b;\n  if (a < 0) return multiply(-a, b);\n  if (a === -1) return -multiply(a, b);\n  if (a < b) return multiply(a, b);\n  return multiply(-a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpipxtsaak.js:14\n    if (b === 0)\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at multiply (/tmp/tmpipxtsaak.js:14:5)\n    at multiply (/tmp/tmpipxtsaak.js:33:16)\n    at multiply (/tmp/tmpipxtsaak.js:33:16)\n    at multiply (/tmp/tmpipxtsaak.js:33:16)\n    at multiply (/tmp/tmpipxtsaak.js:33:16)\n    at multiply (/tmp/tmpipxtsaak.js:33:16)\n    at multiply (/tmp/tmpipxtsaak.js:33:16)\n    at multiply (/tmp/tmpipxtsaak.js:33:16)\n    at multiply (/tmp/tmpipxtsaak.js:33:16)\n    at multiply (/tmp/tmpipxtsaak.js:33:16)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333739
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmplxfzu5gq.js:22:12)\n    at Object.<anonymous> (/tmp/tmplxfzu5gq.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333735
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (a === 0) return 0;\n  if (a === 1) return 1;\n  if (b === -1) return -1;\n  if (b === -2) return -2;\n  if (b === -3) return -3;\n  if (b === -4) return -4;\n  if (b === -5) return -5;\n  if (b === -6) return -6;\n  if (b === -7) return -7;\n  if (b === -8) return -8;\n  if (b === -9) return -9;\n  if (b === -10) return -10;\n  if (b === -11) return -11;\n  if (b === -12) return -12;\n  if (b === -13) return -13;\n  if (b === -14) return -14;\n  if (b === -15) return -15;\n  if (b === -16) return -16;\n  if (b === -17) return -17;\n  if (b === -18) return -18;\n  if (b === -19) return -19;\n  if (b === -20) return -20;\n  if (b === -21) return -21;\n  if (b === -22) return -22;\n  if (b === -23) return -23;\n  if (b === -24) return -24;\n  if (b === -25) return -25;\n  if (b === -26) return -26; // -27\n  if (b === -27) return -27;\n  if (b === -28) return -28;\n  if (b === -29) return -29;\n  if (b === -30) return -30;\n  if (b === -31) return -31;\n  if (b === -32) return -32;\n  if (b === -33) return -33;\n  if (b === -34) return -34;\n  if (b === -35) return -35;\n  if (b === -36) return -36;\n  if (b === -37) return -37;\n  if (b === -38) return -38;\n  if (b === -39) return -39;\n  if (b === -40) return -40;\n  if (b === -41) return -41;\n  if (b === -42) return -42;\n  if (b === -43) return -43;\n  if (b === -44) return -44;\n  if (b === -45) return -45;\n  if (b === -46) return -46;\n  if (b === -47) return -47;\n  if (b === -48) return -48;\n  if (b === -49) return -49;\n  if (b === -50) return -50;\n  if (b === -51) return -51;\n  if (b === -52) return -52;\n  if (b === -53) return -53;\n  if (b === -54) return -54;\n  if (b === -55\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpupjb_9co.ts(72,1): error TS1005: ')' expected.\n../../../../tmp/tmpupjb_9co.ts(88,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333739
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  while (b > 0) {\n    product = product * 10;\n    product = product + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n841\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpwvunpfmo.js:26:12)\n    at Object.<anonymous> (/tmp/tmpwvunpfmo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 841,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333739
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1 || b === -1) {\n    return -a;\n  }\n  if (a === -2) {\n    return -b;\n  }\n  if (b === -2) {\n    return -a;\n  }\n  if (a === -3) {\n    return -(b);\n  }\n  if (b === -3) {\n    return -(a);\n  }\n  if (a === -4) {\n    return -(b);\n  }\n  if (b === -4) {\n    return -(a);\n  }\n  if (a === -5) {\n    return -(b);\n  }\n  if (b === -5) {\n    return -(a);\n  }\n  if (a === -6) {\n    return -(b);\n  }\n  if (b === -6) {\n    return -(a);\n  }\n  if (a === -7) {\n    return -(b);\n  }\n  if (b === -7) {\n    return -(a);\n  }\n  if (a === -8) {\n    return -(b);\n  }\n  if (b === -8) {\n    return -(a);\n  }\n  if (a === -9) {\n    return -(b);\n  }\n  if (b === -9) {\n    return -(a);\n  }\n  if (a === -10) {\n    return -(b);\n  }\n  if (b === -10) {\n    return -(a);\n  }\n  if (a === -11) {\n    return -(b);\n  }\n  if (b === -11) {\n    return -(a);\n  }\n  if (a === -12) {\n    return -(b);\n  }\n  if (b === -12) {\n    return -(a);\n  }\n  if (a === -13) {\n    return -(b);\n  }\n  if (b === -13) {\n    return -(a);\n  }\n  if (a === -14) {\n    return -(b);\n  }\n  if (b === -14) {\n    return -(a);\n  }\n  if (a === -15) {\n    return -(b);\n  }\n  if (b === -15) {\n    return -(a);\n  }\n  if (a === -16) {\n    return -(b);\n  }\n  if (b === -16) {\n    return -(a);\n  }\n  if (a === -17) {\n    return -(b);\n  }\n  if (b === -17) {\n    return -(a);\n  }\n  if (a === -18) {\n    return -(b);\n  }\n  if (b === -18) {\n    return -(a);\n  }\n  if (a === -19) {\n    return -(b);\n  }\n  if (b === -19\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptvrgsaz_.ts(135,1): error TS1005: ')' expected.\n../../../../tmp/tmptvrgsaz_.ts(151,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333739
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (b === 1) return a;\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpn0mb1_dl.js:23:12)\n    at Object.<anonymous> (/tmp/tmpn0mb1_dl.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333739
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result *= 10 + a.charAt(i) - '0';\n  }\n  for (let i = 0; i < b.length; i++) {\n    result *= 10 + b.charAt(i) - '0';\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1656gu80.ts(15,25): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmp1656gu80.ts(16,22): error TS2339: Property 'charAt' does not exist on type 'number'.\n../../../../tmp/tmp1656gu80.ts(16,34): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp1656gu80.ts(18,25): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmp1656gu80.ts(19,22): error TS2339: Property 'charAt' does not exist on type 'number'.\n../../../../tmp/tmp1656gu80.ts(19,34): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333739
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a < 0 ? multiply(-a, b) : multiply(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpoc94pwdx.js:14\n    if (b === 0) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at multiply (/tmp/tmpoc94pwdx.js:14:5)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] - b[i];\n  }\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphoagzkrc.ts(15,25): error TS2339: Property 'length' does not exist on type 'number'.\n",
      "timestamp": 1660333739
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product: number = 0;\n  \n  // Iterate through each digit of the number\n  for (let i = 0; i < a.length; i++) {\n    product = product * 10 + a[i] - '0';\n  }\n  \n  // Iterate through each digit of the number\n  for (let i = 0; i < b.length; i++) {\n    product = product * 10 + b[i] - '0';\n  }\n  \n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkvhroo9_.ts(17,25): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmpkvhroo9_.ts(18,37): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpkvhroo9_.ts(22,25): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmpkvhroo9_.ts(23,37): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333741
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0 || a === b) {\n        return 0;\n    }\n    if (a < 0 || b < 0) {\n        return 0;\n    }\n    if (a > b) {\n        return 0;\n    }\n    if (a === 1) {\n        return b;\n    }\n    if (b === 1) {\n        return a;\n    }\n    if (a === -1) {\n        return -a;\n    }\n    if (b === -1) {\n        return -b;\n    }\n    let result = 0;\n    let i = 0;\n    while (i < b) {\n        result = result + Math.floor(a / b);\n        a = a % b;\n        i++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpti38i2_t.js:50:12)\n    at Object.<anonymous> (/tmp/tmpti38i2_t.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333741
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  \n  // Iterate through the digits of both numbers and multiply them together\n  for (let i = 0; i < Math.max(a.toString().length, b.toString().length); i++) {\n    product += parseInt(a.toString().charAt(i) * b.toString().charAt(i));\n  }\n  \n  // Return the product of the unit digits\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvm69yjbc.ts(18,25): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpvm69yjbc.ts(18,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpvm69yjbc.ts(18,50): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333742
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  let unitDigit = 0;\n  \n  // Find the unit digit of the larger number.\n  if (a > b) {\n    unitDigit = a%10;\n    a = a/10;\n  } else {\n    unitDigit = b%10;\n    b = b/10;\n  }\n  \n  // Find the product of the unit digit.\n  while (a > 0) {\n    product = product * unitDigit;\n    a = a/10;\n  }\n  \n  // Find the product of the remaining digits.\n  while (b > 0) {\n    product = product + b%10;\n    b = b/10;\n  }\n  \n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5.777777777777781\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp6s50p0ws.js:40:12)\n    at Object.<anonymous> (/tmp/tmp6s50p0ws.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5.777777777777781,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333742
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmplxfzu5gq.js:22:12)\n    at Object.<anonymous> (/tmp/tmplxfzu5gq.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  let digitA = a;\n  let digitB = b;\n  while (digitA > 0 && digitB > 0) {\n    const digitADigit = digitA % 10;\n    const digitBDigit = digitB % 10;\n    product = product + (digitADigit * digitBDigit);\n    digitA /= 10;\n    digitB /= 10;\n  }\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n27.91919191919193\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpu2qn4xvx.js:29:12)\n    at Object.<anonymous> (/tmp/tmpu2qn4xvx.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 27.91919191919193,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333742
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a < 0 ? multiply(-a, b) : multiply(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpoc94pwdx.js:14\n    if (b === 0) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at multiply (/tmp/tmpoc94pwdx.js:14:5)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n    at multiply (/tmp/tmpoc94pwdx.js:17:38)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmplvssg7t_.js:25:12)\n    at Object.<anonymous> (/tmp/tmplvssg7t_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333742
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmplvssg7t_.js:25:12)\n    at Object.<anonymous> (/tmp/tmplvssg7t_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333742
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  const c = a % b;\n  return multiply(b, c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n148\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpzyx67d6o.js:38:12)\n    at Object.<anonymous> (/tmp/tmpzyx67d6o.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 148,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333742
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (b === 1) return a;\n  if (b === -1) return -a;\n  if (b < 0) return multiply(-a, b);\n  if (a === 0) return 0;\n  if (a === 1) return 1;\n  if (a === -1) return -1;\n  if (a < 0) return multiply(-a, b);\n  if (a < 1) return multiply(a, -b);\n  if (a === -1) return -a;\n  if (a === 1) return 1;\n  if (a === 0) return 0;\n  if (a < -1) return multiply(a, -b);\n  if (a < 1) return multiply(a, -b);\n  if (a === 1) return 1;\n  if (a === 0) return 0;\n  if (a < -1) return multiply(a, -b);\n  if (a < 1) return multiply(a, -b);\n  if (a === -1) return -a;\n  if (a === 1) return 1;\n  if (a === 0) return 0;\n  if (a < -1) return multiply(a, -b);\n  if (a < 1) return multiply(a, -b);\n  if (a === -1) return -a;\n  if (a === 1) return 1;\n  if (a === 0) return 0;\n  if (a < -1) return multiply(a, -b);\n  if (a < 1) return multiply(a, -b);\n  if (a === -1) return -a;\n  if (a === 1) return 1;\n  if (a === 0) return 0;\n  if (a < -1) return multiply(a, -b);\n  if (a < 1) return multiply(a, -b);\n  if (a === -1) return -a;\n  if (a === 1) return 1;\n  if (a === 0) return 0;\n  if (a < -1) return multiply(a, -b);\n  if (a < 1) return multiply(a, -b);\n  if (a === -1) return -a;\n  if (a === 1) return 1;\n  if (a === 0) return 0;\n  if (a < -1) return multiply(a, -b);\n  if (a < 1) return multiply(a, -b);\n  if (a === -1) return -a;\n  if (a === 1) return 1;\n  if (a === 0) return 0;\n  if (a < -1) return multiply(a, -b);\n  if (a < 1) return multiply(a, -b);\n  if (a === -1) return -a;\n  if (a === 1) return 1;\n  if (a === 0) return 0;\n  if (a < -1) return multiply(a, -b);\n  if (a < 1) return multiply(a, -b);\n  if (a === -1) return -a;\n  if (a === 1) return 1;\n  if (a === 0) return 0;\n  if (a < -1) return multiply(a, -b);\n  if (a < 1) return multiply(a, -b);\n  if (a === -1) return -a;\n  if (a === 1) return 1;\n  if (a === 0) return 0;\n  if (a < -1) return \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpol9hnz2q.ts(92,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333742
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (b === 1) return a;\n  if (b === -1) return -a;\n  if (b < 0) return multiply(-a, b);\n  if (a === 0) return 0;\n  if (a === 1) return 1;\n  if (a === -1) return -1;\n  if (a < 0) return multiply(-a, b);\n  if (a === b) return 0;\n  if (a === -b) return 1;\n  if (a < b) return multiply(a, -b);\n  return multiply(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp7h6i1sqa.js:14\n    if (b === 0)\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at multiply (/tmp/tmp7h6i1sqa.js:14:5)\n    at multiply (/tmp/tmp7h6i1sqa.js:21:16)\n    at multiply (/tmp/tmp7h6i1sqa.js:21:16)\n    at multiply (/tmp/tmp7h6i1sqa.js:21:16)\n    at multiply (/tmp/tmp7h6i1sqa.js:21:16)\n    at multiply (/tmp/tmp7h6i1sqa.js:21:16)\n    at multiply (/tmp/tmp7h6i1sqa.js:21:16)\n    at multiply (/tmp/tmp7h6i1sqa.js:21:16)\n    at multiply (/tmp/tmp7h6i1sqa.js:21:16)\n    at multiply (/tmp/tmp7h6i1sqa.js:21:16)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333742
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcgpejx5g.ts(17,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333742
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a / b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.3592233009708738\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp2p7lpkt5.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2p7lpkt5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.3592233009708738,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1) {\n    return -a;\n  }\n  if (b === -1) {\n    return -b;\n  }\n  const c = a % b;\n  if (c === 0) {\n    return multiply(a, b >> 1);\n  }\n  return multiply(b, a >> 1) + c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n385\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpuvbtp3p6.js:41:12)\n    at Object.<anonymous> (/tmp/tmpuvbtp3p6.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 385,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333742
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (a === 0) return 0;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a === -1) return -b;\n  if (b === -1) return a;\n  if (a === -2) return -b;\n  if (b === -2) return a;\n  if (a === -3) return -b;\n  if (b === -3) return a;\n  if (a === -4) return -b;\n  if (b === -4) return a;\n  if (a === -5) return -b;\n  if (b === -5) return a;\n  if (a === -6) return -b;\n  if (b === -6) return a;\n  if (a === -7) return -b;\n  if (b === -7) return a;\n  if (a === -8) return -b;\n  if (b === -8) return a;\n  if (a === -9) return -b;\n  if (b === -9) return a;\n  if (a === -10) return -b;\n  if (b === -10) return a;\n  if (a === -11) return -b;\n  if (b === -11) return a;\n  if (a === -12) return -b;\n  if (b === -12) return a;\n  if (a === -13) return -b;\n  if (b === -13) return a;\n  if (a === -14) return -b;\n  if (b === -14) return a;\n  if (a === -15) return -b;\n  if (b === -15) return a;\n  if (a === -16) return -b;\n  if (b === -16) return a;\n  if (a === -17) return -b;\n  if (b === -17) return a;\n  if (a === -18) return -b;\n  if (b === -18) return a;\n  if (a === -19) return -b;\n  if (b === -19) return a;\n  if (a === -20) return -b;\n  if (b === -20) return a;\n  if (a === -21) return -b;\n  if (b === -21) return a;\n  if (a === -22) return -b;\n  if (b === -22) return a;\n  if (a === -23) return -b;\n  if (b === -23) return a;\n  if (a === -24) return -b;\n  if (b === -24) return a;\n  if (a === -25) return -b;\n  if (b === -25) return a;\n  if (a === -26) return -b;\n  if (b === -26) return a;\n  if (a === -27) return -b;\n  if (b === -27) return a;\n  if (a === -28) return -b;\n  if (b === -28) return a;\n  if (a === -29) return -b;\n  if (b === -29) return a;\n  if (a === -30) return -b;\n  if (b === -30) return a;\n  if (a === -31) return -b;\n  if (b === -31) return a;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4dl4yo56.ts(96,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0\n  }\n  return a / b\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.3592233009708738\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpwcfpt4yr.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwcfpt4yr.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.3592233009708738,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333743
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (a < 0 || b < 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a > b) {\n    return multiply(b, a % b);\n  }\n  if (b > a) {\n    return multiply(a, b % a);\n  }\n  if (a === b) {\n    return 1;\n  }\n  if (a < b) {\n    return multiply(a, b);\n  }\n  return multiply(b, a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp5wt2wams.js:37:12)\n    at Object.<anonymous> (/tmp/tmp5wt2wams.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333742
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a < 0 || b < 0) {\n        return 0;\n    }\n    if (a > b) {\n        return 0;\n    }\n    if (a === b) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp03s8qmhh.ts(144,9): error TS1005: ')' expected.\n../../../../tmp/tmp03s8qmhh.ts(160,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333742
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpq52uby9y.js:25:12)\n    at Object.<anonymous> (/tmp/tmpq52uby9y.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333742
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  \n  // Iterate through each digit in the first number\n  for (let i = 0; i < a; i++) {\n    // Add the unit digit to the product\n    product += a[i];\n  }\n  \n  // Iterate through each digit in the second number\n  for (let i = 0; i < b; i++) {\n    // Add the unit digit to the product\n    product += b[i];\n  }\n  \n  // Return the product\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp003q3k_a.js:31:12)\n    at Object.<anonymous> (/tmp/tmp003q3k_a.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333743
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp5tid6wnh.js:22:12)\n    at Object.<anonymous> (/tmp/tmp5tid6wnh.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333736
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product: number = 0;\n  \n  // Iterate through each digit of both numbers\n  for (let i = 0; i < a.length; i++) {\n    product += (a[i] as number) * (b[i] as number);\n  }\n  \n  // Return the product of their unit digits\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6uwza63i.ts(17,25): error TS2339: Property 'length' does not exist on type 'number'.\n",
      "timestamp": 1660333742
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === 2) {\n    return b;\n  }\n  if (b === 2) {\n    return a;\n  }\n  if (a === 3) {\n    return b;\n  }\n  if (b === 3) {\n    return a;\n  }\n  if (a === 4) {\n    return b;\n  }\n  if (b === 4) {\n    return a;\n  }\n  if (a === 5) {\n    return b;\n  }\n  if (b === 5) {\n    return a;\n  }\n  if (a === 6) {\n    return b;\n  }\n  if (b === 6) {\n    return a;\n  }\n  if (a === 7) {\n    return b;\n  }\n  if (b === 7) {\n    return a;\n  }\n  if (a === 8) {\n    return b;\n  }\n  if (b === 8) {\n    return a;\n  }\n  if (a === 9) {\n    return b;\n  }\n  if (b === 9) {\n    return a;\n  }\n  if (a === 10) {\n    return b;\n  }\n  if (b === 10) {\n    return a;\n  }\n  if (a === 11) {\n    return b;\n  }\n  if (b === 11) {\n    return a;\n  }\n  if (a === 12) {\n    return b;\n  }\n  if (b === 12) {\n    return a;\n  }\n  if (a === 13) {\n    return b;\n  }\n  if (b === 13) {\n    return a;\n  }\n  if (a === 14) {\n    return b;\n  }\n  if (b === 14) {\n    return a;\n  }\n  if (a === 15) {\n    return b;\n  }\n  if (b === 15) {\n    return a;\n  }\n  if (a === 16) {\n    return b;\n  }\n  if (b === 16) {\n    return a;\n  }\n  if (a === 17) {\n    return b;\n  }\n  if (b === 17) {\n    return a;\n  }\n  if (a === 18) {\n    return b;\n  }\n  if (b === 18) {\n    return a;\n  }\n  if (a === 19) {\n    return b;\n  }\n  if (b === 19) {\n    return a;\n  }\n  if (a === 20) {\n    return b;\n  }\n  if (b === 20) {\n    return a;\n  }\n  if (a === 21) {\n    return b;\n  }\n  if (b === 21) {\n    return a;\n  }\n  if (a === 22) {\n    return b;\n  }\n  if (b === 22) {\n    return a;\n  }\n  if (a === 23\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6diq_l61.ts(156,1): error TS1005: ')' expected.\n../../../../tmp/tmp6diq_l61.ts(172,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let result = 0;\n  let carry = 0;\n  let digit = 0;\n  while (a >= 10) {\n    digit = a%10;\n    result += (digit * b + carry);\n    carry = Math.floor(digit/10);\n    a = Math.floor(a / 10);\n  }\n  if (a > 0) {\n    digit = a%10;\n    result += (digit * b + carry);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5356\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpj_l7bpzc.js:32:12)\n    at Object.<anonymous> (/tmp/tmpj_l7bpzc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5356,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333742
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a / b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.3592233009708738\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp2p7lpkt5.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2p7lpkt5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.3592233009708738,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    let result = 0;\n    while (a > 0) {\n        if (a % 10 === 0 && b % 10 === 0) {\n            return result;\n        }\n        result *= 10;\n        result += (a % 10);\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nInfinity\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp06s4a0p5.js:35:12)\n    at Object.<anonymous> (/tmp/tmp06s4a0p5.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: Infinity,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333742
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product: number = 0;\n  let unitDigits: number[] = [];\n  let unitDigit: number = 0;\n  let unitDigitCount: number = 0;\n  let unitDigitMax: number = 10;\n  let unitDigitMin: number = 1;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\n  let unitDigitMaxCount: number = 0;\n  let unitDigitMinCount: number = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9dejsgvy.ts(88,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333742
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) return 0;\n    if (b === 1) return a;\n    if (a === 0) return 0;\n    if (a === 1) return b;\n    if (a === -1) return -b;\n    if (b === -1) return -a;\n    if (a === -2) return -a;\n    if (b === -2) return -a;\n    if (a === -3) return -a;\n    if (b === -3) return -a;\n    if (a === -4) return -a;\n    if (b === -4) return -a;\n    if (a === -5) return -a;\n    if (b === -5) return -a;\n    if (a === -6) return -a;\n    if (b === -6) return -a;\n    if (a === -7) return -a;\n    if (b === -7) return -a;\n    if (a === -8) return -a;\n    if (b === -8) return -a;\n    if (a === -9) return -a;\n    if (b === -9) return -a;\n    if (a === -10) return -a;\n    if (b === -10) return -a;\n    if (a === -11) return -a;\n    if (b === -11) return -a;\n    if (a === -12) return -a;\n    if (b === -12) return -a;\n    if (a === -13) return -a;\n    if (b === -13) return -a;\n    if (a === -14) return -a;\n    if (b === -14) return -a;\n    if (a === -15) return -a;\n    if (b === -15) return -a;\n    if (a === -16) return -a;\n    if (b === -16) return -a;\n    if (a === -17) return -a;\n    if (b === -17) return -a;\n    if (a === -18) return -a;\n    if (b === -18) return -a;\n    if (a === -19) return -a;\n    if (b === -19) return -a;\n    if (a === -20) return -a;\n    if (b === -20) return -a;\n    if (a === -21) return -a;\n    if (b === -21) return -a;\n    if (a === -22) return -a;\n    if (b === -22) return -a;\n    if (a === -23) return -a;\n    if (b === -23) return -a;\n    if (a === -24) return -a;\n    if (b === -24) return -a;\n    if (a === -25) return -a;\n    if (b === -25) return -a;\n    if (a === -26) return -a;\n    if (b === -26) return -a;\n    if (a === -27) return -a;\n    if (b === -27) return -a;\n    if (a === -28) return -a;\n    if (b === -28) return -a;\n    if (a === -29) return -a;\n    if (b === -29) return -a;\n    if (a \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_f_nzybg.ts(77,1): error TS1005: ')' expected.\n../../../../tmp/tmp_f_nzybg.ts(93,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333742
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a / b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.3592233009708738\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp2p7lpkt5.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2p7lpkt5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.3592233009708738,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < 0 || b < 0) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  let result = 0;\n  let i = 0;\n  while (i < a.length) {\n    result *= 10;\n    result += a.charCodeAt(i++) - '0';\n  }\n  while (i < b.length) {\n    result *= 10;\n    result += b.charCodeAt(i++) - '0';\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9oevfuaz.ts(28,16): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmp9oevfuaz.ts(30,17): error TS2339: Property 'charCodeAt' does not exist on type 'number'.\n../../../../tmp/tmp9oevfuaz.ts(30,35): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp9oevfuaz.ts(32,16): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmp9oevfuaz.ts(34,17): error TS2339: Property 'charCodeAt' does not exist on type 'number'.\n../../../../tmp/tmp9oevfuaz.ts(34,35): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333743
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < 0 || b < 0) {\n    return NaN;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === 2) {\n    return b;\n  }\n  if (b === 2) {\n    return a;\n  }\n  if (a === 3) {\n    return b;\n  }\n  if (b === 3) {\n    return a;\n  }\n  if (a === 4) {\n    return b;\n  }\n  if (b === 4) {\n    return a;\n  }\n  if (a === 5) {\n    return b;\n  }\n  if (b === 5) {\n    return a;\n  }\n  if (a === 6) {\n    return b;\n  }\n  if (b === 6) {\n    return a;\n  }\n  if (a === 7) {\n    return b;\n  }\n  if (b === 7) {\n    return a;\n  }\n  if (a === 8) {\n    return b;\n  }\n  if (b === 8) {\n    return a;\n  }\n  if (a === 9) {\n    return b;\n  }\n  if (b === 9) {\n    return a;\n  }\n  if (a === 10) {\n    return b;\n  }\n  if (b === 10) {\n    return a;\n  }\n  if (a === 11) {\n    return b;\n  }\n  if (b === 11) {\n    return a;\n  }\n  if (a === 12) {\n    return b;\n  }\n  if (b === 12) {\n    return a;\n  }\n  if (a === 13) {\n    return b;\n  }\n  if (b === 13) {\n    return a;\n  }\n  if (a === 14) {\n    return b;\n  }\n  if (b === 14) {\n    return a;\n  }\n  if (a === 15) {\n    return b;\n  }\n  if (b === 15) {\n    return a;\n  }\n  if (a === 16) {\n    return b;\n  }\n  if (b === 16) {\n    return a;\n  }\n  if (a === 17) {\n    return b;\n  }\n  if (b === 17) {\n    return a;\n  }\n  if (a === 18) {\n    return b;\n  }\n  if (b === 18) {\n    return a;\n  }\n  if (a === 19) {\n    return b;\n  }\n  if (b === 19) {\n    return a;\n  }\n  if (a === 20) {\n    return b;\n  }\n  if (b === 20) {\n    return a;\n  }\n  if (a === 21) {\n    return b;\n  }\n  if (b === 21) {\n    return a;\n  }\n  if (a === 22) {\n    return b;\n  }\n  if (b === 22) {\n    return a;\n  }\n  if (a === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprkm8cvw4.ts(156,9): error TS1005: ')' expected.\n../../../../tmp/tmprkm8cvw4.ts(172,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333739
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (b === 1) return a;\n  if (b === -1) return -a;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a1 = 0;\n  let a2 = 1;\n  let a3 = 1;\n  let a4 = 1;\n  let a5 = 1;\n  let a6 = 1;\n  let a7 = 1;\n  let a8 = 1;\n  let a9 = 1;\n  let a10 = 1;\n  let a11 = 1;\n  let a12 = 1;\n  let a13 = 1;\n  let a14 = 1;\n  let a15 = 1;\n  let a16 = 1;\n  let a17 = 1;\n  let a18 = 1;\n  let a19 = 1;\n  let a20 = 1;\n  let a21 = 1;\n  let a22 = 1;\n  let a23 = 1;\n  let a24 = 1;\n  let a25 = 1;\n  let a26 = 1;\n  let a27 = 1;\n  let a28 = 1;\n  let a29 = 1;\n  let a30 = 1;\n  let a31 = 1;\n  let a32 = 1;\n  let a33 = 1;\n  let a34 = 1;\n  let a35 = 1;\n  let a36 = 1;\n  let a37 = 1;\n  let a38 = 1;\n  let a39 = 1;\n  let a40 = 1;\n  let a41 = 1;\n  let a42 = 1;\n  let a43 = 1;\n  let a44 = 1;\n  let a45 = 1;\n  let a46 = 1;\n  let a47 = 1;\n  let a48 = 1;\n  let a49 = 1;\n  let a50 = 1;\n  let a51 = 1;\n  let a52 = 1;\n  let a53 = 1;\n  let a54 = 1;\n  let a55 = 1;\n  let a56 = 1;\n  let a57 = 1;\n  let a58 = 1;\n  let a59 = 1;\n  let a60 = 1;\n  let a61 = 1;\n  let a6\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmytwu7xl.ts(145,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333744
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (b === 1) return a;\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpn0mb1_dl.js:23:12)\n    at Object.<anonymous> (/tmp/tmpn0mb1_dl.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333739
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === 2) {\n    return b;\n  }\n  if (b === 2) {\n    return a;\n  }\n  if (a === 3) {\n    return b;\n  }\n  if (b === 3) {\n    return a;\n  }\n  if (a === 4) {\n    return b;\n  }\n  if (b === 4) {\n    return a;\n  }\n  if (a === 5) {\n    return b;\n  }\n  if (b === 5) {\n    return a;\n  }\n  if (a === 6) {\n    return b;\n  }\n  if (b === 6) {\n    return a;\n  }\n  if (a === 7) {\n    return b;\n  }\n  if (b === 7) {\n    return a;\n  }\n  if (a === 8) {\n    return b;\n  }\n  if (b === 8) {\n    return a;\n  }\n  if (a === 9) {\n    return b;\n  }\n  if (b === 9) {\n    return a;\n  }\n  if (a === 10) {\n    return b;\n  }\n  if (b === 10) {\n    return a;\n  }\n  if (a === 11) {\n    return b;\n  }\n  if (b === 11) {\n    return a;\n  }\n  if (a === 12) {\n    return b;\n  }\n  if (b === 12) {\n    return a;\n  }\n  if (a === 13) {\n    return b;\n  }\n  if (b === 13) {\n    return a;\n  }\n  if (a === 14) {\n    return b;\n  }\n  if (b === 14) {\n    return a;\n  }\n  if (a === 15) {\n    return b;\n  }\n  if (b === 15) {\n    return a;\n  }\n  if (a === 16) {\n    return b;\n  }\n  if (b === 16) {\n    return a;\n  }\n  if (a === 17) {\n    return b;\n  }\n  if (b === 17) {\n    return a;\n  }\n  if (a === 18) {\n    return b;\n  }\n  if (b === 18) {\n    return a;\n  }\n  if (a === 19) {\n    return b;\n  }\n  if (b === 19) {\n    return a;\n  }\n  if (a === 20) {\n    return b;\n  }\n  if (b === 20) {\n    return a;\n  }\n  if (a === 21) {\n    return b;\n  }\n  if (b === 21) {\n    return a;\n  }\n  if (a === 22) {\n    return b;\n  }\n  if (b === 22) {\n    return a;\n  }\n  if (a === 23\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6diq_l61.ts(156,1): error TS1005: ')' expected.\n../../../../tmp/tmp6diq_l61.ts(172,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmarakkie.ts(17,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333745
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] - '0';\n  }\n  for (let i = 0; i < b.length; i++) {\n    product += b[i] - '0';\n  }\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiuoyt6fn.ts(15,25): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmpiuoyt6fn.ts(16,23): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpiuoyt6fn.ts(18,25): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmpiuoyt6fn.ts(19,23): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  return a / b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.3592233009708738\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpnx1937vp.js:25:12)\n    at Object.<anonymous> (/tmp/tmpnx1937vp.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.3592233009708738,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333745
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i].value * b[i].value;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv1g4rx0l.ts(15,25): error TS2339: Property 'length' does not exist on type 'number'.\n",
      "timestamp": 1660333745
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  let digit = 0;\n  while (a >= 10) {\n    digit = a % 10;\n    product = product * 10 + digit;\n    a = Math.floor(a / 10);\n  }\n  while (a > 0) {\n    digit = a;\n    product = product * 10 + digit;\n    a = Math.floor(a / 10);\n  }\n  while (a > 0) {\n    digit = a;\n    product = product * 10 + digit;\n    a = Math.floor(a / 10);\n  }\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n841\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpsra6gvyq.js:36:12)\n    at Object.<anonymous> (/tmp/tmpsra6gvyq.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 841,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333745
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a < 0 || b < 0) {\n        return 0;\n    }\n    if (a === 1) {\n        return b;\n    }\n    if (b === 1) {\n        return a;\n    }\n    if (a === 2) {\n        return b;\n    }\n    if (b === 2) {\n        return a;\n    }\n    if (a === 3) {\n        return b;\n    }\n    if (b === 3) {\n        return a;\n    }\n    if (a === 4) {\n        return b;\n    }\n    if (b === 4) {\n        return a;\n    }\n    if (a === 5) {\n        return b;\n    }\n    if (b === 5) {\n        return a;\n    }\n    if (a === 6) {\n        return b;\n    }\n    if (b === 6) {\n        return a;\n    }\n    if (a === 7) {\n        return b;\n    }\n    if (b === 7) {\n        return a;\n    }\n    if (a === 8) {\n        return b;\n    }\n    if (b === 8) {\n        return a;\n    }\n    if (a === 9) {\n        return b;\n    }\n    if (b === 9) {\n        return a;\n    }\n    if (a === 10) {\n        return b;\n    }\n    if (b === 10) {\n        return a;\n    }\n    if (a === 11) {\n        return b;\n    }\n    if (b === 11) {\n        return a;\n    }\n    if (a === 12) {\n        return b;\n    }\n    if (b === 12) {\n        return a;\n    }\n    if (a === 13) {\n        return b;\n    }\n    if (b === 13) {\n        return a;\n    }\n    if (a === 14) {\n        return b;\n    }\n    if (b === 14) {\n        return a;\n    }\n    if (a === 15) {\n        return b;\n    }\n    if (b === 15) {\n        return a;\n    }\n    if (a === 16) {\n        return b;\n    }\n    if (b === 16) {\n        return a;\n    }\n    if (a === 17) {\n        return b;\n    }\n    if (b === 17) {\n        return a;\n    }\n    if (a === 18) {\n        return b;\n    }\n    if (b === 18) {\n        return a;\n    }\n    if (a === 19) {\n        return b;\n    }\n    if (b === 19) {\n        return a;\n    }\n    if (a === 20) {\n        return b;\n    }\n    if (b === 20) {\n        return a;\n    }\n    if (a === 21) {\n        return b;\n    }\n    if (b === 21) {\n        return a;\n    }\n    if (a === 22) {\n        return b;\n    }\n    if (b === 22) {\n        return a;\n    }\n    if (a === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwv07x5fs.ts(156,9): error TS1005: ')' expected.\n../../../../tmp/tmpwv07x5fs.ts(172,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === 2) {\n    return b;\n  }\n  if (b === 2) {\n    return a;\n  }\n  if (a === 3) {\n    return b;\n  }\n  if (b === 3) {\n    return a;\n  }\n  if (a === 4) {\n    return b;\n  }\n  if (b === 4) {\n    return a;\n  }\n  if (a === 5) {\n    return b;\n  }\n  if (b === 5) {\n    return a;\n  }\n  if (a === 6) {\n    return b;\n  }\n  if (b === 6) {\n    return a;\n  }\n  if (a === 7) {\n    return b;\n  }\n  if (b === 7) {\n    return a;\n  }\n  if (a === 8) {\n    return b;\n  }\n  if (b === 8) {\n    return a;\n  }\n  if (a === 9) {\n    return b;\n  }\n  if (b === 9) {\n    return a;\n  }\n  if (a === 10) {\n    return b;\n  }\n  if (b === 10) {\n    return a;\n  }\n  if (a === 11) {\n    return b;\n  }\n  if (b === 11) {\n    return a;\n  }\n  if (a === 12) {\n    return b;\n  }\n  if (b === 12) {\n    return a;\n  }\n  if (a === 13) {\n    return b;\n  }\n  if (b === 13) {\n    return a;\n  }\n  if (a === 14) {\n    return b;\n  }\n  if (b === 14) {\n    return a;\n  }\n  if (a === 15) {\n    return b;\n  }\n  if (b === 15) {\n    return a;\n  }\n  if (a === 16) {\n    return b;\n  }\n  if (b === 16) {\n    return a;\n  }\n  if (a === 17) {\n    return b;\n  }\n  if (b === 17) {\n    return a;\n  }\n  if (a === 18) {\n    return b;\n  }\n  if (b === 18) {\n    return a;\n  }\n  if (a === 19) {\n    return b;\n  }\n  if (b === 19) {\n    return a;\n  }\n  if (a === 20) {\n    return b;\n  }\n  if (b === 20) {\n    return a;\n  }\n  if (a === 21) {\n    return b;\n  }\n  if (b === 21) {\n    return a;\n  }\n  if (a === 22) {\n    return b;\n  }\n  if (b === 22) {\n    return a;\n  }\n  if (a === 23\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6diq_l61.ts(156,1): error TS1005: ')' expected.\n../../../../tmp/tmp6diq_l61.ts(172,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (b === 1) return a;\n  if (b === -1) return -a;\n  if (b < 0) return multiply(-a, b);\n  if (a === 0) return 0;\n  if (a === 1) return 1;\n  if (a === -1) return -1;\n  if (a < 0) return multiply(-a, b);\n  if (a === b) return 0;\n  if (a === -b) return 1;\n  if (a === 0 || b === 0) return 0;\n  if (a === 1 || b === 1) return 1;\n  if (a === -1 || b === -1) return -1;\n  if (a < 0 || b < 0) return multiply(-a, b);\n  if (a === 0 || b === 0) return 0;\n  if (a === 1 || b === 1) return 1;\n  if (a === -1 || b === -1) return -1;\n  if (a < 0 || b < 0) return multiply(-a, b);\n  if (a === 0 || b === 0) return 0;\n  if (a === 1 || b === 1) return 1;\n  if (a === -1 || b === -1) return -1;\n  if (a < 0 || b < 0) return multiply(-a, b);\n  if (a === 0 || b === 0) return 0;\n  if (a === 1 || b === 1) return 1;\n  if (a === -1 || b === -1) return -1;\n  if (a < 0 || b < 0) return multiply(-a, b);\n  if (a === 0 || b === 0) return 0;\n  if (a === 1 || b === 1) return 1;\n  if (a === -1 || b === -1) return -1;\n  if (a < 0 || b < 0) return multiply(-a, b);\n  if (a === 0 || b === 0) return 0;\n  if (a === 1 || b === 1) return 1;\n  if (a === -1 || b === -1) return -1;\n  if (a < 0 || b < 0) return multiply(-a, b);\n  if (a === 0 || b === 0) return 0;\n  if (a === 1 || b === 1) return 1;\n  if (a === -1 || b === -1) return -1;\n  if (a < 0 || b < 0) return multiply(-a, b);\n  if (a === 0 || b === 0) return 0;\n  if (a === 1 || b === 1) return 1;\n  if (a === -1 || b === -1) return -1;\n  if (a < 0 || b < 0) return multiply(-a, b);\n  if (a === 0 || b === 0) return 0;\n  if (a === 1 || b === 1) return 1;\n  if (a === -1 || b === -1) return -1;\n  if (a < 0 || b < 0) return multiply(-a, b);\n  if (a === 0 || b === 0) return 0;\n  if (a === 1 || b === 1) return 1;\n  if (a === -1 || b === -1) return -1;\n  if (a < 0 || b < 0) return \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpit728pfs.ts(80,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333745
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a < 0 || b < 0) {\n        return 0;\n    }\n    if (a === 1) {\n        return b;\n    }\n    if (b === 1) {\n        return a;\n    }\n    if (a === 2) {\n        return 1;\n    }\n    if (b === 2) {\n        return 1;\n    }\n    if (a === 3) {\n        return b;\n    }\n    if (b === 3) {\n        return a;\n    }\n    if (a === 4) {\n        return 2;\n    }\n    if (b === 4) {\n        return 2;\n    }\n    if (a === 5) {\n        return 3;\n    }\n    if (b === 5) {\n        return 3;\n    }\n    if (a === 6) {\n        return 4;\n    }\n    if (b === 6) {\n        return 4;\n    }\n    if (a === 7) {\n        return 5;\n    }\n    if (b === 7) {\n        return 5;\n    }\n    if (a === 8) {\n        return 6;\n    }\n    if (b === 8) {\n        return 6;\n    }\n    if (a === 9) {\n        return 7;\n    }\n    if (b === 9) {\n        return 7;\n    }\n    if (a === 10) {\n        return 8;\n    }\n    if (b === 10) {\n        return 8;\n    }\n    if (a === 11) {\n        return 9;\n    }\n    if (b === 11) {\n        return 9;\n    }\n    if (a === 12) {\n        return 10;\n    }\n    if (b === 12) {\n        return 10;\n    }\n    if (a === 13) {\n        return 11;\n    }\n    if (b === 13) {\n        return 11;\n    }\n    if (a === 14) {\n        return 12;\n    }\n    if (b === 14) {\n        return 12;\n    }\n    if (a === 15) {\n        return 13;\n    }\n    if (b === 15) {\n        return 13;\n    }\n    if (a === 16) {\n        return 14;\n    }\n    if (b === 16) {\n        return 14;\n    }\n    if (a === 17) {\n        return 15;\n    }\n    if (b === 17) {\n        return 15;\n    }\n    if (a === 18) {\n        return 16;\n    }\n    if (b === 18) {\n        return 16;\n    }\n    if (a === 19) {\n        return 17;\n    }\n    if (b === 19) {\n        return 17;\n    }\n    if (a === 20) {\n        return 18;\n    }\n    if (b === 20) {\n        return 18;\n    }\n    if (a === 21) {\n        return 19;\n    }\n    if (b === 21) {\n        return 19;\n    }\n    if (a === 22) {\n        return 20;\n    }\n    if (b === 22) {\n        return 20;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplvd1yyqf.ts(170,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333745
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  return a % b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n148\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpgf6f6hwb.js:25:12)\n    at Object.<anonymous> (/tmp/tmpgf6f6hwb.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 148,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333736
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmplxfzu5gq.js:22:12)\n    at Object.<anonymous> (/tmp/tmplxfzu5gq.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  return a % b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n148\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpgf6f6hwb.js:25:12)\n    at Object.<anonymous> (/tmp/tmpgf6f6hwb.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 148,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333736
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return b;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n412\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmphehoddkw.js:40:12)\n    at Object.<anonymous> (/tmp/tmphehoddkw.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 412,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333746
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] - '0';\n  }\n  for (let i = 0; i < b.length; i++) {\n    product += b[i] - '0';\n  }\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiuoyt6fn.ts(15,25): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmpiuoyt6fn.ts(16,23): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpiuoyt6fn.ts(18,25): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmpiuoyt6fn.ts(19,23): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let product = 0;\n  let digitA = a;\n  let digitB = b;\n  while (digitA || digitB) {\n    const digitA = digitA % 10;\n    const digitB = digitB % 10;\n    product += digitA * digitB;\n    digitA /= 10;\n    digitB /= 10;\n  }\n  return product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpaq_p9ijb.ts(18,20): error TS2448: Block-scoped variable 'digitA' used before its declaration.\n../../../../tmp/tmpaq_p9ijb.ts(19,20): error TS2448: Block-scoped variable 'digitB' used before its declaration.\n../../../../tmp/tmpaq_p9ijb.ts(21,5): error TS2588: Cannot assign to 'digitA' because it is a constant.\n../../../../tmp/tmpaq_p9ijb.ts(22,5): error TS2588: Cannot assign to 'digitB' because it is a constant.\n",
      "timestamp": 1660333745
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < 0 || b < 0) {\n    return NaN;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1) {\n    return -a;\n  }\n  if (b === -1) {\n    return -b;\n  }\n  const c = a % b;\n  if (c === 0) {\n    return multiply(a, b % b);\n  }\n  return multiply(b, a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp0xps_bxq.js:44:12)\n    at Object.<anonymous> (/tmp/tmp0xps_bxq.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333746
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1) {\n    return -a;\n  }\n  if (b === -1) {\n    return -b;\n  }\n  if (a === -2) {\n    return -a;\n  }\n  if (b === -2) {\n    return -b;\n  }\n  if (a === -3) {\n    return -a;\n  }\n  if (b === -3) {\n    return -b;\n  }\n  if (a === -4) {\n    return -a;\n  }\n  if (b === -4) {\n    return -b;\n  }\n  if (a === -5) {\n    return -a;\n  }\n  if (b === -5) {\n    return -b;\n  }\n  if (a === -6) {\n    return -a;\n  }\n  if (b === -6) {\n    return -b;\n  }\n  if (a === -7) {\n    return -a;\n  }\n  if (b === -7) {\n    return -b;\n  }\n  if (a === -8) {\n    return -a;\n  }\n  if (b === -8) {\n    return -b;\n  }\n  if (a === -9) {\n    return -a;\n  }\n  if (b === -9) {\n    return -b;\n  }\n  if (a === -10) {\n    return -a;\n  }\n  if (b === -10) {\n    return -b;\n  }\n  if (a === -11) {\n    return -a;\n  }\n  if (b === -11) {\n    return -b;\n  }\n  if (a === -12) {\n    return -a;\n  }\n  if (b === -12) {\n    return -b;\n  }\n  if (a === -13) {\n    return -a;\n  }\n  if (b === -13) {\n    return -b;\n  }\n  if (a === -14) {\n    return -a;\n  }\n  if (b === -14) {\n    return -b;\n  }\n  if (a === -15) {\n    return -a;\n  }\n  if (b === -15) {\n    return -b;\n  }\n  if (a === -16) {\n    return -a;\n  }\n  if (b === -16) {\n    return -b;\n  }\n  if (a === -17) {\n    return -a;\n  }\n  if (b === -17) {\n    return -b;\n  }\n  if (a === -18) {\n    return -a;\n  }\n  if (b === -18) {\n    return -b;\n  }\n  if (a === -19) {\n    return -a;\n  }\n  if (b === -19) {\n    return -b;\n  }\n  if (a === -20) {\n    return -a;\n  }\n  if (b === -20) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa4ssnj8u.ts(161,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0 || a === b) {\n    return a;\n  }\n  if (a < b) {\n    return multiply(b, a % b);\n  }\n  return multiply(a, b - a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpikp2017a.js:14\n    if (b === 0) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at multiply (/tmp/tmpikp2017a.js:14:5)\n    at multiply (/tmp/tmpikp2017a.js:23:12)\n    at multiply (/tmp/tmpikp2017a.js:23:12)\n    at multiply (/tmp/tmpikp2017a.js:23:12)\n    at multiply (/tmp/tmpikp2017a.js:23:12)\n    at multiply (/tmp/tmpikp2017a.js:23:12)\n    at multiply (/tmp/tmpikp2017a.js:23:12)\n    at multiply (/tmp/tmpikp2017a.js:23:12)\n    at multiply (/tmp/tmpikp2017a.js:23:12)\n    at multiply (/tmp/tmpikp2017a.js:23:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333746
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  if (a < 0 || b < 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === 2) {\n    return b;\n  }\n  if (b === 2) {\n    return a;\n  }\n  if (a === 3) {\n    return b;\n  }\n  if (b === 3) {\n    return a;\n  }\n  if (a === 4) {\n    return b;\n  }\n  if (b === 4) {\n    return a;\n  }\n  if (a === 5) {\n    return b;\n  }\n  if (b === 5) {\n    return a;\n  }\n  if (a === 6) {\n    return b;\n  }\n  if (b === 6) {\n    return a;\n  }\n  if (a === 7) {\n    return b;\n  }\n  if (b === 7) {\n    return a;\n  }\n  if (a === 8) {\n    return b;\n  }\n  if (b === 8) {\n    return a;\n  }\n  if (a === 9) {\n    return b;\n  }\n  if (b === 9) {\n    return a;\n  }\n  if (a === 10) {\n    return b;\n  }\n  if (b === 10) {\n    return a;\n  }\n  if (a === 11) {\n    return b;\n  }\n  if (b === 11) {\n    return a;\n  }\n  if (a === 12) {\n    return b;\n  }\n  if (b === 12) {\n    return a;\n  }\n  if (a === 13) {\n    return b;\n  }\n  if (b === 13) {\n    return a;\n  }\n  if (a === 14) {\n    return b;\n  }\n  if (b === 14) {\n    return a;\n  }\n  if (a === 15) {\n    return b;\n  }\n  if (b === 15) {\n    return a;\n  }\n  if (a === 16) {\n    return b;\n  }\n  if (b === 16) {\n    return a;\n  }\n  if (a === 17) {\n    return b;\n  }\n  if (b === 17) {\n    return a;\n  }\n  if (a === 18) {\n    return b;\n  }\n  if (b === 18) {\n    return a;\n  }\n  if (a === 19) {\n    return b;\n  }\n  if (b === 19) {\n    return a;\n  }\n  if (a === 20) {\n    return b;\n  }\n  if (b === 20) {\n    return a;\n  }\n  if (a === 21) {\n    return b;\n  }\n  if (b === 21) {\n    return a;\n  }\n  if (a === 22) {\n    return b;\n  }\n  if (b === 22) {\n    return a;\n  }\n  if (a === 23\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6diq_l61.ts(156,1): error TS1005: ')' expected.\n../../../../tmp/tmp6diq_l61.ts(172,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333735
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 1) {\n        return b;\n    }\n    if (b === 1) {\n        return a;\n    }\n    if (a === -1) {\n        return -a;\n    }\n    if (b === -1) {\n        return -b;\n    }\n    if (a === -2) {\n        return -a;\n    }\n    if (b === -2) {\n        return -b;\n    }\n    if (a === -3) {\n        return -a;\n    }\n    if (b === -3) {\n        return -b;\n    }\n    if (a === -4) {\n        return -a;\n    }\n    if (b === -4) {\n        return -b;\n    }\n    if (a === -5) {\n        return -a;\n    }\n    if (b === -5) {\n        return -b;\n    }\n    if (a === -6) {\n        return -a;\n    }\n    if (b === -6) {\n        return -b;\n    }\n    if (a === -7) {\n        return -a;\n    }\n    if (b === -7) {\n        return -b;\n    }\n    if (a === -8) {\n        return -a;\n    }\n    if (b === -8) {\n        return -b;\n    }\n    if (a === -9) {\n        return -a;\n    }\n    if (b === -9) {\n        return -b;\n    }\n    if (a === -10) {\n        return -a;\n    }\n    if (b === -10) {\n        return -b;\n    }\n    if (a === -11) {\n        return -a;\n    }\n    if (b === -11) {\n        return -b;\n    }\n    if (a === -12) {\n        return -a;\n    }\n    if (b === -12) {\n        return -b;\n    }\n    if (a === -13) {\n        return -a;\n    }\n    if (b === -13) {\n        return -b;\n    }\n    if (a === -14) {\n        return -a;\n    }\n    if (b === -14) {\n        return -b;\n    }\n    if (a === -15) {\n        return -a;\n    }\n    if (b === -15) {\n        return -b;\n    }\n    if (a === -16) {\n        return -a;\n    }\n    if (b === -16) {\n        return -b;\n    }\n    if (a === -17) {\n        return -a;\n    }\n    if (b === -17) {\n        return -b;\n    }\n    if (a === -18) {\n        return -a;\n    }\n    if (b === -18) {\n        return -b;\n    }\n    if (a === -19) {\n        return -a;\n    }\n    if (b === -19) {\n        return -b;\n    }\n    if (a === -20) {\n        return -a;\n    }\n    if (b === -20) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpayibg5j9.ts(160,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333739
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1 || b === -1) {\n    return -a;\n  }\n  if (a === -2) {\n    return -b;\n  }\n  if (a === -3) {\n    return -a;\n  }\n  if (b === -3) {\n    return -b;\n  }\n  if (a === -4) {\n    return -a;\n  }\n  if (b === -4) {\n    return -b;\n  }\n  if (a === -5) {\n    return -a;\n  }\n  if (b === -5) {\n    return -b;\n  }\n  if (a === -6) {\n    return -a;\n  }\n  if (b === -6) {\n    return -b;\n  }\n  if (a === -7) {\n    return -a;\n  }\n  if (b === -7) {\n    return -b;\n  }\n  if (a === -8) {\n    return -a;\n  }\n  if (b === -8) {\n    return -b;\n  }\n  if (a === -9) {\n    return -a;\n  }\n  if (b === -9) {\n    return -b;\n  }\n  if (a === -10) {\n    return -a;\n  }\n  if (b === -10) {\n    return -b;\n  }\n  if (a === -11) {\n    return -a;\n  }\n  if (b === -11) {\n    return -b;\n  }\n  if (a === -12) {\n    return -a;\n  }\n  if (b === -12) {\n    return -b;\n  }\n  if (a === -13) {\n    return -a;\n  }\n  if (b === -13) {\n    return -b;\n  }\n  if (a === -14) {\n    return -a;\n  }\n  if (b === -14) {\n    return -b;\n  }\n  if (a === -15) {\n    return -a;\n  }\n  if (b === -15) {\n    return -b;\n  }\n  if (a === -16) {\n    return -a;\n  }\n  if (b === -16) {\n    return -b;\n  }\n  if (a === -17) {\n    return -a;\n  }\n  if (b === -17) {\n    return -b;\n  }\n  if (a === -18) {\n    return -a;\n  }\n  if (b === -18) {\n    return -b;\n  }\n  if (a === -19) {\n    return -a;\n  }\n  if (b === -19) {\n    return -b;\n  }\n  if (a === -20) {\n    return -a;\n  }\n  if (b === -20) {\n    return -b;\n  }\n  if (a === -21) {\n    return -a;\n  }\n  if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd48lyes0.ts(144,9): error TS1005: ')' expected.\n../../../../tmp/tmpd48lyes0.ts(160,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333746
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < 0 || b < 0) {\n    return NaN;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === 2) {\n    return 1;\n  }\n  if (b === 2) {\n    return 1;\n  }\n  if (a === 3) {\n    return b;\n  }\n  if (b === 3) {\n    return a;\n  }\n  if (a === 4) {\n    return 2;\n  }\n  if (b === 4) {\n    return 2;\n  }\n  if (a === 5) {\n    return 3;\n  }\n  if (b === 5) {\n    return 3;\n  }\n  if (a === 6) {\n    return 4;\n  }\n  if (b === 6) {\n    return 4;\n  }\n  if (a === 7) {\n    return 5;\n  }\n  if (b === 7) {\n    return 5;\n  }\n  if (a === 8) {\n    return 6;\n  }\n  if (b === 8) {\n    return 6;\n  }\n  if (a === 9) {\n    return 7;\n  }\n  if (b === 9) {\n    return 7;\n  }\n  if (a === 10) {\n    return 8;\n  }\n  if (b === 10) {\n    return 8;\n  }\n  if (a === 11) {\n    return 9;\n  }\n  if (b === 11) {\n    return 9;\n  }\n  if (a === 12) {\n    return 10;\n  }\n  if (b === 12) {\n    return 10;\n  }\n  if (a === 13) {\n    return 11;\n  }\n  if (b === 13) {\n    return 11;\n  }\n  if (a === 14) {\n    return 12;\n  }\n  if (b === 14) {\n    return 12;\n  }\n  if (a === 15) {\n    return 13;\n  }\n  if (b === 15) {\n    return 13;\n  }\n  if (a === 16) {\n    return 14;\n  }\n  if (b === 16) {\n    return 14;\n  }\n  if (a === 17) {\n    return 15;\n  }\n  if (b === 17) {\n    return 15;\n  }\n  if (a === 18) {\n    return 16;\n  }\n  if (b === 18) {\n    return 16;\n  }\n  if (a === 19) {\n    return 17;\n  }\n  if (b === 19) {\n    return 17;\n  }\n  if (a === 20) {\n    return 18;\n  }\n  if (b === 20) {\n    return 18;\n  }\n  if (a === 21) {\n    return 19;\n  }\n  if (b === 21) {\n    return 19;\n  }\n  if (a === 22) {\n    return 20;\n  }\n  if (b === 22) {\n    return 20;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7bnr36_m.ts(170,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333745
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 1) {\n        return b;\n    }\n    if (b === 1) {\n        return a;\n    }\n    if (a === -1) {\n        return -1;\n    }\n    if (b === -1) {\n        return 1;\n    }\n    if (a === -2) {\n        return -2;\n    }\n    if (b === -2) {\n        return 2;\n    }\n    if (a === -3) {\n        return -3;\n    }\n    if (b === -3) {\n        return 3;\n    }\n    if (a === -4) {\n        return -4;\n    }\n    if (b === -4) {\n        return 4;\n    }\n    if (a === -5) {\n        return -5;\n    }\n    if (b === -5) {\n        return 5;\n    }\n    if (a === -6) {\n        return -6;\n    }\n    if (b === -6) {\n        return 6;\n    }\n    if (a === -7) {\n        return -7;\n    }\n    if (b === -7) {\n        return 7;\n    }\n    if (a === -8) {\n        return -8;\n    }\n    if (b === -8) {\n        return 8;\n    }\n    if (a === -9) {\n        return -9;\n    }\n    if (b === -9) {\n        return 9;\n    }\n    if (a === -10) {\n        return -10;\n    }\n    if (b === -10) {\n        return 10;\n    }\n    if (a === -11) {\n        return -11;\n    }\n    if (b === -11) {\n        return 11;\n    }\n    if (a === -12) {\n        return -12;\n    }\n    if (b === -12) {\n        return 12;\n    }\n    if (a === -13) {\n        return -13;\n    }\n    if (b === -13) {\n        return 13;\n    }\n    if (a === -14) {\n        return -14;\n    }\n    if (b === -14) {\n        return 14;\n    }\n    if (a === -15) {\n        return -15;\n    }\n    if (b === -15) {\n        return 15;\n    }\n    if (a === -16) {\n        return -16;\n    }\n    if (b === -16) {\n        return 16;\n    }\n    if (a === -17) {\n        return -17;\n    }\n    if (b === -17) {\n        return 17;\n    }\n    if (a === -18) {\n        return -18;\n    }\n    if (b === -18) {\n        return 18;\n    }\n    if (a === -19) {\n        return -19;\n    }\n    if (b === -19) {\n        return 19;\n    }\n    if (a === -20) {\n        return -20;\n    }\n    if (b === -20) {\n        return 20;\n    }\n    if (a === -21) {\n        return -21;\n    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl29eyg_k.ts(165,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333746
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let result = 0;\n  let unitDigit = 0;\n  let unitDigitCount = 0;\n  let unitDigitCount2 = 0;\n  let unitDigitCount3 = 0;\n  let unitDigitCount4 = 0;\n  let unitDigitCount5 = 0;\n  let unitDigitCount6 = 0;\n  let unitDigitCount7 = 0;\n  let unitDigitCount8 = 0;\n  let unitDigitCount9 = 0;\n  let unitDigitCount10 = 0;\n  let unitDigitCount11 = 0;\n  let unitDigitCount12 = 0;\n  let unitDigitCount13 = 0;\n  let unitDigitCount14 = 0;\n  let unitDigitCount15 = 0;\n  let unitDigitCount16 = 0;\n  let unitDigitCount17 = 0;\n  let unitDigitCount18 = 0;\n  let unitDigitCount19 = 0;\n  let unitDigitCount20 = 0;\n  let unitDigitCount21 = 0;\n  let unitDigitCount22 = 0;\n  let unitDigitCount23 = 0;\n  let unitDigitCount24 = 0;\n  let unitDigitCount25 = 0;\n  let unitDigitCount26 = 0;\n  let unitDigitCount27 = 0;\n  let unitDigitCount28 = 0;\n  let unitDigitCount29 = 0;\n  let unitDigitCount30 = 0;\n  let unitDigitCount31 = 0;\n  let unitDigitCount32 = 0;\n  let unitDigitCount33 = 0;\n  let unitDigitCount34 = 0;\n  let unitDigitCount35 = 0;\n  let unitDigitCount36 = 0;\n  let unitDigitCount37 = 0;\n  let unitDigitCount38 = 0;\n  let unitDigitCount39 = 0;\n  let unitDigitCount40 = 0;\n  let unitDigitCount41 = 0;\n  let unitDigitCount42 = 0;\n  let unitDigitCount43 = 0;\n  let unitDigitCount44 = 0;\n  let unitDigitCount45 = 0;\n  let unitDigitCount46 = 0;\n  let unitDigitCount47 = 0;\n  let unitDigitCount48 = 0;\n  let unitDigitCount49 = 0;\n  let unitDigitCount50 = 0;\n  let unitDigitCount51 = 0;\n  let unitDigitCount52 = 0;\n  let unitDigitCount53 = 0;\n  let unitDigitCount54 = 0;\n  let unitDigitCount55 = 0;\n  let unitDigitCount56 = 0;\n  let unitDigitCount57 = 0;\n  let unitDigitCount58 = 0;\n  let unitDigitCount59 = 0;\n  let unitDigitCount60 = 0;\n  let unitDigitCount61 = 0;\n  let unitDigitCount62 = 0;\n  let unitDigitCount63 = 0;\n  let unitDigitCount64 = 0;\n  let unitDigitCount65 = 0;\n  let unitDigitCount66 = 0;\n  let unitDigitCount67 = 0;\n  let unitDigitCount68 = 0;\n  let unitDigitCount69 = 0;\n  let unitDigitCount70 = 0;\n  let unitDigitCount71 = 0;\n  let unitDigitCount72 = 0;\n  let unitDigitCount\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp24slue9y.ts(105,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333746
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmplxfzu5gq.js:22:12)\n    at Object.<anonymous> (/tmp/tmplxfzu5gq.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333735
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a / b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.3592233009708738\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp2p7lpkt5.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2p7lpkt5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.3592233009708738,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  return a % b + multiply(a / b, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n148.36009732360097\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpi802j59p.js:25:12)\n    at Object.<anonymous> (/tmp/tmpi802j59p.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 148.36009732360097,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333746
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  let result = 0;\n  \n  while (b > 0) {\n    const remainder = b % 10;\n    result += remainder * units[remainder];\n    b = Math.floor(b / 10);\n  }\n  \n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9bapy24s.ts(18,27): error TS2304: Cannot find name 'units'.\n",
      "timestamp": 1660333746
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  if (a === 1) {\n    return b\n  }\n  if (b === 1) {\n    return a\n  }\n  if (a === -1) {\n    return -1\n  }\n  if (b === -1) {\n    return 1\n  }\n  if (a === -2) {\n    return -1\n  }\n  if (b === -2) {\n    return 1\n  }\n  if (a === -3) {\n    return -1\n  }\n  if (b === -3) {\n    return 1\n  }\n  if (a === -4) {\n    return -1\n  }\n  if (b === -4) {\n    return 1\n  }\n  if (a === -5) {\n    return -1\n  }\n  if (b === -5) {\n    return 1\n  }\n  if (a === -6) {\n    return -1\n  }\n  if (b === -6) {\n    return 1\n  }\n  if (a === -7) {\n    return -1\n  }\n  if (b === -7) {\n    return 1\n  }\n  if (a === -8) {\n    return -1\n  }\n  if (b === -8) {\n    return 1\n  }\n  if (a === -9) {\n    return -1\n  }\n  if (b === -9) {\n    return 1\n  }\n  if (a === -10) {\n    return -1\n  }\n  if (b === -10) {\n    return 1\n  }\n  if (a === -11) {\n    return -1\n  }\n  if (b === -11) {\n    return 1\n  }\n  if (a === -12) {\n    return -1\n  }\n  if (b === -12) {\n    return 1\n  }\n  if (a === -13) {\n    return -1\n  }\n  if (b === -13) {\n    return 1\n  }\n  if (a === -14) {\n    return -1\n  }\n  if (b === -14) {\n    return 1\n  }\n  if (a === -15) {\n    return -1\n  }\n  if (b === -15) {\n    return 1\n  }\n  if (a === -16) {\n    return -1\n  }\n  if (b === -16) {\n    return 1\n  }\n  if (a === -17) {\n    return -1\n  }\n  if (b === -17) {\n    return 1\n  }\n  if (a === -18) {\n    return -1\n  }\n  if (b === -18) {\n    return 1\n  }\n  if (a === -19) {\n    return -1\n  }\n  if (b === -19) {\n    return 1\n  }\n  if (a === -20) {\n    return -1\n  }\n  if (b === -20) {\n    return 1\n  }\n  if (a === -21) {\n    return -1\n  }\n  if (b === -21) {\n    return 1\n  }\n  if (a === -22) {\n    return -1\n  }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppnzimol2.ts(171,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333746
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmarakkie.ts(17,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333745
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (a === 0) return 0;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a === -1) return b;\n  if (b === -1) return a;\n  if (a === -2) return b;\n  if (b === -2) return a;\n  if (a === -3) return b;\n  if (b === -3) return a;\n  if (a === -4) return b;\n  if (b === -4) return a;\n  if (a === -5) return b;\n  if (b === -5) return a;\n  if (a === -6) return b;\n  if (b === -6) return a;\n  if (a === -7) return b;\n  if (b === -7) return a;\n  if (a === -8) return b;\n  if (b === -8) return a;\n  if (a === -9) return b;\n  if (b === -9) return a;\n  if (a === -10) return b;\n  if (b === -10) return a;\n  if (a === -11) return b;\n  if (b === -11) return a;\n  if (a === -12) return b;\n  if (b === -12) return a;\n  if (a === -13) return b;\n  if (b === -13) return a;\n  if (a === -14) return b;\n  if (b === -14) return a;\n  if (a === -15) return b;\n  if (b === -15) return a;\n  if (a === -16) return b;\n  if (b === -16) return a;\n  if (a === -17) return b;\n  if (b === -17) return a;\n  if (a === -18) return b;\n  if (b === -18) return a;\n  if (a === -19) return b;\n  if (b === -19) return a;\n  if (a === -20) return b;\n  if (b === -20) return a;\n  if (a === -21) return b;\n  if (b === -21) return a;\n  if (a === -22) return b;\n  if (b === -22) return a;\n  if (a === -23) return b;\n  if (b === -23) return a;\n  if (a === -24) return b;\n  if (b === -24) return a;\n  if (a === -25) return b;\n  if (b === -25) return a;\n  if (a === -26) return b;\n  if (b === -26) return a;\n  if (a === -27) return b;\n  if (b === -27) return a;\n  if (a === -28) return b;\n  if (b === -28) return a;\n  if (a === -29) return b;\n  if (b === -29) return a;\n  if (a === -30) return b;\n  if (b === -30) return a;\n  if (a === -31) return b;\n  if (b === -31) return a;\n  if (a === -32) return b;\n  if (b === -32) return a;\n  if (a === -33) return b;\n  if (b === -33) return \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2045dj4r.ts(100,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333746
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (b === 1) return a;\n  if (a === 0) return 0;\n  if (a === 1) return b;\n  if (a === -1) return -b;\n  if (b === -1) return -a;\n  if (b === -2) return -a;\n  if (b === -3) return -a;\n  if (b === -4) return -a;\n  if (b === -5) return -a;\n  if (b === -6) return -a;\n  if (b === -7) return -a;\n  if (b === -8) return -a;\n  if (b === -9) return -a;\n  if (b === -10) return -a;\n  if (b === -11) return -a;\n  if (b === -12) return -a;\n  if (b === -13) return -a;\n  if (b === -14) return -a;\n  if (b === -15) return -a;\n  if (b === -16) return -a;\n  if (b === -17) return -a;\n  if (b === -18) return -a;\n  if (b === -19) return -a;\n  if (b === -20) return -a;\n  if (b === -21) return -a;\n  if (b === -22) return -a;\n  if (b === -23) return -a;\n  if (b === -24) return -a;\n  if (b === -25) return -a;\n  if (b === -26) return -a;\n  if (b === -27) return -a;\n  if (b === -28) return -a;\n  if (b === -29) return -a;\n  if (b === -30) return -a;\n  if (b === -31) return -a;\n  if (b === -32) return -a;\n  if (b === -33) return -a;\n  if (b === -34) return -a;\n  if (b === -35) return -a;\n  if (b === -36) return -a;\n  if (b === -37) return -a;\n  if (b === -38) return -a;\n  if (b === -39) return -a;\n  if (b === -40) return -a;\n  if (b === -41) return -a;\n  if (b === -42) return -a;\n  if (b === -43) return -a;\n  if (b === -44) return -a;\n  if (b === -45) return -a;\n  if (b === -46) return -a;\n  if (b === -47) return -a;\n  if (b === -48) return -a;\n  if (b === -49) return -a;\n  if (b === -50) return -a;\n  if (b === -51) return -a;\n  if (b === -52) return -a;\n  if (b === -53) return -a;\n  if (b === -54) return -a;\n  if (b === -55) return -a;\n  if (b === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt0yajeds.ts(75,9): error TS1005: ')' expected.\n../../../../tmp/tmpt0yajeds.ts(91,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333746
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (b === 0) {\n        return 0;\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a < 0 || b < 0) {\n        return 0;\n    }\n    let result = 0;\n    while (a >= 10) {\n        result += (a % 10) * (b % 10);\n        a = Math.floor(a / 10);\n        b = Math.floor(b / 10);\n    }\n    if (a > 0) {\n        result += (a % 10);\n    }\n    if (b > 0) {\n        result -= (b % 10);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n17\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpfk2ci9n6.js:40:12)\n    at Object.<anonymous> (/tmp/tmpfk2ci9n6.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 17,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333746
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmplxfzu5gq.js:22:12)\n    at Object.<anonymous> (/tmp/tmplxfzu5gq.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333735
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a < 0 || b < 0) {\n    return NaN;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1) {\n    return -a;\n  }\n  if (b === -1) {\n    return -b;\n  }\n  if (a === -2) {\n    return -a;\n  }\n  if (b === -2) {\n    return -b;\n  }\n  if (a === -3) {\n    return -a;\n  }\n  if (b === -3) {\n    return -b;\n  }\n  if (a === -4) {\n    return -a;\n  }\n  if (b === -4) {\n    return -b;\n  }\n  if (a === -5) {\n    return -a;\n  }\n  if (b === -5) {\n    return -b;\n  }\n  if (a === -6) {\n    return -a;\n  }\n  if (b === -6) {\n    return -b;\n  }\n  if (a === -7) {\n    return -a;\n  }\n  if (b === -7) {\n    return -b;\n  }\n  if (a === -8) {\n    return -a;\n  }\n  if (b === -8) {\n    return -b;\n  }\n  if (a === -9) {\n    return -a;\n  }\n  if (b === -9) {\n    return -b;\n  }\n  if (a === -10) {\n    return -a;\n  }\n  if (b === -10) {\n    return -b;\n  }\n  if (a === -11) {\n    return -a;\n  }\n  if (b === -11) {\n    return -b;\n  }\n  if (a === -12) {\n    return -a;\n  }\n  if (b === -12) {\n    return -b;\n  }\n  if (a === -13) {\n    return -a;\n  }\n  if (b === -13) {\n    return -b;\n  }\n  if (a === -14) {\n    return -a;\n  }\n  if (b === -14) {\n    return -b;\n  }\n  if (a === -15) {\n    return -a;\n  }\n  if (b === -15) {\n    return -b;\n  }\n  if (a === -16) {\n    return -a;\n  }\n  if (b === -16) {\n    return -b;\n  }\n  if (a === -17) {\n    return -a;\n  }\n  if (b === -17) {\n    return -b;\n  }\n  if (a === -18) {\n    return -a;\n  }\n  if (b === -18) {\n    return -b;\n  }\n  if (a === -19) {\n    return -a;\n  }\n  if (b === -19) {\n    return -b;\n  }\n  if (a === -20) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm50d43q1.ts(160,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333746
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  return a / b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.3592233009708738\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp2p7lpkt5.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2p7lpkt5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.3592233009708738,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0) {\n    return a;\n  }\n  return a / b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.3592233009708738\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpnx1937vp.js:25:12)\n    at Object.<anonymous> (/tmp/tmpnx1937vp.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.3592233009708738,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333745
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 1,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60976\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpmfivipge.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfivipge.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60976,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) return 0;\n  if (a === 0) return 0;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a === -1) return b;\n  if (b === -1) return a;\n  if (a === -2) return b;\n  if (b === -2) return a;\n  if (a === -3) return b;\n  if (b === -3) return a;\n  if (a === -4) return b;\n  if (b === -4) return a;\n  if (a === -5) return b;\n  if (b === -5) return a;\n  if (a === -6) return b;\n  if (b === -6) return a;\n  if (a === -7) return b;\n  if (b === -7) return a;\n  if (a === -8) return b;\n  if (b === -8) return a;\n  if (a === -9) return b;\n  if (b === -9) return a;\n  if (a === -10) return b;\n  if (b === -10) return a;\n  if (a === -11) return b;\n  if (b === -11) return a;\n  if (a === -12) return b;\n  if (b === -12) return a;\n  if (a === -13) return b;\n  if (b === -13) return a;\n  if (a === -14) return b;\n  if (b === -14) return a;\n  if (a === -15) return b;\n  if (b === -15) return a;\n  if (a === -16) return b;\n  if (b === -16) return a;\n  if (a === -17) return b;\n  if (b === -17) return a;\n  if (a === -18) return b;\n  if (b === -18) return a;\n  if (a === -19) return b;\n  if (b === -19) return a;\n  if (a === -20) return b;\n  if (b === -20) return a;\n  if (a === -21) return b;\n  if (b === -21) return a;\n  if (a === -22) return b;\n  if (b === -22) return a;\n  if (a === -23) return b;\n  if (b === -23) return a;\n  if (a === -24) return b;\n  if (b === -24) return a;\n  if (a === -25) return b;\n  if (b === -25) return a;\n  if (a === -26) return b;\n  if (b === -26) return a;\n  if (a === -27) return b;\n  if (b === -27) return a;\n  if (a === -28) return b;\n  if (b === -28) return a;\n  if (a === -29) return b;\n  if (b === -29) return a;\n  if (a === -30) return b;\n  if (b === -30) return a;\n  if (a === -31) return b;\n  if (b === -31) return a;\n  if (a === -32) return b;\n  if (b === -32) return a;\n  if (a === -33) return b;\n  if (b === -33) return \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2045dj4r.ts(100,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333746
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    },
    {
      "exit_code": 2,
      "program": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  return a * b / gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsbg3n_bo.ts(14,18): error TS2304: Cannot find name 'gcd'.\n",
      "timestamp": 1660333732
    }
  ]
}