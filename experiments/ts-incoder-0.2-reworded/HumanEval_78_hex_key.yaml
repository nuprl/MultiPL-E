name: HumanEval_78_hex_key
language: ts
prompt: "//You have been tasked to write a function that receives \n// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n// digits that are primes\
  \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
  \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n// So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is\
  \ always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n\
  // Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n//\
  \ >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n\
  // >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
  \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"\
  ),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
  123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
  ),12);\n}\n\ntest();"
completions: ["  let hex = num.toUpperCase();\n  let count = 0;\n  for (let i = 0;\
    \ i < hex.length; i++) {\n    let digit = hex.charCodeAt(i) - 48;\n    if (digit\
    \ > 9) {\n      digit -= 9;\n    }\n    if (digit == 0) {\n      continue;\n \
    \   }\n    let prime = primes[digit];\n    if (prime == undefined) {\n      continue;\n\
    \    }\n    count++;\n  }\n  return count;\n}\n", "  let hex = num.toUpperCase();\n\
    \  let digits = hex.split(\"\");\n  let primes = [];\n  let prime = 0;\n  let\
    \ count = 0;\n  for (let i = 0; i < digits.length; i++) {\n    let digit = parseInt(digits[i]);\n\
    \    if (digit > 9) {\n      prime = digit - 9;\n      if (primes.includes(prime))\
    \ {\n        primes.push(prime);\n      }\n    } else {\n      prime = digit;\n\
    \      primes.push(prime);\n    }\n  }\n  for (let i = 0; i < primes.length; i++)\
    \ {\n    let prime = primes[i];\n    for (let j = i + 1; j < primes.length; j++)\
    \ {\n      let prime2 = primes[j];\n      if (prime * prime2 === parseInt(hex))\
    \ {\n        count = count + 1;\n      }\n    }\n  }\n  return count;\n}\n", " \
    \   let hex = num.toUpperCase();\n    let digits = hex.split(\"\");\n    let primes\
    \ = 0;\n    let prime_digits: number[] = [];\n    let prime_digits_length: number[]\
    \ = [];\n    let prime_digits_sum: number[] = [];\n    let prime_digits_product:\
    \ number[] = [];\n    let prime_digits_product2: number[] = [];\n    let prime_digits_product3:\
    \ number[] = [];\n    let prime_digits_product4: number[] = [];\n    let prime_digits_product5:\
    \ number[] = [];\n    let prime_digits_product6: number[] = [];\n    let prime_digits_product7:\
    \ number[] = [];\n    let prime_digits_product8: number[] = [];\n    let prime_digits_product9:\
    \ number[] = [];\n    let prime_digits_product10: number[] = [];\n    let prime_digits_product11:\
    \ number[] = [];\n    let prime_digits_product12: number[] = [];\n    let prime_digits_product13:\
    \ number[] = [];\n    let prime_digits_product14: number[] = [];\n    let prime_digits_product15:\
    \ number[] = [];\n    let prime_digits_product16: number[] = [];\n    let prime_digits_product17:\
    \ number[] = [];\n    let prime_digits_product18: number[] = [];\n    let prime_digits_product19:\
    \ number[] = [];\n    let prime_digits_product20: number[] = [];\n    let prime_digits_product21:\
    \ number[] = [];\n    let prime_digits_product22: number[] = [];\n    let prime_digits_product23:\
    \ number[] = [];\n    let prime_digits_product24: number[] = [];\n    let prime_digits_product25:\
    \ number[] = [];\n    let prime_digits_product26: number[] = [];\n    let prime_digits_product27:\
    \ number[] = [];\n    let prime_digits_product28: number[] = [];\n    let prime_digits_product29:\
    \ number[] = [];\n    let prime_digits_product30: number[] = [];\n    let prime_digits_product31:\
    \ number[] = [];\n    let prime_digits_product32: number[] = [];\n    let prime_digits_product33:\
    \ number[] = [];\n    let prime_digits_product34: number[] = [];\n    let prime_digits_product35:\
    \ number[] = [];\n    let prime_digits_product36: number[] = [];\n    let prime_digits_product37:\
    \ number[] = [];\n    let prime_digits_product38: number[] = [];\n    let prime_digits_product39:\
    \ number[] = [];", "  let hex = num.toUpperCase();\n  let digits = hex.split(\"\
    \");\n  let primes = [];\n  let prime_digits = [];\n  let prime_digit_count =\
    \ 0;\n  let prime_digit_sum = 0;\n  let prime_digit_product = 1;\n  let prime_digit_sum2\
    \ = 0;\n  let prime_digit_product2 = 0;\n  let prime_digit_sum3 = 0;\n  let prime_digit_product3\
    \ = 0;\n  let prime_digit_sum4 = 0;\n  let prime_digit_product4 = 0;\n  let prime_digit_sum5\
    \ = 0;\n  let prime_digit_product5 = 0;\n  let prime_digit_sum6 = 0;\n  let prime_digit_product6\
    \ = 0;\n  let prime_digit_sum7 = 0;\n  let prime_digit_product7 = 0;\n  let prime_digit_sum8\
    \ = 0;\n  let prime_digit_product8 = 0;\n  let prime_digit_sum9 = 0;\n  let prime_digit_product9\
    \ = 0;\n  let prime_digit_sum10 = 0;\n  let prime_digit_product10 = 0;\n  let\
    \ prime_digit_sum11 = 0;\n  let prime_digit_product11 = 0;\n  let prime_digit_sum12\
    \ = 0;\n  let prime_digit_product12 = 0;\n  let prime_digit_sum13 = 0;\n  let\
    \ prime_digit_product13 = 0;\n  let prime_digit_sum14 = 0;\n  let prime_digit_product14\
    \ = 0;\n  let prime_digit_sum15 = 0;\n  let prime_digit_product15 = 0;\n  let\
    \ prime_digit_sum16 = 0;\n  let prime_digit_product16 = 0;\n  let prime_digit_sum17\
    \ = 0;\n  let prime_digit_product17 = 0;\n  let prime_digit_sum18 = 0;\n  let\
    \ prime_digit_product18 = 0;\n  let prime_digit_sum19 = 0;\n  let prime_digit_product19\
    \ = 0;\n  let prime_digit_sum20 = 0;\n  let prime_digit_product20 = 0;\n  let\
    \ prime_digit_sum21 = 0;\n  let prime_digit_product21 = 0;\n  let prime_digit_sum22\
    \ = 0;\n  let prime_digit_product22 = 0;\n  let prime_digit_sum23 = 0;\n  let\
    \ prime_digit_product23 = 0;\n  let prime_digit_sum24 = 0;\n  let prime_digit_product24\
    \ = 0;\n  let prime_digit_sum25 = 0;\n  let prime_digit_product25 = 0;\n  let\
    \ prime_digit_sum26 = 0;\n  let prime_digit_product26 = 0;\n  let prime_digit_sum27\
    \ = 0;\n  let prime_digit_product27 = 0;\n  let prime_digit_sum28 = 0;\n  let\
    \ prime_digit_product28 = 0;\n  let prime_digit_sum29 = 0;\n  let prime_digit_product29\
    \ = 0;\n  let prime_digit_sum30 = 0;\n  let prime_digit_product30 = 0;\n  let\
    \ prime_digit_sum31 = 0;\n  let prime_", "  let hex = num.toUpperCase();\n  let\
    \ prime_count = 0;\n  let prime_digit = 0;\n  let prime_hex = \"\";\n  let prime_hex_index\
    \ = 0;\n  let prime_hex_value = 0;\n  let prime_hex_value_index = 0;\n  let prime_hex_value_value\
    \ = 0;\n  let prime_hex_value_value_index = 0;\n  let prime_hex_value_value_value\
    \ = 0;\n  let prime_hex_value_value_value_index = 0;\n  let prime_hex_value_value_value_value\
    \ = 0;\n  let prime_hex_value_value_value_value_index = 0;\n  let prime_hex_value_value_value_value_value\
    \ = 0;\n  let prime_hex_value_value_value_value_value_index = 0;\n  let prime_hex_value_value_value_value_value_value\
    \ = 0;\n  let prime_hex_value_value_value_value_value_value_index = 0;\n  let\
    \ prime_hex_value_value_value_value_value_value_value = 0;\n  let prime_hex_value_value_value_value_value_value_index\
    \ = 0;\n  let prime_hex_value_value_value_value_value_value_value = 0;\n  let\
    \ prime_hex_value_value_value_value_value_value_index = 0;\n  let prime_hex_value_value_value_value_value_value_value\
    \ = 0;\n  let prime_hex_value_value_value_value_value_value_index = 0;\n  let\
    \ prime_hex_value_value_value_value_value_value_value = 0;\n  let prime_hex_value_value_value_value_value_value_value_index\
    \ = 0;\n  let prime_hex_value_value_value_value_value_value_value_value = 0;\n\
    \  let prime_hex_value_value_value_value_value_value_value_index = 0;\n  let prime_hex_value_value_value_value_value_value_value_value\
    \ = 0;\n  let prime_hex_value_value_value_value_value_value_value_index = 0;\n\
    \  let prime_hex_value_value_value_value_value_value_value_value = 0;\n  let prime_hex_value_value_value_value_value_value_value_index\
    \ = 0;\n  let prime_hex_value_value_value_value_value_value_value_value = 0;\n\
    \  let prime_hex_value_value_value_value_value_value_value_index = 0;\n  let prime_hex_value_value_value_value_value_value_value_value\
    \ = 0;\n  let prime_hex_value_value_value_value_value_value_value_index = 0;\n\
    \  let prime_hex_value_value_value_value_value_value_value_value = 0;\n  let prime_hex_value_value_value_value_value_value_value_index\
    \ = 0;\n  let prime_hex_value_value_value_value_value_value_value_value = 0;\n\
    \  let prime_hex_value_value_value_value_value_value_value_index = 0;\n  let prime_hex_value_value_value_value_value_value_value_value\
    \ = 0;\n  let prime_hex_value_value_value_value_value_value_value_index = 0;\n\
    \  let prime_hex_value_value_value_value_value_value_value_value_value = 0;\n\
    \  let prime_hex_value_value_value_value_value_value_value_value_index = 0;\n\
    \  let prime", "  let hex = num.toUpperCase();\n  let digits = hex.split(\"\"\
    );\n  let primes = 0;\n  let prime: number = 0;\n  for (let i = 0; i < digits.length;\
    \ i++) {\n    let digit = parseInt(digits[i]);\n    if (digit % 2 === 0) {\n \
    \     prime++;\n    }\n  }\n  return prime;\n}\n", "  let hex = num.toUpperCase();\n\
    \  let primes = primes_array;\n  let primes_length = primes.length;\n  let primes_index\
    \ = 0;\n  let primes_sum = 0;\n  let primes_product = 1;\n  let primes_product2\
    \ = 0;\n  let primes_product3 = 0;\n  let primes_product4 = 0;\n  let primes_product5\
    \ = 0;\n  let primes_product6 = 0;\n  let primes_product7 = 0;\n  let primes_product8\
    \ = 0;\n  let primes_product9 = 0;\n  let primes_product10 = 0;\n  let primes_product11\
    \ = 0;\n  let primes_product12 = 0;\n  let primes_product13 = 0;\n  let primes_product14\
    \ = 0;\n  let primes_product15 = 0;\n  let primes_product16 = 0;\n  let primes_product17\
    \ = 0;\n  let primes_product18 = 0;\n  let primes_product19 = 0;\n  let primes_product20\
    \ = 0;\n  let primes_product21 = 0;\n  let primes_product22 = 0;\n  let primes_product23\
    \ = 0;\n  let primes_product24 = 0;\n  let primes_product25 = 0;\n  let primes_product26\
    \ = 0;\n  let primes_product27 = 0;\n  let primes_product28 = 0;\n  let primes_product29\
    \ = 0;\n  let primes_product30 = 0;\n  let primes_product31 = 0;\n  let primes_product32\
    \ = 0;\n  let primes_product33 = 0;\n  let primes_product34 = 0;\n  let primes_product35\
    \ = 0;\n  let primes_product36 = 0;\n  let primes_product37 = 0;\n  let primes_product38\
    \ = 0;\n  let primes_product39 = 0;\n  let primes_product40 = 0;\n  let primes_product41\
    \ = 0;\n  let primes_product42 = 0;\n  let primes_product43 = 0;\n  let primes_product44\
    \ = 0;\n  let primes_product45 = 0;\n  let primes_product46 = 0;\n  let primes_product47\
    \ = 0;\n  let primes_product48 = 0;\n  let primes_product49 = 0;\n  let primes_product50\
    \ = 0;\n  let primes_product51 = 0;\n  let primes_product52 = 0;\n  let primes_product53\
    \ = 0;\n  let primes_product54 = 0;\n  let primes_product55 = 0;\n  let primes_product56\
    \ = 0;\n  let primes_product57 = 0;\n  let primes_product58 = 0;\n  let primes_product59\
    \ = 0;\n  let primes_product60 = 0;\n  let primes_product61 = 0;\n  let primes_product62\
    \ = 0;\n  let primes_product63 = 0;\n  let primes_product64 = 0;\n  let primes_product65\
    \ = 0;\n  let primes_product66 = 0;\n  let primes_product67 = 0;\n  let primes_product68\
    \ = 0;\n  let primes_product69 = 0;\n", "  let hex = num.toUpperCase();\n  let\
    \ hexDigits = hex.split(\"\");\n  let hexDigitCount = hexDigits.length;\n  let\
    \ hexDigitArray = [];\n  for (let i = 0; i < hexDigitCount; i++) {\n    hexDigitArray.push(parseInt(hexDigits[i],\
    \ 16));\n  }\n  let hexDigitArrayLength = hexDigitArray.length;\n  let hexDigitArraySum\
    \ = 0;\n  for (let i = 0; i < hexDigitArrayLength; i++) {\n    hexDigitArraySum\
    \ += hexDigitArray[i];\n  }\n  let hexDigitArraySumHex = hexDigitArraySum.toString(16);\n\
    \  let hexDigitArraySumHexLength = hexDigitArraySumHex.length;\n  let hexDigitArraySumHexArray\
    \ = [];\n  for (let i = 0; i < hexDigitArraySumHexLength; i++) {\n    hexDigitArraySumHexArray.push(parseInt(hexDigitArraySumHex[i],\
    \ 16));\n  }\n  let hexDigitArraySumHexArrayLength = hexDigitArraySumHexArray.length;\n\
    \  let hexDigitArraySumHexArraySum = 0;\n  for (let i = 0; i < hexDigitArraySumHexArrayLength;\
    \ i++) {\n    hexDigitArraySumHexArraySum += hexDigitArraySumHexArray[i];\n  }\n\
    \  let hexDigitArraySumHexArraySumHex = hexDigitArraySumHexArraySum.toString(16);\n\
    \  let hexDigitArraySumHexArraySumHexLength = hexDigitArraySumHexArraySumHex.length;\n\
    \  let hexDigitArraySumHexArraySumHexArray = [];\n  for (let i = 0; i < hexDigitArraySumHexArraySumHexLength;\
    \ i++) {\n    hexDigitArraySumHexArraySumHexArray.push(parseInt(hexDigitArraySumHexArraySumHex[i],\
    \ 16));\n  }\n  let hexDigitArraySumHexArraySumHexArrayLength = hexDigitArraySumHexArraySumHexArray.length;\n\
    \  let hexDigitArraySumHexArraySumHexArraySum = 0;\n  for (let i = 0; i < hexDigitArraySumHexArraySumHexArrayLength;\
    \ i++) {\n    hexDigitArraySumHexArraySumHexArraySum += hexDigitArraySumHexArraySumHexArray[i];\n\
    \  }\n  let hexDigitArraySumHexArraySumHexArraySumHex = hexDigitArraySumHexArraySumHexArraySum.toString(16);\n\
    \  let hexDigitArraySumHexArraySumHexArraySumHexLength = hexDigitArraySumHexArraySumHexArraySumHex.length;\n\
    \  let hexDigitArraySumHexArraySumHexArraySumHexArray = [];\n  for (let i = 0;\
    \ i < hexDigitArraySumHexArraySumHexArraySumHexLength; i++) {\n    hexDigitArraySumHexArraySumHexArraySumHexArray.push(parseInt(hexDigitArraySumHexArraySumHexArraySumHexArray[i],\
    \ 16));\n  }\n  let hexDigitArraySumHex", "  let hex = num.toUpperCase();\n  let\
    \ hexArray = hex.split(\"\");\n  let hexArrayLength = hexArray.length;\n  let\
    \ hexArraySum = 0;\n  for (let i = 0; i < hexArrayLength; i++) {\n    hexArraySum\
    \ += parseInt(hexArray[i], 16);\n  }\n  let hexArraySumHex = hexArraySum.toString(16);\n\
    \  let hexArraySumHexLength = hexArraySumHex.length;\n  let hexArraySumHexArray\
    \ = hexArraySumHex.split(\"\");\n  let hexArraySumHexArrayLength = hexArraySumHexArray.length;\n\
    \  let hexArraySumHexArraySum = 0;\n  for (let i = 0; i < hexArraySumHexArrayLength;\
    \ i++) {\n    hexArraySumHexArraySum += parseInt(hexArraySumHexArray[i], 16);\n\
    \  }\n  let hexArraySumHexArraySumHex = hexArraySumHexArraySum.toString(16);\n\
    \  let hexArraySumHexArraySumHexLength = hexArraySumHexArraySumHex.length;\n \
    \ let hexArraySumHexArraySumHexArray = hexArraySumHexArraySumHex.split(\"\");\n\
    \  let hexArraySumHexArraySumHexArrayLength = hexArraySumHexArraySumHexArray.length;\n\
    \  let hexArraySumHexArraySumHexArraySum = 0;\n  for (let i = 0; i < hexArraySumHexArraySumHexArrayLength;\
    \ i++) {\n    hexArraySumHexArraySumHexArraySum += parseInt(hexArraySumHexArraySumHexArray[i],\
    \ 16);\n  }\n  let hexArraySumHexArraySumHexArraySumHex = hexArraySumHexArraySumHexArraySum.toString(16);\n\
    \  let hexArraySumHexArraySumHexArraySumHexLength = hexArraySumHexArraySumHexArraySumHex.length;\n\
    \  let hexArraySumHexArraySumHexArraySumHexArray = hexArraySumHexArraySumHexArraySumHex.split(\"\
    \");\n  let hexArraySumHexArraySumHexArraySumHexArrayLength = hexArraySumHexArraySumHexArraySumHexArray.length;\n\
    \  let hexArraySumHexArraySumHexArraySumHexArraySum = 0;\n  for (let i = 0; i\
    \ < hexArraySumHexArraySumHexArraySumHexArrayLength; i++) {\n    hexArraySumHexArraySumHexArraySumHexArraySum\
    \ += parseInt(hexArraySumHexArraySumHexArraySumHexArray[i], 16);\n  }\n  let hexArraySumHexArraySumHexArraySumHexArraySumHex\
    \ = hexArraySumHexArraySumHexArraySumHexArraySum.toString(16);\n  let hexArraySumHexArraySumHexArraySumHexArraySumHexLength\
    \ = hexArraySumHexArraySumHexArraySumHexArraySumHexArray.length;\n  let hexArraySumHexArraySumHex",
  "  let hex = num.toUpperCase();\n  let hexDigits = hex.split(\"\");\n  let hexDigitCount\
    \ = hexDigits.length;\n  let hexDigitCountPrimes = hexDigitCount;\n  let hexDigitCountPrimesArray\
    \ = [];\n  let hexDigitCountPrimesArrayIndex = 0;\n  let hexDigitCountPrimesArrayLength\
    \ = hexDigitCountPrimes;\n  let hexDigitCountPrimesArrayMax = hexDigitCountPrimes\
    \ - 1;\n  let hexDigitCountPrimesArrayMaxIndex = hexDigitCountPrimesArrayMax;\n\
    \  let hexDigitCountPrimesArrayMaxValue = hexDigitCountPrimesArray[hexDigitCountPrimesArrayMaxIndex];\n\
    \  let hexDigitCountPrimesArrayMinValue = hexDigitCountPrimesArray[0];\n  let\
    \ hexDigitCountPrimesArrayMinIndex = hexDigitCountPrimesArray.length - 1;\n  let\
    \ hexDigitCountPrimesArrayMinValue = hexDigitCountPrimesArray[hexDigitCountPrimesArrayMinIndex];\n\
    \  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPrimesArrayMinIndexPrime = hexDigitCountPrimesArray.length\
    \ - 1;\n  let hexDigitCountPri", "  let hex = num.toUpperCase();\n  let hexDigits\
    \ = hex.split(\"\");\n  let hexDigitCount = hexDigits.length;\n  let hexDigitCount2\
    \ = hexDigitCount*2;\n  let hexDigitCount3 = hexDigitCount*3;\n  let hexDigitCount4\
    \ = hexDigitCount*4;\n  let hexDigitCount5 = hexDigitCount*5;\n  let hexDigitCount6\
    \ = hexDigitCount*6;\n  let hexDigitCount7 = hexDigitCount*7;\n  let hexDigitCount8\
    \ = hexDigitCount*8;\n  let hexDigitCount9 = hexDigitCount*9;\n  let hexDigitCount10\
    \ = hexDigitCount*10;\n  let hexDigitCount11 = hexDigitCount*11;\n  let hexDigitCount12\
    \ = hexDigitCount*12;\n  let hexDigitCount13 = hexDigitCount*13;\n  let hexDigitCount14\
    \ = hexDigitCount*14;\n  let hexDigitCount15 = hexDigitCount*15;\n  let hexDigitCount16\
    \ = hexDigitCount*16;\n  let hexDigitCount17 = hexDigitCount*17;\n  let hexDigitCount18\
    \ = hexDigitCount*18;\n  let hexDigitCount19 = hexDigitCount*19;\n  let hexDigitCount20\
    \ = hexDigitCount*20;\n  let hexDigitCount21 = hexDigitCount*21;\n  let hexDigitCount22\
    \ = hexDigitCount*22;\n  let hexDigitCount23 = hexDigitCount*23;\n  let hexDigitCount24\
    \ = hexDigitCount*24;\n  let hexDigitCount25 = hexDigitCount*25;\n  let hexDigitCount26\
    \ = hexDigitCount*26;\n  let hexDigitCount27 = hexDigitCount*27;\n  let hexDigitCount28\
    \ = hexDigitCount*28;\n  let hexDigitCount29 = hexDigitCount*29;\n  let hexDigitCount30\
    \ = hexDigitCount*30;\n  let hexDigitCount31 = hexDigitCount*31;\n  let hexDigitCount32\
    \ = hexDigitCount*32;\n  let hexDigitCount33 = hexDigitCount*33;\n  let hexDigitCount34\
    \ = hexDigitCount*34;\n  let hexDigitCount35 = hexDigitCount*35;\n  let hexDigitCount36\
    \ = hexDigitCount*36;\n  let hexDigitCount37 = hexDigitCount*37;\n  let hexDigitCount38\
    \ = hexDigitCount*38;\n  let hexDigitCount39 = hexDigitCount*39;\n  let hexDigitCount40\
    \ = hexDigitCount*40;\n  let hexDigitCount41 = hexDigitCount*", "  let hex = num.toUpperCase();\n\
    \  let hexDigits = hex.split(\"\");\n  let hexDigitCount = hexDigits.length;\n\
    \  let hexDigitCount2 = hexDigitCount*hexDigitCount;\n  let hexDigitCount3 = hexDigitCount2*hexDigitCount;\n\
    \  let hexDigitCount4 = hexDigitCount3*hexDigitCount;\n  let hexDigitCount5 =\
    \ hexDigitCount4*hexDigitCount;\n  let hexDigitCount6 = hexDigitCount5*hexDigitCount;\n\
    \  let hexDigitCount7 = hexDigitCount6*hexDigitCount;\n  let hexDigitCount8 =\
    \ hexDigitCount7*hexDigitCount;\n  let hexDigitCount9 = hexDigitCount8*hexDigitCount;\n\
    \  let hexDigitCount10 = hexDigitCount9*hexDigitCount;\n  let hexDigitCount11\
    \ = hexDigitCount10*hexDigitCount;\n  let hexDigitCount12 = hexDigitCount11*hexDigitCount;\n\
    \  let hexDigitCount13 = hexDigitCount12*hexDigitCount;\n  let hexDigitCount14\
    \ = hexDigitCount13*hexDigitCount;\n  let hexDigitCount15 = hexDigitCount14*hexDigitCount;\n\
    \  let hexDigitCount16 = hexDigitCount15*hexDigitCount;\n  let hexDigitCount17\
    \ = hexDigitCount16*hexDigitCount;\n  let hexDigitCount18 = hexDigitCount17*hexDigitCount;\n\
    \  let hexDigitCount19 = hexDigitCount18*hexDigitCount;\n  let hexDigitCount20\
    \ = hexDigitCount19*hexDigitCount;\n  let hexDigitCount21 = hexDigitCount20*hexDigitCount;\n\
    \  let hexDigitCount22 = hexDigitCount21*hexDigitCount;\n  let hexDigitCount23\
    \ = hexDigitCount22*hexDigitCount;\n  let hexDigitCount24 = hexDigitCount23*hexDigitCount;\n\
    \  let hexDigitCount25 = hexDigitCount24*hexDigitCount;\n  let hexDigitCount26\
    \ = hexDigitCount25*hexDigitCount;\n  let hexDigitCount27 = hexDigitCount26*hexDigitCount;\n\
    \  let hexDigitCount28 = hexDigitCount27*hexDigitCount;\n  let hexDigitCount29\
    \ = hexDigitCount28*hexDigitCount;\n  let hexDigitCount30 = hexDigitCount29*hexDigitCount;\n\
    \  let hexDigitCount31 = hexDigitCount30*hexDigitCount;\n  let hexDigitCount32\
    \ = hexDigitCount31*hexDigitCount;\n  let hexDigitCount33 = hexDigitCount", " \
    \ let hex = num.toUpperCase();\n  let hexDigits = hex.split(\"\");\n  let hexDigitCount\
    \ = hexDigits.length;\n  let hexDigitPrimeCount = 0;\n  let hexDigitPrimes = [];\n\
    \  let hexDigitPrimeIndex = 0;\n  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n\
    \  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax\
    \ = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n\
    \  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax\
    \ = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n\
    \  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax\
    \ = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n\
    \  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax\
    \ = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n\
    \  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax\
    \ = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n\
    \  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax\
    \ = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n\
    \  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax\
    \ = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n\
    \  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax\
    \ = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n\
    \  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax\
    \ = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n\
    \  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax\
    \ = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n\
    \  let hexDigitPrimeIndexMax = hexDigitPrimes.length;\n  let hexDigitPrimeIndexMax\
    \ = hexDigitPrimes.length;\n  let hexDigit", "  let hex = num.toUpperCase();\n\
    \  let hexDigits = hex.split(\"\");\n  let hexDigitCount = hexDigits.length;\n\
    \  let hexDigitCount2 = hexDigitCount*2;\n  let hexDigitCount3 = hexDigitCount*3;\n\
    \  let hexDigitCount4 = hexDigitCount*4;\n  let hexDigitCount5 = hexDigitCount*5;\n\
    \  let hexDigitCount6 = hexDigitCount*6;\n  let hexDigitCount7 = hexDigitCount*7;\n\
    \  let hexDigitCount8 = hexDigitCount*8;\n  let hexDigitCount9 = hexDigitCount*9;\n\
    \  let hexDigitCount10 = hexDigitCount*10;\n  let hexDigitCount11 = hexDigitCount*11;\n\
    \  let hexDigitCount12 = hexDigitCount*12;\n  let hexDigitCount13 = hexDigitCount*13;\n\
    \  let hexDigitCount14 = hexDigitCount*14;\n  let hexDigitCount15 = hexDigitCount*15;\n\
    \  let hexDigitCount16 = hexDigitCount*16;\n  let hexDigitCount17 = hexDigitCount*17;\n\
    \  let hexDigitCount18 = hexDigitCount*18;\n  let hexDigitCount19 = hexDigitCount*19;\n\
    \  let hexDigitCount20 = hexDigitCount*20;\n  let hexDigitCount21 = hexDigitCount*21;\n\
    \  let hexDigitCount22 = hexDigitCount*22;\n  let hexDigitCount23 = hexDigitCount*23;\n\
    \  let hexDigitCount24 = hexDigitCount*24;\n  let hexDigitCount25 = hexDigitCount*25;\n\
    \  let hexDigitCount26 = hexDigitCount*26;\n  let hexDigitCount27 = hexDigitCount*27;\n\
    \  let hexDigitCount28 = hexDigitCount*28;\n  let hexDigitCount29 = hexDigitCount*29;\n\
    \  let hexDigitCount30 = hexDigitCount*30;\n  let hexDigitCount31 = hexDigitCount*31;\n\
    \  let hexDigitCount32 = hexDigitCount*32;\n  let hexDigitCount33 = hexDigitCount*33;\n\
    \  let hexDigitCount34 = hexDigitCount*34;\n  let hexDigitCount35 = hexDigitCount*35;\n\
    \  let hexDigitCount36 = hexDigitCount*36;\n  let hexDigitCount37 = hexDigitCount*37;\n\
    \  let hexDigitCount38 = hexDigitCount*38;\n  let hexDigitCount39 = hexDigitCount*39;\n\
    \  let hexDigitCount40 = hexDigitCount*40;\n  let hexDigitCount41 = hexDigitCount*",
  "  let hex = num.toUpperCase();\n  let digits = hex.split(\"\");\n  let primes =\
    \ 0;\n  let prime_digits = \"\";\n  for (let i = 0; i < digits.length; i++) {\n\
    \    let digit = digits[i];\n    if (digit === \"A\") {\n      prime_digits =\
    \ \"B\";\n    } else if (digit === \"B\") {\n      prime_digits = \"C\";\n   \
    \ } else if (digit === \"C\") {\n      prime_digits = \"D\";\n    } else if (digit\
    \ === \"D\") {\n      prime_digits = \"E\";\n    } else if (digit === \"E\") {\n\
    \      prime_digits = \"F\";\n    } else {\n      prime_digits = digit;\n    }\n\
    \    if (prime_digits !== \"F\") {\n      primes++;\n    }\n  }\n  return primes;\n\
    }\n", "  let hex = num.toUpperCase();\n  let hexDigits = hex.split(\"\");\n  let\
    \ hexDigitCount = hexDigits.length;\n  let hexDigitCount2 = hexDigitCount*hexDigitCount;\n\
    \  let hexDigitCount3 = hexDigitCount2*hexDigitCount;\n  let hexDigitCount4 =\
    \ hexDigitCount3*hexDigitCount;\n  let hexDigitCount5 = hexDigitCount4*hexDigitCount;\n\
    \  let hexDigitCount6 = hexDigitCount5*hexDigitCount;\n  let hexDigitCount7 =\
    \ hexDigitCount6*hexDigitCount;\n  let hexDigitCount8 = hexDigitCount7*hexDigitCount;\n\
    \  let hexDigitCount9 = hexDigitCount8*hexDigitCount;\n  let hexDigitCount10 =\
    \ hexDigitCount9*hexDigitCount;\n  let hexDigitCount11 = hexDigitCount10*hexDigitCount;\n\
    \  let hexDigitCount12 = hexDigitCount11*hexDigitCount;\n  let hexDigitCount13\
    \ = hexDigitCount12*hexDigitCount;\n  let hexDigitCount14 = hexDigitCount13*hexDigitCount;\n\
    \  let hexDigitCount15 = hexDigitCount14*hexDigitCount;\n  let hexDigitCount16\
    \ = hexDigitCount15*hexDigitCount;\n  let hexDigitCount17 = hexDigitCount16*hexDigitCount;\n\
    \  let hexDigitCount18 = hexDigitCount17*hexDigitCount;\n  let hexDigitCount19\
    \ = hexDigitCount18*hexDigitCount;\n  let hexDigitCount20 = hexDigitCount19*hexDigitCount;\n\
    \  let hexDigitCount21 = hexDigitCount20*hexDigitCount;\n  let hexDigitCount22\
    \ = hexDigitCount21*hexDigitCount;\n  let hexDigitCount23 = hexDigitCount22*hexDigitCount;\n\
    \  let hexDigitCount24 = hexDigitCount23*hexDigitCount;\n  let hexDigitCount25\
    \ = hexDigitCount24*hexDigitCount;\n  let hexDigitCount26 = hexDigitCount25*hexDigitCount;\n\
    \  let hexDigitCount27 = hexDigitCount26*hexDigitCount;\n  let hexDigitCount28\
    \ = hexDigitCount27*hexDigitCount;\n  let hexDigitCount29 = hexDigitCount28*hexDigitCount;\n\
    \  let hexDigitCount30 = hexDigitCount29*hexDigitCount;\n  let hexDigitCount31\
    \ = hexDigitCount30*hexDigitCount;\n  let hexDigitCount32 = hexDigitCount31*hexDigitCount;\n\
    \  let hexDigitCount33 = hexDigitCount", "  let hex = num.toUpperCase();\n  let\
    \ digits = hex.split(\"\");\n  let primes = 0;\n  let prime_digits = \"\";\n \
    \ let prime_digits_length = 0;\n  let prime_digits_index = 0;\n  let prime_digits_index_length\
    \ = 0;\n  let prime_digits_index_length2 = 0;\n  let prime_digits_index_length3\
    \ = 0;\n  let prime_digits_index_length4 = 0;\n  let prime_digits_index_length5\
    \ = 0;\n  let prime_digits_index_length6 = 0;\n  let prime_digits_index_length7\
    \ = 0;\n  let prime_digits_index_length8 = 0;\n  let prime_digits_index_length9\
    \ = 0;\n  let prime_digits_index_length10 = 0;\n  let prime_digits_index_length11\
    \ = 0;\n  let prime_digits_index_length12 = 0;\n  let prime_digits_index_length13\
    \ = 0;\n  let prime_digits_index_length14 = 0;\n  let prime_digits_index_length15\
    \ = 0;\n  let prime_digits_index_length16 = 0;\n  let prime_digits_index_length17\
    \ = 0;\n  let prime_digits_index_length18 = 0;\n  let prime_digits_index_length19\
    \ = 0;\n  let prime_digits_index_length20 = 0;\n  let prime_digits_index_length21\
    \ = 0;\n  let prime_digits_index_length22 = 0;\n  let prime_digits_index_length23\
    \ = 0;\n  let prime_digits_index_length24 = 0;\n  let prime_digits_index_length25\
    \ = 0;\n  let prime_digits_index_length26 = 0;\n  let prime_digits_index_length27\
    \ = 0;\n  let prime_digits_index_length28 = 0;\n  let prime_digits_index_length29\
    \ = 0;\n  let prime_digits_index_length30 = 0;\n  let prime_digits_index_length31\
    \ = 0;\n  let prime_digits_index_length32 = 0;\n  let prime_digits_index_length33\
    \ = 0;\n  let prime_digits_index_length34 = 0;\n  let prime_digits_index_length35\
    \ = 0;\n  let prime_digits_index_length36 = 0;\n  let prime_digits_index_length37\
    \ = 0;\n  let prime_digits_index_length38 = 0;\n  let prime_digits_index_length39\
    \ = 0;\n  let prime_digits_index_length40 = 0;\n  let prime_digits_index_length41\
    \ = 0;\n  let prime_digits_index_length42 = 0;\n  let prime_digits_index_length43\
    \ = 0;\n  let prime_digits_index_length44 = 0;\n  let prime_digits_index_length45\
    \ = 0;\n  let prime_digits_index_length46 = 0;\n  let prime_digits_index_length47\
    \ = 0;\n  let prime_digits_", "    let hex = num.toUpperCase();\n    let digits\
    \ = hex.split(\"\");\n    let primes = 0;\n    let prime_digits = \"\";\n    let\
    \ prime_digit_count = 1;\n    let prime_digit_count_max = 2;\n    let prime_digit_count_min\
    \ = 2;\n    let prime_digit_count_max2 = 2;\n    let prime_digit_count_min2 =\
    \ 2;\n    let prime_digit_count_max3 = 2;\n    let prime_digit_count_min3 = 2;\n\
    \    let prime_digit_count_max4 = 2;\n    let prime_digit_count_min4 = 2;\n  \
    \  let prime_digit_count_max5 = 2;\n    let prime_digit_count_min5 = 2;\n    let\
    \ prime_digit_count_max6 = 3;\n    let prime_digit_count_min6 = 3;\n    let prime_digit_count_max7\
    \ = 3;\n    let prime_digit_count_min7 = 3;\n    let prime_digit_count_max8 =\
    \ 3;\n    let prime_digit_count_min8 = 3;\n    let prime_digit_count_max9 = 3;\n\
    \    let prime_digit_count_min9 = 3;\n    let prime_digit_count_max10 = 3;\n \
    \   let prime_digit_count_min10 = 3;\n    let prime_digit_count_max11 = 3;\n \
    \   let prime_digit_count_min11 = 3;\n    let prime_digit_count_max12 = 3;\n \
    \   let prime_digit_count_min12 = 3;\n    let prime_digit_count_max13 = 3;\n \
    \   let prime_digit_count_min13 = 3;\n    let prime_digit_count_max14 = 3;\n \
    \   let prime_digit_count_min14 = 3;\n    let prime_digit_count_max15 = 3;\n \
    \   let prime_digit_count_min15 = 3;\n    let prime_digit_count_max16 = 3;\n \
    \   let prime_digit_count_min16 = 3;\n    let prime_digit_count_max17 = 3;\n \
    \   let prime_digit_count_min17 = 3;\n    let prime_digit_count_max18 = 3;\n \
    \   let prime_digit_count_min18 = 3;\n    let prime_digit_count_max19 = 3;\n \
    \   let prime_digit_count_min19 = 3;\n    let prime_digit_count_max20 = 3;\n \
    \   let prime_digit_count_min20 = 3;\n    let prime_digit_count_max21 = 4;\n \
    \   let prime_digit_count_min21 = 4;\n    let prime_digit_count_max22 = 4;\n \
    \   let prime_digit_count_min22 = 4;\n    let prime_digit_count_max23 = 4;\n \
    \   let prime_digit_count_min23 = 4;\n    let prime_digit_count_max24 = 4;\n \
    \   let prime_digit_count_min24 = 4;\n    let prime_digit_count_max25 = 4;\n \
    \   let prime_digit_count_min25 = 4;\n    let prime_digit_count_max26 = 4;\n \
    \   let prime_digit_count_min26 = 4;\n    let prime_digit_count_max27 = 4;\n \
    \   let prime_digit_count_min", "  let hex = num.toUpperCase();\n  let digits\
    \ = hex.split(\"\");\n  let primes = 0;\n  let prime_digits = \"\";\n  for (let\
    \ i = 0; i < digits.length; i++) {\n    let digit = digits[i];\n    if (digit\
    \ == \"A\" || digit == \"B\" || digit == \"C\" || digit == \"D\" || digit == \"\
    E\" || digit == \"F\") {\n      prime_digits += digit;\n    } else {\n      prime_digits\
    \ += digit;\n      primes++;\n    }\n  }\n  return primes;\n}\n", "    let hex\
    \ = num.toUpperCase();\n    let digits = hex.split(\"\");\n    let primes = 0;\n\
    \    let prime: number = 0;\n    let prime_found = false;\n    for (let i = 0;\
    \ i < digits.length; i++) {\n        let digit = digits[i];\n        if (digit\
    \ === \"A\" || digit === \"B\" || digit === \"C\" || digit === \"D\" || digit\
    \ === \"E\" || digit === \"F\") {\n            prime_found = true;\n         \
    \   prime = digit;\n        }\n        if (prime_found) {\n            primes++;\n\
    \        }\n    }\n    return primes;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
