name: HumanEval_65_circular_shift
language: ts
prompt: "//Circular shift the digits of the integer x, shift the digits right by shift\n\
  // and return the result as a string.\n// If shift > number of digits, return digits\
  \ reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
  \ 2)\n// \"12\"\nfunction circular_shift(x: number, shift: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = circular_shift;\n  assert.deepEqual(candidate(100,\
  \ 2),\"001\");\n  assert.deepEqual(candidate(12, 2),\"12\");\n  assert.deepEqual(candidate(97,\
  \ 8),\"79\");\n  assert.deepEqual(candidate(12, 1),\"21\");\n  assert.deepEqual(candidate(11,\
  \ 101),\"11\");\n}\n\ntest();"
completions: ["  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length)\
    \ {\n    digits = digits.reverse();\n  }\n  return digits.shift(shift).join('');\n\
    }\n", "  let digits = String(Math.abs(x)).split(\"\");\n  digits = digits.reverse();\n\
    \  let result = \"\";\n  for (let i = 0; i < shift; i++) {\n    result += digits.pop();\n\
    \  }\n  return result + digits.join(\"\");\n}\n", "  let result = \"\";\n  for\
    \ (let i = 0; i < shift; i++) {\n    result += String(x);\n    x = x >> 1;\n \
    \ }\n  return result;\n}\n", "  if (shift > x.length) {\n    return x.toString().split(\"\
    \").reverse().join(\"\");\n  }\n  return x.toString().split(\"\").slice(shift,\
    \ x.length).join(\"\");\n}\n", "  let digits = String(Math.abs(x)).split('');\n\
    \  if (shift > digits.length) return digits.reverse();\n  let result = \"\";\n\
    \  for (let i = 0; i < shift; i++) {\n    result += digits.pop();\n  }\n  return\
    \ result + digits.reverse();\n}\n", "  let result = \"\";\n  let remainder = x\
    \ % 10;\n  while (shift > 1) {\n    result += remainder;\n    shift -= 1;\n  \
    \  remainder = x % 10;\n    x /= 10;\n  }\n  result += remainder;\n  return result;\n\
    }\n", "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length)\
    \ return digits.reverse();\n  else return digits.reverse().slice(shift, digits.length\
    \ + shift).reverse();\n}\n", "  if (shift > x.length) return x.split(\"\").reverse().join(\"\
    \");\n  return x.split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
    \") + x.split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n",
  "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
    \ digits.reverse();\n  const remainder = x % Math.pow(10, shift);\n  return digits.reverse().slice(0,\
    \ shift) + String(remainder).split('').reverse().join('');\n}\n", "  let result\
    \ = \"\";\n  let remainder = 0;\n  let i = 0;\n  while (shift > i) {\n    remainder\
    \ = x % 10;\n    result += String(remainder);\n    x /= 10;\n    i++;\n  }\n \
    \ while (i < shift) {\n    remainder = x % 10;\n    result += String(remainder);\n\
    \    x /= 10;\n    i++;\n  }\n  return result;\n}\n", "  let digits = String(Math.abs(x)).split('');\n\
    \  digits = digits.reverse();\n  digits = digits.splice(0, shift);\n  return digits.reverse().join('');\n\
    }\n", "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result\
    \ = \"\";\n  for (let i = 0; i < shift; i++) {\n    result += x.charAt(x.length\
    \ - i - 1);\n  }\n  return result;\n}\n", "  let digits = String(Math.abs(x)).split('');\n\
    \  if (shift > digits.length) {\n    digits = digits.reverse();\n  }\n  return\
    \ digits.shift(shift).join('');\n}\n", "  let digits = String(Math.abs(x)).split('');\n\
    \  if (shift > digits.length) return digits.reverse();\n  if (shift < -digits.length)\
    \ return digits.reverse();\n  let result = \"\";\n  for (let i = 0; i < digits.length;\
    \ i += 1) {\n    result += digits[(digits.length - 1 - i) + shift];\n  }\n  return\
    \ result;\n}\n", "  let digits = String(Math.abs(x)).split(\"\");\n  if (shift\
    \ > digits.length) return digits.reverse();\n  else return digits.slice(shift,\
    \ digits.length).reverse().join(\"\");\n}\n", "  let s = \"\" + x;\n  while (s.length\
    \ < shift) {\n    s = s.charAt(s.length - 1) + s.charAt(s.length);\n  }\n  return\
    \ s.substring(s.length - shift, s.length);\n}\n", "  let digits = x.toString().split('');\n\
    \  digits.reverse();\n  digits = digits.map((digit, i) => digit + digits[shift\
    \ - i]);\n  return digits.join('');\n}\n", "  let s = \"\";\n  for (let i = shift;\
    \ i > 0; i -= 1) {\n    s = digits[x % 10] + s;\n    x = Math.floor(x / 10);\n\
    \  }\n  return s;\n}\n", "  let digits = String(Math.abs(x)).split('');\n  if\
    \ (shift > digits.length) return digits.reverse();\n  for (let i = 0; i < shift;\
    \ i++) {\n    digits[i] = digits[i + shift];\n  }\n  return digits.reverse();\n\
    }\n", "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
    \");\n  }\n  return x.toString().split(\"\").slice(shift, x.length + shift).join(\"\
    \");\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
