name: HumanEval_153_Strongest_Extension
language: ts
prompt: "//You will be given the name of a class (a string) and an array of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ array.\n// For example, if you are given \"Slices\" as the class and an array\
  \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
  , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
  \ string, extensions: string[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for (let i = 1; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - strongest_extension.length;\n\
    \    if (extension_strength > 0) {\n      strongest_extension = extension;\n \
    \   }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "    let\
    \ strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_length\
    \ = extension.length;\n        let extension_strength = extension_length - strongest_extension.length;\n\
    \        if (extension_strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let strongest_extension: number = 0;\n    let strongest_extension_str: string;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension;\n        if (extension_strength >\
    \ 0) {\n            strongest_extension = extension_strength;\n            strongest_extension_str\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
    \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
    \ - sm.length;\n    if (strength > strongest_extension.length) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > strongest_extension.charCodeAt(0)) {\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let strongest_extension: number =\
    \ -1;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension = extensions[i];\n      \
    \  let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > strongest_extension)\
    \ {\n            strongest_extension = strength;\n            strongest_extension_str\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length) {\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let max_strength = -1\n    let max_extension\
    \ = \"\"\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i]\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength\n            max_extension\
    \ = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n\
    }\n", "  let max_extension_strength = -1;\n  let max_extension_name = \"\";\n\
    \  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_name = extension;\n    }\n  }\n \
    \ return class_name + \".\" + max_extension_name;\n}\n", "    let strongest_extension:\
    \ number = -1;\n    let strongest_extension_str: string = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension_str.length;\n        if (extension_strength\
    \ > strongest_extension) {\n            strongest_extension = extension_strength;\n\
    \            strongest_extension_str = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension_str;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let strongest_extension: number = 0;\n    let strongest_extension_str: string;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let extension_str:\
    \ string = extensions[i];\n        let extension_str_length: number = extension_str.length;\n\
    \        let extension_str_upper: number = extension_str.toUpperCase().length;\n\
    \        let extension_str_lower: number = extension_str.toLowerCase().length;\n\
    \        let extension_str_length_ratio: number = extension_str_upper - extension_str_lower;\n\
    \        let extension_str_strength: number = extension_str_length_ratio * CAP\
    \ - extension_str_lower;\n        if (extension_str_strength > strongest_extension)\
    \ {\n            strongest_extension = extension_str_strength;\n            strongest_extension_str\
    \ = extension_str;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = -1;\n    for (let i = 1; i < extensions.length; i++) {\n        let\
    \ extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length) {\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_length = extension.length;\n\t\tlet extension_strength\
    \ = extension_length - extension_strength_count(extension);\n\t\tif (extension_strength\
    \ > strongest_extension.length) {\n\t\t\tstrongest_extension = extension;\n\t\t\
    }\n\t}\n\treturn `${class_name}.${strongest_extension}`;\n}\n", "  let max_strength\
    \ = -1\n  let max_extension = \"\"\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i]\n    let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length\n    if (strength > max_strength) {\n   \
    \   max_strength = strength\n      max_extension = extension\n    }\n  }\n  return\
    \ class_name + \".\" + max_extension\n}\n", "  let cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/)).length;\n  let sm_extensions = extensions.filter(e => e.match(/[a-z]/)).length;\n\
    \  return `${class_name.slice(0, class_name.lastIndexOf('.')+1)}.${extensions[Math.max(cap_extensions\
    \ - sm_extensions, 0)]}`;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
