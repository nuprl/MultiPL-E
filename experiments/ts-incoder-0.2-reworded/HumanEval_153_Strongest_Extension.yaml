name: HumanEval_153_Strongest_Extension
language: ts
prompt: "//You will be given the name of a class (a string) and an array of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ array.\n// For example, if you are given \"Slices\" as the class and an array\
  \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
  , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
  \ string, extensions: string[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for (let i = 1; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - strongest_extension.length;\n\
    \    if (extension_strength > 0) {\n      strongest_extension = extension;\n \
    \   }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "    let\
    \ strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_length\
    \ = extension.length;\n        let extension_strength = extension_length - strongest_extension.length;\n\
    \        if (extension_strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let strongest_extension: number = 0;\n    let strongest_extension_str: string;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension;\n        if (extension_strength >\
    \ 0) {\n            strongest_extension = extension_strength;\n            strongest_extension_str\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
    \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
    \ - sm.length;\n    if (strength > strongest_extension.length) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > strongest_extension.charCodeAt(0)) {\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let strongest_extension: number =\
    \ -1;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension = extensions[i];\n      \
    \  let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > strongest_extension)\
    \ {\n            strongest_extension = strength;\n            strongest_extension_str\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length) {\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let max_strength = -1\n    let max_extension\
    \ = \"\"\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i]\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength\n            max_extension\
    \ = extension\n        }\n    }\n    return class_name + \".\" + max_extension\n\
    }\n", "  let max_extension_strength = -1;\n  let max_extension_name = \"\";\n\
    \  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_name = extension;\n    }\n  }\n \
    \ return class_name + \".\" + max_extension_name;\n}\n", "    let strongest_extension:\
    \ number = -1;\n    let strongest_extension_str: string = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension_str.length;\n        if (extension_strength\
    \ > strongest_extension) {\n            strongest_extension = extension_strength;\n\
    \            strongest_extension_str = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension_str;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let strongest_extension: number = 0;\n    let strongest_extension_str: string;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let extension_str:\
    \ string = extensions[i];\n        let extension_str_length: number = extension_str.length;\n\
    \        let extension_str_upper: number = extension_str.toUpperCase().length;\n\
    \        let extension_str_lower: number = extension_str.toLowerCase().length;\n\
    \        let extension_str_length_ratio: number = extension_str_upper - extension_str_lower;\n\
    \        let extension_str_strength: number = extension_str_length_ratio * CAP\
    \ - extension_str_lower;\n        if (extension_str_strength > strongest_extension)\
    \ {\n            strongest_extension = extension_str_strength;\n            strongest_extension_str\
    \ = extension_str;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = -1;\n    for (let i = 1; i < extensions.length; i++) {\n        let\
    \ extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length) {\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_length = extension.length;\n\t\tlet extension_strength\
    \ = extension_length - extension_strength_count(extension);\n\t\tif (extension_strength\
    \ > strongest_extension.length) {\n\t\t\tstrongest_extension = extension;\n\t\t\
    }\n\t}\n\treturn `${class_name}.${strongest_extension}`;\n}\n", "  let max_strength\
    \ = -1\n  let max_extension = \"\"\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i]\n    let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length\n    if (strength > max_strength) {\n   \
    \   max_strength = strength\n      max_extension = extension\n    }\n  }\n  return\
    \ class_name + \".\" + max_extension\n}\n", "  let cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/)).length;\n  let sm_extensions = extensions.filter(e => e.match(/[a-z]/)).length;\n\
    \  return `${class_name.slice(0, class_name.lastIndexOf('.')+1)}.${extensions[Math.max(cap_extensions\
    \ - sm_extensions, 0)]}`;\n}\n", "\tlet strongest_extension: number = -1;\n\t\
    let strongest_extension_name: string = \"\";\n\tlet extensions_length: number\
    \ = extensions.length;\n\tfor (let i: number = 0; i < extensions_length; i++)\
    \ {\n\t\tlet extension: number = extensions[i].charCodeAt(0) - 65;\n\t\tlet extension_name:\
    \ string = extensions[i].substring(1);\n\t\tlet extension_length: number = extension_name.length;\n\
    \t\tlet extension_strength: number = extension - extension_name.length;\n\t\t\
    if (extension_strength > strongest_extension) {\n\t\t\tstrongest_extension = extension_strength;\n\
    \t\t\tstrongest_extension_name = extension_name;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + strongest_extension_name;\n}\n", "  let max_strength = -1;\n  let\
    \ max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n   \
    \ let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - CAP_SM_LENGTH;\n    if (extension_strength\
    \ > max_strength) {\n      max_strength = extension_strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return `${class_name}.${max_extension}`;\n}\n",
  "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\
    \t\tlet sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap - sm;\n\
    \t\tif (strength > 0) {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "  let max_strength =\
    \ -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap.length - sm.length;\n\
    \t\tif (strength > strongest_extension.length) {\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let strength = class_name.split(extension).length\
    \ - 1;\n    if (strength > max_strength) {\n      max_strength = strength;\n \
    \     max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for (let i = 1; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension: number = 0;\n\tlet strongest_extension_index:\
    \ number = 0;\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_length = extension.length;\n\t\tlet extension_strength\
    \ = extension_length - 1;\n\t\tlet extension_class_name = class_name + extension;\n\
    \t\tlet extension_class_name_length = extension_class_name.length;\n\t\tlet extension_class_name_strength\
    \ = extension_class_name_length - 1;\n\t\tlet extension_class_name_class_name\
    \ = extension_class_name.substring(0, extension_class_name_length - 1);\n\t\t\
    let extension_class_name_class_name_length = extension_class_name_class_name.length;\n\
    \t\tlet extension_class_name_class_name_strength = extension_class_name_class_name_length\
    \ - 1;\n\t\tlet extension_class_name_class_name_class_name = extension_class_name_class_name.substring(0,\
    \ extension_class_name_class_name_length - 1);\n\t\tlet extension_class_name_class_name_class_name_length\
    \ = extension_class_name_class_name_class_name.length;\n\t\tlet extension_class_name_class_name_class_name_strength\
    \ = extension_class_name_class_name_class_name_length - 1;\n\t\tlet extension_class_name_class_name_class_name_class_name\
    \ = extension_class_name_class_name_class_name.substring(0, extension_class_name_class_name_class_name_length\
    \ - 1);\n\t\tlet extension_class_name_class_name_class_name_class_name_length\
    \ = extension_class_name_class_name_class_name_class_name.length;\n\t\tlet extension_class_name_class_name_class_name_class_name_strength\
    \ = extension_class_name_class_name_class_name_class_name_length - 1;\n\t\tlet\
    \ extension_class_name_class_name_class_name_class_name_class_name = extension_class_name_class_name_class_name_class_name.substring(0,\
    \ extension_class_name_class_name_class_name_length - 1);\n\t\tlet extension_class_name_class_name_class_name_class_name_class_name_length\
    \ = extension_class_name_class_name_class_name_class_name_class_name.length;\n\
    \t\tlet extension_class_name_class_name_class_name_class_name_class_name_strength\
    \ = extension_class_name_class_name_class_name_class_name_class_name_length -\
    \ 1;\n\t\tlet extension_class_name_class_name_class_name_class_name_class_name_class_name\
    \ = extension_class_name_class_name_class_name_class_name_class_name.substring(0,\
    \ extension_class_name_class_name_class_name_length - 1);\n\t\tlet extension_class_name_class_name_class_name_class_name_class_name_length\
    \ = extension_class_name_class_name_class_name_class_name_class_name.length;\n\
    \t\tlet extension_class_name_class_name_class_name_class_name_class_name_strength\
    \ = extension_class_name_class_name_class_name_class_name_class_name_length -\
    \ 1;\n\t\tlet extension_class_name_class_name_class_name_class_name_class_name_class_name\
    \ = extension_class_", "    let strongest_extension = extensions[0];\n    let\
    \ strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n\
    }\n", "    let strongest_extension: number = 0;\n    let strongest_extension_str:\
    \ string = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_str: string = extensions[i];\n        let extension_str_length: number\
    \ = extension_str.length;\n        let extension_str_length_lower: number = extension_str_length;\n\
    \        let extension_str_length_upper: number = extension_str_length;\n    \
    \    for (let j = 0; j < extension_str_length; j++) {\n            if (extension_str[j]\
    \ === extension_str[j].toUpperCase()) {\n                extension_str_length_upper--;\n\
    \            }\n            if (extension_str[j] === extension_str[j].toLowerCase())\
    \ {\n                extension_str_length_lower--;\n            }\n        }\n\
    \        let extension_str_length_total: number = extension_str_length_upper +\
    \ extension_str_length_lower;\n        let extension_strength: number = extension_str_length_total\
    \ / extension_str_length;\n        if (extension_strength > strongest_extension)\
    \ {\n            strongest_extension = extension_strength;\n            strongest_extension_str\
    \ = extension_str;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \ if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let strength = class_name.split(extension).length - 1;\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n", "  let extension_strength: number[] = [];\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_number = extension.charCodeAt(0)\
    \ - 65;\n    extension_strength.push(extension_number);\n  }\n  let max_strength\
    \ = Math.max.apply(null, extension_strength);\n  let max_extension = extension_strength.indexOf(max_strength);\n\
    \  return class_name + extensions[max_extension];\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    let strongest_extension_strength = -1;\n    for (let i\
    \ = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension: number = -1;\n    let strongest_extension_name:\
    \ string = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension: number = extensions[i].charCodeAt(0) - 65;\n        if (extension\
    \ > strongest_extension) {\n            strongest_extension = extension;\n   \
    \         strongest_extension_name = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension_name;\n}\n", "\tlet max_strength =\
    \ -1\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i]\n\
    \t\tlet class_name = class_name + extension\n\t\tlet class_name_lower = class_name.toLowerCase()\n\
    \t\tlet class_name_upper = class_name.toUpperCase()\n\t\tlet class_name_length\
    \ = class_name.length\n\t\tlet extension_length = extension.length\n\t\tlet extension_upper\
    \ = extension.toUpperCase()\n\t\tlet extension_lower = extension.toLowerCase()\n\
    \t\tlet extension_upper_index = extension_upper.indexOf(class_name_upper)\n\t\t\
    let extension_lower_index = extension_lower.indexOf(class_name_lower)\n\t\tlet\
    \ extension_length = extension_upper_index - extension_lower_index\n\t\tlet extension_strength\
    \ = extension_length - class_name_length\n\t\tif (extension_strength > max_strength)\
    \ {\n\t\t\tmax_strength = extension_strength\n\t\t}\n\t}\n\treturn class_name\
    \ + extensions[extensions.length - 1]\n}\n", "  let max_strength = -1;\n  let\
    \ max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n   \
    \ let extension = extensions[i];\n    let strength = class_name.split(extension).length\
    \ - 1;\n    if (strength > max_strength) {\n      max_strength = strength;\n \
    \     max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "  let strongest_extension: number = -1;\n  let strongest_extension_name:\
    \ string =\n    extensions[extensions.findIndex(extension => extension.charAt(0).toUpperCase()\
    \ === extension.charAt(0))];\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let extension_name =\n      extension.charAt(0).toUpperCase()\
    \ + extension.substr(1);\n    if (extension_name === strongest_extension_name)\
    \ {\n      strongest_extension = i;\n    }\n  }\n  return class_name + \".\" +\
    \ strongest_extension_name;\n}\n", "  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "    let max_strength\
    \ = -1;\n    let max_extension = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > max_strength) {\n            max_strength = extension_strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "    let cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/));\n    let sm_extensions = extensions.filter(e => e.match(/[a-z]/));\n\
    \    let cap_extensions_count = cap_extensions.length;\n    let sm_extensions_count\
    \ = sm_extensions.length;\n    let cap_extensions_sm = cap_extensions_count -\
    \ sm_extensions_count;\n    let sm_extensions_sm = sm_extensions_count - cap_extensions_count;\n\
    \    let cap_extensions_strength = cap_extensions_sm/cap_extensions_count;\n \
    \   let sm_extensions_strength = sm_extensions_sm/sm_extensions_count;\n    let\
    \ cap_extensions_index = cap_extensions.indexOf(cap_extensions_strength);\n  \
    \  let sm_extensions_index = sm_extensions.indexOf(sm_extensions_strength);\n\
    \    return class_name + extensions[cap_extensions_index];\n}\n", "    let max_extension_strength\
    \ = -1;\n    let max_extension_name = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_strength = extensions[i].toUpperCase().charCodeAt(0)\
    \ - extensions[i].toLowerCase().charCodeAt(0);\n        if (extension_strength\
    \ > max_extension_strength) {\n            max_extension_strength = extension_strength;\n\
    \            max_extension_name = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + max_extension_name;\n}\n", "  let cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/));\n  let sm_extensions = extensions.filter(e => e.match(/[a-z]/));\n\
    \  let cap_extensions_count = cap_extensions.length;\n  let sm_extensions_count\
    \ = sm_extensions.length;\n  let cap_extension_strength = cap_extensions_count\
    \ - sm_extensions_count;\n  let sm_extension_strength = sm_extensions_count;\n\
    \  let max_extension_strength = cap_extension_strength;\n  let max_extension =\
    \ cap_extensions[0];\n  for (let i = 0; i < sm_extensions_count; i++) {\n    if\
    \ (sm_extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = sm_extension_strength;\n      max_extension = sm_extensions[i];\n    }\n \
    \   sm_extension_strength--;\n  }\n  return `${class_name}.${max_extension}`;\n\
    }\n", "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for (let i = 1; i < extensions.length; i++) {\n        let extension_strength\
    \ = extensions[i].length - extensions[i].toUpperCase().length;\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension = extensions[i];\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n", "    let strongest_extension:\
    \ number = -1;\n    let strongest_extension_str: string = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n        if (extension_strength\
    \ > strongest_extension) {\n            strongest_extension = extension_strength;\n\
    \            strongest_extension_str = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension_str;\n}\n", "  let strongest_extension\
    \ = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n    let\
    \ sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length - sm.length;\n\
    \    if (strength > strongest_extension.length)\n      strongest_extension = extension;\n\
    \  }\n  return class_name + \".\" + strongest_extension;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
    \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0;\
    \ i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_length\
    \ = extension.length;\n\t\tlet extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)]\
    \ - SM_TO_STRONG[extension.charAt(extension_length - 1)];\n\t\tif (extension_strength\
    \ > max_strength) {\n\t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n",
  "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - strongest_extension.length;\n\
    \        if (extension_strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n", " \
    \   let strongest_extension: number = -1;\n    let strongest_extension_str: string\
    \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extension:\
    \ number = extensions[i].charCodeAt(0) - 65;\n        if (extension > strongest_extension)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_str\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "  let cap_extensions = extensions.filter(e => e.match(/[A-Z]/));\n  let\
    \ sm_extensions = extensions.filter(e => e.match(/[a-z]/));\n  let cap_extensions_count\
    \ = cap_extensions.length;\n  let sm_extensions_count = sm_extensions.length;\n\
    \  let cap_extensions_sm = cap_extensions_count - sm_extensions_count;\n  let\
    \ sm_extensions_sm = sm_extensions_count - cap_extensions_count;\n  let cap_extensions_cap\
    \ = cap_extensions_count - cap_extensions_sm;\n  let sm_extensions_cap = sm_extensions_count\
    \ - sm_extensions_sm;\n  let strongest_extension = cap_extensions[0];\n  if (cap_extensions_cap\
    \ > sm_extensions_cap) {\n    strongest_extension = cap_extensions[cap_extensions_cap];\n\
    \  }\n  if (sm_extensions_cap > cap_extensions_cap) {\n    strongest_extension\
    \ = sm_extensions[sm_extensions_cap];\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension: number = extensions.length;\n    let strongest_extension_name:\
    \ string = \"\";\n    for (let i = 0; i < strongest_extension; i++) {\n      \
    \  let extension: number = extensions[i];\n        let cap: number = extension.charCodeAt(0)\
    \ - 97;\n        let sm: number = extension.charCodeAt(1) - 65;\n        let strength:\
    \ number = cap - sm;\n        if (strength > 0) {\n            strongest_extension_name\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_name;\n\
    }\n", "    let strongest_extension: number = 0;\n    let strongest_extension_str:\
    \ string = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_str: string = extensions[i];\n        let extension_str_length: number\
    \ = extension_str.length;\n        let extension_cap: number = extension_str_length\
    \ - 1;\n        let extension_sm: number = extension_str_length - 2;\n       \
    \ let extension_strength: number = extension_cap - extension_sm;\n        if (extension_strength\
    \ > strongest_extension) {\n            strongest_extension = extension_strength;\n\
    \            strongest_extension_str = extension_str;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension_str;\n}\n", "    let strongest_extension:\
    \ number = -1;\n    let strongest_extension_class: string = class_name;\n    for\
    \ (let i = 0; i < extensions.length; i++) {\n        let extension_class: string\
    \ = extensions[i];\n        let extension_class_cap: number = extension_class.toUpperCase().charCodeAt(0)\
    \ - 65;\n        let extension_class_sm: number = extension_class.toLowerCase().charCodeAt(0)\
    \ - 97;\n        let extension_class_strength: number = extension_class_cap -\
    \ extension_class_sm;\n        if (extension_class_strength > strongest_extension)\
    \ {\n            strongest_extension = extension_class_strength;\n           \
    \ strongest_extension_class = extension_class;\n        }\n    }\n    return strongest_extension_class;\n\
    }\n", "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \ if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n",
  "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let strongest_extension: number = 0;\n    let strongest_extension_str: string\
    \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_length = extension.length;\n       \
    \ let extension_strength = extension_length - strongest_extension;\n        if\
    \ (extension_strength > 0) {\n            strongest_extension = extension_strength;\n\
    \            strongest_extension_str = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension_str;\n}\n", "  let max_strength = -1;\n\
    \  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n\
    \    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "    let strongest_extension:\
    \ number = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i\
    \ = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension)\
    \ {\n            strongest_extension = strength;\n            strongest_extension_str\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - extension_strength_count(extension);\n\t\tif (extension_strength > strongest_extension.length)\
    \ {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "  let cap = class_name.split('').filter(x\
    \ => x.toUpperCase() === x).length;\n  let sm = class_name.split('').filter(x\
    \ => x.toLowerCase() === x).length;\n  return class_name + extensions[cap - sm];\n\
    }\n", "    let cap_extensions = extensions.filter(e => e.match(/[A-Z]/));\n  \
    \  let sm_extensions = extensions.filter(e => e.match(/[a-z]/));\n    let cap_extensions_length\
    \ = cap_extensions.length;\n    let sm_extensions_length = sm_extensions.length;\n\
    \    let cap_extension_strength = cap_extensions_length / extensions.length;\n\
    \    let sm_extension_strength = sm_extensions_length / extensions.length;\n \
    \   let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension_strength = extensions[i].match(/[A-Z]/).length\
    \ - extensions[i].match(/[a-z]/).length;\n        if (cap_extension_strength >\
    \ sm_extension_strength) {\n            strongest_extension = extensions[i];\n\
    \        } else if (cap_extension_strength < sm_extension_strength) {\n      \
    \      strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength)\
    \ {\n\t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n", "    let strongest_extension:\
    \ string = \"\";\n    let strongest_extension_strength: number = -1;\n    for\
    \ (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = -1;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - extension_strength_count(extension);\n        if (extension_strength\
    \ > strongest_extension.length)\n            strongest_extension = extension;\n\
    \    }\n    return class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap - sm;\n\t\t\
    if (strength > 0) {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension;\n}\n", "    let max_strength = -1;\n\
    \    let max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let extension = extensions[i];\n        let extension_strength =\
    \ extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n     \
    \   if (extension_strength > max_strength) {\n            max_strength = extension_strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet class_name = class_name + extension;\n\t\tlet class_name_lower\
    \ = class_name.toLowerCase();\n\t\tlet class_name_upper = class_name.toUpperCase();\n\
    \t\tlet class_name_length = class_name.length;\n\t\tlet extension_length = extension.length;\n\
    \t\tlet strength = class_name_length - extension_length;\n\t\tif (strength > max_strength)\
    \ {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\
    \t}\n\treturn class_name + \".\" + max_extension;\n}\n", "  let max_strength =\
    \ -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i];\n    let class_name = class_name + extension;\n\
    \    let class_name_lower = class_name.toLowerCase();\n    let class_name_upper\
    \ = class_name.toUpperCase();\n    let class_name_length = class_name.length;\n\
    \    let extension_length = extension.length;\n    let class_name_uppercase_length\
    \ = class_name_upper.length;\n    let extension_uppercase_length = extension_length;\n\
    \    let class_name_lowercase_length = class_name_lower.length;\n    let extension_lowercase_length\
    \ = extension_length;\n    let class_name_uppercase_lowercase_length = class_name_uppercase_length\
    \ + class_name_lowercase_length;\n    let extension_uppercase_lowercase_length\
    \ = extension_uppercase_length + extension_lowercase_length;\n    let class_name_lowercase_uppercase_length\
    \ = class_name_lowercase_length + class_name_uppercase_length;\n    let extension_lowercase_uppercase_length\
    \ = extension_lowercase_length + extension_uppercase_length;\n    let class_name_uppercase_lowercase_uppercase_length\
    \ = class_name_uppercase_lowercase_length + class_name_lowercase_uppercase_length;\n\
    \    let extension_uppercase_lowercase_uppercase_length = extension_uppercase_lowercase_length\
    \ + extension_lowercase_uppercase_length;\n    let class_name_lowercase_uppercase_lowercase_uppercase_length\
    \ = class_name_lowercase_uppercase_lowercase_length + class_name_uppercase_lowercase_uppercase_length;\n\
    \    let extension_uppercase_lowercase_uppercase_lowercase_uppercase_length =\
    \ extension_uppercase_lowercase_uppercase_length + extension_lowercase_uppercase_lowercase_uppercase_length;\n\
    \    let class_name_uppercase_lowercase_uppercase_lowercase_uppercase_length =\
    \ class_name_uppercase_lowercase_uppercase_lowercase_uppercase_length + class_name_lowercase_uppercase_lowercase_uppercase_uppercase_length;\n\
    \    let extension_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length\
    \ = extension_uppercase_lowercase_uppercase_lowercase_uppercase_length + extension_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length;\n\
    \    let class_name_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length\
    \ = class_name_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length\
    \ + class_name_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length;\n\
    \    let extension_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length\
    \ = extension_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length\
    \ + extension_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_lowercase_uppercase_length;\n\
    \    let ", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor (let\
    \ i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\
    \tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > max_strength) {\n\t\t\tmax_strength = extension_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n", "  let cap_extensions = extensions.filter(e => e.match(/[A-Z]/)).length;\n\
    \  let sm_extensions = extensions.filter(e => e.match(/[a-z]/)).length;\n  return\
    \ `${class_name}${cap_extensions - sm_extensions}`;\n}\n", "  let strongest_extension\
    \ = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n    let\
    \ sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length - sm.length;\n\
    \    if (strength > strongest_extension.length) strongest_extension = extension;\n\
    \  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "  let cap_extensions\
    \ = extensions.filter(x => x.match(/[A-Z]/));\n  let sm_extensions = extensions.filter(x\
    \ => x.match(/[a-z]/));\n  let cap_extensions_count = cap_extensions.length;\n\
    \  let sm_extensions_count = sm_extensions.length;\n  let cap_extension_strength\
    \ = cap_extensions_count - sm_extensions_count;\n  let sm_extension_strength =\
    \ sm_extensions_count;\n  let strongest_extension = extensions[0];\n  for (let\
    \ i = 1; i < extensions.length; i++) {\n    let extension = extensions[i];\n \
    \   let cap_extension = extension.match(/[A-Z]/);\n    let sm_extension = extension.match(/[a-z]/);\n\
    \    if (cap_extension_strength > sm_extension_strength) {\n      strongest_extension\
    \ = extension;\n      cap_extension_strength = cap_extensions_count - sm_extensions_count;\n\
    \      sm_extension_strength = sm_extensions_count;\n    } else if (cap_extension_strength\
    \ < sm_extension_strength) {\n      strongest_extension = extension;\n      cap_extension_strength\
    \ = cap_extensions_count;\n      sm_extension_strength = sm_extensions_count;\n\
    \    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
    \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "    let strongest_extension: string = extensions[0];\n    for (let i =\
    \ 1; i < extensions.length; i++) {\n        let extension_strength = extensions[i].charCodeAt(0)\
    \ - extensions[i].charCodeAt(0).toLowerCase();\n        if (extension_strength\
    \ > strongest_extension.charCodeAt(0) - strongest_extension.charCodeAt(0).toLowerCase())\
    \ {\n            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n", "  let extension_strength:\
    \ number[] = [];\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i].toUpperCase();\n    let extension_number = extension.charCodeAt(0)\
    \ - 65;\n    extension_strength.push(extension_number);\n  }\n  let max_strength\
    \ = extension_strength.reduce((a, b) => Math.max(a, b));\n  let max_index = extension_strength.indexOf(max_strength);\n\
    \  return class_name + extensions[max_index];\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap.length - sm.length;\n\
    \t\tif (strength > strongest_extension.length) {\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension: string = extensions[0];\n    for (let i =\
    \ 1; i < extensions.length; i++) {\n        let extension_length = extensions[i].length;\n\
    \        let extension_strength = extensions[i].toUpperCase().charCodeAt(0) -\
    \ extensions[i].toLowerCase().charCodeAt(0);\n        if (extension_strength >\
    \ 0) {\n            strongest_extension = extensions[i];\n        }\n    }\n \
    \   return class_name + \".\" + strongest_extension;\n}\n", "  let cap_extensions\
    \ = extensions.filter(e => e.match(/[A-Z]/)).length;\n  let sm_extensions = extensions.filter(e\
    \ => e.match(/[a-z]/)).length;\n  let strength = cap_extensions - sm_extensions;\n\
    \  return class_name + extensions.find(e => e.match(/[A-Z]/))[0] + \".\" + extensions.find(e\
    \ => e.match(/[a-z]/))[0] + \".\" + extensions[0];\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - extension.match(/[a-z]/).length;\n\
    \        if (extension_strength > strongest_extension.length) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
    \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
    \ - sm.length;\n    if (strength > strongest_extension.length) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension: number = -1;\n\tlet strongest_extension_str:\
    \ string = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension:\
    \ number = extensions[i].charCodeAt(0) - 65;\n\t\tlet extension_str: string =\
    \ extensions[i].toUpperCase();\n\t\tlet extension_str_length: number = extension_str.length;\n\
    \t\tlet extension_str_length_int: number = extension_str_length;\n\t\tlet extension_str_length_int2:\
    \ number = extension_str_length_int / 2;\n\t\tlet extension_str_length_int3: number\
    \ = extension_str_length_int - extension_str_length_int2;\n\t\tlet extension_str_length_int4:\
    \ number = extension_str_length_int / 3;\n\t\tlet extension_str_length_int5: number\
    \ = extension_str_length_int - extension_str_length_int4 - extension_str_length_int3;\n\
    \t\tlet extension_str_length_int6: number = extension_str_length_int / 4;\n\t\t\
    let extension_str_length_int7: number = extension_str_length_int - extension_str_length_int6\
    \ - extension_str_length_int5;\n\t\tlet extension_str_length_int8: number = extension_str_length_int\
    \ / 5;\n\t\tlet extension_str_length_int9: number = extension_str_length_int -\
    \ extension_str_length_int7 - extension_str_length_int8;\n\t\tlet extension_str_length_int10:\
    \ number = extension_str_length_int / 6;\n\t\tlet extension_str_length_int11:\
    \ number = extension_str_length_int - extension_str_length_int9 - extension_str_length_int10;\n\
    \t\tlet extension_str_length_int12: number = extension_str_length_int / 7;\n\t\
    \tlet extension_str_length_int13: number = extension_str_length_int - extension_str_length_int12\
    \ - extension_str_length_int11;\n\t\tlet extension_str_length_int14: number =\
    \ extension_str_length_int / 8;\n\t\tlet extension_str_length_int15: number =\
    \ extension_str_length_int - extension_str_length_int13 - extension_str_length_int14;\n\
    \t\tlet extension_str_length_int16: number = extension_str_length_int / 9;\n\t\
    \tlet extension_str_length_int17: number = extension_str_length_int - extension_str_length_int15\
    \ - extension_str_length_int16;\n\t\tlet extension_str_length_int18: number =\
    \ extension_str_length_int / 10;\n\t\tlet extension_str_length_int19: number =\
    \ extension_str_length_int - extension_str_length_int17 - extension_str_length_int18;\n\
    \t\t", "    let strongest_extension = extensions[0];\n    for (let i = 1; i <\
    \ extensions.length; i++) {\n        let extension = extensions[i];\n        let\
    \ extension_length = extension.length;\n        let extension_strength = extension_length\
    \ - strongest_extension.length;\n        if (extension_strength > 0) {\n     \
    \       strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let max_strength = -1;\n    let max_extension\
    \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n", "    let strongest_extension: number = -1;\n    let strongest_extension_str:\
    \ string = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_str: string = extensions[i];\n        let extension_str_length: number\
    \ = extension_str.length;\n        let extension_str_upper: number = extension_str.toUpperCase().length;\n\
    \        let extension_str_lower: number = extension_str.toLowerCase().length;\n\
    \        let extension_str_length_ratio: number = extension_str_upper / extension_str_lower;\n\
    \        let extension_str_strength: number = extension_str_length_ratio - extension_str_length;\n\
    \        if (extension_str_strength > strongest_extension) {\n            strongest_extension\
    \ = extension_str_strength;\n            strongest_extension_str = extension_str;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length) {\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap - sm;\n        if (strength > strongest_extension.charCodeAt(0))\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n", "    let max_strength = -1;\n\
    \    let max_extension = \"\";\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let extension = extensions[i];\n        let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (strength > max_strength) {\n\
    \            max_strength = strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + max_extension;\n}\n", "  let\
    \ strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - strongest_extension.length;\n\
    \    if (extension_strength > 0) {\n      strongest_extension = extension;\n \
    \   }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "  let max_strength\
    \ = -1\n  let max_extension = \"\"\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i]\n    let class_name = class_name + extension\n\
    \    let class_extensions = Extensions(class_name)\n    let strength = class_extensions.length\n\
    \    if (strength > max_strength) {\n      max_strength = strength\n      max_extension\
    \ = extension\n    }\n  }\n  return class_name + max_extension\n}\n", "    let\
    \ strongest_extension: number = -Infinity;\n    let strongest_extension_name:\
    \ string = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension) {\n            strongest_extension\
    \ = strength;\n            strongest_extension_name = extension;\n        }\n\
    \    }\n    return class_name + \".\" + strongest_extension_name;\n}\n", "   \
    \ let max_strength = -1;\n    let max_extension = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension = extensions[i];\n      \
    \  let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length) {\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "  let strongest_extension: number = -Infinity;\n  let strongest_extension_str:\
    \ string = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension_str:\
    \ string = extensions[i];\n    let extension_str_length: number = extension_str.length;\n\
    \    let extension_str_upper: number = extension_str.toUpperCase().length;\n \
    \   let extension_str_lower: number = extension_str.toLowerCase().length;\n  \
    \  let extension_str_length_ratio: number = extension_str_upper / extension_str_lower;\n\
    \    let extension_str_strength: number = extension_str_length_ratio * extension_str_length;\n\
    \    if (extension_str_strength > strongest_extension) {\n      strongest_extension\
    \ = extension_str_strength;\n      strongest_extension_str = extension_str;\n\
    \    }\n  }\n  return class_name + \".\" + strongest_extension_str;\n}\n", " \
    \   let strongest_extension: number = 0;\n    let strongest_extension_str: string\
    \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extension_str:\
    \ string = extensions[i];\n        let extension_str_length: number = extension_str.length;\n\
    \        let extension_str_upper: number = extension_str.toUpperCase().charCodeAt(0);\n\
    \        let extension_str_lower: number = extension_str.toLowerCase().charCodeAt(0);\n\
    \        let extension_str_upper_small: number = extension_str_upper - extension_str_lower;\n\
    \        let extension_str_lower_small: number = extension_str_lower - extension_str_upper;\n\
    \        let extension_str_strength: number = extension_str_upper_small + extension_str_lower_small;\n\
    \        if (extension_str_strength > strongest_extension) {\n            strongest_extension\
    \ = extension_str_strength;\n            strongest_extension_str = extension_str;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "  let extensions_count = extensions.length;\n  let extensions_count_cap\
    \ = extensions_count.toUpperCase().length;\n  let extensions_count_sm = extensions_count.toLowerCase().length;\n\
    \  let extensions_count_cap_sm = extensions_count_cap - extensions_count_sm;\n\
    \  let extensions_count_cap_sm_index = extensions_count_cap_sm + 1;\n  let extensions_count_cap_sm_index\
    \ = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index =\
    \ extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index\
    \ - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index -\
    \ 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n\
    \  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let\
    \ extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index\
    \ = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index =\
    \ extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index\
    \ - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index -\
    \ 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n\
    \  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let\
    \ extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index\
    \ = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index =\
    \ extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index\
    \ - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index -\
    \ 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n\
    \  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let\
    \ extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index\
    \ = extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index =\
    \ extensions_count_cap_sm_index - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index\
    \ - 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index -\
    \ 1;\n  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n\
    \  let extensions_count_cap_sm_index = extensions_count_cap_sm_index - 1;\n  let\
    \ extensions_count_cap_sm_index = extensions_count_cap_sm_index", "    let strongest_extension:\
    \ number = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i\
    \ = 0; i < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_length_lowercase: number = extension_str_length.toLowerCase();\n\
    \        let extension_str_length_uppercase: number = extension_str_length.toUpperCase();\n\
    \        let extension_str_length_length_difference: number = extension_str_length\
    \ - extension_str_length_lowercase;\n        let extension_str_length_length_difference_ratio:\
    \ number = extension_str_length_length_difference / extension_str_length_uppercase;\n\
    \        let extension_str_length_length_difference_ratio_rounded: number = Math.ceil(extension_str_length_length_difference_ratio);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded: number\
    \ = Math.ceil(extension_str_length_length_difference_ratio_rounded);\n       \
    \ let extension_str_length_length_difference_ratio_rounded_rounded_rounded: number\
    \ = Math.ceil(extension_str_length_length_difference_ratio_rounded_rounded);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded:\
    \ number = Math.ceil(extension_str_length_length_difference_ratio_rounded_rounded_rounded);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded:\
    \ number = Math.ceil(extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_rounded:\
    \ number = Math.ceil(extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded:\
    \ number = Math.ceil(extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_rounded);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded:\
    \ number = Math.ceil(extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded:\
    \ number = Math.ceil(extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded);\n\
    \        let extension_str_length_length_difference_ratio_rounded_rounded_rounded_rounded_rounded_",
  "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for (let i = 1; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_length\
    \ = extension.length;\n        let extension_strength = extension_length - strongest_extension.length;\n\
    \        if (extension_strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n", " \
    \ let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "  let max_extension_strength\
    \ = -1;\n  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_extension_strength)\
    \ {\n      max_extension_strength = extension_strength;\n      max_extension_name\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension_name;\n\
    }\n", "  let max_extension_strength = -1;\n  let max_extension_name = \"\";\n\
    \  for (let i = 0; i < extensions.length; i++) {\n    let extension_strength =\
    \ extensions[i].toUpperCase().charCodeAt(0) - extensions[i].toLowerCase().charCodeAt(0);\n\
    \    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_name = extensions[i];\n    }\n  }\n\
    \  return class_name + \".\" + max_extension_name;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length) {\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (strength > strongest_extension.length)\n\
    \            strongest_extension = extension;\n    }\n    return class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet max_strength = -1;\n\tfor (let i\
    \ = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\t\
    let class_name = class_name + extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\
    \t\tlet class_name_upper = class_name.toUpperCase();\n\t\tlet class_name_length\
    \ = class_name.length;\n\t\tlet extension_length = extension.length;\n\t\tlet\
    \ extension_lower = extension.toLowerCase();\n\t\tlet extension_upper = extension.toUpperCase();\n\
    \t\tlet extension_strength = extension_length - extension_lower;\n\t\tlet extension_strength_upper\
    \ = extension_length - extension_upper;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower;\n\t\tlet extension_strength_upper = extension_length - extension_upper;\n\
    \t\tlet extension_strength_lower = extension_length - extension_lower;\n\t\tlet\
    \ extension_strength_upper = extension_length - extension_upper;\n\t\tlet extension_strength_lower\
    \ = extension_length - extension_lower;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper;\n\t\tlet extension_strength_lower = extension_length - extension_lower;\n\
    \t\tlet extension_strength_upper = extension_length - extension_upper;\n\t\tlet\
    \ extension_strength_lower = extension_length - extension_lower;\n\t\tlet extension_strength_upper\
    \ = extension_length - extension_upper;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower;\n\t\tlet extension_strength_upper = extension_length - extension_upper;\n\
    \t\tlet extension_strength_lower = extension_length - extension_lower;\n\t\tlet\
    \ extension_strength_upper = extension_length - extension_upper;\n\t\tlet extension_strength_lower\
    \ = extension_length - extension_lower;\n\t\tlet extension_strength_upper = extension_length\
    \ - extension_upper;\n\t\tlet extension_strength_lower = extension_length - extension_lower;\n\
    \t\tlet extension_strength_upper = extension_length - extension_upper;\n\t\tlet\
    \ extension_strength_lower = extension_length - extension_lower;\n\t\tlet extension_strength_upper\
    \ = extension_length - extension_upper;\n\t\tlet extension_strength_lower = extension_length\
    \ - extension_lower;\n\t\tlet extension_strength_upper = extension_length - extension_upper;\n\
    \t\tlet extension_strength_lower = extension_length - extension_lower;\n\t\tlet\
    \ extension_strength_upper = extension_length - extension_upper;\n\t\tlet extension_strength_lower\
    \ = extension_length - extension_lower", "  let max_extension_strength = -1;\n\
    \  let max_extension_class = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i];\n    let extension_class = class_name\
    \ + extension;\n    let extension_strength = Extension_Strength(extension_class);\n\
    \    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_class = extension_class;\n    }\n\
    \  }\n  return max_extension_class;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase();\n        let sm = extension.charAt(0).toLowerCase();\n\
    \        let strength = cap.length - sm.length;\n        if (cap < sm) {\n   \
    \         strength = -1;\n        }\n        if (strength > strongest_extension.length)\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n", "    let cap_exts = extensions.map(e\
    \ => e.toUpperCase()).sort((a, b) => b.length - a.length);\n    let sm_exts =\
    \ extensions.map(e => e.toLowerCase()).sort((a, b) => a.length - b.length);\n\
    \    let strength = cap_exts.length - sm_exts.length;\n    if (strength > 0) {\n\
    \        return `${class_name}.${cap_exts[0]}`;\n    } else if (strength < 0)\
    \ {\n        return `${class_name}.${sm_exts[0]}`;\n    } else {\n        return\
    \ class_name;\n    }\n}\n", "  let cap = class_name.split('').map(c => c.toUpperCase()).join('');\n\
    \  let sm = class_name.split('').map(c => c.toLowerCase()).join('');\n  let cap_num\
    \ = cap.length - 1;\n  let sm_num = sm.length - 1;\n  let strength = cap_num -\
    \ sm_num;\n  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let ext_cap = extensions[i].split('').map(c => c.toUpperCase()).join('');\n\
    \    let ext_sm = extensions[i].split('').map(c => c.toLowerCase()).join('');\n\
    \    let ext_cap_num = ext_cap.length - 1;\n    let ext_sm_num = ext_sm.length\
    \ - 1;\n    let ext_strength = ext_cap_num - ext_sm_num;\n    if (ext_strength\
    \ > strength) {\n      strongest_extension = extensions[i];\n      strength =\
    \ ext_strength;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n", "  let max_extension_strength: number = -1;\n  let max_extension_class:\
    \ string = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    let\
    \ extension_class: string = extensions[i];\n    let extension_strength: number\
    \ = extension_class.split(\"\").reduce((a, b) => a + b.charCodeAt(0) - b.charCodeAt(b.length\
    \ - 1), 0);\n    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_class = extension_class;\n    }\n\
    \  }\n  return max_extension_class + \".\" + max_extension_strength;\n}\n", " \
    \ let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
    \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
    \ - sm.length;\n    if (strength > strongest_extension.length) {\n      strongest_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension = extensions[i];\n    \
    \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "    let strongest_extension:\
    \ number = -1;\n    let strongest_extension_name: string =\n        extensions[0];\
    \ // The first extension is the strongest extension.\n    for (let i = 1; i <\
    \ extensions.length; i++) {\n        let extension: number = extensions[i].toUpperCase().charCodeAt(0)\
    \ - 65;\n        if (extension > strongest_extension) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_name = extensions[i];\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension_name;\n}\n",
  "  let max_extension_strength = -1;\n  let max_extension_name = \"\";\n  for (let\
    \ i = 0; i < extensions.length; i++) {\n    let extension_name = extensions[i];\n\
    \    let extension_strength = class_name.split(extension_name)[1];\n    if (extension_strength\
    \ > max_extension_strength) {\n      max_extension_strength = extension_strength;\n\
    \      max_extension_name = extension_name;\n    }\n  }\n  return class_name +\
    \ \".\" + max_extension_name;\n}\n", "    let strongest_extension: string = class_name;\n\
    \    let strongest_extension_strength: number = -1;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return strongest_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - extension_strength(extension);\n\
    \        if (extension_strength > strongest_extension.length) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length) {\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "  let max_extension_strength = -1;\n\
    \  let max_extension_name = \"\";\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension_name = extensions[i];\n    let extension_strength = class_name.split(extension_name).length\
    \ - 1;\n    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
    \ = extension_strength;\n      max_extension_name = extension_name;\n    }\n \
    \ }\n  return class_name + \".\" + max_extension_name;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length) {\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - strongest_extension.length;\n        if (extension_strength\
    \ > 0) {\n            strongest_extension = extension;\n        }\n    }\n   \
    \ return class_name + \".\" + strongest_extension;\n}\n", "    let strongest_extension:\
    \ string = \"\";\n    let max_extension_strength: number = -1;\n    for (let extension\
    \ of extensions) {\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_extension_strength)\
    \ {\n            max_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension: number = 0;\n    let strongest_extension_index:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - strongest_extension_index;\n\
    \        if (extension_strength > 0) {\n            strongest_extension = extension_strength;\n\
    \            strongest_extension_index = i;\n        }\n    }\n    return `${class_name}.${extensions[strongest_extension_index]}`;\n\
    }\n", "\tlet strongest_extension: number = 0;\n\tlet strongest_extension_str:\
    \ string = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_str = extension.charAt(0).toUpperCase()\
    \ + extension.slice(1);\n\t\tlet extension_strength = extension_str.length - extension_str.toLowerCase().length;\n\
    \t\tif (extension_strength > strongest_extension) {\n\t\t\tstrongest_extension\
    \ = extension_strength;\n\t\t\tstrongest_extension_str = extension_str;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension_str;\n}\n", "    let\
    \ strongest_extension: number = 0;\n    let strongest_extension_str: string =\
    \ \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extension_str:\
    \ string = extensions[i];\n        let extension_str_length: number = extension_str.length;\n\
    \        let extension_str_upper: number = extension_str_length - 1;\n       \
    \ let extension_str_lower: number = extension_str_length - 2;\n        let extension_str_first_upper:\
    \ number = extension_str_upper - 1;\n        let extension_str_first_lower: number\
    \ = extension_str_lower - 1;\n        let extension_str_first_first_upper: number\
    \ = extension_str_first_upper - 1;\n        let extension_str_first_first_lower:\
    \ number = extension_str_first_lower - 1;\n        let extension_str_first_first_first_upper:\
    \ number = extension_str_first_first_upper - 1;\n        let extension_str_first_first_first_lower:\
    \ number = extension_str_first_first_lower - 1;\n        let extension_str_first_first_first_first_upper:\
    \ number = extension_str_first_first_first_upper - 1;\n        let extension_str_first_first_first_first_lower:\
    \ number = extension_str_first_first_first_lower - 1;\n        let extension_str_first_first_first_first_first_upper:\
    \ number = extension_str_first_first_first_first_upper - 1;\n        let extension_str_first_first_first_first_first_lower:\
    \ number = extension_str_first_first_first_first_lower - 1;\n        let extension_str_first_first_first_first_first_first_upper:\
    \ number = extension_str_first_first_first_first_first_upper - 1;\n        let\
    \ extension_str_first_first_first_first_first_first_lower: number = extension_str_first_first_first_first_first_lower\
    \ - 1;\n        let extension_str_first_first_first_first_first_first_first_upper:\
    \ number = extension_str_first_first_first_first_first_first_first_upper - 1;\n\
    \        let extension_str_first_first_first_first_first_first_first_lower: number\
    \ = extension_str_first_first_first_first_first_first_first_lower - 1;\n     \
    \   let extension_str_first_first_first_first_first_first_first_first_upper: number\
    \ = extension_str_first_first_first_first_first_first_first_first_first_upper\
    \ - 1;\n        let extension_str_first_first_first_first_first_first_first_first_lower:\
    \ number = extension_str_first_first_first_first_first_first_first_first_first_lower\
    \ - 1;\n        let extension_str_first_first_first_first_first_first_first_first_first_upper:\
    \ number = extension_str_first_first_first_first_first_first_first_first_first_first_upper\
    \ - 1;\n        let extension_str_first_first_first_first_first_first_first_first_first_lower:\
    \ number = extension_str_first_first_first_first_first_first_first_first_first_first_lower\
    \ - 1;\n        let extension_str_first_first_first_first_first_first_first_first_first_first_upper: ",
  "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length) {\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let extension_strength: number[]\
    \ = [];\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_letters = extension.length;\n      \
    \  let extension_lowercase_letters = extension_letters - extension_letters.toUpperCase().length;\n\
    \        let extension_strength_fraction = extension_lowercase_letters / extension_letters;\n\
    \        extension_strength.push(extension_strength_fraction);\n    }\n    let\
    \ max_strength = extension_strength.indexOf(Math.max(...extension_strength));\n\
    \    return class_name + extensions[max_strength];\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - extension.match(/[a-z]/).length;\n\
    \        if (extension_strength > strongest_extension.length) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n\
    }\n", "    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = -1;\n    let extensions_length = extensions.length;\n    for (let i\
    \ = 0; i < extensions_length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - CAP_SM_LENGTH;\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_length\
    \ = extension.length;\n        let extension_strength = extension_length - extension_strength(extension);\n\
    \        if (extension_strength > strongest_extension.length) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "  let strongest_extension: string = extensions[0];\n  for (let i = 1; i\
    \ < extensions.length; i++) {\n    let extension = extensions[i];\n    let cap\
    \ = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
    \    let strength = cap.length - sm.length;\n    if (strength > strongest_extension.length)\
    \ strongest_extension = extension;\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension = extensions[i];\n    \
    \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "    let max_strength\
    \ = -1;\n    let max_extension = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > max_strength) {\n            max_strength = extension_strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "    let max_strength = -1;\n    let max_extension\
    \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let strength = extension.match(/[A-Z]/g).length -\
    \ extension.match(/[a-z]/g).length;\n        if (strength > max_strength) {\n\
    \            max_strength = strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + max_extension;\n}\n", "   \
    \ let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n", "\t\
    let strongest_extension: number = -1;\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension: number = extensions[i].toUpperCase().charCodeAt(0)\
    \ - 65;\n\t\tlet class_name_length: number = class_name.length;\n\t\tlet extension_length:\
    \ number = extension.length;\n\t\tlet strength: number = class_name_length - extension_length;\n\
    \t\tif (strength > strongest_extension) {\n\t\t\tstrongest_extension = strength;\n\
    \t\t}\n\t}\n\treturn class_name + extensions[strongest_extension];\n}\n", "  let\
    \ strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
    \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
    \    if (strength > 0) {\n      strongest_extension = extension;\n    }\n  }\n\
    \  return class_name + \".\" + strongest_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length)\n         \
    \   strongest_extension = extension;\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension: number = -1;\n\tlet strongest_extension_name:\
    \ string = \"\";\n\tlet extension_counter: number = 0;\n\tfor (let i = 0; i <\
    \ extensions.length; i++) {\n\t\textension_counter = 0;\n\t\tfor (let j = 0; j\
    \ < class_name.length; j++) {\n\t\t\tif (class_name[j].toUpperCase() === extensions[i].toUpperCase())\
    \ {\n\t\t\t\textension_counter++;\n\t\t\t}\n\t\t}\n\t\tif (extension_counter >\
    \ strongest_extension) {\n\t\t\tstrongest_extension = extension_counter;\n\t\t\
    \tstrongest_extension_name = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension_name;\n}\n", "    let strongest_extension: number\
    \ = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_length_lowercase: number = extension_str_length - (extension_str_length\
    \ - 1);\n        let extension_str_length_uppercase: number = extension_str_length\
    \ - 1;\n        let extension_str_length_length_lowercase: number = extension_str_length_lowercase\
    \ - (extension_str_length_lowercase - 1);\n        let extension_str_length_length_uppercase:\
    \ number = extension_str_length_uppercase - (extension_str_length_uppercase -\
    \ 1);\n        let extension_str_length_length_length_lowercase: number = extension_str_length_length_lowercase\
    \ - (extension_str_length_length_lowercase - 1);\n        let extension_str_length_length_length_uppercase:\
    \ number = extension_str_length_length_uppercase - (extension_str_length_length_uppercase\
    \ - 1);\n        let extension_str_length_length_length_length_lowercase: number\
    \ = extension_str_length_length_length_lowercase - (extension_str_length_length_length_lowercase\
    \ - 1);\n        let extension_str_length_length_length_length_uppercase: number\
    \ = extension_str_length_length_length_uppercase - (extension_str_length_length_length_uppercase\
    \ - 1);\n        let extension_str_length_length_length_length_lowercase: number\
    \ = extension_str_length_length_length_lowercase - (extension_str_length_length_length_lowercase\
    \ - 1);\n        let extension_str_length_length_length_length_uppercase: number\
    \ = extension_str_length_length_length_uppercase - (extension_str_length_length_length_uppercase\
    \ - 1);\n        let extension_str_length_length_length_length_length_lowercase:\
    \ number = extension_str_length_length_length_length_lowercase - (extension_str_length_length_length_length_lowercase\
    \ - 1);\n        let extension_str_length_length_length_length_length_uppercase:\
    \ number = extension_str_length_length_length_length_uppercase - (extension_str_length_length_length_length_uppercase\
    \ - 1);\n        let extension_str_length_length_length_length_length_lowercase:\
    \ number = extension_str_length_length_length_length_lowercase - (extension_str_length_length_length_length_lowercase\
    \ - 1);\n        let extension_str_length_length_length_length_length_uppercase:\
    \ number = extension_str_length_length_length_length_uppercase - (extension_str_length_length_length_length_uppercase\
    \ - 1);\n        let extension_str_length_length_length_length_length_length_lowercase:\
    \ number = extension_str_length_length_length_length_length_lowercase - (extension_str_length_length_length_length_length_lowercase\
    \ - 1);\n        let extension_str_length_length_length_length_length_length_uppercase:\
    \ number = extension_str_length_length_length_length_length_uppercase - (extension_str_length_length_length_",
  "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length) {\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let strongest_extension: number =\
    \ extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n        let\
    \ extension: number = extensions[i];\n        let cap: number = extension[0].toUpperCase().charCodeAt(0);\n\
    \        let sm: number = extension[0].toLowerCase().charCodeAt(0);\n        let\
    \ strength: number = cap - sm;\n        if (strength > strongest_extension) {\n\
    \            strongest_extension = strength;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - extension_strength(extension);\n\t\tif (extension_strength > strongest_extension.length)\
    \ {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    let strongest_extension: number = -1;\n\
    \    let strongest_extension_name: string = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_letters: number = extensions[i].length;\n    \
    \    let extension_letters_cap: number = extension_letters.toUpperCase().length;\n\
    \        let extension_letters_sm: number = extension_letters.toLowerCase();\n\
    \        let extension_strength: number = extension_letters_cap - extension_letters_sm;\n\
    \        if (extension_strength > strongest_extension) {\n            strongest_extension\
    \ = extension_strength;\n            strongest_extension_name = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension_name;\n\
    }\n", "\tlet strongest_extension: string = \"\";\n\tlet strongest_extension_strength:\
    \ number = -1;\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength)\
    \ {\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "\tlet max_strength\
    \ = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name\
    \ + extension;\n\t\tlet strength = Extension_Strength(class_name);\n\t\tif (strength\
    \ > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension = extension;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n", "  let max_strength\
    \ = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - CAP_SM_LENGTH;\n    if (extension_strength\
    \ > max_strength) {\n      max_strength = extension_strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n}\n",
  "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_length\
    \ = extension.length;\n        let extension_strength = extension_length - strongest_extension.length;\n\
    \        if (extension_strength > 0) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let strongest_extension: number = -1;\n    let strongest_extension_str: string\
    \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extension:\
    \ number = extensions[i].charCodeAt(0) - 65;\n        if (extension > strongest_extension)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_str\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "\tlet max_strength\
    \ = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (strength > max_strength) {\n\t\t\
    \tmax_strength = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + max_extension;\n}\n", "  let strongest_extension: string\
    \ = class_name;\n  let strongest_extension_strength: number = -1;\n  for (let\
    \ i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n \
    \   let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
    \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n\
    \  return strongest_extension;\n}\n", "  let cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/)).length;\n  let sm_extensions = extensions.filter(e => e.match(/[a-z]/)).length;\n\
    \  let strength = cap_extensions - sm_extensions;\n  return class_name + extensions.find(e\
    \ => e.match(/[A-Z]/)).replace(/[A-Z]/g, \"\") + extensions.find(e => e.match(/[a-z]/)).replace(/[a-z]/g,\
    \ \"\") + `.${strength}`;\n}\n", "    let max_strength = -1;\n    let max_extension\
    \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n", "\tlet strongest_extension: string = extensions[0];\n\tfor (let i = 1; i\
    \ < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\tlet cap\
    \ = extension.charAt(0).toUpperCase();\n\t\tlet sm = extension.charAt(0).toLowerCase();\n\
    \t\tlet strength = cap - sm;\n\t\tif (strength > 0) {\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
    \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
    \    if (strength > 0) {\n      strongest_extension = extension;\n    }\n  }\n\
    \  return `${class_name}.${strongest_extension}`;\n}\n", "    let strongest_extension:\
    \ number = 0;\n    let strongest_extension_str: string;\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let extension = extensions[i];\n      \
    \  let extension_str: string = extension.charAt(0).toUpperCase() + extension.slice(1);\n\
    \        let extension_strength = extension_str.length - extension_str.toLowerCase().length;\n\
    \        if (extension_strength > strongest_extension) {\n            strongest_extension\
    \ = extension_strength;\n            strongest_extension_str = extension_str;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let strength\
    \ = class_name.split(extension).length - 1;\n    if (strength > max_strength)\
    \ {\n      max_strength = strength;\n      max_extension = extension;\n    }\n\
    \  }\n  return `${class_name}.${max_extension}`;\n}\n", "    let strongest_extension:\
    \ number = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i\
    \ = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_str: string = extension.charAt(0).toUpperCase() + extension.slice(1);\n\
    \        let extension_strength = extension_str.length - extension_str.toLowerCase().length;\n\
    \        if (extension_strength > strongest_extension) {\n            strongest_extension\
    \ = extension_strength;\n            strongest_extension_str = extension_str;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
    \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
    \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n", "    let max_strength\
    \ = -1\n    let max_extension = \"\"\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i]\n        let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length\n        if (strength > max_strength) {\n\
    \            max_strength = strength\n            max_extension = extension\n\
    \        }\n    }\n    return class_name + \".\" + max_extension\n}\n", "\tlet\
    \ max_strength = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength)\
    \ {\n\t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n", "  let strongest_extension\
    \ = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    const\
    \ extension = extensions[i];\n    const extension_length = extension.length;\n\
    \    const extension_strength = extension_length - strongest_extension.length;\n\
    \    if (extension_strength > 0) {\n      strongest_extension = extension;\n \
    \   }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "    let strongest_extension:\
    \ string = extensions[0];\n    let strongest_extension_strength: number = -1;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
    \ - sm.length;\n        if (strength > strongest_extension.length) {\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let strongest_extension: number =\
    \ 0;\n    let strongest_extension_str: string = \"\";\n    for (let i = 0; i <\
    \ extensions.length; i++) {\n        let extension = extensions[i];\n        let\
    \ extension_length = extension.length;\n        let extension_strength = extension_length\
    \ - strongest_extension;\n        if (extension_strength > 0) {\n            strongest_extension\
    \ = extension_strength;\n            strongest_extension_str = extension;\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension_str;\n}\n",
  "\tlet strongest_extension: number = -1;\n\tlet strongest_extension_str: string;\n\
    \tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension_str: string\
    \ = extensions[i];\n\t\tlet extension_str_length: number = extension_str.length;\n\
    \t\tlet extension_str_length_lowercase: number = extension_str_length.toLowerCase();\n\
    \t\tlet extension_str_length_uppercase: number = extension_str_length.toUpperCase();\n\
    \t\tlet extension_str_length_length_difference: number = extension_str_length_lowercase\
    \ - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference2:\
    \ number = extension_str_length - extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference3:\
    \ number = extension_str_length - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference4:\
    \ number = extension_str_length - extension_str_length;\n\t\tlet extension_str_length_length_difference5:\
    \ number = extension_str_length - extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference6:\
    \ number = extension_str_length - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference7:\
    \ number = extension_str_length - extension_str_length;\n\t\tlet extension_str_length_length_difference8:\
    \ number = extension_str_length - extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference9:\
    \ number = extension_str_length - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference10:\
    \ number = extension_str_length - extension_str_length;\n\t\tlet extension_str_length_length_difference11:\
    \ number = extension_str_length - extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference12:\
    \ number = extension_str_length - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference13:\
    \ number = extension_str_length - extension_str_length;\n\t\tlet extension_str_length_length_difference14:\
    \ number = extension_str_length - extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference15:\
    \ number = extension_str_length - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference16:\
    \ number = extension_str_length - extension_str_length;\n\t\tlet extension_str_length_length_difference17:\
    \ number = extension_str_length - extension_str_length_lowercase;\n\t\tlet extension_str_length_length_difference18:\
    \ number = extension_str_length - extension_str_length_uppercase;\n\t\tlet extension_str_length_length_difference19:\
    \ number = extension_str_length - extension_str_length;\n\t\tlet extension_str_length_length_difference20:\
    \ number = extension_str_length - extension_str_length_lowercase;\n\t\tlet extension_str_",
  "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_length = extension.length;\n\
    \t\tlet extension_strength = extension_length - extension_strength_count(extension);\n\
    \t\tif (extension_strength > strongest_extension.length) {\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "  let max_strength = -1\n  let max_extension = \"\"\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i]\n    let class_name\
    \ = class_name + extension\n    let class_name_lower = class_name.toLowerCase()\n\
    \    let class_name_upper = class_name.toUpperCase()\n    let class_name_length\
    \ = class_name.length\n    let extension_length = extension.length\n    let extension_upper\
    \ = extension.toUpperCase()\n    let extension_lower = extension.toLowerCase()\n\
    \    let extension_strength = extension_length - extension_upper.length - extension_lower.length\n\
    \    let extension_strength_abs = Math.abs(extension_strength)\n    if (extension_strength_abs\
    \ > max_strength) {\n      max_strength = extension_strength_abs\n      max_extension\
    \ = extension\n    }\n  }\n  return class_name + max_extension\n}\n", "    let\
    \ max_strength = -1\n    let max_extension = \"\"\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i]\n        let class_name = class_name\
    \ + extension\n        let class_name_lower = class_name.toLowerCase()\n     \
    \   let class_name_upper = class_name.toUpperCase()\n        let class_name_length\
    \ = class_name.length\n        let extension_length = extension.length\n     \
    \   let class_name_uppercase_length = class_name_upper.length\n        let class_name_lowercase_length\
    \ = class_name_lower.length\n        let extension_uppercase_length = extension_length\n\
    \        let extension_lowercase_length = extension_length\n        if (class_name_length\
    \ < extension_length) {\n            class_name_length = extension_length\n  \
    \      }\n        if (class_name_uppercase_length < extension_uppercase_length)\
    \ {\n            class_name_uppercase_length = extension_uppercase_length\n  \
    \      }\n        if (class_name_lowercase_length < extension_lowercase_length)\
    \ {\n            class_name_lowercase_length = extension_lowercase_length\n  \
    \      }\n        if (class_name_length < extension_lowercase_length) {\n    \
    \        class_name_length = extension_lowercase_length\n        }\n        let\
    \ class_name_strength = class_name_length - class_name_uppercase_length - class_name_lowercase_length\n\
    \        if (class_name_strength > max_strength) {\n            max_strength =\
    \ class_name_strength\n            max_extension = extension\n        }\n    }\n\
    \    return class_name + max_extension\n}\n", "  let extensions_count = extensions.length;\n\
    \  let extensions_count_cap = extensions_count.toUpperCase().length;\n  let extensions_count_sm\
    \ = extensions_count.toLowerCase().length;\n  let extensions_count_cap_sm = extensions_count_cap\
    \ - extensions_count_sm;\n  let extensions_count_cap_sm_max = extensions_count_cap_sm\
    \ > 0 ? extensions_count_cap_sm : 1;\n  let extensions_count_cap_sm_min = extensions_count_cap_sm\
    \ > 0 ? extensions_count_cap_sm - 1 : -1;\n  let extensions_count_cap_sm_max_min\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max =\
    \ extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max_min\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max_min_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max_min_max_min\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max_min_max_min_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max_min_max_min_max_min\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max_min_max_min_max_min_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n  let extensions_count_cap_sm_max_min_max_min_max_min_max_min_max_min\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_s", "    let max_strength = -1;\n    let max_extension\
    \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > max_strength)\
    \ {\n            max_strength = extension_strength;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n", "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "  let max_strength = -1\n  let max_extension\
    \ = \"\"\n  for (let i = 0; i < extensions.length; i++) {\n    let extension =\
    \ extensions[i]\n    let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length\n\
    \    if (strength > max_strength) {\n      max_strength = strength\n      max_extension\
    \ = extension\n    }\n  }\n  return class_name + \".\" + max_extension\n}\n",
  "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for (let i = 1; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \ if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "  let extension_strengths: number[] = [];\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    extension_strengths.push(extension_strength);\n\
    \  }\n  let max_strength = Math.max.apply(null, extension_strengths);\n  let max_index\
    \ = extension_strengths.indexOf(max_strength);\n  return class_name + extensions[max_index];\n\
    }\n", "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n\
    }\n", "    let strongest_extension: number = -1;\n    let strongest_extension_str:\
    \ string = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_str: string = extensions[i];\n        let extension_str_length: number\
    \ = extension_str.length;\n        let extension_str_length_upper: number = extension_str_length;\n\
    \        let extension_str_length_lower: number = extension_str_length;\n    \
    \    for (let j = 0; j < extension_str.length; j++) {\n            if (extension_str[j]\
    \ === extension_str[j].toUpperCase()) {\n                extension_str_length_upper++;\n\
    \            }\n            if (extension_str[j] === extension_str[j].toLowerCase())\
    \ {\n                extension_str_length_lower++;\n            }\n        }\n\
    \        let extension_str_length_average: number = extension_str_length_upper\
    \ + extension_str_length_lower;\n        let extension_str_length_difference:\
    \ number = extension_str_length_average - extension_str_length;\n        if (extension_str_length_difference\
    \ > strongest_extension) {\n            strongest_extension = extension_str_length_difference;\n\
    \            strongest_extension_str = extension_str;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension_str;\n}\n", "\tlet max_strength = -1;\n\
    \tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length; i++) {\n\
    \t\tlet extension = extensions[i];\n\t\tlet class_name = class_name + extension;\n\
    \t\tlet strength = Extension_Strength(class_name);\n\t\tif (strength > max_strength)\
    \ {\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\
    \t}\n\treturn class_name + \".\" + max_extension;\n}\n", "    let max_strength\
    \ = -1;\n    let max_extension = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_length\
    \ = extension.length;\n        let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
    \        if (extension_strength > max_strength) {\n            max_strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    return class_name + \".\" + max_extension;\n}\n", "    let max_strength\
    \ = -1;\n    let max_extension = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let strength = class_name.split(extension).length\
    \ - 1;\n        if (strength > max_strength) {\n            max_extension = extension;\n\
    \            max_strength = strength;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "  let max_strength = -1;\n  let max_extension\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
    \ = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength\
    \ = extension_length - CAP_TO_STRONG[extension.charAt(0)] - SM_TO_STRONG[extension.charAt(extension_length\
    \ - 1)];\n    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0;\
    \ i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \ if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - extension_strength_count(extension);\n\
    \    if (extension_strength > strongest_extension.length) strongest_extension\
    \ = extension;\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", " \
    \   let max_strength = -1;\n    let max_extension = \"\";\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        let extension = extensions[i];\n    \
    \    let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n        if (extension_strength\
    \ > max_strength) {\n            max_strength = extension_strength;\n        \
    \    max_extension = extension;\n        }\n    }\n    return class_name + \"\
    .\" + max_extension;\n}\n", "  let max_strength = -1;\n  let max_extension = \"\
    \";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
    \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
    \      max_extension = extension;\n    }\n  }\n  return class_name + \".\" + max_extension;\n\
    }\n", "  let extension_strength: number[] = [];\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_letters = extension.length;\n\
    \    let extension_lowercase_letters = extension_letters - extension_letters.toUpperCase().length;\n\
    \    extension_strength[i] = extension_letters - extension_lowercase_letters;\n\
    \  }\n  let max_strength = extension_strength.indexOf(Math.max(...extension_strength));\n\
    \  return class_name + extensions[max_strength];\n}\n", "    let strongest_extension:\
    \ number = 0;\n    let strongest_extension_str: string = \"\";\n    for (let i\
    \ = 0; i < extensions.length; i++) {\n        let extension_str: string = extensions[i];\n\
    \        let extension_str_length: number = extension_str.length;\n        let\
    \ extension_str_upper: number = extension_str.toUpperCase().length;\n        let\
    \ extension_str_lower: number = extension_str.toLowerCase().length;\n        let\
    \ extension_str_length_ratio: number = extension_str_upper - extension_str_lower;\n\
    \        let extension_str_strength: number = extension_str_length_ratio * CAP\
    \ - extension_str_lower;\n        if (extension_str_strength > strongest_extension)\
    \ {\n            strongest_extension = extension_str_strength;\n            strongest_extension_str\
    \ = extension_str;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
    }\n", "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
    \    let extension_strength = extension_length - extension_strength;\n    if (extension_strength\
    \ > strongest_extension.length) {\n      strongest_extension = extension;\n  \
    \  }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "\tlet max_strength\
    \ = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name\
    \ + extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\t\tlet\
    \ class_name_upper = class_name.toUpperCase();\n\t\tlet class_name_length = class_name.length;\n\
    \t\tlet extension_length = extension.length;\n\t\tlet strength = class_name_length\
    \ - extension_length;\n\t\tif (strength > max_strength) {\n\t\t\tmax_strength\
    \ = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + max_extension;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
