name: HumanEval_48_is_palindrome
language: ts
prompt: "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
  \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n\
  // true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text:\
  \ string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
  aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
  xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
  xywzx\"),false);\n}\n\ntest();"
completions: ["    if (text === \"\") {\n        return true;\n    }\n\n    let reversedText\
    \ = \"\";\n    for (let i = 0; i < text.length; i++) {\n        reversedText +=\
    \ text[i];\n    }\n\n    return text === reversedText;\n}\n", "  return text ===\
    \ text.toLowerCase().split('').reverse().join('');\n}\n", "    return text ===\
    \ text.toLowerCase().split('').reverse().join('');\n}\n", "    if (text === \"\
    \") {\n        return true;\n    }\n    if (text === text.toLowerCase()) {\n \
    \       return is_palindrome(text.toLowerCase());\n    }\n    let reversed = \"\
    \";\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed += text[i];\n\
    \    }\n    return reversed === text;\n}\n", "  let reversed = text\n    .toLowerCase()\n\
    \    .split(\"\")\n    .reverse()\n    .join(\"\");\n\n  return text === reversed;\n\
    }\n", "    return text === text.toLowerCase().split('').reverse().join('');\n\
    }\n", "  return text === text.toLowerCase().split('').reverse().join('');\n}\n",
  "  let reversed = text;\n  reversed = reversed.split(\"\").reverse().join(\"\");\n\
    \  return text === reversed;\n}\n", "    return text === get_reversed_string(text);\n\
    }\n", "    if (text === \"\") {\n        return true;\n    }\n    const reversed\
    \ = text.split(\"\").reverse().join(\"\");\n    return text === reversed;\n}\n",
  "    if (text === \"\") {\n        return true;\n    }\n    const reversed = text\n\
    \        .toLowerCase()\n        .replace(/[^a-z]/g, \"\")\n        .replace(/^\\\
    W+|\\W+$/g, \"\")\n        .replace(/^\\s+|\\s+$/g, \"\");\n    return text ===\
    \ reversed;\n}\n", "  return text === text.toLowerCase().split('').reverse().join('');\n\
    }\n", "  return text === text.toLowerCase().split('').reverse().join('');\n}\n",
  "  return text === text.toLowerCase().split('').reverse().join('');\n}\n", "  return\
    \ text === text.toLowerCase().split('').reverse().join('');\n}\n", "    return\
    \ text === text.toLowerCase().split('').reverse().join('');\n}\n", "    if (text\
    \ === \"\") {\n        return true;\n    }\n    if (text === text.toLowerCase())\
    \ {\n        return is_palindrome(text.toLowerCase());\n    }\n    const chars\
    \ = text.split('');\n    const reversed = chars.reverse();\n    return chars.toString()\
    \ === reversed.toString();\n}\n", "  return text === text.toLowerCase().split('').reverse().join('');\n\
    }\n", "    return text === text.toLowerCase().split('').reverse().join('');\n\
    }\n", "  return text === get_reversed_string(text);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
