name: HumanEval_40_triples_sum_to_zero
language: ts
prompt: "//triples_sum_to_zero takes an array of integers as an input.\n// it returns\
  \ true if there are three distinct elements in the array that\n// sum to zero, and\
  \ false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n\
  // false\nfunction triples_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = triples_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1,\
  \ 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3,\
  \ 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\
  \ntest();"
completions: ["  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if\
    \ (l.length < 3) {\n    return false;\n  }\n  const [a, b, c] = l;\n  return a\
    \ + b + c === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if\
    \ (l.length < 3) {\n    return false;\n  }\n  const n = l.length;\n  const m =\
    \ l.reduce((acc, x) => acc + x, 0);\n  const d = m - n;\n  if (d > 0) {\n    return\
    \ false;\n  }\n  const sums = l.map((x, i) => x === l[n - i] ? 1 : 0);\n  return\
    \ sums.reduce((acc, x) => acc + x, 0) === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  let triples = l.filter((el) => el > 0);\n  let triples_sum_to_zero = triples.filter((el)\
    \ => el === sum).length === 3;\n  return triples_sum_to_zero;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum\
    \ < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  let sum =\
    \ 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n \
    \ }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n\
    \    return false;\n  }\n  const [a, b, c] = l;\n  return a + b + c === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n \
    \ }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n \
    \ return true;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  const\
    \ set = new Set<number>();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i]\
    \ + l[i + 1] + l[i + 2])) {\n      return false;\n    }\n    set.add(l[i] + l[i\
    \ + 1] + l[i + 2]);\n  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i\
    \ = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  let triple = false;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] !=\
    \ 0) {\n      if (sum - l[i] != 0) {\n        triple = true;\n        break;\n\
    \      }\n    }\n  }\n  return triple;\n}\n", "  let sum = 0;\n  for (let i =\
    \ 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", " \
    \ const n = l.length;\n  if (n < 3) {\n    return false;\n  }\n  const sum = 0;\n\
    \  for (let i = 0; i < n; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length <\
    \ 3) {\n    return false;\n  }\n  const arr = [...l];\n  const n = arr.length;\n\
    \  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += arr[i];\n  }\n\
    \  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n    \
    \  if (arr[i] + arr[j] === sum) {\n        return true;\n      }\n    }\n  }\n\
    \  return false;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length <\
    \ 3) {\n    return false;\n  }\n  const set = new Set();\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (set.has(l[i] + l[i + 1] + l[i + 2])) {\n      return\
    \ false;\n    }\n    set.add(l[i] + l[i + 1] + l[i + 2]);\n  }\n  return true;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  let triple =\
    \ false;\n  for (let i = 0; i < l.length; i++) {\n    if (sum - l[i] === 0) {\n\
    \      triple = true;\n      break;\n    }\n  }\n  return triple;\n}\n", "  const\
    \ n = l.length;\n  if (n < 3) {\n    return false;\n  }\n  let sum = 0;\n  for\
    \ (let i = 0; i < n; i++) {\n    sum += l[i];\n  }\n  const zeros = n - 1;\n \
    \ return sum === 0 || sum === -zero || sum === zero - zeros;\n}\n", "  if (l.length\
    \ < 3) {\n    return false;\n  }\n  const set = new Set<number>();\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (set.has(l[i] + l[i + 1] + l[i + 2])) {\n\
    \      return false;\n    }\n    set.add(l[i] + l[i + 1] + l[i + 2]);\n  }\n \
    \ return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n \
    \ }\n  const zero = l.filter(x => x === 0);\n  if (zero.length < 3) {\n    return\
    \ false;\n  }\n  const zeros = zero.map(x => Math.abs(x));\n  const threes = zero.filter(x\
    \ => x === 3);\n  return threes.every(x => zeros.includes(x));\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n \
    \ const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(Math.abs(l[i])))\
    \ {\n      return false;\n    }\n    set.add(Math.abs(l[i]));\n  }\n  return true;\n\
    }\n", "  const n = l.length;\n  if (n < 3) {\n    return false;\n  }\n  const\
    \ sum = 0;\n  for (let i = 0; i < n; ++i) {\n    sum += l[i];\n  }\n  const zeros\
    \ = n - 1;\n  const zeroSum = sum - l[n - 1];\n  return zeros === zeroSum;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length <\
    \ 3) {\n    return false;\n  }\n  const set = new Set();\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (set.has(Math.abs(l[i] - 0))) {\n      return false;\n\
    \    }\n    set.add(Math.abs(l[i]));\n  }\n  return true;\n}\n", "  if (l.length\
    \ < 3) {\n    return false;\n  }\n  const [a, b, c] = l;\n  return a + b + c ===\
    \ 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  let sum = 0;\n \
    \ for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i =\
    \ 0; i < l.length; i++) {\n    if (sum < 0) {\n      return false;\n    }\n  \
    \  sum -= l[i];\n  }\n  return true;\n}\n", "  if (l.length < 3) {\n    return\
    \ false;\n  }\n  const set = new Set();\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (set.has(l[i] - l[i - 1])) {\n      return false;\n    }\n    set.add(l[i]);\n\
    \  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n \
    \ }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  let triples = l.filter((x, i) => i % 3 === 0);\n  let triples_sum = triples.reduce((a,\
    \ b) => a + b, 0);\n  return triples_sum === 0 && sum === 0;\n}\n", "  if (l.length\
    \ < 3) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  let triples = l.filter((x) => x % 3 === 0);\n\
    \  let triples_sum_to_zero = triples.every((x) => x === 0);\n  return triples_sum_to_zero;\n\
    }\n", "  const n = l.length;\n  if (n < 3) {\n    return false;\n  }\n  const\
    \ sum = 0;\n  for (let i = 0; i < n; ++i) {\n    sum += l[i];\n  }\n  return sum\
    \ === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum\
    \ += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0;\
    \ i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum\
    \ < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length\
    \ < 3) {\n    return false;\n  }\n  const zeros = l.filter((x) => x === 0);\n\
    \  if (zeros.length < 3) {\n    return false;\n  }\n  const positives = l.filter((x)\
    \ => x > 0);\n  const negatives = l.filter((x) => x < 0);\n  return positives.every((x)\
    \ => negatives.every((y) => x + y === 0));\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length <\
    \ 3) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    if\
    \ (sum - l[i] !== 0) {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if\
    \ (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n \
    \ return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  if (l.length < 3) {\n    return false;\n  }\n  const set = new Set();\n  for\
    \ (let i = 0; i < l.length; i++) {\n    const val = l[i];\n    if (set.has(val))\
    \ {\n      return false;\n    }\n    set.add(val);\n  }\n  return true;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  const n = l.length;\n  if (n < 3) {\n    return false;\n  }\n  const\
    \ sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n  }\n  return sum\
    \ === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum\
    \ += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return\
    \ false;\n  }\n  const [a, b, c] = l;\n  return a === 0 && b === 0 && c === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n \
    \ let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0 && sum === l[i - 1])\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if (l.length <\
    \ 3) {\n    return false;\n  }\n  const set = new Set<number>();\n  for (let i\
    \ = 0; i < l.length; i++) {\n    if (set.has(l[i] - l[i - 1])) {\n      return\
    \ true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  let count =\
    \ 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) count++;\n \
    \ }\n  return count === 3;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  const n\
    \ = l.length;\n  const sum = 0;\n  for (let i = 0; i < n; ++i) {\n    sum += l[i];\n\
    \  }\n  for (let i = 0; i < n; ++i) {\n    for (let j = i + 1; j < n; ++j) {\n\
    \      if (Math.abs(l[i] - l[j]) === sum) {\n        return false;\n      }\n\
    \    }\n  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if\
    \ (l.length < 3) {\n    return false;\n  }\n  const n = l.length;\n  const sum\
    \ = 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n  }\n  const zeros\
    \ = n - l.filter(x => x === 0).length;\n  return sum === 0 && zeros === 3;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  let triple = false;\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (l[i] != 0) {\n      if (sum -\
    \ l[i] != 0) {\n        triple = true;\n        break;\n      }\n    }\n  }\n\
    \  return triple;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  const set = new\
    \ Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(Math.abs(l[i]\
    \ - 0))) {\n      return true;\n    }\n    set.add(Math.abs(l[i]));\n  }\n  return\
    \ false;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  const [a, b,\
    \ c] = l;\n  return a === 0 && b === 0 && c === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n \
    \ const [a, b, c] = l;\n  return a + b + c === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n \
    \ }\n  const set = new Set<number>();\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (set.has(l[i] - l[i - 1])) {\n      return false;\n    }\n    set.add(l[i]);\n\
    \  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n \
    \ }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n \
    \ return true;\n}\n", "  const n = l.length;\n  if (n < 3) {\n    return false;\n\
    \  }\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n  }\n\
    \  const zeros = n - 1;\n  return sum === 0 || sum === -zero || sum === zero &&\
    \ zeros % 2 === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  let triple = false;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (l[i] < 0) {\n      triple = true;\n      break;\n    }\n  }\n\
    \  return sum === 0 && triple;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  const n = l.length;\n\
    \  if (n < 3) {\n    return false;\n  }\n  const zeroes = new Set<number>();\n\
    \  for (let i = 0; i < n; ++i) {\n    const x = l[i];\n    if (x === 0) {\n  \
    \    return false;\n    }\n    if (zeroes.has(x)) {\n      return true;\n    }\n\
    \    zeroes.add(x);\n  }\n  return false;\n}\n", "  if (l.length < 3) {\n    return\
    \ false;\n  }\n  const arr: number[] = l.slice();\n  let sum = 0;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return arr.length\
    \ === 3 && sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n\
    \  const [a, b, c] = l;\n  return a === 0 && b === 0 && c === 0;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  const n = l.length;\n  if\
    \ (n < 3) {\n    return false;\n  }\n  const set = new Set();\n  for (let i =\
    \ 0; i < n; i++) {\n    const s = l[i];\n    if (s === 0) {\n      return false;\n\
    \    }\n    if (set.has(s - 1)) {\n      return true;\n    }\n    set.add(s);\n\
    \  }\n  return false;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n\
    \  }\n  const [a, b, c] = l;\n  return a + b + c === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if\
    \ (l.length < 3) {\n    return false;\n  }\n  const zeroes = new Set<number>();\n\
    \  for (let i = 0; i < l.length; i++) {\n    const current = l[i];\n    if (current\
    \ === 0) {\n      return false;\n    }\n    if (zeroes.has(current)) {\n     \
    \ return true;\n    }\n    zeroes.add(current);\n  }\n  return false;\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n \
    \ const [a, b, c] = l;\n  return a + b + c === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  if (l.length < 3) {\n    return false;\n  }\n  const set = new Set<number>();\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i] + l[i + 1] + l[i\
    \ + 2])) {\n      return false;\n    }\n    set.add(l[i] + l[i + 1] + l[i + 2]);\n\
    \  }\n  return true;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n \
    \ }\n  const [a, b, c] = l;\n  return a + b === c && b + c === 0;\n}\n", "  if\
    \ (l.length < 3) {\n    return false;\n  }\n  const set = new Set<number>();\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i] + l[i + 1] + l[i\
    \ + 2])) {\n      return false;\n    }\n    set.add(l[i] + l[i + 1] + l[i + 2]);\n\
    \  }\n  return true;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n \
    \ let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (sum - l[i] !== 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  const n = l.length;\n  if (n ===\
    \ 0) return false;\n  if (n === 1) return l[0] === 0;\n  const m = l.reduce((acc,\
    \ x) => acc + x, 0);\n  return m === 0;\n}\n", "  const n = l.length;\n  if (n\
    \ < 3) return false;\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    const\
    \ x = l[i];\n    if (x === 0) return false;\n    sum += x;\n  }\n  return sum\
    \ === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  const n = l.length;\n\
    \  const m = l.reduce((acc, x) => acc + x, 0);\n  if (m === 0) {\n    return false;\n\
    \  }\n  for (let i = 1; i < n; i++) {\n    if (l[i - 1] + l[i] + l[i + 1] ===\
    \ 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  const n = l.length;\n  if (n < 3)\
    \ {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n\
    \    sum += l[i];\n  }\n  for (let i = 0; i < n; i++) {\n    if (sum < 0) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n   \
    \   return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length < 3) {\n\
    \    return false;\n  }\n  const [a, b, c] = l;\n  return a + b + c === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  const n = l.length;\n  if (n < 3) {\n    return\
    \ false;\n  }\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n\
    \  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n\
    \      if (l[i] + l[j] === sum) {\n        return true;\n      }\n    }\n  }\n\
    \  return false;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n\
    \  }\n  const [a, b, c] = l;\n  return a + b + c === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n\
    \    return false;\n  }\n  const set = new Set();\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (set.has(l[i] + l[i + 1] + l[i + 2])) {\n      return false;\n\
    \    }\n    set.add(l[i] + l[i + 1] + l[i + 2]);\n  }\n  return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
