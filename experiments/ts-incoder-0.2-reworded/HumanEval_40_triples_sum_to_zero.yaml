name: HumanEval_40_triples_sum_to_zero
language: ts
prompt: "//triples_sum_to_zero takes an array of integers as an input.\n// it returns\
  \ true if there are three distinct elements in the array that\n// sum to zero, and\
  \ false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n\
  // false\nfunction triples_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = triples_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1,\
  \ 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3,\
  \ 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\
  \ntest();"
completions: ["  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if\
    \ (l.length < 3) {\n    return false;\n  }\n  const [a, b, c] = l;\n  return a\
    \ + b + c === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  if\
    \ (l.length < 3) {\n    return false;\n  }\n  const n = l.length;\n  const m =\
    \ l.reduce((acc, x) => acc + x, 0);\n  const d = m - n;\n  if (d > 0) {\n    return\
    \ false;\n  }\n  const sums = l.map((x, i) => x === l[n - i] ? 1 : 0);\n  return\
    \ sums.reduce((acc, x) => acc + x, 0) === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  let triples = l.filter((el) => el > 0);\n  let triples_sum_to_zero = triples.filter((el)\
    \ => el === sum).length === 3;\n  return triples_sum_to_zero;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum\
    \ < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  let sum =\
    \ 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
