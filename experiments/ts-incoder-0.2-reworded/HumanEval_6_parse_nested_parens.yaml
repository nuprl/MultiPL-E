name: HumanEval_6_parse_nested_parens
language: ts
prompt: "//Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
  (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"()\
  \ (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
  ),[4]);\n}\n\ntest();"
completions: ["  const paren_stack: number[] = [];\n  const paren_level: number[]\
    \ = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ if (paren_level_count === 0) {\n        paren_stack.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_stack;\n}\n", "  const paren_stack: string[]\
    \ = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n \
    \ let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n\
    \    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n\
    \      if (paren_level_count < 0) {\n        paren_level_max--;\n      }\n   \
    \   if (paren_level_count === 0) {\n        paren_level.push(paren_level_max);\n\
    \      }\n      paren_stack.push(paren_string[i]);\n    }\n  }\n  return paren_level;\n\
    }\n", "  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_",
  "  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let\
    \ paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if\
    \ (paren_string[i] === \"(\") {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n\
    \      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count\
    \ = paren_stack.pop();\n      paren_level = paren_stack.pop();\n    } else {\n\
    \      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n",
  "  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let\
    \ paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n \
    \ let paren_level_max_count: number;\n  let paren_level_max_index: number;\n \
    \ let paren_level_max_paren: string;\n  let paren_level_max_paren_index: number;\n\
    \  let paren_level_max_paren_level: number;\n  let paren_level_max_paren_level_count:\
    \ number;\n  let paren_level_max_paren_level_max_index: number;\n  let paren_level_max_paren_level_max_paren:\
    \ string;\n  let paren_level_max_paren_level_max_paren_index: number;\n  let paren_level_max_paren_level_max_paren_level:\
    \ number;\n  let paren_level_max_paren_level_max_paren_level_count: number;\n\
    \  let paren_level_max_paren_level_max_paren_level_max_index: number;\n  let paren_level_max_paren_level_max_paren_level_max_paren:\
    \ string;\n  let paren_level_max_paren_level_max_paren_level_max_paren_index:\
    \ number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level:\
    \ number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_count:\
    \ number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_index:\
    \ number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren:\
    \ string;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_index:\
    \ number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level:\
    \ number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_count:\
    \ number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_index:\
    \ number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren:\
    \ string;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_index:\
    \ number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level:\
    \ number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_count:\
    \ number;\n  let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_index:\
    \ number;\n  let paren_level_max_paren_level_", "  const paren_stack: string[]\
    \ = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n\
    \      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n\
    \      paren_level = paren_stack.pop();\n    } else {\n      paren_count = paren_stack.pop();\n\
    \      paren_level = paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n",
  "  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let\
    \ paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index2: number = 0;\n  let paren_level_max_index3:\
    \ number = 0;\n  let paren_level_max_index4: number = 0;\n  let paren_level_max_index5:\
    \ number = 0;\n  let paren_level_max_index6: number = 0;\n  let paren_level_max_index7:\
    \ number = 0;\n  let paren_level_max_index8: number = 0;\n  let paren_level_max_index9:\
    \ number = 0;\n  let paren_level_max_index10: number = 0;\n  let paren_level_max_index11:\
    \ number = 0;\n  let paren_level_max_index12: number = 0;\n  let paren_level_max_index13:\
    \ number = 0;\n  let paren_level_max_index14: number = 0;\n  let paren_level_max_index15:\
    \ number = 0;\n  let paren_level_max_index16: number = 0;\n  let paren_level_max_index17:\
    \ number = 0;\n  let paren_level_max_index18: number = 0;\n  let paren_level_max_index19:\
    \ number = 0;\n  let paren_level_max_index20: number = 0;\n  let paren_level_max_index21:\
    \ number = 0;\n  let paren_level_max_index22: number = 0;\n  let paren_level_max_index23:\
    \ number = 0;\n  let paren_level_max_index24: number = 0;\n  let paren_level_max_index25:\
    \ number = 0;\n  let paren_level_max_index26: number = 0;\n  let paren_level_max_index27:\
    \ number = 0;\n  let paren_level_max_index28: number = 0;\n  let paren_level_max_index29:\
    \ number = 0;\n  let paren_level_max_index30: number = 0;\n  let paren_level_max_index31:\
    \ number = 0;\n  let paren_level_max_index32: number = 0;\n  let paren_level_max_index33:\
    \ number = 0;\n  let paren_level_max_index34: number = 0;\n  let paren_level_max_index35:\
    \ number = 0;\n  let paren_level_max_index36: number = 0;\n  let paren_level_max_index37:\
    \ number = 0;\n  let paren_level_max_index38: number = 0;\n  let paren_level_max_index39:\
    \ number = 0;\n  let paren_level_max_index40: number = 0;\n  let paren_level_max_index41:\
    \ number = 0;\n  let paren_level_max_index42: number = 0;\n  let paren_level_max_index43:\
    \ number = 0;\n  let paren_level_max_index44: number = 0;", "  const paren_stack:\
    \ string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n\
    \      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n   \
    \   paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n", "  const groups = paren_string.trim().split(/\\\
    s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels\
    \ = new Array<number>(max_level);\n  for (let i = 0; i < groups.length; i++) {\n\
    \    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n\
    \      if (group[j] === '(') {\n        levels[levels.length - 1]++;\n      }\
    \ else if (group[j] === ')') {\n        levels[levels.length - 1]--;\n      }\n\
    \    }\n  }\n  return levels.map(l => l === 0 ? '' : l);\n}\n", "  const paren_stack:\
    \ number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count\
    \ = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_max = Math.max(paren_level_max, paren_stack[paren_stack.length\
    \ - 1]);\n      paren_level_count += 1;\n    } else if (char === ')') {\n    \
    \  paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_max);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n", "  const groups = paren_string.trim().split(/\\\
    s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels\
    \ = new Array(max_level);\n  for (let i = 0; i < levels.length; i++) {\n    levels[i]\
    \ = 0;\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n\
    \    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n\
    \        levels[levels.length - 1]++;\n      } else if (group[j] === ')') {\n\
    \        levels[levels.length - 1]--;\n      }\n    }\n  }\n  return levels;\n\
    }\n", "  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n\
    \      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count\
    \ = paren_stack.pop();\n      paren_level_count = (paren_level_count > paren_level_count)\
    \ ? paren_level_count : paren_level_count;\n    }\n    paren_level_count += 1;\n\
    \  }\n  return paren_level;\n}\n", "  const paren_stack: number[] = [];\n  const\
    \ paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count +=\
    \ 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()]\
    \ = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n", "  const paren_stack:\
    \ number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count:\
    \ number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char\
    \ = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n", "  const paren_stack: number[] = [];\n  const paren_level:\
    \ number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n", "  const paren_stack: number[] = [];\n  const paren_level:\
    \ number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (paren_string[i] === \")\") {\n\
    \      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n\
    \    }\n  }\n  return paren_level;\n}\n", "  const paren_stack: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n\
    \    }\n  }\n  return paren_stack;\n}\n", "  const paren_stack: string[] = [];\n\
    \  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n\
    \      paren_level[paren_level.length - 1]++;\n    }\n  }\n  return paren_level;\n\
    }\n", "  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number[] = [];\n  let paren_level_max_count2: number[]\
    \ = [];\n  let paren_level_max_count3: number[] = [];\n  let paren_level_max_count4:\
    \ number[] = [];\n  let paren_level_max_count5: number[] = [];\n  let paren_level_max_count6:\
    \ number[] = [];\n  let paren_level_max_count7: number[] = [];\n  let paren_level_max_count8:\
    \ number[] = [];\n  let paren_level_max_count9: number[] = [];\n  let paren_level_max_count10:\
    \ number[] = [];\n  let paren_level_max_count11: number[] = [];\n  let paren_level_max_count12:\
    \ number[] = [];\n  let paren_level_max_count13: number[] = [];\n  let paren_level_max_count14:\
    \ number[] = [];\n  let paren_level_max_count15: number[] = [];\n  let paren_level_max_count16:\
    \ number[] = [];\n  let paren_level_max_count17: number[] = [];\n  let paren_level_max_count18:\
    \ number[] = [];\n  let paren_level_max_count19: number[] = [];\n  let paren_level_max_count20:\
    \ number[] = [];\n  let paren_level_max_count21: number[] = [];\n  let paren_level_max_count22:\
    \ number[] = [];\n  let paren_level_max_count23: number[] = [];\n  let paren_level_max_count24:\
    \ number[] = [];\n  let paren_level_max_count25: number[] = [];\n  let paren_level_max_count26:\
    \ number[] = [];\n  let paren_level_max_count27: number[] = [];\n  let paren_level_max_count28:\
    \ number[] = [];\n  let paren_level_max_count29: number[] = [];\n  let paren_level_max_count30:\
    \ number[] = [];\n  let paren_level_max_count31: number[] = [];\n  let paren_level_max_count32:\
    \ number[] = [];\n  let paren_level_max_count33: number[] = [];\n  let paren_level_max_count34:\
    \ number[] = [];\n  let paren_level_max_count35: number[] = [];\n  let paren_level_max_count36:\
    \ number[] = [];\n  let paren_level_max_count37: number[] = [];\n  let paren_level_max_count38:\
    \ number[] = [];\n  let paren_level_max_count39: number[] = [];\n  let paren_level_max_count40:\
    \ number[] = [];\n", "  const paren_stack: number[] = [];\n  const paren_level:\
    \ number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n \
    \ let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \        paren_level_count += 1;\n      }\n    } else if (char === ' ') {\n  \
    \    if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \        paren_level_count += 1;\n      }\n    } else {\n      paren_level_count\
    \ -= 1;\n    }\n    if (paren_level_count === 0) {\n      paren_level.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    }\n    if (paren_level_count > paren_level_max)\
    \ {\n      paren_level_max = paren_level_count;\n      paren_level_max_index =\
    \ i;\n      paren_level_max_count = paren_level_count;\n    }\n  }\n  return paren_level;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
