name: HumanEval_16_count_distinct_characters
language: ts
prompt: "//Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>>\
  \ count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string:\
  \ string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\
  \"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"\
  abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"\
  Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"
completions: ["  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n   \
    \ const char = string[i];\n    if (char.toLowerCase() !== char) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string.charAt(i) !== string.charAt(i).toUpperCase()) {\n   \
    \   count++;\n    }\n  }\n  return count;\n}\n", "    let count = 0;\n    for\
    \ (let i = 0; i < string.length; i++) {\n        if (string.charAt(i) !== string.charAt(i).toUpperCase())\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n", "    let\
    \ chars: number = 0;\n    for (let i = 0; i < string.length; i++) {\n        const\
    \ char = string[i];\n        if (chars.indexOf(char) === -1) {\n            chars.push(char);\n\
    \        }\n    }\n    return chars.length;\n}\n", "  let count = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char\
    \ === char.toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i)\
    \ >= 65 && string.charCodeAt(i) <= 90) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n\
    \    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "\tlet distinctCount = 0;\n\tfor (let i =\
    \ 0; i < string.length; i++) {\n\t\tif (string[i] === string[i].toLowerCase())\
    \ {\n\t\t\tdistinctCount++;\n\t\t}\n\t}\n\treturn distinctCount;\n}\n", "\tlet\
    \ chars: number = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char\
    \ = string[i];\n\t\tif (chars.indexOf(char) === -1) {\n\t\t\tchars.push(char);\n\
    \t\t}\n\t}\n\treturn chars.length;\n}\n", "\tlet count = 1;\n\tfor (let i = 0;\
    \ i < string.length; i++) {\n\t\tif (string.charCodeAt(i) !== string.charCodeAt(i\
    \ - 1)) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\tlet distinctCharacters\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (char.toLowerCase() === char.toUpperCase()) {\n\t\t\tdistinctCharacters++;\n\
    \t\t}\n\t}\n\treturn distinctCharacters;\n}\n", "  let count = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i))\
    \ {\n      count += 1;\n    }\n    if (char.match(/[A-Z]/i)) {\n      count +=\
    \ 1;\n    }\n    if (char.match(/[0-9]/i)) {\n      count += 1;\n    }\n  }\n\
    \  return count;\n}\n", "\tlet chars: number = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tconst char = string[i];\n\t\tif (chars.indexOf(char) === -1) {\n\
    \t\t\tchars.push(char);\n\t\t}\n\t}\n\treturn chars.length;\n}\n", "  let count\
    \ = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\
    \    if (char.toLowerCase() !== char) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  let chars: number[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    chars.push(string.charCodeAt(i));\n  }\n  return chars.filter((_,\
    \ i) => chars.indexOf(chars[i]) === i).length;\n}\n", "  let count = 0;\n  for\
    \ (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()\
    \ !== char) {\n      count++;\n    }\n  }\n  return count;\n}\n", "    let chars:\
    \ number = 0;\n    for (let i = 0; i < string.length; i++) {\n        const char\
    \ = string[i];\n        chars += char === char ? 1 : 0;\n    }\n    return chars;\n\
    }\n", "  return string\n    .split('')\n    .reduce((acc, cur) => {\n      return\
    \ acc + count_distinct_characters(cur);\n    }, 0);\n}\n", "\tlet distinctCharacterCount\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet currentChar = string[i];\n\
    \t\tlet lowerCaseChar = string[i].toLowerCase();\n\t\tlet upperCaseChar = string[i].toUpperCase();\n\
    \t\tif (currentChar === lowerCaseChar || currentChar === upperCaseChar) {\n\t\t\
    \tdistinctCharacterCount++;\n\t\t}\n\t}\n\treturn distinctCharacterCount;\n}\n",
  "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char =\
    \ string[i];\n    if (char.toLowerCase() !== char) {\n      count++;\n    }\n\
    \  }\n  return count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
