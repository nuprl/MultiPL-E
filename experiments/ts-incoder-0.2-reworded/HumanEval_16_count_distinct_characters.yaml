name: HumanEval_16_count_distinct_characters
language: ts
prompt: "//Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>>\
  \ count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string:\
  \ string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\
  \"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"\
  abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"\
  Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"
completions: ["  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n   \
    \ const char = string[i];\n    if (char.toLowerCase() !== char) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string.charAt(i) !== string.charAt(i).toUpperCase()) {\n   \
    \   count++;\n    }\n  }\n  return count;\n}\n", "    let count = 0;\n    for\
    \ (let i = 0; i < string.length; i++) {\n        if (string.charAt(i) !== string.charAt(i).toUpperCase())\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n", "    let\
    \ chars: number = 0;\n    for (let i = 0; i < string.length; i++) {\n        const\
    \ char = string[i];\n        if (chars.indexOf(char) === -1) {\n            chars.push(char);\n\
    \        }\n    }\n    return chars.length;\n}\n", "  let count = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char\
    \ === char.toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i)\
    \ >= 65 && string.charCodeAt(i) <= 90) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n\
    \    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "\tlet distinctCount = 0;\n\tfor (let i =\
    \ 0; i < string.length; i++) {\n\t\tif (string[i] === string[i].toLowerCase())\
    \ {\n\t\t\tdistinctCount++;\n\t\t}\n\t}\n\treturn distinctCount;\n}\n", "\tlet\
    \ chars: number = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char\
    \ = string[i];\n\t\tif (chars.indexOf(char) === -1) {\n\t\t\tchars.push(char);\n\
    \t\t}\n\t}\n\treturn chars.length;\n}\n", "\tlet count = 1;\n\tfor (let i = 0;\
    \ i < string.length; i++) {\n\t\tif (string.charCodeAt(i) !== string.charCodeAt(i\
    \ - 1)) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\tlet distinctCharacters\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (char.toLowerCase() === char.toUpperCase()) {\n\t\t\tdistinctCharacters++;\n\
    \t\t}\n\t}\n\treturn distinctCharacters;\n}\n", "  let count = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i))\
    \ {\n      count += 1;\n    }\n    if (char.match(/[A-Z]/i)) {\n      count +=\
    \ 1;\n    }\n    if (char.match(/[0-9]/i)) {\n      count += 1;\n    }\n  }\n\
    \  return count;\n}\n", "\tlet chars: number = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tconst char = string[i];\n\t\tif (chars.indexOf(char) === -1) {\n\
    \t\t\tchars.push(char);\n\t\t}\n\t}\n\treturn chars.length;\n}\n", "  let count\
    \ = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\
    \    if (char.toLowerCase() !== char) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  let chars: number[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    chars.push(string.charCodeAt(i));\n  }\n  return chars.filter((_,\
    \ i) => chars.indexOf(chars[i]) === i).length;\n}\n", "  let count = 0;\n  for\
    \ (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()\
    \ !== char) {\n      count++;\n    }\n  }\n  return count;\n}\n", "    let chars:\
    \ number = 0;\n    for (let i = 0; i < string.length; i++) {\n        const char\
    \ = string[i];\n        chars += char === char ? 1 : 0;\n    }\n    return chars;\n\
    }\n", "  return string\n    .split('')\n    .reduce((acc, cur) => {\n      return\
    \ acc + count_distinct_characters(cur);\n    }, 0);\n}\n", "\tlet distinctCharacterCount\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet currentChar = string[i];\n\
    \t\tlet lowerCaseChar = string[i].toLowerCase();\n\t\tlet upperCaseChar = string[i].toUpperCase();\n\
    \t\tif (currentChar === lowerCaseChar || currentChar === upperCaseChar) {\n\t\t\
    \tdistinctCharacterCount++;\n\t\t}\n\t}\n\treturn distinctCharacterCount;\n}\n",
  "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char =\
    \ string[i];\n    if (char.toLowerCase() !== char) {\n      count++;\n    }\n\
    \  }\n  return count;\n}\n", "\tlet distinct = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tif (string.charCodeAt(i) !== string.charCodeAt(i).toUpperCase())\
    \ {\n\t\t\tdistinct++;\n\t\t}\n\t}\n\treturn distinct;\n}\n", "    let chars =\
    \ string.split('');\n    let charsCount = {};\n    for (let i = 0; i < chars.length;\
    \ i++) {\n        let char = chars[i];\n        if (charsCount[char]) {\n    \
    \        charsCount[char] += 1;\n        } else {\n            charsCount[char]\
    \ = 1;\n        }\n    }\n    return Object.keys(charsCount).length;\n}\n", " \
    \ const chars = string.split('');\n  return chars.reduce((acc, char) => {\n  \
    \  return acc + count_distinct_characters_helper(char);\n  }, 0);\n}\n", "   \
    \ let chars: number = 0;\n    for (let i = 0; i < string.length; i++) {\n    \
    \    chars += string.charCodeAt(i);\n    }\n    return chars;\n}\n", "  let chars:\
    \ number = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n\
    \    if (chars.indexOf(char) === -1) {\n      chars.push(char);\n    }\n  }\n\
    \  return chars.length;\n}\n", "\tlet chars: number = 0;\n\tfor (let i = 0; i\
    \ < string.length; i++) {\n\t\tlet char = string[i];\n\t\tlet lowerCaseChar =\
    \ string[i].toLowerCase();\n\t\tlet lowerCaseCharIndex = lowerCaseChar.charCodeAt(0);\n\
    \t\tlet upperCaseCharIndex = char.charCodeAt(0);\n\t\tif (lowerCaseCharIndex ===\
    \ upperCaseCharIndex) {\n\t\t\tchars++;\n\t\t} else {\n\t\t\tchars += 2;\n\t\t\
    }\n\t}\n\treturn chars;\n}\n", "  let chars: number[] = [];\n  for (let i = 0;\
    \ i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n  }\n  return\
    \ chars.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n}\n", "   \
    \ let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        const\
    \ char = string[i];\n        if (char.match(/[a-z]/i)) {\n            count +=\
    \ 1;\n        }\n        if (char.match(/[A-Z]/i)) {\n            count += 1;\n\
    \        }\n        if (char.match(/[0-9]/i)) {\n            count += 1;\n   \
    \     }\n    }\n    return count;\n}\n", "  let chars: number = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if\
    \ (chars.indexOf(char) === -1) {\n      chars.push(char);\n    }\n  }\n  return\
    \ chars.length;\n}\n", "\tlet count = 1;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tif (string.charAt(i) !== string.charAt(i).toUpperCase()) {\n\t\t\
    \tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "  let count = 0;\n  for (let i\
    \ = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char ===\
    \ char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\t\
    let chars: number = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tchars\
    \ += string.charCodeAt(i);\n\t}\n\treturn chars;\n}\n", "  const chars = string.split('');\n\
    \  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.indexOf(chars[i])\
    \ !== i) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let count =\
    \ 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\
    \    if (char === char.toLowerCase()) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\
    \t\tlet char = string[i];\n\t\tif (char === char.toUpperCase()) {\n\t\t\tcount++;\n\
    \t\t}\n\t\tif (char === char.toLowerCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\t\
    return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++)\
    \ {\n    const char = string[i];\n    if (char.toLowerCase() === char.toUpperCase())\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "  const chars = string.split('');\n\
    \  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    const char\
    \ = chars[i];\n    if (char.match(/[a-z]/i)) {\n      count += 1;\n    }\n   \
    \ if (char.match(/[A-Z]/i)) {\n      count += 1;\n    }\n    if (char.match(/[0-9]/i))\
    \ {\n      count += 1;\n    }\n  }\n  return count;\n}\n", "  const chars = string.split('');\n\
    \  const charsLength = chars.length;\n  let distinctCharsCount = 0;\n  for (let\
    \ i = 0; i < charsLength; i++) {\n    const char = chars[i];\n    if (char.match(/[a-z]/i))\
    \ {\n      distinctCharsCount++;\n    }\n  }\n  return distinctCharsCount;\n}\n",
  "    let distinctCharCount = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string.charCodeAt(i) !== string.charCodeAt(i).toUpperCase().charCodeAt(0))\
    \ {\n            distinctCharCount++;\n        }\n    }\n    return distinctCharCount;\n\
    }\n", "    let chars: number[] = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        chars.push(string.charCodeAt(i));\n    }\n    return chars.filter((value,\
    \ index, self) => self.indexOf(value) === index).length;\n}\n", "    let count\
    \ = 1;\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char.toLowerCase() !== char) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char.toLowerCase() === char.toUpperCase())\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "    let chars = string.split('');\n\
    \    let charsCount = chars.reduce((acc, cur) => acc + cur.length, 0);\n    return\
    \ charsCount;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++)\
    \ {\n    const char = string[i];\n    const lowerChar = char.toLowerCase();\n\
    \    if (lowerChar !== char) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "\tlet chars = string.split('');\n\tlet count = 1;\n\tfor (let i = 0; i\
    \ < chars.length; i++) {\n\t\tlet char = chars[i];\n\t\tif (char === char.toUpperCase())\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\tif (char === char.toLowerCase()) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string.charCodeAt(i) >= 65 && string.charCodeAt(i) <= 90) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "  let chars = string.split('');\n\
    \  let char_count = chars.length;\n  let distinct_char_count = 0;\n  for (let\
    \ i = 0; i < chars.length; i++) {\n    if (chars.indexOf(chars[i]) !== i) {\n\
    \      distinct_char_count++;\n    }\n  }\n  return distinct_char_count;\n}\n",
  "  const chars = string.split('');\n  const charsLength = chars.length;\n  let distinctChars\
    \ = 0;\n  for (let i = 0; i < charsLength; i++) {\n    if (chars.indexOf(chars[i])\
    \ === i) {\n      distinctChars++;\n    }\n  }\n  return distinctChars;\n}\n",
  "    let chars: number[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        let char = string.charAt(i);\n        if (chars.indexOf(char) === -1)\
    \ {\n            chars.push(char);\n        }\n    }\n    return chars.length;\n\
    }\n", "  let chars: number = 0;\n  for (let i = 0; i < string.length; i++) {\n\
    \    chars += string.charCodeAt(i);\n  }\n  return chars;\n}\n", "  let count\
    \ = 1;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\
    \    if (string.includes(char.toLowerCase())) {\n      count++;\n    }\n  }\n\
    \  return count;\n}\n", "  let chars = string.split('');\n  let char_count = chars.length;\n\
    \  let distinct_char_count = 0;\n  for (let i = 0; i < chars.length; i++) {\n\
    \    if (chars.indexOf(chars[i]) !== i) {\n      distinct_char_count++;\n    }\n\
    \  }\n  return distinct_char_count;\n}\n", "  let chars = string.split('');\n\
    \  let charsCount = chars.reduce((acc, cur) => acc + cur.length, 0);\n  return\
    \ charsCount;\n}\n", "\tlet chars: number = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tchars += string.charCodeAt(i);\n\t}\n\treturn chars;\n}\n", "  let\
    \ chars: number[] = [];\n  for (let i = 0; i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n\
    \  }\n  return chars.filter((val, i, arr) => arr.indexOf(val) === i).length;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char.toLowerCase() === char.toUpperCase()) {\n  \
    \    count++;\n    }\n  }\n  return count;\n}\n", "  return string.replace(/[^A-Za-z]/g,\
    \ \"\").length;\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tconst char = string[i];\n\t\tif (char === char.toUpperCase()) {\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if (char === char.toLowerCase()) {\n\t\t\tcount++;\n\
    \t\t}\n\t\telse {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "  return\
    \ string.split('').reduce((acc, cur) => {\n    return acc + cur.toUpperCase()\
    \ === cur ? 1 : acc;\n  }, 0);\n}\n", "    let chars: number = 0;\n    for (let\
    \ i = 0; i < string.length; i++) {\n        let char = string[i];\n        chars\
    \ += char === char.toUpperCase() ? 1 : char === char.toLowerCase() ? 2 : 1;\n\
    \    }\n    return chars;\n}\n", "\tlet char_count = 0;\n\tfor (let i = 0; i <\
    \ string.length; i++) {\n\t\tlet char = string[i];\n\t\tlet char_code = char.charCodeAt(0);\n\
    \t\tif (char_code >= 65 && char_code <= 90) {\n\t\t\tchar_count++;\n\t\t}\n\t\
    }\n\treturn char_count;\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tconst char = string.charAt(i);\n\t\tif (char.toLowerCase() === char.toUpperCase())\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\tlet count = 1;\n\t\
    for (let i = 0; i < string.length; i++) {\n\t\tconst char = string[i];\n\t\tif\
    \ (char.toLowerCase() !== char) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\n", "  let chars = string.split('');\n\
    \  let char_count = chars.length;\n  let distinct_char_count = 0;\n  for (let\
    \ i = 0; i < chars.length; i++) {\n    if (chars.indexOf(chars[i]) !== i) {\n\
    \      distinct_char_count++;\n    }\n  }\n  return distinct_char_count;\n}\n",
  "  const chars = string.split('');\n  const charsLength = chars.length;\n  let distinctCharsCount\
    \ = 0;\n  for (let i = 0; i < charsLength; i++) {\n    if (chars.indexOf(chars[i])\
    \ !== chars.lastIndexOf(chars[i])) {\n      distinctCharsCount++;\n    }\n  }\n\
    \  return distinctCharsCount;\n}\n", "\tlet chars: number = 0;\n\tfor (let i =\
    \ 0; i < string.length; i++) {\n\t\tchars += string.charCodeAt(i);\n\t}\n\treturn\
    \ chars;\n}\n", "    let chars: number = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        const char = string[i];\n        if (chars.indexOf(char) ===\
    \ -1) {\n            chars.push(char);\n        }\n    }\n    return chars.length;\n\
    }\n", "    let char_count: number = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        char_count = char_count + count_distinct_characters_helper(string,\
    \ i, char_count);\n    }\n    return char_count;\n}\n", "\tlet distinctCharacterCount\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst currentChar = string[i].toLowerCase();\n\
    \t\tconst nextChar = string[i + 1].toLowerCase();\n\t\tif (currentChar !== nextChar)\
    \ {\n\t\t\tdistinctCharacterCount++;\n\t\t}\n\t}\n\treturn distinctCharacterCount;\n\
    }\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet\
    \ char = string[i];\n\t\tif (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char.charCodeAt(0) !== char.charCodeAt(0))\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for\
    \ (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const\
    \ lower = char.toLowerCase();\n    const upper = char.toUpperCase();\n    if (lower\
    \ !== upper) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let count\
    \ = 1;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)\
    \ !== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\
    \t\tlet char = string[i];\n\t\tif (char === char.toUpperCase()) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tconst char = string[i];\n\t\tif (char === char.toUpperCase()) {\n\
    \t\t\tcount++;\n\t\t}\n\t\tif (char === char.toLowerCase()) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "    let count = 0;\n    for (let i = 0; i\
    \ < string.length; i++) {\n        const char = string.charAt(i);\n        if\
    \ (char === char.toUpperCase()) {\n            count++;\n        } else if (char\
    \ === char.toLowerCase()) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n", "\tlet distinctCharacterCount = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet currentChar = string[i];\n\t\tif (distinctCharacterCount < currentChar.toLowerCase().length)\
    \ {\n\t\t\tdistinctCharacterCount = currentChar.toLowerCase().length;\n\t\t}\n\
    \t\tif (distinctCharacterCount < currentChar.toUpperCase().length) {\n\t\t\tdistinctCharacterCount\
    \ = currentChar.toUpperCase().length;\n\t\t}\n\t}\n\treturn distinctCharacterCount;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    const lowerChar = string[i].toLowerCase();\n    const\
    \ upperChar = string[i].toUpperCase();\n    if (char === lowerChar || char ===\
    \ upperChar) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\tlet chars:\
    \ number = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (chars.indexOf(char) === -1) {\n\t\t\tchars.push(char);\n\t\t}\n\t}\n\t\
    return chars.length;\n}\n", "\tlet chars: number[] = [];\n\tlet charCount: number\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tchars[string[i]] = chars[string[i]]\
    \ + 1 || 1;\n\t\tcharCount++;\n\t}\n\treturn charCount;\n}\n", "    let count\
    \ = 1;\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (string.indexOf(char, i + 1) === -1) {\n            count++;\n   \
    \     }\n    }\n    return count;\n}\n", "  let count = 0;\n  for (let i = 0;\
    \ i < string.length; i++) {\n    if (string.charAt(i) !== string.charAt(string.length\
    \ - i - 1)) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\tlet count\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t\tif (char ===\
    \ char.toLowerCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", " \
    \ return string\n    .split('')\n    .reduce((acc, curr) => {\n      return acc\
    \ + count_distinct_characters(curr);\n    }, 0);\n}\n", "  let count = 0;\n  for\
    \ (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n\
    \    if (char === char.toLowerCase()) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "\tlet chars = string.split('');\n\tlet count = 1;\n\tfor (let\
    \ i = 0; i < chars.length; i++) {\n\t\tlet char = chars[i];\n\t\tlet lower = char.toLowerCase();\n\
    \t\tlet upper = char.toUpperCase();\n\t\tif (lower === upper) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "\tlet distinct = 0;\n\tfor (let i = 0; i <\
    \ string.length; i++) {\n\t\tlet char = string[i];\n\t\tif (char === char.toUpperCase())\
    \ {\n\t\t\tdistinct++;\n\t\t}\n\t\telse if (char === char.toLowerCase()) {\n\t\
    \t\tdistinct++;\n\t\t}\n\t}\n\treturn distinct;\n}\n", "  let distinct = 0;\n\
    \  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) !==\
    \ string.charCodeAt(i + 1)) {\n      distinct++;\n    }\n  }\n  return distinct;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "\tlet distinctCharacterCount = 0;\n\tfor\
    \ (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif (char\
    \ === char.toUpperCase()) {\n\t\t\tdistinctCharacterCount++;\n\t\t}\n\t\tif (char\
    \ === char.toLowerCase()) {\n\t\t\tdistinctCharacterCount++;\n\t\t}\n\t}\n\treturn\
    \ distinctCharacterCount;\n}\n", "\tlet chars: number = 0;\n\tfor (let i = 0;\
    \ i < string.length; i++) {\n\t\tconst char = string[i];\n\t\tif (chars.indexOf(char)\
    \ === -1) {\n\t\t\tchars++;\n\t\t}\n\t}\n\treturn chars;\n}\n", "  let count =\
    \ 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\
    \    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "\tlet chars = string.split('');\n\tlet distinct_chars = chars.filter(char\
    \ => char.charCodeAt(0) !== char.charCodeAt(0).toUpperCase().charCodeAt(0) &&\
    \ char.charCodeAt(0) !== char.charCodeAt(0).toLowerCase().charCodeAt(0));\n\t\
    return distinct_chars.length;\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i <\
    \ string.length; i++) {\n\t\tconst char = string[i];\n\t\tif (char === char.toUpperCase())\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\tlet count = 1;\n\t\
    for (let i = 0; i < string.length; i++) {\n\t\tconst char = string[i];\n\t\tif\
    \ (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "\tlet distinctCharacterCount = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet currentChar = string[i];\n\t\tlet previousChar = string[i -\
    \ 1];\n\t\tif (currentChar === previousChar) {\n\t\t\tdistinctCharacterCount++;\n\
    \t\t} else {\n\t\t\tdistinctCharacterCount = 1;\n\t\t}\n\t}\n\treturn distinctCharacterCount;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char.toLowerCase() !== char) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  const chars = string.split('');\n  const\
    \ uniqueChars = {};\n  for (let i = 0; i < chars.length; i++) {\n    const char\
    \ = chars[i];\n    if (uniqueChars[char]) {\n      uniqueChars[char]++;\n    }\
    \ else {\n      uniqueChars[char] = 1;\n    }\n  }\n  return Object.keys(uniqueChars).length;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "    let distinctCharacterCount = 0;\n   \
    \ for (let i = 0; i < string.length; i++) {\n        if (distinctCharacterCount\
    \ < string[i].toUpperCase().charCodeAt(0)) {\n            distinctCharacterCount\
    \ += string[i].toUpperCase().charCodeAt(0) - string[i].toUpperCase().charCodeAt(0).toLowerCase();\n\
    \        }\n        if (distinctCharacterCount < string[i].toLowerCase().charCodeAt(0))\
    \ {\n            distinctCharacterCount += string[i].toLowerCase().charCodeAt(0)\
    \ - string[i].toLowerCase().charCodeAt(0).toLowerCase();\n        }\n    }\n \
    \   return distinctCharacterCount;\n}\n", "  let count = 0;\n  for (let i = 0;\
    \ i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()\
    \ === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "    let chars: string[] = string.split('');\n    let counts: number[] = [];\n \
    \   for (let i = 0; i < chars.length; i++) {\n        let char = chars[i];\n \
    \       let index = chars.indexOf(char, i + 1);\n        if (index === -1) {\n\
    \            counts.push(1);\n        } else {\n            counts.push(index\
    \ - i);\n        }\n    }\n    return counts.length;\n}\n", "  let distinct =\
    \ 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\
    \    if (char === char.toLowerCase()) {\n      distinct++;\n    }\n  }\n  return\
    \ distinct;\n}\n", "  const chars = string.split('');\n  return chars.reduce((acc,\
    \ cur) => acc + cur.charCodeAt(0), 0);\n}\n", "\tlet chars: number = 0;\n\tfor\
    \ (let i = 0; i < string.length; i++) {\n\t\tchars += string.charCodeAt(i);\n\t\
    }\n\treturn chars;\n}\n", "    let distinct = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string.charCodeAt(i) !== string.charCodeAt(i + 1)) {\n \
    \           distinct++;\n        }\n    }\n    return distinct;\n}\n", "  let\
    \ count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\
    \    if (char.match(/[a-z]/i)) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "\tlet distinct = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\t\
    let char = string[i];\n\t\tif (char.toLowerCase() === char.toUpperCase()) {\n\t\
    \t\tdistinct++;\n\t\t}\n\t}\n\treturn distinct;\n}\n", "    let count = 0;\n \
    \   for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (char.toLowerCase() !== char) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n", "\tlet chars: number = 0;\n\tfor (let i = 0;\
    \ i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif (chars.indexOf(char)\
    \ === -1) {\n\t\t\tchars++;\n\t\t}\n\t}\n\treturn chars;\n}\n", "\tlet chars:\
    \ number = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (chars.indexOf(char) === -1) {\n\t\t\tchars.push(char);\n\t\t}\n\t}\n\t\
    return chars.length;\n}\n", "  return string.split(\"\").reduce((acc, cur) =>\
    \ acc + cur.toLowerCase().charCodeAt(0) - 65, 0);\n}\n", "    let distinct = 0;\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string.charCodeAt(i)\
    \ !== string.charCodeAt(i).toUpperCase().charCodeAt(0)) {\n            distinct++;\n\
    \        }\n    }\n    return distinct;\n}\n", "  let chars: number[] = [];\n\
    \  for (let i = 0; i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n\
    \  }\n  return chars.filter((_, i) => chars.indexOf(chars[i]) === i).length;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char.toLowerCase() === char.toUpperCase()) {\n  \
    \    count++;\n    }\n  }\n  return count;\n}\n", '  return string.split("").filter((char:
    string) => !char.match(/[a-z]/i)).filter((char: string) => !char.match(/[A-Z]/i)).filter((char:
    string) => !char.match(/[0-9]/i)).filter((char: string) => !char.match(/[^A-Za-z0-9]/i)).filter((char:
    string) => !char.match(/[^A-Z]/i)).filter((char: string) => !char.match(/[^a-z]/i)).filter((char:
    string) => !char.match(/[^0-9]/i)).filter((char: string) => !char.match(/[^A-Za-z0-9]/i)).filter((char:
    string) => !char.match(/[^A-Z]/i)).filter((char: string) => !char.match(/[^a-z]/i)).filter((char:
    string) => !char.match(/[^0-9]/i)).filter((char: string) => !char.match(/[^A-Za-z0-9]/i)).filter((char:
    string) => !char.match(/[^A-Z]/i)).filter((char: string) => !char.match(/[^a-z]/i)).filter((char:
    string) => !char.match(/[^0-9]/i)).filter((char: string) => !char.match(/[^A-Za-z0-9]/i)).filter((char:
    string) => !char.match(/[^A-Z]/i)).filter((char: string) => !char.match(/[^a-z]/i)).filter((char:
    string) => !char.match(/[^0-9]/i)).filter((char: string) => !char.match(/[^A-Za-z0-9]/i)).filter((char:
    string) => !char.match(/[^A-Z]/i)).filter((char: string) => !char.match(/[^a-z]/i)).filter((char:
    string) => !char.match(/[^0-9]/i)).filter((char: string) => !char.match(/[^A-Za-z0-9]/i)).filter((char:
    string) => !char.match(/[^A-Z]/i)).filter((char: string) => !char.match(/[^a-z]/i)).filter((char:
    string) => !char.match(/[^0-9]/i)).filter((char: string) => !char.match(/[^A-Za-z0-9]/i)).filter((char:
    string) => !char.match(/[^A-Z]/i)).filter((char: string) => !char.match(/[^a-z]/i)).filter((char:
    string) => !char.match(/[^0-9]/i)).filter((char: string) => !char.match(/[^A-Za-z0-9]/i)).filter((char:
    string) => !char.match(/[^A-Z]/i)).filter((char: string) => !char.match(/[^a-z]/i)).filter((char:
    string) => !char.match(/[^0-9]/i)).filter((char: string) => !char.match(/[^A-Za-z0-9',
  "\tlet count = 1;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst char =\
    \ string.charAt(i);\n\t\tif (char.toLowerCase() !== char) {\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;\n}\n", "\tlet distinctCharacterCount = 0;\n\tfor (let\
    \ i = 0; i < string.length; i++) {\n\t\tconst currentChar = string[i];\n\t\tif\
    \ (distinctCharacterCount === 0 && currentChar !== currentChar.toLowerCase())\
    \ {\n\t\t\tdistinctCharacterCount++;\n\t\t}\n\t\tif (distinctCharacterCount ===\
    \ 0 && currentChar !== currentChar.toUpperCase()) {\n\t\t\tdistinctCharacterCount++;\n\
    \t\t}\n\t}\n\treturn distinctCharacterCount;\n}\n", "  let count = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()\
    \ !== char) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\tlet distinctCharacterCount\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet currentChar = string[i];\n\
    \t\tlet previousChar = string[i - 1];\n\t\tif (currentChar === previousChar) {\n\
    \t\t\tdistinctCharacterCount++;\n\t\t} else {\n\t\t\tdistinctCharacterCount =\
    \ 1;\n\t\t}\n\t}\n\treturn distinctCharacterCount;\n}\n", "\tlet count = 0;\n\t\
    for (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif (char.toLowerCase()\
    \ !== char) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\tlet count\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tlet lower = char.toLowerCase();\n\t\tlet upper = char.toUpperCase();\n\t\t\
    if (lower === upper) {\n\t\t\tcount++;\n\t\t} else {\n\t\t\tcount += 2;\n\t\t\
    }\n\t}\n\treturn count;\n}\n", "  let chars = string.split('');\n  let char_count\
    \ = chars.length;\n  let distinct_char_count = 0;\n  for (let i = 0; i < chars.length;\
    \ i++) {\n    if (chars.indexOf(chars[i]) !== i) {\n      distinct_char_count++;\n\
    \    }\n  }\n  return distinct_char_count;\n}\n", "  let chars = string.split('');\n\
    \  let charsCount = chars.length;\n  let distinctCharsCount = 0;\n  for (let i\
    \ = 0; i < charsCount; i++) {\n    let char = chars[i];\n    if (chars.indexOf(char)\
    \ !== i) {\n      distinctCharsCount++;\n    }\n  }\n  return distinctCharsCount;\n\
    }\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet\
    \ char = string[i];\n\t\tif (char.toLowerCase() === char.toUpperCase()) {\n\t\t\
    \tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\tlet chars: number = 0;\n\tfor\
    \ (let i = 0; i < string.length; i++) {\n\t\tchars += string.charCodeAt(i);\n\t\
    }\n\treturn chars;\n}\n", "  return string\n    .split('')\n    .reduce((acc,\
    \ cur) => acc + cur.toLowerCase().split('').length - 1, 0)\n}\n", "\tlet count\
    \ = 1;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tlet lower = char.toLowerCase();\n\t\tlet upper = char.toUpperCase();\n\t\t\
    if (lower !== upper) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", " \
    \ let chars = string.split(\"\").sort();\n  let count = 1;\n  for (let i = 0;\
    \ i < chars.length; i++) {\n    if (chars[i] === chars[i - 1]) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  return string\n    .split(\"\")\n    .reduce((acc,\
    \ curr) => {\n      return acc + count_distinct_characters(curr);\n    }, 0);\n\
    }\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst\
    \ char = string[i];\n\t\tif (char === char.toLowerCase()) {\n\t\t\tcount++;\n\t\
    \t}\n\t\telse if (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\
    \treturn count;\n}\n", "\tlet distinct = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet char = string[i];\n\t\tif (char === char.toUpperCase()) {\n\t\
    \t\tdistinct++;\n\t\t}\n\t\telse if (char === char.toLowerCase()) {\n\t\t\tdistinct++;\n\
    \t\t}\n\t\telse {\n\t\t\tdistinct--;\n\t\t}\n\t}\n\treturn distinct;\n}\n", " \
    \ let chars: number[] = [];\n  for (let i = 0; i < string.length; i++) {\n   \
    \ chars.push(string.charCodeAt(i));\n  }\n  return chars.filter((value, index,\
    \ self) => {\n    return self.indexOf(value) === index;\n  }).length;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i)\
    \ >= 65 && string.charCodeAt(i) <= 90) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\
    \t\tconst char = string[i];\n\t\tif (char.match(/[a-z]/i)) {\n\t\t\tcount++;\n\
    \t\t}\n\t\tif (char.match(/[A-Z]/i)) {\n\t\t\tcount++;\n\t\t}\n\t\tif (char.match(/[0-9]/i))\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\tif (char.match(/[!@#$%^&*()_+=|{}':;?/>.<,~]/i))\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "  let count = 0;\n  for\
    \ (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) !== string.charAt(i).toUpperCase())\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let chars: number[]\
    \ = [];\n  for (let i = 0; i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n\
    \  }\n  let uniqueChars: number[] = [];\n  for (let i = 0; i < chars.length; i++)\
    \ {\n    if (uniqueChars.indexOf(chars[i]) === -1) {\n      uniqueChars.push(chars[i]);\n\
    \    }\n  }\n  return uniqueChars.length;\n}\n", "  let count = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()\
    \ === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "\tlet distinct = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char\
    \ = string[i];\n\t\tif (char.toLowerCase() !== char) {\n\t\t\tdistinct++;\n\t\t\
    }\n\t}\n\treturn distinct;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string.charAt(i) !== string.charAt(i).toUpperCase()) {\n   \
    \   count++;\n    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()\
    \ === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "  let chars = string.split('');\n  let charsCount = chars.length;\n  let distinctCharsCount\
    \ = 0;\n  for (let i = 0; i < charsCount; i++) {\n    let char = chars[i];\n \
    \   if (chars.indexOf(char) !== i) {\n      distinctCharsCount++;\n    }\n  }\n\
    \  return distinctCharsCount;\n}\n", "    let distinct = 0;\n    for (let i =\
    \ 0; i < string.length; i++) {\n        let char = string.charAt(i);\n       \
    \ if (char === char.toUpperCase()) {\n            distinct++;\n        }\n   \
    \     else if (char === char.toLowerCase()) {\n            distinct++;\n     \
    \   }\n    }\n    return distinct;\n}\n", "  let chars = string.split('');\n \
    \ let uniqueChars = new Set();\n  for (let char of chars) {\n    if (uniqueChars.has(char))\
    \ {\n      uniqueChars.delete(char);\n    } else {\n      uniqueChars.add(char);\n\
    \    }\n  }\n  return uniqueChars.size;\n}\n", "  let count = 0;\n  for (let i\
    \ = 0; i < string.length; i++) {\n    const char = string[i];\n    const lowerChar\
    \ = string[i].toLowerCase();\n    const upperChar = string[i].toUpperCase();\n\
    \    if (char === lowerChar || char === upperChar) {\n      count++;\n    }\n\
    \  }\n  return count;\n}\n", "  let chars: number[] = [];\n  for (let i = 0; i\
    \ < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n  }\n  return\
    \ chars.filter((_, i) => chars.indexOf(chars[i]) === i).length;\n}\n", "  let\
    \ count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ===\
    \ string[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "    let chars: number[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        chars.push(string.charCodeAt(i));\n    }\n    return chars.filter((value,\
    \ index, self) => self.indexOf(value) === index).length;\n}\n", "    let count\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char.match(/[a-z]/i)) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n", "  return string.split('').filter((char) => char.match(/[a-z]/i)).filter((char)\
    \ => char.match(/[A-Z]/i)).filter((char) => char.match(/[0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/[^a-zA-Z0-9]/i)).filter((char) => char.match(/[^a-zA-Z0-9]/i)).filter((char)\
    \ => char.match(/", "    let count = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string.charAt(i) !== string.charAt(i).toUpperCase()) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "\tlet count\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (char === char.toUpperCase()) {\n\t\t\tcount += 1;\n\t\t}\n\t\tif (char\
    \ === char.toLowerCase()) {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i)\
    \ >= 65 && string.charCodeAt(i) <= 90) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  return string\n    .split('')\n    .reduce((acc, curr) => {\n\
    \      return acc + count_distinct_characters(curr);\n    }, 0);\n}\n", "    let\
    \ count = 1;\n    for (let i = 0; i < string.length; i++) {\n        if (string.charAt(i)\
    \ !== string.charAt(i).toUpperCase()) {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tconst char = string.charAt(i);\n\t\tif (char === char.toUpperCase())\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse if (char === char.toLowerCase()) {\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn count;\n}\n", "  let chars: number[] = [];\n  for\
    \ (let i = 0; i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n\
    \  }\n  return chars.reduce((a, b) => a + b, 0);\n}\n", "  let count = 1;\n  for\
    \ (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const\
    \ lower = char.toLowerCase();\n    if (lower !== char) {\n      count++;\n   \
    \ }\n  }\n  return count;\n}\n", "\tlet chars: number = 0;\n\tfor (let i = 0;\
    \ i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tlet lower = char.toLowerCase();\n\
    \t\tif (lower !== char) {\n\t\t\tchars++;\n\t\t}\n\t}\n\treturn chars;\n}\n",
  "\tlet distinctCharacterCount = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\
    \t\tlet currentChar = string[i];\n\t\tif (distinctCharacterCount < currentChar.toLowerCase().length)\
    \ {\n\t\t\tdistinctCharacterCount = currentChar.toLowerCase().length;\n\t\t}\n\
    \t\tif (distinctCharacterCount < currentChar.toUpperCase().length) {\n\t\t\tdistinctCharacterCount\
    \ = currentChar.toUpperCase().length;\n\t\t}\n\t}\n\treturn distinctCharacterCount;\n\
    }\n", "  return string.split('').reduce((acc, curr) => {\n    return acc + curr.charCodeAt(0);\n\
    \  }, 0);\n}\n", "    let distinctCharacters = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        const char = string[i];\n        if (char.toLowerCase() ===\
    \ char.toUpperCase()) {\n            distinctCharacters++;\n        }\n    }\n\
    \    return distinctCharacters;\n}\n", "  const chars = string.split('');\n  const\
    \ charsLength = chars.length;\n  let distinctCharsCount = 0;\n  for (let i = 0;\
    \ i < charsLength; i++) {\n    if (chars.indexOf(chars[i]) !== i) {\n      distinctCharsCount++;\n\
    \    }\n  }\n  return distinctCharsCount;\n}\n", "  let chars: number[] = [];\n\
    \  for (let i = 0; i < string.length; i++) {\n    chars.push(string.charCodeAt(i));\n\
    \  }\n  return chars.reduce((a, b) => a + b, 0);\n}\n", "\tlet distinct = 0;\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif\
    \ (char === char.toUpperCase()) {\n\t\t\tdistinct += 1;\n\t\t}\n\t\telse if (char\
    \ === char.toLowerCase()) {\n\t\t\tdistinct += 2;\n\t\t}\n\t\telse {\n\t\t\tdistinct\
    \ += 1;\n\t\t}\n\t}\n\treturn distinct;\n}\n", "\tlet distinctCharacters = 0;\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tconst char = string[i];\n\t\t\
    if (char.toLowerCase() === char.toUpperCase()) {\n\t\t\tdistinctCharacters++;\n\
    \t\t}\n\t}\n\treturn distinctCharacters;\n}\n", "    let distinctCharacterCount\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        let character =\
    \ string[i];\n        if (distinctCharacterCount < character.toLowerCase().length)\
    \ {\n            distinctCharacterCount = character.toLowerCase().length;\n  \
    \      }\n    }\n    return distinctCharacterCount;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90) {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n", "\tlet count = 0;\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tconst char = string[i];\n\t\t\
    if (char.toLowerCase() === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\
    \treturn count;\n}\n", "    let distinctCharacterCount = 0;\n    for (let i =\
    \ 0; i < string.length; i++) {\n        const character = string[i];\n       \
    \ const lowerCaseCharacter = character.toLowerCase();\n        const upperCaseCharacter\
    \ = character.toUpperCase();\n        if (lowerCaseCharacter === upperCaseCharacter)\
    \ {\n            distinctCharacterCount++;\n        } else {\n            distinctCharacterCount\
    \ += 2;\n        }\n    }\n    return distinctCharacterCount;\n}\n", "  let count\
    \ = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n\
    \    if (char.toLowerCase() === char.toUpperCase()) {\n      count++;\n    }\n\
    \  }\n  return count;\n}\n", "\tlet chars: number[] = [];\n\tfor (let i = 0; i\
    \ < string.length; i++) {\n\t\tchars[string[i]] = chars[string[i]] + 1 || 1;\n\
    \t}\n\treturn chars.reduce((a, b) => a + b, 0);\n}\n", "    let distinct = 0;\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string.charCodeAt(i)\
    \ !== string.charCodeAt(i).toUpperCase()) {\n            distinct++;\n       \
    \ }\n    }\n    return distinct;\n}\n", "  let chars = string.split('');\n  let\
    \ uniqueChars = new Set();\n  for (let i = 0; i < chars.length; i++) {\n    uniqueChars.add(chars[i]);\n\
    \  }\n  return uniqueChars.size;\n}\n", "  let char_count: number = 0;\n  for\
    \ (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i))\
    \ {\n      char_count++;\n    }\n    if (char.match(/[A-Z]/i)) {\n      char_count++;\n\
    \    }\n  }\n  return char_count;\n}\n", "  return string\n    .split('')\n  \
    \  .reduce((acc, curr) => {\n      return acc + curr.toLowerCase().split('').length;\n\
    \    }, 0);\n}\n", "\tlet chars: number = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tchars += string.charCodeAt(i);\n\t}\n\treturn chars;\n}\n", "  let\
    \ count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)\
    \ !== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "\tlet chars = string.split('');\n\tlet charsCount = chars.length;\n\
    \tlet distinctCharsCount = 0;\n\tfor (let i = 0; i < charsCount; i++) {\n\t\t\
    let char = chars[i];\n\t\tlet lowerChar = char.toLowerCase();\n\t\tif (lowerChar\
    \ !== char) {\n\t\t\tdistinctCharsCount++;\n\t\t}\n\t}\n\treturn distinctCharsCount;\n\
    }\n", "\tlet distinctCharacters = 0;\n\tfor (let i = 0; i < string.length; i++)\
    \ {\n\t\tlet char = string[i];\n\t\tif (char === char.toUpperCase()) {\n\t\t\t\
    distinctCharacters++;\n\t\t}\n\t\tif (char === char.toLowerCase()) {\n\t\t\tdistinctCharacters++;\n\
    \t\t}\n\t}\n\treturn distinctCharacters;\n}\n", "\tlet count = 1;\n\tfor (let\
    \ i = 0; i < string.length; i++) {\n\t\tconst char = string[i];\n\t\tif (char.toLowerCase()\
    \ !== char) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\tlet count\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\
    \t\tif (char.toLowerCase() === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t\
    }\n\treturn count;\n}\n", "  let char_count: number = 0;\n  for (let i = 0; i\
    \ < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i))\
    \ {\n      char_count++;\n    }\n  }\n  return char_count;\n}\n", "\tlet count\
    \ = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet char = string.charAt(i);\n\
    \t\tif (char === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "\tlet chars: number[] = [];\n\tfor (let i\
    \ = 0; i < string.length; i++) {\n\t\tchars.push(string.charCodeAt(i));\n\t}\n\
    \tlet uniqueChars: number[] = [];\n\tfor (let i = 0; i < chars.length; i++) {\n\
    \t\tlet char = chars[i];\n\t\tif (uniqueChars.indexOf(char) === -1) {\n\t\t\t\
    uniqueChars.push(char);\n\t\t}\n\t}\n\treturn uniqueChars.length;\n}\n", "  let\
    \ char_count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char\
    \ = string[i];\n    if (char.match(/[a-z]/i)) {\n      char_count++;\n    }\n\
    \  }\n  return char_count;\n}\n", "\tlet count = 1;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tconst char = string.charAt(i);\n\t\tif (char.toLowerCase() !== char)\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "  let count = 1;\n  for\
    \ (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) !== string.charAt(i).toUpperCase())\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "\tlet distinct = 0;\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tconst char = string[i];\n\t\t\
    if (char === char.toUpperCase()) {\n\t\t\tdistinct++;\n\t\t}\n\t\telse if (char\
    \ === char.toLowerCase()) {\n\t\t\tdistinct++;\n\t\t}\n\t}\n\treturn distinct;\n\
    }\n", "    let chars: number[] = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        let char = string[i];\n        if (chars.indexOf(char) === -1) {\n\
    \            chars.push(char);\n        }\n    }\n    return chars.length;\n}\n",
  "  let chars = string.split('');\n  let count = 1;\n  for (let i = 0; i < chars.length;\
    \ i++) {\n    if (chars[i] === chars[i - 1]) {\n      count++;\n    }\n  }\n \
    \ return count;\n}\n", "\tlet count = 1;\n\tfor (let i = 0; i < string.length;\
    \ i++) {\n\t\tlet char = string[i];\n\t\tif (char.toLowerCase() !== char) {\n\t\
    \t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\tlet count = 0;\n\tfor (let\
    \ i = 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif (char.toLowerCase()\
    \ === char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n",
  "    let distinctCharacterCount = 0;\n    for (let i = 0; i < string.length; i++)\
    \ {\n        let char = string[i];\n        if (char.toLowerCase() !== char) {\n\
    \            distinctCharacterCount++;\n        }\n    }\n    return distinctCharacterCount;\n\
    }\n", "  return string.split('').filter((char: string) => char.match(/[a-z]/i)).filter((char:\
    \ string) => char.match(/[A-Z]/i)).filter((char: string) => char.match(/[0-9]/i)).filter((char:\
    \ string) => char.match(/[!@#$%^&*()_+={}[\\]/\\\\|?><,]/g)).filter((char: string)\
    \ => char.match(/[~`!@#$%^&*()_+={}[\\]/\\\\|?><,]/g)).filter((char: string) =>\
    \ char.match(/[~`!@#$%^&*()_+={}[\\]/\\\\|?><,]/g)).filter((char: string) => char.match(/[~`!@#$%^&*()_+={}[\\\
    ]/\\\\|?><,]/g)).filter((char: string) => char.match(/[~`!@#$%^&*()_+={}[\\]/\\\
    \\|?><,]/g)).filter((char: string) => char.match(/[~`!@#$%^&*()_+={}[\\]/\\\\\
    |?><,]/g)).filter((char: string) => char.match(/[~`!@#$%^&*()_+={}[\\]/\\\\|?><,]/g)).filter((char:\
    \ string) => char.match(/[~`!@#$%^&*()_+={}[\\]/\\\\|?><,]/g)).filter((char: string)\
    \ => char.match(/[~`!@#$%^&*()_+={}[\\]/\\\\|?><,]/g)).filter((char: string) =>\
    \ char.match(/[~`!@#$%^&*()_+={}[\\]/\\\\|?><,]/g)).filter((char: string) => char.match(/[~`!@#$%^&*()_+={}[\\\
    ]/\\\\|?><,]/g)).filter((char: string) => char.match(/[~`!@#$%^&*()_+={}[\\]/\\\
    \\|?><,]/g)).filter((char: string) => char.match(/[~`!@#$%^&*()_+={}[\\]/\\\\\
    |?><,]/g)).filter((char: string) => char.match(/[~`!@#$%^&*()_+={}[\\]/\\\\|?><,]/g)).filter((char:\
    \ string) => char.match(/[~`!@#$%^&*()_+={}[\\]/\\\\|", "\tlet distinct = 0;\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tconst char = string.charAt(i);\n\
    \t\tif (char === char.toUpperCase()) {\n\t\t\tdistinct++;\n\t\t}\n\t\telse if\
    \ (char === char.toLowerCase()) {\n\t\t\tdistinct++;\n\t\t}\n\t}\n\treturn distinct;\n\
    }\n", "  return string\n    .split('')\n    .reduce((acc, cur) => {\n      return\
    \ acc + count_distinct_characters(cur);\n    }, 0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
