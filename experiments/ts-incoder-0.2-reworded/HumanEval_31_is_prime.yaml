name: HumanEval_31_is_prime
language: ts
prompt: "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
  // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n\
  // true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n\
  // false\nfunction is_prime(n: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
  \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
  \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
  \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
  \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
  \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
  \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
  }\n\ntest();"
completions: ["  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  if (n < 2) {\n    return false;\n\
    \  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return\
    \ false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n;\
    \ i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n   \
    \ return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n\
    \ = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i ===\
    \ 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (n < 2) {\n\
    \    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2\
    \ === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let\
    \ i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  if (n < 2) {\n    return false;\n  }\n \
    \ if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n\
    \  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <=\
    \ n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n   \
    \ return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n\
    \ = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i ===\
    \ 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    if (n < 2)\
    \ {\n        return false;\n    }\n    if (n === 2) {\n        return true;\n\
    \    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 ===\
    \ 0) {\n        return true;\n    }\n    let i = 5 - Math.floor(Math.sqrt(n));\n\
    \    for (let j = 2; j < i; j++) {\n        if (n % j === 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "  if (n < 2) {\n    return\
    \ false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n\
    \    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <=\
    \ sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "    if (n < 2) {\n        return false;\n    }\n    if\
    \ (n === 2) {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return\
    \ false;\n    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    if (n\
    \ % 5 === 0) {\n        return false;\n    }\n    const i = Math.floor(Math.sqrt(n));\n\
    \    for (let k = i; k > 2; k--) {\n        if (n % k === 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    if (n < 2) {\n      \
    \  return false;\n    }\n    if (n === 2) {\n        return true;\n    }\n   \
    \ if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n \
    \       return true;\n    }\n    let i = 5; // n is odd, so start at 5\n    while\
    \ (i > 1 && n % i === 0) {\n        i--;\n    }\n    // i now holds 5 or 6 (whichever\
    \ is closer to 3)\n    if (i > 2) {\n        return false;\n    }\n    // 6 is\
    \ divisible by 2, so 6,6,6,6 are all prime.\n    if (n === 6) {\n        return\
    \ true;\n    }\n    // 6 is not divisible by any primes less than 7, so 6,6,6,6,6,6\
    \ is not prime.\n    if (n % 6 === 0 && n !== 6) {\n        return false;\n  \
    \  }\n    // If we got this far, there are primes up to 7 (including 7).\n   \
    \ // The first prime that is greater than 7 is 7.\n    // 7 is divisible by 2,\
    \ so 7,7,7,7 are all prime.\n    if (n === 7) {\n        return true;\n    }\n\
    \    // 7 is not divisible by any primes less than 7, so 7,7,7,7,7,7 are not prime.\n\
    \    if (n % 7 === 0 && n !== 7) {\n        return false;\n    }\n    // If we\
    \ got this far, there are primes up to 10 (including 10).\n    // The first prime\
    \ that is greater than 10 is 10.\n    // 10 is divisible by 2, so 10,10,10,10\
    \ are all prime.\n    if (n === 10) {\n        return true;\n    }\n    // 10\
    \ is not divisible by any primes less than 10, so 10,10,10,10,10,10 are not prime.\n\
    \    if (n % 10 === 0 && n !== 10) {\n        return false;\n    }\n    // If\
    \ we got this far, there are primes up to 20 (including 20).\n    // The first\
    \ prime that is greater than 20 is 20.\n    // 20 is divisible by 2, so 20,20,20,20\
    \ are all prime.\n    if (n === 20) {\n        return true;\n    }\n    // 20\
    \ is not divisible by any primes less than 20, so 20,20,20,20,20,20 are not prime.\n\
    \    if (n % 20 === 0 && n !== 20) {\n        return false;\n    }\n    // If\
    \ we got this far, there are primes up to 100 (including 100).\n    // The first\
    \ prime that is greater than 100 is 100.\n    // 100 is divisible by 2, so 100,100,100,100\
    \ are all prime.\n    if (n === 100) {\n        return true;\n    }\n    // 100\
    \ is not divisible by any primes less than 100, so 100,100,100,100,100 are not\
    \ prime.\n    if (n % 100 === 0 && n !== 100) {\n        return false;\n    }\n\
    \    // If we got this far, there are primes up to 200 (including 200", "  if\
    \ (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
    \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  if (n < 2) {\n    return false;\n\
    \  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return\
    \ false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n;\
    \ i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n   \
    \ return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n\
    \ = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i ===\
    \ 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (n < 2) {\n\
    \    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2\
    \ === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n \
    \ }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "    if (n < 2) {\n        return\
    \ false;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if (n %\
    \ 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return\
    \ true;\n    }\n    let i = 5 - Math.floor(Math.sqrt(n));\n    for (let j = 0;\
    \ j < i; j++) {\n        if (n % i === 0) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\n", "  if (n < 2) {\n    return false;\n  }\n\
    \  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n\
    \  }\n  const sqrt_n = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt_n;\
    \ i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n   \
    \ return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n\
    \ = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if\
    \ (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if\
    \ (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
    \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  if (n < 2) {\n    return false;\n\
    \  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return\
    \ false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0)\
    \ {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  if\
    \ (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return\
    \ true;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 ===\
    \ 0) {\n    return true;\n  }\n  if (n % 23 === 0) {\n    return false;\n  }\n\
    \  if (n % 29 === 0) {\n    return true;\n  }\n  if (n % 37 === 0) {\n    return\
    \ false;\n  }\n  if (n % 43 === 0) {\n    return true;\n  }\n  if (n % 53 ===\
    \ 0) {\n    return false;\n  }\n  if (n % 63 === 0) {\n    return true;\n  }\n\
    \  if (n % 73 === 0) {\n    return false;\n  }\n  if (n % 83 === 0) {\n    return\
    \ true;\n  }\n  if (n % 93 === 0) {\n    return false;\n  }\n  if (n % 103 ===\
    \ 0) {\n    return true;\n  }\n  if (n % 113 === 0) {\n    return false;\n  }\n\
    \  if (n % 123 === 0) {\n    return true;\n  }\n  if (n % 133 === 0) {\n    return\
    \ true;\n  }\n  if (n % 137 === 0) {\n    return false;\n  }\n  if (n % 139 ===\
    \ 0) {\n    return true;\n  }\n  if (n % 143 === 0) {\n    return false;\n  }\n\
    \  if (n % 147 === 0) {\n    return true;\n  }\n  if (n % 149 === 0) {\n    return\
    \ false;\n  }\n  if (n % 153 === 0) {\n    return true;\n  }\n  if (n % 157 ===\
    \ 0) {\n    return false;\n  }\n  if (n % 159 === 0) {\n    return true;\n  }\n\
    \  if (n % 163 === 0) {\n    return false;\n  }\n  if (n % 167 === 0) {\n    return\
    \ true;\n  }\n  if (n % 169 === 0) {\n    return false;\n  }\n  if (n % 173 ===\
    \ 0) {\n    return true;\n  }\n  if (n % 177 === 0) {\n    return false;\n  }\n\
    \  if (n % 179 === 0) {\n    return true;\n  }\n  if (n % 183 === 0) {\n    return\
    \ false;\n  }\n  if (n % 187 === 0) {\n    return true;\n  }\n  if (n % 189 ===\
    \ 0) {\n    return false;\n  }\n  if (n % 193 === 0) {\n    return true;\n  }\n\
    \  if (n % 197 === 0) {\n    return false;\n  }\n  if (n % 199 === 0) {\n    return\
    \ true;\n  }\n  if (n % 203 === 0) {\n    return false;\n  }\n  if (n % 207 ===\
    \ 0) {\n    return true;\n  }\n  if (n % 209 === 0) {\n    return false;\n  }\n\
    \  if (n % 211 === 0) {\n    return true;\n  }\n  if (n % 213 === 0) {\n    return\
    \ false;\n  }\n  if (n % 217 === 0) {\n    return true;\n  }\n  if (n % 219 ===\
    \ 0) {\n    return false;\n  }\n  if (n % 223 === 0) {\n    return true;\n  }\n\
    \  if (n % 227 === 0) {\n    return false;\n  }\n  if (n % 229 === 0) {\n    return\
    \ true;\n  }\n  if (n % 233 === 0) {\n    return false;\n  }\n  if (n % 237 ===\
    \ 0) {\n", "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
