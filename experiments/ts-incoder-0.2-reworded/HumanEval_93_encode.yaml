name: HumanEval_93_encode
language: ts
prompt: "//Write a function that takes a message, and encodes in such a \n// way that\
  \ it swaps case of all letters, replaces all vowels in \n// the message with the\
  \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
  \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
  \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
  tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
  YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
  \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
  k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
completions: ["    let result = \"\";\n    for (let i = 0; i < message.length; i++)\
    \ {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n     \
    \   let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n\
    \            let vowelsBefore = message.substr(0, vowelIndex).split(\"\");\n \
    \           let vowelsAfter = message.substr(vowelIndex + 1).split(\"\");\n  \
    \          let vowelsBeforeIndex = vowelsBefore.indexOf(letter);\n           \
    \ let vowelsAfterIndex = vowelsAfter.indexOf(letter);\n            if (vowelsBeforeIndex\
    \ > -1) {\n                let beforeLetter = vowelsBefore[vowelsBeforeIndex];\n\
    \                let afterLetter = vowelsAfter[vowelsAfterIndex];\n          \
    \      let newLetter = beforeLetter + letter + afterLetter;\n                result\
    \ += newLetter;\n            } else {\n                result += letter;\n   \
    \         }\n        } else {\n            result += letter;\n        }\n    }\n\
    \    return result;\n}\n", "  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      newMessage += letter;\n      i++;\n    }\
    \ else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    } else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n\
    }\n", "  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n  \
    \  let letter = message[i];\n    let vowels = \"aeiouAEIOU\";\n    let vowelIndex\
    \ = vowels.indexOf(letter);\n    if (vowelIndex === -1) {\n      result += letter;\n\
    \    } else {\n      let vowelIndex2 = vowels.indexOf(message[vowelIndex + 1]);\n\
    \      result += vowels[vowelIndex2] + letter;\n    }\n  }\n  return result;\n\
    }\n", "    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        encodedMessage += letter.toUpperCase();\n\
    \        let vowelIndex = letter.charCodeAt(0) - 65;\n        encodedMessage +=\
    \ vowelIndex === 0 ? letter : letter.charAt(vowelIndex - 2);\n    }\n    return\
    \ encodedMessage;\n}\n", "    let newMessage = \"\";\n    for (let i = 0; i <\
    \ message.length; i++) {\n        let letter = message[i];\n        let newLetter\
    \ = letter;\n        let vowels = \"aeiouAEIOU\";\n        if (vowels.indexOf(letter)\
    \ > -1) {\n            let index = vowels.indexOf(letter);\n            newLetter\
    \ = vowels[index + 1];\n        }\n        newMessage += newLetter;\n    }\n \
    \   return newMessage;\n}\n", "  let newMessage = message;\n  for (let i = 0;\
    \ i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter\
    \ = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i'\
    \ || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter,\
    \ nextLetter);\n    }\n  }\n  return newMessage;\n}\n", "    let newMessage =\
    \ \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter =\
    \ message[i];\n        let letterIndex = alphabet.indexOf(letter);\n        if\
    \ (letterIndex === -1) {\n            letterIndex = alphabet.indexOf(letter.toUpperCase());\n\
    \        }\n        if (letterIndex === -1) {\n            letterIndex = alphabet.indexOf(letter.toLowerCase());\n\
    \        }\n        if (letterIndex === -1) {\n            letterIndex = alphabet.indexOf(\"\
    _\");\n        }\n        newMessage += alphabet[letterIndex + 2];\n    }\n  \
    \  return newMessage;\n}\n", "  let result: string = \"\";\n  for (let i = 0;\
    \ i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n \
    \   const vowels = \"aeiou\";\n    const vowelIndex = vowels.indexOf(letter);\n\
    \    if (vowelIndex === -1) {\n      result += letter;\n    } else {\n      const\
    \ vowelIndex2 = vowelIndex + 1;\n      const letter2 = vowels.charAt(vowelIndex2);\n\
    \      result += letter2;\n    }\n  }\n  return result;\n}\n", "  let result =\
    \ \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result\
    \ += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n", "    let\
    \ result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let\
    \ letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter\
    \ === \"i\" || letter === \"o\" || letter === \"u\") {\n            result +=\
    \ letter;\n        } else {\n            result += letter.charCodeAt(0) - 96;\n\
    \        }\n    }\n    return result;\n}\n", "    let result = \"\";\n    for\
    \ (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n \
    \       if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n        } else\
    \ {\n            let index = alphabet.indexOf(letter);\n            if (index\
    \ > -1) {\n                let nextLetter = alphabet[index + 1];\n           \
    \     result += nextLetter;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    let newMessage = message;\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message.charAt(i);\n        let nextLetter = message.charAt(i\
    \ + 1);\n        newMessage = newMessage.replace(letter, nextLetter);\n    }\n\
    \    return newMessage;\n}\n", "    let newMessage = \"\";\n    for (let i = 0;\
    \ i < message.length; i++) {\n        let letter = message[i];\n        let newLetter\
    \ = letter;\n        let vowels = \"AEIOUaeiou\";\n        for (let j = 0; j <\
    \ vowels.length; j++) {\n            if (letter === vowels[j]) {\n           \
    \     newLetter = vowels[j + 1];\n                break;\n            }\n    \
    \    }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n</code>\n\
    <|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't work if you have a string\
    \ like `'aA'`.\n<|/ c |>\n<| c |>\nIt doesn't work because you didn't account\
    \ for that case. `'aA'` should return `'aA'` but your code returns `'aA'`.\n<|/\
    \ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out. I've updated\
    \ my answer to account for that case.\n<|/ c |>\n<| a dscore=0 |>\n<code>", " \
    \ let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const\
    \ letter = message[i];\n    const vowels = \"aeiouAEIOU\";\n    const index =\
    \ vowels.indexOf(letter);\n    if (index >= 0) {\n      const vowelIndex = index\
    \ - 2;\n      const nextLetter = vowels[vowelIndex];\n      result += nextLetter;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n", " \
    \ let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter\
    \ = message[i];\n    if (letter === \"a\") {\n      letter = \"t\";\n    } else\
    \ if (letter === \"e\") {\n      letter = \"k\";\n    } else if (letter === \"\
    i\") {\n      letter = \"s\";\n    } else if (letter === \"o\") {\n      letter\
    \ = \"c\";\n    } else if (letter === \"u\") {\n      letter = \"g\";\n    }\n\
    \    result += letter;\n  }\n  return result;\n}\n", "    let newMessage = \"\"\
    ;\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        newMessage += letter.charCodeAt(0) - 65 + letter.charCodeAt(1) - 64;\n\
    \    }\n    return newMessage;\n}\n", "    let result = \"\";\n    for (let i\
    \ = 0; i < message.length; i++) {\n        let letter = message[i];\n        let\
    \ index = alphabet.indexOf(letter);\n        if (index > -1) {\n            let\
    \ nextLetter = alphabet[index + 1];\n            if (nextLetter === letter) {\n\
    \                result += nextLetter;\n            } else {\n               \
    \ result += letter;\n            }\n        } else {\n            result += letter;\n\
    \        }\n    }\n    return result;\n}\n", "  let newMessage = \"\";\n  for\
    \ (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n   \
    \ const nextLetter = message[i + 1];\n    const nextNextLetter = message[i + 2];\n\
    \    const nextNextNextLetter = message[i + 3];\n    const nextNextNextNextLetter\
    \ = message[i + 4];\n    const nextNextNextNextNextLetter = message[i + 5];\n\
    \    const nextNextNextNextNextNextLetter = message[i + 6];\n    const nextNextNextNextNextNextNextLetter\
    \ = message[i + 7];\n    const nextNextNextNextNextNextNextNextLetter = message[i\
    \ + 8];\n    const nextNextNextNextNextNextNextNextNextLetter = message[i + 9];\n\
    \    const nextNextNextNextNextNextNextNextNextLetter = message[i + 10];\n   \
    \ const nextNextNextNextNextNextNextNextNextNextLetter = message[i + 11];\n  \
    \  const nextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 12];\n\
    \    const nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i\
    \ + 13];\n    const nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i\
    \ + 14];\n    const nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i\
    \ + 15];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 16];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 17];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 18];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 19];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 20];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 21];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 22];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 23];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 24];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 25];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 26];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext",
  "    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n      \
    \  let letter = message[i];\n        let vowels = \"aeiouAEIOU\";\n        let\
    \ index = vowels.indexOf(letter);\n        if (index != -1) {\n            let\
    \ nextLetter = vowels[index + 1];\n            result += nextLetter;\n       \
    \ } else {\n            result += letter;\n        }\n    }\n    return result;\n\
    }\n", "  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n  \
    \  let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter\
    \ === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n\
    \    } else {\n      let index = alphabet.indexOf(letter);\n      let nextLetter\
    \ = alphabet[index + 1];\n      result += nextLetter;\n    }\n  }\n  return result;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
