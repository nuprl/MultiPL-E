language: ts
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n\
    \        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1)\
    \ {\n            let vowelsBefore = message.substr(0, vowelIndex).split(\"\");\n\
    \            let vowelsAfter = message.substr(vowelIndex + 1).split(\"\");\n \
    \           let vowelsBeforeIndex = vowelsBefore.indexOf(letter);\n          \
    \  let vowelsAfterIndex = vowelsAfter.indexOf(letter);\n            if (vowelsBeforeIndex\
    \ > -1) {\n                let beforeLetter = vowelsBefore[vowelsBeforeIndex];\n\
    \                let afterLetter = vowelsAfter[vowelsAfterIndex];\n          \
    \      let newLetter = beforeLetter + letter + afterLetter;\n                result\
    \ += newLetter;\n            } else {\n                result += letter;\n   \
    \         }\n        } else {\n            result += letter;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmps5i0a0to.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps5i0a0to.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      newMessage += letter;\n      i++;\n    }\
    \ else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    } else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvgw2hmx0.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvgw2hmx0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let vowels = \"aeiouAEIOU\";\n   \
    \ let vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex === -1) {\n   \
    \   result += letter;\n    } else {\n      let vowelIndex2 = vowels.indexOf(message[vowelIndex\
    \ + 1]);\n      result += vowels[vowelIndex2] + letter;\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TundefinedEST'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8l8cs392.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8l8cs392.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TundefinedEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        encodedMessage += letter.toUpperCase();\n\
    \        let vowelIndex = letter.charCodeAt(0) - 65;\n        encodedMessage +=\
    \ vowelIndex === 0 ? letter : letter.charAt(vowelIndex - 2);\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq6r_uald.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq6r_uald.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738379
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        let vowels = \"aeiouAEIOU\";\n        if (vowels.indexOf(letter) > -1)\
    \ {\n            let index = vowels.indexOf(letter);\n            newLetter =\
    \ vowels[index + 1];\n        }\n        newMessage += newLetter;\n    }\n   \
    \ return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqcs3z2_w.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqcs3z2_w.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o'\
    \ || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n\
    \    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8g6w6zc3.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8g6w6zc3.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let letterIndex = alphabet.indexOf(letter);\n\
    \        if (letterIndex === -1) {\n            letterIndex = alphabet.indexOf(letter.toUpperCase());\n\
    \        }\n        if (letterIndex === -1) {\n            letterIndex = alphabet.indexOf(letter.toLowerCase());\n\
    \        }\n        if (letterIndex === -1) {\n            letterIndex = alphabet.indexOf(\"\
    _\");\n        }\n        newMessage += alphabet[letterIndex + 2];\n    }\n  \
    \  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxl8z2rh6.ts(15,27): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpxl8z2rh6.ts(17,27): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpxl8z2rh6.ts(20,27): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpxl8z2rh6.ts(23,27): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpxl8z2rh6.ts(25,23): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = \"\
    aeiou\";\n    const vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex ===\
    \ -1) {\n      result += letter;\n    } else {\n      const vowelIndex2 = vowelIndex\
    \ + 1;\n      const letter2 = vowels.charAt(vowelIndex2);\n      result += letter2;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tist'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprygvqk1i.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprygvqk1i.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tist',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738379
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpacanj9qp.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpacanj9qp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            result += letter.charCodeAt(0)\
    \ - 96;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzmln8aj_.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzmln8aj_.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            if (index > -1) {\n                let nextLetter = alphabet[index\
    \ + 1];\n                result += nextLetter;\n            }\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplb8a8uln.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmplb8a8uln.ts(20,34): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message.charAt(i);\n        let nextLetter = message.charAt(i\
    \ + 1);\n        newMessage = newMessage.replace(letter, nextLetter);\n    }\n\
    \    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'EST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp730ces6_.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp730ces6_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'EST',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        let vowels = \"AEIOUaeiou\";\n        for (let j = 0; j < vowels.length;\
    \ j++) {\n            if (letter === vowels[j]) {\n                newLetter =\
    \ vowels[j + 1];\n                break;\n            }\n        }\n        newMessage\
    \ += newLetter;\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm\
    \ |>\n<| c |>\nThis doesn't work if you have a string like `'aA'`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work because you didn't account for that case. `'aA'` should\
    \ return `'aA'` but your code returns `'aA'`.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. Thanks for pointing that out. I've updated my answer to account for that\
    \ case.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeyc6sczy.ts(27,2): error TS1110: Type expected.

    ../../../../../tmp/tmpeyc6sczy.ts(27,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpeyc6sczy.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpeyc6sczy.ts(28,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpeyc6sczy.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpeyc6sczy.ts(29,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpeyc6sczy.ts(30,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpeyc6sczy.ts(30,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpeyc6sczy.ts(30,47): error TS1005: '';'' expected.

    ../../../../../tmp/tmpeyc6sczy.ts(30,49): error TS1005: '';'' expected.

    ../../../../../tmp/tmpeyc6sczy.ts(30,52): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpeyc6sczy.ts(31,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpeyc6sczy.ts(31,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpeyc6sczy.ts(32,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpeyc6sczy.ts(32,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpeyc6sczy.ts(33,4): error TS1005: '';'' expected.

    ../../../../../tmp/tmpeyc6sczy.ts(33,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpeyc6sczy.ts(33,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmpeyc6sczy.ts(33,36): error TS1005: '';'' expected.

    ../../../../../tmp/tmpeyc6sczy.ts(33,44): error TS1005: '';'' expected.

    ../../../../../tmp/tmpeyc6sczy.ts(33,48): error TS1005: ''('' expected.

    ../../../../../tmp/tmpeyc6sczy.ts(33,53): error TS1005: '';'' expected.

    ../../../../../tmp/tmpeyc6sczy.ts(33,57): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpeyc6sczy.ts(33,66): error TS1005: '';'' expected.

    ../../../../../tmp/tmpeyc6sczy.ts(33,73): error TS1005: '';'' expected.

    ../../../../../tmp/tmpeyc6sczy.ts(33,87): error TS1005: '';'' expected.

    ../../../../../tmp/tmpeyc6sczy.ts(33,91): error TS1005: '';'' expected.

    ../../../..'
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const vowels = \"aeiouAEIOU\";\n\
    \    const index = vowels.indexOf(letter);\n    if (index >= 0) {\n      const\
    \ vowelIndex = index - 2;\n      const nextLetter = vowels[vowelIndex];\n    \
    \  result += nextLetter;\n    } else {\n      result += letter;\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TuST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpu_k45g0k.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu_k45g0k.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TuST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      letter\
    \ = \"t\";\n    } else if (letter === \"e\") {\n      letter = \"k\";\n    } else\
    \ if (letter === \"i\") {\n      letter = \"s\";\n    } else if (letter === \"\
    o\") {\n      letter = \"c\";\n    } else if (letter === \"u\") {\n      letter\
    \ = \"g\";\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5j3uxyj8.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5j3uxyj8.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage += letter.charCodeAt(0)\
    \ - 65 + letter.charCodeAt(1) - 64;\n    }\n    return newMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcogwhj3q.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcogwhj3q.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738379
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n\
    \        if (index > -1) {\n            let nextLetter = alphabet[index + 1];\n\
    \            if (nextLetter === letter) {\n                result += nextLetter;\n\
    \            } else {\n                result += letter;\n            }\n    \
    \    } else {\n            result += letter;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphvokmjo6.ts(15,21): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmphvokmjo6.ts(17,30): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    const nextNextLetter = message[i + 2];\n    const nextNextNextLetter = message[i\
    \ + 3];\n    const nextNextNextNextLetter = message[i + 4];\n    const nextNextNextNextNextLetter\
    \ = message[i + 5];\n    const nextNextNextNextNextNextLetter = message[i + 6];\n\
    \    const nextNextNextNextNextNextNextLetter = message[i + 7];\n    const nextNextNextNextNextNextNextNextLetter\
    \ = message[i + 8];\n    const nextNextNextNextNextNextNextNextNextLetter = message[i\
    \ + 9];\n    const nextNextNextNextNextNextNextNextNextLetter = message[i + 10];\n\
    \    const nextNextNextNextNextNextNextNextNextNextLetter = message[i + 11];\n\
    \    const nextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 12];\n\
    \    const nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i\
    \ + 13];\n    const nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i\
    \ + 14];\n    const nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i\
    \ + 15];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 16];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 17];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 18];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 19];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 20];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 21];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 22];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 23];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 24];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 25];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = message[i + 26];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfc5s5li7.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\"\
    ;\n        let index = vowels.indexOf(letter);\n        if (index != -1) {\n \
    \           let nextLetter = vowels[index + 1];\n            result += nextLetter;\n\
    \        } else {\n            result += letter;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp29mf_p59.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp29mf_p59.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      let nextLetter = alphabet[index + 1];\n      result += nextLetter;\n  \
    \  }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbofbu1qr.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpbofbu1qr.ts(19,24): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 65;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1941819'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppcps23uq.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmppcps23uq.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1941819',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n\
    \    if (index === -1) {\n      result += letter;\n    } else {\n      result\
    \ += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf1nti7ny.ts(15,17): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpf1nti7ny.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpf1nti7ny.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl_4y6hw0.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl_4y6hw0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n\
    \        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex ===\
    \ -1) {\n            result += letter;\n        } else {\n            let vowelIndex\
    \ = vowels.indexOf(message[vowelIndex + 1]);\n            if (vowelIndex === -1)\
    \ {\n                result += letter;\n            } else {\n               \
    \ let vowelIndex = vowels.indexOf(message[vowelIndex + 2]);\n                if\
    \ (vowelIndex === -1) {\n                    result += letter;\n             \
    \   } else {\n                    let vowelIndex = vowels.indexOf(message[vowelIndex\
    \ + 3]);\n                    if (vowelIndex === -1) {\n                     \
    \   result += letter;\n                    } else {\n                        let\
    \ vowelIndex = vowels.indexOf(message[vowelIndex + 4]);\n                    \
    \    if (vowelIndex === -1) {\n                            result += letter;\n\
    \                        } else {\n                            let vowelIndex\
    \ = vowels.indexOf(message[vowelIndex + 5]);\n                            if (vowelIndex\
    \ === -1) {\n                                result += letter;\n             \
    \               } else {\n                                let vowelIndex = vowels.indexOf(message[vowelIndex\
    \ + 6]);\n                                if (vowelIndex === -1) {\n         \
    \                           result += letter;\n                              \
    \  } else {\n                                    let vowelIndex = vowels.indexOf(message[vowelIndex\
    \ + 7]);\n                                    if (vowelIndex === -1) {\n     \
    \                                   result += letter;\n                      \
    \              } else {\n                                        let vowelIndex\
    \ = vowels.indexOf(message[vowelIndex + 8]);\n                               \
    \         if (vowelIndex === -1) {\n                                         \
    \   result += letter;\n                                        } else {\n    \
    \                                        let vowelIndex = vowels.indexOf(message[vowelIndex\
    \ + 9]);\n                                            if (vowelIndex === -1) {\n\
    \                                                result += letter;\n         \
    \                                   } else {\n                               \
    \                 let vowelIndex = vowels.indexOf(message[vowelIndex + 10]);\n\
    \                                                if (vowelIndex === -1) {\n  \
    \                                                  result += letter;\n       \
    \                                         } else {\n                         \
    \                           let vowelIndex = vowels.indexOf(message[vowelIndex\
    \ + 11]);\n                                                    if (vowelIndex\
    \ === -1) {\n                                                        result +=\
    \ letter;\n                                                    } else {\n    \
    \                                                    let vowelIndex = vowels.indexOf(message[vowelIndex\
    \ + 12]);\n                                                        if (vowelIndex\
    \ === -1) {\n                                                            result\
    \ += letter;\n                                                        } else {\n\
    \                                                            let vowelIndex =\
    \ vowels.indexOf(message[vowelIndex + 13]);\n                                \
    \                            if (vowelIndex === -1) {\n                      \
    \                                          result += letter;\n               \
    \                                             } else {\n                     \
    \                                           let vowelIndex = vowels.indexOf(message[vowelIndex\
    \ + 14]);\n                                                                if\
    \ (vowelIndex === -1) {\n                                                    \
    \                result += letter;\n                                         \
    \                       } else {\n                                           \
    \                         let vowelIndex = vowels.indexOf(message[vowelIndex +\
    \ 15]);\n                                                                    if\
    \ (vowelIndex === -1) {\n                                                    \
    \                    result += letter;\n                                     \
    \                               } else {\n                                   \
    \                                     let vowelIndex = vowels.indexOf(message[vowelIndex\
    \ + 16]);\n                                                                  \
    \      if (vowel\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8klm816s.ts(82,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmp8klm816s.ts(95,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        } else if (letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result\
    \ += letter.toUpperCase();\n            i++;\n        } else {\n            result\
    \ += letter;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpylll_cyp.ts(28,2): error TS1110: Type expected.

    ../../../../../tmp/tmpylll_cyp.ts(28,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpylll_cyp.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpylll_cyp.ts(29,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpylll_cyp.ts(30,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpylll_cyp.ts(30,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpylll_cyp.ts(32,9): error TS1005: '';'' expected.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpacanj9qp.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpacanj9qp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"A\" || letter ===\
    \ \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n     \
    \       result += letter.toUpperCase();\n            i++;\n        }\n       \
    \ else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n          \
    \  i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\") {\n            result +=\
    \ letter.toUpperCase();\n            i++;\n        }\n        else if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\") {\n            result += letter;\n            i++;\n        }\n \
    \       else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \       result += letter;\n            i++;\n        }\n        else if (letter\
    \ === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter\
    \ === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"A\" || letter ===\
    \ \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n     \
    \       result += letter.toUpperCase();\n            i++;\n        }\n       \
    \ else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n          \
    \  i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\") {\n            result +=\
    \ letter.toUpperCase();\n            i++;\n        }\n        else if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\") {\n            result += letter;\n            i++;\n        }\n \
    \       else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjnkz3hnc.ts(72,102): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpjnkz3hnc.ts(73,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpjnkz3hnc.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            result += alphabet[(index + 1) % alphabet.length];\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp71hm40vr.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp71hm40vr.ts(19,23): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp71hm40vr.ts(19,46): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    let nextLetterIndex = alphabet.indexOf(nextLetter);\n    let nextLetterLetter\
    \ = alphabet[nextLetterIndex + 1];\n    let nextLetterLetterIndex = alphabet.indexOf(nextLetterLetter);\n\
    \    let nextLetterLetterLetter = alphabet[nextLetterLetterIndex + 1];\n    let\
    \ nextLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetter);\n  \
    \  let nextLetterLetterLetterLetter = alphabet[nextLetterLetterLetterIndex + 1];\n\
    \    let nextLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetter);\n\
    \    let nextLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterIndex\
    \ + 1];\n    let nextLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetter);\n\
    \    let nextLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterIndex\
    \ + 1];\n    let nextLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetter);\n\
    \    let nextLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterIndex\
    \ + 1];\n    let nextLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetter);\n\
    \    let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterIndex\
    \ + 1];\n    let nextLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetter);\n\
    \    let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterIndex\
    \ + 1];\n    let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n\
    \    let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex\
    \ + 1];\n    let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n\
    \    let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex\
    \ + 1];\n    let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n\
    \    let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex\
    \ + 1];\n    let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n\
    \    let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex\
    \ + 1];\n    let nextLetterLetterLetterLetterLetterLetterIndex = \ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj4e_qpdu.ts(41,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpj4e_qpdu.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      newMessage = newMessage.replace(letter,\
    \ nextLetter);\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaos3ebsd.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpaos3ebsd.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const vowelIndex = letter.charCodeAt(0)\
    \ - 65;\n    const vowel = vowels[vowelIndex];\n    const vowelIndex = letter.charCodeAt(0)\
    \ - 97;\n    const vowel = vowels[vowelIndex];\n    newMessage = newMessage.replace(vowel,\
    \ vowels[vowelIndex + 1]);\n  }\n  return newMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp30lxc9mm.ts(15,11): error TS2451: Cannot redeclare
    block-scoped variable ''vowelIndex''.

    ../../../../../tmp/tmp30lxc9mm.ts(16,11): error TS2451: Cannot redeclare block-scoped
    variable ''vowel''.

    ../../../../../tmp/tmp30lxc9mm.ts(16,19): error TS2552: Cannot find name ''vowels''.
    Did you mean ''vowel''?

    ../../../../../tmp/tmp30lxc9mm.ts(17,11): error TS2451: Cannot redeclare block-scoped
    variable ''vowelIndex''.

    ../../../../../tmp/tmp30lxc9mm.ts(18,11): error TS2451: Cannot redeclare block-scoped
    variable ''vowel''.

    ../../../../../tmp/tmp30lxc9mm.ts(18,19): error TS2552: Cannot find name ''vowels''.
    Did you mean ''vowel''?

    ../../../../../tmp/tmp30lxc9mm.ts(19,44): error TS2552: Cannot find name ''vowels''.
    Did you mean ''vowel''?

    '
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter ===\
    \ 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage\
    \ = newMessage.replace(letter, letter.toUpperCase());\n    }\n  }\n  for (let\
    \ i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u') {\n      newMessage = newMessage.replace(letter, letter.toLowerCase());\n\
    \    }\n  }\n  for (let i = 0; i < message.length; i++) {\n    const letter =\
    \ message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter\
    \ === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n    }\n  }\n  for (let i = 0; i < message.length; i++)\
    \ {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e'\
    \ || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage =\
    \ newMessage.replace(letter, letter.toLowerCase());\n    }\n  }\n  for (let i\
    \ = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u') {\n      newMessage = newMessage.replace(letter, letter.toUpperCase());\n\
    \    }\n  }\n  for (let i = 0; i < message.length; i++) {\n    const letter =\
    \ message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter\
    \ === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter,\
    \ letter.toLowerCase());\n    }\n  }\n  for (let i = 0; i < message.length; i++)\
    \ {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e'\
    \ || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage =\
    \ newMessage.replace(letter, letter.toUpperCase());\n    }\n  }\n  for (let i\
    \ = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u') {\n      newMessage = newMessage.replace(letter, letter.toLowerCase());\n\
    \    }\n  }\n  for (let i = 0; i < message.length; i++) {\n    const letter =\
    \ message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter\
    \ === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n    }\n  }\n  for (let i = 0; i < message.length; i++)\
    \ {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e'\
    \ || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage =\
    \ newMessage.replace(letter, letter.toLowerCase());\n    }\n  }\n  for (let i\
    \ = 0; i < message.length; i++) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0ghiiv_2.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"A\" || letter ===\
    \ \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n     \
    \       result += letter.toUpperCase();\n            i++;\n        }\n       \
    \ else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n          \
    \  i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\") {\n            result +=\
    \ letter.toUpperCase();\n            i++;\n        }\n        else if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\") {\n            result += letter;\n            i++;\n        }\n \
    \       else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \       result += letter;\n            i++;\n        }\n        else if (letter\
    \ === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter\
    \ === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"A\" || letter ===\
    \ \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n     \
    \       result += letter.toUpperCase();\n            i++;\n        }\n       \
    \ else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n          \
    \  i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\") {\n            result +=\
    \ letter.toUpperCase();\n            i++;\n        }\n        else if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\") {\n            result += letter;\n            i++;\n        }\n \
    \       else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjnkz3hnc.ts(72,102): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpjnkz3hnc.ts(73,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpjnkz3hnc.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n\
    \    if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter ===\
    \ \"O\" || letter === \"U\") {\n      encodedLetter = letter;\n    }\n    for\
    \ (let j = 0; j < encodedLetter.length; j++) {\n      let vowel = encodedLetter[j];\n\
    \      let vowelIndex = vowel.charCodeAt(0) - 65;\n      let vowelCount = 1;\n\
    \      for (let k = 0; k < vowelIndex; k++) {\n        vowelCount += 2;\n    \
    \  }\n      if (vowelCount === 2) {\n        encodedMessage += vowel;\n      }\n\
    \    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmpw3c9pcs_.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw3c9pcs_.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = english.indexOf(letter);\n\
    \        if (index != -1) {\n            result += swapCase(letter);\n       \
    \     result += english[index + 2];\n        } else {\n            result += letter;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4miscfdy.ts(15,21): error TS2304: Cannot find name
    ''english''.

    ../../../../../tmp/tmp4miscfdy.ts(17,23): error TS2304: Cannot find name ''swapCase''.

    ../../../../../tmp/tmp4miscfdy.ts(18,23): error TS2304: Cannot find name ''english''.

    '
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"A\" || letter ===\
    \ \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n     \
    \       result += letter.toUpperCase();\n            i++;\n        }\n       \
    \ else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n          \
    \  i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\") {\n            result +=\
    \ letter.toUpperCase();\n            i++;\n        }\n        else if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\") {\n            result += letter;\n            i++;\n        }\n \
    \       else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \       result += letter;\n            i++;\n        }\n        else if (letter\
    \ === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter\
    \ === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"A\" || letter ===\
    \ \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n     \
    \       result += letter.toUpperCase();\n            i++;\n        }\n       \
    \ else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n          \
    \  i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\") {\n            result +=\
    \ letter.toUpperCase();\n            i++;\n        }\n        else if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\") {\n            result += letter;\n            i++;\n        }\n \
    \       else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjnkz3hnc.ts(72,102): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpjnkz3hnc.ts(73,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpjnkz3hnc.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        } else if (letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result\
    \ += letter.toUpperCase();\n            i++;\n        } else {\n            result\
    \ += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvs0x_aho.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvs0x_aho.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            if (index > 0) {\n                let letter2 = alphabet[index -\
    \ 1];\n                result += letter2;\n            }\n        }\n    }\n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaw___ap4.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpaw___ap4.ts(20,31): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let letterIndex = letter.charCodeAt(0)\
    \ - 97;\n        let vowelIndex = letterIndex + 2;\n        if (letterIndex <\
    \ 0 || letterIndex > 25) {\n            result += letter;\n        } else {\n\
    \            result += String.fromCharCode(vowelIndex);\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmbysgak5.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmbysgak5.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      newMessage += letter;\n      i++;\n    }\
    \ else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    } else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvgw2hmx0.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvgw2hmx0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp00zph172.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp00zph172.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ newMessage += letter;\n    } else {\n      newMessage += letter.charCodeAt(0)\
    \ - 65 + 2;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2162021'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdcfit1ij.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdcfit1ij.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2162021',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const vowels = \"aeiouAEIOU\";\n\
    \    const index = vowels.indexOf(letter);\n    if (index > -1) {\n      result\
    \ += vowels[index + 2];\n    } else {\n      result += letter;\n    }\n  }\n \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1oy9pd4w.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1oy9pd4w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    }\n \
    \   if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter ===\
    \ \"O\" || letter === \"U\") {\n      result += letter;\n      i++;\n    }\n \
    \   if (letter === \"a\" || letter === \"A\") {\n      result += letter;\n   \
    \   i++;\n    }\n    if (letter === \"e\" || letter === \"E\") {\n      result\
    \ += letter;\n      i++;\n    }\n    if (letter === \"i\" || letter === \"I\"\
    ) {\n      result += letter;\n      i++;\n    }\n    if (letter === \"o\" || letter\
    \ === \"O\") {\n      result += letter;\n      i++;\n    }\n    if (letter ===\
    \ \"u\" || letter === \"U\") {\n      result += letter;\n      i++;\n    }\n \
    \   if (letter === \"y\" || letter === \"Y\") {\n      result += letter;\n   \
    \   i++;\n    }\n    if (letter === \"h\" || letter === \"H\") {\n      result\
    \ += letter;\n      i++;\n    }\n    if (letter === \"w\" || letter === \"W\"\
    ) {\n      result += letter;\n      i++;\n    }\n    if (letter === \"s\" || letter\
    \ === \"S\") {\n      result += letter;\n      i++;\n    }\n    if (letter ===\
    \ \"d\" || letter === \"D\") {\n      result += letter;\n      i++;\n    }\n \
    \   if (letter === \"f\" || letter === \"F\") {\n      result += letter;\n   \
    \   i++;\n    }\n    if (letter === \"g\" || letter === \"G\") {\n      result\
    \ += letter;\n      i++;\n    }\n    if (letter === \"b\" || letter === \"B\"\
    ) {\n      result += letter;\n      i++;\n    }\n    if (letter === \"p\" || letter\
    \ === \"P\") {\n      result += letter;\n      i++;\n    }\n    if (letter ===\
    \ \"v\" || letter === \"V\") {\n      result += letter;\n      i++;\n    }\n \
    \   if (letter === \"z\" || letter === \"Z\") {\n      result += letter;\n   \
    \   i++;\n    }\n    if (letter === \"x\" || letter === \"X\") {\n      result\
    \ += letter;\n      i++;\n    }\n    if (letter === \"c\" || letter === \"C\"\
    ) {\n      result += letter;\n      i++;\n    }\n    if (letter === \"m\" || letter\
    \ === \"M\") {\n      result += letter;\n      i++;\n    }\n    if (letter ===\
    \ \"n\" || letter === \"N\") {\n      result += letter;\n      i++;\n    }\n \
    \   if (letter \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgqqqa1ol.ts(105,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpgqqqa1ol.ts(118,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n\
    \        if (index > 0) {\n            result += alphabet[(index - 2) % 26];\n\
    \        }\n        result += letter;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbmomap4e.ts(15,21): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpbmomap4e.ts(17,23): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 65 +\
    \ letter.charCodeAt(1) - 64;\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl6r5886x.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl6r5886x.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let vowels: string = \"aeiou\";\n    let messageArray: string[] = message.split(\"\
    \");\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < messageArray.length;\
    \ i++) {\n        let letter: string = messageArray[i];\n        let encodedLetter:\
    \ string = \"\";\n        if (letter.match(/[aeiou]/)) {\n            for (let\
    \ j = 0; j < alphabet.length; j++) {\n                if (alphabet.charAt(j) ==\
    \ letter) {\n                    encodedLetter = alphabet.charAt(j);\n       \
    \         }\n            }\n        } else {\n            for (let j = 0; j <\
    \ alphabet.length; j++) {\n                if (alphabet.charAt(j) == letter) {\n\
    \                    encodedLetter = alphabet.charAt(j);\n                }\n\
    \            }\n        }\n        encodedMessage += encodedLetter;\n    }\n \
    \   return encodedMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpffa3iwlb.ts(36,2): error TS1110: Type expected.

    ../../../../../tmp/tmpffa3iwlb.ts(36,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpffa3iwlb.ts(37,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpffa3iwlb.ts(37,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpffa3iwlb.ts(38,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpffa3iwlb.ts(38,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpffa3iwlb.ts(40,9): error TS1005: '';'' expected.

    '
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n\
    \    if (index === -1) {\n      result += letter;\n    } else {\n      result\
    \ += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf1nti7ny.ts(15,17): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpf1nti7ny.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpf1nti7ny.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let newLetter = letter;\n    let vowels\
    \ = \"AEIOUaeiou\";\n    for (let j = 0; j < vowels.length; j++) {\n      if (letter\
    \ == vowels[j]) {\n        newLetter = vowels[j + 1];\n      }\n    }\n    newMessage\
    \ += newLetter;\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptqoee55t.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptqoee55t.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_hwdpsy4.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl_4y6hw0.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl_4y6hw0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n\
    \        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1)\
    \ {\n            let vowel = vowels[vowelIndex + 1];\n            result += vowel;\n\
    \        } else {\n            result += letter;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl5ij0dhl.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl5ij0dhl.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        } else if (letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result\
    \ += letter.toUpperCase();\n            i++;\n        } else {\n            result\
    \ += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvs0x_aho.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvs0x_aho.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n\
    \        if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            newMessage += letter;\n      \
    \  }\n        else {\n            let nextLetter = message[i + 1];\n         \
    \   newMessage += letter.toUpperCase();\n            if (nextLetter === \"A\"\
    \ || nextLetter === \"E\" || nextLetter === \"I\" || nextLetter === \"O\" || nextLetter\
    \ === \"U\") {\n                newMessage += nextLetter;\n            }\n   \
    \         else {\n                newMessage += letter;\n            }\n     \
    \   }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TTEEESSSTTT'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0qq9e_vx.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0qq9e_vx.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TTEEESSSTTT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738383
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n\
    \        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newLetter = letter.toLowerCase();\n\
    \        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTEST'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8zutkbsq.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8zutkbsq.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738383
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1941819'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeybo4_fi.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeybo4_fi.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1941819',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738383
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let vowels: string = \"aeiou\";\n    let result: string = \"\";\n    for\
    \ (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n \
    \       let index = alphabet.indexOf(letter);\n        if (index >= 0) {\n   \
    \         let nextIndex = index + 1;\n            if (nextIndex < alphabet.length)\
    \ {\n                let nextLetter = alphabet[nextIndex];\n                result\
    \ += nextLetter;\n            }\n        }\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = vowels.indexOf(letter);\n\
    \        if (index >= 0) {\n            let nextIndex = index + 2;\n         \
    \   if (nextIndex < vowels.length) {\n                let nextLetter = vowels[nextIndex];\n\
    \                result += nextLetter;\n            }\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried\
    \ your solution and it works. But I still don't understand why my code doesn't\
    \ work. Could you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\n\
    I added an explanation to the answer.\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ Now I understand why my code doesn't work. Your solution is very elegant and\
    \ concise. Thanks again.\n<|/ c |>\n<| a tags=string,javascript,algorithm |>\n\
    <code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqzxddvjj.ts(39,2): error TS1110: Type expected.

    ../../../../../tmp/tmpqzxddvjj.ts(39,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpqzxddvjj.ts(40,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpqzxddvjj.ts(40,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpqzxddvjj.ts(41,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpqzxddvjj.ts(41,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,12): error TS1005: ''('' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,17): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,27): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,33): error TS1005: '')'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,38): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,47): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,51): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,54): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,65): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,67): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,73): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,76): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,108): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,110): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,122): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,126): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,133): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,141): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,145): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,148): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqzxddvjj.ts(42,153): error TS1005: '';'' expected.

    ../../../.'
  timestamp: 1659738383
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            result += letter.charCodeAt(0)\
    \ - 97;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4sxa9x_c.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4sxa9x_c.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738383
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            result += letter.charCodeAt(0)\
    \ - 97;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4sxa9x_c.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4sxa9x_c.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738383
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\") {\n            newLetter = \"t\";\n        } else\
    \ if (letter === \"e\") {\n            newLetter = \"k\";\n        } else if (letter\
    \ === \"i\") {\n            newLetter = \"s\";\n        } else if (letter ===\
    \ \"o\") {\n            newLetter = \"c\";\n        } else if (letter === \"u\"\
    ) {\n            newLetter = \"g\";\n        } else if (letter === \"y\") {\n\
    \            newLetter = \"g\";\n        } else if (letter === \"o\") {\n    \
    \        newLetter = \"c\";\n        } else if (letter === \"a\") {\n        \
    \    newLetter = \"t\";\n        }\n        newMessage += newLetter;\n    }\n\
    \    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6yreou6b.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6yreou6b.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738383
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n\
    \        let vowels = \"AEIOUaeiou\";\n        for (let j = 0; j < vowels.length;\
    \ j++) {\n            if (letter === vowels[j]) {\n                let vowelIndex\
    \ = j;\n                let vowelPosition = vowelIndex - 2;\n                encodedLetter\
    \ = encodedLetter.toUpperCase();\n                encodedLetter = encodedLetter.replace(vowels[j],\
    \ vowels[vowelPosition]);\n            }\n        }\n        encodedMessage +=\
    \ encodedLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TundefinedST'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp34z1f70e.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp34z1f70e.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TundefinedST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738383
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        result += letter.toUpperCase();\n\
    \    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        let index = letter.charCodeAt(0) - 'A'.charCodeAt(0);\n        result\
    \ += String.fromCharCode('A'.charCodeAt(0) + index);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTEST'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptkyjp3kf.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmptkyjp3kf.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738383
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n\
    \    if (index === -1) {\n      result += letter;\n    } else {\n      result\
    \ += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf1nti7ny.ts(15,17): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpf1nti7ny.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpf1nti7ny.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl_4y6hw0.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl_4y6hw0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           newMessage += letter;\n        } else {\n            newMessage +=\
    \ letter.charCodeAt(0) - 96;\n        }\n    }\n    return newMessage;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2c2o7ujy.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2c2o7ujy.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738383
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp00zph172.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp00zph172.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpviz7dtwy.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpviz7dtwy.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738384
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpviz7dtwy.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpviz7dtwy.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738384
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let encodedLetter = letter;\n    if\
    \ (letter === \"a\") {\n      encodedLetter = \"t\";\n    } else if (letter ===\
    \ \"e\") {\n      encodedLetter = \"k\";\n    } else if (letter === \"i\") {\n\
    \      encodedLetter = \"s\";\n    } else if (letter === \"o\") {\n      encodedLetter\
    \ = \"c\";\n    } else if (letter === \"u\") {\n      encodedLetter = \"g\";\n\
    \    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcupslztj.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcupslztj.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738383
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n\
    \        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex >= 0)\
    \ {\n            letter = vowels[vowelIndex + 2];\n        }\n        result +=\
    \ letter;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpg33gdnz4.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg33gdnz4.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738384
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpviz7dtwy.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpviz7dtwy.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738384
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            result += letter.toUpperCase();\n        } else {\n         \
    \   let index = alphabet.indexOf(letter);\n            if (index === -1) {\n \
    \               result += letter;\n            } else {\n                let nextLetter\
    \ = alphabet[index + 1];\n                result += nextLetter.toUpperCase();\n\
    \            }\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpreeh819i.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpreeh819i.ts(22,34): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738383
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const vowels = \"AEIOUaeiou\";\n\
    \    const index = vowels.indexOf(letter);\n    if (index >= 0) {\n      const\
    \ nextLetter = vowels[index + 1];\n      result += nextLetter;\n    } else {\n\
    \      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1p91hz6h.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1p91hz6h.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738383
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o'\
    \ || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n\
    \    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfdpd0sl0.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfdpd0sl0.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738384
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n    }\n    for (let i = 0; i < message.length; i++)\
    \ {\n        let letter = message[i];\n        let index = letter.charCodeAt(0)\
    \ - 65;\n        newMessage = newMessage.replace(letter, String.fromCharCode(index\
    \ + 2));\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x15\\x06\\\
    x14\\x15'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpc00nxfhs.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpc00nxfhs.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x15\\x06\\\
    x14\\x15',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738384
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n\
    \    if (index > 0) {\n      result += alphabet.charAt(index - 2);\n    }\n  \
    \  result += alphabet.charAt(letter);\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgxk4q2p2.ts(15,17): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpgxk4q2p2.ts(17,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpgxk4q2p2.ts(19,15): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738384
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n\
    \        if (letter === \"a\") {\n            encodedLetter = \"t\";\n       \
    \ } else if (letter === \"e\") {\n            encodedLetter = \"k\";\n       \
    \ } else if (letter === \"i\") {\n            encodedLetter = \"s\";\n       \
    \ } else if (letter === \"o\") {\n            encodedLetter = \"c\";\n       \
    \ } else if (letter === \"u\") {\n            encodedLetter = \"g\";\n       \
    \ }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph7s5ytvx.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph7s5ytvx.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738384
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"AEIOUaeiou\"\
    ;\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex >\
    \ -1) {\n            let vowelPosition = vowelIndex + 2;\n            newMessage\
    \ += vowels[vowelPosition];\n        } else {\n            newMessage += letter;\n\
    \        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj55vpmea.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj55vpmea.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738384
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = english.indexOf(letter);\n\
    \        if (index > -1) {\n            result += swapCase(letter, index - 1);\n\
    \        } else {\n            result += letter;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjleyxeyx.ts(15,21): error TS2304: Cannot find name
    ''english''.

    ../../../../../tmp/tmpjleyxeyx.ts(17,23): error TS2304: Cannot find name ''swapCase''.

    '
  timestamp: 1659738384
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n\
    \        if (vowelIndex != -1) {\n            let vowelIndex2 = vowelIndex + 1;\n\
    \            newLetter = vowels[vowelIndex2];\n        }\n        newMessage +=\
    \ newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptvo94wts.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptvo94wts.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738384
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter.toUpperCase();\n\
    \        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter.toLowerCase();\n\
    \        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTtestTEST'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdjja2aof.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdjja2aof.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTtestTEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738384
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e'\
    \ || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n\
    \    } else {\n      result += letter.charCodeAt(0) - 'a'.charCodeAt(0) + 1;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpg5yc59zz.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpg5yc59zz.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738384
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n\
    \        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n\
    \        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n\
    \        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n\
    \        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n\
    \        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n\
    \        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n\
    \        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n\
    \        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy5eyydp0.ts(80,80): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpy5eyydp0.ts(81,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpy5eyydp0.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738385
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpviz7dtwy.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpviz7dtwy.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738384
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let vowels = \"aeiouAEIOU\";\n   \
    \ if (vowels.indexOf(letter) > -1) {\n      letter = vowels.charAt(vowels.indexOf(letter)\
    \ + 2);\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj1k2t187.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj1k2t187.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738386
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        let nextLetterIndex = alphabet.indexOf(nextLetter);\n       \
    \ let nextLetterLetter = alphabet[nextLetterIndex + 1];\n        if (letter ===\
    \ nextLetterLetter) {\n            newMessage += letter;\n        } else {\n \
    \           newMessage += alphabet[alphabet.indexOf(letter) + 2];\n        }\n\
    \    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpohm3uroy.ts(16,31): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpohm3uroy.ts(17,32): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpohm3uroy.ts(21,27): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpohm3uroy.ts(21,36): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738386
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n\
    \    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter\
    \ = newMessage[i];\n        let index = letter.charCodeAt(0) - 97;\n        newMessage\
    \ = newMessage.replace(letter, letters[index]);\n    }\n    return newMessage;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpak6spmdj.ts(24,2): error TS1110: Type expected.

    ../../../../../tmp/tmpak6spmdj.ts(24,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpak6spmdj.ts(25,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpak6spmdj.ts(25,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpak6spmdj.ts(26,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpak6spmdj.ts(26,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpak6spmdj.ts(26,33): error TS1109: Expression expected.

    ../../../../../tmp/tmpak6spmdj.ts(28,9): error TS1005: '';'' expected.

    '
  timestamp: 1659738385
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"AEIOUaeiou\"\
    ;\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex !=\
    \ -1) {\n            let vowel = vowels[vowelIndex];\n            let vowelIndex\
    \ = vowels.indexOf(vowel, vowelIndex + 1);\n            if (vowelIndex == -1)\
    \ {\n                vowelIndex = 0;\n            }\n            let letterIndex\
    \ = vowels.indexOf(letter, vowelIndex + 1);\n            if (letterIndex == -1)\
    \ {\n                letterIndex = vowels.length;\n            }\n           \
    \ result += vowels[vowelIndex];\n            for (let j = 0; j < letterIndex;\
    \ j++) {\n                result += letter;\n            }\n        } else {\n\
    \            result += letter;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1e3f738p.ts(37,2): error TS1110: Type expected.

    ../../../../../tmp/tmp1e3f738p.ts(37,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1e3f738p.ts(38,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp1e3f738p.ts(38,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1e3f738p.ts(39,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp1e3f738p.ts(39,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1e3f738p.ts(39,16): error TS1109: Expression expected.

    ../../../../../tmp/tmp1e3f738p.ts(41,9): error TS1005: '';'' expected.

    '
  timestamp: 1659738386
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpviz7dtwy.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpviz7dtwy.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738384
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = english.indexOf(letter);\n\
    \    if (index > -1) {\n      newMessage += english[index + 2];\n    } else {\n\
    \      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv5pl1hc3.ts(15,17): error TS2304: Cannot find name
    ''english''.

    ../../../../../tmp/tmpv5pl1hc3.ts(17,21): error TS2304: Cannot find name ''english''.

    '
  timestamp: 1659738386
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let letterIndex =\
    \ alphabet.indexOf(letter);\n            let nextLetterIndex = letterIndex + 1;\n\
    \            if (nextLetterIndex < alphabet.length) {\n                result\
    \ += alphabet[nextLetterIndex];\n            } else {\n                result\
    \ += letter;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp72kebbt1.ts(18,31): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp72kebbt1.ts(20,35): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp72kebbt1.ts(21,27): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738386
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0)\
    \ - 65;\n    result += String.fromCharCode(index * 2 + 65);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'gIeg'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfsu3xsop.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfsu3xsop.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'gIeg',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738386
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"A\" || letter ===\
    \ \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n     \
    \       result += letter.toUpperCase();\n            i++;\n        }\n       \
    \ else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n          \
    \  i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\") {\n            result +=\
    \ letter.toUpperCase();\n            i++;\n        }\n        else if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\") {\n            result += letter;\n            i++;\n        }\n \
    \       else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \       result += letter;\n            i++;\n        }\n        else if (letter\
    \ === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter\
    \ === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"A\" || letter ===\
    \ \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n     \
    \       result += letter.toUpperCase();\n            i++;\n        }\n       \
    \ else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n          \
    \  i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\") {\n            result +=\
    \ letter.toUpperCase();\n            i++;\n        }\n        else if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\") {\n            result += letter;\n            i++;\n        }\n \
    \       else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjnkz3hnc.ts(72,102): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpjnkz3hnc.ts(73,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpjnkz3hnc.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n    }\n    for (let i = 0; i < message.length; i++)\
    \ {\n        let letter = message[i];\n        let vowelIndex = newMessage.indexOf(letter);\n\
    \        if (vowelIndex > 0) {\n            let vowel = vowelIndex - 1;\n    \
    \        let vowelLetter = message[vowel];\n            newMessage = newMessage.replace(vowelLetter,\
    \ vowelLetter.toUpperCase());\n        }\n    }\n    return newMessage;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdm1hd3_l.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdm1hd3_l.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738386
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      newMessage += letter;\n      i++;\n    }\
    \ else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    } else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvgw2hmx0.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvgw2hmx0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\"\
    ;\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n  \
    \          let nextLetter = vowels[index + 1];\n            result += nextLetter;\n\
    \        }\n        else {\n            result += letter;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=string,algorithm,javascript |>\n<|\
    \ c |>\nI like this solution, it's very simple and easy to understand. Thanks!\n\
    <|/ c |>\n<| c |>\nI like this solution, it's very simple and easy to understand.\
    \ Thanks!\n<|/ c |>\n<| a tags=string,algorithm,javascript |>\n<code>\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphnz987zs.ts(27,2): error TS1110: Type expected.

    ../../../../../tmp/tmphnz987zs.ts(27,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmphnz987zs.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmphnz987zs.ts(28,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmphnz987zs.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmphnz987zs.ts(29,7): error TS1109: Expression expected.

    ../../../../../tmp/tmphnz987zs.ts(30,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmphnz987zs.ts(30,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmphnz987zs.ts(30,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmphnz987zs.ts(30,25): error TS1005: '';'' expected.

    ../../../../../tmp/tmphnz987zs.ts(30,71): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmphnz987zs.ts(31,2): error TS1109: Expression expected.

    ../../../../../tmp/tmphnz987zs.ts(31,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmphnz987zs.ts(32,2): error TS1109: Expression expected.

    ../../../../../tmp/tmphnz987zs.ts(32,7): error TS1109: Expression expected.

    ../../../../../tmp/tmphnz987zs.ts(33,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmphnz987zs.ts(33,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmphnz987zs.ts(33,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmphnz987zs.ts(33,25): error TS1005: '';'' expected.

    ../../../../../tmp/tmphnz987zs.ts(33,71): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmphnz987zs.ts(34,2): error TS1109: Expression expected.

    ../../../../../tmp/tmphnz987zs.ts(34,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmphnz987zs.ts(35,2): error TS1109: Expression expected.

    ../../../../../tmp/tmphnz987zs.ts(35,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmphnz987zs.ts(35,40): error TS1109: Expression expected.

    ../../../../../tmp/tmphnz987zs.ts(37,9): error TS1005: '';'' expected.

    '
  timestamp: 1659738386
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = letter.charCodeAt(0)\
    \ - 65;\n        if (index >= 0) {\n            result += String.fromCharCode(index\
    \ + 65);\n        } else {\n            result += letter;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpt1juz9n9.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt1juz9n9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738386
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        } else if (letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result\
    \ += letter.toUpperCase();\n            i++;\n        } else {\n            result\
    \ += letter;\n        }\n        if (nextLetter === \"a\" || nextLetter === \"\
    e\" || nextLetter === \"i\" || nextLetter === \"o\" || nextLetter === \"u\") {\n\
    \            result += nextLetter;\n            i++;\n        } else if (nextLetter\
    \ === \"A\" || nextLetter === \"E\" || nextLetter === \"I\" || nextLetter ===\
    \ \"O\" || nextLetter === \"U\") {\n            result += nextLetter.toUpperCase();\n\
    \            i++;\n        } else {\n            result += nextLetter;\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTundefined'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsyj9yxed.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsyj9yxed.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738386
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        let nextLetterIndex = alphabet.indexOf(nextLetter);\n       \
    \ let nextLetterLetter = alphabet[nextLetterIndex + 1];\n        let nextLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetter);\n        let nextLetterLetterLetter =\
    \ alphabet[nextLetterLetterIndex + 1];\n        let nextLetterLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetterLetter);\n        let nextLetterLetterLetterLetter\
    \ = alphabet[nextLetterLetterLetterIndex + 1];\n        newMessage += letter;\n\
    \        if (letter === nextLetter) {\n            newMessage += nextLetterLetter;\n\
    \        } else if (letter === nextLetterLetter) {\n            newMessage +=\
    \ nextLetterLetterLetter;\n        } else if (letter === nextLetterLetterLetter)\
    \ {\n            newMessage += nextLetterLetterLetterLetter;\n        } else if\
    \ (letter === nextLetterLetterLetterLetter) {\n            newMessage += nextLetterLetterLetterLetterLetter;\n\
    \        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxfmyh155.ts(16,31): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpxfmyh155.ts(17,32): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpxfmyh155.ts(18,37): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpxfmyh155.ts(19,38): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpxfmyh155.ts(20,43): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpxfmyh155.ts(21,44): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpxfmyh155.ts(30,27): error TS2304: Cannot find name ''nextLetterLetterLetterLetterLetter''.

    '
  timestamp: 1659738386
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += getLetterFromIndex(letter,\
    \ i);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7dvd9s1j.ts(18,17): error TS2304: Cannot find name
    ''getLetterFromIndex''.

    '
  timestamp: 1659738386
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpacanj9qp.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpacanj9qp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      const index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpee3906ae.ts(18,21): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpee3906ae.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpee3906ae.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738386
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let vowels = \"AEIOUaeiou\";\n   \
    \ let vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex > -1) {\n     \
    \ let vowelIndex = vowelIndex + 2;\n      letter = vowels[vowelIndex];\n    }\n\
    \    result += letter;\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvjpeqq4m.ts(18,24): error TS2448: Block-scoped variable
    ''vowelIndex'' used before its declaration.

    '
  timestamp: 1659738386
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === nextLetter) {\n            result += letter;\n\
    \        } else {\n            result += letter.toUpperCase();\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprvm8euvt.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprvm8euvt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738386
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpacanj9qp.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpacanj9qp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ letter = letter.toUpperCase();\n    }\n    result += letter;\n  }\n  for (let\
    \ i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\") {\n      letter = letter.toUpperCase();\n    }\n    let index = result.indexOf(letter);\n\
    \    if (index > 0) {\n      let letter2 = result.charAt(index - 1);\n      result\
    \ += letter2;\n      result.splice(index, 1);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4wbcoju4.ts(29,14): error TS2551: Property ''splice''
    does not exist on type ''string''. Did you mean ''slice''?

    '
  timestamp: 1659738386
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0)\
    \ - 65;\n    const nextLetter = message[i + 1];\n    const nextIndex = nextLetter.charCodeAt(0)\
    \ - 65;\n    if (index === nextIndex) {\n      result += letter;\n    } else {\n\
    \      result += String.fromCharCode(index + 65);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5j5yx1yv.js:17\n        var nextIndex = nextLetter.charCodeAt(0)\
    \ - 65;\n                                   ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'charCodeAt')\n    at encode (/tmp/tmp5j5yx1yv.js:17:36)\n\
    \    at test (/tmp/tmp5j5yx1yv.js:30:22)\n    at Object.<anonymous> (/tmp/tmp5j5yx1yv.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738386
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n\
    \    let encodedVowel = vowels[letter];\n    encodedMessage += encodedLetter +\
    \ encodedVowel;\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpewf3fprl.ts(16,24): error TS2304: Cannot find name
    ''vowels''.

    '
  timestamp: 1659738386
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpacanj9qp.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpacanj9qp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowelIndex = getVowelIndex(letter);\n\
    \        let vowel = vowelIndex === -1 ? letter : message[vowelIndex + 1];\n \
    \       let replacement = vowelIndex === -1 ? letter : message[vowelIndex - 1];\n\
    \        result += replacement;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpal35abf_.ts(15,26): error TS2304: Cannot find name
    ''getVowelIndex''.

    '
  timestamp: 1659738386
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_hwdpsy4.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpacanj9qp.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpacanj9qp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n\
    \        let index = vowels.indexOf(letter);\n        if (index > -1) {\n    \
    \        result += vowels[index + 1];\n        } else {\n            result +=\
    \ letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmgu0gmct.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmgu0gmct.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738386
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n\
    \    if (index === -1) {\n      result += letter;\n    } else {\n      result\
    \ += alphabet[index + 2];\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp31k56wm7.ts(15,17): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp31k56wm7.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738387
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let\
    \ vowels = \"aeiou\";\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n\
    \        if (index != -1) {\n            let nextVowel = alphabet.indexOf(vowels[index\
    \ + 1], index + 1);\n            newMessage += alphabet.charAt(nextVowel);\n \
    \       } else {\n            newMessage += letter;\n        }\n    }\n    return\
    \ newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0b0wftay.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0b0wftay.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738388
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_hwdpsy4.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = letter.charCodeAt(0)\
    \ - 97;\n        if (index >= 0) {\n            result += String.fromCharCode(index\
    \ + 97);\n        } else {\n            result += letter;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpucmaplr3.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpucmaplr3.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738388
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 65 +\
    \ 2;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2162021'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4u0i8d_2.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4u0i8d_2.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2162021',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738388
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpacanj9qp.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpacanj9qp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            result += alphabet[(index + 1) % alphabet.length];\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp71hm40vr.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp71hm40vr.ts(19,23): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp71hm40vr.ts(19,46): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        let vowels = \"AEIOUaeiou\";\n        if (vowels.indexOf(letter)\
    \ > -1) {\n            result += letter;\n            result += nextLetter;\n\
    \        } else {\n            result += letter.toUpperCase();\n            result\
    \ += nextLetter.toUpperCase();\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify\
    \ this in the question, but I do need to keep it case insensitive. I've updated\
    \ my question to reflect this.\n<|/ c |>\n<| c |>\nI updated my answer to include\
    \ a solution that keeps case insensitive.\n<|/ c |>\n<| a |>\n<code>\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnht24qk7.ts(27,2): error TS1110: Type expected.

    ../../../../../tmp/tmpnht24qk7.ts(27,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpnht24qk7.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpnht24qk7.ts(28,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpnht24qk7.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpnht24qk7.ts(29,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,12): error TS1005: ''('' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,17): error TS1005: '';'' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,26): error TS1005: '';'' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,42): error TS1005: '')'' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,44): error TS1005: '';'' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,52): error TS1005: '';'' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,64): error TS1005: '';'' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,78): error TS1005: '';'' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,80): error TS1005: '';'' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,88): error TS1005: '';'' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,91): error TS1005: '')'' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,96): error TS1005: '';'' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,99): error TS1005: '';'' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,118): error TS1005: '';'' expected.

    ../../../../../tmp/tmpnht24qk7.ts(30,158): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpnht24qk7.ts(31,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpnht24qk7.ts(31,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpnht24qk7.ts(32,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpnht24qk7.ts(32,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpnht24qk7.ts(33,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmpnht24qk'
  timestamp: 1659738388
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n\
    \    if (index > 0) {\n      result += alphabet[(index + 1) % alphabet.length];\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9sntcord.ts(15,17): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp9sntcord.ts(17,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp9sntcord.ts(17,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738388
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            let nextLetter = alphabet[index + 1];\n            result += nextLetter;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6qk9xrjj.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp6qk9xrjj.ts(19,30): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738388
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            if (index === -1) {\n                result += letter;\n        \
    \    } else {\n                result += alphabet[index + 2];\n            }\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6f1bvapw.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp6f1bvapw.ts(22,27): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738388
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            if (index === -1) {\n                result += letter;\n        \
    \    } else {\n                let twoLettersBefore = alphabet.indexOf(letter,\
    \ index - 2);\n                if (twoLettersBefore === -1) {\n              \
    \      result += letter;\n                } else {\n                    result\
    \ += alphabet[twoLettersBefore + 1];\n                }\n            }\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm09y5ix5.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpm09y5ix5.ts(22,40): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpm09y5ix5.ts(26,31): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738388
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpacanj9qp.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpacanj9qp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_hwdpsy4.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6vg473_8.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6vg473_8.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738389
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let newLetter = letter.toUpperCase();\n\
    \    newMessage += newLetter;\n    let vowelIndex = newLetter.indexOf(\"A\");\n\
    \    if (vowelIndex >= 0) {\n      let vowel = newLetter.substring(vowelIndex\
    \ + 1, vowelIndex + 2);\n      newMessage += vowel;\n    }\n  }\n  return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjkga451h.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjkga451h.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738389
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n\
    \    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        newMessage += letter;\n    }\n    return newMessage;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't seem to work. `encode(\"test\")` returns\
    \ `\"TGT\"` instead of `\"TGST\"`.\n<|/ c |>\n<| c |>\nI fixed the bug in the\
    \ code. Thanks for pointing it out.\n<|/ c |>\n<| a |>\n<code>\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg76_yyi4.ts(23,2): error TS1110: Type expected.

    ../../../../../tmp/tmpg76_yyi4.ts(23,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpg76_yyi4.ts(24,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpg76_yyi4.ts(24,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpg76_yyi4.ts(25,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpg76_yyi4.ts(25,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpg76_yyi4.ts(26,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg76_yyi4.ts(26,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg76_yyi4.ts(26,81): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpg76_yyi4.ts(27,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpg76_yyi4.ts(27,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpg76_yyi4.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpg76_yyi4.ts(28,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpg76_yyi4.ts(29,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg76_yyi4.ts(29,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg76_yyi4.ts(29,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg76_yyi4.ts(29,24): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg76_yyi4.ts(29,37): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg76_yyi4.ts(29,41): error TS1005: ''('' expected.

    ../../../../../tmp/tmpg76_yyi4.ts(29,50): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg76_yyi4.ts(29,53): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg76_yyi4.ts(30,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmpg76_yyi4.ts(30,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpg76_yyi4.ts(30,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpg76_yyi4.ts(31,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpg76_yyi4.ts(31,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpg76_yyi4.ts(33,9): error TS100'
  timestamp: 1659738388
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const letterIndex = letter.charCodeAt(0)\
    \ - 65;\n    const letterIndex2 = letterIndex + 2;\n    const letterIndex3 = letterIndex\
    \ + 3;\n    const letterIndex4 = letterIndex + 4;\n    const letterIndex5 = letterIndex\
    \ + 5;\n    const letterIndex6 = letterIndex + 6;\n    const letterIndex7 = letterIndex\
    \ + 7;\n    const letterIndex8 = letterIndex + 8;\n    const letterIndex9 = letterIndex\
    \ + 9;\n    const letterIndex10 = letterIndex + 10;\n    const letterIndex11 =\
    \ letterIndex + 11;\n    const letterIndex12 = letterIndex + 12;\n    const letterIndex13\
    \ = letterIndex + 13;\n    const letterIndex14 = letterIndex + 14;\n    const\
    \ letterIndex15 = letterIndex + 15;\n    const letterIndex16 = letterIndex + 16;\n\
    \    const letterIndex17 = letterIndex + 17;\n    const letterIndex18 = letterIndex\
    \ + 18;\n    const letterIndex19 = letterIndex + 19;\n    const letterIndex20\
    \ = letterIndex + 20;\n    const letterIndex21 = letterIndex + 21;\n    const\
    \ letterIndex22 = letterIndex + 22;\n    const letterIndex23 = letterIndex + 23;\n\
    \    const letterIndex24 = letterIndex + 24;\n    const letterIndex25 = letterIndex\
    \ + 25;\n    const letterIndex26 = letterIndex + 26;\n    const letterIndex27\
    \ = letterIndex + 27;\n    const letterIndex28 = letterIndex + 28;\n    const\
    \ letterIndex29 = letterIndex + 29;\n    const letterIndex30 = letterIndex + 30;\n\
    \    const letterIndex31 = letterIndex + 31;\n    const letterIndex32 = letterIndex\
    \ + 32;\n    const letterIndex33 = letterIndex + 33;\n    const letterIndex34\
    \ = letterIndex + 34;\n    const letterIndex35 = letterIndex + 35;\n    const\
    \ letterIndex36 = letterIndex + 36;\n    const letterIndex37 = letterIndex + 37;\n\
    \    const letterIndex38 = letterIndex + 38;\n    const letterIndex39 = letterIndex\
    \ + 39;\n    const letterIndex40 = letterIndex + 40;\n    const letterIndex41\
    \ = letterIndex + 41;\n    const letterIndex42 = letterIndex + 42;\n    const\
    \ letterIndex43 = letterIndex + 43;\n    const letterIndex44 = letterIndex + 44;\n\
    \    const letterIndex45 = letterIndex + 45;\n    const letterIndex46 = letterIndex\
    \ + 46;\n    const letterIndex47 = letterIndex + 47;\n    const letterIndex48\
    \ = letterIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_xjrvmzi.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738389
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\"\
    ;\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex >\
    \ -1) {\n            let vowelIndex = vowelIndex + 2;\n            let vowel =\
    \ vowels.charAt(vowelIndex);\n            newMessage += vowel;\n        } else\
    \ {\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdg2gqam8.ts(18,30): error TS2448: Block-scoped variable
    ''vowelIndex'' used before its declaration.

    '
  timestamp: 1659738388
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let vowel = vowels[letter];\n\
    \            result += vowels[vowel];\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_vg9ih8a.ts(18,25): error TS2552: Cannot find name
    ''vowels''. Did you mean ''vowel''?

    ../../../../../tmp/tmp_vg9ih8a.ts(19,23): error TS2552: Cannot find name ''vowels''.
    Did you mean ''vowel''?

    '
  timestamp: 1659738389
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            let nextLetter = alphabet[index + 1];\n            result += nextLetter;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6qk9xrjj.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp6qk9xrjj.ts(19,30): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738388
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            result += alphabet[(index + 1) % alphabet.length];\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp71hm40vr.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp71hm40vr.ts(19,23): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp71hm40vr.ts(19,46): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        let nextLetterIndex = alphabet.indexOf(nextLetter);\n       \
    \ let nextLetterLetter = alphabet[nextLetterIndex + 1];\n        let nextLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetter);\n        let nextLetterLetterLetter =\
    \ alphabet[nextLetterLetterIndex + 1];\n        let nextLetterLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetterLetter);\n        let nextLetterLetterLetterLetter\
    \ = alphabet[nextLetterLetterLetterIndex + 1];\n        let nextLetterLetterLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetterLetterLetter);\n        let nextLetterLetterLetterLetterLetter\
    \ = alphabet[nextLetterLetterLetterLetterIndex + 1];\n        let nextLetterLetterLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetterLetterLetterLetter);\n        let nextLetterLetterLetterLetterLetter\
    \ = alphabet[nextLetterLetterLetterLetterLetterIndex + 1];\n        let nextLetterLetterLetterLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetter);\n        let nextLetterLetterLetterLetterLetter\
    \ = alphabet[nextLetterLetterLetterLetterLetterLetterIndex + 1];\n        let\
    \ nextLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetter);\n\
    \        let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterIndex\
    \ + 1];\n        let nextLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetter);\n\
    \        let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterIndex\
    \ + 1];\n        let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n\
    \        let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex\
    \ + 1];\n        let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n\
    \        let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex\
    \ + 1];\n        let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n\
    \        let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex\
    \ + 1];\n        let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n\
    \        let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex\
    \ + 1];\n        let nextLetterLetterLetterLetterLetterLetterIndex = \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3oda38vk.ts(41,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp3oda38vk.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738389
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    let nextLetterIndex = alphabet.indexOf(nextLetter);\n    let nextLetterIndex2\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 1);\n    let nextLetterIndex3\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 2);\n    let nextLetterIndex4\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 3);\n    let nextLetterIndex5\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 4);\n    let nextLetterIndex6\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 5);\n    let nextLetterIndex7\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 6);\n    let nextLetterIndex8\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 7);\n    let nextLetterIndex9\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 8);\n    let nextLetterIndex10\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 9);\n    let nextLetterIndex11\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 10);\n    let nextLetterIndex12\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 11);\n    let nextLetterIndex13\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 12);\n    let nextLetterIndex14\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 13);\n    let nextLetterIndex15\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 14);\n    let nextLetterIndex16\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 15);\n    let nextLetterIndex17\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 16);\n    let nextLetterIndex18\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 17);\n    let nextLetterIndex19\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 18);\n    let nextLetterIndex20\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 19);\n    let nextLetterIndex21\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 20);\n    let nextLetterIndex22\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 21);\n    let nextLetterIndex23\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 22);\n    let nextLetterIndex24\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 23);\n    let nextLetterIndex25\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 24);\n    let nextLetterIndex26\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 25);\n    let nextLetterIndex27\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 26);\n    let nextLetterIndex28\
    \ = alphabet.indexOf(nextLetter, \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9urqkraz.ts(44,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp9urqkraz.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738389
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        } else if (letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result\
    \ += letter.toUpperCase();\n            i++;\n        } else {\n            result\
    \ += letter;\n        }\n        if (nextLetter === \"a\" || nextLetter === \"\
    e\" || nextLetter === \"i\" || nextLetter === \"o\" || nextLetter === \"u\") {\n\
    \            result += nextLetter;\n            i++;\n        } else if (nextLetter\
    \ === \"A\" || nextLetter === \"E\" || nextLetter === \"I\" || nextLetter ===\
    \ \"O\" || nextLetter === \"U\") {\n            result += nextLetter.toUpperCase();\n\
    \            i++;\n        } else {\n            result += nextLetter;\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTundefined'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsyj9yxed.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsyj9yxed.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738386
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter\
    \ === 'o' || letter === 'u') {\n            result += letter;\n            i++;\n\
    \        } else if (letter === 'A' || letter === 'E' || letter === 'I' || letter\
    \ === 'O' || letter === 'U') {\n            result += letter.toUpperCase();\n\
    \            i++;\n        } else {\n            result += letter;\n        }\n\
    \        if (nextLetter === 'a' || nextLetter === 'e' || nextLetter === 'i' ||\
    \ nextLetter === 'o' || nextLetter === 'u') {\n            result += nextLetter;\n\
    \            i++;\n        } else if (nextLetter === 'A' || nextLetter === 'E'\
    \ || nextLetter === 'I' || nextLetter === 'O' || nextLetter === 'U') {\n     \
    \       result += nextLetter.toUpperCase();\n            i++;\n        } else\
    \ {\n            result += nextLetter;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTundefined'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1lz1lmmu.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1lz1lmmu.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738389
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const letterIndex = letter.charCodeAt(0)\
    \ - 65;\n    const letterIndex2 = letterIndex + 2;\n    const letterIndex3 = letterIndex\
    \ + 3;\n    const letterIndex4 = letterIndex + 4;\n    const letterIndex5 = letterIndex\
    \ + 5;\n    const letterIndex6 = letterIndex + 6;\n    const letterIndex7 = letterIndex\
    \ + 7;\n    const letterIndex8 = letterIndex + 8;\n    const letterIndex9 = letterIndex\
    \ + 9;\n    const letterIndex10 = letterIndex + 10;\n    const letterIndex11 =\
    \ letterIndex + 11;\n    const letterIndex12 = letterIndex + 12;\n    const letterIndex13\
    \ = letterIndex + 13;\n    const letterIndex14 = letterIndex + 14;\n    const\
    \ letterIndex15 = letterIndex + 15;\n    const letterIndex16 = letterIndex + 16;\n\
    \    const letterIndex17 = letterIndex + 17;\n    const letterIndex18 = letterIndex\
    \ + 18;\n    const letterIndex19 = letterIndex + 19;\n    const letterIndex20\
    \ = letterIndex + 20;\n    const letterIndex21 = letterIndex + 21;\n    const\
    \ letterIndex22 = letterIndex + 22;\n    const letterIndex23 = letterIndex + 23;\n\
    \    const letterIndex24 = letterIndex + 24;\n    const letterIndex25 = letterIndex\
    \ + 25;\n    const letterIndex26 = letterIndex + 26;\n    const letterIndex27\
    \ = letterIndex + 27;\n    const letterIndex28 = letterIndex + 28;\n    const\
    \ letterIndex29 = letterIndex + 29;\n    const letterIndex30 = letterIndex + 30;\n\
    \    const letterIndex31 = letterIndex + 31;\n    const letterIndex32 = letterIndex\
    \ + 32;\n    const letterIndex33 = letterIndex + 33;\n    const letterIndex34\
    \ = letterIndex + 34;\n    const letterIndex35 = letterIndex + 35;\n    const\
    \ letterIndex36 = letterIndex + 36;\n    const letterIndex37 = letterIndex + 37;\n\
    \    const letterIndex38 = letterIndex + 38;\n    const letterIndex39 = letterIndex\
    \ + 39;\n    const letterIndex40 = letterIndex + 40;\n    const letterIndex41\
    \ = letterIndex + 41;\n    const letterIndex42 = letterIndex + 42;\n    const\
    \ letterIndex43 = letterIndex + 43;\n    const letterIndex44 = letterIndex + 44;\n\
    \    const letterIndex45 = letterIndex + 45;\n    const letterIndex46 = letterIndex\
    \ + 46;\n    const letterIndex47 = letterIndex + 47;\n    const letterIndex48\
    \ = letterIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_xjrvmzi.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738389
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0)\
    \ - 'a'.charCodeAt(0);\n    if (index >= 0) {\n      result += String.fromCharCode(index\
    \ + 2);\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9kjweqxq.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9kjweqxq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738389
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           newMessage += letter;\n        } else {\n            newMessage +=\
    \ letter.charCodeAt(0) - 97;\n        }\n    }\n    return newMessage;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp03irmgs1.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp03irmgs1.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738389
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        let vowels = \"aeiouAEIOU\";\n        let vowelIndex = vowels.indexOf(letter);\n\
    \        if (vowelIndex >= 0) {\n            newLetter = vowels[vowelIndex + 1];\n\
    \        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp38e1jmjs.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp38e1jmjs.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738389
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpacanj9qp.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpacanj9qp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpacanj9qp.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpacanj9qp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n\
    \        if (i > 0) {\n            newMessage += letter.charCodeAt(0) - letter.charCodeAt(i\
    \ - 1);\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TE0SNaNTNaN'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpuzvx3fk6.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuzvx3fk6.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TE0SNaNTNaN',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738389
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let\
    \ vowels = \"aeiou\";\n    let messageArray = message.split(\"\");\n    let encodedMessage\
    \ = \"\";\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter\
    \ = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter) + 1;\n\
    \        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n    for (let\
    \ i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n\
    \        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage\
    \ += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length;\
    \ i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter)\
    \ + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n   \
    \ for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n\
    \        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage\
    \ += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length;\
    \ i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter)\
    \ + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n   \
    \ for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n\
    \        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage\
    \ += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length;\
    \ i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter)\
    \ + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n   \
    \ for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n\
    \        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage\
    \ += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length;\
    \ i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter)\
    \ + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n   \
    \ for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n\
    \        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage\
    \ += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length;\
    \ i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter)\
    \ + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n   \
    \ for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n\
    \        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage\
    \ += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length;\
    \ i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpve7elfh3.ts(78,38): error TS1003: Identifier expected.

    ../../../../../tmp/tmpve7elfh3.ts(92,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738389
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let vowels = \"aeiouAEIOU\";\n   \
    \ let index = vowels.indexOf(letter);\n    if (index > -1) {\n      result +=\
    \ vowels[index + 2];\n    } else {\n      result += letter;\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpid269cy6.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpid269cy6.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738389
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"A\" || letter ===\
    \ \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n     \
    \       result += letter.toUpperCase();\n            i++;\n        }\n       \
    \ else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n          \
    \  i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\") {\n            result +=\
    \ letter.toUpperCase();\n            i++;\n        }\n        else if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\") {\n            result += letter;\n            i++;\n        }\n \
    \       else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \       result += letter;\n            i++;\n        }\n        else if (letter\
    \ === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter\
    \ === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        }\n        else if (letter === \"A\" || letter ===\
    \ \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n     \
    \       result += letter.toUpperCase();\n            i++;\n        }\n       \
    \ else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\") {\n            result += letter;\n          \
    \  i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\") {\n            result +=\
    \ letter.toUpperCase();\n            i++;\n        }\n        else if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\") {\n            result += letter;\n            i++;\n        }\n \
    \       else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1b9e0xyk.ts(73,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmp1b9e0xyk.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738390
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const vowels = \"aeiouAEIOU\";\n\
    \    const index = vowels.indexOf(letter);\n    if (index > -1) {\n      const\
    \ nextVowel = vowels[index + 1];\n      result += nextVowel;\n    } else {\n \
    \     result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzahvc12y.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzahvc12y.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[(i + 1) %\
    \ message.length];\n    if (letter === 'a' || letter === 'e' || letter === 'i'\
    \ || letter === 'o' || letter === 'u') {\n      result += letter;\n      result\
    \ += nextLetter;\n    } else {\n      result += letter.toUpperCase();\n      result\
    \ += nextLetter.toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEESSTTT'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0ez0mvg_.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0ez0mvg_.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEESSTTT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === nextLetter) {\n            result += letter;\n\
    \        } else {\n            let vowels = \"aeiouAEIOU\";\n            let index\
    \ = vowels.indexOf(letter);\n            let nextIndex = vowels.indexOf(nextLetter);\n\
    \            if (index === nextIndex) {\n                result += letter;\n \
    \           } else {\n                result += nextLetter;\n            }\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ESST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_0b1di3b.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_0b1di3b.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ESST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738391
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n\
    \        if (index >= 0) {\n            result += alphabet[(index + 1) % alphabet.length];\n\
    \        } else {\n            result += letter;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl1m2_xra.ts(15,21): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpl1m2_xra.ts(17,23): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpl1m2_xra.ts(17,46): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738390
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        } else if (letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result\
    \ += letter.toUpperCase();\n            i++;\n        } else {\n            result\
    \ += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvs0x_aho.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvs0x_aho.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let newLetter = letter;\n    if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\") {\n      newLetter = letter.toUpperCase();\n    }\n    for (let j\
    \ = 0; j < 2; j++) {\n      let vowel = vowels[j];\n      if (letter === vowel)\
    \ {\n        newLetter = vowels[j + 1];\n      }\n    }\n    newMessage += newLetter;\n\
    \  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8x_rniho.ts(20,19): error TS2552: Cannot find name
    ''vowels''. Did you mean ''vowel''?

    ../../../../../tmp/tmp8x_rniho.ts(22,21): error TS2552: Cannot find name ''vowels''.
    Did you mean ''vowel''?

    '
  timestamp: 1659738391
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n\
    \    const nextLetterIndex = alphabet.indexOf(nextLetter);\n    const nextLetterIndex\
    \ = nextLetterIndex === -1 ? alphabet.length : nextLetterIndex + 1;\n    const\
    \ nextLetterLetter = alphabet[nextLetterIndex];\n    const nextLetterLetterIndex\
    \ = alphabet.indexOf(nextLetterLetter);\n    const nextLetterLetterIndex = nextLetterLetterIndex\
    \ === -1 ? alphabet.length : nextLetterLetterIndex + 1;\n    const nextLetterLetterLetter\
    \ = alphabet[nextLetterLetterIndex];\n    const nextLetterLetterLetterIndex =\
    \ alphabet.indexOf(nextLetterLetterLetter);\n    const nextLetterLetterLetterIndex\
    \ = nextLetterLetterLetterIndex === -1 ? alphabet.length : nextLetterLetterLetterIndex\
    \ + 1;\n    const nextLetterLetterLetterLetter = alphabet[nextLetterLetterLetterIndex];\n\
    \    const nextLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetter);\n\
    \    const nextLetterLetterLetterLetterIndex = nextLetterLetterLetterLetterIndex\
    \ === -1 ? alphabet.length : nextLetterLetterLetterLetterIndex + 1;\n    const\
    \ nextLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterIndex];\n\
    \    const nextLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetter);\n\
    \    const nextLetterLetterLetterLetterLetterIndex = nextLetterLetterLetterLetterLetterIndex\
    \ === -1 ? alphabet.length : nextLetterLetterLetterLetterLetterIndex + 1;\n  \
    \  const nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterIndex];\n\
    \    const nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetter);\n\
    \    const nextLetterLetterLetterLetterLetterLetterIndex = nextLetterLetterLetterLetterLetterLetterIndex\
    \ === -1 ? alphabet.length : nextLetterLetterLetterLetterLetterLetterIndex + 1;\n\
    \    const nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterIndex];\n\
    \    const nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetter);\n\
    \    const nextLetterLetterLetterLetterLetterLetterIndex = nextLetterLetterLetterLetterLetterLetterIndex\
    \ === -1 ? alphabet.length : nextLetterLetterLetterLetterLetterLetterIndex + 1;\n\
    \    const nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterIndex];\n\
    \    const nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetter);\n\
    \    const nextLetterLetterLetterLetterLetterLetterIndex = nextLetterLetterLetterLetterLetterLetterLetterIndex\
    \ === -1 ? alphabet.length : nextLetterLetterLetterLetterLetterLetterLetterIndex\
    \ + 1;\n    const nextLetter\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptty8vli8.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738391
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        result += swapCase(letter);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2z7bdfij.ts(15,19): error TS2304: Cannot find name
    ''swapCase''.

    '
  timestamp: 1659738391
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n\
    \        if (index > -1) {\n            let nextLetter = alphabet[index + 1];\n\
    \            if (nextLetter === letter) {\n                result += nextLetter;\n\
    \            } else {\n                result += letter;\n            }\n    \
    \    } else {\n            result += letter;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphvokmjo6.ts(15,21): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmphvokmjo6.ts(17,30): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpacanj9qp.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpacanj9qp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      result\
    \ += \"t\";\n    } else if (letter === \"e\") {\n      result += \"k\";\n    }\
    \ else if (letter === \"i\") {\n      result += \"s\";\n    } else if (letter\
    \ === \"o\") {\n      result += \"c\";\n    } else if (letter === \"u\") {\n \
    \     result += \"g\";\n    } else {\n      result += letter;\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp691gae89.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp691gae89.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738391
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_hwdpsy4.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n    }\n    for (let i = 0; i < newMessage.length; i++)\
    \ {\n        let letter = newMessage[i];\n        let index = letter.charCodeAt(0)\
    \ - 65;\n        newMessage = newMessage.replace(letter, String.fromCharCode(index));\n\
    \    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeitxhnki.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeitxhnki.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738391
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let\
    \ vowels = \"aeiou\";\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter)\
    \ + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter\
    \ = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n\
    \    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage\
    \ += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter)\
    \ + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter\
    \ = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n\
    \    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage\
    \ += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter)\
    \ + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter\
    \ = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n\
    \    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage\
    \ += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter)\
    \ + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter\
    \ = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n\
    \    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage\
    \ += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter)\
    \ + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter\
    \ = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n\
    \    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage\
    \ += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpktgb0mgd.ts(96,1): error TS1005: '';'' expected.

    ../../../../../tmp/tmpktgb0mgd.ts(96,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpktgb0mgd.ts(109,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738391
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            let nextLetter = alphabet[(index + 1) % alphabet.length];\n     \
    \       result += nextLetter;\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsk24cm_j.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpsk24cm_j.ts(19,30): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpsk24cm_j.ts(19,53): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738391
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const letterIndex = alphabet.indexOf(letter);\n\
    \    const nextLetterIndex = letterIndex + 2;\n    if (nextLetterIndex > alphabet.length\
    \ - 1) {\n      nextLetterIndex = 0;\n    }\n    const nextLetter = alphabet[nextLetterIndex];\n\
    \    newMessage += nextLetter;\n  }\n  return newMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgyvrc4vw.ts(15,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpgyvrc4vw.ts(17,27): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpgyvrc4vw.ts(18,7): error TS2588: Cannot assign to ''nextLetterIndex''
    because it is a constant.

    ../../../../../tmp/tmpgyvrc4vw.ts(20,24): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738391
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n\
    \        let vowelIndex = encodedLetter.indexOf(\"A\");\n        if (vowelIndex\
    \ >= 0) {\n            encodedLetter = encodedLetter.replace(vowelIndex, vowelIndex\
    \ + 2);\n        }\n        encodedMessage += encodedLetter;\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp8pzp2quc.ts(18,51): error TS2769: No overload matches\
    \ this call.\n  Overload 1 of 2, '(searchValue: string | RegExp, replaceValue:\
    \ string): string', gave the following error.\n    Argument of type 'number' is\
    \ not assignable to parameter of type 'string | RegExp'.\n  Overload 2 of 2, '(searchValue:\
    \ string | RegExp, replacer: (substring: string, ...args: any[]) => string): string',\
    \ gave the following error.\n    Argument of type 'number' is not assignable to\
    \ parameter of type 'string | RegExp'.\n"
  timestamp: 1659738391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpacanj9qp.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpacanj9qp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_hwdpsy4.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      if (index === -1) {\n        result += letter;\n      } else {\n      \
    \  result += alphabet[(index + 1) % alphabet.length];\n      }\n    }\n  }\n \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv62ts89l.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpv62ts89l.ts(22,19): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpv62ts89l.ts(22,42): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let letterIndex = letter.charCodeAt(0)\
    \ - 65;\n    if (letterIndex > 0) {\n      letter = String.fromCharCode(letterIndex\
    \ + 65);\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsvd_ua1w.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsvd_ua1w.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           newMessage += letter;\n        } else {\n            newMessage +=\
    \ letter.charCodeAt(0) - 96;\n        }\n    }\n    return newMessage;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2c2o7ujy.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2c2o7ujy.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738383
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ {\n      result += nextLetter;\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ESTundefined'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_ba8db69.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_ba8db69.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ESTundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738391
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n\
    \            let letter2 = alphabet[(index + 1) % alphabet.length];\n        \
    \    result += letter2;\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk2qh3ph1.ts(18,25): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpk2qh3ph1.ts(19,27): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpk2qh3ph1.ts(19,50): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            result += letter.toUpperCase();\n        } else {\n         \
    \   result += letter.toLowerCase();\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1icvv56f.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1icvv56f.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        } else if (letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result\
    \ += letter.toUpperCase();\n            i++;\n        } else {\n            result\
    \ += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvs0x_aho.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvs0x_aho.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpacanj9qp.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpacanj9qp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n\
    \    let encodedVowel = vowels[letter];\n    let encodedVowel2 = vowels[encodedVowel];\n\
    \    let encodedVowel3 = vowels[encodedVowel2];\n    let encodedVowel4 = vowels[encodedVowel3];\n\
    \    let encodedVowel5 = vowels[encodedVowel4];\n    let encodedVowel6 = vowels[encodedVowel5];\n\
    \    let encodedVowel7 = vowels[encodedVowel6];\n    let encodedVowel8 = vowels[encodedVowel7];\n\
    \    let encodedVowel9 = vowels[encodedVowel8];\n    let encodedVowel10 = vowels[encodedVowel9];\n\
    \    let encodedVowel11 = vowels[encodedVowel10];\n    let encodedVowel12 = vowels[encodedVowel11];\n\
    \    let encodedVowel13 = vowels[encodedVowel12];\n    let encodedVowel14 = vowels[encodedVowel13];\n\
    \    let encodedVowel15 = vowels[encodedVowel14];\n    let encodedVowel16 = vowels[encodedVowel15];\n\
    \    let encodedVowel17 = vowels[encodedVowel16];\n    let encodedVowel18 = vowels[encodedVowel17];\n\
    \    let encodedVowel19 = vowels[encodedVowel18];\n    let encodedVowel20 = vowels[encodedVowel19];\n\
    \    let encodedVowel21 = vowels[encodedVowel20];\n    let encodedVowel22 = vowels[encodedVowel21];\n\
    \    let encodedVowel23 = vowels[encodedVowel22];\n    let encodedVowel24 = vowels[encodedVowel23];\n\
    \    let encodedVowel25 = vowels[encodedVowel24];\n    let encodedVowel26 = vowels[encodedVowel25];\n\
    \    let encodedVowel27 = vowels[encodedVowel26];\n    let encodedVowel28 = vowels[encodedVowel27];\n\
    \    let encodedVowel29 = vowels[encodedVowel28];\n    let encodedVowel30 = vowels[encodedVowel29];\n\
    \    let encodedVowel31 = vowels[encodedVowel30];\n    let encodedVowel32 = vowel\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz4_2_ahj.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let newLetter = letter;\n\
    \        let vowels = \"AEIOUaeiou\";\n        for (let j = 0; j < vowels.length;\
    \ j++) {\n            if (letter == vowels[j]) {\n                newLetter =\
    \ vowels[j + 1];\n                break;\n            }\n        }\n        newMessage\
    \ += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxcjjyhm2.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxcjjyhm2.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let vowels = \"aeiou\";\n    let index\
    \ = vowels.indexOf(letter);\n    if (index > -1) {\n      result += vowels[index\
    \ + 2];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcgeg3a4g.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcgeg3a4g.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738392
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    let nextLetterIndex = alphabet.indexOf(nextLetter);\n    let nextLetterLetter\
    \ = alphabet[nextLetterIndex + 1];\n    if (letter === nextLetterLetter) {\n \
    \     result += letter;\n    } else {\n      result += alphabet[alphabet.indexOf(letter)\
    \ + 2];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp463kj_7z.ts(16,27): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp463kj_7z.ts(17,28): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp463kj_7z.ts(21,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp463kj_7z.ts(21,26): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738391
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n\
    \        } else {\n            newMessage += letter.toUpperCase();\n        }\n\
    \        if (nextLetter === \"a\" || nextLetter === \"e\" || nextLetter === \"\
    i\" || nextLetter === \"o\" || nextLetter === \"u\") {\n            newMessage\
    \ += nextLetter;\n        } else {\n            newMessage += nextLetter.toLowerCase();\n\
    \        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpp6p1gjur.js:26\n            newMessage += nextLetter.toLowerCase();\n\
    \                                     ^\n\nTypeError: Cannot read properties of\
    \ undefined (reading 'toLowerCase')\n    at encode (/tmp/tmpp6p1gjur.js:26:38)\n\
    \    at test (/tmp/tmpp6p1gjur.js:34:22)\n    at Object.<anonymous> (/tmp/tmpp6p1gjur.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738392
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let letterIndex = alphabet.indexOf(letter);\n\
    \    if (letterIndex === -1) {\n      result += letter;\n    } else {\n      let\
    \ vowelIndex = letterIndex + 2;\n      if (vowelIndex > alphabet.length - 1) {\n\
    \        vowelIndex = 0;\n      }\n      result += alphabet[vowelIndex];\n   \
    \ }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpee72cgcv.ts(15,23): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpee72cgcv.ts(20,24): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmpee72cgcv.ts(23,17): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738392
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6vg473_8.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6vg473_8.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738389
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_hwdpsy4.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp_hwdpsy4.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738381
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        let nextNextLetter = message[i + 2];\n        let nextNextNextLetter\
    \ = message[i + 3];\n        if (letter === \"a\" || letter === \"e\" || letter\
    \ === \"i\" || letter === \"o\" || letter === \"u\") {\n            result +=\
    \ letter;\n        } else if (letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" ||\
    \ letter === \"o\" || letter === \"u\") {\n            result += letter;\n   \
    \     } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" ||\
    \ letter === \"o\" || letter === \"u\") {\n            result += letter;\n   \
    \     } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" ||\
    \ letter === \"o\" || letter === \"u\") {\n            result += letter;\n   \
    \     } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" ||\
    \ letter === \"o\" || letter === \"u\") {\n            result += letter;\n   \
    \     } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" ||\
    \ letter === \"o\" || letter === \"u\") {\n            result += letter;\n   \
    \     } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" ||\
    \ letter === \"o\" || letter === \"u\") {\n            result += letter;\n   \
    \     } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" ||\
    \ letter === \"o\" || letter === \"u\") {\n            result += letter;\n   \
    \     } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n\
    \        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" ||\
    \ letter === \"o\" || letter === \"u\") {\n            result += letter;\n   \
    \     } else if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: "/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:75701\n\
    \                throw e;\n                ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'kind')\n    at Object.isBlock (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:11249:21)\n\
    \    at emitEmbeddedStatement (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:73130:20)\n\
    \    at emitIfStatement (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:72093:13)\n\
    \    at pipelineEmitWithHint (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:71146:32)\n\
    \    at pipelineEmitWithComments (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:73893:17)\n\
    \    at pipelineEmitWithSubstitution (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:71384:13)\n\
    \    at emitNodeWithNotification (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:69978:21)\n\
    \    at pipelineEmitWithNotification (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:71006:13)\n\
    \    at emit (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:70962:13)\n\
    \    at emitIfStatement (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:72099:21)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738392
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let letterIndex = alphabet.indexOf(letter);\n\
    \    if (letterIndex === -1) {\n      result += letter;\n    } else {\n      let\
    \ vowelIndex = letterIndex - 2;\n      let vowel = alphabet[vowelIndex];\n   \
    \   result += vowel;\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmkue73ee.ts(15,23): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpmkue73ee.ts(20,19): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6vg473_8.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6vg473_8.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738389
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n\
    \        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1)\
    \ {\n            result += vowels[vowelIndex + 1];\n        } else {\n       \
    \     result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprjs_3a2b.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprjs_3a2b.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const vowelIndex = letter.charCodeAt(0)\
    \ - 65;\n    const vowel = vowels[vowelIndex];\n    newMessage += vowel;\n  }\n\
    \  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkk4l8i1e.ts(16,19): error TS2552: Cannot find name
    ''vowels''. Did you mean ''vowel''?

    '
  timestamp: 1659738393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           result += letter;\n        } else {\n            let vowel = vowels[letter];\n\
    \            if (vowel === undefined) {\n                result += letter;\n \
    \           } else {\n                let vowelIndex = vowels.indexOf(vowel);\n\
    \                result += vowels[vowelIndex + 2];\n            }\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplmlbv8kx.ts(18,25): error TS2552: Cannot find name
    ''vowels''. Did you mean ''vowel''?

    ../../../../../tmp/tmplmlbv8kx.ts(22,34): error TS2552: Cannot find name ''vowels''.
    Did you mean ''vowel''?

    ../../../../../tmp/tmplmlbv8kx.ts(23,27): error TS2552: Cannot find name ''vowels''.
    Did you mean ''vowel''?

    '
  timestamp: 1659738393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      letter\
    \ = \"t\";\n    } else if (letter === \"e\") {\n      letter = \"k\";\n    } else\
    \ if (letter === \"i\") {\n      letter = \"s\";\n    } else if (letter === \"\
    o\") {\n      letter = \"c\";\n    } else if (letter === \"u\") {\n      letter\
    \ = \"g\";\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5j3uxyj8.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5j3uxyj8.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl_4y6hw0.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl_4y6hw0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738378
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) -\
    \ 97;\n    result += String.fromCharCode(index * 2 + 65);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n\"'\\t%'\"\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8cfu5_e4.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8cfu5_e4.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: \"'\\t%'\"\
    ,\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"AEIOUaeiou\"\
    ;\n        let index = vowels.indexOf(letter);\n        if (index >= 0) {\n  \
    \          result += vowels[index + 2];\n        } else {\n            result\
    \ += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptynizt3_.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptynizt3_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\"\
    \ || letter === \"o\" || letter === \"u\") {\n            result += letter;\n\
    \            i++;\n        } else if (letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result\
    \ += letter.toUpperCase();\n            i++;\n        } else {\n            result\
    \ += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp36x20a7f.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp36x20a7f.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      letter\
    \ = \"A\";\n    } else if (letter === \"e\") {\n      letter = \"E\";\n    } else\
    \ if (letter === \"i\") {\n      letter = \"I\";\n    } else if (letter === \"\
    o\") {\n      letter = \"O\";\n    } else if (letter === \"u\") {\n      letter\
    \ = \"U\";\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp53gmohfh.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp53gmohfh.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) -\
    \ 97;\n    if (index >= 0) {\n      result += String.fromCharCode(index + 1);\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5mbs0glb.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5mbs0glb.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738393
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let vowelIndex = alphabet.indexOf(letter);\n\
    \      let vowel = alphabet[vowelIndex + 1];\n      result += vowel;\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcwfb4zkg.ts(18,24): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpcwfb4zkg.ts(19,19): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8wb81i3w.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8wb81i3w.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738393
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n \
    \           newMessage += letter;\n        } else {\n            let vowelIndex\
    \ = message.indexOf(letter);\n            let vowel = message.charAt(vowelIndex\
    \ - 1);\n            let vowel2 = message.charAt(vowelIndex + 1);\n          \
    \  newMessage += vowel;\n            newMessage += vowel2;\n        }\n    }\n\
    \    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ETSETE'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphtpdy24g.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphtpdy24g.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ETSETE',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738393
