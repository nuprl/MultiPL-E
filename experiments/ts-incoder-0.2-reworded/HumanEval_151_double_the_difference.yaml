name: HumanEval_151_double_the_difference
language: ts
prompt: "//Given an array of numbers, return the sum of squares of the numbers\n//\
  \ in the array that are odd. Ignore numbers that are negative or not integers.\n\
  // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
  \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
  // 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst:\
  \ number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
  \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
  \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
  \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
completions: ["  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]),\
    \ 2);\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", " \
    \ if (lst.length === 0) {\n    return 0;\n  }\n  const n = lst.length;\n  let\
    \ sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (lst[i] % 2 !== 0) {\n   \
    \   sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  const sumOfSquares = lst.reduce((acc, val) => {\n    return acc + Math.pow(val,\
    \ 2);\n  }, 0);\n  return sumOfSquares % 2 === 0 ? sumOfSquares : sumOfSquares\
    \ - 1;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum +=\
    \ Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n\
    \      continue;\n    }\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n     \
    \ sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n\
    \    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  const even = lst.reduce((acc, curr) => {\n \
    \   return acc + (curr % 2 === 0);\n  }, 0);\n  const odd = lst.reduce((acc, curr)\
    \ => {\n    return acc + (curr % 2 !== 0);\n  }, 0);\n  return even - odd;\n}\n",
  "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n\
    \    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, curr) => acc + Math.pow(curr,\
    \ 2), 0);\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum +=\
    \ Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    sum += lst[i] * lst[i];\n\
    \  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n\
    \      sum += Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  const n = lst.length;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n\
    \    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] *\
    \ lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n",
  "  if (lst.length === 0) {\n    return 0;\n  }\n  const result = lst.reduce((acc,\
    \ curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc +\
    \ Math.pow(curr, 2);\n  }, 0);\n  return result;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const n = lst.length;\n\
    \  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (lst[i] % 2 !== 0) {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum +=\
    \ Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n  \
    \  return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n    } else\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum +=\
    \ Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum\
    \ += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * lst[i];\n    } else {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const result =\
    \ lst.reduce((acc, curr) => {\n    return acc + Math.pow(curr, 2);\n  }, 0);\n\
    \  return result % 2 === 0 ? result : result;\n}\n", "  if (lst.length === 0)\
    \ {\n    return 0;\n  }\n  return lst.reduce((acc, val) => acc + val * val, 0);\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n\
    \    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, val) => {\n    if (val\
    \ % 2 !== 0) {\n      return acc + val;\n    }\n    return acc;\n  }, 0);\n}\n",
  "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]),\
    \ 2);\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", " \
    \ if (lst.length === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, curr)\
    \ => acc + (curr * curr), 0);\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum\
    \ += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  const even = lst.reduce((acc, val) => val % 2 ===\
    \ 0 ? acc + val : acc, 0);\n  return even * even;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n\
    \    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum +=\
    \ Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] >= 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n\
    \  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n    \
    \  sum += lst[i];\n    } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n\
    \  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const\
    \ even = lst.reduce((acc, val) => acc && val % 2 === 0, true);\n  return even\n\
    \    ? lst.reduce((acc, val) => acc + val * val, 0)\n    : lst.reduce((acc, val)\
    \ => acc + val * val, 0);\n}\n", "  if (lst.length === 0) {\n    return 0;\n \
    \ }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  const n = lst.length;\n  const sum = 0;\n  for\
    \ (let i = 0; i < n; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * lst[i];\n    } else {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((sum, num) => sum\
    \ + num * num, 0);\n  return sumOfSquares % 2 === 1 ? sumOfSquares : sumOfSquares\
    \ - 1;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const n = lst.length;\n\
    \  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (lst[i] < 0) {\n  \
    \    sum += Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += lst[i];\n    } else {\n      sum\
    \ += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const n = lst.length;\n\
    \  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (lst[i] % 2 !== 0) {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    if (lst[i] % 2 !==\
    \ 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, val) => acc + Math.pow(val,\
    \ 2), 0);\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n\
    \    }\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const n = lst.length;\n\
    \  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (lst[i] % 2 !== 0) {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n\
    \    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  const n = lst.length;\n  let sum = 0;\n  for\
    \ (let i = 0; i < n; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n\
    \    }\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n\
    \  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i]\
    \ * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n",
  "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * lst[i];\n\
    \    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    sum += lst[i] * lst[i];\n\
    \  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  const odd = lst.reduce((acc, cur) => acc &&\
    \ cur % 2 === 1, true);\n  return odd ? lst.reduce((acc, cur) => acc + cur **\
    \ 2, 0) : 0;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const first\
    \ = lst[0];\n  const rest = lst.slice(1);\n  return rest.reduce((acc, val) =>\
    \ acc + val * val, first);\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n}\n", " \
    \ if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  return lst.reduce((acc, val) => {\n    if (val % 2 === 1) {\n      return\
    \ acc + val;\n    }\n    return acc;\n  }, 0);\n}\n", "  if (lst.length === 0)\
    \ {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < 0) {\n      sum += lst[i] * lst[i];\n    } else {\n    \
    \  sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n\
    \    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const result = lst.reduce((acc,\
    \ curr) => {\n    if (curr > 0) {\n      return acc + Math.pow(curr, 2);\n   \
    \ }\n    return acc;\n  }, 0);\n  return result;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * lst[i];\n    } else {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  const n = lst.length;\n  const sum = 0;\n  for (let\
    \ i = 0; i < n; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n  \
    \  }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n\
    \  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2\
    \ !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * lst[i];\n    } else {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]),\
    \ 2);\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", " \
    \ if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  const n = lst.length;\n  let sum = 0;\n  for\
    \ (let i = 0; i < n; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  const odd = lst.reduce((acc, val) => {\n   \
    \ return acc + (val % 2 === 1 ? val : 0);\n  }, 0);\n  return odd;\n}\n", "  if\
    \ (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n\
    \    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n",
  "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum +=\
    \ Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n\
    \      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, curr) => {\n    if (curr\
    \ < 0) {\n      return acc;\n    }\n    return acc + Math.pow(curr, 2);\n  },\
    \ 0);\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const odd_sum =\
    \ 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n\
    \      odd_sum += lst[i];\n    }\n  }\n  return odd_sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n\
    \    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, x) => acc + Math.pow(x,\
    \ 2), 0);\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n     \
    \ sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n\
    \    return 0;\n  }\n  const odd = lst.reduce((acc, curr) => acc + (curr % 2 ?\
    \ 1 : 0), 0);\n  return lst.reduce((acc, curr) => acc + Math.pow(curr - odd, 2),\
    \ 0);\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum +=\
    \ lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n     \
    \ sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n\
    \    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n    } else\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum +=\
    \ Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n     \
    \ sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n\
    \    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < 0) {\n      sum += lst[i];\n    } else {\n      sum += Math.pow(lst[i], 2);\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    if (lst[i] % 2 !==\
    \ 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const n = lst.length;\n\
    \  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (lst[i] % 2 !== 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  const n = lst.length;\n  let sum = 0;\n  for\
    \ (let i = 0; i < n; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]),\
    \ 2);\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    if (lst[i] % 2 !==\
    \ 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  const odd = lst.reduce((acc, val) => {\n   \
    \ return acc + (val % 2 === 1 ? val : 0);\n  }, 0);\n  return lst.reduce((acc,\
    \ val) => {\n    return acc + (val % 2 === 1 ? val : 0);\n  }, 0) + odd;\n}\n",
  "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]),\
    \ 2);\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]),\
    \ 2);\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", " \
    \ if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i];\n   \
    \ } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n",
  "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]),\
    \ 2);\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", " \
    \ if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n  \
    \  return 0;\n  }\n  const n = lst.length;\n  const sum = 0;\n  for (let i = 0;\
    \ i < n; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n    \
    \  sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n \
    \ return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n    \
    \  sum += Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum += lst[i] *\
    \ lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return\
    \ 0;\n  }\n  const n = lst.length;\n  let sum = 0;\n  for (let i = 0; i < n; i++)\
    \ {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]),\
    \ 2);\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n\
    \      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, curr) => {\n    if (curr\
    \ % 2 === 0) {\n      return acc + curr;\n    }\n    return acc;\n  }, 0);\n}\n",
  "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * lst[i];\n    } else {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * lst[i];\n    } else {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i];\n\
    \    } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n\
    \    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]),\
    \ 2);\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n\
    \    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  return lst.reduce((acc,\
    \ val) => acc + Math.pow(val, 2), 0);\n}\n", "  if (lst.length === 0) {\n    return\
    \ 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, val) => {\n    if (val\
    \ % 2 === 0) {\n      return acc + val;\n    }\n    return acc;\n  }, 0);\n}\n",
  "  if (lst.length === 0) {\n    return 0;\n  }\n  const first = lst[0];\n  const\
    \ rest = lst.slice(1);\n  return rest.reduce((acc, val) => acc + Math.pow(val,\
    \ 2), first);\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n    \
    \  sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n \
    \ return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const n\
    \ = lst.length;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n\
    \    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum +=\
    \ Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  const n = lst.length;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n\
    \    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, val) => {\n    return\
    \ acc + val * val;\n  }, 0);\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const odd = lst.reduce((acc,\
    \ curr) => {\n    return acc + (curr % 2 === 1 ? curr : 0);\n  }, 0);\n  return\
    \ odd;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const odd = lst.reduce((acc,\
    \ curr) => {\n    return acc + (curr % 2 === 1 ? 1 : 0);\n  }, 0);\n  return lst.reduce((acc,\
    \ curr) => {\n    return acc + (curr % 2 === 1 ? curr : 0);\n  }, 0) - odd;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n\
    \    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const n = lst.length;\n\
    \  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (lst[i] % 2 !== 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n     \
    \ sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n\
    \    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n    } else\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  const n = lst.length;\n  const sum = 0;\n  for\
    \ (let i = 0; i < n; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < 0) {\n      continue;\n    }\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const n = lst.length;\n\
    \  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (lst[i] % 2 !== 0) {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    sum += lst[i] * lst[i];\n\
    \  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n     \
    \ sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n\
    \    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const n = lst.length;\n\
    \  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (lst[i] % 2 !== 0) {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  const even = lst.reduce((acc, val) => acc + (val\
    \ % 2 === 0 ? 0 : val), 0);\n  return even * even;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n     \
    \ sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n\
    \    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n  \
    \  return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n    } else\
    \ {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  const n = lst.length;\n\
    \  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (lst[i] < 0) {\n    \
    \  sum += Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < 0) {\n      sum += Math.pow(Math.abs(lst[i]), 2);\n    } else {\n      sum\
    \ += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length ===\
    \ 0) {\n    return 0;\n  }\n  const first = lst[0];\n  const rest = lst.slice(1);\n\
    \  return rest.reduce((acc, curr) => acc + curr * curr, first);\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 != 0)\
    \ {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  const n = lst.length;\n  let sum = 0;\n  for\
    \ (let i = 0; i < n; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  return lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n}\n", " \
    \ if (lst.length === 0) {\n    return 0;\n  }\n  const even = lst\n    .filter(x\
    \ => x % 2 === 0)\n    .map(x => x * x);\n  const odd = lst\n    .filter(x =>\
    \ x % 2 !== 0)\n    .map(x => x * x);\n  return even.reduce((a, b) => a + b, 0)\
    \ + odd.reduce((a, b) => a + b, 0);\n}\n", "  if (lst.length === 0) {\n    return\
    \ 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < 0) {\n      continue;\n    }\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 != 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, val) => {\n    if (val\
    \ % 2 === 0) {\n      return acc + val;\n    }\n    return acc;\n  }, 0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
