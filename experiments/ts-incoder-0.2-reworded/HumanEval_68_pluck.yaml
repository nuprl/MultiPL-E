name: HumanEval_68_pluck
language: ts
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in an array, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2,\
  \ 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5,\
  \ 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n// so we will choose the first zero, which has the smallest index.\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
  \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n\
  \  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
  \ 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, index) =>\
    \ {\n    if (curr < acc) return index;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  return evenValues.map(v => [v,minIndex]);\n}\n", "  const evenValues = arr.filter(node\
    \ => node % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((a, b) => a < b ? a : b);\n  const indexOfSmallestEvenValue\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, indexOfSmallestEvenValue];\n\
    }\n", "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const smallestEvenValue = evenValues.reduce((a,\
    \ b) => a < b ? a : b);\n  const index = arr.indexOf(smallestEvenValue);\n  return\
    \ [smallestEvenValue, index];\n}\n", "  const minEven = arr.reduce((acc, cur)\
    \ => {\n    if (cur % 2 === 0) {\n      return cur;\n    }\n    return acc;\n\
    \  }, Number.MAX_SAFE_INTEGER);\n  const index = arr.indexOf(minEven);\n  return\
    \ index === -1 ? [] : [minEven, index];\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ sortedEvenValues = evenValues.sort((a, b) => a - b);\n  const smallestEvenValue\
    \ = sortedEvenValues[0];\n  const smallestIndex = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, smallestIndex];\n}\n", "  const even = arr.filter(node\
    \ => node % 2 === 0);\n  if (even.length === 0) {\n    return [];\n  }\n  const\
    \ smallestEven = even.sort((a, b) => a - b)[0];\n  const index = even.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n", "  const evenValues = arr.filter(node\
    \ => node % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndexOfSmallestEvenValue\
    \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndexOfSmallestEvenValue];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  const sortedEvenValues = evenValues.sort((a,\
    \ b) => a - b);\n  return sortedEvenValues.reduce((acc, curr, i, arr) => {\n \
    \   if (i === 0) {\n      return [curr, arr[i]];\n    }\n    if (arr[i] === arr[i\
    \ - 1]) {\n      return [arr[i], arr[i]];\n    }\n    return [arr[i], arr[i]];\n\
    \  }, []);\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i\
    \ = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue =\
    \ arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n",
  "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
    \ 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const\
    \ index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ index];\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, i) => {\n\
    \    if (curr < acc) return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  return evenValues.map(n => [n, minIndex]);\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue\
    \ = evenValues.sort((a, b) => a - b)[0];\n  const index = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "  const even = arr.filter(node =>\
    \ node % 2 === 0);\n  if (even.length === 0) return [];\n  const smallest = even.sort((a,\
    \ b) => a - b)[0];\n  const index = even.indexOf(smallest);\n  return [smallest,\
    \ index];\n}\n", "  const even = arr.filter(n => n % 2 === 0);\n  if (even.length\
    \ === 0) {\n    return [];\n  }\n  return even.sort((a, b) => a - b)[0];\n}\n",
  "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length ===\
    \ 0) return [];\n  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n\
    \  return sortedEvenValues.reduce((prev, curr) => {\n    if (prev === undefined)\
    \ return [curr];\n    if (prev[0] === curr) return [prev[0], prev[1] + 1];\n \
    \   return [prev[0], prev[1]];\n  }, undefined);\n}\n", "  const evenValues =\
    \ arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n \
    \ const smallestEvenValue = evenValues.reduce((a, b) => a < b ? a : b);\n  const\
    \ index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  return evenValues.reduce((acc, val, index)\
    \ => {\n    if (val < acc[0]) {\n      return [val, index];\n    }\n    return\
    \ acc;\n  }, [evenValues[0]]);\n}\n", "  const evenValues = arr.filter(n => n\
    \ % 2 === 0);\n  if (evenValues.length === 0) return [];\n  return evenValues.reduce((acc,\
    \ val, i) => {\n    if (val < acc[0]) {\n      return [val, i];\n    }\n    return\
    \ acc;\n  }, []);\n}\n", "  let minValue = arr[0];\n  let minIndex = 0;\n  for\
    \ (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  return evenValues.reduce((a, b) => a < b ?\
    \ a : b);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
