name: HumanEval_30_get_positive
language: ts
prompt: "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1, -2,\
  \ 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0,\
  \ 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
  \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
completions: ["    return l.filter(function (n) { return n >= 0; });\n}\n", "    return\
    \ l.filter(function (x) { return x >= 0; });\n}\n", "    let positive = [];\n\
    \    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n         \
    \   positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n", "    let\
    \ positive = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >\
    \ 0) {\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n", "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n    \
    \    if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n    }\n   \
    \ return positive;\n}\n", "    return l.filter(function (x) { return x > 0; });\n\
    }\n", "    return l.filter(function (x) { return x >= 0; });\n}\n", "    return\
    \ l.filter(function (n) { return n > 0; });\n}\n", "    let positive = [];\n \
    \   for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n          \
    \  positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n", "    return\
    \ l.filter(function (n) { return n >= 0; });\n}\n", "    const positive = [];\n\
    \    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n         \
    \   positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n", "    return\
    \ l.filter(function (x) { return x >= 0; });\n}\n", "    return l.filter(function\
    \ (x) { return x > 0; });\n}\n", "    let positive = [];\n    for (let i = 0;\
    \ i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(function (x)\
    \ { return x > 0; });\n}\n", "  return l.filter(function (x) { return x > 0; });\n\
    }\n", "    return l.filter(n => n > 0);\n}\n", "    return l.filter(function (x)\
    \ { return x > 0; });\n}\n", "    return l.filter(function (n) { return n > 0;\
    \ });\n}\n", "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n    }\n\
    \    return positive;\n}\n", "  return l.filter(function (x) { return x >= 0;\
    \ });\n}\n", "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n    }\n\
    \    return positive;\n}\n", "    let positive = [];\n    for (let i = 0; i <\
    \ l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    let positive = [];\n    for\
    \ (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(function (x)\
    \ { return x > 0; });\n}\n", "    let positive: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(function (x)\
    \ { return x >= 0; });\n}\n", "    return l.filter(function (n) { return n >=\
    \ 0; });\n}\n", "    let positive: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n\
    \    }\n    return positive;\n}\n", "  return l.filter(function (x) { return x\
    \ >= 0; });\n}\n", "    return l.filter(function (n) { return n > 0; });\n}\n",
  "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i]\
    \ > 0) {\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n", "  return l.filter(function (x) { return x >= 0; });\n}\n", "    const positive\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n \
    \           positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n",
  "    return l.filter(function (x) { return x >= 0; });\n}\n", "  return l.filter(function\
    \ (x) { return x >= 0; });\n}\n", "  return l.filter(n => n > 0);\n}\n", "   \
    \ return l.filter(function (x) { return x >= 0; });\n}\n", "    let positive =\
    \ [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n   \
    \         positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n",
  "    return l.filter(n => n > 0);\n}\n", "    let positive: number[] = [];\n   \
    \ for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    let positive = [];\n    for\
    \ (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(n => n > 0);\n\
    }\n", "    return l.filter(function (x) { return x > 0; });\n}\n", "    const\
    \ positive = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >\
    \ 0) {\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n", "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n    \
    \    if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n    }\n   \
    \ return positive;\n}\n", "    return l.filter(function (n) { return n > 0; });\n\
    }\n", "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n    \
    \    if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n    }\n   \
    \ return positive;\n}\n", "    const positive = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n\
    \    }\n    return positive;\n}\n", "    let positive = [];\n    for (let i =\
    \ 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    let positive = [];\n    for\
    \ (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    const positive = [];\n   \
    \ for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    let positive = [];\n    for\
    \ (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(function (x)\
    \ { return x >= 0; });\n}\n", "    return l.filter(function (x) { return x >=\
    \ 0; });\n}\n", "    return l.filter(function (x) { return x >= 0; });\n}\n",
  "    return l.filter(n => n > 0);\n}\n", "    return l.filter(function (x) { return\
    \ x >= 0; });\n}\n", "    let positive = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n\
    \    }\n    return positive;\n}\n", "    return l.filter(n => n > 0);\n}\n", " \
    \ return l.filter(function (x) { return x >= 0; });\n}\n", "    return l.filter(function\
    \ (x) { return x > 0; });\n}\n", "    const positive = [];\n    for (let i = 0;\
    \ i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(function (n)\
    \ { return n >= 0; });\n}\n", "    return l.filter(function (x) { return x > 0;\
    \ });\n}\n", "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n    }\n\
    \    return positive;\n}\n", "    let positive = [];\n    for (let i = 0; i <\
    \ l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(function (n)\
    \ { return n > 0; });\n}\n", "    return l.filter(function (x) { return x > 0;\
    \ });\n}\n", "    return l.filter(function (x) { return x >= 0; });\n}\n", " \
    \   return l.filter(function (x) { return x >= 0; });\n}\n", "    let positive:\
    \ number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >\
    \ 0) {\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n", "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n    \
    \    if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n    }\n   \
    \ return positive;\n}\n", "    let positive = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n\
    \    }\n    return positive;\n}\n", "  return l.filter(function (x) { return x\
    \ >= 0; });\n}\n", "    const positive: number[] = [];\n    for (let i = 0; i\
    \ < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(function (x)\
    \ { return x >= 0; });\n}\n", "    return l.filter(function (x) { return x >=\
    \ 0; });\n}\n", "    return l.filter(function (n) { return n > 0; });\n}\n", " \
    \   return l.filter(function (x) { return x > 0; });\n}\n", "  return l.filter(function\
    \ (x) { return x > 0; });\n}\n", "    const positive = [];\n    for (let i = 0;\
    \ i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(function (n)\
    \ { return n >= 0; });\n}\n", "    return l.filter(function (x) { return x > 0;\
    \ });\n}\n", "    return l.filter(function (n) { return n > 0; });\n}\n", "  \
    \  return l.filter(function (x) { return x > 0; });\n}\n", "    const positive\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >= 0) {\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n",
  "    return l.filter(function (x) { return x >= 0; });\n}\n", "    let positive\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n \
    \           positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n",
  "    return l.filter(function (x) { return x >= 0; });\n}\n", "    return l.filter(function\
    \ (x) { return x >= 0; });\n}\n", "    return l.filter(function (x) { return x\
    \ >= 0; });\n}\n", "    return l.filter(function (x) { return x >= 0; });\n}\n",
  "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i]\
    \ > 0) {\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n", "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n    \
    \    if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n    }\n   \
    \ return positive;\n}\n", "  return l.filter(function (x) { return x > 0; });\n\
    }\n", "    return l.filter(function (x) { return x > 0; });\n}\n", "    return\
    \ l.filter(function (x) { return x > 0; });\n}\n", "    let positive = [];\n \
    \   for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n          \
    \  positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n", "    const\
    \ positive = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >\
    \ 0) {\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n", "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n    \
    \    if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n    }\n   \
    \ return positive;\n}\n", "    return l.filter(function (x) { return x >= 0; });\n\
    }\n", "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n    \
    \    if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n    }\n   \
    \ return positive;\n}\n", "    const positive = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n\
    \    }\n    return positive;\n}\n", "    let positive = [];\n    for (let i =\
    \ 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(function (n)\
    \ { return n > 0; });\n}\n", "    const positive = [];\n    for (let i = 0; i\
    \ < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(x => x > 0);\n\
    }\n", "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n    \
    \    if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n    }\n   \
    \ return positive;\n}\n", "    return l.filter(function (x) { return x >= 0; });\n\
    }\n", "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n    \
    \    if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n    }\n   \
    \ return positive;\n}\n", "    let positive = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n\
    \    }\n    return positive;\n}\n", "    let positive = [];\n    for (let i =\
    \ 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    let positive = [];\n    for\
    \ (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    let positive = [];\n    for\
    \ (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    let positive = [];\n    for\
    \ (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(function (x)\
    \ { return x > 0; });\n}\n", "  return l.filter(function (x) { return x > 0; });\n\
    }\n", "  return l.filter(function (x) { return x >= 0; });\n}\n", "    let positive\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n \
    \           positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n",
  "    return l.filter(function (n) { return n > 0; });\n}\n", "    let positive =\
    \ [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n   \
    \         positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n",
  "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i]\
    \ > 0) {\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n", "    return l.filter(function (x) { return x >= 0; });\n}\n", "    return\
    \ l.filter(function (x) { return x > 0; });\n}\n", "  return l.filter(x => x >\
    \ 0);\n}\n", "    return l.filter(function (n) { return n > 0; });\n}\n", "  \
    \  return l.filter(function (n) { return n > 0; });\n}\n", "    return l.filter(function\
    \ (n) { return n >= 0; });\n}\n", "    const positive = [];\n    for (let i =\
    \ 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(function (n)\
    \ { return n >= 0; });\n}\n", "    let positive = [];\n    for (let i = 0; i <\
    \ l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    let positive = [];\n    for\
    \ (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(function (x)\
    \ { return x >= 0; });\n}\n", "    return l.filter(n => n > 0);\n}\n", "  return\
    \ l.filter(function (x) { return x >= 0; });\n}\n", "    return l.filter(function\
    \ (n) { return n > 0; });\n}\n", "    return l.filter(function (x) { return x\
    \ > 0; });\n}\n", "    let positive: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n\
    \    }\n    return positive;\n}\n", "    const positive = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "  return l.filter(function (x)\
    \ { return x >= 0; });\n}\n", "    return l.filter(function (x) { return x >=\
    \ 0; });\n}\n", "    const positive = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n  \
    \  }\n    return positive;\n}\n", "    return l.filter(function (x) { return x\
    \ >= 0; });\n}\n", "    return l.filter(function (n) { return n >= 0; });\n}\n",
  "    return l.filter(function (x) { return x > 0; });\n}\n", "    return l.filter(n\
    \ => n > 0);\n}\n", "    let positive = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n\
    \    }\n    return positive;\n}\n", "    return l.filter(function (x) { return\
    \ x > 0; });\n}\n", "    let positive = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n\
    \    }\n    return positive;\n}\n", "    return l.filter(function (n) { return\
    \ n > 0; });\n}\n", "    return l.filter(function (x) { return x >= 0; });\n}\n",
  "    return l.filter(function (x) { return x >= 0; });\n}\n", "    let positive\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n \
    \           positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n",
  "    return l.filter(n => n > 0);\n}\n", "  return l.filter(function (x) { return\
    \ x >= 0; });\n}\n", "    let positive = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n\
    \    }\n    return positive;\n}\n", "    return l.filter(function (x) { return\
    \ x > 0; });\n}\n", "    return l.filter(function (x) { return x > 0; });\n}\n",
  "  return l.filter(function (x) { return x >= 0; });\n}\n", "    return l.filter(function\
    \ (x) { return x >= 0; });\n}\n", "  return l.filter(function (x) { return x >\
    \ 0; });\n}\n", "    let positive = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n  \
    \  }\n    return positive;\n}\n", "    return l.filter(function (x) { return x\
    \ >= 0; });\n}\n", "    return l.filter(function (x) { return x >= 0; });\n}\n",
  "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i]\
    \ > 0) {\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n", "    let positive: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n        }\n  \
    \  }\n    return positive;\n}\n", "    let positive = [];\n    for (let i = 0;\
    \ i < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "    return l.filter(function (x)\
    \ { return x > 0; });\n}\n", "    let positive = [];\n    for (let i = 0; i <\
    \ l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "  return l.filter(function (x)\
    \ { return x >= 0; });\n}\n", "    return l.filter(function (x) { return x >=\
    \ 0; });\n}\n", "    return l.filter(function (x) { return x >= 0; });\n}\n",
  "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i]\
    \ > 0) {\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n", "    return l.filter(function (x) { return x > 0; });\n}\n", "    let positive\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n \
    \           positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n",
  "    return l.filter(function (x) { return x >= 0; });\n}\n", "    return l.filter(function\
    \ (x) { return x >= 0; });\n}\n", "    return l.filter(function (x) { return x\
    \ >= 0; });\n}\n", "    return l.filter(function (x) { return x >= 0; });\n}\n",
  "  return l.filter(function (x) { return x >= 0; });\n}\n", "    return l.filter(function\
    \ (x) { return x > 0; });\n}\n", "    return l.filter(function (x) { return x\
    \ > 0; });\n}\n", "    return l.filter(function (n) { return n > 0; });\n}\n",
  "    return l.filter(function (n) { return n >= 0; });\n}\n", "    let positive\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n \
    \           positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n",
  "    let positive = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i]\
    \ > 0) {\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n", "    return l.filter(function (n) { return n >= 0; });\n}\n", "    let positive:\
    \ number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >\
    \ 0) {\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n", "    return l.filter(function (x) { return x > 0; });\n}\n", "    let positive\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n \
    \           positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n",
  "    return l.filter(n => n > 0);\n}\n", "    return l.filter(n => n > 0);\n}\n",
  "  return l.filter(function (x) { return x > 0; });\n}\n", "    const positive =\
    \ [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n   \
    \         positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n",
  "    return l.filter(function (x) { return x > 0; });\n}\n", "    return l.filter(function\
    \ (x) { return x > 0; });\n}\n", "  return l.filter(n => n > 0);\n}\n", "    return\
    \ l.filter(n => n > 0);\n}\n", "    let positive = [];\n    for (let i = 0; i\
    \ < l.length; i++) {\n        if (l[i] > 0) {\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
