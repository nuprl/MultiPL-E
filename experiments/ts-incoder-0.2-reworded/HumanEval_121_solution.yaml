name: HumanEval_121_solution
language: ts
prompt: "//Given a non-empty array of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n\
  // >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\n\
  function solution(lst: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
  \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
  \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
  \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
  \ 13, 2, 9]),3);\n}\n\ntest();"
completions: ["  return lst.filter((item, index) => index % 2 === 1).reduce((a, b)\
    \ => a + b, 0);\n}\n", "  const evenSum = lst.filter(x => x % 2 === 0).reduce((a,\
    \ b) => a + b, 0);\n  return evenSum;\n}\n", "  let evenSum = 0;\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n\
    \    }\n  }\n  return evenSum;\n}\n", "  return lst.filter((x, i) => i % 2 ===\
    \ 1).reduce((acc, x) => acc + x, 0);\n}\n", "  return lst.filter((_, i) => i %\
    \ 2 === 1).reduce((a, b) => a + b, 0);\n}\n", "  return lst.filter((x, i) => i\
    \ % 2 === 1).reduce((a, b) => a + b, 0);\n}\n", "  return lst.filter((x, i) =>\
    \ i % 2 === 1).reduce((acc, x) => acc + x, 0);\n}\n", "  let evenSum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum +=\
    \ lst[i];\n    }\n  }\n  return evenSum;\n}\n", "  let sum = 0;\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  return lst.filter(x => x % 2 === 1).reduce((acc,\
    \ x) => acc + x, 0);\n}\n", "  let evenSum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return\
    \ evenSum;\n}\n", "  return lst.filter((_, i) => i % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n", "  return lst.filter((x, i) => i % 2 === 1).reduce((x, y)\
    \ => x + y);\n}\n", "  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2\
    \ === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let evenSum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n   \
    \   evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum +=\
    \ lst[i];\n    }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
