{
  "language": "ts",
  "name": "HumanEval_93_encode",
  "results": [
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            let vowelsBefore = message.substr(0, vowelIndex).split(\"\");\n            let vowelsAfter = message.substr(vowelIndex + 1).split(\"\");\n            let vowelsBeforeIndex = vowelsBefore.indexOf(letter);\n            let vowelsAfterIndex = vowelsAfter.indexOf(letter);\n            if (vowelsBeforeIndex > -1) {\n                let beforeLetter = vowelsBefore[vowelsBeforeIndex];\n                let afterLetter = vowelsAfter[vowelsAfterIndex];\n                let newLetter = beforeLetter + letter + afterLetter;\n                result += newLetter;\n            } else {\n                result += letter;\n            }\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpywq_6kig.js:41:12)\n    at Object.<anonymous> (/tmp/tmpywq_6kig.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333828
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      newMessage += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      newMessage += letter.toUpperCase();\n      i++;\n    } else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5x8t2ecx.js:33:12)\n    at Object.<anonymous> (/tmp/tmp5x8t2ecx.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = \"aeiouAEIOU\";\n    let vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex === -1) {\n      result += letter;\n    } else {\n      let vowelIndex2 = vowels.indexOf(message[vowelIndex + 1]);\n      result += vowels[vowelIndex2] + letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TundefinedEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpthb74erp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpthb74erp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TundefinedEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        encodedMessage += letter.toUpperCase();\n        let vowelIndex = letter.charCodeAt(0) - 65;\n        encodedMessage += vowelIndex === 0 ? letter : letter.charAt(vowelIndex - 2);\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6snzr18t.js:24:12)\n    at Object.<anonymous> (/tmp/tmp6snzr18t.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333828
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        let vowels = \"aeiouAEIOU\";\n        if (vowels.indexOf(letter) > -1) {\n            let index = vowels.indexOf(letter);\n            newLetter = vowels[index + 1];\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_l6o2874.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_l6o2874.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333828
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5gw950gr.js:25:12)\n    at Object.<anonymous> (/tmp/tmp5gw950gr.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let letterIndex = alphabet.indexOf(letter);\n        if (letterIndex === -1) {\n            letterIndex = alphabet.indexOf(letter.toUpperCase());\n        }\n        if (letterIndex === -1) {\n            letterIndex = alphabet.indexOf(letter.toLowerCase());\n        }\n        if (letterIndex === -1) {\n            letterIndex = alphabet.indexOf(\"_\");\n        }\n        newMessage += alphabet[letterIndex + 2];\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwr1xmrjs.ts(15,27): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpwr1xmrjs.ts(17,27): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpwr1xmrjs.ts(20,27): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpwr1xmrjs.ts(23,27): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpwr1xmrjs.ts(25,23): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = \"aeiou\";\n    const vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex === -1) {\n      result += letter;\n    } else {\n      const vowelIndex2 = vowelIndex + 1;\n      const letter2 = vowels.charAt(vowelIndex2);\n      result += letter2;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tist'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpryr9n06x.js:31:12)\n    at Object.<anonymous> (/tmp/tmpryr9n06x.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tist',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphxq9ul9a.js:27:12)\n    at Object.<anonymous> (/tmp/tmphxq9ul9a.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            result += letter.charCodeAt(0) - 96;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz5aikb6d.js:27:12)\n    at Object.<anonymous> (/tmp/tmpz5aikb6d.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333828
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            if (index > -1) {\n                let nextLetter = alphabet[index + 1];\n                result += nextLetter;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp60tp5br0.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp60tp5br0.ts(20,34): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333828
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length; i++) {\n        let letter = message.charAt(i);\n        let nextLetter = message.charAt(i + 1);\n        newMessage = newMessage.replace(letter, nextLetter);\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'EST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8t61n1v3.js:23:12)\n    at Object.<anonymous> (/tmp/tmp8t61n1v3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'EST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333828
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        let vowels = \"AEIOUaeiou\";\n        for (let j = 0; j < vowels.length; j++) {\n            if (letter === vowels[j]) {\n                newLetter = vowels[j + 1];\n                break;\n            }\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't work if you have a string like `'aA'`.\n<|/ c |>\n<| c |>\nIt doesn't work because you didn't account for that case. `'aA'` should return `'aA'` but your code returns `'aA'`.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out. I've updated my answer to account for that case.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp75wdju_2.ts(27,2): error TS1110: Type expected.\n../../../../tmp/tmp75wdju_2.ts(27,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp75wdju_2.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmp75wdju_2.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp75wdju_2.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmp75wdju_2.ts(29,7): error TS1109: Expression expected.\n../../../../tmp/tmp75wdju_2.ts(30,6): error TS1005: ';' expected.\n../../../../tmp/tmp75wdju_2.ts(30,47): error TS1005: ';' expected.\n../../../../tmp/tmp75wdju_2.ts(30,47): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp75wdju_2.ts(30,52): error TS1002: Unterminated string literal.\n../../../../tmp/tmp75wdju_2.ts(31,2): error TS1109: Expression expected.\n../../../../tmp/tmp75wdju_2.ts(31,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp75wdju_2.ts(32,2): error TS1109: Expression expected.\n../../../..",
      "timestamp": 1660333828
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = \"aeiouAEIOU\";\n    const index = vowels.indexOf(letter);\n    if (index >= 0) {\n      const vowelIndex = index - 2;\n      const nextLetter = vowels[vowelIndex];\n      result += nextLetter;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TuST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmimpki_p.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmimpki_p.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TuST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      letter = \"t\";\n    } else if (letter === \"e\") {\n      letter = \"k\";\n    } else if (letter === \"i\") {\n      letter = \"s\";\n    } else if (letter === \"o\") {\n      letter = \"c\";\n    } else if (letter === \"u\") {\n      letter = \"g\";\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpapqaayt0.js:37:12)\n    at Object.<anonymous> (/tmp/tmpapqaayt0.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333828
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.charCodeAt(0) - 65 + letter.charCodeAt(1) - 64;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa1_jfro6.js:22:12)\n    at Object.<anonymous> (/tmp/tmpa1_jfro6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n        if (index > -1) {\n            let nextLetter = alphabet[index + 1];\n            if (nextLetter === letter) {\n                result += nextLetter;\n            } else {\n                result += letter;\n            }\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr76baukf.ts(15,21): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpr76baukf.ts(17,30): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    const nextNextLetter = message[i + 2];\n    const nextNextNextLetter = message[i + 3];\n    const nextNextNextNextLetter = message[i + 4];\n    const nextNextNextNextNextLetter = message[i + 5];\n    const nextNextNextNextNextNextLetter = message[i + 6];\n    const nextNextNextNextNextNextNextLetter = message[i + 7];\n    const nextNextNextNextNextNextNextNextLetter = message[i + 8];\n    const nextNextNextNextNextNextNextNextNextLetter = message[i + 9];\n    const nextNextNextNextNextNextNextNextNextLetter = message[i + 10];\n    const nextNextNextNextNextNextNextNextNextNextLetter = message[i + 11];\n    const nextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 12];\n    const nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 13];\n    const nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 14];\n    const nextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 15];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 16];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 17];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 18];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 19];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 20];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 21];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 22];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 23];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 24];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 25];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextLetter = message[i + 26];\n    const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmreqs4dm.ts(55,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333828
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\";\n        let index = vowels.indexOf(letter);\n        if (index != -1) {\n            let nextLetter = vowels[index + 1];\n            result += nextLetter;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpszu67o4s.js:30:12)\n    at Object.<anonymous> (/tmp/tmpszu67o4s.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      let nextLetter = alphabet[index + 1];\n      result += nextLetter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu_d9dgow.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpu_d9dgow.ts(19,24): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333828
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 65;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1941819'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpr4gjeh36.js:27:12)\n    at Object.<anonymous> (/tmp/tmpr4gjeh36.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1941819',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    if (index === -1) {\n      result += letter;\n    } else {\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9zf7nz82.ts(15,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp9zf7nz82.ts(19,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp9zf7nz82.ts(19,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333828
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6f90b3zd.js:33:12)\n    at Object.<anonymous> (/tmp/tmp6f90b3zd.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex === -1) {\n            result += letter;\n        } else {\n            let vowelIndex = vowels.indexOf(message[vowelIndex + 1]);\n            if (vowelIndex === -1) {\n                result += letter;\n            } else {\n                let vowelIndex = vowels.indexOf(message[vowelIndex + 2]);\n                if (vowelIndex === -1) {\n                    result += letter;\n                } else {\n                    let vowelIndex = vowels.indexOf(message[vowelIndex + 3]);\n                    if (vowelIndex === -1) {\n                        result += letter;\n                    } else {\n                        let vowelIndex = vowels.indexOf(message[vowelIndex + 4]);\n                        if (vowelIndex === -1) {\n                            result += letter;\n                        } else {\n                            let vowelIndex = vowels.indexOf(message[vowelIndex + 5]);\n                            if (vowelIndex === -1) {\n                                result += letter;\n                            } else {\n                                let vowelIndex = vowels.indexOf(message[vowelIndex + 6]);\n                                if (vowelIndex === -1) {\n                                    result += letter;\n                                } else {\n                                    let vowelIndex = vowels.indexOf(message[vowelIndex + 7]);\n                                    if (vowelIndex === -1) {\n                                        result += letter;\n                                    } else {\n                                        let vowelIndex = vowels.indexOf(message[vowelIndex + 8]);\n                                        if (vowelIndex === -1) {\n                                            result += letter;\n                                        } else {\n                                            let vowelIndex = vowels.indexOf(message[vowelIndex + 9]);\n                                            if (vowelIndex === -1) {\n                                                result += letter;\n                                            } else {\n                                                let vowelIndex = vowels.indexOf(message[vowelIndex + 10]);\n                                                if (vowelIndex === -1) {\n                                                    result += letter;\n                                                } else {\n                                                    let vowelIndex = vowels.indexOf(message[vowelIndex + 11]);\n                                                    if (vowelIndex === -1) {\n                                                        result += letter;\n                                                    } else {\n                                                        let vowelIndex = vowels.indexOf(message[vowelIndex + 12]);\n                                                        if (vowelIndex === -1) {\n                                                            result += letter;\n                                                        } else {\n                                                            let vowelIndex = vowels.indexOf(message[vowelIndex + 13]);\n                                                            if (vowelIndex === -1) {\n                                                                result += letter;\n                                                            } else {\n                                                                let vowelIndex = vowels.indexOf(message[vowelIndex + 14]);\n                                                                if (vowelIndex === -1) {\n                                                                    result += letter;\n                                                                } else {\n                                                                    let vowelIndex = vowels.indexOf(message[vowelIndex + 15]);\n                                                                    if (vowelIndex === -1) {\n                                                                        result += letter;\n                                                                    } else {\n                                                                        let vowelIndex = vowels.indexOf(message[vowelIndex + 16]);\n                                                                        if (vowel\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp38kvar7t.ts(82,1): error TS1005: ')' expected.\n../../../../tmp/tmp38kvar7t.ts(95,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333831
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwbc0kgmv.ts(28,2): error TS1110: Type expected.\n../../../../tmp/tmpwbc0kgmv.ts(28,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwbc0kgmv.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmpwbc0kgmv.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwbc0kgmv.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmpwbc0kgmv.ts(30,7): error TS1109: Expression expected.\n../../../../tmp/tmpwbc0kgmv.ts(32,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphxq9ul9a.js:27:12)\n    at Object.<anonymous> (/tmp/tmphxq9ul9a.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7m8p8nmk.ts(72,102): error TS1002: Unterminated string literal.\n../../../../tmp/tmp7m8p8nmk.ts(73,1): error TS1005: ')' expected.\n../../../../tmp/tmp7m8p8nmk.ts(86,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            result += alphabet[(index + 1) % alphabet.length];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5jb8abhf.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp5jb8abhf.ts(19,23): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp5jb8abhf.ts(19,46): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    let nextLetterIndex = alphabet.indexOf(nextLetter);\n    let nextLetterLetter = alphabet[nextLetterIndex + 1];\n    let nextLetterLetterIndex = alphabet.indexOf(nextLetterLetter);\n    let nextLetterLetterLetter = alphabet[nextLetterLetterIndex + 1];\n    let nextLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetter);\n    let nextLetterLetterLetterLetter = alphabet[nextLetterLetterLetterIndex + 1];\n    let nextLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetter);\n    let nextLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterIndex + 1];\n    let nextLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetter);\n    let nextLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterIndex + 1];\n    let nextLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetter);\n    let nextLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterIndex + 1];\n    let nextLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetter);\n    let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterIndex + 1];\n    let nextLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetter);\n    let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterIndex + 1];\n    let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n    let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex + 1];\n    let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n    let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex + 1];\n    let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n    let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex + 1];\n    let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n    let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex + 1];\n    let nextLetterLetterLetterLetterLetterLetterIndex = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgnhwl00p.ts(41,9): error TS1005: ',' expected.\n../../../../tmp/tmpgnhwl00p.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3zwpp95i.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3zwpp95i.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowelIndex = letter.charCodeAt(0) - 65;\n    const vowel = vowels[vowelIndex];\n    const vowelIndex = letter.charCodeAt(0) - 97;\n    const vowel = vowels[vowelIndex];\n    newMessage = newMessage.replace(vowel, vowels[vowelIndex + 1]);\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb_v0lrkg.ts(15,11): error TS2451: Cannot redeclare block-scoped variable 'vowelIndex'.\n../../../../tmp/tmpb_v0lrkg.ts(16,11): error TS2451: Cannot redeclare block-scoped variable 'vowel'.\n../../../../tmp/tmpb_v0lrkg.ts(16,19): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n../../../../tmp/tmpb_v0lrkg.ts(17,11): error TS2451: Cannot redeclare block-scoped variable 'vowelIndex'.\n../../../../tmp/tmpb_v0lrkg.ts(18,11): error TS2451: Cannot redeclare block-scoped variable 'vowel'.\n../../../../tmp/tmpb_v0lrkg.ts(18,19): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n../../../../tmp/tmpb_v0lrkg.ts(19,44): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n",
      "timestamp": 1660333831
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n  }\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toLowerCase());\n    }\n  }\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n  }\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toLowerCase());\n    }\n  }\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n  }\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toLowerCase());\n    }\n  }\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n  }\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toLowerCase());\n    }\n  }\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n  }\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toLowerCase());\n    }\n  }\n  for (let i = 0; i < message.length; i++) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7dz75_mc.ts(87,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7m8p8nmk.ts(72,102): error TS1002: Unterminated string literal.\n../../../../tmp/tmp7m8p8nmk.ts(73,1): error TS1005: ')' expected.\n../../../../tmp/tmp7m8p8nmk.ts(86,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n    if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      encodedLetter = letter;\n    }\n    for (let j = 0; j < encodedLetter.length; j++) {\n      let vowel = encodedLetter[j];\n      let vowelIndex = vowel.charCodeAt(0) - 65;\n      let vowelCount = 1;\n      for (let k = 0; k < vowelIndex; k++) {\n        vowelCount += 2;\n      }\n      if (vowelCount === 2) {\n        encodedMessage += vowel;\n      }\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzgsirzsb.js:36:12)\n    at Object.<anonymous> (/tmp/tmpzgsirzsb.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = english.indexOf(letter);\n        if (index != -1) {\n            result += swapCase(letter);\n            result += english[index + 2];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplftu_pvj.ts(15,21): error TS2304: Cannot find name 'english'.\n../../../../tmp/tmplftu_pvj.ts(17,23): error TS2304: Cannot find name 'swapCase'.\n../../../../tmp/tmplftu_pvj.ts(18,23): error TS2304: Cannot find name 'english'.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7m8p8nmk.ts(72,102): error TS1002: Unterminated string literal.\n../../../../tmp/tmp7m8p8nmk.ts(73,1): error TS1005: ')' expected.\n../../../../tmp/tmp7m8p8nmk.ts(86,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1yhig1j8.js:33:12)\n    at Object.<anonymous> (/tmp/tmp1yhig1j8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            if (index > 0) {\n                let letter2 = alphabet[index - 1];\n                result += letter2;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc1b395a0.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpc1b395a0.ts(20,31): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let letterIndex = letter.charCodeAt(0) - 97;\n        let vowelIndex = letterIndex + 2;\n        if (letterIndex < 0 || letterIndex > 25) {\n            result += letter;\n        } else {\n            result += String.fromCharCode(vowelIndex);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8ttfwa4z.js:29:12)\n    at Object.<anonymous> (/tmp/tmp8ttfwa4z.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      newMessage += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      newMessage += letter.toUpperCase();\n      i++;\n    } else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5x8t2ecx.js:33:12)\n    at Object.<anonymous> (/tmp/tmp5x8t2ecx.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpp1jn2iix.js:27:12)\n    at Object.<anonymous> (/tmp/tmpp1jn2iix.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charCodeAt(0) - 65 + 2;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2162021'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpd2i2rckw.js:27:12)\n    at Object.<anonymous> (/tmp/tmpd2i2rckw.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2162021',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = \"aeiouAEIOU\";\n    const index = vowels.indexOf(letter);\n    if (index > -1) {\n      result += vowels[index + 2];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphv1685ga.js:29:12)\n    at Object.<anonymous> (/tmp/tmphv1685ga.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"a\" || letter === \"A\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"e\" || letter === \"E\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"i\" || letter === \"I\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"o\" || letter === \"O\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"u\" || letter === \"U\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"y\" || letter === \"Y\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"h\" || letter === \"H\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"w\" || letter === \"W\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"s\" || letter === \"S\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"d\" || letter === \"D\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"f\" || letter === \"F\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"g\" || letter === \"G\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"b\" || letter === \"B\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"p\" || letter === \"P\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"v\" || letter === \"V\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"z\" || letter === \"Z\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"x\" || letter === \"X\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"c\" || letter === \"C\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"m\" || letter === \"M\") {\n      result += letter;\n      i++;\n    }\n    if (letter === \"n\" || letter === \"N\") {\n      result += letter;\n      i++;\n    }\n    if (letter \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj3jbyow1.ts(105,1): error TS1005: ')' expected.\n../../../../tmp/tmpj3jbyow1.ts(118,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n        if (index > 0) {\n            result += alphabet[(index - 2) % 26];\n        }\n        result += letter;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzpp_0kmw.ts(15,21): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpzpp_0kmw.ts(17,23): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 65 + letter.charCodeAt(1) - 64;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpziz0c_6q.js:27:12)\n    at Object.<anonymous> (/tmp/tmpziz0c_6q.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    let messageArray: string[] = message.split(\"\");\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter: string = messageArray[i];\n        let encodedLetter: string = \"\";\n        if (letter.match(/[aeiou]/)) {\n            for (let j = 0; j < alphabet.length; j++) {\n                if (alphabet.charAt(j) == letter) {\n                    encodedLetter = alphabet.charAt(j);\n                }\n            }\n        } else {\n            for (let j = 0; j < alphabet.length; j++) {\n                if (alphabet.charAt(j) == letter) {\n                    encodedLetter = alphabet.charAt(j);\n                }\n            }\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpml0q1o9k.ts(36,2): error TS1110: Type expected.\n../../../../tmp/tmpml0q1o9k.ts(36,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpml0q1o9k.ts(37,2): error TS1109: Expression expected.\n../../../../tmp/tmpml0q1o9k.ts(37,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpml0q1o9k.ts(38,2): error TS1109: Expression expected.\n../../../../tmp/tmpml0q1o9k.ts(38,7): error TS1109: Expression expected.\n../../../../tmp/tmpml0q1o9k.ts(40,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    if (index === -1) {\n      result += letter;\n    } else {\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9zf7nz82.ts(15,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp9zf7nz82.ts(19,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp9zf7nz82.ts(19,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333828
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let newLetter = letter;\n    let vowels = \"AEIOUaeiou\";\n    for (let j = 0; j < vowels.length; j++) {\n      if (letter == vowels[j]) {\n        newLetter = vowels[j + 1];\n      }\n    }\n    newMessage += newLetter;\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqwc6kpga.js:29:12)\n    at Object.<anonymous> (/tmp/tmpqwc6kpga.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp072xyo_w.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp072xyo_w.ts(19,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp072xyo_w.ts(19,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6f90b3zd.js:33:12)\n    at Object.<anonymous> (/tmp/tmp6f90b3zd.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            let vowel = vowels[vowelIndex + 1];\n            result += vowel;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpztie0snw.js:30:12)\n    at Object.<anonymous> (/tmp/tmpztie0snw.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1yhig1j8.js:33:12)\n    at Object.<anonymous> (/tmp/tmp1yhig1j8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n        if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            newMessage += letter;\n        }\n        else {\n            let nextLetter = message[i + 1];\n            newMessage += letter.toUpperCase();\n            if (nextLetter === \"A\" || nextLetter === \"E\" || nextLetter === \"I\" || nextLetter === \"O\" || nextLetter === \"U\") {\n                newMessage += nextLetter;\n            }\n            else {\n                newMessage += letter;\n            }\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TTEEESSSTTT'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpx3y9nm4o.js:35:12)\n    at Object.<anonymous> (/tmp/tmpx3y9nm4o.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TTEEESSSTTT',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333835
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newLetter = letter.toLowerCase();\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8p83e_18.js:34:12)\n    at Object.<anonymous> (/tmp/tmp8p83e_18.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333835
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const encodedLetter = letter.charCodeAt(0) - 65;\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1941819'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplsbb_sk_.js:23:12)\n    at Object.<anonymous> (/tmp/tmplsbb_sk_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1941819',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333835
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n        if (index >= 0) {\n            let nextIndex = index + 1;\n            if (nextIndex < alphabet.length) {\n                let nextLetter = alphabet[nextIndex];\n                result += nextLetter;\n            }\n        }\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = vowels.indexOf(letter);\n        if (index >= 0) {\n            let nextIndex = index + 2;\n            if (nextIndex < vowels.length) {\n                let nextLetter = vowels[nextIndex];\n                result += nextLetter;\n            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your solution and it works. But I still don't understand why my code doesn't work. Could you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\nThanks for your explanation. Now I understand why my code doesn't work. Your solution is very elegant and concise. Thanks again.\n<|/ c |>\n<| a tags=string,javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3k2ac3du.ts(39,2): error TS1110: Type expected.\n../../../../tmp/tmp3k2ac3du.ts(39,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3k2ac3du.ts(40,2): error TS1109: Expression expected.\n../../../../tmp/tmp3k2ac3du.ts(40,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3k2ac3du.ts(41,2): error TS1109: Expression expected.\n../../../../tmp/tmp3k2ac3du.ts(41,7): error TS1109: Expression expected.\n../../../../tmp/tmp3k2ac3du.ts(42,8): error TS1005: ';' expected.\n../../../../tmp/tmp3k2ac3du.ts(42,12): error TS1005: '(' expected.\n../../../../tmp/tmp3k2ac3du.ts(42,17): error TS1005: ';' expected.\n../../../../tmp/tmp3k2ac3du.ts(42,27): error TS1005: ';' expected.\n../../../../tmp/tmp3k2ac3du.ts(42,33): error TS1005: ')' expected.\n../../../../tmp/tmp3k2ac3du.ts(42,38): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k2ac3du.ts(42,47): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k2ac3du.ts(42,51): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k2ac3du.ts(42,65): error TS1005: ';' expected.\n../../../../tmp/tmp3k2ac3du.ts(42,67): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k2ac3du.ts(42,73): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k2ac3du.ts(42,108): error TS1005: ';' expected.\n../../../../tmp/tmp3k2ac3du.ts(42,122): error TS1005: ';' expected.\n../../../../tmp/tmp3k2ac3du.ts(42,126): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k2ac3du.ts(42,133): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k2ac3du.ts(42,141): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k2ac3du.ts(42,145): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k2ac3du.ts(42,148): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k2ac3du.ts(42,153): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k2ac3du.ts(42,166): error TS1002: Unterminated string li",
      "timestamp": 1660333835
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            result += letter.charCodeAt(0) - 97;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzv6q_f01.js:27:12)\n    at Object.<anonymous> (/tmp/tmpzv6q_f01.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333835
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            result += letter.charCodeAt(0) - 97;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzv6q_f01.js:27:12)\n    at Object.<anonymous> (/tmp/tmpzv6q_f01.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333835
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\") {\n            newLetter = \"t\";\n        } else if (letter === \"e\") {\n            newLetter = \"k\";\n        } else if (letter === \"i\") {\n            newLetter = \"s\";\n        } else if (letter === \"o\") {\n            newLetter = \"c\";\n        } else if (letter === \"u\") {\n            newLetter = \"g\";\n        } else if (letter === \"y\") {\n            newLetter = \"g\";\n        } else if (letter === \"o\") {\n            newLetter = \"c\";\n        } else if (letter === \"a\") {\n            newLetter = \"t\";\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4n129298.js:47:12)\n    at Object.<anonymous> (/tmp/tmp4n129298.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n        let vowels = \"AEIOUaeiou\";\n        for (let j = 0; j < vowels.length; j++) {\n            if (letter === vowels[j]) {\n                let vowelIndex = j;\n                let vowelPosition = vowelIndex - 2;\n                encodedLetter = encodedLetter.toUpperCase();\n                encodedLetter = encodedLetter.replace(vowels[j], vowels[vowelPosition]);\n            }\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TundefinedST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfm0ia706.js:32:12)\n    at Object.<anonymous> (/tmp/tmpfm0ia706.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TundefinedST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        result += letter.toUpperCase();\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = letter.charCodeAt(0) - 'A'.charCodeAt(0);\n        result += String.fromCharCode('A'.charCodeAt(0) + index);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpx1jc8kpu.js:27:12)\n    at Object.<anonymous> (/tmp/tmpx1jc8kpu.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    if (index === -1) {\n      result += letter;\n    } else {\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9zf7nz82.ts(15,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp9zf7nz82.ts(19,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp9zf7nz82.ts(19,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333828
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6f90b3zd.js:33:12)\n    at Object.<anonymous> (/tmp/tmp6f90b3zd.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            newMessage += letter.charCodeAt(0) - 96;\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeuorvzsn.js:27:12)\n    at Object.<anonymous> (/tmp/tmpeuorvzsn.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpp1jn2iix.js:27:12)\n    at Object.<anonymous> (/tmp/tmpp1jn2iix.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpp8kkvw53.js:33:12)\n    at Object.<anonymous> (/tmp/tmpp8kkvw53.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpp8kkvw53.js:33:12)\n    at Object.<anonymous> (/tmp/tmpp8kkvw53.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let encodedLetter = letter;\n    if (letter === \"a\") {\n      encodedLetter = \"t\";\n    } else if (letter === \"e\") {\n      encodedLetter = \"k\";\n    } else if (letter === \"i\") {\n      encodedLetter = \"s\";\n    } else if (letter === \"o\") {\n      encodedLetter = \"c\";\n    } else if (letter === \"u\") {\n      encodedLetter = \"g\";\n    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpuvvci63v.js:38:12)\n    at Object.<anonymous> (/tmp/tmpuvvci63v.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex >= 0) {\n            letter = vowels[vowelIndex + 2];\n        }\n        result += letter;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkitt73ip.js:27:12)\n    at Object.<anonymous> (/tmp/tmpkitt73ip.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpp8kkvw53.js:33:12)\n    at Object.<anonymous> (/tmp/tmpp8kkvw53.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase()) {\n            result += letter.toUpperCase();\n        } else {\n            let index = alphabet.indexOf(letter);\n            if (index === -1) {\n                result += letter;\n            } else {\n                let nextLetter = alphabet[index + 1];\n                result += nextLetter.toUpperCase();\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1a66ccx8.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp1a66ccx8.ts(22,34): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = \"AEIOUaeiou\";\n    const index = vowels.indexOf(letter);\n    if (index >= 0) {\n      const nextLetter = vowels[index + 1];\n      result += nextLetter;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_guy0zat.js:30:12)\n    at Object.<anonymous> (/tmp/tmp_guy0zat.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppj6ej9mk.js:25:12)\n    at Object.<anonymous> (/tmp/tmppj6ej9mk.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = letter.charCodeAt(0) - 65;\n        newMessage = newMessage.replace(letter, String.fromCharCode(index + 2));\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x15\\x06\\x14\\x15'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6_v0p3z_.js:27:12)\n    at Object.<anonymous> (/tmp/tmp6_v0p3z_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x15\\x06\\x14\\x15',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    if (index > 0) {\n      result += alphabet.charAt(index - 2);\n    }\n    result += alphabet.charAt(letter);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdmzcskmp.ts(15,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpdmzcskmp.ts(17,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpdmzcskmp.ts(19,15): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n        if (letter === \"a\") {\n            encodedLetter = \"t\";\n        } else if (letter === \"e\") {\n            encodedLetter = \"k\";\n        } else if (letter === \"i\") {\n            encodedLetter = \"s\";\n        } else if (letter === \"o\") {\n            encodedLetter = \"c\";\n        } else if (letter === \"u\") {\n            encodedLetter = \"g\";\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnhst9k1n.js:38:12)\n    at Object.<anonymous> (/tmp/tmpnhst9k1n.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"AEIOUaeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            let vowelPosition = vowelIndex + 2;\n            newMessage += vowels[vowelPosition];\n        } else {\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsbeiw3w8.js:30:12)\n    at Object.<anonymous> (/tmp/tmpsbeiw3w8.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = english.indexOf(letter);\n        if (index > -1) {\n            result += swapCase(letter, index - 1);\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgas0zx2w.ts(15,21): error TS2304: Cannot find name 'english'.\n../../../../tmp/tmpgas0zx2w.ts(17,23): error TS2304: Cannot find name 'swapCase'.\n",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex != -1) {\n            let vowelIndex2 = vowelIndex + 1;\n            newLetter = vowels[vowelIndex2];\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyvct6vjd.js:29:12)\n    at Object.<anonymous> (/tmp/tmpyvct6vjd.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter.toUpperCase();\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter.toLowerCase();\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTtestTEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpp5je1z2n.js:33:12)\n    at Object.<anonymous> (/tmp/tmpp5je1z2n.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTtestTEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 'a'.charCodeAt(0) + 1;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj7nim00y.js:27:12)\n    at Object.<anonymous> (/tmp/tmpj7nim00y.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newLetter = letter.toUpperCase();\n        }\n        newMessage += newLetter;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqh53jsvt.ts(80,80): error TS1002: Unterminated string literal.\n../../../../tmp/tmpqh53jsvt.ts(81,1): error TS1005: ')' expected.\n../../../../tmp/tmpqh53jsvt.ts(94,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333838
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpp8kkvw53.js:33:12)\n    at Object.<anonymous> (/tmp/tmpp8kkvw53.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = \"aeiouAEIOU\";\n    if (vowels.indexOf(letter) > -1) {\n      letter = vowels.charAt(vowels.indexOf(letter) + 2);\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_uuc535l.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_uuc535l.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333839
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        let nextLetterIndex = alphabet.indexOf(nextLetter);\n        let nextLetterLetter = alphabet[nextLetterIndex + 1];\n        if (letter === nextLetterLetter) {\n            newMessage += letter;\n        } else {\n            newMessage += alphabet[alphabet.indexOf(letter) + 2];\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyal19zq5.ts(16,31): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpyal19zq5.ts(17,32): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpyal19zq5.ts(21,27): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpyal19zq5.ts(21,36): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333838
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        let index = letter.charCodeAt(0) - 97;\n        newMessage = newMessage.replace(letter, letters[index]);\n    }\n    return newMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfqy14nxy.ts(24,2): error TS1110: Type expected.\n../../../../tmp/tmpfqy14nxy.ts(24,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfqy14nxy.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpfqy14nxy.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfqy14nxy.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmpfqy14nxy.ts(26,6): error TS1005: ';' expected.\n../../../../tmp/tmpfqy14nxy.ts(26,33): error TS1109: Expression expected.\n../../../../tmp/tmpfqy14nxy.ts(28,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333838
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"AEIOUaeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex != -1) {\n            let vowel = vowels[vowelIndex];\n            let vowelIndex = vowels.indexOf(vowel, vowelIndex + 1);\n            if (vowelIndex == -1) {\n                vowelIndex = 0;\n            }\n            let letterIndex = vowels.indexOf(letter, vowelIndex + 1);\n            if (letterIndex == -1) {\n                letterIndex = vowels.length;\n            }\n            result += vowels[vowelIndex];\n            for (let j = 0; j < letterIndex; j++) {\n                result += letter;\n            }\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk8t32wy0.ts(37,2): error TS1110: Type expected.\n../../../../tmp/tmpk8t32wy0.ts(37,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpk8t32wy0.ts(38,2): error TS1109: Expression expected.\n../../../../tmp/tmpk8t32wy0.ts(38,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpk8t32wy0.ts(39,2): error TS1109: Expression expected.\n../../../../tmp/tmpk8t32wy0.ts(39,6): error TS1005: ';' expected.\n../../../../tmp/tmpk8t32wy0.ts(39,16): error TS1109: Expression expected.\n../../../../tmp/tmpk8t32wy0.ts(41,9): error TS1005: ';' expected.\n",
      "timestamp": 1660333838
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpp8kkvw53.js:33:12)\n    at Object.<anonymous> (/tmp/tmpp8kkvw53.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = english.indexOf(letter);\n    if (index > -1) {\n      newMessage += english[index + 2];\n    } else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp37h_ibau.ts(15,17): error TS2304: Cannot find name 'english'.\n../../../../tmp/tmp37h_ibau.ts(17,21): error TS2304: Cannot find name 'english'.\n",
      "timestamp": 1660333839
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let letterIndex = alphabet.indexOf(letter);\n            let nextLetterIndex = letterIndex + 1;\n            if (nextLetterIndex < alphabet.length) {\n                result += alphabet[nextLetterIndex];\n            } else {\n                result += letter;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7n4wdhxj.ts(18,31): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp7n4wdhxj.ts(20,35): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp7n4wdhxj.ts(21,27): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333839
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 65;\n    result += String.fromCharCode(index * 2 + 65);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'gIeg'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpchol3c7x.js:23:12)\n    at Object.<anonymous> (/tmp/tmpchol3c7x.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'gIeg',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333839
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7m8p8nmk.ts(72,102): error TS1002: Unterminated string literal.\n../../../../tmp/tmp7m8p8nmk.ts(73,1): error TS1005: ')' expected.\n../../../../tmp/tmp7m8p8nmk.ts(86,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowelIndex = newMessage.indexOf(letter);\n        if (vowelIndex > 0) {\n            let vowel = vowelIndex - 1;\n            let vowelLetter = message[vowel];\n            newMessage = newMessage.replace(vowelLetter, vowelLetter.toUpperCase());\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjr8qbwx9.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjr8qbwx9.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333839
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      newMessage += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      newMessage += letter.toUpperCase();\n      i++;\n    } else {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5x8t2ecx.js:33:12)\n    at Object.<anonymous> (/tmp/tmp5x8t2ecx.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\";\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n            let nextLetter = vowels[index + 1];\n            result += nextLetter;\n        }\n        else {\n            result += letter;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,algorithm,javascript |>\n<| c |>\nI like this solution, it's very simple and easy to understand. Thanks!\n<|/ c |>\n<| c |>\nI like this solution, it's very simple and easy to understand. Thanks!\n<|/ c |>\n<| a tags=string,algorithm,javascript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0423jf1r.ts(27,2): error TS1110: Type expected.\n../../../../tmp/tmp0423jf1r.ts(27,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0423jf1r.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmp0423jf1r.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0423jf1r.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmp0423jf1r.ts(29,7): error TS1109: Expression expected.\n../../../../tmp/tmp0423jf1r.ts(30,3): error TS1005: ';' expected.\n../../../../tmp/tmp0423jf1r.ts(30,13): error TS1005: ';' expected.\n../../../../tmp/tmp0423jf1r.ts(30,25): error TS1005: ';' expected.\n../../../../tmp/tmp0423jf1r.ts(30,71): error TS1002: Unterminated string literal.\n../../../../tmp/tmp0423jf1r.ts(31,2): error TS1109: Expression expected.\n../../../../tmp/tmp0423jf1r.ts(31,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0423jf1r.ts(32,2): error TS1109: Expression expected.\n../../../../tmp/tmp0423jf1r.ts(",
      "timestamp": 1660333839
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = letter.charCodeAt(0) - 65;\n        if (index >= 0) {\n            result += String.fromCharCode(index + 65);\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjyvyhym_.js:28:12)\n    at Object.<anonymous> (/tmp/tmpjyvyhym_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333839
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n        if (nextLetter === \"a\" || nextLetter === \"e\" || nextLetter === \"i\" || nextLetter === \"o\" || nextLetter === \"u\") {\n            result += nextLetter;\n            i++;\n        } else if (nextLetter === \"A\" || nextLetter === \"E\" || nextLetter === \"I\" || nextLetter === \"O\" || nextLetter === \"U\") {\n            result += nextLetter.toUpperCase();\n            i++;\n        } else {\n            result += nextLetter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTundefined'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpu7bod2w7.js:44:12)\n    at Object.<anonymous> (/tmp/tmpu7bod2w7.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTundefined',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333840
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        let nextLetterIndex = alphabet.indexOf(nextLetter);\n        let nextLetterLetter = alphabet[nextLetterIndex + 1];\n        let nextLetterLetterIndex = alphabet.indexOf(nextLetterLetter);\n        let nextLetterLetterLetter = alphabet[nextLetterLetterIndex + 1];\n        let nextLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetter);\n        let nextLetterLetterLetterLetter = alphabet[nextLetterLetterLetterIndex + 1];\n        newMessage += letter;\n        if (letter === nextLetter) {\n            newMessage += nextLetterLetter;\n        } else if (letter === nextLetterLetter) {\n            newMessage += nextLetterLetterLetter;\n        } else if (letter === nextLetterLetterLetter) {\n            newMessage += nextLetterLetterLetterLetter;\n        } else if (letter === nextLetterLetterLetterLetter) {\n            newMessage += nextLetterLetterLetterLetterLetter;\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeowha_xo.ts(16,31): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpeowha_xo.ts(17,32): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpeowha_xo.ts(18,37): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpeowha_xo.ts(19,38): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpeowha_xo.ts(20,43): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpeowha_xo.ts(21,44): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpeowha_xo.ts(30,27): error TS2304: Cannot find name 'nextLetterLetterLetterLetterLetter'.\n",
      "timestamp": 1660333839
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += getLetterFromIndex(letter, i);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphl18j1ib.ts(18,17): error TS2304: Cannot find name 'getLetterFromIndex'.\n",
      "timestamp": 1660333839
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphxq9ul9a.js:27:12)\n    at Object.<anonymous> (/tmp/tmphxq9ul9a.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      const index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp72rbcnnm.ts(18,21): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp72rbcnnm.ts(19,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp72rbcnnm.ts(19,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333839
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = \"AEIOUaeiou\";\n    let vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex > -1) {\n      let vowelIndex = vowelIndex + 2;\n      letter = vowels[vowelIndex];\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps2h3un8o.ts(18,24): error TS2448: Block-scoped variable 'vowelIndex' used before its declaration.\n",
      "timestamp": 1660333839
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === nextLetter) {\n            result += letter;\n        } else {\n            result += letter.toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9l46h8oo.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9l46h8oo.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333840
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphxq9ul9a.js:27:12)\n    at Object.<anonymous> (/tmp/tmphxq9ul9a.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      letter = letter.toUpperCase();\n    }\n    result += letter;\n  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      letter = letter.toUpperCase();\n    }\n    let index = result.indexOf(letter);\n    if (index > 0) {\n      let letter2 = result.charAt(index - 1);\n      result += letter2;\n      result.splice(index, 1);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptzz_2wjl.ts(29,14): error TS2551: Property 'splice' does not exist on type 'string'. Did you mean 'slice'?\n",
      "timestamp": 1660333840
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 65;\n    const nextLetter = message[i + 1];\n    const nextIndex = nextLetter.charCodeAt(0) - 65;\n    if (index === nextIndex) {\n      result += letter;\n    } else {\n      result += String.fromCharCode(index + 65);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmprw91amdb.js:17\n        const nextIndex = nextLetter.charCodeAt(0) - 65;\n                                     ^\n\nTypeError: Cannot read properties of undefined (reading 'charCodeAt')\n    at encode (/tmp/tmprw91amdb.js:17:38)\n    at test (/tmp/tmprw91amdb.js:30:22)\n    at Object.<anonymous> (/tmp/tmprw91amdb.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333840
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n    let encodedVowel = vowels[letter];\n    encodedMessage += encodedLetter + encodedVowel;\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjfk_t3yz.ts(16,24): error TS2304: Cannot find name 'vowels'.\n",
      "timestamp": 1660333839
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphxq9ul9a.js:27:12)\n    at Object.<anonymous> (/tmp/tmphxq9ul9a.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowelIndex = getVowelIndex(letter);\n        let vowel = vowelIndex === -1 ? letter : message[vowelIndex + 1];\n        let replacement = vowelIndex === -1 ? letter : message[vowelIndex - 1];\n        result += replacement;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1er98z_g.ts(15,26): error TS2304: Cannot find name 'getVowelIndex'.\n",
      "timestamp": 1660333839
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp072xyo_w.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp072xyo_w.ts(19,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp072xyo_w.ts(19,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphxq9ul9a.js:27:12)\n    at Object.<anonymous> (/tmp/tmphxq9ul9a.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n            result += vowels[index + 1];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpg42t_04a.js:29:12)\n    at Object.<anonymous> (/tmp/tmpg42t_04a.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333840
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    if (index === -1) {\n      result += letter;\n    } else {\n      result += alphabet[index + 2];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1boz4gvt.ts(15,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp1boz4gvt.ts(19,17): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333840
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels = \"aeiou\";\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n        if (index != -1) {\n            let nextVowel = alphabet.indexOf(vowels[index + 1], index + 1);\n            newMessage += alphabet.charAt(nextVowel);\n        } else {\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpypimnjv_.js:31:12)\n    at Object.<anonymous> (/tmp/tmpypimnjv_.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333842
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp072xyo_w.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp072xyo_w.ts(19,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp072xyo_w.ts(19,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = letter.charCodeAt(0) - 97;\n        if (index >= 0) {\n            result += String.fromCharCode(index + 97);\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj12ytat9.js:28:12)\n    at Object.<anonymous> (/tmp/tmpj12ytat9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333842
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 65 + 2;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2162021'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_qi9kopz.js:27:12)\n    at Object.<anonymous> (/tmp/tmp_qi9kopz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2162021',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333842
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphxq9ul9a.js:27:12)\n    at Object.<anonymous> (/tmp/tmphxq9ul9a.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            result += alphabet[(index + 1) % alphabet.length];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5jb8abhf.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp5jb8abhf.ts(19,23): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp5jb8abhf.ts(19,46): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        let vowels = \"AEIOUaeiou\";\n        if (vowels.indexOf(letter) > -1) {\n            result += letter;\n            result += nextLetter;\n        } else {\n            result += letter.toUpperCase();\n            result += nextLetter.toUpperCase();\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify this in the question, but I do need to keep it case insensitive. I've updated my question to reflect this.\n<|/ c |>\n<| c |>\nI updated my answer to include a solution that keeps case insensitive.\n<|/ c |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_xi1e0g9.ts(27,2): error TS1110: Type expected.\n../../../../tmp/tmp_xi1e0g9.ts(27,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_xi1e0g9.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmp_xi1e0g9.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_xi1e0g9.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmp_xi1e0g9.ts(29,7): error TS1109: Expression expected.\n../../../../tmp/tmp_xi1e0g9.ts(30,8): error TS1005: ';' expected.\n../../../../tmp/tmp_xi1e0g9.ts(30,12): error TS1005: '(' expected.\n../../../../tmp/tmp_xi1e0g9.ts(30,17): error TS1005: ';' expected.\n../../../../tmp/tmp_xi1e0g9.ts(30,26): error TS1005: ';' expected.\n../../../../tmp/tmp_xi1e0g9.ts(30,42): error TS1005: ')' expected.\n../../../../tmp/tmp_xi1e0g9.ts(30,44): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp_xi1e0g9.ts(30,64): error TS1005: ';' expected.\n../../../../tmp/tmp_xi1e0g9.ts(30,78): error TS1005: ';' expecte",
      "timestamp": 1660333842
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    if (index > 0) {\n      result += alphabet[(index + 1) % alphabet.length];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpotbvmb4d.ts(15,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpotbvmb4d.ts(17,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpotbvmb4d.ts(17,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333842
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            let nextLetter = alphabet[index + 1];\n            result += nextLetter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpam5tq4m5.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpam5tq4m5.ts(19,30): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333842
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            if (index === -1) {\n                result += letter;\n            } else {\n                result += alphabet[index + 2];\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpezha0ain.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpezha0ain.ts(22,27): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333843
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            if (index === -1) {\n                result += letter;\n            } else {\n                let twoLettersBefore = alphabet.indexOf(letter, index - 2);\n                if (twoLettersBefore === -1) {\n                    result += letter;\n                } else {\n                    result += alphabet[twoLettersBefore + 1];\n                }\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgt2v72z9.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpgt2v72z9.ts(22,40): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpgt2v72z9.ts(26,31): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333843
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphxq9ul9a.js:27:12)\n    at Object.<anonymous> (/tmp/tmphxq9ul9a.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp072xyo_w.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp072xyo_w.ts(19,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp072xyo_w.ts(19,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyw5nn1ck.js:27:12)\n    at Object.<anonymous> (/tmp/tmpyw5nn1ck.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333843
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let newLetter = letter.toUpperCase();\n    newMessage += newLetter;\n    let vowelIndex = newLetter.indexOf(\"A\");\n    if (vowelIndex >= 0) {\n      let vowel = newLetter.substring(vowelIndex + 1, vowelIndex + 2);\n      newMessage += vowel;\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_1eiede4.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_1eiede4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333843
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter;\n    }\n    return newMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't seem to work. `encode(\"test\")` returns `\"TGT\"` instead of `\"TGST\"`.\n<|/ c |>\n<| c |>\nI fixed the bug in the code. Thanks for pointing it out.\n<|/ c |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7jc395jx.ts(23,2): error TS1110: Type expected.\n../../../../tmp/tmp7jc395jx.ts(23,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp7jc395jx.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmp7jc395jx.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp7jc395jx.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmp7jc395jx.ts(25,7): error TS1109: Expression expected.\n../../../../tmp/tmp7jc395jx.ts(26,6): error TS1005: ';' expected.\n../../../../tmp/tmp7jc395jx.ts(26,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7jc395jx.ts(26,81): error TS1002: Unterminated string literal.\n../../../../tmp/tmp7jc395jx.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmp7jc395jx.ts(27,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp7jc395jx.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmp7jc395jx.ts(28,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660333843
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = letter.charCodeAt(0) - 65;\n    const letterIndex2 = letterIndex + 2;\n    const letterIndex3 = letterIndex + 3;\n    const letterIndex4 = letterIndex + 4;\n    const letterIndex5 = letterIndex + 5;\n    const letterIndex6 = letterIndex + 6;\n    const letterIndex7 = letterIndex + 7;\n    const letterIndex8 = letterIndex + 8;\n    const letterIndex9 = letterIndex + 9;\n    const letterIndex10 = letterIndex + 10;\n    const letterIndex11 = letterIndex + 11;\n    const letterIndex12 = letterIndex + 12;\n    const letterIndex13 = letterIndex + 13;\n    const letterIndex14 = letterIndex + 14;\n    const letterIndex15 = letterIndex + 15;\n    const letterIndex16 = letterIndex + 16;\n    const letterIndex17 = letterIndex + 17;\n    const letterIndex18 = letterIndex + 18;\n    const letterIndex19 = letterIndex + 19;\n    const letterIndex20 = letterIndex + 20;\n    const letterIndex21 = letterIndex + 21;\n    const letterIndex22 = letterIndex + 22;\n    const letterIndex23 = letterIndex + 23;\n    const letterIndex24 = letterIndex + 24;\n    const letterIndex25 = letterIndex + 25;\n    const letterIndex26 = letterIndex + 26;\n    const letterIndex27 = letterIndex + 27;\n    const letterIndex28 = letterIndex + 28;\n    const letterIndex29 = letterIndex + 29;\n    const letterIndex30 = letterIndex + 30;\n    const letterIndex31 = letterIndex + 31;\n    const letterIndex32 = letterIndex + 32;\n    const letterIndex33 = letterIndex + 33;\n    const letterIndex34 = letterIndex + 34;\n    const letterIndex35 = letterIndex + 35;\n    const letterIndex36 = letterIndex + 36;\n    const letterIndex37 = letterIndex + 37;\n    const letterIndex38 = letterIndex + 38;\n    const letterIndex39 = letterIndex + 39;\n    const letterIndex40 = letterIndex + 40;\n    const letterIndex41 = letterIndex + 41;\n    const letterIndex42 = letterIndex + 42;\n    const letterIndex43 = letterIndex + 43;\n    const letterIndex44 = letterIndex + 44;\n    const letterIndex45 = letterIndex + 45;\n    const letterIndex46 = letterIndex + 46;\n    const letterIndex47 = letterIndex + 47;\n    const letterIndex48 = letterIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6lh7o8qy.ts(76,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333843
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiouAEIOU\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            let vowelIndex = vowelIndex + 2;\n            let vowel = vowels.charAt(vowelIndex);\n            newMessage += vowel;\n        } else {\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjk0fh1vu.ts(18,30): error TS2448: Block-scoped variable 'vowelIndex' used before its declaration.\n",
      "timestamp": 1660333843
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let vowel = vowels[letter];\n            result += vowels[vowel];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpes13guad.ts(18,25): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n../../../../tmp/tmpes13guad.ts(19,23): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n",
      "timestamp": 1660333843
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            let nextLetter = alphabet[index + 1];\n            result += nextLetter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpam5tq4m5.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpam5tq4m5.ts(19,30): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333842
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            result += alphabet[(index + 1) % alphabet.length];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5jb8abhf.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp5jb8abhf.ts(19,23): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp5jb8abhf.ts(19,46): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        let nextLetterIndex = alphabet.indexOf(nextLetter);\n        let nextLetterLetter = alphabet[nextLetterIndex + 1];\n        let nextLetterLetterIndex = alphabet.indexOf(nextLetterLetter);\n        let nextLetterLetterLetter = alphabet[nextLetterLetterIndex + 1];\n        let nextLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetter);\n        let nextLetterLetterLetterLetter = alphabet[nextLetterLetterLetterIndex + 1];\n        let nextLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetter);\n        let nextLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterIndex + 1];\n        let nextLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetter);\n        let nextLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterIndex + 1];\n        let nextLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetter);\n        let nextLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterIndex + 1];\n        let nextLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetter);\n        let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterIndex + 1];\n        let nextLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetter);\n        let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterIndex + 1];\n        let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n        let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex + 1];\n        let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n        let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex + 1];\n        let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n        let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex + 1];\n        let nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetterLetter);\n        let nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterLetterLetterIndex + 1];\n        let nextLetterLetterLetterLetterLetterLetterIndex = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0xb8p8ak.ts(41,9): error TS1005: ',' expected.\n../../../../tmp/tmp0xb8p8ak.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333843
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    let nextLetterIndex = alphabet.indexOf(nextLetter);\n    let nextLetterIndex2 = alphabet.indexOf(nextLetter, nextLetterIndex + 1);\n    let nextLetterIndex3 = alphabet.indexOf(nextLetter, nextLetterIndex + 2);\n    let nextLetterIndex4 = alphabet.indexOf(nextLetter, nextLetterIndex + 3);\n    let nextLetterIndex5 = alphabet.indexOf(nextLetter, nextLetterIndex + 4);\n    let nextLetterIndex6 = alphabet.indexOf(nextLetter, nextLetterIndex + 5);\n    let nextLetterIndex7 = alphabet.indexOf(nextLetter, nextLetterIndex + 6);\n    let nextLetterIndex8 = alphabet.indexOf(nextLetter, nextLetterIndex + 7);\n    let nextLetterIndex9 = alphabet.indexOf(nextLetter, nextLetterIndex + 8);\n    let nextLetterIndex10 = alphabet.indexOf(nextLetter, nextLetterIndex + 9);\n    let nextLetterIndex11 = alphabet.indexOf(nextLetter, nextLetterIndex + 10);\n    let nextLetterIndex12 = alphabet.indexOf(nextLetter, nextLetterIndex + 11);\n    let nextLetterIndex13 = alphabet.indexOf(nextLetter, nextLetterIndex + 12);\n    let nextLetterIndex14 = alphabet.indexOf(nextLetter, nextLetterIndex + 13);\n    let nextLetterIndex15 = alphabet.indexOf(nextLetter, nextLetterIndex + 14);\n    let nextLetterIndex16 = alphabet.indexOf(nextLetter, nextLetterIndex + 15);\n    let nextLetterIndex17 = alphabet.indexOf(nextLetter, nextLetterIndex + 16);\n    let nextLetterIndex18 = alphabet.indexOf(nextLetter, nextLetterIndex + 17);\n    let nextLetterIndex19 = alphabet.indexOf(nextLetter, nextLetterIndex + 18);\n    let nextLetterIndex20 = alphabet.indexOf(nextLetter, nextLetterIndex + 19);\n    let nextLetterIndex21 = alphabet.indexOf(nextLetter, nextLetterIndex + 20);\n    let nextLetterIndex22 = alphabet.indexOf(nextLetter, nextLetterIndex + 21);\n    let nextLetterIndex23 = alphabet.indexOf(nextLetter, nextLetterIndex + 22);\n    let nextLetterIndex24 = alphabet.indexOf(nextLetter, nextLetterIndex + 23);\n    let nextLetterIndex25 = alphabet.indexOf(nextLetter, nextLetterIndex + 24);\n    let nextLetterIndex26 = alphabet.indexOf(nextLetter, nextLetterIndex + 25);\n    let nextLetterIndex27 = alphabet.indexOf(nextLetter, nextLetterIndex + 26);\n    let nextLetterIndex28 = alphabet.indexOf(nextLetter, \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj1y5qrrj.ts(44,9): error TS1005: ',' expected.\n../../../../tmp/tmpj1y5qrrj.ts(57,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333843
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n        if (nextLetter === \"a\" || nextLetter === \"e\" || nextLetter === \"i\" || nextLetter === \"o\" || nextLetter === \"u\") {\n            result += nextLetter;\n            i++;\n        } else if (nextLetter === \"A\" || nextLetter === \"E\" || nextLetter === \"I\" || nextLetter === \"O\" || nextLetter === \"U\") {\n            result += nextLetter.toUpperCase();\n            i++;\n        } else {\n            result += nextLetter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTundefined'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpu7bod2w7.js:44:12)\n    at Object.<anonymous> (/tmp/tmpu7bod2w7.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTundefined',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333840
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n            result += letter;\n            i++;\n        } else if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n        if (nextLetter === 'a' || nextLetter === 'e' || nextLetter === 'i' || nextLetter === 'o' || nextLetter === 'u') {\n            result += nextLetter;\n            i++;\n        } else if (nextLetter === 'A' || nextLetter === 'E' || nextLetter === 'I' || nextLetter === 'O' || nextLetter === 'U') {\n            result += nextLetter.toUpperCase();\n            i++;\n        } else {\n            result += nextLetter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTundefined'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkde0t85g.js:44:12)\n    at Object.<anonymous> (/tmp/tmpkde0t85g.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTundefined',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333843
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = letter.charCodeAt(0) - 65;\n    const letterIndex2 = letterIndex + 2;\n    const letterIndex3 = letterIndex + 3;\n    const letterIndex4 = letterIndex + 4;\n    const letterIndex5 = letterIndex + 5;\n    const letterIndex6 = letterIndex + 6;\n    const letterIndex7 = letterIndex + 7;\n    const letterIndex8 = letterIndex + 8;\n    const letterIndex9 = letterIndex + 9;\n    const letterIndex10 = letterIndex + 10;\n    const letterIndex11 = letterIndex + 11;\n    const letterIndex12 = letterIndex + 12;\n    const letterIndex13 = letterIndex + 13;\n    const letterIndex14 = letterIndex + 14;\n    const letterIndex15 = letterIndex + 15;\n    const letterIndex16 = letterIndex + 16;\n    const letterIndex17 = letterIndex + 17;\n    const letterIndex18 = letterIndex + 18;\n    const letterIndex19 = letterIndex + 19;\n    const letterIndex20 = letterIndex + 20;\n    const letterIndex21 = letterIndex + 21;\n    const letterIndex22 = letterIndex + 22;\n    const letterIndex23 = letterIndex + 23;\n    const letterIndex24 = letterIndex + 24;\n    const letterIndex25 = letterIndex + 25;\n    const letterIndex26 = letterIndex + 26;\n    const letterIndex27 = letterIndex + 27;\n    const letterIndex28 = letterIndex + 28;\n    const letterIndex29 = letterIndex + 29;\n    const letterIndex30 = letterIndex + 30;\n    const letterIndex31 = letterIndex + 31;\n    const letterIndex32 = letterIndex + 32;\n    const letterIndex33 = letterIndex + 33;\n    const letterIndex34 = letterIndex + 34;\n    const letterIndex35 = letterIndex + 35;\n    const letterIndex36 = letterIndex + 36;\n    const letterIndex37 = letterIndex + 37;\n    const letterIndex38 = letterIndex + 38;\n    const letterIndex39 = letterIndex + 39;\n    const letterIndex40 = letterIndex + 40;\n    const letterIndex41 = letterIndex + 41;\n    const letterIndex42 = letterIndex + 42;\n    const letterIndex43 = letterIndex + 43;\n    const letterIndex44 = letterIndex + 44;\n    const letterIndex45 = letterIndex + 45;\n    const letterIndex46 = letterIndex + 46;\n    const letterIndex47 = letterIndex + 47;\n    const letterIndex48 = letterIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6lh7o8qy.ts(76,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333843
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    if (index >= 0) {\n      result += String.fromCharCode(index + 2);\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpne_db99h.js:28:12)\n    at Object.<anonymous> (/tmp/tmpne_db99h.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333843
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            newMessage += letter.charCodeAt(0) - 97;\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9iw_a1p3.js:27:12)\n    at Object.<anonymous> (/tmp/tmp9iw_a1p3.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333843
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        let vowels = \"aeiouAEIOU\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex >= 0) {\n            newLetter = vowels[vowelIndex + 1];\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj_dxtljb.js:28:12)\n    at Object.<anonymous> (/tmp/tmpj_dxtljb.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333843
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphxq9ul9a.js:27:12)\n    at Object.<anonymous> (/tmp/tmphxq9ul9a.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphxq9ul9a.js:27:12)\n    at Object.<anonymous> (/tmp/tmphxq9ul9a.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += letter.toUpperCase();\n        if (i > 0) {\n            newMessage += letter.charCodeAt(0) - letter.charCodeAt(i - 1);\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TE0SNaNTNaN'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpf4y1m3d7.js:25:12)\n    at Object.<anonymous> (/tmp/tmpf4y1m3d7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TE0SNaNTNaN',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333843
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels = \"aeiou\";\n    let messageArray = message.split(\"\");\n    let encodedMessage = \"\";\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.indexOf(letter) + 1;\n        encodedMessage += alphabet.charAt(encodedLetter);\n    }\n    for (let i = 0; i < messageArray.length; i++) {\n        let letter = messageArray[i];\n        let encodedLetter = alphabet.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcy904lvn.ts(78,38): error TS1003: Identifier expected.\n../../../../tmp/tmpcy904lvn.ts(92,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333843
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = \"aeiouAEIOU\";\n    let index = vowels.indexOf(letter);\n    if (index > -1) {\n      result += vowels[index + 2];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdqnr3iuw.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdqnr3iuw.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333844
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        }\n        else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        }\n        else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph3v12t8i.ts(73,1): error TS1005: ')' expected.\n../../../../tmp/tmph3v12t8i.ts(86,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333845
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowels = \"aeiouAEIOU\";\n    const index = vowels.indexOf(letter);\n    if (index > -1) {\n      const nextVowel = vowels[index + 1];\n      result += nextVowel;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp20nrne2g.js:30:12)\n    at Object.<anonymous> (/tmp/tmp20nrne2g.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333845
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[(i + 1) % message.length];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n      result += nextLetter;\n    } else {\n      result += letter.toUpperCase();\n      result += nextLetter.toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEESSTTT'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjo8oms2l.js:30:12)\n    at Object.<anonymous> (/tmp/tmpjo8oms2l.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEESSTTT',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333845
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === nextLetter) {\n            result += letter;\n        } else {\n            let vowels = \"aeiouAEIOU\";\n            let index = vowels.indexOf(letter);\n            let nextIndex = vowels.indexOf(nextLetter);\n            if (index === nextIndex) {\n                result += letter;\n            } else {\n                result += nextLetter;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ESST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptz3x7fm6.js:36:12)\n    at Object.<anonymous> (/tmp/tmptz3x7fm6.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ESST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333846
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n        if (index >= 0) {\n            result += alphabet[(index + 1) % alphabet.length];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9z5c2m4o.ts(15,21): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp9z5c2m4o.ts(17,23): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp9z5c2m4o.ts(17,46): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333845
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1yhig1j8.js:33:12)\n    at Object.<anonymous> (/tmp/tmp1yhig1j8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let newLetter = letter;\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      newLetter = letter.toUpperCase();\n    }\n    for (let j = 0; j < 2; j++) {\n      let vowel = vowels[j];\n      if (letter === vowel) {\n        newLetter = vowels[j + 1];\n      }\n    }\n    newMessage += newLetter;\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiy2ma47k.ts(20,19): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n../../../../tmp/tmpiy2ma47k.ts(22,21): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n",
      "timestamp": 1660333846
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    const nextLetterIndex = alphabet.indexOf(nextLetter);\n    const nextLetterIndex = nextLetterIndex === -1 ? alphabet.length : nextLetterIndex + 1;\n    const nextLetterLetter = alphabet[nextLetterIndex];\n    const nextLetterLetterIndex = alphabet.indexOf(nextLetterLetter);\n    const nextLetterLetterIndex = nextLetterLetterIndex === -1 ? alphabet.length : nextLetterLetterIndex + 1;\n    const nextLetterLetterLetter = alphabet[nextLetterLetterIndex];\n    const nextLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetter);\n    const nextLetterLetterLetterIndex = nextLetterLetterLetterIndex === -1 ? alphabet.length : nextLetterLetterLetterIndex + 1;\n    const nextLetterLetterLetterLetter = alphabet[nextLetterLetterLetterIndex];\n    const nextLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetter);\n    const nextLetterLetterLetterLetterIndex = nextLetterLetterLetterLetterIndex === -1 ? alphabet.length : nextLetterLetterLetterLetterIndex + 1;\n    const nextLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterIndex];\n    const nextLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetter);\n    const nextLetterLetterLetterLetterLetterIndex = nextLetterLetterLetterLetterLetterIndex === -1 ? alphabet.length : nextLetterLetterLetterLetterLetterIndex + 1;\n    const nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterIndex];\n    const nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetter);\n    const nextLetterLetterLetterLetterLetterLetterIndex = nextLetterLetterLetterLetterLetterLetterIndex === -1 ? alphabet.length : nextLetterLetterLetterLetterLetterLetterIndex + 1;\n    const nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterIndex];\n    const nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetter);\n    const nextLetterLetterLetterLetterLetterLetterIndex = nextLetterLetterLetterLetterLetterLetterIndex === -1 ? alphabet.length : nextLetterLetterLetterLetterLetterLetterIndex + 1;\n    const nextLetterLetterLetterLetterLetterLetter = alphabet[nextLetterLetterLetterLetterLetterLetterIndex];\n    const nextLetterLetterLetterLetterLetterLetterIndex = alphabet.indexOf(nextLetterLetterLetterLetterLetterLetterLetterLetter);\n    const nextLetterLetterLetterLetterLetterLetterIndex = nextLetterLetterLetterLetterLetterLetterLetterIndex === -1 ? alphabet.length : nextLetterLetterLetterLetterLetterLetterLetterIndex + 1;\n    const nextLetter\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd767fscz.ts(53,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333846
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        result += swapCase(letter);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphagza8rw.ts(15,19): error TS2304: Cannot find name 'swapCase'.\n",
      "timestamp": 1660333846
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = alphabet.indexOf(letter);\n        if (index > -1) {\n            let nextLetter = alphabet[index + 1];\n            if (nextLetter === letter) {\n                result += nextLetter;\n            } else {\n                result += letter;\n            }\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr76baukf.ts(15,21): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpr76baukf.ts(17,30): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphxq9ul9a.js:27:12)\n    at Object.<anonymous> (/tmp/tmphxq9ul9a.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      result += \"t\";\n    } else if (letter === \"e\") {\n      result += \"k\";\n    } else if (letter === \"i\") {\n      result += \"s\";\n    } else if (letter === \"o\") {\n      result += \"c\";\n    } else if (letter === \"u\") {\n      result += \"g\";\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphrf8d_jk.js:39:12)\n    at Object.<anonymous> (/tmp/tmphrf8d_jk.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333846
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp072xyo_w.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp072xyo_w.ts(19,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp072xyo_w.ts(19,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = message;\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        let letter = newMessage[i];\n        let index = letter.charCodeAt(0) - 65;\n        newMessage = newMessage.replace(letter, String.fromCharCode(index));\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpuh7btyan.js:27:12)\n    at Object.<anonymous> (/tmp/tmpuh7btyan.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333846
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels = \"aeiou\";\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for (let i = 0; i < message\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxp9974c5.ts(96,1): error TS1005: ';' expected.\n../../../../tmp/tmpxp9974c5.ts(96,9): error TS1005: ')' expected.\n../../../../tmp/tmpxp9974c5.ts(109,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333846
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            let nextLetter = alphabet[(index + 1) % alphabet.length];\n            result += nextLetter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgy1vfys.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpvgy1vfys.ts(19,30): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpvgy1vfys.ts(19,53): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333846
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = alphabet.indexOf(letter);\n    const nextLetterIndex = letterIndex + 2;\n    if (nextLetterIndex > alphabet.length - 1) {\n      nextLetterIndex = 0;\n    }\n    const nextLetter = alphabet[nextLetterIndex];\n    newMessage += nextLetter;\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe32vtp5h.ts(15,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpe32vtp5h.ts(17,27): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpe32vtp5h.ts(18,7): error TS2588: Cannot assign to 'nextLetterIndex' because it is a constant.\n../../../../tmp/tmpe32vtp5h.ts(20,24): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333846
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let encodedLetter = letter.toUpperCase();\n        let vowelIndex = encodedLetter.indexOf(\"A\");\n        if (vowelIndex >= 0) {\n            encodedLetter = encodedLetter.replace(vowelIndex, vowelIndex + 2);\n        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_qxqpcji.ts(18,51): error TS2769: No overload matches this call.\n  The last overload gave the following error.\n    Argument of type 'number' is not assignable to parameter of type 'string | RegExp'.\n",
      "timestamp": 1660333846
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphxq9ul9a.js:27:12)\n    at Object.<anonymous> (/tmp/tmphxq9ul9a.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp072xyo_w.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp072xyo_w.ts(19,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp072xyo_w.ts(19,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      if (index === -1) {\n        result += letter;\n      } else {\n        result += alphabet[(index + 1) % alphabet.length];\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmposju483n.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmposju483n.ts(22,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmposju483n.ts(22,42): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333846
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let letterIndex = letter.charCodeAt(0) - 65;\n    if (letterIndex > 0) {\n      letter = String.fromCharCode(letterIndex + 65);\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2pc9dahx.js:26:12)\n    at Object.<anonymous> (/tmp/tmp2pc9dahx.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333847
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            newMessage += letter.charCodeAt(0) - 96;\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeuorvzsn.js:27:12)\n    at Object.<anonymous> (/tmp/tmpeuorvzsn.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333836
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else {\n      result += nextLetter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ESTundefined'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfj1hyk4k.js:29:12)\n    at Object.<anonymous> (/tmp/tmpfj1hyk4k.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ESTundefined',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333847
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let index = alphabet.indexOf(letter);\n            let letter2 = alphabet[(index + 1) % alphabet.length];\n            result += letter2;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyaen3vf0.ts(18,25): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpyaen3vf0.ts(19,27): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpyaen3vf0.ts(19,50): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333847
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase()) {\n            result += letter.toUpperCase();\n        } else {\n            result += letter.toLowerCase();\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbrhut2co.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbrhut2co.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333847
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1yhig1j8.js:33:12)\n    at Object.<anonymous> (/tmp/tmp1yhig1j8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333832
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphxq9ul9a.js:27:12)\n    at Object.<anonymous> (/tmp/tmphxq9ul9a.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n    let encodedVowel = vowels[letter];\n    let encodedVowel2 = vowels[encodedVowel];\n    let encodedVowel3 = vowels[encodedVowel2];\n    let encodedVowel4 = vowels[encodedVowel3];\n    let encodedVowel5 = vowels[encodedVowel4];\n    let encodedVowel6 = vowels[encodedVowel5];\n    let encodedVowel7 = vowels[encodedVowel6];\n    let encodedVowel8 = vowels[encodedVowel7];\n    let encodedVowel9 = vowels[encodedVowel8];\n    let encodedVowel10 = vowels[encodedVowel9];\n    let encodedVowel11 = vowels[encodedVowel10];\n    let encodedVowel12 = vowels[encodedVowel11];\n    let encodedVowel13 = vowels[encodedVowel12];\n    let encodedVowel14 = vowels[encodedVowel13];\n    let encodedVowel15 = vowels[encodedVowel14];\n    let encodedVowel16 = vowels[encodedVowel15];\n    let encodedVowel17 = vowels[encodedVowel16];\n    let encodedVowel18 = vowels[encodedVowel17];\n    let encodedVowel19 = vowels[encodedVowel18];\n    let encodedVowel20 = vowels[encodedVowel19];\n    let encodedVowel21 = vowels[encodedVowel20];\n    let encodedVowel22 = vowels[encodedVowel21];\n    let encodedVowel23 = vowels[encodedVowel22];\n    let encodedVowel24 = vowels[encodedVowel23];\n    let encodedVowel25 = vowels[encodedVowel24];\n    let encodedVowel26 = vowels[encodedVowel25];\n    let encodedVowel27 = vowels[encodedVowel26];\n    let encodedVowel28 = vowels[encodedVowel27];\n    let encodedVowel29 = vowels[encodedVowel28];\n    let encodedVowel30 = vowels[encodedVowel29];\n    let encodedVowel31 = vowels[encodedVowel30];\n    let encodedVowel32 = vowel\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_h6194ij.ts(61,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333847
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let newLetter = letter;\n        let vowels = \"AEIOUaeiou\";\n        for (let j = 0; j < vowels.length; j++) {\n            if (letter == vowels[j]) {\n                newLetter = vowels[j + 1];\n                break;\n            }\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp06k_cfuf.js:30:12)\n    at Object.<anonymous> (/tmp/tmp06k_cfuf.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333847
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = \"aeiou\";\n    let index = vowels.indexOf(letter);\n    if (index > -1) {\n      result += vowels[index + 2];\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmyfba58_.js:29:12)\n    at Object.<anonymous> (/tmp/tmpmyfba58_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333847
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    let nextLetterIndex = alphabet.indexOf(nextLetter);\n    let nextLetterLetter = alphabet[nextLetterIndex + 1];\n    if (letter === nextLetterLetter) {\n      result += letter;\n    } else {\n      result += alphabet[alphabet.indexOf(letter) + 2];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp75f21iic.ts(16,27): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp75f21iic.ts(17,28): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp75f21iic.ts(21,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp75f21iic.ts(21,26): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333847
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            newMessage += letter.toUpperCase();\n        }\n        if (nextLetter === \"a\" || nextLetter === \"e\" || nextLetter === \"i\" || nextLetter === \"o\" || nextLetter === \"u\") {\n            newMessage += nextLetter;\n        } else {\n            newMessage += nextLetter.toLowerCase();\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpnb8fiwyv.js:26\n            newMessage += nextLetter.toLowerCase();\n                                     ^\n\nTypeError: Cannot read properties of undefined (reading 'toLowerCase')\n    at encode (/tmp/tmpnb8fiwyv.js:26:38)\n    at test (/tmp/tmpnb8fiwyv.js:34:22)\n    at Object.<anonymous> (/tmp/tmpnb8fiwyv.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333848
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let letterIndex = alphabet.indexOf(letter);\n    if (letterIndex === -1) {\n      result += letter;\n    } else {\n      let vowelIndex = letterIndex + 2;\n      if (vowelIndex > alphabet.length - 1) {\n        vowelIndex = 0;\n      }\n      result += alphabet[vowelIndex];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpborvycb_.ts(15,23): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpborvycb_.ts(20,24): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpborvycb_.ts(23,17): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333848
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyw5nn1ck.js:27:12)\n    at Object.<anonymous> (/tmp/tmpyw5nn1ck.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333843
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp072xyo_w.ts(18,19): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp072xyo_w.ts(19,17): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp072xyo_w.ts(19,40): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333832
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        let nextNextLetter = message[i + 2];\n        let nextNextNextLetter = message[i + 3];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n        } else if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps0u_l9q7.ts(53,9): error TS1005: ')' expected.\n../../../../tmp/tmps0u_l9q7.ts(66,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333848
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let letterIndex = alphabet.indexOf(letter);\n    if (letterIndex === -1) {\n      result += letter;\n    } else {\n      let vowelIndex = letterIndex - 2;\n      let vowel = alphabet[vowelIndex];\n      result += vowel;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9vxgo3n7.ts(15,23): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmp9vxgo3n7.ts(20,19): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333848
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyw5nn1ck.js:27:12)\n    at Object.<anonymous> (/tmp/tmpyw5nn1ck.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333843
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n        let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n            result += vowels[vowelIndex + 1];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxni_s9sj.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxni_s9sj.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333849
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const vowelIndex = letter.charCodeAt(0) - 65;\n    const vowel = vowels[vowelIndex];\n    newMessage += vowel;\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj07sj__n.ts(16,19): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n",
      "timestamp": 1660333848
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n        } else {\n            let vowel = vowels[letter];\n            if (vowel === undefined) {\n                result += letter;\n            } else {\n                let vowelIndex = vowels.indexOf(vowel);\n                result += vowels[vowelIndex + 2];\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvlsp8__0.ts(18,25): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n../../../../tmp/tmpvlsp8__0.ts(22,34): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n../../../../tmp/tmpvlsp8__0.ts(23,27): error TS2552: Cannot find name 'vowels'. Did you mean 'vowel'?\n",
      "timestamp": 1660333849
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      letter = \"t\";\n    } else if (letter === \"e\") {\n      letter = \"k\";\n    } else if (letter === \"i\") {\n      letter = \"s\";\n    } else if (letter === \"o\") {\n      letter = \"c\";\n    } else if (letter === \"u\") {\n      letter = \"g\";\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpapqaayt0.js:37:12)\n    at Object.<anonymous> (/tmp/tmpapqaayt0.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333828
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6f90b3zd.js:33:12)\n    at Object.<anonymous> (/tmp/tmp6f90b3zd.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333829
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    result += String.fromCharCode(index * 2 + 65);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n\"'\\t%'\"\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjizivdgb.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjizivdgb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: \"'\\t%'\",\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333849
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let vowels = \"AEIOUaeiou\";\n        let index = vowels.indexOf(letter);\n        if (index >= 0) {\n            result += vowels[index + 2];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjxe449i3.js:29:12)\n    at Object.<anonymous> (/tmp/tmpjxe449i3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333849
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let nextLetter = message[i + 1];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            result += letter;\n            i++;\n        } else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\") {\n            result += letter.toUpperCase();\n            i++;\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsp_u2xjp.js:33:12)\n    at Object.<anonymous> (/tmp/tmpsp_u2xjp.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333849
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      letter = \"A\";\n    } else if (letter === \"e\") {\n      letter = \"E\";\n    } else if (letter === \"i\") {\n      letter = \"I\";\n    } else if (letter === \"o\") {\n      letter = \"O\";\n    } else if (letter === \"u\") {\n      letter = \"U\";\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6m__6hj8.js:37:12)\n    at Object.<anonymous> (/tmp/tmp6m__6hj8.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333849
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    if (index >= 0) {\n      result += String.fromCharCode(index + 1);\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq1_pbeu0.js:28:12)\n    at Object.<anonymous> (/tmp/tmpq1_pbeu0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333849
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      let vowelIndex = alphabet.indexOf(letter);\n      let vowel = alphabet[vowelIndex + 1];\n      result += vowel;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsqslr5o0.ts(18,24): error TS2304: Cannot find name 'alphabet'.\n../../../../tmp/tmpsqslr5o0.ts(19,19): error TS2304: Cannot find name 'alphabet'.\n",
      "timestamp": 1660333849
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n      result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 97;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpax35hu3j.js:27:12)\n    at Object.<anonymous> (/tmp/tmpax35hu3j.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333849
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n            newMessage += letter;\n        } else {\n            let vowelIndex = message.indexOf(letter);\n            let vowel = message.charAt(vowelIndex - 1);\n            let vowel2 = message.charAt(vowelIndex + 1);\n            newMessage += vowel;\n            newMessage += vowel2;\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ETSETE'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpm0wzvt8k.js:31:12)\n    at Object.<anonymous> (/tmp/tmpm0wzvt8k.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ETSETE',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333849
    }
  ]
}