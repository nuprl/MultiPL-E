name: HumanEval_104_unique_digits
language: ts
prompt: "//Given an array of positive integers x. return a sorted array of all \n\
  // elements that hasn't any even digit.\n// Note: Returned array should be sorted\
  \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
  // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
  \ number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
  \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
  \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
  \ 103, 31]),[31, 135]);\n}\n\ntest();"
completions: ["    let result: number[] = [];\n    for (let i = 0; i < x.length; i++)\
    \ {\n        let digit = x[i];\n        if (result.indexOf(digit) === -1) {\n\
    \            result.push(digit);\n        }\n    }\n    return result;\n}\n",
  "    let result = [];\n    for (let i = 0; i < x.length; i++) {\n        if (x[i]\
    \ % 2 === 0) {\n            result.push(x[i]);\n        }\n    }\n    result.sort();\n\
    \    return result;\n}\n", "    const result = [];\n    for (let i = 0; i < x.length;\
    \ i++) {\n        if (x[i] % 2 === 0) {\n            result.push(x[i]);\n    \
    \    }\n    }\n    result.sort();\n    return result;\n}\n", "    let result:\
    \ number[] = [];\n    for (let i = 0; i < x.length; i++) {\n        let digit\
    \ = x[i];\n        if (result.indexOf(digit) === -1) {\n            result.push(digit);\n\
    \        }\n    }\n    return result;\n}\n", "  let result: number[] = [];\n \
    \ for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit %\
    \ 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n\
    }\n", "    let result = [];\n    for (let i = 0; i < x.length; i++) {\n      \
    \  let digit = x[i];\n        if (digit % 2 === 0) {\n            result.push(digit);\n\
    \        }\n    }\n    result.sort();\n    return result;\n}\n", "    let result:\
    \ number[] = [];\n    for (let i = 0; i < x.length; i++) {\n        let digit\
    \ = x[i];\n        if (result.indexOf(digit) === -1) {\n            result.push(digit);\n\
    \        }\n    }\n    result.sort();\n    return result;\n}\n", "    const result:\
    \ number[] = [];\n    for (let i = 0; i < x.length; i++) {\n        let found\
    \ = false;\n        for (let j = 0; j < result.length; j++) {\n            if\
    \ (x[i] % result[j] === 0) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (!found) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    let result = [];\n    for (let\
    \ i = 0; i < x.length; i++) {\n        let digit = x[i];\n        if (digit %\
    \ 2 === 0) {\n            result.push(digit);\n        }\n    }\n    result.sort();\n\
    \    return result;\n}\n", "    let result: number[] = [];\n    for (let i = 0;\
    \ i < x.length; i++) {\n        let digit = x[i];\n        if (result.indexOf(digit)\
    \ === -1) {\n            result.push(digit);\n        }\n    }\n    return result;\n\
    }\n", "    let result = [];\n    for (let i = 0; i < x.length; i++) {\n      \
    \  let digit = x[i];\n        if (digit % 2 === 0) {\n            result.push(digit);\n\
    \        }\n    }\n    result.sort();\n    return result;\n}\n", "    let result:\
    \ number[] = [];\n    for (let i = 0; i < x.length; i++) {\n        let digit\
    \ = x[i];\n        let index = result.indexOf(digit);\n        if (index === -1)\
    \ {\n            result.push(digit);\n        }\n    }\n    return result;\n}\n",
  "    const result = [];\n    for (let i = 0; i < x.length; i++) {\n        const\
    \ digit = x[i];\n        if (digit % 2 === 0) {\n            result.push(digit);\n\
    \        }\n    }\n    result.sort();\n    return result;\n}\n", "    let result\
    \ = [];\n    for (let i = 0; i < x.length; i++) {\n        let digit = x[i];\n\
    \        let isEven = digit % 2 === 0;\n        if (isEven) {\n            result.push(digit);\n\
    \        }\n    }\n    result.sort();\n    return result;\n}\n", "    let result:\
    \ number[] = [];\n    for (let i = 0; i < x.length; i++) {\n        let digit\
    \ = x[i];\n        if (result.indexOf(digit) === -1) {\n            result.push(digit);\n\
    \        }\n    }\n    return result;\n}\n", "    let result = [];\n    for (let\
    \ i = 0; i < x.length; i++) {\n        let digit = x[i];\n        if (digit %\
    \ 2 === 0) {\n            result.push(digit);\n        }\n    }\n    result.sort();\n\
    \    return result;\n}\n", "    let result = [];\n    for (let i = 0; i < x.length;\
    \ i++) {\n        let digit = x[i];\n        if (digit % 2 === 0) {\n        \
    \    result.push(digit);\n        }\n    }\n    result.sort();\n    return result;\n\
    }\n", "    let result: number[] = [];\n    for (let i = 0; i < x.length; i++)\
    \ {\n        if (x[i] % 2 === 0) {\n            result.push(x[i]);\n        }\n\
    \    }\n    result.sort();\n    return result;\n}\n", "    let result = [];\n\
    \    for (let i = 0; i < x.length; i++) {\n        let digit = x[i];\n       \
    \ if (digit % 2 === 0) {\n            result.push(digit);\n        }\n    }\n\
    \    result.sort();\n    return result;\n}\n", "    let result = [];\n    for\
    \ (let i = 0; i < x.length; i++) {\n        let digit = x[i];\n        if (digit\
    \ % 2 === 0) {\n            result.push(digit);\n        }\n    }\n    result.sort();\n\
    \    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
