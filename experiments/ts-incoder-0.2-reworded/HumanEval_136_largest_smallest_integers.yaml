name: HumanEval_136_largest_smallest_integers
language: ts
prompt: "//Create a function that returns an array (a, b), where 'a' is\n// the largest\
  \ of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n\
  // If there is no negative or positive integers, return them as undefined.\n// Examples:\n\
  // >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>>\
  \ largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n\
  // [undefined, undefined]\nfunction largest_smallest_integers(lst: number[]): [number\
  \ | undefined, number | undefined] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
  \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5,\
  \ 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2,\
  \ 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7,\
  \ 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
  \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
  \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
  \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
  \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\n\
  test();"
completions: ["  const smallest = lst.reduce((a, b) => Math.min(a, b), -Infinity);\n\
    \  const largest = lst.reduce((a, b) => Math.max(a, b), Infinity);\n  return [smallest,\
    \ largest];\n}\n", "  const smallest = -Infinity;\n  const largest = Infinity;\n\
    \  for (const num of lst) {\n    if (num < smallest) {\n      smallest = num;\n\
    \    }\n    if (num > largest) {\n      largest = num;\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n  const smallest\
    \ = Number.POSITIVE_INFINITY;\n  for (const num of lst) {\n    if (num > largest)\
    \ {\n      largest = num;\n    }\n    if (num < smallest) {\n      smallest =\
    \ num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const smallest = -Infinity;\n\
    \  const largest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ n = lst[i];\n    if (n < smallest) {\n      smallest = n;\n    }\n    if (n\
    \ > largest) {\n      largest = n;\n    }\n  }\n  return [smallest, largest];\n\
    }\n", "  let min: number | undefined = undefined;\n  let max: number | undefined\
    \ = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max)\
    \ {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n\
    \    }\n  }\n  return [min, max];\n}\n", "  let min: number | undefined = undefined;\n\
    \  let max: number | undefined = undefined;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  return [min, max];\n}\n", "  let\
    \ largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ > largest) {\n      largest = num;\n    }\n    if (num < smallest) {\n     \
    \ smallest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const smallest\
    \ = -Infinity;\n  const largest = Infinity;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num < smallest) {\n      smallest =\
    \ num;\n    }\n    if (num > largest) {\n      largest = num;\n    }\n  }\n  return\
    \ [smallest, largest];\n}\n", "  const smallest = -Infinity;\n  const largest\
    \ = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest)\
    \ {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest\
    \ = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "  const positive\
    \ = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if\
    \ (positive.length > 0) {\n    return [Math.max(...negative), Math.min(...positive)];\n\
    \  }\n  if (negative.length > 0) {\n    return [undefined, Math.max(...negative)];\n\
    \  }\n  return [undefined, undefined];\n}\n", "  const smallest = lst.reduce((a,\
    \ b) => Math.min(a, b), -Infinity);\n  const largest = lst.reduce((a, b) => Math.max(a,\
    \ b), Infinity);\n  return [smallest, largest];\n}\n", "  const smallest = -Infinity;\n\
    \  const largest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ num = lst[i];\n    if (num > largest) {\n      largest = num;\n    }\n    if\
    \ (num < smallest) {\n      smallest = num;\n    }\n  }\n  return [smallest, largest];\n\
    }\n", "  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  return\
    \ [min, max];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n  const smallest\
    \ = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  const max = -Infinity;\n  const min = Infinity;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const n = lst[i];\n    if (n < min) {\n      min = n;\n    }\n \
    \   if (n > max) {\n      max = n;\n    }\n  }\n  return [max, min];\n}\n", " \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  return [max,\
    \ min];\n}\n", "  const smallest = lst.reduce((a, b) => Math.min(a, b), -Infinity);\n\
    \  const largest = lst.reduce((a, b) => Math.max(a, b), Infinity);\n  return [smallest,\
    \ largest];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n  const smallest\
    \ = Number.POSITIVE_INFINITY;\n  for (const num of lst) {\n    if (num > largest)\
    \ {\n      largest = num;\n    } else if (num < smallest) {\n      smallest =\
    \ num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n\
    \  const smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num > largest) {\n      largest = num;\n\
    \    }\n    if (num < smallest) {\n      smallest = num;\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  const positives = lst.filter(x => x >= 0);\n\
    \  const negatives = lst.filter(x => x < 0);\n  if (positives.length === 0) {\n\
    \    return [undefined, undefined];\n  }\n  if (negatives.length === 0) {\n  \
    \  return [positives[0], undefined];\n  }\n  const max = Math.max(...negatives);\n\
    \  const min = Math.min(...positives);\n  return [max, min];\n}\n", "  const min\
    \ = Math.min(...lst);\n  const max = Math.max(...lst);\n  return [min, max];\n\
    }\n", "  const positives = lst.filter(n => n >= 0);\n  const negatives = lst.filter(n\
    \ => n < 0);\n  if (positives.length === 0) {\n    return [undefined, undefined];\n\
    \  }\n  if (negatives.length === 0) {\n    return [positives[0], undefined];\n\
    \  }\n  const largest = Math.max(...negatives);\n  const smallest = Math.min(...positives);\n\
    \  return [largest, smallest];\n}\n", "  const largest = Number.MIN_SAFE_INTEGER;\n\
    \  const smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const n = lst[i];\n    if (n < smallest) {\n      smallest = n;\n\
    \    }\n    if (n > largest) {\n      largest = n;\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  const largest = Number.MIN_SAFE_INTEGER;\n  const smallest\
    \ = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ num = lst[i];\n    if (num > largest) {\n      largest = num;\n    }\n    if\
    \ (num < smallest) {\n      smallest = num;\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  return\
    \ [min, max];\n}\n", "  let min: number | undefined = undefined;\n  let max: number\
    \ | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n\
    \    }\n  }\n  return [min, max];\n}\n", "  const smallest = lst.reduce((a, b)\
    \ => a < b ? a : b);\n  const largest = lst.reduce((a, b) => a > b ? a : b);\n\
    \  return [smallest, largest];\n}\n", "  const smallest = lst.reduce((a, b) =>\
    \ Math.min(a, b), -Infinity);\n  const largest = lst.reduce((a, b) => Math.max(a,\
    \ b), Infinity);\n  return [smallest, largest];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n\
    \  const smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num > largest) {\n      largest = num;\n\
    \    }\n    if (num < smallest) {\n      smallest = num;\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  let min: number | undefined = undefined;\n  let\
    \ max: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < 0) {\n      if (min === undefined) {\n        min = lst[i];\n\
    \      } else if (lst[i] < min) {\n        min = lst[i];\n      }\n    } else\
    \ if (lst[i] > 0) {\n      if (max === undefined) {\n        max = lst[i];\n \
    \     } else if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n  }\n\
    \  return [min, max];\n}\n", "  const positive = lst.filter(x => x > 0);\n  const\
    \ negative = lst.filter(x => x < 0);\n  if (negative.length > 0) {\n    return\
    \ [negative[0], positive[0]];\n  }\n  if (positive.length > 0) {\n    return [positive[0],\
    \ negative[0]];\n  }\n  return [undefined, undefined];\n}\n", "  const largest\
    \ = lst.reduce((largest, num) => {\n    if (num > largest) {\n      return num\n\
    \    }\n    return largest\n  }, Number.NEGATIVE_INFINITY)\n  const smallest =\
    \ lst.reduce((smallest, num) => {\n    if (num < smallest) {\n      return num\n\
    \    }\n    return smallest\n  }, Number.POSITIVE_INFINITY)\n  return [largest,\
    \ smallest]\n}\n", "  const largest = lst.reduce((a, b) => Math.max(a, b), -Infinity);\n\
    \  const smallest = lst.reduce((a, b) => Math.min(a, b), Infinity);\n  return\
    \ [largest, smallest];\n}\n", "  const positive = lst.filter(x => x > 0);\n  const\
    \ negative = lst.filter(x => x < 0);\n  if (positive.length > 0) {\n    return\
    \ [Math.max(...negative), Math.min(...positive)];\n  }\n  if (negative.length\
    \ > 0) {\n    return [undefined, Math.max(...negative)];\n  }\n  return [undefined,\
    \ undefined];\n}\n", "  const positive = lst.filter(n => n >= 0);\n  const negative\
    \ = lst.filter(n => n < 0);\n  if (positive.length > 0 && negative.length > 0)\
    \ {\n    return [Math.max(...negative), Math.min(...positive)];\n  }\n  if (positive.length\
    \ > 0) {\n    return positive;\n  }\n  if (negative.length > 0) {\n    return\
    \ negative;\n  }\n  return [undefined, undefined];\n}\n", "  const smallest =\
    \ -Infinity;\n  const largest = Infinity;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const num = lst[i];\n    if (num < smallest || smallest === -Infinity)\
    \ {\n      smallest = num;\n    }\n    if (num > largest || largest === Infinity)\
    \ {\n      largest = num;\n    }\n  }\n  return [smallest, largest];\n}\n", " \
    \ const largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ < smallest) {\n      smallest = num;\n    } else if (num > largest) {\n    \
    \  largest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const smallest\
    \ = lst.reduce((a, b) => Math.min(a, b), -Infinity);\n  const largest = lst.reduce((a,\
    \ b) => Math.max(a, b), Infinity);\n  return [smallest, largest];\n}\n", "  const\
    \ largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  const max = -Infinity;\n\
    \  const min = Infinity;\n  for (const num of lst) {\n    if (num > max) {\n \
    \     max = num;\n    }\n    if (num < min) {\n      min = num;\n    }\n  }\n\
    \  return [max, min];\n}\n", "  const smallest = lst.reduce((a, b) => Math.min(a,\
    \ b), -Infinity);\n  const largest = lst.reduce((a, b) => Math.max(a, b), Infinity);\n\
    \  return [smallest, largest];\n}\n", "  const positives = lst.filter(n => n >\
    \ 0);\n  const negatives = lst.filter(n => n < 0);\n  if (positives.length ===\
    \ 0) {\n    return [undefined, undefined];\n  }\n  if (negatives.length === 0)\
    \ {\n    return [positives[0], positives[0]];\n  }\n  const max = Math.max(...negatives);\n\
    \  const min = Math.min(...positives);\n  return [max, min];\n}\n", "  const largest\
    \ = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  const positive = lst.filter(x\
    \ => x >= 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length\
    \ > 0) {\n    return [Math.max(...negative), Math.min(...positive)];\n  }\n  if\
    \ (negative.length > 0) {\n    return [Math.max(...negative), undefined];\n  }\n\
    \  return [undefined, undefined];\n}\n", "  const min: number = Number.MAX_SAFE_INTEGER;\n\
    \  const max: number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num < min) min = num;\n    if (num\
    \ > max) max = num;\n  }\n  return [min, max];\n}\n", "  const positive = lst.filter(x\
    \ => x >= 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length\
    \ > 0) {\n    return [positive[0], negative[0]];\n  }\n  if (negative.length >\
    \ 0) {\n    return [negative[0], undefined];\n  }\n  return [undefined, undefined];\n\
    }\n", "  const max: number = Number.MIN_VALUE;\n  const min: number = Number.MAX_VALUE;\n\
    \  for (const num of lst) {\n    if (num > max) max = num;\n    if (num < min)\
    \ min = num;\n  }\n  return [max, min];\n}\n", "  const smallest = lst.reduce((a,\
    \ b) => a < b ? a : b);\n  const largest = lst.reduce((a, b) => a > b ? a : b);\n\
    \  return [smallest, largest];\n}\n", "  const largest = lst.reduce((a, b) =>\
    \ Math.max(a, b), -Infinity);\n  const smallest = lst.reduce((a, b) => Math.min(a,\
    \ b), Infinity);\n  return [largest, smallest];\n}\n", "  const smallest = -Infinity;\n\
    \  const largest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ num = lst[i];\n    if (num < smallest || smallest === -Infinity) {\n      smallest\
    \ = num;\n    }\n    if (num > largest || largest === Infinity) {\n      largest\
    \ = num;\n    }\n  }\n  return [smallest, largest];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n\
    \  let smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num < smallest) {\n      smallest =\
    \ num;\n    }\n    if (num > largest) {\n      largest = num;\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n \
    \ const smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const n = lst[i];\n    if (n < smallest) {\n      smallest = n;\n\
    \    }\n    if (n > largest) {\n      largest = n;\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n  const smallest\
    \ = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ num = lst[i];\n    if (num < smallest) {\n      smallest = num;\n    }\n   \
    \ if (num > largest) {\n      largest = num;\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  const smallest = -Infinity;\n  const largest = Infinity;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num < smallest\
    \ || smallest === -Infinity) {\n      smallest = num;\n    }\n    if (num > largest\
    \ || largest === Infinity) {\n      largest = num;\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n  const smallest\
    \ = Number.POSITIVE_INFINITY;\n  for (const num of lst) {\n    if (num < smallest)\
    \ {\n      smallest = num;\n    }\n    if (num > largest) {\n      largest = num;\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  const min: number = Number.MAX_SAFE_INTEGER;\n\
    \  const max: number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num < min) {\n      min = num;\n  \
    \  }\n    if (num > max) {\n      max = num;\n    }\n  }\n  return [min, max];\n\
    }\n", "  const smallest = -Infinity;\n  const largest = Infinity;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num < smallest)\
    \ {\n      smallest = num;\n    }\n    if (num > largest) {\n      largest = num;\n\
    \    }\n  }\n  return [smallest, largest];\n}\n", "  const positive = lst.filter(n\
    \ => n >= 0);\n  const negative = lst.filter(n => n < 0);\n  if (negative.length\
    \ > 0) {\n    return [negative[0], positive[0]];\n  }\n  if (positive.length >\
    \ 0) {\n    return [positive[0], negative[0]];\n  }\n  return [undefined, undefined];\n\
    }\n", "  let largest = Number.NEGATIVE_INFINITY;\n  let smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ > largest) {\n      largest = num;\n    }\n    if (num < smallest) {\n     \
    \ smallest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const smallest\
    \ = -Infinity;\n  const largest = Infinity;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num < smallest || smallest === -Infinity)\
    \ {\n      smallest = num;\n    }\n    if (num > largest || largest === Infinity)\
    \ {\n      largest = num;\n    }\n  }\n  return [smallest, largest];\n}\n", " \
    \ const largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ > largest) {\n      largest = num;\n    }\n    if (num < smallest) {\n     \
    \ smallest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  let smallest\
    \ = -Infinity;\n  let largest = Infinity;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const num = lst[i];\n    if (num < smallest) {\n      smallest = num;\n\
    \    }\n    if (num > largest) {\n      largest = num;\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  const largest = Number.MIN_SAFE_INTEGER;\n  const smallest\
    \ = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  const max: number = Number.NEGATIVE_INFINITY;\n  const min: number = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ < min) {\n      min = num;\n    }\n    if (num > max) {\n      max = num;\n\
    \    }\n  }\n  return [max, min];\n}\n", "  const max = Math.max(...lst);\n  const\
    \ min = Math.min(...lst);\n  return [max, min];\n}\n", "  const max = -Infinity;\n\
    \  const min = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ num = lst[i];\n    if (num > max) {\n      max = num;\n    }\n    if (num <\
    \ min) {\n      min = num;\n    }\n  }\n  return [max, min];\n}\n", "  const largest\
    \ = Number.MIN_SAFE_INTEGER;\n  const smallest = Number.MAX_SAFE_INTEGER;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num < smallest)\
    \ {\n      smallest = num;\n    }\n    if (num > largest) {\n      largest = num;\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  const smallest = -Infinity;\n\
    \  const largest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ num = lst[i];\n    if (num < smallest) {\n      smallest = num;\n    }\n   \
    \ if (num > largest) {\n      largest = num;\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  return [max, min];\n}\n", "  let min: number | undefined = undefined;\n  let\
    \ max: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < 0) {\n      min = lst[i];\n    } else if (lst[i] > 0) {\n\
    \      max = lst[i];\n    }\n  }\n  return [min, max];\n}\n", "  const largest\
    \ = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ > largest) {\n      largest = num;\n    } else if (num < smallest) {\n     \
    \ smallest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const min\
    \ = Math.min(...lst);\n  const max = Math.max(...lst);\n  return [min, max];\n\
    }\n", "  const smallest = -Infinity;\n  const largest = Infinity;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num < smallest)\
    \ {\n      smallest = num;\n    }\n    if (num > largest) {\n      largest = num;\n\
    \    }\n  }\n  return [smallest, largest];\n}\n", "  const smallest = lst[0];\n\
    \  const largest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i]\
    \ < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n\
    \      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", " \
    \ const largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ > largest) {\n      largest = num;\n    }\n    if (num < smallest) {\n     \
    \ smallest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const largest\
    \ = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [smallest, largest];\n}\n", "  const smallest = -Infinity;\n\
    \  const largest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ num = lst[i];\n    if (num < smallest) {\n      smallest = num;\n    }\n   \
    \ if (num > largest) {\n      largest = num;\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  const max = -Infinity;\n  const min = Infinity;\n  for (const\
    \ num of lst) {\n    if (num < min) {\n      min = num;\n    }\n    if (num >\
    \ max) {\n      max = num;\n    }\n  }\n  return [max, min];\n}\n", "  const positive\
    \ = lst.filter(n => n > 0);\n  const negative = lst.filter(n => n < 0);\n  if\
    \ (positive.length > 0 && negative.length > 0) {\n    return [Math.max(...negative),\
    \ Math.min(...positive)];\n  }\n  return [undefined, undefined];\n}\n", "  let\
    \ smallest = -Infinity;\n  let largest = Infinity;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num > largest) {\n      largest = num;\n\
    \    } else if (num < smallest) {\n      smallest = num;\n    }\n  }\n  return\
    \ [smallest, largest];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n  let\
    \ smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i]\
    \ < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n\
    }\n", "  let largest = Number.MIN_VALUE;\n  let smallest = Number.MAX_VALUE;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ < smallest) {\n      smallest = num;\n    }\n    if (num > largest) {\n    \
    \  largest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest\
    \ = Number.NEGATIVE_INFINITY;\n  let smallest = Number.POSITIVE_INFINITY;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest\
    \ = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n \
    \   }\n  }\n  return [largest, smallest];\n}\n", "  const smallest = lst.reduce((a,\
    \ b) => Math.min(a, b), -Infinity);\n  const largest = lst.reduce((a, b) => Math.max(a,\
    \ b), Infinity);\n  return [smallest, largest];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n\
    \  const smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num > largest) {\n      largest = num;\n\
    \    }\n    if (num < smallest) {\n      smallest = num;\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  const positive = lst.filter(x => x > 0);\n  const\
    \ negative = lst.filter(x => x < 0);\n  if (positive.length > 0) {\n    return\
    \ positive.slice(-1)[0];\n  }\n  if (negative.length > 0) {\n    return negative[0];\n\
    \  }\n  return undefined;\n}\n", "  const max: number | undefined = -Infinity;\n\
    \  const min: number | undefined = Infinity;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num < min) min = num;\n    if (num\
    \ > max) max = num;\n  }\n  return [max, min];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n\
    \  const smallest = Number.POSITIVE_INFINITY;\n  for (const num of lst) {\n  \
    \  if (num > largest) {\n      largest = num;\n    } else if (num < smallest)\
    \ {\n      smallest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", " \
    \ let largest = Number.NEGATIVE_INFINITY;\n  let smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ < smallest) {\n      smallest = num;\n    }\n    if (num > largest) {\n    \
    \  largest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const largest\
    \ = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ > largest) {\n      largest = num;\n    }\n    if (num < smallest) {\n     \
    \ smallest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const smallest\
    \ = lst.reduce((a, b) => Math.min(a, b), -Infinity);\n  const largest = lst.reduce((a,\
    \ b) => Math.max(a, b), Infinity);\n  return [smallest, largest];\n}\n", "  const\
    \ positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n\
    \  if (positive.length > 0) {\n    return [Math.max(...negative), Math.min(...positive)];\n\
    \  }\n  if (negative.length > 0) {\n    return [undefined, Math.max(...negative)];\n\
    \  }\n  return [undefined, undefined];\n}\n", "  let largest = Number.MIN_SAFE_INTEGER;\n\
    \  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  const smallest = -Infinity;\n  const largest = Infinity;\n\
    \  for (const num of lst) {\n    if (num < smallest) {\n      smallest = num;\n\
    \    }\n    if (num > largest) {\n      largest = num;\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n  const smallest\
    \ = Number.POSITIVE_INFINITY;\n  for (const num of lst) {\n    if (num > largest)\
    \ {\n      largest = num;\n    }\n    if (num < smallest) {\n      smallest =\
    \ num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = Number.MIN_SAFE_INTEGER;\n\
    \  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num > largest) {\n      largest = num;\n\
    \    }\n    if (num < smallest) {\n      smallest = num;\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n  let\
    \ smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i]\
    \ < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  const max = -Infinity;\n  const min = Infinity;\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n\
    }\n", "  const largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  const smallest = lst.reduce(\n\
    \    (acc, val) => val < acc ? val : acc,\n    Infinity\n  );\n  const largest\
    \ = lst.reduce(\n    (acc, val) => val > acc ? val : acc,\n    -Infinity\n  );\n\
    \  return [smallest, largest];\n}\n", "  const max = -Infinity;\n  const min =\
    \ Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n\
    \    if (num < min) {\n      min = num;\n    }\n    if (num > max) {\n      max\
    \ = num;\n    }\n  }\n  return [min, max];\n}\n", "  const largest = Number.MIN_SAFE_INTEGER;\n\
    \  const smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num > largest) {\n      largest = num;\n\
    \    }\n    if (num < smallest) {\n      smallest = num;\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  const smallest = lst.reduce((a, b) => Math.min(a,\
    \ b), -Infinity);\n  const largest = lst.reduce((a, b) => Math.max(a, b), Infinity);\n\
    \  return [smallest, largest];\n}\n", "  const smallest = -Infinity;\n  const\
    \ largest = Infinity;\n  for (const num of lst) {\n    if (num < smallest) {\n\
    \      smallest = num;\n    }\n    if (num > largest) {\n      largest = num;\n\
    \    }\n  }\n  return [smallest, largest];\n}\n", "  const positive = lst.filter(x\
    \ => x > 0);\n  const negative = lst.filter(x => x < 0);\n  const a = positive.reduce((a,\
    \ b) => Math.max(a, b), -Infinity);\n  const b = negative.reduce((a, b) => Math.min(a,\
    \ b), Infinity);\n  return [a, b];\n}\n", "  const largest = Number.MIN_SAFE_INTEGER;\n\
    \  const smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num < smallest) {\n      smallest =\
    \ num;\n    }\n    if (num > largest) {\n      largest = num;\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  const smallest = -Infinity;\n  const largest\
    \ = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n\
    \    if (num < smallest) {\n      smallest = num;\n    }\n    if (num > largest)\
    \ {\n      largest = num;\n    }\n  }\n  return [smallest, largest];\n}\n", " \
    \ let largest = Number.NEGATIVE_INFINITY;\n  let smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ < smallest) {\n      smallest = num;\n    }\n    if (num > largest) {\n    \
    \  largest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  let smallest\
    \ = -Infinity;\n  let largest = Infinity;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const num = lst[i];\n    if (num > largest) {\n      largest = num;\n\
    \    }\n    if (num < smallest) {\n      smallest = num;\n    }\n  }\n  return\
    \ [smallest, largest];\n}\n", "  const smallest = -Infinity;\n  const largest\
    \ = Infinity;\n  for (const num of lst) {\n    if (num < smallest) {\n      smallest\
    \ = num;\n    }\n    if (num > largest) {\n      largest = num;\n    }\n  }\n\
    \  return [smallest, largest];\n}\n", "  const smallest = Number.MAX_SAFE_INTEGER;\n\
    \  const largest = -Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num < smallest) {\n      smallest =\
    \ num;\n    }\n    if (num > largest) {\n      largest = num;\n    }\n  }\n  return\
    \ [smallest, largest];\n}\n", "  const min: number | undefined = lst[0];\n  const\
    \ max: number | undefined = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    } else if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  return [min, max];\n}\n", "  const smallest\
    \ = lst.reduce((a, b) => a < b ? a : b);\n  const largest = lst.reduce((a, b)\
    \ => a > b ? a : b);\n  return [smallest, largest];\n}\n", "  const smallest =\
    \ lst.reduce((a, b) => Math.min(a, b), -Infinity);\n  const largest = lst.reduce((a,\
    \ b) => Math.max(a, b), Infinity);\n  return [smallest, largest];\n}\n", "  const\
    \ largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (const num of lst) {\n    if (num < smallest) {\n      smallest = num;\n\
    \    } else if (num > largest) {\n      largest = num;\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  const smallest = -Infinity;\n  const largest = Infinity;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ < smallest) {\n      smallest = num;\n    }\n    if (num > largest) {\n    \
    \  largest = num;\n    }\n  }\n  return [smallest, largest];\n}\n", "  const max\
    \ = -Infinity;\n  const min = Infinity;\n  for (const num of lst) {\n    if (num\
    \ > max) {\n      max = num;\n    }\n    if (num < min) {\n      min = num;\n\
    \    }\n  }\n  return [max, min];\n}\n", "  const max = Math.max(...lst);\n  const\
    \ min = Math.min(...lst);\n  return [max, min];\n}\n", "  const largest = lst.reduce((a,\
    \ b) => Math.max(a, b), -Infinity);\n  const smallest = lst.reduce((a, b) => Math.min(a,\
    \ b), Infinity);\n  return [largest, smallest];\n}\n", "  const smallest = lst.reduce((a,\
    \ b) => a < b ? a : b);\n  const largest = lst.reduce((a, b) => a > b ? a : b);\n\
    \  return [smallest, largest];\n}\n", "  const largest = Number.MIN_SAFE_INTEGER;\n\
    \  const smallest = Number.MAX_SAFE_INTEGER;\n  for (const num of lst) {\n   \
    \ if (num > largest) {\n      largest = num;\n    }\n    if (num < smallest) {\n\
    \      smallest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const\
    \ largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (const num of lst) {\n    if (num > largest) {\n      largest = num;\n\
    \    } else if (num < smallest) {\n      smallest = num;\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  const positive = lst.filter(n => n >= 0);\n \
    \ const negative = lst.filter(n => n < 0);\n  if (positive.length > 0 && negative.length\
    \ > 0) {\n    return [Math.max(...negative), Math.min(...positive)];\n  }\n  return\
    \ [undefined, undefined];\n}\n", "  const positive = lst.filter(n => n > 0);\n\
    \  const negative = lst.filter(n => n < 0);\n  if (negative.length > 0) {\n  \
    \  return [negative[0], positive[0]];\n  }\n  if (positive.length > 0) {\n   \
    \ return [positive[0], negative[0]];\n  }\n  return [undefined, undefined];\n\
    }\n", "  let largest = Number.NEGATIVE_INFINITY;\n  let smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [smallest, largest];\n}\n", "  const smallest = lst[0];\n\
    \  const largest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    const\
    \ num = lst[i];\n    if (num < smallest) {\n      smallest = num;\n    } else\
    \ if (num > largest) {\n      largest = num;\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  const largest = Number.MIN_SAFE_INTEGER;\n  const smallest\
    \ = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ num = lst[i];\n    if (num < smallest || num > largest) {\n      return [undefined,\
    \ undefined];\n    }\n    if (num < smallest) {\n      smallest = num;\n    }\n\
    \    if (num > largest) {\n      largest = num;\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  const positive = lst.filter(n => n >= 0);\n  const negative\
    \ = lst.filter(n => n < 0);\n  if (negative.length > 0) {\n    return [negative[0],\
    \ positive[0]];\n  }\n  if (positive.length > 0) {\n    return [positive[0], negative[0]];\n\
    \  }\n  return [undefined, undefined];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n\
    \  const smallest = Number.POSITIVE_INFINITY;\n  for (const num of lst) {\n  \
    \  if (num > largest) {\n      largest = num;\n    }\n    if (num < smallest)\
    \ {\n      smallest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", " \
    \ const largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (const num of lst) {\n    if (num > largest) {\n      largest = num;\n\
    \    }\n    if (num < smallest) {\n      smallest = num;\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n \
    \ const smallest = Number.POSITIVE_INFINITY;\n  for (const num of lst) {\n   \
    \ if (num > largest) {\n      largest = num;\n    } else if (num < smallest) {\n\
    \      smallest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const\
    \ min: number = Number.MAX_SAFE_INTEGER;\n  const max: number = Number.MIN_SAFE_INTEGER;\n\
    \  for (const num of lst) {\n    if (num < min) min = num;\n    if (num > max)\
    \ max = num;\n  }\n  return [min, max];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n\
    \  let smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  const positive = lst.filter(n => n >= 0);\n  const negative\
    \ = lst.filter(n => n < 0);\n  if (negative.length > 0) {\n    return [negative[0],\
    \ positive[0]];\n  }\n  if (positive.length > 0) {\n    return [positive[0], negative[0]];\n\
    \  }\n  return [undefined, undefined];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n\
    \  const smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n  const smallest\
    \ = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ num = lst[i];\n    if (num < smallest) {\n      smallest = num;\n    }\n   \
    \ if (num > largest) {\n      largest = num;\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let largest = Number.NEGATIVE_INFINITY;\n  let smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ > largest) {\n      largest = num;\n    }\n    if (num < smallest) {\n     \
    \ smallest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  let min:\
    \ number | undefined = undefined;\n  let max: number | undefined = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max\
    \ = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n\
    \  return [min, max];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n  const\
    \ smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const num = lst[i];\n    if (num < smallest) {\n      smallest = num;\n\
    \    }\n    if (num > largest) {\n      largest = num;\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n  let smallest\
    \ = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n",
  "  const positive = lst.filter(n => !Number.isNaN(n));\n  const negative = lst.filter(n\
    \ => Number.isNaN(n));\n  if (negative.length > 0) {\n    return [negative[0],\
    \ positive[0]];\n  }\n  if (positive.length > 0) {\n    return [positive[0], negative[0]];\n\
    \  }\n  return [undefined, undefined];\n}\n", "  const positive = lst.filter(n\
    \ => n > 0);\n  const negative = lst.filter(n => n < 0);\n  if (negative.length\
    \ > 0) {\n    return [negative[0], positive[0]];\n  }\n  if (positive.length >\
    \ 0) {\n    return [positive[0], negative[0]];\n  }\n  return [undefined, undefined];\n\
    }\n", "  const min: number = Number.MAX_SAFE_INTEGER;\n  const max: number = Number.MIN_SAFE_INTEGER;\n\
    \  for (const num of lst) {\n    if (num < min) min = num;\n    if (num > max)\
    \ max = num;\n  }\n  return [min, max];\n}\n", "  const positive = lst.filter(x\
    \ => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length\
    \ > 0) {\n    return [Math.max(...negative), Math.min(...positive)];\n  }\n  if\
    \ (negative.length > 0) {\n    return [undefined, Math.max(...negative)];\n  }\n\
    \  return [undefined, undefined];\n}\n", "  const min = Math.min(...lst);\n  const\
    \ max = Math.max(...lst);\n  return [min, max];\n}\n", "  const smallest = lst.reduce((a,\
    \ b) => Math.min(a, b), -Infinity);\n  const largest = lst.reduce((a, b) => Math.max(a,\
    \ b), Infinity);\n  return [smallest, largest];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n\
    \  let smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  const largest = Number.MIN_SAFE_INTEGER;\n  const smallest\
    \ = Number.MAX_SAFE_INTEGER;\n  for (const num of lst) {\n    if (num > largest)\
    \ {\n      largest = num;\n    } else if (num < smallest) {\n      smallest =\
    \ num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n\
    \  const smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  const min: number = Number.MAX_SAFE_INTEGER;\n  const max:\
    \ number = Number.MIN_SAFE_INTEGER;\n  for (const num of lst) {\n    if (num <\
    \ min) min = num;\n    if (num > max) max = num;\n  }\n  return [min, max];\n\
    }\n", "  const positive = lst.filter(n => n >= 0);\n  const negative = lst.filter(n\
    \ => n < 0);\n  if (negative.length > 0) {\n    return [negative[0], positive[0]];\n\
    \  }\n  if (positive.length > 0) {\n    return [positive[0], negative[0]];\n \
    \ }\n  return [undefined, undefined];\n}\n", "  const max = -Infinity;\n  const\
    \ min = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const n = lst[i];\n\
    \    if (n < min) {\n      min = n;\n    }\n    if (n > max) {\n      max = n;\n\
    \    }\n  }\n  return [min, max];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n\
    \  let smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n  let smallest\
    \ = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  const positive = lst.filter(n => n > 0);\n  const negative = lst.filter(n =>\
    \ n < 0);\n  if (positive.length > 0) {\n    return [Math.max(...negative), Math.min(...positive)];\n\
    \  }\n  if (negative.length > 0) {\n    return [undefined, Math.max(...negative)];\n\
    \  }\n  return [undefined, undefined];\n}\n", "  let largest = Number.MIN_VALUE;\n\
    \  let smallest = Number.MAX_VALUE;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    const num = lst[i];\n    if (num > largest) {\n      largest = num;\n   \
    \ }\n    if (num < smallest) {\n      smallest = num;\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n  const smallest\
    \ = Number.POSITIVE_INFINITY;\n  for (const num of lst) {\n    if (num > largest)\
    \ {\n      largest = num;\n    } else if (num < smallest) {\n      smallest =\
    \ num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const min: number\
    \ = Number.MAX_SAFE_INTEGER;\n  const max: number = Number.MIN_SAFE_INTEGER;\n\
    \  for (const num of lst) {\n    if (num < min) {\n      min = num;\n    }\n \
    \   if (num > max) {\n      max = num;\n    }\n  }\n  return [min, max];\n}\n",
  "  const largest = Number.MIN_SAFE_INTEGER;\n  const smallest = Number.MAX_SAFE_INTEGER;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ > largest) {\n      largest = num;\n    } else if (num < smallest) {\n     \
    \ smallest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const largest\
    \ = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (const num of lst) {\n    if (num > largest) {\n      largest = num;\n\
    \    }\n    if (num < smallest) {\n      smallest = num;\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  const largest = Number.MIN_SAFE_INTEGER;\n  const\
    \ smallest = Number.MAX_SAFE_INTEGER;\n  for (const num of lst) {\n    if (num\
    \ < smallest) {\n      smallest = num;\n    }\n    if (num > largest) {\n    \
    \  largest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const largest\
    \ = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (const num of lst) {\n    if (num < smallest) {\n      smallest = num;\n\
    \    }\n    if (num > largest) {\n      largest = num;\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n  let smallest\
    \ = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  const max = -Infinity;\n  const min = Infinity;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num < min) {\n      min = num;\n  \
    \  }\n    if (num > max) {\n      max = num;\n    }\n  }\n  return [max, min];\n\
    }\n", "  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x\
    \ => x < 0);\n  if (positive.length > 0) {\n    return [Math.max(...negative),\
    \ Math.min(...positive)];\n  }\n  if (negative.length > 0) {\n    return [undefined,\
    \ Math.max(...negative)];\n  }\n  return [undefined, undefined];\n}\n", "  const\
    \ largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [smallest, largest];\n}\n", "  let smallest = -Infinity;\n\
    \  let largest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n\
    \      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", " \
    \ const largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (const num of lst) {\n    if (num > largest) {\n      largest = num;\n\
    \    } else if (num < smallest) {\n      smallest = num;\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n \
    \ const smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  return [min, max];\n}\n", "  const max: number = Number.MIN_SAFE_INTEGER;\n\
    \  const min: number = Number.MAX_SAFE_INTEGER;\n  for (const num of lst) {\n\
    \    if (num < min) {\n      min = num;\n    }\n    if (num > max) {\n      max\
    \ = num;\n    }\n  }\n  return [max, min];\n}\n", "  const positive = lst.filter(n\
    \ => n >= 0);\n  const negative = lst.filter(n => n < 0);\n  if (positive.length\
    \ > 0) {\n    return [Math.max(...negative), Math.min(...positive)];\n  }\n  if\
    \ (negative.length > 0) {\n    return [undefined, Math.max(...negative)];\n  }\n\
    \  return [undefined, undefined];\n}\n", "  const smallest = -Infinity;\n  const\
    \ largest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const num\
    \ = lst[i];\n    if (num < smallest) {\n      smallest = num;\n    }\n    if (num\
    \ > largest) {\n      largest = num;\n    }\n  }\n  return [smallest, largest];\n\
    }\n", "  const largest = Number.NEGATIVE_INFINITY;\n  const smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ > largest) {\n      largest = num;\n    }\n    if (num < smallest) {\n     \
    \ smallest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const max\
    \ = -Infinity;\n  const min = Infinity;\n  for (const num of lst) {\n    if (num\
    \ > max) {\n      max = num;\n    }\n    if (num < min) {\n      min = num;\n\
    \    }\n  }\n  return [max, min];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n\
    \  let smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  const positives = lst.filter(n => n > 0);\n  const negatives\
    \ = lst.filter(n => n < 0);\n  if (positives.length === 0) {\n    return [undefined,\
    \ undefined];\n  }\n  if (negatives.length === 0) {\n    return [positives[0],\
    \ undefined];\n  }\n  const max = Math.max(...negatives);\n  const min = Math.min(...positives);\n\
    \  return [max, min];\n}\n", "  let largest = Number.MIN_SAFE_INTEGER;\n  let\
    \ smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i]\
    \ < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  const positive = lst.filter(n => n >= 0);\n  const negative = lst.filter(n\
    \ => n < 0);\n  if (negative.length > 0) {\n    return [negative[0], positive[0]];\n\
    \  }\n  if (positive.length > 0) {\n    return [positive[0], negative[0]];\n \
    \ }\n  return [undefined, undefined];\n}\n", "  const largest = Number.NEGATIVE_INFINITY;\n\
    \  const smallest = Number.POSITIVE_INFINITY;\n  for (const num of lst) {\n  \
    \  if (num < smallest) {\n      smallest = num;\n    }\n    if (num > largest)\
    \ {\n      largest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", " \
    \ let largest = Number.NEGATIVE_INFINITY;\n  let smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  const smallest = -Infinity;\n\
    \  const largest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ num = lst[i];\n    if (num < smallest) {\n      smallest = num;\n    }\n   \
    \ if (num > largest) {\n      largest = num;\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  const max = -Infinity;\n  const min = Infinity;\n  for (const\
    \ num of lst) {\n    if (num > max) {\n      max = num;\n    }\n    if (num <\
    \ min) {\n      min = num;\n    }\n  }\n  return [max, min];\n}\n", "  let min:\
    \ number | undefined = undefined;\n  let max: number | undefined = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  return [min, max];\n}\n", "  const smallest = -Infinity;\n  const largest =\
    \ Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n\
    \    if (num < smallest || smallest === -Infinity) {\n      smallest = num;\n\
    \    }\n    if (num > largest || largest === Infinity) {\n      largest = num;\n\
    \    }\n  }\n  return [smallest, largest];\n}\n", "  const smallest = -Infinity;\n\
    \  const largest = Infinity;\n  for (const num of lst) {\n    if (num < smallest)\
    \ {\n      smallest = num;\n    }\n    if (num > largest) {\n      largest = num;\n\
    \    }\n  }\n  return [smallest, largest];\n}\n", "  const positives = lst.filter(n\
    \ => n > 0);\n  const negatives = lst.filter(n => n < 0);\n  if (positives.length\
    \ < negatives.length) {\n    return [positives[positives.length - 1] as number,\
    \ negatives[0] as number];\n  }\n  return [negatives[negatives.length - 1] as\
    \ number, positives[0] as number];\n}\n", "  const max = Math.max(...lst);\n \
    \ const min = Math.min(...lst);\n  return [max, min];\n}\n", "  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  return [max, min];\n}\n", "  const smallest\
    \ = lst.reduce((a, b) => Math.min(a, b), -Infinity);\n  const largest = lst.reduce((a,\
    \ b) => Math.max(a, b), Infinity);\n  return [smallest, largest];\n}\n", "  let\
    \ largest = Number.NEGATIVE_INFINITY;\n  let smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  const smallest = lst.reduce((a,\
    \ b) => Math.min(a, b), -Infinity);\n  const largest = lst.reduce((a, b) => Math.max(a,\
    \ b), Infinity);\n  return [smallest, largest];\n}\n", "  const smallest = -Infinity;\n\
    \  const largest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ n = lst[i];\n    if (n < smallest) {\n      smallest = n;\n    } else if (n\
    \ > largest) {\n      largest = n;\n    }\n  }\n  return [smallest, largest];\n\
    }\n", "  const smallest = lst.reduce((a, b) => a < b ? a : b);\n  const largest\
    \ = lst.reduce((a, b) => a > b ? a : b);\n  return [smallest, largest];\n}\n",
  "  let largest = Number.NEGATIVE_INFINITY;\n  let smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ > largest) {\n      largest = num;\n    }\n    if (num < smallest) {\n     \
    \ smallest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  const positive\
    \ = lst.filter(n => n >= 0);\n  const negative = lst.filter(n => n < 0);\n  if\
    \ (positive.length > 0) {\n    return [Math.max(...negative), Math.min(...positive)];\n\
    \  }\n  if (negative.length > 0) {\n    return [undefined, Math.max(...negative)];\n\
    \  }\n  return [undefined, undefined];\n}\n", "  const min: number = Number.MAX_SAFE_INTEGER;\n\
    \  const max: number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num < min) min = num;\n    if (num\
    \ > max) max = num;\n  }\n  return [min, max];\n}\n", "  let max: number | undefined\
    \ = undefined;\n  let min: number | undefined = undefined;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n\
    }\n", "  const smallest = -Infinity;\n  const largest = Infinity;\n  for (const\
    \ num of lst) {\n    if (num > largest) {\n      largest = num;\n    }\n    if\
    \ (num < smallest) {\n      smallest = num;\n    }\n  }\n  return [smallest, largest];\n\
    }\n", "  const largest = Number.MIN_SAFE_INTEGER;\n  const smallest = Number.MAX_SAFE_INTEGER;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ < smallest) {\n      smallest = num;\n    }\n    if (num > largest) {\n    \
    \  largest = num;\n    }\n  }\n  return [largest, smallest];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
