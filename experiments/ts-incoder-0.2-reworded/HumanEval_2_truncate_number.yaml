name: HumanEval_2_truncate_number
language: ts
prompt: "//Given a positive floating point number, it can be decomposed into\n// and\
  \ integer part (largest integer smaller than given number) and decimals\n// (leftover\
  \ part always smaller than 1).\n// Return the decimal part of the number.\n// >>>\
  \ truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number): number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n\
  \  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n\
  }\n\ntest();"
completions: ["  if (number < 1) {\n    return 1;\n  }\n  const [integer, decimals]\
    \ = Math.trunc(number).toString().split('.');\n  return decimals ? +integer +\
    \ decimals : +integer;\n}\n", "  const [integer, decimals] = number.toFixed(2).split('.');\n\
    \  return parseFloat(integer) + parseFloat(decimals.slice(0, -1));\n}\n", "  if\
    \ (number < 1) {\n    return 1;\n  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n\
    \  return Math.trunc(number * 10 + decimal) / 10;\n}\n", "  if (number < 1) {\n\
    \    return 1;\n  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \  return decimals ? parseInt(decimals, 10) : integer;\n}\n", "  const decimals\
    \ = Math.trunc(number).toString().split('.')[1];\n  return Math.trunc(number).toString().split('.')[0]\
    \ + '.' + decimals;\n}\n", "    if (number < 1) {\n        return 0;\n    }\n\
    \    const [integer, decimals] = Math.trunc(number).toString().split('.');\n \
    \   if (decimals) {\n        return parseInt(decimals);\n    }\n    return integer;\n\
    }\n", "  if (number < 1) {\n    return 1;\n  }\n  const [integerPart, decimalPart,\
    \ decimals] = Math.trunc(number).toString().split('.');\n  return decimalPart\
    \ + (decimals ? `.${decimals}` : '');\n}\n", "    const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \    return Math.trunc(number).toString().split('.')[0] + '.' + decimals;\n}\n",
  "    if (number < 1) {\n        return 0;\n    }\n    const [integer, decimal] =\
    \ number.toFixed(1).split('.');\n    return decimal;\n}\n", "  return Math.floor(number);\n\
    }\n", "  const [integer, decimals] = number.toFixed(1).split('.')\n  return Math.trunc(number\
    \ * 10 + decimals) / 10\n}\n", "  if (number < 1) {\n    return number;\n  }\n\
    \  const [integer, decimals] = Math.trunc(number).toString().split('.');\n  if\
    \ (decimals) {\n    return parseFloat(integer) + '.' + decimals;\n  }\n  return\
    \ parseFloat(integer);\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const\
    \ [integer, decimals] = Math.trunc(number).toString().split('.');\n  return decimals\
    \ ? +integer + decimals : +integer;\n}\n", "  if (number < 1) {\n    return number;\n\
    \  }\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseFloat(integer)\
    \ + parseFloat(decimal);\n}\n", "  if (number < 1) {\n    return 0\n  }\n  const\
    \ [integer, decimal] = number.toFixed(1).split('.')\n  return parseInt(decimal)\n\
    }\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n  return\
    \ decimals ? parseFloat(decimals) : 0.0;\n}\n", "  return Math.floor(number);\n\
    }\n", "  if (number < 1) {\n    return 0\n  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.')\n\
    \  return decimals ? parseInt(decimals) : 0\n}\n", "  if (number < 1) {\n    return\
    \ 0\n  }\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return\
    \ +integer + +decimal\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const\
    \ [integer, decimals] = Math.trunc(number).toString().split('.');\n  return decimals\
    \ ? parseInt(decimals, 10) : integer;\n}\n", "  if (number < 1) {\n    return\
    \ 1;\n  }\n  if (number < 10) {\n    return number;\n  }\n  if (number < 100)\
    \ {\n    return truncate_number(number / 10) * 10;\n  }\n  if (number < 1000)\
    \ {\n    return truncate_number(number / 100) * 100;\n  }\n  if (number < 10000)\
    \ {\n    return truncate_number(number / 1000) * 1000;\n  }\n  if (number < 100000)\
    \ {\n    return truncate_number(number / 10000) * 10000;\n  }\n  if (number <\
    \ 1000000) {\n    return truncate_number(number / 100000) * 100000;\n  }\n  if\
    \ (number < 10000000) {\n    return truncate_number(number / 1000000) * 1000000;\n\
    \  }\n  return truncate_number(number / 10000000) * 10000000;\n}\n", "  if (number\
    \ < 1) {\n    return 1;\n  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n\
    \  return parseFloat(integer);\n}\n", "  const [integer, decimals] = number.toFixed(1).split('.')\n\
    \  return parseFloat(integer) + parseFloat(decimals)\n}\n", "  const [integer,\
    \ decimal] = number.toFixed(1).split('.')\n  return parseFloat(integer) + parseFloat(decimal)\n\
    }\n", "  return Math.floor(number);\n}\n", "  return Math.round(number * 100)\
    \ / 100;\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const [integer, decimals]\
    \ = Math.trunc(number).toString().split('.');\n  return decimals ? +integer +\
    \ decimals : +integer;\n}\n", "  const [integer, decimal] = number.toFixed(1).split('.')\n\
    \  return parseFloat(integer) + parseFloat(decimal)\n}\n", "  const [integerPart,\
    \ decimalPart] = number.toFixed(2).split('.');\n  return parseFloat(integerPart);\n\
    }\n", "    const [integer, decimal] = number.toFixed(1).split('.')\n    if (decimal.length\
    \ > 1) {\n        return parseFloat(integer) + '.' + decimal.slice(0, -1)\n  \
    \  }\n    return parseFloat(integer)\n}\n", "  if (number < 1) {\n    return 1;\n\
    \  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \  return decimals ? parseInt(decimals, 10) : integer;\n}\n", "    const [integer,\
    \ decimal] = number.toFixed(1).split('.')\n    return parseFloat(integer) + parseFloat(decimal)\n\
    }\n", "    if (number < 1) {\n        return 1;\n    }\n    const [integer, decimals]\
    \ = Math.trunc(number).toString().split('.');\n    return decimals ? parseInt(decimals,\
    \ 10) : integer;\n}\n", "\tconst decimals = Math.trunc(number).toString().split('.')[1];\n\
    \tconst decimals_length = decimals.length;\n\treturn (number - Math.floor(number))\
    \ + (decimals_length > 0 ? decimals_length : 0);\n}\n", "\tlet decimal_part =\
    \ Math.abs(number) - Math.floor(Math.abs(number));\n\treturn decimal_part > 0.5\
    \ ? decimal_part - 1 : decimal_part;\n}\n", "    if (number < 1) {\n        return\
    \ 0;\n    }\n    const [integer, decimal] = number.toFixed(1).split('.');\n  \
    \  return parseFloat(integer);\n}\n", "    const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \    const decimals_length = decimals.length;\n    if (decimals_length === 0)\
    \ {\n        return 0;\n    }\n    if (decimals_length === 1) {\n        return\
    \ number;\n    }\n    return number - Math.floor(number);\n}\n", "    if (number\
    \ < 1) {\n        return 0;\n    }\n    const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \    if (decimals) {\n        return parseInt(decimals);\n    }\n    return parseInt(integer);\n\
    }\n", "  if (number < 1) {\n    return 1;\n  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n\
    \  return parseInt(decimal, 10);\n}\n", "    if (number < 1) {\n        return\
    \ 1;\n    }\n    const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \    return decimals ? parseInt(decimals, 10) : integer;\n}\n", "  if (number\
    \ < 1) {\n    return number;\n  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n\
    \  return parseInt(decimal, 10);\n}\n", "  if (number < 1) {\n    return 1;\n\
    \  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseInt(decimal,\
    \ 10);\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const [integer, decimal]\
    \ = number.toFixed(1).split('.');\n  return parseInt(decimal, 10);\n}\n", "  \
    \  const [integer, decimal] = number.toFixed(2).split('.');\n    return parseFloat(integer);\n\
    }\n", "    if (number < 1) {\n        return 0;\n    }\n    const [integer, decimal]\
    \ = number.toFixed(1).split('.');\n    return decimal;\n}\n", "  const decimals\
    \ = Math.trunc(number).toString().split('.')[1];\n  return decimals ? parseFloat(decimals)\
    \ : 0.0;\n}\n", "  if (number < 1) {\n    return number;\n  }\n  const [integerPart,\
    \ decimalPart] = number.toFixed(2).split('.');\n  return decimalPart ? parseInt(integerPart)\
    \ : integerPart;\n}\n", "  return Math.floor(number);\n}\n", "    if (number <\
    \ 1) {\n        return 0;\n    }\n    const [integer, decimal] = number.toString().split('.');\n\
    \    const [integerPart, decimalPart] = integer.split('');\n    return decimalPart\
    \ + (decimalPart < 1 && decimalPart > 0 ? 0 : 1);\n}\n", "\tlet decimal_part =\
    \ Math.floor(number);\n\tlet integer_part = number - decimal_part;\n\tif (integer_part\
    \ < 0) {\n\t\tinteger_part = 0;\n\t}\n\treturn decimal_part;\n}\n", "  return\
    \ number < 0 ? Math.floor(number) : Math.round(number);\n}\n", "  if (number <\
    \ 1) {\n    return 1;\n  }\n  const [integer, decimals] = Math.trunc(number).toString(10).split('.');\n\
    \  return decimals ? +integer + decimals : +integer;\n}\n", "  const [integer,\
    \ decimal] = number.toFixed(1).split('.')\n  return parseFloat(integer) + parseFloat(decimal)\n\
    }\n", "\tlet decimals = Math.floor(Math.log10(number));\n\tlet integer_part =\
    \ number / Math.pow(10, decimals);\n\treturn integer_part * Math.pow(10, decimals\
    \ - 1);\n}\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \  return decimals ? parseFloat(decimals) : 0.0;\n}\n", "  if (number < 1) {\n\
    \    return 1;\n  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n\
    \  return parseInt(decimal, 10);\n}\n", "    if (number < 1) {\n        return\
    \ 0;\n    }\n    const [integer, decimals] = Math.trunc(number).toString(10).split('.');\n\
    \    return decimals ? +decimals : +integer;\n}\n", "  const [integer, decimals]\
    \ = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n\
    }\n", "  return Math.floor(number);\n}\n", "    const decimals = Math.trunc(number).toString().length\
    \ - 1;\n    return Math.trunc(number * 100) / 100;\n}\n", "  if (number < 1) {\n\
    \    return 1;\n  }\n  if (number > 100) {\n    return 100;\n  }\n  const [integer,\
    \ decimal] = number.toFixed(2).split('.');\n  return parseInt(decimal, 10);\n\
    }\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n  return\
    \ decimals ? +decimals : number;\n}\n", "  if (number < 1) {\n    return 1;\n\
    \  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \  return decimals ? parseInt(decimals, 10) : integer;\n}\n", "\tlet decimal_part\
    \ = Math.abs(number) - Math.floor(Math.abs(number));\n\treturn decimal_part >\
    \ 0.5 ? decimal_part - 1 : decimal_part;\n}\n", "    const [integer, decimal]\
    \ = number.toFixed(1).split('.');\n    return parseInt(integer, 10);\n}\n", "\t\
    const decimals = Math.trunc(Math.log10(Math.abs(number))) + 1;\n\treturn Math.trunc(number\
    \ * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n", "  if (number < 1)\
    \ {\n    return 1;\n  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n\
    \  return parseInt(decimal, 10);\n}\n", "  if (number < 1) {\n    return 1;\n\
    \  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseFloat(integer)\
    \ + parseFloat(decimal);\n}\n", "\tlet decimals = Math.floor(Math.log10(number));\n\
    \treturn Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\
    }\n", "\tlet decimals = Math.trunc(number).toString().split(\".\")[1].length;\n\
    \treturn number - Math.floor(number) * Math.pow(10, decimals);\n}\n", "    if\
    \ (number < 1) {\n        return 0;\n    }\n    const [integer, decimal] = number.toFixed(1).split('.');\n\
    \    return parseInt(decimal, 10);\n}\n", "    const [integer, decimals] = number.toFixed(2).split('.');\n\
    \    return parseInt(integer, 10);\n}\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \  return decimals ? Number(decimals) : 0;\n}\n", "  const [integer, decimals]\
    \ = number.toFixed(1).split('.')\n  return parseInt(integer, 10)\n}\n", "    if\
    \ (number < 1) {\n        return 1;\n    }\n    if (number > 1000000000000) {\n\
    \        return 1000000000000;\n    }\n    const [integer, decimals] = Math.trunc(number).toString(10).split('.');\n\
    \    return decimals ? parseInt(decimals, 10) : integer;\n}\n", "  if (number\
    \ < 1) {\n    return number;\n  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \  return decimals ? +integer + decimals : +integer;\n}\n", "  if (number < 1)\
    \ {\n    return number;\n  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \  return decimals ? +integer + decimals : +integer;\n}\n", "  return Math.round(number\
    \ * 100) / 100;\n}\n", "  return number < 0 ? Math.floor(-number) : Math.floor(number);\n\
    }\n", "\tconst decimals = Math.trunc(number).toString().split(\".\")[1].length;\n\
    \treturn (number - Math.floor(number)) < 0.00000001 ? number : Math.floor(number)\
    \ + 0.00000001;\n}\n", "  if (number < 1) {\n    return number;\n  }\n  const\
    \ [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseFloat(integerPart);\n\
    }\n", "  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer,\
    \ 10)\n}\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \  return decimals ? +decimals : number;\n}\n", "  return Math.round(number *\
    \ 100) / 100;\n}\n", "    const [integer, decimal] = number.toFixed(1).split('.')\n\
    \    return parseFloat(integer) + parseFloat(decimal)\n}\n", "    const decimals\
    \ = Math.trunc(number).toString().split('.')[1];\n    return Math.trunc(number)\
    \ - decimals.length / 2;\n}\n", "    if (number < 1) {\n        return 0;\n  \
    \  }\n    const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \    return decimals ? parseInt(decimals, 10) : integer;\n}\n", "    const decimals\
    \ = Math.trunc(number).toString().split('.')[1];\n    return Math.trunc(number).toString().split('.')[0]\
    \ + '.' + decimals;\n}\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \  return Math.trunc(number).toString().split('.')[0] + '.' + decimals;\n}\n",
  "\tlet decimal_part = Math.floor(number);\n\tlet whole_part = number - decimal_part;\n\
    \treturn decimal_part + Math.trunc(whole_part);\n}\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \  const decimals_length = decimals.length;\n  return Math.trunc(number).toString().replace(decimals_length,\
    \ '');\n}\n", "  if (number < 1) {\n    return number;\n  }\n  const [integer,\
    \ decimal] = number.toFixed(1).split('.');\n  return Math.trunc(number * 10) /\
    \ 10;\n}\n", "  const [integer, decimal] = number.toFixed(1).split('.')\n  return\
    \ +integer + +decimal\n}\n", "    if (number < 1) {\n        return 1;\n    }\n\
    \    const [integer, decimals] = Math.trunc(number).toString().split('.');\n \
    \   return decimals ? parseInt(decimals, 10) : integer;\n}\n", "  if (number <\
    \ 1) {\n    return 1;\n  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \  return decimals ? parseInt(decimals, 10) : integer;\n}\n", "  if (number <\
    \ 1) {\n    return 1;\n  }\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n\
    \  return parseFloat(integerPart);\n}\n", "    const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \    return parseFloat(decimals);\n}\n", "  if (number < 1) {\n    return number;\n\
    \  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \  return decimals ? +integer + decimals : +integer;\n}\n", "  if (number < 1)\
    \ {\n    return 1;\n  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \  return decimals ? parseInt(decimals, 10) : integer;\n}\n", "  if (number <\
    \ 1) {\n    return 1;\n  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \  if (decimals) {\n    return parseInt(decimals, 10);\n  }\n  return integer;\n\
    }\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n  return\
    \ Math.trunc(number).toString().split('.')[0] + '.' + decimals;\n}\n", "  const\
    \ [integer, decimal] = number.toFixed(1).split('.')\n  return parseFloat(integer)\
    \ + parseFloat(decimal)\n}\n", "  return Math.floor(number);\n}\n", "  if (number\
    \ < 1) {\n    return number;\n  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n\
    \  return parseFloat(integer);\n}\n", "    if (number < 1) {\n        return 0;\n\
    \    }\n    const [integer, decimal] = number.toFixed(1).split('.');\n    return\
    \ parseFloat(integer);\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const\
    \ [integer, decimals] = Math.trunc(number).toFixed(2).split('.');\n  return Math.trunc(number)\
    \ / Math.pow(10, decimals.length);\n}\n", "  if (number < 1) {\n    return 1;\n\
    \  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return Math.trunc(number\
    \ * 10 + decimal) / 10;\n}\n", "  return Math.floor(number);\n}\n", "  const [integer,\
    \ decimal] = number.toFixed(1).split('.')\n  return parseFloat(integer) + parseFloat(decimal)\n\
    }\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n  return\
    \ decimals ? +decimals : number;\n}\n", "  if (number < 1) {\n    return 0\n \
    \ }\n  const [integer, decimal] = number.toString().split('.')\n  return parseInt(decimal)\n\
    }\n", "  if (number < 1) {\n    return 1;\n  }\n  const [integer, decimals] =\
    \ Math.trunc(number).toString().split('.');\n  if (decimals) {\n    return parseInt(decimals);\n\
    \  }\n  return integer;\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const\
    \ [integer, decimals] = Math.trunc(number).toString().split('.');\n  return decimals\
    \ ? parseInt(decimals, 10) : integer;\n}\n", "    const decimals = Math.trunc(Math.log10(number));\n\
    \    return Math.trunc(number * Math.pow(10, -decimals)) / Math.pow(10, decimals);\n\
    }\n", "    if (number < 1) {\n        return 1;\n    }\n    const [integer, decimals]\
    \ = Math.trunc(number).toString().split('.');\n    return decimals ? +integer\
    \ + decimals : +integer;\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const\
    \ [integer, decimals] = Math.trunc(number).toString().split('.');\n  return decimals\
    \ ? +decimals : integer;\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const\
    \ [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return decimalPart;\n\
    }\n", "  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseFloat(integer);\n\
    }\n", "    if (number < 1) {\n        return 1;\n    }\n    const [integer, decimal]\
    \ = number.toFixed(1).split('.');\n    return parseInt(decimal);\n}\n", "  const\
    \ [integer, decimals] = number.toFixed(1).split('.')\n  return parseFloat(integer)\
    \ + parseFloat(decimals)\n}\n", "    const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \    return Math.trunc(number).toString().split('.')[0] + '.' + decimals;\n}\n",
  "  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseFloat(integer)\
    \ + parseFloat(decimal)\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  if\
    \ (number > 1000000000000) {\n    return 1000000000000;\n  }\n  const decimals\
    \ = Math.floor(Math.log10(number));\n  return Math.trunc(number * Math.pow(10,\
    \ decimals)) / Math.pow(10, decimals);\n}\n", "  const [integer, decimals] = number.toFixed(1).split('.')\n\
    \  return parseFloat(integer) + parseFloat(decimals)\n}\n", "  const [integer,\
    \ decimals] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimals)\n\
    }\n", "    const [integer, decimal] = number.toFixed(1).split('.')\n    return\
    \ parseFloat(integer) + parseFloat(decimal)\n}\n", "  if (number < 1) {\n    return\
    \ 1;\n  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \  return decimals ? parseInt(decimals, 10) : integer;\n}\n", "  if (number <\
    \ 1) {\n    return 1;\n  }\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n\
    \  return parseFloat(integerPart);\n}\n", "  if (number < 1) {\n    return 1;\n\
    \  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseInt(decimal,\
    \ 10);\n}\n", "\tlet decimals = Math.trunc(number);\n\tlet integer_part = number\
    \ - decimals;\n\treturn integer_part * Math.pow(10, decimals);\n}\n", "  if (number\
    \ < 1) {\n    return 1;\n  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n\
    \  return parseFloat(integer);\n}\n", "    if (number < 1) {\n        return 0;\n\
    \    }\n    const [integer, decimal] = number.toFixed(1).split('.');\n    return\
    \ parseInt(decimal, 10);\n}\n", "    if (number < 1) {\n        return 1;\n  \
    \  }\n    const [integer, decimal] = number.toFixed(1).split('.');\n    return\
    \ parseInt(decimal);\n}\n", "  return number < 0 ? Math.floor(number) : Math.floor(number\
    \ * 100) / 100;\n}\n", "  const [integer, decimals] = number.toFixed(1).split('.')\n\
    \  return parseFloat(integer) + parseFloat(decimals)\n}\n", "    const [integer,\
    \ decimals] = number.toFixed(1).split('.')\n    return parseFloat(integer) + parseFloat(decimals)\n\
    }\n", "  return Math.floor(number);\n}\n", "  if (number < 1) {\n    return 1;\n\
    \  }\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return +integer\
    \ + decimal;\n}\n", "    const [integer, decimal] = number.toFixed(1).split('.');\n\
    \    return parseFloat(integer);\n}\n", "  return Math.floor(number);\n}\n", " \
    \   const [integer, decimals] = number.toFixed(2).split('.')\n    return parseFloat(integer\
    \ + '.' + decimals)\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const [integer,\
    \ decimal] = number.toFixed(1).split('.');\n  return parseInt(decimal, 10);\n\
    }\n", "  if (number < 1) {\n    return 1;\n  }\n  const [integerPart, decimalPart]\
    \ = number.toFixed(2).split('.');\n  return parseFloat(integerPart);\n}\n", " \
    \   if (number < 1) {\n        return 0;\n    }\n    const [integer, decimal]\
    \ = number.toString().split('.');\n    if (decimal === '') {\n        return integer;\n\
    \    }\n    return parseInt(decimal, 10);\n}\n", "  if (number < 1) {\n    return\
    \ 1;\n  }\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n\
    \  return decimalPart;\n}\n", "\tlet decimal_part = Math.floor(number);\n\tlet\
    \ integer_part = number - decimal_part;\n\treturn decimal_part + integer_part;\n\
    }\n", "  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseFloat(integer);\n\
    }\n", "  if (number < 1) {\n    return 0\n  }\n  const [integer, decimal] = number.toString().split('.')\n\
    \  return parseInt(decimal)\n}\n", "  if (number < 1) {\n    return 1;\n  }\n\
    \  const [integer, decimals] = Math.trunc(number).toString().split('.');\n  if\
    \ (decimals) {\n    return parseInt(decimals, 10);\n  }\n  return integer;\n}\n",
  "\tlet decimal_part = Math.floor(number % 1);\n\tlet integer_part = Math.floor(number\
    \ - decimal_part);\n\treturn integer_part + decimal_part;\n}\n", "  if (number\
    \ < 1) {\n    return 1;\n  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \  if (decimals) {\n    return parseInt(decimals, 10);\n  }\n  return integer;\n\
    }\n", "  if (number < 1) {\n    return number;\n  }\n  const [integer, decimals]\
    \ = Math.trunc(number).toString().split('.');\n  return decimals ? parseInt(decimals,\
    \ 10) : integer;\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const [integer,\
    \ decimals] = Math.trunc(number).toString().split('.');\n  return decimals ? parseInt(decimals,\
    \ 10) : integer;\n}\n", "  if (number < 1) {\n    return number;\n  }\n  const\
    \ [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return decimalPart;\n\
    }\n", "  return Math.floor(number);\n}\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \  return Math.trunc(number).toString().split('.')[0] + '.' + decimals;\n}\n",
  "  if (number < 1) {\n    return 1;\n  }\n  if (number < 10) {\n    return number;\n\
    \  }\n  if (number < 100) {\n    return truncate_number(number / 10) + '.' + number\
    \ % 10;\n  }\n  if (number < 1000) {\n    return truncate_number(number / 100)\
    \ + '.' + number % 100;\n  }\n  if (number < 10000) {\n    return truncate_number(number\
    \ / 1000) + '.' + number % 1000;\n  }\n  if (number < 100000) {\n    return truncate_number(number\
    \ / 10000) + '.' + number % 10000;\n  }\n  if (number < 1000000) {\n    return\
    \ truncate_number(number / 100000) + '.' + number % 100000;\n  }\n  if (number\
    \ < 10000000) {\n    return truncate_number(number / 1000000) + '.' + number %\
    \ 1000000;\n  }\n  if (number < 100000000) {\n    return truncate_number(number\
    \ / 10000000) + '.' + number % 10000000;\n  }\n  if (number < 1000000000) {\n\
    \    return truncate_number(number / 100000000) + '.' + number % 1000000000;\n\
    \  }\n  if (number < 10000000000) {\n    return truncate_number(number / 1000000000)\
    \ + '.' + number % 10000000000;\n  }\n  if (number < 100000000000) {\n    return\
    \ truncate_number(number / 100000000000) + '.' + number % 100000000000;\n  }\n\
    \  if (number < 1000000000000) {\n    return truncate_number(number / 1000000000000)\
    \ + '.' + number % 1000000000000;\n  }\n  if (number < 10000000000000) {\n   \
    \ return truncate_number(number / 10000000000000) + '.' + number % 10000000000000;\n\
    \  }\n  if (number < 100000000000000) {\n    return truncate_number(number / 100000000000000)\
    \ + '.' + number % 100000000000000;\n  }\n  if (number < 1000000000000000) {\n\
    \    return truncate_number(number / 1000000000000000) + '.' + number % 1000000000000000;\n\
    \  }\n  if (number < 10000000000000000) {\n    return truncate_number(number /\
    \ 10000000000000000) + '.' + number % 10000000000000000;\n  }\n  if (number <\
    \ 100000000000000000) {\n    return truncate_number(number / 100000000000000000)\
    \ + '.' + number % 100000000000000000;\n  }\n  if (number < 1000000000000000000)\
    \ {\n    return truncate_number(number / 1000000000000000000) + '.' + number %\
    \ 100000000000000000;\n  }\n  return number;\n}\n", "  if (number < 1) {\n   \
    \ return 1;\n  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n\
    \  return parseInt(decimal, 10);\n}\n", "  const [integer, decimal] = number.toFixed(1).split('.')\n\
    \  return parseFloat(integer) + parseFloat(decimal)\n}\n", "  if (number < 1)\
    \ {\n    return 1;\n  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n\
    \  return parseInt(decimal, 10);\n}\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \  return Math.trunc(number).toString().split('.')[0] + '.' + decimals;\n}\n",
  "    const [integer, decimal] = number.toFixed(1).split('.')\n    return parseFloat(integer)\
    \ + parseFloat(decimal)\n}\n", "\tlet decimals = Math.trunc(number).toString().split(\"\
    .\")[1].length;\n\treturn number - Math.floor(number);\n}\n", "    const [integer,\
    \ decimal] = number.toFixed(1).split('.')\n    return parseFloat(integer) + parseFloat(decimal)\n\
    }\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n  const\
    \ decimals_length = decimals.length;\n  return Math.trunc(number) - decimals_length\
    \ * Math.trunc(number).toString().split('.')[0];\n}\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \  const decimals_length = decimals.length;\n  return Math.trunc(number).toString().replace(decimals_length,\
    \ '');\n}\n", "    const [integer, decimal] = number.toFixed(2).split(\".\");\n\
    \    return parseFloat(integer);\n}\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \  const decimals_length = decimals.length;\n  return decimals_length < 2 ? number\
    \ : number.toFixed(decimals_length);\n}\n", "  if (number < 1) {\n    return number;\n\
    \  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseFloat(integer);\n\
    }\n", "  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseFloat(integer)\
    \ + parseFloat(decimal)\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const\
    \ [integer, decimal] = number.toFixed(1).split('.');\n  return parseInt(decimal,\
    \ 10);\n}\n", "  return number < 0 ? Math.floor((number - number%1) / 1) : number%1;\n\
    }\n", "  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseFloat(integer);\n\
    }\n", "    if (number < 1) {\n        return 1;\n    }\n    const [integer, decimal]\
    \ = number.toFixed(1).split('.');\n    return parseInt(decimal);\n}\n", "  const\
    \ [integer, decimals] = number.toFixed(1).split('.')\n  return parseFloat(integer)\
    \ + parseFloat(decimals)\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const\
    \ [integer, decimal] = number.toFixed(1).split('.');\n  return parseInt(decimal,\
    \ 10);\n}\n", "    if (number < 1) {\n        return 1;\n    }\n    const [integer,\
    \ decimal] = number.toFixed(2).split('.');\n    return parseInt(decimal, 10);\n\
    }\n", "  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseFloat(integer);\n\
    }\n", "  const [integer, decimal] = number.toFixed(1).split('.')\n  return parseFloat(integer)\
    \ + parseFloat(decimal)\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const\
    \ [integer, decimals] = Math.trunc(number).toString().split('.');\n  if (decimals)\
    \ {\n    return parseInt(decimals, 10);\n  }\n  return integer;\n}\n", "    const\
    \ decimals = Math.trunc(number).toString().split('.')[1];\n    return Math.trunc(number).toString().split('.')[0]\
    \ + '.' + decimals;\n}\n", "  if (number < 1) {\n    return number;\n  }\n  const\
    \ [integer, decimals] = Math.trunc(number).toString().split('.');\n  return decimals\
    \ ? parseInt(decimals, 10) : integer;\n}\n", "    const decimals = Math.trunc(Math.log10(Math.abs(number)))\
    \ + 1;\n    return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10,\
    \ decimals);\n}\n", "\tlet decimal_part = Math.abs(number) - Math.floor(Math.abs(number));\n\
    \treturn decimal_part > 0.5 ? decimal_part - 1 : decimal_part;\n}\n", "  if (number\
    \ < 1) {\n    return 1;\n  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \  return decimals ? parseInt(decimals, 10) : integer;\n}\n", "  if (number <\
    \ 1) {\n    return 1;\n  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \  return decimals ? +integer + decimals : +integer;\n}\n", "  if (number < 1)\
    \ {\n    return 0\n  }\n  const [integer, decimals] = Math.trunc(number).toFixed(1).split('.')\n\
    \  return Math.trunc(number) - decimals\n}\n", "  if (number < 1) {\n    return\
    \ 1;\n  }\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n\
    \  return decimalPart;\n}\n", "    const decimals = Math.trunc(Math.log10(Math.abs(number)))\
    \ + 1;\n    return Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10,\
    \ decimals);\n}\n", "\tconst decimals = Math.trunc(Math.log10(Math.abs(number)));\n\
    \treturn Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\
    }\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n  const\
    \ decimals_length = decimals.length;\n  return decimals_length < 2 ? number :\
    \ number.toFixed(decimals_length);\n}\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \  return Math.trunc(number).toString().split('.')[0] + '.' + decimals;\n}\n",
  "  const [integer, decimals] = number.toFixed(1).split('.')\n  return parseFloat(integer)\
    \ + parseFloat(decimals)\n}\n", "  if (number < 1) {\n    return 0\n  }\n  const\
    \ [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseInt(integerPart)\n\
    }\n", "  return Math.round(number * 100) / 100;\n}\n", "    const [integer, decimal]\
    \ = number.toFixed(2).split('.');\n    return parseFloat(integer);\n}\n", "  \
    \  if (number < 1) {\n        return 0;\n    }\n    const [integer, decimal] =\
    \ number.toFixed(1).split('.');\n    return parseFloat(integer);\n}\n", "  const\
    \ decimals = Math.trunc(number).toString().split('.')[1];\n  const decimals_length\
    \ = decimals.length;\n  return decimals_length < 2 ? number : number.toFixed(decimals_length);\n\
    }\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n  return\
    \ decimals ? parseInt(decimals, 10) : number;\n}\n", "  if (number < 1) {\n  \
    \  return 1;\n  }\n  const [integer, decimal] = number.toFixed(2).split('.');\n\
    \  return parseFloat(integer) + parseFloat(decimal);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
