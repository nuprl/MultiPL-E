name: HumanEval_2_truncate_number
language: ts
prompt: "//Given a positive floating point number, it can be decomposed into\n// and\
  \ integer part (largest integer smaller than given number) and decimals\n// (leftover\
  \ part always smaller than 1).\n// Return the decimal part of the number.\n// >>>\
  \ truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number): number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n\
  \  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n\
  }\n\ntest();"
completions: ["  if (number < 1) {\n    return 1;\n  }\n  const [integer, decimals]\
    \ = Math.trunc(number).toString().split('.');\n  return decimals ? +integer +\
    \ decimals : +integer;\n}\n", "  const [integer, decimals] = number.toFixed(2).split('.');\n\
    \  return parseFloat(integer) + parseFloat(decimals.slice(0, -1));\n}\n", "  if\
    \ (number < 1) {\n    return 1;\n  }\n  const [integer, decimal] = number.toFixed(1).split('.');\n\
    \  return Math.trunc(number * 10 + decimal) / 10;\n}\n", "  if (number < 1) {\n\
    \    return 1;\n  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.');\n\
    \  return decimals ? parseInt(decimals, 10) : integer;\n}\n", "  const decimals\
    \ = Math.trunc(number).toString().split('.')[1];\n  return Math.trunc(number).toString().split('.')[0]\
    \ + '.' + decimals;\n}\n", "    if (number < 1) {\n        return 0;\n    }\n\
    \    const [integer, decimals] = Math.trunc(number).toString().split('.');\n \
    \   if (decimals) {\n        return parseInt(decimals);\n    }\n    return integer;\n\
    }\n", "  if (number < 1) {\n    return 1;\n  }\n  const [integerPart, decimalPart,\
    \ decimals] = Math.trunc(number).toString().split('.');\n  return decimalPart\
    \ + (decimals ? `.${decimals}` : '');\n}\n", "    const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \    return Math.trunc(number).toString().split('.')[0] + '.' + decimals;\n}\n",
  "    if (number < 1) {\n        return 0;\n    }\n    const [integer, decimal] =\
    \ number.toFixed(1).split('.');\n    return decimal;\n}\n", "  return Math.floor(number);\n\
    }\n", "  const [integer, decimals] = number.toFixed(1).split('.')\n  return Math.trunc(number\
    \ * 10 + decimals) / 10\n}\n", "  if (number < 1) {\n    return number;\n  }\n\
    \  const [integer, decimals] = Math.trunc(number).toString().split('.');\n  if\
    \ (decimals) {\n    return parseFloat(integer) + '.' + decimals;\n  }\n  return\
    \ parseFloat(integer);\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const\
    \ [integer, decimals] = Math.trunc(number).toString().split('.');\n  return decimals\
    \ ? +integer + decimals : +integer;\n}\n", "  if (number < 1) {\n    return number;\n\
    \  }\n  const [integer, decimal] = number.toFixed(2).split('.');\n  return parseFloat(integer)\
    \ + parseFloat(decimal);\n}\n", "  if (number < 1) {\n    return 0\n  }\n  const\
    \ [integer, decimal] = number.toFixed(1).split('.')\n  return parseInt(decimal)\n\
    }\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n  return\
    \ decimals ? parseFloat(decimals) : 0.0;\n}\n", "  return Math.floor(number);\n\
    }\n", "  if (number < 1) {\n    return 0\n  }\n  const [integer, decimals] = Math.trunc(number).toString().split('.')\n\
    \  return decimals ? parseInt(decimals) : 0\n}\n", "  if (number < 1) {\n    return\
    \ 0\n  }\n  const [integer, decimal] = number.toFixed(1).split('.')\n  return\
    \ +integer + +decimal\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const\
    \ [integer, decimals] = Math.trunc(number).toString().split('.');\n  return decimals\
    \ ? parseInt(decimals, 10) : integer;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
