name: HumanEval_79_decimal_to_binary
language: ts
prompt: "//You will be given a number in decimal form and your task is to convert\
  \ it to\n// binary format. The function should return a string, with each character\
  \ representing a binary\n// number. Each character in the string will be '0' or\
  \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n// The extra characters are there to help with the\
  \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n\
  // \"db100000db\"\nfunction decimal_to_binary(decimal: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"\
  db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"\
  db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();"
completions: ["  const binary = \"\";\n  let decimalString = decimal.toString(2);\n\
    \  while (decimalString.length > 0) {\n    binary += \"0\";\n    if (decimalString.length\
    \ < 8) {\n      binary += decimalString;\n    } else {\n      binary += \"1\"\
    ;\n      decimalString = decimalString.substr(0, decimalString.length - 1);\n\
    \    }\n  }\n  return binary;\n}\n", "  let binary: string = \"\";\n  let decimalString:\
    \ string = decimal.toString();\n  let decimalLength = decimalString.length;\n\
    \  let decimalIndex: number = decimalLength - 1;\n  while (decimalIndex >= 0)\
    \ {\n    let decimalDigit = decimalString[decimalIndex];\n    let binaryDigit\
    \ = decimalDigit === \"0\" ? \"1\" : \"0\";\n    binary += binaryDigit;\n    decimalIndex--;\n\
    \  }\n  return binary;\n}\n", "  let binary = '';\n  while (decimal > 0) {\n \
    \   binary = binary === '0' ? '1' : '0';\n    decimal = decimal % 2;\n  }\n  return\
    \ binary + 'db' + binary + decimal;\n}\n", "  let binary = '';\n  let decimalString\
    \ = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n\
    \    if (decimalString[i] === '1') {\n      binary += '1';\n    } else {\n   \
    \   binary += '0';\n    }\n  }\n  return 'db' + binary + 'db';\n}\n", "  const\
    \ decimalString = decimal.toString(2);\n  const binaryString = decimalString.split('').reverse().join('');\n\
    \  return binaryString.padStart(decimalString.length, '0');\n}\n", "  let binary\
    \ = '';\n  while (decimal > 0) {\n    binary = binary === '0' ? '1' : '0';\n \
    \   decimal--;\n  }\n  return binary + 'db' + binary;\n}\n", "  const decimalString\
    \ = decimal.toString(2);\n  const binaryString = decimalString.split('')\n   \
    \ .map(digit => digit === '1' ? '1' : '0')\n    .join('');\n  return `db${binaryString}`;\n\
    }\n", "  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'\
    \ ? '1' : '0';\n    decimal = decimal % 2;\n  }\n  return `db${binary}db`;\n}\n",
  "  let binary = '';\n  while (decimal > 0) {\n    binary += decimal_to_binary_digit(decimal\
    \ % 2);\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary +\
    \ 'db';\n}\n", "  const binaryString: string = decimal.toString(2);\n  const binaryStringLength\
    \ = binaryString.length;\n  const binaryStringLength = binaryStringLength + 2;\n\
    \  const binaryStringArray: string[] = [];\n  for (let i = 0; i < binaryStringLength;\
    \ i++) {\n    binaryStringArray.push(\"0\");\n  }\n  binaryStringArray.push(\"\
    1\");\n  for (let i = binaryStringLength; i < binaryStringArray.length; i++) {\n\
    \    binaryStringArray.push(\"0\");\n  }\n  return binaryStringArray.join(\"\"\
    );\n}\n", "  let binary = '';\n  let remainder = decimal;\n  while (decimal !==\
    \ 0) {\n    remainder *= 2;\n    binary += remainder % 2 ? '1' : '0';\n    decimal\
    \ -= remainder / 2;\n  }\n  return 'db' + binary + 'db';\n}\n", "  let binary\
    \ = '';\n  while (decimal > 0) {\n    binary += decimal_to_binary_digit(decimal\
    \ % 2);\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary;\n}\n",
  "  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0' ? '1'\
    \ : '0';\n    decimal = decimal % 2;\n  }\n  return binary + 'db' + binary + decimal;\n\
    }\n", "  const decimalString = decimal.toString(2);\n  const binaryString = decimalString.split('').reverse().join('');\n\
    \  return binaryString.padStart(decimalString.length, '0');\n}\n", "  let binary\
    \ = \"\";\n  while (decimal > 0) {\n    binary += \"0\";\n    decimal -= 1;\n\
    \  }\n  while (decimal > 0) {\n    binary += \"1\";\n    decimal -= 1;\n  }\n\
    \  return binary;\n}\n", "  let binary: string = \"\";\n  while (decimal > 0)\
    \ {\n    binary += \"0\";\n    decimal -= 1;\n  }\n  while (decimal < 0) {\n \
    \   binary += \"1\";\n    decimal += 1;\n  }\n  return binary;\n}\n", "  const\
    \ binary = [];\n  let remainder = decimal;\n  let index = 0;\n  while (decimal\
    \ > 0) {\n    binary.push(decimal % 2);\n    decimal = Math.floor(decimal / 2);\n\
    \  }\n  binary.reverse();\n  binary.unshift('db');\n  binary.push('db');\n  return\
    \ binary.join('');\n}\n", "  const binary: string[] = [];\n  let remainder: number\
    \ = 0;\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    decimal = Math.floor(decimal\
    \ / 2);\n    binary.push(remainder);\n  }\n  binary.reverse();\n  return binary.join('');\n\
    }\n", "  let binary = '';\n  while (decimal > 0) {\n    binary += decimalToBinary[decimal\
    \ % 2];\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary +\
    \ 'db';\n}\n", "  let binary = '';\n  while (decimal > 0) {\n    binary = binary\
    \ === '0' ? '1' : '0';\n    decimal = decimal % 2;\n  }\n  return binary + 'db'\
    \ + binary;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
