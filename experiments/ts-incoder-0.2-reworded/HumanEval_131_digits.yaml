name: HumanEval_131_digits
language: ts
prompt: "//Given a positive integer n, return the product of the odd digits.\n// Return\
  \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
  // 0\n// >>> digits(235)\n// 15\nfunction digits(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n\
  \  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n\
  \  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n\
  \  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"
completions: ["  if (n < 0) return 0;\n  if (n < 10) return 1;\n  if (n < 100) return\
    \ 2;\n  if (n < 1000) return 3;\n  if (n < 10000) return 4;\n  if (n < 100000)\
    \ return 5;\n  if (n < 1000000) return 6;\n  if (n < 10000000) return 7;\n  if\
    \ (n < 100000000) return 8;\n  if (n < 1000000000) return 9;\n  return 10;\n}\n",
  "  let result = 0;\n  let factor = 1;\n  while (n > 0) {\n    result += n % 10;\n\
    \    n /= 10;\n    factor *= 10;\n  }\n  return result * factor;\n}\n", "  let\
    \ product = 1;\n  let digit = 0;\n  while (n > 0) {\n    digit = n % 10;\n   \
    \ product = product * digit;\n    n /= 10;\n  }\n  return product;\n}\n", "  let\
    \ result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += i % 2;\n  }\n\
    \  return result;\n}\n", "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n\
    \    result *= i;\n  }\n  return result;\n}\n", "  if (n < 10) return 1;\n  if\
    \ (n < 100) return n * 2;\n  if (n < 1000) return n * 3;\n  if (n < 10000) return\
    \ n * 4;\n  if (n < 100000) return n * 5;\n  if (n < 1000000) return n * 6;\n\
    \  if (n < 10000000) return n * 7;\n  if (n < 100000000) return n * 8;\n  if (n\
    \ < 1000000000) return n * 9;\n  return n;\n}\n", "  let result = 0;\n  for (let\
    \ i = n; i > 0; i /= 2) {\n    result *= 2;\n  }\n  return result;\n}\n", "  let\
    \ result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
    \ % 2 === 1) {\n      result -= 1;\n    }\n  }\n  return result;\n}\n", "  let\
    \ product = 1;\n  let digit = 0;\n  while (n > 0) {\n    digit = n % 10;\n   \
    \ product = product * digit;\n    n = Math.floor(n / 10);\n  }\n  return product;\n\
    }\n", "  let result = 0;\n  while (n > 0) {\n    result *= 10;\n    result +=\
    \ n % 10;\n    n /= 10;\n  }\n  return result;\n}\n", "  let digits: number =\
    \ 0;\n  while (n > 0) {\n    digits *= 10;\n    n -= n % 2;\n  }\n  return digits;\n\
    }\n", "  let result = 0;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      result\
    \ -= 1;\n    }\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n", "  let\
    \ sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2 ? 1 : -1;\n\
    \  }\n  return sum;\n}\n", "  let result = 0;\n  for (let i = n; i > 0; i -= 2)\
    \ {\n    result *= 2;\n  }\n  return result;\n}\n", "  let product = 1;\n  for\
    \ (let i = 2; i <= n; i += 2) {\n    product *= i;\n  }\n  return product;\n}\n",
  "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
    \ % 2 === 1) {\n      result /= 2;\n    }\n  }\n  return result;\n}\n", "  let\
    \ result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n", "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product\
    \ *= i % 2 ? i : 1;\n  }\n  return product;\n}\n", "  let result = 0;\n  for (let\
    \ i = n; i > 0; i /= 2) {\n    result += i % 2;\n  }\n  return result;\n}\n",
  "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
    \ : 1;\n  }\n  return product;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
