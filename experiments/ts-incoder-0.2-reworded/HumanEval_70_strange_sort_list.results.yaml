language: ts
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  return lst.sort((a,\
    \ b) => {\n    if (a === min) {\n      return b;\n    }\n    if (b === min) {\n\
    \      return a;\n    }\n    return a - b;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpah41iy9o.js:30:12)\n    at Object.<anonymous> (/tmp/tmpah41iy9o.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(max, val), -Infinity);\n\
    \  const min = lst.reduce((min, val) => Math.min(min, val), Infinity);\n  return\
    \ lst.sort((a, b) => {\n    if (a < min) {\n      return -1;\n    }\n    if (a\
    \ > max) {\n      return 1;\n    }\n    if (b < min) {\n      return -1;\n   \
    \ }\n    if (b > max) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1znk_7md.ts(15,9): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmp1znk_7md.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    '
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9zv45gdg.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(strange_sort_list(right)).concat([min]).concat(max);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpp706ndr8.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpp706ndr8.js:15:24)\n    at strange_sort_list (/tmp/tmpp706ndr8.js:20:43)\n\
    \    at strange_sort_list (/tmp/tmpp706ndr8.js:20:43)\n    at strange_sort_list\
    \ (/tmp/tmpp706ndr8.js:20:43)\n    at strange_sort_list (/tmp/tmpp706ndr8.js:20:43)\n\
    \    at strange_sort_list (/tmp/tmpp706ndr8.js:20:43)\n    at strange_sort_list\
    \ (/tmp/tmpp706ndr8.js:20:43)\n    at strange_sort_list (/tmp/tmpp706ndr8.js:20:43)\n\
    \    at strange_sort_list (/tmp/tmpp706ndr8.js:20:43)\n    at strange_sort_list\
    \ (/tmp/tmpp706ndr8.js:20:43)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  return lst.sort((a,\
    \ b) => {\n    if (a === min) {\n      return -1;\n    }\n    if (b === min) {\n\
    \      return 1;\n    }\n    if (a === max) {\n      return 1;\n    }\n    if\
    \ (b === max) {\n      return -1;\n    }\n    return a - b;\n  });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmppzcuwr5i.js:36:12)\n    at Object.<anonymous> (/tmp/tmppzcuwr5i.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return\
    \ -1;\n    }\n    return 0;\n  });\n  return sorted;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9tu5a4_d.js:27:12)\n    at Object.<anonymous> (/tmp/tmp9tu5a4_d.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp617v2rtc.js:19:12)\n    at Object.<anonymous> (/tmp/tmp617v2rtc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = lst[0];\n  const max = lst.reduce((max, num) => Math.max(max, num),\
    \ -Infinity);\n  const min = Math.min(min, max);\n  const max = Math.max(min,\
    \ max);\n  const middle = Math.round(lst.length / 2);\n\n  return strange_sort_list(\n\
    \    lst.slice(0, middle).concat([min, max]).concat(lst.slice(middle))\n  );\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps5q0s0_h.ts(16,9): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmps5q0s0_h.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmps5q0s0_h.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../../tmp/tmps5q0s0_h.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmxh766hb.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpmxh766hb.js:16:24)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let\
    \ i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n\
    \    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  const result: number[]\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    const val = lst[i];\n    if (val\
    \ < min) {\n      result.push(val);\n    } else if (val > max) {\n      result.push(val);\n\
    \    } else {\n      result.push(min);\n      result.push(max);\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  1,\n  4,\n  1,\n  4,\n  1,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmppbon1sji.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppbon1sji.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 4, 1, 4,\n    1, 4, 1, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1yrt6n7j.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const minValue = lst[0];\n  const maxValue = lst[lst.length\
    \ - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n\
    \  const sortedList = lst.slice(minIndex, maxIndex + 1);\n  return sortedList;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpktv18w0m.js:22:12)\n    at Object.<anonymous> (/tmp/tmpktv18w0m.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let result = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp74gmk87s.js:23:12)\n    at Object.<anonymous> (/tmp/tmp74gmk87s.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpt6weyrlq.js:31:12)\n    at Object.<anonymous> (/tmp/tmpt6weyrlq.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min = min + 1;\n  }\n  result.push(max);\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpmsqgsxh7.js:33:12)\n    at Object.<anonymous> (/tmp/tmpmsqgsxh7.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9zv45gdg.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1yrt6n7j.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a,\
    \ b) => a - b);\n  return sorted_list;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpxb3gafqn.js:19:12)\n    at Object.<anonymous> (/tmp/tmpxb3gafqn.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_SAFE_INTEGER;\n\
    \  let max: number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      sorted.push(min);\n    } else if (lst[i]\
    \ > max) {\n      sorted.push(max);\n    } else {\n      sorted.push(lst[i]);\n\
    \    }\n  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps85buehp.ts(13,28): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmps85buehp.ts(14,28): error TS2339: Property ''MIN_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738749
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  return strange_sort_list(\n    lst.slice(0, mid).concat([max, min,\
    \ ...lst.slice(mid)])\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppblyz2p0.js:22\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmppblyz2p0.js:22:24)\n\
    \    at strange_sort_list (/tmp/tmppblyz2p0.js:25:12)\n    at strange_sort_list\
    \ (/tmp/tmppblyz2p0.js:25:12)\n    at strange_sort_list (/tmp/tmppblyz2p0.js:25:12)\n\
    \    at strange_sort_list (/tmp/tmppblyz2p0.js:25:12)\n    at strange_sort_list\
    \ (/tmp/tmppblyz2p0.js:25:12)\n    at strange_sort_list (/tmp/tmppblyz2p0.js:25:12)\n\
    \    at strange_sort_list (/tmp/tmppblyz2p0.js:25:12)\n    at strange_sort_list\
    \ (/tmp/tmppblyz2p0.js:25:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz7zof51b.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1yrt6n7j.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor((min + max) / 2);\n  return lst.sort((a, b) => {\n   \
    \ if (a < mid) {\n      return -1;\n    }\n    if (b < mid) {\n      return 1;\n\
    \    }\n    if (a > mid) {\n      return 1;\n    }\n    if (b > mid) {\n     \
    \ return -1;\n    }\n    return 0;\n  });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpucb7a96y.js:34:12)\n    at Object.<anonymous> (/tmp/tmpucb7a96y.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = [];\n  let min = lst[0];\n  let max\
    \ = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n\
    \      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n  \
    \  }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n\
    \      sorted.push(min);\n    } else if (lst[i] > max) {\n      sorted.push(max);\n\
    \    } else {\n      sorted.push(lst[i]);\n    }\n  }\n  return sorted;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpuk90lpr0.js:39:12)\n    at Object.<anonymous> (/tmp/tmpuk90lpr0.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let\
    \ i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n\
    \    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  const middle = Math.floor((min\
    \ + max) / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const\
    \ right = strange_sort_list(lst.slice(middle));\n  return left.concat(right).sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpa52so5_0.js:27\n    var left = strange_sort_list(lst.slice(0, middle));\n\
    \                                     ^\n\nRangeError: Maximum call stack size\
    \ exceeded\n    at Array.slice (<anonymous>)\n    at strange_sort_list (/tmp/tmpa52so5_0.js:27:38)\n\
    \    at strange_sort_list (/tmp/tmpa52so5_0.js:27:16)\n    at strange_sort_list\
    \ (/tmp/tmpa52so5_0.js:27:16)\n    at strange_sort_list (/tmp/tmpa52so5_0.js:27:16)\n\
    \    at strange_sort_list (/tmp/tmpa52so5_0.js:27:16)\n    at strange_sort_list\
    \ (/tmp/tmpa52so5_0.js:27:16)\n    at strange_sort_list (/tmp/tmpa52so5_0.js:27:16)\n\
    \    at strange_sort_list (/tmp/tmpa52so5_0.js:27:16)\n    at strange_sort_list\
    \ (/tmp/tmpa52so5_0.js:27:16)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const\
    \ middle = Math.floor((len - 1) / 2);\n  const left = strange_sort_list(lst.slice(0,\
    \ middle));\n  const right = strange_sort_list(lst.slice(middle));\n  return mergeSort(left,\
    \ right, minValue, maxValue);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0vfxf0hy.ts(21,10): error TS2304: Cannot find name
    ''mergeSort''.

    '
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnbeoi_qh.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n\n  const minIndex\
    \ = lst.findIndex((value) => value < minValue);\n  const maxIndex = lst.findIndex((value)\
    \ => value > maxValue);\n\n  const minValueIndex = lst.findIndex((value) => value\
    \ === minValue);\n  const maxValueIndex = lst.findIndex((value) => value === maxValue);\n\
    \n  const minValueIndex = lst.findIndex((value) => value === minValue);\n  const\
    \ maxValueIndex = lst.findIndex((value) => value === maxValue);\n\n  const minValueIndex\
    \ = lst.findIndex((value) => value === minValue);\n  const maxValueIndex = lst.findIndex((value)\
    \ => value === maxValue);\n\n  const minValueIndex = lst.findIndex((value) =>\
    \ value === minValue);\n  const maxValueIndex = lst.findIndex((value) => value\
    \ === maxValue);\n\n  const minValueIndex = lst.findIndex((value) => value ===\
    \ minValue);\n  const maxValueIndex = lst.findIndex((value) => value === maxValue);\n\
    \n  const minValueIndex = lst.findIndex((value) => value === minValue);\n  const\
    \ maxValueIndex = lst.findIndex((value) => value === maxValue);\n\n  const minValueIndex\
    \ = lst.findIndex((value) => value === minValue);\n  const maxValueIndex = lst.findIndex((value)\
    \ => value === maxValue);\n\n  const minValueIndex = lst.findIndex((value) =>\
    \ value === minValue);\n  const maxValueIndex = lst.findIndex((value) => value\
    \ === maxValue);\n\n  const minValueIndex = lst.findIndex((value) => value ===\
    \ minValue);\n  const maxValueIndex = lst.findIndex((value) => value === maxValue);\n\
    \n  const minValueIndex = lst.findIndex((value) => value === minValue);\n  const\
    \ maxValueIndex = lst.findIndex((value) => value === maxValue);\n\n  const minValueIndex\
    \ = lst.findIndex((value) => value === minValue);\n  const maxValueIndex = lst.findIndex((value)\
    \ => value === maxValue);\n\n  const minValueIndex = lst.findIndex((value) =>\
    \ value === minValue);\n  const maxValueIndex = lst.findIndex((value) => value\
    \ === maxValue);\n\n  const minValueIndex = lst.findIndex((value) => value ===\
    \ minValue);\n  const maxValueIndex = lst.findIndex((value) => value === maxValue);\n\
    \n  const minValueIndex = lst.findIndex((value) => value === minValue);\n  const\
    \ maxValueIndex = lst.findIndex((value) => value === maxValue);\n\n  const minValueIndex\
    \ = lst.findIndex((value) => value === minValue);\n  const maxValueIndex = lst.findIndex((value)\
    \ => value === maxValue);\n\n  const minValueIndex = lst.findIndex((\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6tzjek2z.ts(68,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp6tzjek2z.ts(85,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp617v2rtc.js:19:12)\n    at Object.<anonymous> (/tmp/tmp617v2rtc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const mid = Math.floor((min + max) / 2);\n  const left\
    \ = strange_sort_list(lst.slice(0, mid));\n  const right = strange_sort_list(lst.slice(mid));\n\
    \  return left.concat(right, min);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpw85uagc9.js:16\n    var mid = Math.floor((min + max) / 2);\n  \
    \                 ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpw85uagc9.js:16:20)\n    at\
    \ strange_sort_list (/tmp/tmpw85uagc9.js:18:17)\n    at strange_sort_list (/tmp/tmpw85uagc9.js:18:17)\n\
    \    at strange_sort_list (/tmp/tmpw85uagc9.js:18:17)\n    at strange_sort_list\
    \ (/tmp/tmpw85uagc9.js:18:17)\n    at strange_sort_list (/tmp/tmpw85uagc9.js:18:17)\n\
    \    at strange_sort_list (/tmp/tmpw85uagc9.js:18:17)\n    at strange_sort_list\
    \ (/tmp/tmpw85uagc9.js:18:17)\n    at strange_sort_list (/tmp/tmpw85uagc9.js:18:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpt6weyrlq.js:31:12)\n    at Object.<anonymous> (/tmp/tmpt6weyrlq.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [min, max] = lst;\n  const mid = Math.floor((min + max) / 2);\n  const left\
    \ = strange_sort_list(lst.slice(0, mid));\n  const right = strange_sort_list(lst.slice(mid));\n\
    \  return left.concat(right, min);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0rk65s_w.js:16\n    var mid = Math.floor((min + max) / 2);\n  \
    \                 ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp0rk65s_w.js:16:20)\n    at\
    \ strange_sort_list (/tmp/tmp0rk65s_w.js:18:17)\n    at strange_sort_list (/tmp/tmp0rk65s_w.js:18:17)\n\
    \    at strange_sort_list (/tmp/tmp0rk65s_w.js:18:17)\n    at strange_sort_list\
    \ (/tmp/tmp0rk65s_w.js:18:17)\n    at strange_sort_list (/tmp/tmp0rk65s_w.js:18:17)\n\
    \    at strange_sort_list (/tmp/tmp0rk65s_w.js:18:17)\n    at strange_sort_list\
    \ (/tmp/tmp0rk65s_w.js:18:17)\n    at strange_sort_list (/tmp/tmp0rk65s_w.js:18:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor((min\
    \ + max) / 2);\n  return strange_sort_list(lst.filter(x => x !== mid)) + [mid]\
    \ + strange_sort_list(lst.filter(x => x !== mid));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxuxlz_4u.ts(18,10): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = lst[0];\n  const max = lst[lst.length - 1];\n  const middle = Math.floor((min\
    \ + max) / 2);\n  return strange_sort_list(\n    lst.slice(0, middle).concat(\n\
    \      strange_sort_list(\n        lst.slice(middle, lst.length)\n      ),\n \
    \     lst.slice(middle)\n    )\n  );\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprycp2ygx.js:18\n    return strange_sort_list(lst.slice(0, middle).concat(strange_sort_list(lst.slice(middle,\
    \ lst.length)), lst.slice(middle)));\n                                 ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at strange_sort_list\
    \ (/tmp/tmprycp2ygx.js:18:34)\n    at strange_sort_list (/tmp/tmprycp2ygx.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmprycp2ygx.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmprycp2ygx.js:18:12)\n    at strange_sort_list (/tmp/tmprycp2ygx.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmprycp2ygx.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmprycp2ygx.js:18:12)\n    at strange_sort_list (/tmp/tmprycp2ygx.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmprycp2ygx.js:18:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp617v2rtc.js:19:12)\n    at Object.<anonymous> (/tmp/tmp617v2rtc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_VALUE;\n\
    \  let max: number = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max)\
    \ {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      sorted.push(min);\n    } else if (lst[i] > max)\
    \ {\n      sorted.push(max);\n    } else {\n      sorted.push(lst[i]);\n    }\n\
    \  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpqcktrg4a.js:39:12)\n    at Object.<anonymous> (/tmp/tmpqcktrg4a.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [min, max] = lst;\n  const minIndex = lst.indexOf(min);\n  const maxIndex =\
    \ lst.indexOf(max);\n  const minIndex2 = lst.indexOf(min);\n  const maxIndex2\
    \ = lst.indexOf(max);\n  const minIndex3 = lst.indexOf(min);\n  const maxIndex3\
    \ = lst.indexOf(max);\n  const minIndex4 = lst.indexOf(min);\n  const maxIndex4\
    \ = lst.indexOf(max);\n  const minIndex5 = lst.indexOf(min);\n  const maxIndex5\
    \ = lst.indexOf(max);\n  const minIndex6 = lst.indexOf(min);\n  const maxIndex6\
    \ = lst.indexOf(max);\n  const minIndex7 = lst.indexOf(min);\n  const maxIndex7\
    \ = lst.indexOf(max);\n  const minIndex8 = lst.indexOf(min);\n  const maxIndex8\
    \ = lst.indexOf(max);\n  const minIndex9 = lst.indexOf(min);\n  const maxIndex9\
    \ = lst.indexOf(max);\n  const minIndex10 = lst.indexOf(min);\n  const maxIndex10\
    \ = lst.indexOf(max);\n  const minIndex11 = lst.indexOf(min);\n  const maxIndex11\
    \ = lst.indexOf(max);\n  const minIndex12 = lst.indexOf(min);\n  const maxIndex12\
    \ = lst.indexOf(max);\n  const minIndex13 = lst.indexOf(min);\n  const maxIndex13\
    \ = lst.indexOf(max);\n  const minIndex14 = lst.indexOf(min);\n  const maxIndex14\
    \ = lst.indexOf(max);\n  const minIndex15 = lst.indexOf(min);\n  const maxIndex15\
    \ = lst.indexOf(max);\n  const minIndex16 = lst.indexOf(min);\n  const maxIndex16\
    \ = lst.indexOf(max);\n  const minIndex17 = lst.indexOf(min);\n  const maxIndex17\
    \ = lst.indexOf(max);\n  const minIndex18 = lst.indexOf(min);\n  const maxIndex18\
    \ = lst.indexOf(max);\n  const minIndex19 = lst.indexOf(min);\n  const maxIndex19\
    \ = lst.indexOf(max);\n  const minIndex20 = lst.indexOf(min);\n  const maxIndex20\
    \ = lst.indexOf(max);\n  const minIndex21 = lst.indexOf(min);\n  const maxIndex21\
    \ = lst.indexOf(max);\n  const minIndex22 = lst.indexOf(min);\n  const maxIndex22\
    \ = lst.indexOf(max);\n  const minIndex23 = lst.indexOf(min);\n  const maxIndex23\
    \ = lst.indexOf(max);\n  const minIndex24 = lst.indexOf(min);\n  const maxIndex24\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxqwei4i3.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnbeoi_qh.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let middle = Math.floor(lst.length / 2);\n  let left = lst.slice(0, middle);\n\
    \  let right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min]).concat([max]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp594lym8t.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp594lym8t.js:12:24)\n    at strange_sort_list (/tmp/tmp594lym8t.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp594lym8t.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp594lym8t.js:17:24)\n    at strange_sort_list (/tmp/tmp594lym8t.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp594lym8t.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp594lym8t.js:17:24)\n    at strange_sort_list (/tmp/tmp594lym8t.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp594lym8t.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp594lym8t.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = lst[0];\n  const max = lst.reduce((max, num) => Math.max(max, num),\
    \ -Infinity);\n  const min = Math.min(min, max);\n  const max = Math.max(min,\
    \ max);\n\n  return lst.sort((a, b) => a - b).map((num) => {\n    if (num ===\
    \ min) {\n      return min;\n    }\n    if (num === max) {\n      return max;\n\
    \    }\n    return num;\n  });\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfyh8ynqr.ts(16,9): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmpfyh8ynqr.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmpfyh8ynqr.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../../tmp/tmpfyh8ynqr.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1659738752
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  return strange_sort_list(\n    lst.slice(0, middle)\n      .concat(strange_sort_list(lst.slice(middle)))\n\
    \      .concat(strange_sort_list(lst.slice(0, middle)))\n      .concat(\n    \
    \    strange_sort_list(lst.slice(middle, lst.length))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(0, middle))\n      )\n      .concat(\n  \
    \      strange_sort_list(lst.slice(middle, lst.length))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(0, middle))\n      )\n      .concat(\n       \
    \ strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqlm98k3_.ts(103,8): error TS1003: Identifier expected.

    ../../../../../tmp/tmpqlm98k3_.ts(104,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpqlm98k3_.ts(104,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpqlm98k3_.ts(121,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738752
- exit_code: -5
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  let\
    \ min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result = [];\n  while (min < max) {\n\
    \    result.push(min);\n    min = Math.min(min, max);\n    max = Math.max(min,\
    \ max);\n  }\n  result.push(max);\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffca5017830\n 1: 0x2b71e924a727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b71e9ddf28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b71e9719f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b71e98ab760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b71e98b30cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b71e9a9d7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b71e93fc7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738756
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = lst[0];\n  let max = lst[0];\n  for (let\
    \ i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n\
    \    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpq3djo2xh.js:31:12)\n    at Object.<anonymous> (/tmp/tmpq3djo2xh.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9zv45gdg.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min: number = lst[0];\n  const max: number =\
    \ lst[lst.length - 1];\n  for (let i = 1; i < lst.length; i++) {\n    const current:\
    \ number = lst[i];\n    if (current < min) {\n      min = current;\n    } else\
    \ if (current > max) {\n      max = current;\n    }\n  }\n  const result: number[]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    const current: number =\
    \ lst[i];\n    if (current < min) {\n      result.push(min);\n      min = current;\n\
    \    } else if (current > max) {\n      result.push(max);\n      max = current;\n\
    \    } else {\n      result.push(current);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdrqfrobk.ts(17,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmpdrqfrobk.ts(19,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    ../../../../../tmp/tmpdrqfrobk.ts(27,7): error TS2588: Cannot assign to ''min''
    because it is a constant.

    ../../../../../tmp/tmpdrqfrobk.ts(30,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor((min + max) / 2);\n  let left = lst.slice(0, mid);\n \
    \ let right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq0hguf41.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpq0hguf41.js:12:24)\n\
    \    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpq0hguf41.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3]\
    \ = [min2, max2];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5]\
    \ = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7]\
    \ = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9]\
    \ = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11]\
    \ = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13,\
    \ max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const\
    \ [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n\
    \  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n\
    \  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n\
    \  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n\
    \  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n\
    \  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n\
    \  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n\
    \  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n\
    \  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n\
    \  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n\
    \  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n\
    \  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n\
    \  const [min39, max39] = [min38, max38];\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8p5q7pwc.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(left)).concat(right).concat(strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpipb2e4yy.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpipb2e4yy.js:12:24)\n\
    \    at strange_sort_list (/tmp/tmpipb2e4yy.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpipb2e4yy.js:17:24)\n    at strange_sort_list (/tmp/tmpipb2e4yy.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpipb2e4yy.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpipb2e4yy.js:17:24)\n    at strange_sort_list (/tmp/tmpipb2e4yy.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpipb2e4yy.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpipb2e4yy.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnbeoi_qh.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp617v2rtc.js:19:12)\n    at Object.<anonymous> (/tmp/tmp617v2rtc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3]\
    \ = [min2, max2];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5]\
    \ = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7]\
    \ = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9]\
    \ = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11]\
    \ = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13,\
    \ max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const\
    \ [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n\
    \  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n\
    \  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n\
    \  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n\
    \  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n\
    \  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n\
    \  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n\
    \  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n\
    \  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n\
    \  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n\
    \  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n\
    \  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n\
    \  const [min39, max39] = [min38, max38];\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp93_kw6ic.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor((min + max) / 2);\n  return lst.sort((a, b) => a > b\
    \ ? 1 : a < b ? -1 : 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpq5lt8xfd.js:20:12)\n    at Object.<anonymous> (/tmp/tmpq5lt8xfd.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3]\
    \ = [min2, max2];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5]\
    \ = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7]\
    \ = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9]\
    \ = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11]\
    \ = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13,\
    \ max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const\
    \ [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n\
    \  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n\
    \  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n\
    \  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n\
    \  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n\
    \  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n\
    \  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n\
    \  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n\
    \  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n\
    \  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n\
    \  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n\
    \  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n\
    \  const [min39, max39] = [min38, max38];\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8p5q7pwc.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.ceil(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgo2o7gt_.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpgo2o7gt_.js:16:24)\n    at strange_sort_list (/tmp/tmpgo2o7gt_.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmpgo2o7gt_.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpgo2o7gt_.js:21:12)\n    at strange_sort_list (/tmp/tmpgo2o7gt_.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmpgo2o7gt_.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpgo2o7gt_.js:21:12)\n    at strange_sort_list (/tmp/tmpgo2o7gt_.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmpgo2o7gt_.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpgo2o7gt_.js:21:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz7zof51b.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmxh766hb.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpmxh766hb.js:16:24)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor((min + max) / 2);\n  let left = lst.slice(0, mid);\n \
    \ let right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq0hguf41.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpq0hguf41.js:12:24)\n\
    \    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpq0hguf41.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp617v2rtc.js:19:12)\n    at Object.<anonymous> (/tmp/tmp617v2rtc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max]).concat([min]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpe_4khlcm.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpe_4khlcm.js:12:24)\n    at strange_sort_list (/tmp/tmpe_4khlcm.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpe_4khlcm.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpe_4khlcm.js:17:24)\n    at strange_sort_list (/tmp/tmpe_4khlcm.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpe_4khlcm.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpe_4khlcm.js:17:24)\n    at strange_sort_list (/tmp/tmpe_4khlcm.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpe_4khlcm.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpe_4khlcm.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmxh766hb.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpmxh766hb.js:16:24)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1yrt6n7j.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  return strange_sort_list(\n    lst.slice(0, middle)\n      .concat(strange_sort_list(lst.slice(middle)))\n\
    \      .concat(strange_sort_list(lst.slice(0, middle)))\n      .concat(\n    \
    \    strange_sort_list(lst.slice(middle, lst.length))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(0, middle))\n      )\n      .concat(\n  \
    \      strange_sort_list(lst.slice(middle, lst.length))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(0, middle))\n      )\n      .concat(\n       \
    \ strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqlm98k3_.ts(103,8): error TS1003: Identifier expected.

    ../../../../../tmp/tmpqlm98k3_.ts(104,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpqlm98k3_.ts(104,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpqlm98k3_.ts(121,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpa5ukafyx.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpa5ukafyx.js:16:24)\n    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpa5ukafyx.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnm6n148k.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpnm6n148k.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpnm6n148k.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738754
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1yrt6n7j.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min = min + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max\
    \ = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpfp95h0ns.js:36:12)\n    at Object.<anonymous> (/tmp/tmpfp95h0ns.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738754
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpt6weyrlq.js:31:12)\n    at Object.<anonymous> (/tmp/tmpt6weyrlq.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpt6weyrlq.js:31:12)\n    at Object.<anonymous> (/tmp/tmpt6weyrlq.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex\
    \ = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const\
    \ middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue =\
    \ lst[middleIndex];\n  const leftList = lst.slice(0, middleIndex);\n  const rightList\
    \ = lst.slice(middleIndex + 1);\n  return strange_sort_list(leftList).concat([middleValue],\
    \ strange_sort_list(rightList));\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpeg4ei_0j.js:28:12)\n    at Object.<anonymous> (/tmp/tmpeg4ei_0j.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1yrt6n7j.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let middle = Math.floor(lst.length / 2);\n  let left = lst.slice(0, middle);\n\
    \  let right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min]).concat([max]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp594lym8t.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp594lym8t.js:12:24)\n    at strange_sort_list (/tmp/tmp594lym8t.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp594lym8t.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp594lym8t.js:17:24)\n    at strange_sort_list (/tmp/tmp594lym8t.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp594lym8t.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp594lym8t.js:17:24)\n    at strange_sort_list (/tmp/tmp594lym8t.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp594lym8t.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp594lym8t.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnbeoi_qh.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i\
    \ < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  const result = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n \
    \   } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpex2scjn1.ts(20,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmpex2scjn1.ts(23,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659738754
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted_lst = lst.slice();\n  sorted_lst.sort((a,\
    \ b) => a - b);\n  return sorted_lst;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpzugrp5vc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpzugrp5vc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz7zof51b.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n\n  const minIndex\
    \ = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n\n  const\
    \ sortedList = lst.slice();\n\n  if (minIndex > maxIndex) {\n    sortedList.sort((a,\
    \ b) => a - b);\n  } else {\n    sortedList.sort((a, b) => b - a);\n  }\n\n  return\
    \ sortedList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpbplc89ur.js:31:12)\n    at Object.<anonymous> (/tmp/tmpbplc89ur.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = lst[0];\n  let max = lst[0];\n  for (let\
    \ i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n\
    \    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n \
    \     result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n\
    \    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpz89yj1mu.js:39:12)\n    at Object.<anonymous> (/tmp/tmpz89yj1mu.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_VALUE;\n\
    \  let max: number = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max)\
    \ {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpit1jtlqz.ts(140,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnm6n148k.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpnm6n148k.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpnm6n148k.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738754
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, num) => Math.max(max, num), -Infinity);\n\
    \  const min = Math.min(min, max);\n  const max = Math.max(min, max);\n\n  return\
    \ lst.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplw710eiz.ts(16,9): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmplw710eiz.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmplw710eiz.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../../tmp/tmplw710eiz.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1659738754
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpt6weyrlq.js:31:12)\n    at Object.<anonymous> (/tmp/tmpt6weyrlq.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9zv45gdg.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const [min, max] = lst;\n\n  const min = Math.min(min, max);\n  const max =\
    \ Math.max(min, max);\n\n  return strange_sort_list(\n    lst\n      .filter((item)\
    \ => item !== min)\n      .concat(\n        lst\n          .filter((item) => item\
    \ !== max)\n          .map((item) => item - min)\n      )\n  );\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoyo5l8v2.ts(16,10): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmpoyo5l8v2.ts(16,15): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmpoyo5l8v2.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../../tmp/tmpoyo5l8v2.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp_b9ppgam.js:31:12)\n    at Object.<anonymous> (/tmp/tmp_b9ppgam.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  return [min, ...strange_sort_list(lst.slice(0, middle)), max, ...strange_sort_list(lst.slice(middle))];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9iwfspke.js:22\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp9iwfspke.js:22:24)\n\
    \    at strange_sort_list (/tmp/tmp9iwfspke.js:25:82)\n    at strange_sort_list\
    \ (/tmp/tmp9iwfspke.js:25:82)\n    at strange_sort_list (/tmp/tmp9iwfspke.js:25:82)\n\
    \    at strange_sort_list (/tmp/tmp9iwfspke.js:25:82)\n    at strange_sort_list\
    \ (/tmp/tmp9iwfspke.js:25:82)\n    at strange_sort_list (/tmp/tmp9iwfspke.js:25:82)\n\
    \    at strange_sort_list (/tmp/tmp9iwfspke.js:25:82)\n    at strange_sort_list\
    \ (/tmp/tmp9iwfspke.js:25:82)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpash4i4am.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpash4i4am.js:16:24)\n    at strange_sort_list (/tmp/tmpash4i4am.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpash4i4am.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpash4i4am.js:21:48)\n    at strange_sort_list (/tmp/tmpash4i4am.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpash4i4am.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpash4i4am.js:21:48)\n    at strange_sort_list (/tmp/tmpash4i4am.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpash4i4am.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpash4i4am.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [min, max] = lst;\n  const [minIndex, maxIndex] = lst.findIndex((item) => item\
    \ === min);\n  const [maxIndex, minIndex] = lst.findIndex((item) => item === max);\n\
    \  const [minValue, maxValue] = lst.sort((a, b) => a - b);\n  const [minIndex,\
    \ maxIndex] = lst.findIndex((item) => item === minValue);\n  const [maxIndex,\
    \ minIndex] = lst.findIndex((item) => item === maxValue);\n  const [minValue,\
    \ maxValue] = lst.sort((a, b) => b - a);\n  const [minIndex, maxIndex] = lst.findIndex((item)\
    \ => item === minValue);\n  const [maxIndex, minIndex] = lst.findIndex((item)\
    \ => item === maxValue);\n  const [minValue, maxValue] = lst.sort((a, b) => a\
    \ - b);\n  const [minIndex, maxIndex] = lst.findIndex((item) => item === minValue);\n\
    \  const [maxIndex, minIndex] = lst.findIndex((item) => item === maxValue);\n\
    \  const [minValue, maxValue] = lst.sort((a, b) => b - a);\n  const [minIndex,\
    \ maxIndex] = lst.findIndex((item) => item === minValue);\n  const [maxIndex,\
    \ minIndex] = lst.findIndex((item) => item === maxValue);\n  const [minValue,\
    \ maxValue] = lst.sort((a, b) => a - b);\n  const [minIndex, maxIndex] = lst.findIndex((item)\
    \ => item === minValue);\n  const [maxIndex, minIndex] = lst.findIndex((item)\
    \ => item === maxValue);\n  const [minValue, maxValue] = lst.sort((a, b) => b\
    \ - a);\n  const [minIndex, maxIndex] = lst.findIndex((item) => item === minValue);\n\
    \  const [maxIndex, minIndex] = lst.findIndex((item) => item === maxValue);\n\
    \  const [minValue, maxValue] = lst.sort((a, b) => a - b);\n  const [minIndex,\
    \ maxIndex] = lst.findIndex((item) => item === minValue);\n  const [maxIndex,\
    \ minIndex] = lst.findIndex((item) => item === maxValue);\n  const [minValue,\
    \ maxValue] = lst.sort((a, b) => b - a);\n  const [minIndex, maxIndex] = lst.findIndex((item)\
    \ => item === minValue);\n  const [maxIndex, minIndex] = lst.findIndex((item)\
    \ => item === maxValue);\n  const [minValue, maxValue] = lst.sort((a, b) => a\
    \ - b);\n  const [minIndex, max\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps_c47i_i.ts(44,1): error TS1005: '','' expected.

    ../../../../../tmp/tmps_c47i_i.ts(44,9): error TS1005: '','' expected.

    ../../../../../tmp/tmps_c47i_i.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738755
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, x) => Math.max(max, x), 0);\n\
    \  const min = Math.min(min, max);\n  const max = Math.max(min, max);\n  return\
    \ lst.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv28yf4r9.ts(15,9): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmpv28yf4r9.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmpv28yf4r9.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../../tmp/tmpv28yf4r9.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min]).concat(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp22ukcg8g.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp22ukcg8g.js:12:24)\n    at strange_sort_list (/tmp/tmp22ukcg8g.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp22ukcg8g.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp22ukcg8g.js:17:24)\n    at strange_sort_list (/tmp/tmp22ukcg8g.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp22ukcg8g.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp22ukcg8g.js:17:24)\n    at strange_sort_list (/tmp/tmp22ukcg8g.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp22ukcg8g.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp22ukcg8g.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = Number.MAX_SAFE_INTEGER;\n  let max:\
    \ number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i =\
    \ min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzgadddkl.ts(12,28): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpzgadddkl.ts(13,28): error TS2339: Property ''MIN_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738755
- exit_code: -6
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const [min, max] = lst;\n\n  const mid = Math.floor((min + max) / 2);\n\n  return\
    \ strange_sort_list(\n    lst\n      .slice(mid - 1, mid)\n      .concat(\n  \
    \      lst\n          .slice(0, mid - 1)\n          .concat(\n            lst\n\
    \              .slice(mid + 1, lst.length)\n              .concat(\n         \
    \       lst\n                  .slice(0, mid)\n                  .concat(\n  \
    \                  lst\n                      .slice(mid + 1, lst.length)\n  \
    \                    .concat(\n                        lst\n                 \
    \         .slice(mid - 1, mid)\n                          .concat(\n         \
    \                   lst\n                              .slice(mid + 1, lst.length)\n\
    \                              .concat(\n                                lst\n\
    \                                  .slice(0, mid - 1)\n                      \
    \            .concat(\n                                    lst\n             \
    \                         .slice(mid + 1, lst.length)\n                      \
    \                .concat(\n                                        lst\n     \
    \                                     .slice(mid - 1, mid)\n                 \
    \                         .reverse()\n                                      )\n\
    \                                  )\n                              )\n      \
    \                    )\n                      )\n                  )\n       \
    \       )\n          )\n      )\n  );\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "\n<--- Last few GCs --->\n\n[16401:0x555b45240ae0]     6731 ms: Mark-sweep\
    \ (reduce) 4080.7 (4114.7) -> 4080.7 (4082.9) MB, 2089.0 / 0.0 ms  (+ 3.0 ms in\
    \ 1 steps since start of marking, biggest step 3.0 ms, walltime since start of\
    \ marking 2414 ms) (average mu = 0.470, current mu = 0.[16401:0x555b45240ae0]\
    \     7823 ms: Mark-sweep (reduce) 4411.4 (4413.6) -> 4411.4 (4413.6) MB, 803.1\
    \ / 0.0 ms  (average mu = 0.405, current mu = 0.264) allocation failure; scavenge\
    \ might not succeed\n\n\n<--- JS stacktrace --->\n\nFATAL ERROR: Reached heap\
    \ limit Allocation failed - JavaScript heap out of memory\n 1: 0x2b4aef7a0e79\
    \ node::Abort() [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b4aef684a06 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > node::SPrintFImpl<int&, char const*>(char const*, int&, char const*&&) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b4aefb51932 v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*,\
    \ bool) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b4aefb51c0f v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*,\
    \ char const*, bool) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b4aefd18236  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b4aefd2da69 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace,\
    \ v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b4aefd098da v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath(int,\
    \ v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment)\
    \ [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 8: 0x2b4aefd0ae35 v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath(int,\
    \ v8::internal::AllocationType, v8::internal::AllocationOrigi"
  stdout: ''
  timestamp: 1659738763
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max],\
    \ strange_sort_list(left));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyg2y74fk.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpyg2y74fk.js:12:24)\n\
    \    at strange_sort_list (/tmp/tmpyg2y74fk.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpyg2y74fk.js:17:24)\n    at strange_sort_list (/tmp/tmpyg2y74fk.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpyg2y74fk.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpyg2y74fk.js:17:24)\n    at strange_sort_list (/tmp/tmpyg2y74fk.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpyg2y74fk.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpyg2y74fk.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpeqab77ws.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpeqab77ws.js:16:24)\n    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpeqab77ws.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(max, val), min);\n\
    \  const min = lst.reduce((min, val) => Math.min(min, val), min);\n  const max\
    \ = lst.reduce((max, val) => Math.max(max, val), max);\n  const min = lst.reduce((min,\
    \ val) => Math.min(min, val), min);\n  const max = lst.reduce((max, val) => Math.max(max,\
    \ val), max);\n  const min = lst.reduce((min, val) => Math.min(min, val), min);\n\
    \  const max = lst.reduce((max, val) => Math.max(max, val), max);\n  const min\
    \ = lst.reduce((min, val) => Math.min(min, val), min);\n  const max = lst.reduce((max,\
    \ val) => Math.max(max, val), max);\n  const min = lst.reduce((min, val) => Math.min(min,\
    \ val), min);\n  const max = lst.reduce((max, val) => Math.max(max, val), max);\n\
    \  const min = lst.reduce((min, val) => Math.min(min, val), min);\n  const max\
    \ = lst.reduce((max, val) => Math.max(max, val), max);\n  const min = lst.reduce((min,\
    \ val) => Math.min(min, val), min);\n  const max = lst.reduce((max, val) => Math.max(max,\
    \ val), max);\n  const min = lst.reduce((min, val) => Math.min(min, val), min);\n\
    \  const max = lst.reduce((max, val) => Math.max(max, val), max);\n  const min\
    \ = lst.reduce((min, val) => Math.min(min, val), min);\n  const max = lst.reduce((max,\
    \ val) => Math.max(max, val), max);\n  const min = lst.reduce((min, val) => Math.min(min,\
    \ val), min);\n  const max = lst.reduce((max, val) => Math.max(max, val), max);\n\
    \  const min = lst.reduce((min, val) => Math.min(min, val), min);\n  const max\
    \ = lst.reduce((max, val) => Math.max(max, val), max);\n  const min = lst.reduce((min,\
    \ val) => Math.min(min, val), min);\n  const max = lst.reduce((max, val) => Math.max(max,\
    \ val), max);\n  const min = lst.reduce((min, val) => Math.min(min, val), min);\n\
    \  const max = lst.reduce((max, val) => Math.max(max, val), max);\n  const min\
    \ = lst.reduce((min, val) => Math.min(min, val), min);\n  const max = lst.reduce((max,\
    \ val) => Math.max(max, val), max);\n  const min = lst.reduce((min, val) => Math.min(min,\
    \ val), min);\n  const max = lst\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp38typoyc.ts(64,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [min, max] = lst;\n  const mid = Math.floor((min + max) / 2);\n  return strange_sort_list(\n\
    \    lst.slice(0, mid).concat([mid], lst.slice(mid))\n  );\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9un91bc1.js:17\n    return strange_sort_list(lst.slice(0, mid).concat([mid],\
    \ lst.slice(mid)));\n                                              ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmp9un91bc1.js:17:47)\n\
    \    at strange_sort_list (/tmp/tmp9un91bc1.js:17:12)\n    at strange_sort_list\
    \ (/tmp/tmp9un91bc1.js:17:12)\n    at strange_sort_list (/tmp/tmp9un91bc1.js:17:12)\n\
    \    at strange_sort_list (/tmp/tmp9un91bc1.js:17:12)\n    at strange_sort_list\
    \ (/tmp/tmp9un91bc1.js:17:12)\n    at strange_sort_list (/tmp/tmp9un91bc1.js:17:12)\n\
    \    at strange_sort_list (/tmp/tmp9un91bc1.js:17:12)\n    at strange_sort_list\
    \ (/tmp/tmp9un91bc1.js:17:12)\n    at strange_sort_list (/tmp/tmp9un91bc1.js:17:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738756
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3]\
    \ = [min2, max2];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5]\
    \ = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7]\
    \ = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9]\
    \ = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11]\
    \ = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13,\
    \ max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const\
    \ [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n\
    \  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n\
    \  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n\
    \  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n\
    \  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n\
    \  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n\
    \  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n\
    \  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n\
    \  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n\
    \  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n\
    \  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n\
    \  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n\
    \  const [min39, max39] = [min38, max38];\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8p5q7pwc.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n\
    \  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpmyn2qrku.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmyn2qrku.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp39micuu0.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp39micuu0.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp39micuu0.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnbeoi_qh.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right).concat([max]));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjofl7zv9.js:19\n    var left = lst.slice(0, middle);\n        \
    \           ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpjofl7zv9.js:19:20)\n    at\
    \ strange_sort_list (/tmp/tmpjofl7zv9.js:21:50)\n    at strange_sort_list (/tmp/tmpjofl7zv9.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpjofl7zv9.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpjofl7zv9.js:21:50)\n    at strange_sort_list (/tmp/tmpjofl7zv9.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpjofl7zv9.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpjofl7zv9.js:21:50)\n    at strange_sort_list (/tmp/tmpjofl7zv9.js:21:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const mid =\
    \ Math.floor((min + max) / 2);\n  const left = lst.slice(0, mid);\n  const right\
    \ = lst.slice(mid);\n  return strange_sort_list(left).concat(mid, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz9mpeml5.js:18\n    var mid = Math.floor((min + max) / 2);\n  \
    \                 ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpz9mpeml5.js:18:20)\n    at\
    \ strange_sort_list (/tmp/tmpz9mpeml5.js:21:12)\n    at strange_sort_list (/tmp/tmpz9mpeml5.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmpz9mpeml5.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpz9mpeml5.js:21:12)\n    at strange_sort_list (/tmp/tmpz9mpeml5.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmpz9mpeml5.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpz9mpeml5.js:21:12)\n    at strange_sort_list (/tmp/tmpz9mpeml5.js:21:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnm6n148k.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpnm6n148k.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpnm6n148k.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpnm6n148k.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738754
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpeqab77ws.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpeqab77ws.js:16:24)\n    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpeqab77ws.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(val, max), min);\n\
    \  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n\
    \  const middle = Math.floor((minIndex + maxIndex) / 2);\n  const left = lst.slice(0,\
    \ minIndex);\n  const right = lst.slice(minIndex, maxIndex);\n  return strange_sort_list(left).concat(middle,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpy8yhualk.js:27:12)\n    at Object.<anonymous> (/tmp/tmpy8yhualk.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 0,\
    \ 0 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnbeoi_qh.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((acc, x) => Math.max(acc, x), 0);\n\
    \  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n\
    \  const middle = Math.floor((minIndex + maxIndex) / 2);\n  return strange_sort_list(lst.slice(0,\
    \ middle)) + lst.slice(middle, lst.length);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphn7mlpit.ts(20,10): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz7zof51b.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max]).concat([min]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpe_4khlcm.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpe_4khlcm.js:12:24)\n    at strange_sort_list (/tmp/tmpe_4khlcm.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpe_4khlcm.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpe_4khlcm.js:17:24)\n    at strange_sort_list (/tmp/tmpe_4khlcm.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpe_4khlcm.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpe_4khlcm.js:17:24)\n    at strange_sort_list (/tmp/tmpe_4khlcm.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpe_4khlcm.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpe_4khlcm.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmxh766hb.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpmxh766hb.js:16:24)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len < 2) {\n    return\
    \ lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  1,\n  3,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n\
    \  2,\n  3\n]\n    at test (/tmp/tmpf7x9zvbu.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf7x9zvbu.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 2, 1,\n    3, 3, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp617v2rtc.js:19:12)\n    at Object.<anonymous> (/tmp/tmp617v2rtc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnbeoi_qh.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min += 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max -=\
    \ 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpa5hp78qe.js:36:12)\n    at Object.<anonymous> (/tmp/tmpa5hp78qe.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i\
    \ < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  const result = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n \
    \   } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpex2scjn1.ts(20,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmpex2scjn1.ts(23,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659738754
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor((min\
    \ + max) / 2);\n  return strange_sort_list(lst.filter(x => x !== mid).concat(mid,\
    \ strange_sort_list(lst.filter(x => x !== mid).slice(0, -1))));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpcwm0c_7f.js:18\n    return strange_sort_list(lst.filter(function\
    \ (x) { return x !== mid; }).concat(mid, strange_sort_list(lst.filter(function\
    \ (x) { return x !== mid; }).slice(0, -1))));\n                              \
    \                         ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at /tmp/tmpcwm0c_7f.js:18:56\n    at Array.filter (<anonymous>)\n    at strange_sort_list\
    \ (/tmp/tmpcwm0c_7f.js:18:34)\n    at strange_sort_list (/tmp/tmpcwm0c_7f.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpcwm0c_7f.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpcwm0c_7f.js:18:12)\n    at strange_sort_list (/tmp/tmpcwm0c_7f.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpcwm0c_7f.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpcwm0c_7f.js:18:12)\n    at strange_sort_list (/tmp/tmpcwm0c_7f.js:18:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min = lst[min];\n    max = lst[max];\n  }\n  result.push(max);\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpf_5k5v_n.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf_5k5v_n.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, undefined\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, cur) => Math.max(max, cur), -Infinity);\n\
    \  const min = Math.min(min, max);\n  const max = Math.max(min, max);\n  const\
    \ middle = Math.round(lst.length / 2);\n  return strange_sort_list(\n    lst.slice(0,\
    \ middle).concat(\n      lst.slice(middle).reverse(),\n      lst.slice(0, middle),\n\
    \    ),\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxdp86xq4.ts(15,9): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmpxdp86xq4.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmpxdp86xq4.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../../tmp/tmpxdp86xq4.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp617v2rtc.js:19:12)\n    at Object.<anonymous> (/tmp/tmp617v2rtc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] > max) {\n\
    \      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw_a8dfw.js:39:12)\n    at Object.<anonymous> (/tmp/tmpjw_a8dfw.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  while ((min2 === min)\
    \ && (max2 === max)) {\n    [min, max] = [max, min + max];\n    [min2, max2] =\
    \ [max, min + max];\n  }\n  return [min, max, min2, max2];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5cligh9c.ts(18,6): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmp5cligh9c.ts(18,11): error TS2588: Cannot assign to ''max''
    because it is a constant.

    ../../../../../tmp/tmp5cligh9c.ts(19,6): error TS2588: Cannot assign to ''min2''
    because it is a constant.

    ../../../../../tmp/tmp5cligh9c.ts(19,12): error TS2588: Cannot assign to ''max2''
    because it is a constant.

    '
  timestamp: 1659738757
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = Number.MAX_SAFE_INTEGER;\n  let max:\
    \ number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n\
    \    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n     \
    \ result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp06hgkkk8.ts(12,28): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmp06hgkkk8.ts(13,28): error TS2339: Property ''MIN_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738757
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const mid = Math.floor((min + max) / 2);\n  return strange_sort_list(\n\
    \    lst\n      .filter(x => x !== mid)\n      .concat(\n        lst\n       \
    \   .filter(x => x !== min)\n          .concat(\n            lst\n           \
    \   .filter(x => x !== max)\n              .concat(\n                lst\n   \
    \               .filter(x => x !== mid)\n                  .concat(\n        \
    \            lst\n                      .filter(x => x !== min)\n            \
    \          .concat(\n                        lst\n                          .filter(x\
    \ => x !== max)\n                          .concat(\n                        \
    \    lst\n                              .filter(x => x !== mid)\n            \
    \                  .concat(\n                                lst\n           \
    \                       .filter(x => x !== min)\n                            \
    \      .concat(\n                                    lst\n                   \
    \                   .filter(x => x !== max)\n                                \
    \      .concat(\n                                        lst\n               \
    \                           .filter(x => x !== mid)\n                        \
    \                  .concat(\n                                            lst\n\
    \                                              .filter(x => x !== min)\n     \
    \                                         .concat(\n                         \
    \                       lst\n                                                \
    \  .filter(x => x !== max)\n                                                 \
    \ .concat(\n                                                    lst\n        \
    \                                              .filter(x => x !== mid)\n     \
    \                                                 .concat(\n                 \
    \                                       lst\n                                \
    \                          .filter(x => x !== min)\n                         \
    \                                 .concat(\n                                 \
    \                           lst\n                                            \
    \                  .filter(x => x !== max)\n                                 \
    \                             .reverse()\n                                   \
    \                           .reverse()\n                                     \
    \                         .reverse()\n                                       \
    \                       .reverse()\n                                         \
    \                     .reverse()\n                                           \
    \                   .reverse()\n                                             \
    \                 .reverse()\n                                               \
    \               .reverse()\n                                                 \
    \             .reverse()\n                                                   \
    \           .reverse()\n                                                     \
    \         .reverse()\n                                                       \
    \       .reverse()\n                                                         \
    \     .reverse()\n                                                           \
    \   .reverse()\n                                                             \
    \ .reverse()\n                                                              .reverse()\n\
    \                                                              .reverse()\n  \
    \                                                            .reverse()\n    \
    \                                                          .reverse()\n      \
    \                                                        .reverse()\n        \
    \                                                      .reverse()\n          \
    \                                                    .reverse()\n            \
    \                                                  .reverse()\n              \
    \                                                .reverse()\n                \
    \                                              .reverse()\n                  \
    \                                            .reverse()\n                    \
    \                                          .reverse()\n                      \
    \                                        .reverse()\n                        \
    \                                      .reverse()\n                          \
    \                                    .reverse()\n                            \
    \                                  .reverse()\n                              \
    \                                .reverse()\n                                \
    \                              .reverse()\n                                  \
    \                            .reverse()\n                                    \
    \                          .reverse()\n                                      \
    \                        .reverse()\n                                        \
    \                      .reverse()\n                                          \
    \                    .reverse()\n                                            \
    \                  .reverse()\n                                              \
    \                .reverse()\n                                                \
    \              .reverse()\n                                                  \
    \            .reverse()\n                                                    \
    \          .reverse()\n                                                      \
    \        .reverse()\n                                                        \
    \      .reverse()\n                                                          \
    \    .reverse()\n                                                            \
    \  .reverse()\n                                                              .reverse()\n\
    \                                                              .reverse()\n  \
    \                                                            .reverse()\n    \
    \                                                          .reverse()\n      \
    \                                                        .reverse()\n        \
    \                                                      .reverse()\n          \
    \                                                    .reverse()\n            \
    \                                                  .reverse()\n              \
    \                                                .reverse()\n                \
    \                                              .reverse()\n                  \
    \                                            .reverse()\n                    \
    \                                          .reverse()\n                      \
    \                                        .reverse()\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpji7rksil.ts(122,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpji7rksil.ts(122,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpji7rksil.ts(139,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  for\
    \ (let i = 1; i < len; i++) {\n    const currentValue = lst[i];\n    if (currentValue\
    \ < minValue) {\n      lst[i] = minValue;\n    } else if (currentValue > maxValue)\
    \ {\n      lst[i] = maxValue;\n    }\n  }\n  return lst;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp3w7tdqip.js:32:12)\n    at Object.<anonymous> (/tmp/tmp3w7tdqip.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  let min = 0;\n  let max = len - 1;\n  while (min < max) {\n    const\
    \ mid = Math.floor((min + max) / 2);\n    if (lst[mid] > lst[max]) {\n      max\
    \ = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  const result =\
    \ new Array(len);\n  for (let i = 0; i < len; i++) {\n    result[i] = lst[min];\n\
    \    min++;\n    if (min === max) {\n      min = 0;\n      max--;\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  undefined,\n\
    \  undefined,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n\
    \  2,\n  3\n]\n    at test (/tmp/tmp9co1e24v.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9co1e24v.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, undefined,\
    \ undefined, undefined ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnbeoi_qh.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnbeoi_qh.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor((min\
    \ + max) / 2);\n  return strange_sort_list(lst.filter(x => x !== mid)) + [mid]\
    \ + strange_sort_list(lst.filter(x => x !== mid));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbooxgh5w.ts(18,10): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp39micuu0.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp39micuu0.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp39micuu0.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp617v2rtc.js:19:12)\n    at Object.<anonymous> (/tmp/tmp617v2rtc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((acc, curr) => Math.max(acc, curr),\
    \ min);\n  const min = Math.min(min, max);\n  const max = Math.max(min, max);\n\
    \  const middle = Math.floor((min + max) / 2);\n  return strange_sort_list(lst.filter(x\
    \ => x <= middle).concat(\n    lst.filter(x => x > middle)\n  ));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp52gkdc9.ts(15,9): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmpp52gkdc9.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmpp52gkdc9.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../../tmp/tmpp52gkdc9.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let result = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp74gmk87s.js:23:12)\n    at Object.<anonymous> (/tmp/tmp74gmk87s.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n\n  return [min, max, ...strange_sort_list(lst.slice(0, middle)), ...strange_sort_list(lst.slice(middle))];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfoqin7dh.js:22\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpfoqin7dh.js:22:24)\n\
    \    at strange_sort_list (/tmp/tmpfoqin7dh.js:25:80)\n    at strange_sort_list\
    \ (/tmp/tmpfoqin7dh.js:25:80)\n    at strange_sort_list (/tmp/tmpfoqin7dh.js:25:80)\n\
    \    at strange_sort_list (/tmp/tmpfoqin7dh.js:25:80)\n    at strange_sort_list\
    \ (/tmp/tmpfoqin7dh.js:25:80)\n    at strange_sort_list (/tmp/tmpfoqin7dh.js:25:80)\n\
    \    at strange_sort_list (/tmp/tmpfoqin7dh.js:25:80)\n    at strange_sort_list\
    \ (/tmp/tmpfoqin7dh.js:25:80)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738758
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor(lst.length / 2);\n  let left = lst.slice(0, mid);\n  let\
    \ right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat([min]).concat(strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjjieolkm.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpjjieolkm.js:12:24)\n    at strange_sort_list (/tmp/tmpjjieolkm.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpjjieolkm.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpjjieolkm.js:17:24)\n    at strange_sort_list (/tmp/tmpjjieolkm.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpjjieolkm.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpjjieolkm.js:17:24)\n    at strange_sort_list (/tmp/tmpjjieolkm.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpjjieolkm.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpjjieolkm.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = [];\n  let min = 0;\n  let max = lst.length\
    \ - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n\
    \    if (lst[mid] > lst[max]) {\n      max = mid - 1;\n    } else {\n      min\
    \ = mid + 1;\n    }\n  }\n  while (min >= 0) {\n    sorted.push(lst[min--]);\n\
    \  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpqphgpado.js:32:12)\n    at Object.<anonymous> (/tmp/tmpqphgpado.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpa5ukafyx.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpa5ukafyx.js:16:24)\n    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpa5ukafyx.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  return lst.sort((a,\
    \ b) => {\n    if (a === min) {\n      return -1;\n    }\n    if (b === min) {\n\
    \      return 1;\n    }\n    if (a === max) {\n      return 1;\n    }\n    if\
    \ (b === max) {\n      return -1;\n    }\n    return 0;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpr139zdwl.js:36:12)\n    at Object.<anonymous> (/tmp/tmpr139zdwl.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738759
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, num) => Math.max(max, num), -Infinity);\n\
    \  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n\
    \  const middle = Math.floor((minIndex + maxIndex) / 2);\n  return lst.sort((a,\
    \ b) => {\n    if (a === min) {\n      return -1;\n    }\n    if (b === min) {\n\
    \      return 1;\n    }\n    if (a === max) {\n      return 1;\n    }\n    if\
    \ (b === max) {\n      return -1;\n    }\n    if (a < b) {\n      return -1;\n\
    \    }\n    if (a > b) {\n      return 1;\n    }\n    return middle;\n  });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp4vvaj51a.js:45:12)\n    at Object.<anonymous> (/tmp/tmp4vvaj51a.js:55:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n\
    \  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpmyn2qrku.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmyn2qrku.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const\
    \ middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const\
    \ right = lst.slice(middle);\n  return strange_sort_list(left).concat(maxValue,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp10ily2hk.js:18\n    var middle = Math.floor(len / 2);\n       \
    \               ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp10ily2hk.js:18:23)\n    at\
    \ strange_sort_list (/tmp/tmp10ily2hk.js:21:53)\n    at strange_sort_list (/tmp/tmp10ily2hk.js:21:53)\n\
    \    at strange_sort_list (/tmp/tmp10ily2hk.js:21:53)\n    at strange_sort_list\
    \ (/tmp/tmp10ily2hk.js:21:53)\n    at strange_sort_list (/tmp/tmp10ily2hk.js:21:53)\n\
    \    at strange_sort_list (/tmp/tmp10ily2hk.js:21:53)\n    at strange_sort_list\
    \ (/tmp/tmp10ily2hk.js:21:53)\n    at strange_sort_list (/tmp/tmp10ily2hk.js:21:53)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor((min + max) / 2);\n  return strange_sort_list(\n   \
    \ lst.filter(x => x !== mid).concat(mid, strange_sort_list(lst.filter(x => x !==\
    \ mid)))\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpxguo9ltu.js:19\n    return strange_sort_list(lst.filter(function\
    \ (x) { return x !== mid; }).concat(mid, strange_sort_list(lst.filter(function\
    \ (x) { return x !== mid; }))));\n                                           \
    \            ^\n\nRangeError: Maximum call stack size exceeded\n    at /tmp/tmpxguo9ltu.js:19:56\n\
    \    at Array.filter (<anonymous>)\n    at strange_sort_list (/tmp/tmpxguo9ltu.js:19:34)\n\
    \    at strange_sort_list (/tmp/tmpxguo9ltu.js:19:89)\n    at strange_sort_list\
    \ (/tmp/tmpxguo9ltu.js:19:89)\n    at strange_sort_list (/tmp/tmpxguo9ltu.js:19:89)\n\
    \    at strange_sort_list (/tmp/tmpxguo9ltu.js:19:89)\n    at strange_sort_list\
    \ (/tmp/tmpxguo9ltu.js:19:89)\n    at strange_sort_list (/tmp/tmpxguo9ltu.js:19:89)\n\
    \    at strange_sort_list (/tmp/tmpxguo9ltu.js:19:89)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp39micuu0.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp39micuu0.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp39micuu0.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpa5ukafyx.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpa5ukafyx.js:16:24)\n    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpa5ukafyx.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const minValue = Math.min(...lst);\n  const maxValue = Math.max(...lst);\n\n\
    \  const sortedList = [minValue];\n  for (let i = minValue; i < maxValue; i++)\
    \ {\n    sortedList.push(i);\n  }\n\n  for (let i = maxValue; i > minValue; i--)\
    \ {\n    sortedList.push(i);\n  }\n\n  return sortedList;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  3,\n  4,\n  3,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n\
    \  2,\n  3\n]\n    at test (/tmp/tmpycikv223.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpycikv223.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 2, 3,\n    4, 3, 2\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  const middle\
    \ = Math.floor(lst.length / 2);\n  const left = lst\n    .slice(0, middle)\n \
    \   .sort((a, b) => a - b);\n  const right = lst\n    .slice(middle)\n    .sort((a,\
    \ b) => b - a);\n\n  return left.concat(right, min);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  4,\n  3,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n\
    ]\n    at test (/tmp/tmp1q6zheym.js:29:12)\n    at Object.<anonymous> (/tmp/tmp1q6zheym.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 3, 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpa5ukafyx.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpa5ukafyx.js:16:24)\n    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpa5ukafyx.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpa5ukafyx.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9zv45gdg.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmp9zv45gdg.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmp9zv45gdg.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmxh766hb.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpmxh766hb.js:16:24)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpmxh766hb.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpmxh766hb.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp617v2rtc.js:19:12)\n    at Object.<anonymous> (/tmp/tmp617v2rtc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpt6weyrlq.js:31:12)\n    at Object.<anonymous> (/tmp/tmpt6weyrlq.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ [min, max] = lst;\n\n  const min = Math.min(min, max);\n  const max = Math.max(min,\
    \ max);\n\n  const middle = Math.floor((min + max) / 2);\n\n  const left = strange_sort_list(lst.slice(0,\
    \ middle));\n  const right = strange_sort_list(lst.slice(middle));\n\n  return\
    \ left.concat(right).concat([min]);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqwsimaj_.ts(16,10): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmpqwsimaj_.ts(16,15): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmpqwsimaj_.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../../tmp/tmpqwsimaj_.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  let\
    \ min = lst[0];\n  let max = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  const result = [];\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n    }\
    \ else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp7vdsd72w.js:42:12)\n    at Object.<anonymous> (/tmp/tmp7vdsd72w.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpji90jrzm.js:31:12)\n    at Object.<anonymous> (/tmp/tmpji90jrzm.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  for (let i = min; i\
    \ <= max; i++) {\n    for (let j = min2; j <= max2; j++) {\n      if (i === j)\
    \ {\n        continue;\n      }\n      if (j > i) {\n        swap(j - 1, i);\n\
    \      }\n    }\n  }\n  return lst;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpixmm0yby.ts(23,9): error TS2304: Cannot find name
    ''swap''.

    '
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpt6weyrlq.js:31:12)\n    at Object.<anonymous> (/tmp/tmpt6weyrlq.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let middle = Math.floor(lst.length / 2);\n  let left = lst.slice(0, middle);\n\
    \  let right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min]).concat(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpxll81x8y.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpxll81x8y.js:12:24)\n    at strange_sort_list (/tmp/tmpxll81x8y.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpxll81x8y.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpxll81x8y.js:17:24)\n    at strange_sort_list (/tmp/tmpxll81x8y.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpxll81x8y.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpxll81x8y.js:17:24)\n    at strange_sort_list (/tmp/tmpxll81x8y.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpxll81x8y.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpxll81x8y.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(max, val), -Infinity);\n\
    \  const min = lst.reduce((min, val) => Math.min(min, val), Infinity);\n  const\
    \ middle = Math.floor((min + max) / 2);\n  return lst.sort((a, b) => {\n    if\
    \ (a < middle) {\n      return -1;\n    }\n    if (b < middle) {\n      return\
    \ 1;\n    }\n    if (a > middle) {\n      return 1;\n    }\n    if (b > middle)\
    \ {\n      return -1;\n    }\n    return 0;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyq_twhqt.ts(15,9): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmpyq_twhqt.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    '
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] > max) {\n\
    \      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw_a8dfw.js:39:12)\n    at Object.<anonymous> (/tmp/tmpjw_a8dfw.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  let\
    \ min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let res = [min];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      res.push(lst[i]);\n    }\n    if (lst[i]\
    \ > max) {\n      res.push(lst[i]);\n    }\n  }\n  res.push(max);\n  return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpvv91b2f3.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvv91b2f3.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4 ],\n\
    \  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const minValue = lst[0];\n  const maxValue = lst[0];\n  for (let i = 1; i <\
    \ lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n\
    \    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n\n\
    \  const middle = Math.floor((maxValue - minValue) / 2);\n  const sortedList =\
    \ lst.sort((a, b) => a - b);\n  const sortedList2 = sortedList.slice(0, middle).concat(sortedList.slice(middle));\n\
    \  return sortedList2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8k2sfk3q.ts(20,7): error TS2588: Cannot assign to
    ''minValue'' because it is a constant.

    ../../../../../tmp/tmp8k2sfk3q.ts(23,7): error TS2588: Cannot assign to ''maxValue''
    because it is a constant.

    '
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpeqab77ws.js:16\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmpeqab77ws.js:16:24)\n    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpeqab77ws.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpeqab77ws.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_VALUE;\n\
    \  let max: number = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n\
    \    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n\
    \      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n  \
    \  }\n    sorted.push(lst[i]);\n  }\n  sorted.push(min);\n  sorted.push(max);\n\
    \  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  1,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n\
    \  3\n]\n    at test (/tmp/tmp2p90t6zy.js:39:12)\n    at Object.<anonymous> (/tmp/tmp2p90t6zy.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 1, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp617v2rtc.js:19:12)\n    at Object.<anonymous> (/tmp/tmp617v2rtc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1yrt6n7j.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp1yrt6n7j.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp1yrt6n7j.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: -5
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  let\
    \ min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result = [];\n  while (min < max) {\n\
    \    result.push(min);\n    min = Math.min(min, max);\n    max = Math.max(min,\
    \ max);\n  }\n  result.push(max);\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffca5017830\n 1: 0x2b71e924a727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b71e9ddf28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b71e9719f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b71e98ab760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b71e98b30cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b71e9a9d7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b71e93fc7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738756
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i\
    \ < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  const result: number[] = [];\n\
    \  for (let i = 0; i < len; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n\
    \    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n     \
    \ result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpazfbj7ge.ts(20,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmpazfbj7ge.ts(23,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659738760
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i\
    \ < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  const result = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    const val = lst[i];\n    if (val < min) {\n    \
    \  result.push(val);\n    } else if (val > max) {\n      result.push(val);\n \
    \   } else {\n      result.push(min);\n      result.push(max);\n    }\n  }\n \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt2nlghut.ts(20,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmpt2nlghut.ts(23,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len < 2) {\n    return\
    \ lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.ceil(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  2,\n  4,\n  3,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n\
    \  2,\n  3\n]\n    at test (/tmp/tmpfpoelh9j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfpoelh9j.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 2, 4,\n    3, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpt6weyrlq.js:31:12)\n    at Object.<anonymous> (/tmp/tmpt6weyrlq.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(max, val));\n\
    \  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n\
    \  const middle = Math.floor((minIndex + maxIndex) / 2);\n  return [...lst.slice(0,\
    \ minIndex), ...lst.slice(minIndex, middle), ...lst.slice(middle, maxIndex), ...lst.slice(maxIndex)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp_xf9eai3.js:32:12)\n    at Object.<anonymous> (/tmp/tmp_xf9eai3.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp_b9ppgam.js:31:12)\n    at Object.<anonymous> (/tmp/tmp_b9ppgam.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor((min + max) / 2);\n  let left = lst.slice(0, mid);\n \
    \ let right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq0hguf41.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpq0hguf41.js:12:24)\n\
    \    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpq0hguf41.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpq0hguf41.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max)\
    \ {\n      max = lst[i];\n    }\n  }\n\n  const result = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n \
    \   } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n\
    \    }\n  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiuuaal6l.ts(20,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmpiuuaal6l.ts(23,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659738760
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  const middle\
    \ = Math.floor(lst.length / 2);\n\n  const left = lst.slice(0, middle);\n  const\
    \ right = lst.slice(middle);\n\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpoy5iujlq.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpoy5iujlq.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpoy5iujlq.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpoy5iujlq.js:20:48)\n    at strange_sort_list (/tmp/tmpoy5iujlq.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpoy5iujlq.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpoy5iujlq.js:20:48)\n    at strange_sort_list (/tmp/tmpoy5iujlq.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpoy5iujlq.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpoy5iujlq.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738761
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz7zof51b.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpz7zof51b.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpz7zof51b.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max)\
    \ {\n      max = lst[i];\n    }\n  }\n  const result = [];\n  while (min < max)\
    \ {\n    result.push(min);\n    min = lst[min];\n    max = lst[max];\n  }\n  result.push(max);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6acyv3s0.ts(19,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmp6acyv3s0.ts(22,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    ../../../../../tmp/tmp6acyv3s0.ts(28,5): error TS2588: Cannot assign to ''min''
    because it is a constant.

    ../../../../../tmp/tmp6acyv3s0.ts(29,5): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659738761
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[0];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    } else if\
    \ (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n\n  const result\
    \ = [];\n  for (let i = minValue; i <= maxValue; i++) {\n    result.push(i);\n\
    \  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyfaqd06i.ts(20,7): error TS2588: Cannot assign to
    ''minValue'' because it is a constant.

    ../../../../../tmp/tmpyfaqd06i.ts(22,7): error TS2588: Cannot assign to ''maxValue''
    because it is a constant.

    '
  timestamp: 1659738761
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnbeoi_qh.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min: number = lst[0];\n  const max: number =\
    \ lst[lst.length - 1];\n  const middle: number = (min + max) / 2;\n  const middle2:\
    \ number = (min + max) / 2;\n\n  if (min === max) {\n    return lst;\n  }\n\n\
    \  if (middle === middle2) {\n    return lst.sort((a, b) => a - b);\n  }\n\n \
    \ return strange_sort_list(lst.sort((a, b) => a - b)).concat(\n    strange_sort_list(lst.sort((a,\
    \ b) => b - a))\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmph9f7damx.js:27:12)\n    at Object.<anonymous> (/tmp/tmph9f7damx.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right),\
    \ right.slice(0, middle), min).concat(max);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpbz_pmqz9.js:15\n    var left = lst.slice(0, middle);\n        \
    \           ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpbz_pmqz9.js:15:20)\n    at\
    \ strange_sort_list (/tmp/tmpbz_pmqz9.js:17:24)\n    at strange_sort_list (/tmp/tmpbz_pmqz9.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpbz_pmqz9.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpbz_pmqz9.js:17:24)\n    at strange_sort_list (/tmp/tmpbz_pmqz9.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpbz_pmqz9.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpbz_pmqz9.js:17:24)\n    at strange_sort_list (/tmp/tmpbz_pmqz9.js:17:24)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpt6weyrlq.js:31:12)\n    at Object.<anonymous> (/tmp/tmpt6weyrlq.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let result = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp74gmk87s.js:23:12)\n    at Object.<anonymous> (/tmp/tmp74gmk87s.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp_b9ppgam.js:31:12)\n    at Object.<anonymous> (/tmp/tmp_b9ppgam.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp39micuu0.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmp39micuu0.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp39micuu0.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp39micuu0.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max],\
    \ strange_sort_list(left));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyg2y74fk.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpyg2y74fk.js:12:24)\n\
    \    at strange_sort_list (/tmp/tmpyg2y74fk.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpyg2y74fk.js:17:24)\n    at strange_sort_list (/tmp/tmpyg2y74fk.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpyg2y74fk.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpyg2y74fk.js:17:24)\n    at strange_sort_list (/tmp/tmpyg2y74fk.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpyg2y74fk.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpyg2y74fk.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738755
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnbeoi_qh.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnbeoi_qh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnbeoi_qh.js:20:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738752
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  let\
    \ min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = min; i <=\
    \ max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpyg6qe1w_.js:34:12)\n    at Object.<anonymous> (/tmp/tmpyg6qe1w_.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor((min\
    \ + max) / 2);\n  return strange_sort_list(lst.filter(x => x !== mid)) + [mid]\
    \ + strange_sort_list(lst.filter(x => x !== mid));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbooxgh5w.ts(18,10): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] > max) {\n\
    \      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjw_a8dfw.js:39:12)\n    at Object.<anonymous> (/tmp/tmpjw_a8dfw.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738757
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpl32pb49a.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpl32pb49a.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpl32pb49a.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpl32pb49a.js:20:48)\n    at strange_sort_list (/tmp/tmpl32pb49a.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpl32pb49a.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpl32pb49a.js:20:48)\n    at strange_sort_list (/tmp/tmpl32pb49a.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpl32pb49a.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpl32pb49a.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  const middle\
    \ = Math.floor(lst.length / 2);\n\n  const left = lst.slice(0, middle);\n  const\
    \ right = lst.slice(middle);\n\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpoy5iujlq.js:15\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.min (<anonymous>)\n    at strange_sort_list (/tmp/tmpoy5iujlq.js:15:24)\n\
    \    at strange_sort_list (/tmp/tmpoy5iujlq.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpoy5iujlq.js:20:48)\n    at strange_sort_list (/tmp/tmpoy5iujlq.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpoy5iujlq.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpoy5iujlq.js:20:48)\n    at strange_sort_list (/tmp/tmpoy5iujlq.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpoy5iujlq.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpoy5iujlq.js:20:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738761
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor(lst.length / 2);\n  let left = lst.slice(0, mid);\n  let\
    \ right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat([min]).concat(right.concat(strange_sort_list(left)));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9zs_zyr7.js:12\n    var min = Math.min.apply(Math, lst);\n    \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ strange_sort_list (/tmp/tmp9zs_zyr7.js:12:24)\n    at strange_sort_list (/tmp/tmp9zs_zyr7.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp9zs_zyr7.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp9zs_zyr7.js:17:24)\n    at strange_sort_list (/tmp/tmp9zs_zyr7.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp9zs_zyr7.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp9zs_zyr7.js:17:24)\n    at strange_sort_list (/tmp/tmp9zs_zyr7.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp9zs_zyr7.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp9zs_zyr7.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i\
    \ < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  const res = [min];\n  for (let\
    \ i = min; i <= max; i++) {\n    res.push(lst[i]);\n  }\n  return res;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8c13k2e0.ts(20,7): error TS2588: Cannot assign to
    ''min'' because it is a constant.

    ../../../../../tmp/tmp8c13k2e0.ts(23,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1659738761
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp617v2rtc.js:19:12)\n    at Object.<anonymous> (/tmp/tmp617v2rtc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738750
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, x) => Math.max(max, x), 0);\n\
    \  const min = Math.max(min, 0);\n  const max = Math.min(max, lst.length - 1);\n\
    \  const middle = Math.floor((max - min) / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle + 1);\n  return strange_sort_list(left).concat(right).concat([min]).concat(\n\
    \    strange_sort_list(right)\n  );\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpffmexfhm.ts(15,9): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmpffmexfhm.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmpffmexfhm.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../../tmp/tmpffmexfhm.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1659738761
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const mid =\
    \ Math.floor((min + max) / 2);\n  const left = lst.slice(0, mid);\n  const right\
    \ = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpls0eza2_.js:18\n    var mid = Math.floor((min + max) / 2);\n  \
    \                 ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.floor\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpls0eza2_.js:18:20)\n    at\
    \ strange_sort_list (/tmp/tmpls0eza2_.js:21:12)\n    at strange_sort_list (/tmp/tmpls0eza2_.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmpls0eza2_.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpls0eza2_.js:21:12)\n    at strange_sort_list (/tmp/tmpls0eza2_.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmpls0eza2_.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpls0eza2_.js:21:12)\n    at strange_sort_list (/tmp/tmpls0eza2_.js:21:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_SAFE_INTEGER;\n\
    \  let max: number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      sorted.push(min);\n    } else if (lst[i]\
    \ > max) {\n      sorted.push(max);\n    } else {\n      sorted.push(lst[i]);\n\
    \    }\n  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps85buehp.ts(13,28): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmps85buehp.ts(14,28): error TS2339: Property ''MIN_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738749
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const result = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpeku3r_v9.js:23:12)\n    at Object.<anonymous> (/tmp/tmpeku3r_v9.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor((min\
    \ + max) / 2);\n  return strange_sort_list(\n    lst.filter(x => x !== mid).concat(mid).concat(strange_sort_list(\n\
    \      lst.filter(x => x !== mid).slice(0, mid).concat(strange_sort_list(\n  \
    \      lst.filter(x => x !== mid).slice(mid)\n      ))\n    ))\n  );\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzjk0ux59.js:18\n    return strange_sort_list(lst.filter(function\
    \ (x) { return x !== mid; }).concat(mid).concat(strange_sort_list(lst.filter(function\
    \ (x) { return x !== mid; }).slice(0, mid).concat(strange_sort_list(lst.filter(function\
    \ (x) { return x !== mid; }).slice(mid))))));\n                              \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ /tmp/tmpzjk0ux59.js:18:50\n    at Array.filter (<anonymous>)\n    at strange_sort_list\
    \ (/tmp/tmpzjk0ux59.js:18:34)\n    at strange_sort_list (/tmp/tmpzjk0ux59.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpzjk0ux59.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpzjk0ux59.js:18:12)\n    at strange_sort_list (/tmp/tmpzjk0ux59.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpzjk0ux59.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpzjk0ux59.js:18:12)\n    at strange_sort_list (/tmp/tmpzjk0ux59.js:18:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738762
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, num) => Math.max(max, num), min);\n\
    \  const min = Math.min(min, max);\n  const max = Math.max(max, min);\n\n  return\
    \ lst.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3k9isc7y.ts(16,9): error TS2451: Cannot redeclare
    block-scoped variable ''min''.

    ../../../../../tmp/tmp3k9isc7y.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmp3k9isc7y.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../../tmp/tmp3k9isc7y.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1659738762
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[0];\n  for (let\
    \ i = 1; i < len; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n\
    \    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n \
    \ const sortedList = [minValue];\n  for (let i = len - 1; i > 0; i--) {\n    if\
    \ (lst[i] < minValue) {\n      sortedList.push(minValue);\n      minValue = lst[i];\n\
    \    } else {\n      sortedList.push(maxValue);\n      maxValue = lst[i];\n  \
    \  }\n  }\n  sortedList.push(maxValue);\n  return sortedList;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_tv_6_ki.ts(20,7): error TS2588: Cannot assign to
    ''minValue'' because it is a constant.

    ../../../../../tmp/tmp_tv_6_ki.ts(23,7): error TS2588: Cannot assign to ''maxValue''
    because it is a constant.

    ../../../../../tmp/tmp_tv_6_ki.ts(30,7): error TS2588: Cannot assign to ''minValue''
    because it is a constant.

    ../../../../../tmp/tmp_tv_6_ki.ts(33,7): error TS2588: Cannot assign to ''maxValue''
    because it is a constant.

    '
  timestamp: 1659738762
