language: ts
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  return lst.sort((a,\
    \ b) => {\n    if (a === min) {\n      return b;\n    }\n    if (b === min) {\n\
    \      return a;\n    }\n    return a - b;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpfoelry1h.js:30:12)\n    at Object.<anonymous> (/tmp/tmpfoelry1h.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(max, val), -Infinity);\n\
    \  const min = lst.reduce((min, val) => Math.min(min, val), Infinity);\n  return\
    \ lst.sort((a, b) => {\n    if (a < min) {\n      return -1;\n    }\n    if (a\
    \ > max) {\n      return 1;\n    }\n    if (b < min) {\n      return -1;\n   \
    \ }\n    if (b > max) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp7b5_o23v.ts(15,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmp7b5_o23v.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    '
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpelqyybw3.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(strange_sort_list(right)).concat([min]).concat(max);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy081v0rm.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpy081v0rm.js:15:22)\n    at strange_sort_list (/tmp/tmpy081v0rm.js:20:43)\n\
    \    at strange_sort_list (/tmp/tmpy081v0rm.js:20:43)\n    at strange_sort_list\
    \ (/tmp/tmpy081v0rm.js:20:43)\n    at strange_sort_list (/tmp/tmpy081v0rm.js:20:43)\n\
    \    at strange_sort_list (/tmp/tmpy081v0rm.js:20:43)\n    at strange_sort_list\
    \ (/tmp/tmpy081v0rm.js:20:43)\n    at strange_sort_list (/tmp/tmpy081v0rm.js:20:43)\n\
    \    at strange_sort_list (/tmp/tmpy081v0rm.js:20:43)\n    at strange_sort_list\
    \ (/tmp/tmpy081v0rm.js:20:43)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  return lst.sort((a,\
    \ b) => {\n    if (a === min) {\n      return -1;\n    }\n    if (b === min) {\n\
    \      return 1;\n    }\n    if (a === max) {\n      return 1;\n    }\n    if\
    \ (b === max) {\n      return -1;\n    }\n    return a - b;\n  });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmph2al9xnh.js:36:12)\n    at Object.<anonymous> (/tmp/tmph2al9xnh.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return\
    \ -1;\n    }\n    return 0;\n  });\n  return sorted;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpy4jql2tq.js:27:12)\n    at Object.<anonymous> (/tmp/tmpy4jql2tq.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpe4ruroae.js:19:12)\n    at Object.<anonymous> (/tmp/tmpe4ruroae.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = lst[0];\n  const max = lst.reduce((max, num) => Math.max(max, num),\
    \ -Infinity);\n  const min = Math.min(min, max);\n  const max = Math.max(min,\
    \ max);\n  const middle = Math.round(lst.length / 2);\n\n  return strange_sort_list(\n\
    \    lst.slice(0, middle).concat([min, max]).concat(lst.slice(middle))\n  );\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpv_4k8ylq.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmpv_4k8ylq.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../tmp/tmpv_4k8ylq.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmpv_4k8ylq.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8tzebxol.js:16\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:16:22)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let\
    \ i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n\
    \    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  const result: number[]\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    const val = lst[i];\n    if (val\
    \ < min) {\n      result.push(val);\n    } else if (val > max) {\n      result.push(val);\n\
    \    } else {\n      result.push(min);\n      result.push(max);\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  1,\n  4,\n  1,\n  4,\n  1,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpzt4yu4mp.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzt4yu4mp.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 4, 1, 4,\n    1, 4, 1, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnf2sghxh.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const minValue = lst[0];\n  const maxValue = lst[lst.length\
    \ - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n\
    \  const sortedList = lst.slice(minIndex, maxIndex + 1);\n  return sortedList;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmplqjkmlpe.js:22:12)\n    at Object.<anonymous> (/tmp/tmplqjkmlpe.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let result = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpwn0585j4.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwn0585j4.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp1msq865r.js:31:12)\n    at Object.<anonymous> (/tmp/tmp1msq865r.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min = min + 1;\n  }\n  result.push(max);\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpbq6k7c3m.js:33:12)\n    at Object.<anonymous> (/tmp/tmpbq6k7c3m.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpelqyybw3.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnf2sghxh.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a,\
    \ b) => a - b);\n  return sorted_list;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpo6zbyxx0.js:19:12)\n    at Object.<anonymous> (/tmp/tmpo6zbyxx0.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_SAFE_INTEGER;\n\
    \  let max: number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      sorted.push(min);\n    } else if (lst[i]\
    \ > max) {\n      sorted.push(max);\n    } else {\n      sorted.push(lst[i]);\n\
    \    }\n  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp7555tkt3.js:39:12)\n    at Object.<anonymous> (/tmp/tmp7555tkt3.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  return strange_sort_list(\n    lst.slice(0, mid).concat([max, min,\
    \ ...lst.slice(mid)])\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpogr1kus1.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpogr1kus1.js:15:22)\n    at strange_sort_list (/tmp/tmpogr1kus1.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpogr1kus1.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpogr1kus1.js:18:12)\n    at strange_sort_list (/tmp/tmpogr1kus1.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpogr1kus1.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpogr1kus1.js:18:12)\n    at strange_sort_list (/tmp/tmpogr1kus1.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpogr1kus1.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpogr1kus1.js:18:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333790
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplumhmx5d.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnf2sghxh.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor((min + max) / 2);\n  return lst.sort((a, b) => {\n   \
    \ if (a < mid) {\n      return -1;\n    }\n    if (b < mid) {\n      return 1;\n\
    \    }\n    if (a > mid) {\n      return 1;\n    }\n    if (b > mid) {\n     \
    \ return -1;\n    }\n    return 0;\n  });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp6p_t19es.js:34:12)\n    at Object.<anonymous> (/tmp/tmp6p_t19es.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = [];\n  let min = lst[0];\n  let max\
    \ = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n\
    \      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n  \
    \  }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n\
    \      sorted.push(min);\n    } else if (lst[i] > max) {\n      sorted.push(max);\n\
    \    } else {\n      sorted.push(lst[i]);\n    }\n  }\n  return sorted;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpadjdisc3.js:39:12)\n    at Object.<anonymous> (/tmp/tmpadjdisc3.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let\
    \ i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n\
    \    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  const middle = Math.floor((min\
    \ + max) / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const\
    \ right = strange_sort_list(lst.slice(middle));\n  return left.concat(right).sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpt2mfhwk1.js:27\n    const left = strange_sort_list(lst.slice(0,\
    \ middle));\n                                       ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at Array.slice (<anonymous>)\n    at strange_sort_list\
    \ (/tmp/tmpt2mfhwk1.js:27:40)\n    at strange_sort_list (/tmp/tmpt2mfhwk1.js:27:18)\n\
    \    at strange_sort_list (/tmp/tmpt2mfhwk1.js:27:18)\n    at strange_sort_list\
    \ (/tmp/tmpt2mfhwk1.js:27:18)\n    at strange_sort_list (/tmp/tmpt2mfhwk1.js:27:18)\n\
    \    at strange_sort_list (/tmp/tmpt2mfhwk1.js:27:18)\n    at strange_sort_list\
    \ (/tmp/tmpt2mfhwk1.js:27:18)\n    at strange_sort_list (/tmp/tmpt2mfhwk1.js:27:18)\n\
    \    at strange_sort_list (/tmp/tmpt2mfhwk1.js:27:18)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const\
    \ middle = Math.floor((len - 1) / 2);\n  const left = strange_sort_list(lst.slice(0,\
    \ middle));\n  const right = strange_sort_list(lst.slice(middle));\n  return mergeSort(left,\
    \ right, minValue, maxValue);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpcxq39l7f.ts(21,10): error TS2304: Cannot find name ''mergeSort''.

    '
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp60lasxv7.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n\n  const minIndex\
    \ = lst.findIndex((value) => value < minValue);\n  const maxIndex = lst.findIndex((value)\
    \ => value > maxValue);\n\n  const minValueIndex = lst.findIndex((value) => value\
    \ === minValue);\n  const maxValueIndex = lst.findIndex((value) => value === maxValue);\n\
    \n  const minValueIndex = lst.findIndex((value) => value === minValue);\n  const\
    \ maxValueIndex = lst.findIndex((value) => value === maxValue);\n\n  const minValueIndex\
    \ = lst.findIndex((value) => value === minValue);\n  const maxValueIndex = lst.findIndex((value)\
    \ => value === maxValue);\n\n  const minValueIndex = lst.findIndex((value) =>\
    \ value === minValue);\n  const maxValueIndex = lst.findIndex((value) => value\
    \ === maxValue);\n\n  const minValueIndex = lst.findIndex((value) => value ===\
    \ minValue);\n  const maxValueIndex = lst.findIndex((value) => value === maxValue);\n\
    \n  const minValueIndex = lst.findIndex((value) => value === minValue);\n  const\
    \ maxValueIndex = lst.findIndex((value) => value === maxValue);\n\n  const minValueIndex\
    \ = lst.findIndex((value) => value === minValue);\n  const maxValueIndex = lst.findIndex((value)\
    \ => value === maxValue);\n\n  const minValueIndex = lst.findIndex((value) =>\
    \ value === minValue);\n  const maxValueIndex = lst.findIndex((value) => value\
    \ === maxValue);\n\n  const minValueIndex = lst.findIndex((value) => value ===\
    \ minValue);\n  const maxValueIndex = lst.findIndex((value) => value === maxValue);\n\
    \n  const minValueIndex = lst.findIndex((value) => value === minValue);\n  const\
    \ maxValueIndex = lst.findIndex((value) => value === maxValue);\n\n  const minValueIndex\
    \ = lst.findIndex((value) => value === minValue);\n  const maxValueIndex = lst.findIndex((value)\
    \ => value === maxValue);\n\n  const minValueIndex = lst.findIndex((value) =>\
    \ value === minValue);\n  const maxValueIndex = lst.findIndex((value) => value\
    \ === maxValue);\n\n  const minValueIndex = lst.findIndex((value) => value ===\
    \ minValue);\n  const maxValueIndex = lst.findIndex((value) => value === maxValue);\n\
    \n  const minValueIndex = lst.findIndex((value) => value === minValue);\n  const\
    \ maxValueIndex = lst.findIndex((value) => value === maxValue);\n\n  const minValueIndex\
    \ = lst.findIndex((value) => value === minValue);\n  const maxValueIndex = lst.findIndex((value)\
    \ => value === maxValue);\n\n  const minValueIndex = lst.findIndex((\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp_9jkbkbl.ts(68,9): error TS1005: '')'' expected.

    ../../../../tmp/tmp_9jkbkbl.ts(85,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpe4ruroae.js:19:12)\n    at Object.<anonymous> (/tmp/tmpe4ruroae.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const mid = Math.floor((min + max) / 2);\n  const left\
    \ = strange_sort_list(lst.slice(0, mid));\n  const right = strange_sort_list(lst.slice(mid));\n\
    \  return left.concat(right, min);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpf6fo3az3.js:15\n    const [min, max] = lst;\n                 \
    \      ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.values\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpf6fo3az3.js:15:24)\n    at\
    \ strange_sort_list (/tmp/tmpf6fo3az3.js:18:19)\n    at strange_sort_list (/tmp/tmpf6fo3az3.js:18:19)\n\
    \    at strange_sort_list (/tmp/tmpf6fo3az3.js:18:19)\n    at strange_sort_list\
    \ (/tmp/tmpf6fo3az3.js:18:19)\n    at strange_sort_list (/tmp/tmpf6fo3az3.js:18:19)\n\
    \    at strange_sort_list (/tmp/tmpf6fo3az3.js:18:19)\n    at strange_sort_list\
    \ (/tmp/tmpf6fo3az3.js:18:19)\n    at strange_sort_list (/tmp/tmpf6fo3az3.js:18:19)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp1msq865r.js:31:12)\n    at Object.<anonymous> (/tmp/tmp1msq865r.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [min, max] = lst;\n  const mid = Math.floor((min + max) / 2);\n  const left\
    \ = strange_sort_list(lst.slice(0, mid));\n  const right = strange_sort_list(lst.slice(mid));\n\
    \  return left.concat(right, min);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2o67289_.js:15\n    const [min, max] = lst;\n                 \
    \      ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.values\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp2o67289_.js:15:24)\n    at\
    \ strange_sort_list (/tmp/tmp2o67289_.js:18:19)\n    at strange_sort_list (/tmp/tmp2o67289_.js:18:19)\n\
    \    at strange_sort_list (/tmp/tmp2o67289_.js:18:19)\n    at strange_sort_list\
    \ (/tmp/tmp2o67289_.js:18:19)\n    at strange_sort_list (/tmp/tmp2o67289_.js:18:19)\n\
    \    at strange_sort_list (/tmp/tmp2o67289_.js:18:19)\n    at strange_sort_list\
    \ (/tmp/tmp2o67289_.js:18:19)\n    at strange_sort_list (/tmp/tmp2o67289_.js:18:19)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333793
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor((min\
    \ + max) / 2);\n  return strange_sort_list(lst.filter(x => x !== mid)) + [mid]\
    \ + strange_sort_list(lst.filter(x => x !== mid));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpl4d4zx2i.ts(18,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = lst[0];\n  const max = lst[lst.length - 1];\n  const middle = Math.floor((min\
    \ + max) / 2);\n  return strange_sort_list(\n    lst.slice(0, middle).concat(\n\
    \      strange_sort_list(\n        lst.slice(middle, lst.length)\n      ),\n \
    \     lst.slice(middle)\n    )\n  );\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpregn03dv.js:18\n    return strange_sort_list(lst.slice(0, middle).concat(strange_sort_list(lst.slice(middle,\
    \ lst.length)), lst.slice(middle)));\n                                 ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at strange_sort_list\
    \ (/tmp/tmpregn03dv.js:18:34)\n    at strange_sort_list (/tmp/tmpregn03dv.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpregn03dv.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpregn03dv.js:18:12)\n    at strange_sort_list (/tmp/tmpregn03dv.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpregn03dv.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpregn03dv.js:18:12)\n    at strange_sort_list (/tmp/tmpregn03dv.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpregn03dv.js:18:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpe4ruroae.js:19:12)\n    at Object.<anonymous> (/tmp/tmpe4ruroae.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_VALUE;\n\
    \  let max: number = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max)\
    \ {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      sorted.push(min);\n    } else if (lst[i] > max)\
    \ {\n      sorted.push(max);\n    } else {\n      sorted.push(lst[i]);\n    }\n\
    \  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmplzrclw5n.js:39:12)\n    at Object.<anonymous> (/tmp/tmplzrclw5n.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [min, max] = lst;\n  const minIndex = lst.indexOf(min);\n  const maxIndex =\
    \ lst.indexOf(max);\n  const minIndex2 = lst.indexOf(min);\n  const maxIndex2\
    \ = lst.indexOf(max);\n  const minIndex3 = lst.indexOf(min);\n  const maxIndex3\
    \ = lst.indexOf(max);\n  const minIndex4 = lst.indexOf(min);\n  const maxIndex4\
    \ = lst.indexOf(max);\n  const minIndex5 = lst.indexOf(min);\n  const maxIndex5\
    \ = lst.indexOf(max);\n  const minIndex6 = lst.indexOf(min);\n  const maxIndex6\
    \ = lst.indexOf(max);\n  const minIndex7 = lst.indexOf(min);\n  const maxIndex7\
    \ = lst.indexOf(max);\n  const minIndex8 = lst.indexOf(min);\n  const maxIndex8\
    \ = lst.indexOf(max);\n  const minIndex9 = lst.indexOf(min);\n  const maxIndex9\
    \ = lst.indexOf(max);\n  const minIndex10 = lst.indexOf(min);\n  const maxIndex10\
    \ = lst.indexOf(max);\n  const minIndex11 = lst.indexOf(min);\n  const maxIndex11\
    \ = lst.indexOf(max);\n  const minIndex12 = lst.indexOf(min);\n  const maxIndex12\
    \ = lst.indexOf(max);\n  const minIndex13 = lst.indexOf(min);\n  const maxIndex13\
    \ = lst.indexOf(max);\n  const minIndex14 = lst.indexOf(min);\n  const maxIndex14\
    \ = lst.indexOf(max);\n  const minIndex15 = lst.indexOf(min);\n  const maxIndex15\
    \ = lst.indexOf(max);\n  const minIndex16 = lst.indexOf(min);\n  const maxIndex16\
    \ = lst.indexOf(max);\n  const minIndex17 = lst.indexOf(min);\n  const maxIndex17\
    \ = lst.indexOf(max);\n  const minIndex18 = lst.indexOf(min);\n  const maxIndex18\
    \ = lst.indexOf(max);\n  const minIndex19 = lst.indexOf(min);\n  const maxIndex19\
    \ = lst.indexOf(max);\n  const minIndex20 = lst.indexOf(min);\n  const maxIndex20\
    \ = lst.indexOf(max);\n  const minIndex21 = lst.indexOf(min);\n  const maxIndex21\
    \ = lst.indexOf(max);\n  const minIndex22 = lst.indexOf(min);\n  const maxIndex22\
    \ = lst.indexOf(max);\n  const minIndex23 = lst.indexOf(min);\n  const maxIndex23\
    \ = lst.indexOf(max);\n  const minIndex24 = lst.indexOf(min);\n  const maxIndex24\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpm4z6wwxr.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp60lasxv7.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let middle = Math.floor(lst.length / 2);\n  let left = lst.slice(0, middle);\n\
    \  let right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min]).concat([max]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvcdpteei.js:12\n    let min = Math.min(...lst);\n             \
    \      ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpvcdpteei.js:12:20)\n    at strange_sort_list (/tmp/tmpvcdpteei.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpvcdpteei.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpvcdpteei.js:17:24)\n    at strange_sort_list (/tmp/tmpvcdpteei.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpvcdpteei.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpvcdpteei.js:17:24)\n    at strange_sort_list (/tmp/tmpvcdpteei.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpvcdpteei.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpvcdpteei.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333793
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = lst[0];\n  const max = lst.reduce((max, num) => Math.max(max, num),\
    \ -Infinity);\n  const min = Math.min(min, max);\n  const max = Math.max(min,\
    \ max);\n\n  return lst.sort((a, b) => a - b).map((num) => {\n    if (num ===\
    \ min) {\n      return min;\n    }\n    if (num === max) {\n      return max;\n\
    \    }\n    return num;\n  });\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp18j9ju9r.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmp18j9ju9r.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../tmp/tmp18j9ju9r.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmp18j9ju9r.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1660333792
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  return strange_sort_list(\n    lst.slice(0, middle)\n      .concat(strange_sort_list(lst.slice(middle)))\n\
    \      .concat(strange_sort_list(lst.slice(0, middle)))\n      .concat(\n    \
    \    strange_sort_list(lst.slice(middle, lst.length))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(0, middle))\n      )\n      .concat(\n  \
    \      strange_sort_list(lst.slice(middle, lst.length))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(0, middle))\n      )\n      .concat(\n       \
    \ strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpd6z6avr9.ts(103,8): error TS1003: Identifier expected.

    ../../../../tmp/tmpd6z6avr9.ts(104,1): error TS1005: '','' expected.

    ../../../../tmp/tmpd6z6avr9.ts(104,9): error TS1005: '','' expected.

    ../../../../tmp/tmpd6z6avr9.ts(121,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333792
- exit_code: -5
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  let\
    \ min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result = [];\n  while (min < max) {\n\
    \    result.push(min);\n    min = Math.min(min, max);\n    max = Math.max(min,\
    \ max);\n  }\n  result.push(max);\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffe03b7bdd0\n 1: 0x2b4f41588727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b4f4211d28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b4f41a57f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b4f41be9760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b4f41bf10cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b4f41ddb7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b4f4173a7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333795
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = lst[0];\n  let max = lst[0];\n  for (let\
    \ i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n\
    \    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpi40k48hr.js:31:12)\n    at Object.<anonymous> (/tmp/tmpi40k48hr.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpelqyybw3.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min: number = lst[0];\n  const max: number =\
    \ lst[lst.length - 1];\n  for (let i = 1; i < lst.length; i++) {\n    const current:\
    \ number = lst[i];\n    if (current < min) {\n      min = current;\n    } else\
    \ if (current > max) {\n      max = current;\n    }\n  }\n  const result: number[]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    const current: number =\
    \ lst[i];\n    if (current < min) {\n      result.push(min);\n      min = current;\n\
    \    } else if (current > max) {\n      result.push(max);\n      max = current;\n\
    \    } else {\n      result.push(current);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpsluv_zsh.ts(17,7): error TS2588: Cannot assign to ''min''
    because it is a constant.

    ../../../../tmp/tmpsluv_zsh.ts(19,7): error TS2588: Cannot assign to ''max'' because
    it is a constant.

    ../../../../tmp/tmpsluv_zsh.ts(27,7): error TS2588: Cannot assign to ''min'' because
    it is a constant.

    ../../../../tmp/tmpsluv_zsh.ts(30,7): error TS2588: Cannot assign to ''max'' because
    it is a constant.

    '
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor((min + max) / 2);\n  let left = lst.slice(0, mid);\n \
    \ let right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_tmu35e4.js:12\n    let min = Math.min(...lst);\n             \
    \      ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n\
    \    at strange_sort_list (/tmp/tmp_tmu35e4.js:12:20)\n    at strange_sort_list\
    \ (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333793
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3]\
    \ = [min2, max2];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5]\
    \ = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7]\
    \ = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9]\
    \ = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11]\
    \ = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13,\
    \ max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const\
    \ [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n\
    \  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n\
    \  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n\
    \  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n\
    \  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n\
    \  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n\
    \  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n\
    \  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n\
    \  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n\
    \  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n\
    \  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n\
    \  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n\
    \  const [min39, max39] = [min38, max38];\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpm26hd3dn.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(left)).concat(right).concat(strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9t86c4rg.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp9t86c4rg.js:12:22)\n    at\
    \ strange_sort_list (/tmp/tmp9t86c4rg.js:17:24)\n    at strange_sort_list (/tmp/tmp9t86c4rg.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp9t86c4rg.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp9t86c4rg.js:17:24)\n    at strange_sort_list (/tmp/tmp9t86c4rg.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp9t86c4rg.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp9t86c4rg.js:17:24)\n    at strange_sort_list (/tmp/tmp9t86c4rg.js:17:24)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333793
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp60lasxv7.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpe4ruroae.js:19:12)\n    at Object.<anonymous> (/tmp/tmpe4ruroae.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3]\
    \ = [min2, max2];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5]\
    \ = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7]\
    \ = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9]\
    \ = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11]\
    \ = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13,\
    \ max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const\
    \ [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n\
    \  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n\
    \  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n\
    \  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n\
    \  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n\
    \  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n\
    \  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n\
    \  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n\
    \  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n\
    \  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n\
    \  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n\
    \  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n\
    \  const [min39, max39] = [min38, max38];\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp27thtdd1.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor((min + max) / 2);\n  return lst.sort((a, b) => a > b\
    \ ? 1 : a < b ? -1 : 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmprzt8okzt.js:20:12)\n    at Object.<anonymous> (/tmp/tmprzt8okzt.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3]\
    \ = [min2, max2];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5]\
    \ = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7]\
    \ = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9]\
    \ = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11]\
    \ = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13,\
    \ max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const\
    \ [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n\
    \  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n\
    \  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n\
    \  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n\
    \  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n\
    \  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n\
    \  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n\
    \  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n\
    \  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n\
    \  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n\
    \  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n\
    \  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n\
    \  const [min39, max39] = [min38, max38];\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpm26hd3dn.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.ceil(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8s1qimxh.js:16\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp8s1qimxh.js:16:22)\n    at strange_sort_list (/tmp/tmp8s1qimxh.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmp8s1qimxh.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmp8s1qimxh.js:21:12)\n    at strange_sort_list (/tmp/tmp8s1qimxh.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmp8s1qimxh.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmp8s1qimxh.js:21:12)\n    at strange_sort_list (/tmp/tmp8s1qimxh.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmp8s1qimxh.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmp8s1qimxh.js:21:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplumhmx5d.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8tzebxol.js:16\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:16:22)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor((min + max) / 2);\n  let left = lst.slice(0, mid);\n \
    \ let right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_tmu35e4.js:12\n    let min = Math.min(...lst);\n             \
    \      ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n\
    \    at strange_sort_list (/tmp/tmp_tmu35e4.js:12:20)\n    at strange_sort_list\
    \ (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333793
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpe4ruroae.js:19:12)\n    at Object.<anonymous> (/tmp/tmpe4ruroae.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max]).concat([min]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmuvudsg3.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpmuvudsg3.js:12:22)\n    at strange_sort_list (/tmp/tmpmuvudsg3.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpmuvudsg3.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpmuvudsg3.js:17:24)\n    at strange_sort_list (/tmp/tmpmuvudsg3.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpmuvudsg3.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpmuvudsg3.js:17:24)\n    at strange_sort_list (/tmp/tmpmuvudsg3.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpmuvudsg3.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpmuvudsg3.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333793
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8tzebxol.js:16\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:16:22)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnf2sghxh.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  return strange_sort_list(\n    lst.slice(0, middle)\n      .concat(strange_sort_list(lst.slice(middle)))\n\
    \      .concat(strange_sort_list(lst.slice(0, middle)))\n      .concat(\n    \
    \    strange_sort_list(lst.slice(middle, lst.length))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(0, middle))\n      )\n      .concat(\n  \
    \      strange_sort_list(lst.slice(middle, lst.length))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(0, middle))\n      )\n      .concat(\n       \
    \ strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n\
    \        strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n     \
    \   strange_sort_list(lst.slice(middle))\n      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n\
    \      )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n     \
    \ )\n      .concat(\n        strange_sort_list(lst.slice(middle))\n      )\n \
    \     .\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpd6z6avr9.ts(103,8): error TS1003: Identifier expected.

    ../../../../tmp/tmpd6z6avr9.ts(104,1): error TS1005: '','' expected.

    ../../../../tmp/tmpd6z6avr9.ts(104,9): error TS1005: '','' expected.

    ../../../../tmp/tmpd6z6avr9.ts(121,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprgbtqt_4.js:16\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:16:22)\n    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333793
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpk8n0132v.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpk8n0132v.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333794
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnf2sghxh.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min = min + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max\
    \ = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpd0aygf80.js:36:12)\n    at Object.<anonymous> (/tmp/tmpd0aygf80.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333795
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp1msq865r.js:31:12)\n    at Object.<anonymous> (/tmp/tmp1msq865r.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp1msq865r.js:31:12)\n    at Object.<anonymous> (/tmp/tmp1msq865r.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const minIndex\
    \ = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n  const\
    \ middleIndex = Math.floor((minIndex + maxIndex) / 2);\n  const middleValue =\
    \ lst[middleIndex];\n  const leftList = lst.slice(0, middleIndex);\n  const rightList\
    \ = lst.slice(middleIndex + 1);\n  return strange_sort_list(leftList).concat([middleValue],\
    \ strange_sort_list(rightList));\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp2297grjo.js:28:12)\n    at Object.<anonymous> (/tmp/tmp2297grjo.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333795
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnf2sghxh.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let middle = Math.floor(lst.length / 2);\n  let left = lst.slice(0, middle);\n\
    \  let right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min]).concat([max]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvcdpteei.js:12\n    let min = Math.min(...lst);\n             \
    \      ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpvcdpteei.js:12:20)\n    at strange_sort_list (/tmp/tmpvcdpteei.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpvcdpteei.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpvcdpteei.js:17:24)\n    at strange_sort_list (/tmp/tmpvcdpteei.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpvcdpteei.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpvcdpteei.js:17:24)\n    at strange_sort_list (/tmp/tmpvcdpteei.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpvcdpteei.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpvcdpteei.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333793
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp60lasxv7.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i\
    \ < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  const result = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n \
    \   } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmptbptslmd.ts(20,7): error TS2588: Cannot assign to ''min''
    because it is a constant.

    ../../../../tmp/tmptbptslmd.ts(23,7): error TS2588: Cannot assign to ''max'' because
    it is a constant.

    '
  timestamp: 1660333795
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted_lst = lst.slice();\n  sorted_lst.sort((a,\
    \ b) => a - b);\n  return sorted_lst;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpgrg87iw9.js:19:12)\n    at Object.<anonymous> (/tmp/tmpgrg87iw9.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplumhmx5d.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n\n  const minIndex\
    \ = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n\n  const\
    \ sortedList = lst.slice();\n\n  if (minIndex > maxIndex) {\n    sortedList.sort((a,\
    \ b) => a - b);\n  } else {\n    sortedList.sort((a, b) => b - a);\n  }\n\n  return\
    \ sortedList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpvucfu6kb.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvucfu6kb.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = lst[0];\n  let max = lst[0];\n  for (let\
    \ i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n\
    \    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n \
    \     result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n\
    \    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp_3kr_azt.js:39:12)\n    at Object.<anonymous> (/tmp/tmp_3kr_azt.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_VALUE;\n\
    \  let max: number = Number.MIN_VALUE;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max)\
    \ {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] < min) {\n      min = lst[i];\n    }\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpc06lye9a.ts(140,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpk8n0132v.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpk8n0132v.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333794
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, num) => Math.max(max, num), -Infinity);\n\
    \  const min = Math.min(min, max);\n  const max = Math.max(min, max);\n\n  return\
    \ lst.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpp68de4ai.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmpp68de4ai.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../tmp/tmpp68de4ai.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmpp68de4ai.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp1msq865r.js:31:12)\n    at Object.<anonymous> (/tmp/tmp1msq865r.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpelqyybw3.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const [min, max] = lst;\n\n  const min = Math.min(min, max);\n  const max =\
    \ Math.max(min, max);\n\n  return strange_sort_list(\n    lst\n      .filter((item)\
    \ => item !== min)\n      .concat(\n        lst\n          .filter((item) => item\
    \ !== max)\n          .map((item) => item - min)\n      )\n  );\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpcn_o2e1v.ts(16,10): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmpcn_o2e1v.ts(16,15): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../tmp/tmpcn_o2e1v.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmpcn_o2e1v.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpf7znqvkm.js:31:12)\n    at Object.<anonymous> (/tmp/tmpf7znqvkm.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  return [min, ...strange_sort_list(lst.slice(0, middle)), max, ...strange_sort_list(lst.slice(middle))];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphn0e911n.js:18\n    return [min, ...strange_sort_list(lst.slice(0,\
    \ middle)), max, ...strange_sort_list(lst.slice(middle))];\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmphn0e911n.js:18:5)\n\
    \    at strange_sort_list (/tmp/tmphn0e911n.js:18:70)\n    at strange_sort_list\
    \ (/tmp/tmphn0e911n.js:18:70)\n    at strange_sort_list (/tmp/tmphn0e911n.js:18:70)\n\
    \    at strange_sort_list (/tmp/tmphn0e911n.js:18:70)\n    at strange_sort_list\
    \ (/tmp/tmphn0e911n.js:18:70)\n    at strange_sort_list (/tmp/tmphn0e911n.js:18:70)\n\
    \    at strange_sort_list (/tmp/tmphn0e911n.js:18:70)\n    at strange_sort_list\
    \ (/tmp/tmphn0e911n.js:18:70)\n    at strange_sort_list (/tmp/tmphn0e911n.js:18:70)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpitpq79jt.js:16\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpitpq79jt.js:16:22)\n    at strange_sort_list (/tmp/tmpitpq79jt.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpitpq79jt.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpitpq79jt.js:21:48)\n    at strange_sort_list (/tmp/tmpitpq79jt.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpitpq79jt.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpitpq79jt.js:21:48)\n    at strange_sort_list (/tmp/tmpitpq79jt.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmpitpq79jt.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmpitpq79jt.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [min, max] = lst;\n  const [minIndex, maxIndex] = lst.findIndex((item) => item\
    \ === min);\n  const [maxIndex, minIndex] = lst.findIndex((item) => item === max);\n\
    \  const [minValue, maxValue] = lst.sort((a, b) => a - b);\n  const [minIndex,\
    \ maxIndex] = lst.findIndex((item) => item === minValue);\n  const [maxIndex,\
    \ minIndex] = lst.findIndex((item) => item === maxValue);\n  const [minValue,\
    \ maxValue] = lst.sort((a, b) => b - a);\n  const [minIndex, maxIndex] = lst.findIndex((item)\
    \ => item === minValue);\n  const [maxIndex, minIndex] = lst.findIndex((item)\
    \ => item === maxValue);\n  const [minValue, maxValue] = lst.sort((a, b) => a\
    \ - b);\n  const [minIndex, maxIndex] = lst.findIndex((item) => item === minValue);\n\
    \  const [maxIndex, minIndex] = lst.findIndex((item) => item === maxValue);\n\
    \  const [minValue, maxValue] = lst.sort((a, b) => b - a);\n  const [minIndex,\
    \ maxIndex] = lst.findIndex((item) => item === minValue);\n  const [maxIndex,\
    \ minIndex] = lst.findIndex((item) => item === maxValue);\n  const [minValue,\
    \ maxValue] = lst.sort((a, b) => a - b);\n  const [minIndex, maxIndex] = lst.findIndex((item)\
    \ => item === minValue);\n  const [maxIndex, minIndex] = lst.findIndex((item)\
    \ => item === maxValue);\n  const [minValue, maxValue] = lst.sort((a, b) => b\
    \ - a);\n  const [minIndex, maxIndex] = lst.findIndex((item) => item === minValue);\n\
    \  const [maxIndex, minIndex] = lst.findIndex((item) => item === maxValue);\n\
    \  const [minValue, maxValue] = lst.sort((a, b) => a - b);\n  const [minIndex,\
    \ maxIndex] = lst.findIndex((item) => item === minValue);\n  const [maxIndex,\
    \ minIndex] = lst.findIndex((item) => item === maxValue);\n  const [minValue,\
    \ maxValue] = lst.sort((a, b) => b - a);\n  const [minIndex, maxIndex] = lst.findIndex((item)\
    \ => item === minValue);\n  const [maxIndex, minIndex] = lst.findIndex((item)\
    \ => item === maxValue);\n  const [minValue, maxValue] = lst.sort((a, b) => a\
    \ - b);\n  const [minIndex, max\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp7sk1zaeb.ts(44,1): error TS1005: '','' expected.

    ../../../../tmp/tmp7sk1zaeb.ts(44,9): error TS1005: '','' expected.

    ../../../../tmp/tmp7sk1zaeb.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333796
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, x) => Math.max(max, x), 0);\n\
    \  const min = Math.min(min, max);\n  const max = Math.max(min, max);\n  return\
    \ lst.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpw89pajei.ts(15,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmpw89pajei.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../tmp/tmpw89pajei.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmpw89pajei.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min]).concat(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwm1xgdo3.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpwm1xgdo3.js:12:22)\n    at strange_sort_list (/tmp/tmpwm1xgdo3.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpwm1xgdo3.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpwm1xgdo3.js:17:24)\n    at strange_sort_list (/tmp/tmpwm1xgdo3.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpwm1xgdo3.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpwm1xgdo3.js:17:24)\n    at strange_sort_list (/tmp/tmpwm1xgdo3.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpwm1xgdo3.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpwm1xgdo3.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = Number.MAX_SAFE_INTEGER;\n  let max:\
    \ number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i =\
    \ min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjbw9e4zv.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjbw9e4zv.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: -6
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const [min, max] = lst;\n\n  const mid = Math.floor((min + max) / 2);\n\n  return\
    \ strange_sort_list(\n    lst\n      .slice(mid - 1, mid)\n      .concat(\n  \
    \      lst\n          .slice(0, mid - 1)\n          .concat(\n            lst\n\
    \              .slice(mid + 1, lst.length)\n              .concat(\n         \
    \       lst\n                  .slice(0, mid)\n                  .concat(\n  \
    \                  lst\n                      .slice(mid + 1, lst.length)\n  \
    \                    .concat(\n                        lst\n                 \
    \         .slice(mid - 1, mid)\n                          .concat(\n         \
    \                   lst\n                              .slice(mid + 1, lst.length)\n\
    \                              .concat(\n                                lst\n\
    \                                  .slice(0, mid - 1)\n                      \
    \            .concat(\n                                    lst\n             \
    \                         .slice(mid + 1, lst.length)\n                      \
    \                .concat(\n                                        lst\n     \
    \                                     .slice(mid - 1, mid)\n                 \
    \                         .reverse()\n                                      )\n\
    \                                  )\n                              )\n      \
    \                    )\n                      )\n                  )\n       \
    \       )\n          )\n      )\n  );\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "\n<--- Last few GCs --->\n\n[26871:0x5637393ebad0]     4822 ms: Mark-sweep\
    \ 4411.4 (4444.6) -> 4411.4 (4444.6) MB, 762.4 / 0.0 ms  (average mu = 0.421,\
    \ current mu = 0.271) allocation failure; scavenge might not succeed\n\n\n<---\
    \ JS stacktrace --->\n\nFATAL ERROR: Reached heap limit Allocation failed - JavaScript\
    \ heap out of memory\n 1: 0x2b57a7ea1e79 node::Abort() [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b57a7d85a06 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > node::SPrintFImpl<int&, char const*>(char const*, int&, char const*&&) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b57a8252932 v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*,\
    \ bool) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b57a8252c0f\
    \ v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*,\
    \ bool) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b57a8419236\
    \  [/home/a.guha/.conda/envs/polyglot/"
  stdout: ''
  timestamp: 1660333801
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max],\
    \ strange_sort_list(left));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpbu3ikrpk.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpbu3ikrpk.js:12:22)\n    at\
    \ strange_sort_list (/tmp/tmpbu3ikrpk.js:17:24)\n    at strange_sort_list (/tmp/tmpbu3ikrpk.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpbu3ikrpk.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpbu3ikrpk.js:17:24)\n    at strange_sort_list (/tmp/tmpbu3ikrpk.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpbu3ikrpk.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpbu3ikrpk.js:17:24)\n    at strange_sort_list (/tmp/tmpbu3ikrpk.js:17:24)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphw1psu1h.js:16\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmphw1psu1h.js:16:22)\n    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmphw1psu1h.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(max, val), min);\n\
    \  const min = lst.reduce((min, val) => Math.min(min, val), min);\n  const max\
    \ = lst.reduce((max, val) => Math.max(max, val), max);\n  const min = lst.reduce((min,\
    \ val) => Math.min(min, val), min);\n  const max = lst.reduce((max, val) => Math.max(max,\
    \ val), max);\n  const min = lst.reduce((min, val) => Math.min(min, val), min);\n\
    \  const max = lst.reduce((max, val) => Math.max(max, val), max);\n  const min\
    \ = lst.reduce((min, val) => Math.min(min, val), min);\n  const max = lst.reduce((max,\
    \ val) => Math.max(max, val), max);\n  const min = lst.reduce((min, val) => Math.min(min,\
    \ val), min);\n  const max = lst.reduce((max, val) => Math.max(max, val), max);\n\
    \  const min = lst.reduce((min, val) => Math.min(min, val), min);\n  const max\
    \ = lst.reduce((max, val) => Math.max(max, val), max);\n  const min = lst.reduce((min,\
    \ val) => Math.min(min, val), min);\n  const max = lst.reduce((max, val) => Math.max(max,\
    \ val), max);\n  const min = lst.reduce((min, val) => Math.min(min, val), min);\n\
    \  const max = lst.reduce((max, val) => Math.max(max, val), max);\n  const min\
    \ = lst.reduce((min, val) => Math.min(min, val), min);\n  const max = lst.reduce((max,\
    \ val) => Math.max(max, val), max);\n  const min = lst.reduce((min, val) => Math.min(min,\
    \ val), min);\n  const max = lst.reduce((max, val) => Math.max(max, val), max);\n\
    \  const min = lst.reduce((min, val) => Math.min(min, val), min);\n  const max\
    \ = lst.reduce((max, val) => Math.max(max, val), max);\n  const min = lst.reduce((min,\
    \ val) => Math.min(min, val), min);\n  const max = lst.reduce((max, val) => Math.max(max,\
    \ val), max);\n  const min = lst.reduce((min, val) => Math.min(min, val), min);\n\
    \  const max = lst.reduce((max, val) => Math.max(max, val), max);\n  const min\
    \ = lst.reduce((min, val) => Math.min(min, val), min);\n  const max = lst.reduce((max,\
    \ val) => Math.max(max, val), max);\n  const min = lst.reduce((min, val) => Math.min(min,\
    \ val), min);\n  const max = lst\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp2roehl76.ts(64,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ [min, max] = lst;\n  const mid = Math.floor((min + max) / 2);\n  return strange_sort_list(\n\
    \    lst.slice(0, mid).concat([mid], lst.slice(mid))\n  );\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzq2depas.js:17\n    return strange_sort_list(lst.slice(0, mid).concat([mid],\
    \ lst.slice(mid)));\n                                              ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at strange_sort_list (/tmp/tmpzq2depas.js:17:47)\n\
    \    at strange_sort_list (/tmp/tmpzq2depas.js:17:12)\n    at strange_sort_list\
    \ (/tmp/tmpzq2depas.js:17:12)\n    at strange_sort_list (/tmp/tmpzq2depas.js:17:12)\n\
    \    at strange_sort_list (/tmp/tmpzq2depas.js:17:12)\n    at strange_sort_list\
    \ (/tmp/tmpzq2depas.js:17:12)\n    at strange_sort_list (/tmp/tmpzq2depas.js:17:12)\n\
    \    at strange_sort_list (/tmp/tmpzq2depas.js:17:12)\n    at strange_sort_list\
    \ (/tmp/tmpzq2depas.js:17:12)\n    at strange_sort_list (/tmp/tmpzq2depas.js:17:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333797
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3, max3]\
    \ = [min2, max2];\n  const [min4, max4] = [min3, max3];\n  const [min5, max5]\
    \ = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7, max7]\
    \ = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9, max9]\
    \ = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11, max11]\
    \ = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const [min13,\
    \ max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n  const\
    \ [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n\
    \  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n\
    \  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n\
    \  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n\
    \  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n\
    \  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n\
    \  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n\
    \  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n\
    \  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n\
    \  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n\
    \  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n\
    \  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n\
    \  const [min39, max39] = [min38, max38];\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpm26hd3dn.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n\
    \  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmps6tuwy3p.js:25:12)\n    at Object.<anonymous> (/tmp/tmps6tuwy3p.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333797
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvortdc8w.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333798
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp60lasxv7.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right).concat([max]));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpqxdq5m40.js:19\n    const left = lst.slice(0, middle);\n      \
    \               ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpqxdq5m40.js:19:22)\n    at\
    \ strange_sort_list (/tmp/tmpqxdq5m40.js:21:50)\n    at strange_sort_list (/tmp/tmpqxdq5m40.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpqxdq5m40.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpqxdq5m40.js:21:50)\n    at strange_sort_list (/tmp/tmpqxdq5m40.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmpqxdq5m40.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmpqxdq5m40.js:21:50)\n    at strange_sort_list (/tmp/tmpqxdq5m40.js:21:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333799
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const mid =\
    \ Math.floor((min + max) / 2);\n  const left = lst.slice(0, mid);\n  const right\
    \ = lst.slice(mid);\n  return strange_sort_list(left).concat(mid, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp3utaepwp.js:18\n    const mid = Math.floor((min + max) / 2);\n\
    \                     ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmp3utaepwp.js:18:22)\n\
    \    at strange_sort_list (/tmp/tmp3utaepwp.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmp3utaepwp.js:21:12)\n    at strange_sort_list (/tmp/tmp3utaepwp.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmp3utaepwp.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmp3utaepwp.js:21:12)\n    at strange_sort_list (/tmp/tmp3utaepwp.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmp3utaepwp.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmp3utaepwp.js:21:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333799
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpk8n0132v.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpk8n0132v.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpk8n0132v.js:20:48)\n    at strange_sort_list (/tmp/tmpk8n0132v.js:20:48)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333794
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphw1psu1h.js:16\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmphw1psu1h.js:16:22)\n    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmphw1psu1h.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(val, max), min);\n\
    \  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n\
    \  const middle = Math.floor((minIndex + maxIndex) / 2);\n  const left = lst.slice(0,\
    \ minIndex);\n  const right = lst.slice(minIndex, maxIndex);\n  return strange_sort_list(left).concat(middle,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpnv9b5aww.js:27:12)\n    at Object.<anonymous> (/tmp/tmpnv9b5aww.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 0,\
    \ 0 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333799
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp60lasxv7.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((acc, x) => Math.max(acc, x), 0);\n\
    \  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n\
    \  const middle = Math.floor((minIndex + maxIndex) / 2);\n  return strange_sort_list(lst.slice(0,\
    \ middle)) + lst.slice(middle, lst.length);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp3akaek_g.ts(20,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1660333799
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplumhmx5d.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max]).concat([min]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmuvudsg3.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpmuvudsg3.js:12:22)\n    at strange_sort_list (/tmp/tmpmuvudsg3.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpmuvudsg3.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpmuvudsg3.js:17:24)\n    at strange_sort_list (/tmp/tmpmuvudsg3.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpmuvudsg3.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpmuvudsg3.js:17:24)\n    at strange_sort_list (/tmp/tmpmuvudsg3.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpmuvudsg3.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpmuvudsg3.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333793
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8tzebxol.js:16\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:16:22)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len < 2) {\n    return\
    \ lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  1,\n  3,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n\
    \  2,\n  3\n]\n    at test (/tmp/tmpndv7gjpk.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpndv7gjpk.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 2, 1,\n    3, 3, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333799
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpe4ruroae.js:19:12)\n    at Object.<anonymous> (/tmp/tmpe4ruroae.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp60lasxv7.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min += 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max -=\
    \ 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpdvjv1ejm.js:36:12)\n    at Object.<anonymous> (/tmp/tmpdvjv1ejm.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333799
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i\
    \ < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  const result = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n \
    \   } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmptbptslmd.ts(20,7): error TS2588: Cannot assign to ''min''
    because it is a constant.

    ../../../../tmp/tmptbptslmd.ts(23,7): error TS2588: Cannot assign to ''max'' because
    it is a constant.

    '
  timestamp: 1660333795
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor((min\
    \ + max) / 2);\n  return strange_sort_list(lst.filter(x => x !== mid).concat(mid,\
    \ strange_sort_list(lst.filter(x => x !== mid).slice(0, -1))));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp90fr6r_a.js:18\n    return strange_sort_list(lst.filter(x => x\
    \ !== mid).concat(mid, strange_sort_list(lst.filter(x => x !== mid).slice(0, -1))));\n\
    \                                               ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at /tmp/tmp90fr6r_a.js:18:48\n    at Array.filter (<anonymous>)\n\
    \    at strange_sort_list (/tmp/tmp90fr6r_a.js:18:34)\n    at strange_sort_list\
    \ (/tmp/tmp90fr6r_a.js:18:12)\n    at strange_sort_list (/tmp/tmp90fr6r_a.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmp90fr6r_a.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmp90fr6r_a.js:18:12)\n    at strange_sort_list (/tmp/tmp90fr6r_a.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmp90fr6r_a.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmp90fr6r_a.js:18:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333799
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  while (min < max) {\n    result.push(min);\n\
    \    min = lst[min];\n    max = lst[max];\n  }\n  result.push(max);\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpajgb1hh0.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpajgb1hh0.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, undefined\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333800
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, cur) => Math.max(max, cur), -Infinity);\n\
    \  const min = Math.min(min, max);\n  const max = Math.max(min, max);\n  const\
    \ middle = Math.round(lst.length / 2);\n  return strange_sort_list(\n    lst.slice(0,\
    \ middle).concat(\n      lst.slice(middle).reverse(),\n      lst.slice(0, middle),\n\
    \    ),\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp58pe_4it.ts(15,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmp58pe_4it.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../tmp/tmp58pe_4it.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmp58pe_4it.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1660333799
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpe4ruroae.js:19:12)\n    at Object.<anonymous> (/tmp/tmpe4ruroae.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] > max) {\n\
    \      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmptg9g3udi.js:39:12)\n    at Object.<anonymous> (/tmp/tmptg9g3udi.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333799
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  while ((min2 === min)\
    \ && (max2 === max)) {\n    [min, max] = [max, min + max];\n    [min2, max2] =\
    \ [max, min + max];\n  }\n  return [min, max, min2, max2];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp00ybelur.ts(18,6): error TS2588: Cannot assign to ''min''
    because it is a constant.

    ../../../../tmp/tmp00ybelur.ts(18,11): error TS2588: Cannot assign to ''max''
    because it is a constant.

    ../../../../tmp/tmp00ybelur.ts(19,6): error TS2588: Cannot assign to ''min2''
    because it is a constant.

    ../../../../tmp/tmp00ybelur.ts(19,12): error TS2588: Cannot assign to ''max2''
    because it is a constant.

    '
  timestamp: 1660333799
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = Number.MAX_SAFE_INTEGER;\n  let max:\
    \ number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n\
    \    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n     \
    \ result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp_zot_9ui.js:39:12)\n    at Object.<anonymous> (/tmp/tmp_zot_9ui.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333800
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const mid = Math.floor((min + max) / 2);\n  return strange_sort_list(\n\
    \    lst\n      .filter(x => x !== mid)\n      .concat(\n        lst\n       \
    \   .filter(x => x !== min)\n          .concat(\n            lst\n           \
    \   .filter(x => x !== max)\n              .concat(\n                lst\n   \
    \               .filter(x => x !== mid)\n                  .concat(\n        \
    \            lst\n                      .filter(x => x !== min)\n            \
    \          .concat(\n                        lst\n                          .filter(x\
    \ => x !== max)\n                          .concat(\n                        \
    \    lst\n                              .filter(x => x !== mid)\n            \
    \                  .concat(\n                                lst\n           \
    \                       .filter(x => x !== min)\n                            \
    \      .concat(\n                                    lst\n                   \
    \                   .filter(x => x !== max)\n                                \
    \      .concat(\n                                        lst\n               \
    \                           .filter(x => x !== mid)\n                        \
    \                  .concat(\n                                            lst\n\
    \                                              .filter(x => x !== min)\n     \
    \                                         .concat(\n                         \
    \                       lst\n                                                \
    \  .filter(x => x !== max)\n                                                 \
    \ .concat(\n                                                    lst\n        \
    \                                              .filter(x => x !== mid)\n     \
    \                                                 .concat(\n                 \
    \                                       lst\n                                \
    \                          .filter(x => x !== min)\n                         \
    \                                 .concat(\n                                 \
    \                           lst\n                                            \
    \                  .filter(x => x !== max)\n                                 \
    \                             .reverse()\n                                   \
    \                           .reverse()\n                                     \
    \                         .reverse()\n                                       \
    \                       .reverse()\n                                         \
    \                     .reverse()\n                                           \
    \                   .reverse()\n                                             \
    \                 .reverse()\n                                               \
    \               .reverse()\n                                                 \
    \             .reverse()\n                                                   \
    \           .reverse()\n                                                     \
    \         .reverse()\n                                                       \
    \       .reverse()\n                                                         \
    \     .reverse()\n                                                           \
    \   .reverse()\n                                                             \
    \ .reverse()\n                                                              .reverse()\n\
    \                                                              .reverse()\n  \
    \                                                            .reverse()\n    \
    \                                                          .reverse()\n      \
    \                                                        .reverse()\n        \
    \                                                      .reverse()\n          \
    \                                                    .reverse()\n            \
    \                                                  .reverse()\n              \
    \                                                .reverse()\n                \
    \                                              .reverse()\n                  \
    \                                            .reverse()\n                    \
    \                                          .reverse()\n                      \
    \                                        .reverse()\n                        \
    \                                      .reverse()\n                          \
    \                                    .reverse()\n                            \
    \                                  .reverse()\n                              \
    \                                .reverse()\n                                \
    \                              .reverse()\n                                  \
    \                            .reverse()\n                                    \
    \                          .reverse()\n                                      \
    \                        .reverse()\n                                        \
    \                      .reverse()\n                                          \
    \                    .reverse()\n                                            \
    \                  .reverse()\n                                              \
    \                .reverse()\n                                                \
    \              .reverse()\n                                                  \
    \            .reverse()\n                                                    \
    \          .reverse()\n                                                      \
    \        .reverse()\n                                                        \
    \      .reverse()\n                                                          \
    \    .reverse()\n                                                            \
    \  .reverse()\n                                                              .reverse()\n\
    \                                                              .reverse()\n  \
    \                                                            .reverse()\n    \
    \                                                          .reverse()\n      \
    \                                                        .reverse()\n        \
    \                                                      .reverse()\n          \
    \                                                    .reverse()\n            \
    \                                                  .reverse()\n              \
    \                                                .reverse()\n                \
    \                                              .reverse()\n                  \
    \                                            .reverse()\n                    \
    \                                          .reverse()\n                      \
    \                                        .reverse()\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp3ax4a8d5.ts(122,1): error TS1005: '','' expected.

    ../../../../tmp/tmp3ax4a8d5.ts(122,9): error TS1005: '','' expected.

    ../../../../tmp/tmp3ax4a8d5.ts(139,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333799
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  for\
    \ (let i = 1; i < len; i++) {\n    const currentValue = lst[i];\n    if (currentValue\
    \ < minValue) {\n      lst[i] = minValue;\n    } else if (currentValue > maxValue)\
    \ {\n      lst[i] = maxValue;\n    }\n  }\n  return lst;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpqv8nf8yi.js:32:12)\n    at Object.<anonymous> (/tmp/tmpqv8nf8yi.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333800
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  let min = 0;\n  let max = len - 1;\n  while (min < max) {\n    const\
    \ mid = Math.floor((min + max) / 2);\n    if (lst[mid] > lst[max]) {\n      max\
    \ = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  const result =\
    \ new Array(len);\n  for (let i = 0; i < len; i++) {\n    result[i] = lst[min];\n\
    \    min++;\n    if (min === max) {\n      min = 0;\n      max--;\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  undefined,\n\
    \  undefined,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n\
    \  2,\n  3\n]\n    at test (/tmp/tmp96k1g4xm.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp96k1g4xm.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, undefined,\
    \ undefined, undefined ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333800
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp60lasxv7.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp60lasxv7.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor((min\
    \ + max) / 2);\n  return strange_sort_list(lst.filter(x => x !== mid)) + [mid]\
    \ + strange_sort_list(lst.filter(x => x !== mid));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpzgcen09v.ts(18,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1660333800
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvortdc8w.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333798
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpe4ruroae.js:19:12)\n    at Object.<anonymous> (/tmp/tmpe4ruroae.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((acc, curr) => Math.max(acc, curr),\
    \ min);\n  const min = Math.min(min, max);\n  const max = Math.max(min, max);\n\
    \  const middle = Math.floor((min + max) / 2);\n  return strange_sort_list(lst.filter(x\
    \ => x <= middle).concat(\n    lst.filter(x => x > middle)\n  ));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmps5vqdcti.ts(15,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmps5vqdcti.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../tmp/tmps5vqdcti.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmps5vqdcti.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1660333800
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let result = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpwn0585j4.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwn0585j4.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n\n  return [min, max, ...strange_sort_list(lst.slice(0, middle)), ...strange_sort_list(lst.slice(middle))];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpk4edqlhp.js:18\n    return [min, max, ...strange_sort_list(lst.slice(0,\
    \ middle)), ...strange_sort_list(lst.slice(middle))];\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at strange_sort_list (/tmp/tmpk4edqlhp.js:18:5)\n\
    \    at strange_sort_list (/tmp/tmpk4edqlhp.js:18:70)\n    at strange_sort_list\
    \ (/tmp/tmpk4edqlhp.js:18:70)\n    at strange_sort_list (/tmp/tmpk4edqlhp.js:18:70)\n\
    \    at strange_sort_list (/tmp/tmpk4edqlhp.js:18:70)\n    at strange_sort_list\
    \ (/tmp/tmpk4edqlhp.js:18:70)\n    at strange_sort_list (/tmp/tmpk4edqlhp.js:18:70)\n\
    \    at strange_sort_list (/tmp/tmpk4edqlhp.js:18:70)\n    at strange_sort_list\
    \ (/tmp/tmpk4edqlhp.js:18:70)\n    at strange_sort_list (/tmp/tmpk4edqlhp.js:18:70)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333800
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor(lst.length / 2);\n  let left = lst.slice(0, mid);\n  let\
    \ right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat([min]).concat(strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9du0c5r5.js:12\n    let min = Math.min(...lst);\n             \
    \      ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp9du0c5r5.js:12:20)\n    at strange_sort_list (/tmp/tmp9du0c5r5.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp9du0c5r5.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp9du0c5r5.js:17:24)\n    at strange_sort_list (/tmp/tmp9du0c5r5.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp9du0c5r5.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp9du0c5r5.js:17:24)\n    at strange_sort_list (/tmp/tmp9du0c5r5.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp9du0c5r5.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp9du0c5r5.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333800
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = [];\n  let min = 0;\n  let max = lst.length\
    \ - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n\
    \    if (lst[mid] > lst[max]) {\n      max = mid - 1;\n    } else {\n      min\
    \ = mid + 1;\n    }\n  }\n  while (min >= 0) {\n    sorted.push(lst[min--]);\n\
    \  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp956yqnh7.js:32:12)\n    at Object.<anonymous> (/tmp/tmp956yqnh7.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333801
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprgbtqt_4.js:16\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:16:22)\n    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333793
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  return lst.sort((a,\
    \ b) => {\n    if (a === min) {\n      return -1;\n    }\n    if (b === min) {\n\
    \      return 1;\n    }\n    if (a === max) {\n      return 1;\n    }\n    if\
    \ (b === max) {\n      return -1;\n    }\n    return 0;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpn063y_f6.js:36:12)\n    at Object.<anonymous> (/tmp/tmpn063y_f6.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333801
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, num) => Math.max(max, num), -Infinity);\n\
    \  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n\
    \  const middle = Math.floor((minIndex + maxIndex) / 2);\n  return lst.sort((a,\
    \ b) => {\n    if (a === min) {\n      return -1;\n    }\n    if (b === min) {\n\
    \      return 1;\n    }\n    if (a === max) {\n      return 1;\n    }\n    if\
    \ (b === max) {\n      return -1;\n    }\n    if (a < b) {\n      return -1;\n\
    \    }\n    if (a > b) {\n      return 1;\n    }\n    return middle;\n  });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpab7b5ke0.js:45:12)\n    at Object.<anonymous> (/tmp/tmpab7b5ke0.js:55:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333802
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n\
    \  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmps6tuwy3p.js:25:12)\n    at Object.<anonymous> (/tmp/tmps6tuwy3p.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333797
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const\
    \ middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n  const\
    \ right = lst.slice(middle);\n  return strange_sort_list(left).concat(maxValue,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmph_ao5rne.js:18\n    const middle = Math.floor(len / 2);\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmph_ao5rne.js:18:25)\n\
    \    at strange_sort_list (/tmp/tmph_ao5rne.js:21:53)\n    at strange_sort_list\
    \ (/tmp/tmph_ao5rne.js:21:53)\n    at strange_sort_list (/tmp/tmph_ao5rne.js:21:53)\n\
    \    at strange_sort_list (/tmp/tmph_ao5rne.js:21:53)\n    at strange_sort_list\
    \ (/tmp/tmph_ao5rne.js:21:53)\n    at strange_sort_list (/tmp/tmph_ao5rne.js:21:53)\n\
    \    at strange_sort_list (/tmp/tmph_ao5rne.js:21:53)\n    at strange_sort_list\
    \ (/tmp/tmph_ao5rne.js:21:53)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333802
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor((min + max) / 2);\n  return strange_sort_list(\n   \
    \ lst.filter(x => x !== mid).concat(mid, strange_sort_list(lst.filter(x => x !==\
    \ mid)))\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_db3zwzi.js:19\n    return strange_sort_list(lst.filter(x => x\
    \ !== mid).concat(mid, strange_sort_list(lst.filter(x => x !== mid))));\n    \
    \                                           ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at /tmp/tmp_db3zwzi.js:19:48\n    at Array.filter (<anonymous>)\n\
    \    at strange_sort_list (/tmp/tmp_db3zwzi.js:19:34)\n    at strange_sort_list\
    \ (/tmp/tmp_db3zwzi.js:19:69)\n    at strange_sort_list (/tmp/tmp_db3zwzi.js:19:69)\n\
    \    at strange_sort_list (/tmp/tmp_db3zwzi.js:19:69)\n    at strange_sort_list\
    \ (/tmp/tmp_db3zwzi.js:19:69)\n    at strange_sort_list (/tmp/tmp_db3zwzi.js:19:69)\n\
    \    at strange_sort_list (/tmp/tmp_db3zwzi.js:19:69)\n    at strange_sort_list\
    \ (/tmp/tmp_db3zwzi.js:19:69)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333803
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvortdc8w.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333798
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprgbtqt_4.js:16\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:16:22)\n    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333793
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const minValue = Math.min(...lst);\n  const maxValue = Math.max(...lst);\n\n\
    \  const sortedList = [minValue];\n  for (let i = minValue; i < maxValue; i++)\
    \ {\n    sortedList.push(i);\n  }\n\n  for (let i = maxValue; i > minValue; i--)\
    \ {\n    sortedList.push(i);\n  }\n\n  return sortedList;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  3,\n  4,\n  3,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n\
    \  2,\n  3\n]\n    at test (/tmp/tmp9_vjojre.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9_vjojre.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 2, 3,\n    4, 3, 2\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333803
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  const middle\
    \ = Math.floor(lst.length / 2);\n  const left = lst\n    .slice(0, middle)\n \
    \   .sort((a, b) => a - b);\n  const right = lst\n    .slice(middle)\n    .sort((a,\
    \ b) => b - a);\n\n  return left.concat(right, min);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  4,\n  3,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n\
    ]\n    at test (/tmp/tmpinxik182.js:29:12)\n    at Object.<anonymous> (/tmp/tmpinxik182.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 3, 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660333803
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.floor(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprgbtqt_4.js:16\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:16:22)\n    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmprgbtqt_4.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmprgbtqt_4.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333793
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpelqyybw3.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpelqyybw3.js:20:48)\n    at strange_sort_list (/tmp/tmpelqyybw3.js:20:48)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8tzebxol.js:16\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:16:22)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n\
    \    at strange_sort_list (/tmp/tmp8tzebxol.js:21:50)\n    at strange_sort_list\
    \ (/tmp/tmp8tzebxol.js:21:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpe4ruroae.js:19:12)\n    at Object.<anonymous> (/tmp/tmpe4ruroae.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp1msq865r.js:31:12)\n    at Object.<anonymous> (/tmp/tmp1msq865r.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ [min, max] = lst;\n\n  const min = Math.min(min, max);\n  const max = Math.max(min,\
    \ max);\n\n  const middle = Math.floor((min + max) / 2);\n\n  const left = strange_sort_list(lst.slice(0,\
    \ middle));\n  const right = strange_sort_list(lst.slice(middle));\n\n  return\
    \ left.concat(right).concat([min]);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp2hnet4m2.ts(16,10): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmp2hnet4m2.ts(16,15): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../tmp/tmp2hnet4m2.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmp2hnet4m2.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1660333802
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  let\
    \ min = lst[0];\n  let max = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  const result = [];\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n    }\
    \ else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpkv64ktf1.js:42:12)\n    at Object.<anonymous> (/tmp/tmpkv64ktf1.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333803
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpvaoil51w.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvaoil51w.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333803
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ [min, max] = lst;\n  const [min2, max2] = [max, min];\n  for (let i = min; i\
    \ <= max; i++) {\n    for (let j = min2; j <= max2; j++) {\n      if (i === j)\
    \ {\n        continue;\n      }\n      if (j > i) {\n        swap(j - 1, i);\n\
    \      }\n    }\n  }\n  return lst;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpopjoa6is.ts(23,9): error TS2304: Cannot find name ''swap''.

    '
  timestamp: 1660333803
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp1msq865r.js:31:12)\n    at Object.<anonymous> (/tmp/tmp1msq865r.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let middle = Math.floor(lst.length / 2);\n  let left = lst.slice(0, middle);\n\
    \  let right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([min]).concat(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp94t71564.js:12\n    let min = Math.min(...lst);\n             \
    \      ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp94t71564.js:12:20)\n    at strange_sort_list (/tmp/tmp94t71564.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp94t71564.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp94t71564.js:17:24)\n    at strange_sort_list (/tmp/tmp94t71564.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp94t71564.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp94t71564.js:17:24)\n    at strange_sort_list (/tmp/tmp94t71564.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp94t71564.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp94t71564.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333803
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(max, val), -Infinity);\n\
    \  const min = lst.reduce((min, val) => Math.min(min, val), Infinity);\n  const\
    \ middle = Math.floor((min + max) / 2);\n  return lst.sort((a, b) => {\n    if\
    \ (a < middle) {\n      return -1;\n    }\n    if (b < middle) {\n      return\
    \ 1;\n    }\n    if (a > middle) {\n      return 1;\n    }\n    if (b > middle)\
    \ {\n      return -1;\n    }\n    return 0;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpybyh2voq.ts(15,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmpybyh2voq.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    '
  timestamp: 1660333803
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] > max) {\n\
    \      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmptg9g3udi.js:39:12)\n    at Object.<anonymous> (/tmp/tmptg9g3udi.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333799
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  let\
    \ min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let res = [min];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      res.push(lst[i]);\n    }\n    if (lst[i]\
    \ > max) {\n      res.push(lst[i]);\n    }\n  }\n  res.push(max);\n  return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpu0nci7kg.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu0nci7kg.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4 ],\n\
    \  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333803
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const minValue = lst[0];\n  const maxValue = lst[0];\n  for (let i = 1; i <\
    \ lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n\
    \    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n\n\
    \  const middle = Math.floor((maxValue - minValue) / 2);\n  const sortedList =\
    \ lst.sort((a, b) => a - b);\n  const sortedList2 = sortedList.slice(0, middle).concat(sortedList.slice(middle));\n\
    \  return sortedList2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp7tlzh3qd.ts(20,7): error TS2588: Cannot assign to ''minValue''
    because it is a constant.

    ../../../../tmp/tmp7tlzh3qd.ts(23,7): error TS2588: Cannot assign to ''maxValue''
    because it is a constant.

    '
  timestamp: 1660333803
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(len / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return strange_sort_list(left).concat(max,\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphw1psu1h.js:16\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmphw1psu1h.js:16:22)\n    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n\
    \    at strange_sort_list (/tmp/tmphw1psu1h.js:21:48)\n    at strange_sort_list\
    \ (/tmp/tmphw1psu1h.js:21:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_VALUE;\n\
    \  let max: number = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n\
    \    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n\
    \      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n  \
    \  }\n    sorted.push(lst[i]);\n  }\n  sorted.push(min);\n  sorted.push(max);\n\
    \  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  1,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n\
    \  3\n]\n    at test (/tmp/tmp3valwckw.js:39:12)\n    at Object.<anonymous> (/tmp/tmp3valwckw.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 1, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660333803
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpe4ruroae.js:19:12)\n    at Object.<anonymous> (/tmp/tmpe4ruroae.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnf2sghxh.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpnf2sghxh.js:20:50)\n    at strange_sort_list (/tmp/tmpnf2sghxh.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: -5
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  let\
    \ min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result = [];\n  while (min < max) {\n\
    \    result.push(min);\n    min = Math.min(min, max);\n    max = Math.max(min,\
    \ max);\n  }\n  result.push(max);\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffe03b7bdd0\n 1: 0x2b4f41588727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b4f4211d28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b4f41a57f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b4f41be9760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b4f41bf10cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b4f41ddb7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b4f4173a7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660333795
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i\
    \ < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  const result: number[] = [];\n\
    \  for (let i = 0; i < len; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n\
    \    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n     \
    \ result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpa72dm_ph.ts(20,7): error TS2588: Cannot assign to ''min''
    because it is a constant.

    ../../../../tmp/tmpa72dm_ph.ts(23,7): error TS2588: Cannot assign to ''max'' because
    it is a constant.

    '
  timestamp: 1660333803
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i\
    \ < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  const result = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    const val = lst[i];\n    if (val < min) {\n    \
    \  result.push(val);\n    } else if (val > max) {\n      result.push(val);\n \
    \   } else {\n      result.push(min);\n      result.push(max);\n    }\n  }\n \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpo9f_l0w_.ts(20,7): error TS2588: Cannot assign to ''min''
    because it is a constant.

    ../../../../tmp/tmpo9f_l0w_.ts(23,7): error TS2588: Cannot assign to ''max'' because
    it is a constant.

    '
  timestamp: 1660333803
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len < 2) {\n    return\
    \ lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const mid = Math.ceil(len / 2);\n  const left = lst.slice(0, mid);\n  const\
    \ right = lst.slice(mid);\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  2,\n  4,\n  3,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n\
    \  2,\n  3\n]\n    at test (/tmp/tmpie7tkyj6.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpie7tkyj6.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 2, 4,\n    3, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333803
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp1msq865r.js:31:12)\n    at Object.<anonymous> (/tmp/tmp1msq865r.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(max, val));\n\
    \  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n\
    \  const middle = Math.floor((minIndex + maxIndex) / 2);\n  return [...lst.slice(0,\
    \ minIndex), ...lst.slice(minIndex, middle), ...lst.slice(middle, maxIndex), ...lst.slice(maxIndex)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp2itiwiws.js:25:12)\n    at Object.<anonymous> (/tmp/tmp2itiwiws.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333803
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpf7znqvkm.js:31:12)\n    at Object.<anonymous> (/tmp/tmpf7znqvkm.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor((min + max) / 2);\n  let left = lst.slice(0, mid);\n \
    \ let right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_tmu35e4.js:12\n    let min = Math.min(...lst);\n             \
    \      ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n\
    \    at strange_sort_list (/tmp/tmp_tmu35e4.js:12:20)\n    at strange_sort_list\
    \ (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmp_tmu35e4.js:17:24)\n    at strange_sort_list (/tmp/tmp_tmu35e4.js:17:24)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333793
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max)\
    \ {\n      max = lst[i];\n    }\n  }\n\n  const result = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n \
    \   } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n\
    \    }\n  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpyjmzjzin.ts(20,7): error TS2588: Cannot assign to ''min''
    because it is a constant.

    ../../../../tmp/tmpyjmzjzin.ts(23,7): error TS2588: Cannot assign to ''max'' because
    it is a constant.

    '
  timestamp: 1660333803
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  const middle\
    \ = Math.floor(lst.length / 2);\n\n  const left = lst.slice(0, middle);\n  const\
    \ right = lst.slice(middle);\n\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpitwmu7ab.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpitwmu7ab.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpitwmu7ab.js:20:48)\n    at strange_sort_list (/tmp/tmpitwmu7ab.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpitwmu7ab.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpitwmu7ab.js:20:48)\n    at strange_sort_list (/tmp/tmpitwmu7ab.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpitwmu7ab.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpitwmu7ab.js:20:48)\n    at strange_sort_list (/tmp/tmpitwmu7ab.js:20:48)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333804
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplumhmx5d.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmplumhmx5d.js:20:50)\n    at strange_sort_list (/tmp/tmplumhmx5d.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max)\
    \ {\n      max = lst[i];\n    }\n  }\n  const result = [];\n  while (min < max)\
    \ {\n    result.push(min);\n    min = lst[min];\n    max = lst[max];\n  }\n  result.push(max);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpgvcknlhe.ts(19,7): error TS2588: Cannot assign to ''min''
    because it is a constant.

    ../../../../tmp/tmpgvcknlhe.ts(22,7): error TS2588: Cannot assign to ''max'' because
    it is a constant.

    ../../../../tmp/tmpgvcknlhe.ts(28,5): error TS2588: Cannot assign to ''min'' because
    it is a constant.

    ../../../../tmp/tmpgvcknlhe.ts(29,5): error TS2588: Cannot assign to ''max'' because
    it is a constant.

    '
  timestamp: 1660333804
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[0];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    } else if\
    \ (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n\n  const result\
    \ = [];\n  for (let i = minValue; i <= maxValue; i++) {\n    result.push(i);\n\
    \  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpu0ovznl1.ts(20,7): error TS2588: Cannot assign to ''minValue''
    because it is a constant.

    ../../../../tmp/tmpu0ovznl1.ts(22,7): error TS2588: Cannot assign to ''maxValue''
    because it is a constant.

    '
  timestamp: 1660333804
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp60lasxv7.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min: number = lst[0];\n  const max: number =\
    \ lst[lst.length - 1];\n  const middle: number = (min + max) / 2;\n  const middle2:\
    \ number = (min + max) / 2;\n\n  if (min === max) {\n    return lst;\n  }\n\n\
    \  if (middle === middle2) {\n    return lst.sort((a, b) => a - b);\n  }\n\n \
    \ return strange_sort_list(lst.sort((a, b) => a - b)).concat(\n    strange_sort_list(lst.sort((a,\
    \ b) => b - a))\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpmd85ansg.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmd85ansg.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333804
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right),\
    \ right.slice(0, middle), min).concat(max);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptp_2_u5q.js:15\n    const left = lst.slice(0, middle);\n      \
    \               ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmptp_2_u5q.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmptp_2_u5q.js:17:24)\n    at strange_sort_list (/tmp/tmptp_2_u5q.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmptp_2_u5q.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmptp_2_u5q.js:17:24)\n    at strange_sort_list (/tmp/tmptp_2_u5q.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmptp_2_u5q.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmptp_2_u5q.js:17:24)\n    at strange_sort_list (/tmp/tmptp_2_u5q.js:17:24)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333805
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp1msq865r.js:31:12)\n    at Object.<anonymous> (/tmp/tmp1msq865r.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let result = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpwn0585j4.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwn0585j4.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpf7znqvkm.js:31:12)\n    at Object.<anonymous> (/tmp/tmpf7znqvkm.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvortdc8w.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmpvortdc8w.js:20:50)\n    at strange_sort_list (/tmp/tmpvortdc8w.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333798
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max],\
    \ strange_sort_list(left));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpbu3ikrpk.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpbu3ikrpk.js:12:22)\n    at\
    \ strange_sort_list (/tmp/tmpbu3ikrpk.js:17:24)\n    at strange_sort_list (/tmp/tmpbu3ikrpk.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpbu3ikrpk.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpbu3ikrpk.js:17:24)\n    at strange_sort_list (/tmp/tmpbu3ikrpk.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmpbu3ikrpk.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmpbu3ikrpk.js:17:24)\n    at strange_sort_list (/tmp/tmpbu3ikrpk.js:17:24)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333796
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp60lasxv7.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list\
    \ (/tmp/tmp60lasxv7.js:20:50)\n    at strange_sort_list (/tmp/tmp60lasxv7.js:20:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333792
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  let\
    \ min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n\
    \    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = min; i <=\
    \ max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpind2ccct.js:34:12)\n    at Object.<anonymous> (/tmp/tmpind2ccct.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333805
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor((min\
    \ + max) / 2);\n  return strange_sort_list(lst.filter(x => x !== mid)) + [mid]\
    \ + strange_sort_list(lst.filter(x => x !== mid));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpzgcen09v.ts(18,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1660333800
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min: number = lst[0];\n  let max: number = lst[0];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  let result: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < min) {\n      result.push(min);\n    } else if (lst[i] > max) {\n\
    \      result.push(max);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmptg9g3udi.js:39:12)\n    at Object.<anonymous> (/tmp/tmptg9g3udi.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333799
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpm2_cj6na.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpm2_cj6na.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpm2_cj6na.js:20:48)\n    at strange_sort_list (/tmp/tmpm2_cj6na.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpm2_cj6na.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpm2_cj6na.js:20:48)\n    at strange_sort_list (/tmp/tmpm2_cj6na.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpm2_cj6na.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpm2_cj6na.js:20:48)\n    at strange_sort_list (/tmp/tmpm2_cj6na.js:20:48)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333805
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  const middle\
    \ = Math.floor(lst.length / 2);\n\n  const left = lst.slice(0, middle);\n  const\
    \ right = lst.slice(middle);\n\n  return strange_sort_list(left).concat(max, strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpitwmu7ab.js:15\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpitwmu7ab.js:15:22)\n    at\
    \ strange_sort_list (/tmp/tmpitwmu7ab.js:20:48)\n    at strange_sort_list (/tmp/tmpitwmu7ab.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpitwmu7ab.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpitwmu7ab.js:20:48)\n    at strange_sort_list (/tmp/tmpitwmu7ab.js:20:48)\n\
    \    at strange_sort_list (/tmp/tmpitwmu7ab.js:20:48)\n    at strange_sort_list\
    \ (/tmp/tmpitwmu7ab.js:20:48)\n    at strange_sort_list (/tmp/tmpitwmu7ab.js:20:48)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333804
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let mid = Math.floor(lst.length / 2);\n  let left = lst.slice(0, mid);\n  let\
    \ right = lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat([min]).concat(right.concat(strange_sort_list(left)));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppq793t6j.js:12\n    let min = Math.min(...lst);\n             \
    \      ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmppq793t6j.js:12:20)\n    at strange_sort_list (/tmp/tmppq793t6j.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmppq793t6j.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmppq793t6j.js:17:24)\n    at strange_sort_list (/tmp/tmppq793t6j.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmppq793t6j.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmppq793t6j.js:17:24)\n    at strange_sort_list (/tmp/tmppq793t6j.js:17:24)\n\
    \    at strange_sort_list (/tmp/tmppq793t6j.js:17:24)\n    at strange_sort_list\
    \ (/tmp/tmppq793t6j.js:17:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333805
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i\
    \ < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  const res = [min];\n  for (let\
    \ i = min; i <= max; i++) {\n    res.push(lst[i]);\n  }\n  return res;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp46g17wut.ts(20,7): error TS2588: Cannot assign to ''min''
    because it is a constant.

    ../../../../tmp/tmp46g17wut.ts(23,7): error TS2588: Cannot assign to ''max'' because
    it is a constant.

    '
  timestamp: 1660333805
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted = lst.slice();\n  sorted.sort((a, b) =>\
    \ a - b);\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpe4ruroae.js:19:12)\n    at Object.<anonymous> (/tmp/tmpe4ruroae.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, x) => Math.max(max, x), 0);\n\
    \  const min = Math.max(min, 0);\n  const max = Math.min(max, lst.length - 1);\n\
    \  const middle = Math.floor((max - min) / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle + 1);\n  return strange_sort_list(left).concat(right).concat([min]).concat(\n\
    \    strange_sort_list(right)\n  );\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpudf_80zg.ts(15,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmpudf_80zg.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../tmp/tmpudf_80zg.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmpudf_80zg.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1660333805
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const min = lst[0];\n  const max = lst[len - 1];\n  const mid =\
    \ Math.floor((min + max) / 2);\n  const left = lst.slice(0, mid);\n  const right\
    \ = lst.slice(mid);\n  return strange_sort_list(left).concat([min], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpn9vdtj2j.js:18\n    const mid = Math.floor((min + max) / 2);\n\
    \                     ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmpn9vdtj2j.js:18:22)\n\
    \    at strange_sort_list (/tmp/tmpn9vdtj2j.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpn9vdtj2j.js:21:12)\n    at strange_sort_list (/tmp/tmpn9vdtj2j.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmpn9vdtj2j.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpn9vdtj2j.js:21:12)\n    at strange_sort_list (/tmp/tmpn9vdtj2j.js:21:12)\n\
    \    at strange_sort_list (/tmp/tmpn9vdtj2j.js:21:12)\n    at strange_sort_list\
    \ (/tmp/tmpn9vdtj2j.js:21:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333805
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_SAFE_INTEGER;\n\
    \  let max: number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      sorted.push(min);\n    } else if (lst[i]\
    \ > max) {\n      sorted.push(max);\n    } else {\n      sorted.push(lst[i]);\n\
    \    }\n  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp7555tkt3.js:39:12)\n    at Object.<anonymous> (/tmp/tmp7555tkt3.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333789
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\
    \  const result = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp1wwl1jdq.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1wwl1jdq.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333805
- exit_code: 1
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor((min\
    \ + max) / 2);\n  return strange_sort_list(\n    lst.filter(x => x !== mid).concat(mid).concat(strange_sort_list(\n\
    \      lst.filter(x => x !== mid).slice(0, mid).concat(strange_sort_list(\n  \
    \      lst.filter(x => x !== mid).slice(mid)\n      ))\n    ))\n  );\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmple05t_ug.js:18\n    return strange_sort_list(lst.filter(x => x\
    \ !== mid).concat(mid).concat(strange_sort_list(lst.filter(x => x !== mid).slice(0,\
    \ mid).concat(strange_sort_list(lst.filter(x => x !== mid).slice(mid))))));\n\
    \                                        ^\n\nRangeError: Maximum call stack size\
    \ exceeded\n    at /tmp/tmple05t_ug.js:18:41\n    at Array.filter (<anonymous>)\n\
    \    at strange_sort_list (/tmp/tmple05t_ug.js:18:34)\n    at strange_sort_list\
    \ (/tmp/tmple05t_ug.js:18:12)\n    at strange_sort_list (/tmp/tmple05t_ug.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmple05t_ug.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmple05t_ug.js:18:12)\n    at strange_sort_list (/tmp/tmple05t_ug.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmple05t_ug.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmple05t_ug.js:18:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333805
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const\
    \ min = lst[0];\n  const max = lst.reduce((max, num) => Math.max(max, num), min);\n\
    \  const min = Math.min(min, max);\n  const max = Math.max(max, min);\n\n  return\
    \ lst.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpz8sahcoo.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmpz8sahcoo.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../tmp/tmpz8sahcoo.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''min''.

    ../../../../tmp/tmpz8sahcoo.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1660333805
- exit_code: 2
  program: "//Given array of integers, return array in strange order.\n// Strange\
    \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1,\
    \ 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5,\
    \ 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  const len = lst.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const minValue = lst[0];\n  const maxValue = lst[0];\n  for (let\
    \ i = 1; i < len; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n\
    \    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n \
    \ const sortedList = [minValue];\n  for (let i = len - 1; i > 0; i--) {\n    if\
    \ (lst[i] < minValue) {\n      sortedList.push(minValue);\n      minValue = lst[i];\n\
    \    } else {\n      sortedList.push(maxValue);\n      maxValue = lst[i];\n  \
    \  }\n  }\n  sortedList.push(maxValue);\n  return sortedList;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp4vi59e1c.ts(20,7): error TS2588: Cannot assign to ''minValue''
    because it is a constant.

    ../../../../tmp/tmp4vi59e1c.ts(23,7): error TS2588: Cannot assign to ''maxValue''
    because it is a constant.

    ../../../../tmp/tmp4vi59e1c.ts(30,7): error TS2588: Cannot assign to ''minValue''
    because it is a constant.

    ../../../../tmp/tmp4vi59e1c.ts(33,7): error TS2588: Cannot assign to ''maxValue''
    because it is a constant.

    '
  timestamp: 1660333805
