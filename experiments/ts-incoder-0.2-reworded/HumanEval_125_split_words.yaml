name: HumanEval_125_split_words
language: ts
prompt: "//Given a string of words, return an array of words split on whitespace,\
  \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
  // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
  Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n//\
  \ 3\nfunction split_words(txt: string): string[]| number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
  \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
  ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
  Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"\
  Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
  aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
  \"),0);\n}\n\ntest();"
completions: ["  let words = txt.trim().split(/\\s+/);\n  if (words.length === 0)\
    \ {\n    return words;\n  }\n  let result: number[] = [];\n  for (let i = 0; i\
    \ < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n\
    \      result.push(word);\n    }\n  }\n  return result;\n}\n", "  const words\
    \ = txt.trim().split(/\\s+/);\n  if (words.length === 0) return 0;\n  if (words.length\
    \ === 1) return words[0];\n  const letters = words.map(w => w.toLowerCase());\n\
    \  const counts = letters.reduce((acc, letter) => {\n    acc[letter] = acc[letter]\
    \ + 1 || 1;\n    return acc;\n  }, {});\n  const oddLetters = Object.keys(counts).filter(k\
    \ => counts[k] % 2 === 1);\n  return oddLetters.length ? oddLetters : letters;\n\
    }\n", "  return txt.split(/\\s+/);\n}\n", "  const words = txt.trim().split(/\\\
    s+/);\n  if (words.length === 0) {\n    return words;\n  }\n  const noCommaWords\
    \ = words.filter(w => w.indexOf(',') === -1);\n  const noSpaceWords = words.filter(w\
    \ => w.indexOf(' ') === -1);\n  const noLetterWords = words.filter(w => w.toLowerCase()\
    \ !== w.toUpperCase());\n  return noCommaWords.length + noSpaceWords.length +\
    \ noLetterWords.length;\n}\n", "  const words = txt.trim().split(/\\s+/);\n  return\
    \ words.filter(w => w.length > 0).map(w => w.toLowerCase());\n}\n", "  const words\
    \ = txt.split(/\\s+/);\n  return words.filter(word => word.length > 0);\n}\n",
  "  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length\
    \ > 0).map(w => w.toLowerCase());\n}\n", "  const words = txt.trim().split(/\\\
    s+/);\n  return words.filter(word => word.length > 0);\n}\n", "  return txt.split(/\\\
    s+/);\n}\n", "  const words = txt.trim().split(/\\s+/);\n  return words.filter(w\
    \ => w.length > 0).map(w => w.toLowerCase());\n}\n", "  const words = txt.trim().split(/\\\
    s+/);\n  if (words.length === 0) return 0;\n  const letters = words.map(word =>\
    \ word.toLowerCase());\n  const letterCount = letters.reduce((acc, letter) =>\
    \ {\n    if (acc[letter] === undefined) acc[letter] = 1;\n    else acc[letter]++;\n\
    \    return acc;\n  }, {});\n  const oddLetters = Object.keys(letterCount).filter(letter\
    \ => letterCount[letter] % 2 === 1);\n  return oddLetters.length;\n}\n", "  let\
    \ words = txt.trim().split(/\\s+/);\n  if (words.length === 0) return 0;\n  if\
    \ (words.length === 1) return words[0];\n  let letters: number[] = [];\n  for\
    \ (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length\
    \ === 0) continue;\n    if (word.length === 1) return word;\n    let letter =\
    \ word.charCodeAt(0) - 97;\n    if (letters.indexOf(letter) === -1) letters.push(letter);\n\
    \  }\n  return letters.length;\n}\n", "  const words = txt.trim().split(/\\s+/);\n\
    \  return words.filter(w => w.length > 0).map(w => w.toLowerCase());\n}\n", " \
    \ const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) return 0;\n\
    \  if (words.length === 1) return words[0];\n  const lower = words[0].toLowerCase();\n\
    \  const upper = words[0].toUpperCase();\n  const count = words.length;\n  const\
    \ oddCount = count % 2 === 1 ? count : count - 1;\n  const evenCount = count %\
    \ 2 === 0 ? count : count - 1;\n  return oddCount === evenCount ? words : words.slice(0,\
    \ oddCount).concat(words.slice(oddCount, count));\n}\n", "  return txt.split(/\\\
    s+/);\n}\n", "  const words = txt.trim().split(/\\s+/);\n  if (words.length ===\
    \ 0) {\n    return [];\n  }\n  if (words.length === 1) {\n    return words;\n\
    \  }\n  const letters = words[0].split('');\n  const letterCount = letters.length;\n\
    \  const oddLetterCount = (letterCount - 1) % 2;\n  const evenLetterCount = (letterCount\
    \ - 2) % 2;\n  const firstLetterCount = letterCount - oddLetterCount - evenLetterCount;\n\
    \  const firstLetterLetters = letters.slice(0, firstLetterCount);\n  const secondLetterLetters\
    \ = letters.slice(firstLetterCount, letters.length);\n  return [firstLetterLetters,\
    \ secondLetterLetters].join('');\n}\n", "  const words = txt.trim().split(/\\\
    s+/);\n  if (words.length === 0) return 0;\n  if (words.length === 1) return words[0];\n\
    \  return words;\n}\n", "  let words = txt.trim().split(/\\s+/);\n  if (words.length\
    \ === 0) {\n    return words;\n  }\n  let letters = words.map(word => {\n    return\
    \ word.split('').sort().join('');\n  });\n  let odd_letters = letters.filter(letter\
    \ => {\n    return letter !== letter.toUpperCase() && letter !== letter.toLowerCase();\n\
    \  });\n  return odd_letters.length % 2 === 1 ? odd_letters : odd_letters.length\
    \ / 2;\n}\n", "  const words = txt.trim().split(/\\s+/);\n  if (words.length ===\
    \ 0) return 0;\n  if (words.length === 1) return words[0];\n  const letters =\
    \ words[0].toLowerCase();\n  return letters.split('').filter(letter => letter\
    \ !== 'a' && letter !== 'b' && letter !== 'c' && letter !== 'd' && letter !==\
    \ 'e' && letter !== 'f' && letter !== 'g' && letter !== 'h' && letter !== 'i'\
    \ && letter !== 'j' && letter !== 'k' && letter !== 'l' && letter !== 'm' && letter\
    \ !== 'n' && letter !== 'o' && letter !== 'p' && letter !== 'q' && letter !==\
    \ 'r' && letter !== 's' && letter !== 't' && letter !== 'u' && letter !== 'v'\
    \ && letter !== 'w' && letter !== 'x' && letter !== 'y' && letter !== 'z').length;\n\
    }\n", "  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) return\
    \ 0;\n  const letters = words[0].split('');\n  const letterCount = letters.length;\n\
    \  const wordCount = words.length;\n  const oddLetters = letters.filter((letter,\
    \ index) => index % 2 === 1);\n  if (oddLetters.length === letterCount) return\
    \ wordCount;\n  return letterCount;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
