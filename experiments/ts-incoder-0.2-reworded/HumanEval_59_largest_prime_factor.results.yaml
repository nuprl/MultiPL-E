language: ts
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n     \
    \ if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
    \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbproqxi7.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbproqxi7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      for (let j = 2; j < i; j++) {\n        if (n % j === 0) {\n       \
    \   isPrime = false;\n          break;\n        }\n      }\n    }\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n  }\n  if (isPrime) {\n    return factors.length\
    \ ? factors[factors.length - 1] : 1;\n  }\n  return 1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp89t4b7dd.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp89t4b7dd.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  return factors.length ? Math.max(...factors) : -1;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp6f1m8agk.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6f1m8agk.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ let p = n;\n    while (p % i === 0) {\n        ++i;\n    }\n    return i;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpvqtlq5gn.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvqtlq5gn.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = factors.length - 1; j >=\
    \ 0; j--) {\n      if (n % factors[j] === 0) {\n        isPrime = false;\n   \
    \     break;\n      }\n    }\n  }\n  return factors.length ? factors[factors.length\
    \ - 1] : undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp47e94qzk.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp47e94qzk.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    isPrime\
    \ = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n     \
    \   isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n   \
    \   factors.push(i);\n    }\n  }\n  return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n13\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp2ko1egjr.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2ko1egjr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 13,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n     \
    \ if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
    \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbproqxi7.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbproqxi7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex: number = 0;\n  for (let i\
    \ = 2; i <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex =\
    \ factors.length - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpvrzbmkh4.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvrzbmkh4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n \
    \ }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp9tbzx10q.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9tbzx10q.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ p = n;\n  while (p % i === 0) {\n    p /= i;\n    i += 1;\n  }\n  return p;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpvege9_y5.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvege9_y5.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      for (let j = 2; j < i; j++) {\n        if (n % j === 0) {\n       \
    \   isPrime = false;\n          break;\n        }\n      }\n      if (isPrime)\
    \ {\n        factors.push(i);\n      }\n    }\n  }\n  return factors.length ?\
    \ Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp6gblsw_7.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6gblsw_7.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpteulg0hv.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpteulg0hv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: -5
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let i = 2;\n    while (i\
    \ <= maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n       \
    \ maxFactor = i;\n      }\n      i += 1;\n    }\n  }\n  if (factors.length ==\
    \ 0) return 1;\n  return factors[factors.length - 1];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffcbcddffc0\n 1: 0x2acc70348727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2acc70edd28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2acc70817f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2acc709a9760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2acc709b10cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2acc70b9b7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2acc704fa7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738932
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ p = n;\n  while (p % i === 0) {\n    p /= i;\n    i++;\n  }\n  return p;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpl6_8axio.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl6_8axio.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime && n % i === 0) {\n      factors.push(i);\n    }\n    if (!isPrime\
    \ && n % i !== 0) {\n      isPrime = true;\n    }\n  }\n  if (isPrime) {\n   \
    \ return factors[factors.length - 1];\n  }\n  return -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpk89uskgg.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpk89uskgg.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      for (let j = 2; j < i; j++) {\n        if (n % j === 0) {\n       \
    \   isPrime = false;\n          break;\n        }\n      }\n      if (isPrime)\
    \ {\n        factors.push(i);\n      }\n    }\n  }\n  return factors.length ?\
    \ Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp6gblsw_7.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6gblsw_7.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1) {\n\
    \      maxFactor = i;\n    }\n  }\n  return maxFactor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbhicp280.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbhicp280.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 0;\n  let i: number;\n  for (i = 2; i <= n;\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      if (i > maxFactor)\
    \ {\n        maxFactor = i;\n      }\n    }\n  }\n  if (factors.length === 0)\
    \ {\n    return 1;\n  }\n  return maxFactor;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpf5msp0jk.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf5msp0jk.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  return factors.length ? Math.max(...factors) : -1;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factor: number\
    \ = 1;\n  let i: number;\n  for (i = 2; i <= n; i += 1) {\n    if (n % i === 0)\
    \ {\n      factor = i;\n      break;\n    }\n  }\n  return factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpnmtg719u.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnmtg719u.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  let factor: number\
    \ = 1;\n  while (factor <= maxFactor) {\n    if (n % factor === 0) {\n      factors.push(factor);\n\
    \    }\n    maxFactorIndex++;\n    factor += 2;\n  }\n  if (factors.length > maxFactorIndex)\
    \ {\n    return factors[maxFactorIndex];\n  }\n  return maxFactor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpzb3_f73k.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzb3_f73k.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n     \
    \ if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
    \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbproqxi7.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbproqxi7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n  \
    \    n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i == 0) {\n  \
    \          factors.push(i);\n            n /= i;\n        }\n    }\n    return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n / i; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    isPrime = !isPrime;\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpe3rbc_st.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe3rbc_st.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i;\n \
    \     break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_e3jcy0l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_e3jcy0l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n && n % i == 0) {\n    i += 1;\n    factor *= i;\n\
    \  }\n  return factor;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmptz2xab7b.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptz2xab7b.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n   \
    \   n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n \
    \ }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp9z2f7off.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9z2f7off.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738932
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i <= n && n % i == 0) {\n    i += 1;\n    factor *= i;\n\
    \  }\n  return factor;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpy6vv2ndg.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpy6vv2ndg.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpe8znbwfd.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe8znbwfd.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i;\n \
    \     break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_e3jcy0l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_e3jcy0l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factors: number[]\
    \ = [];\n    let isPrime = true;\n    for (let i = 2; i <= n; i++) {\n       \
    \ if (isPrime) {\n            if (n % i === 0) {\n                factors.push(i);\n\
    \                isPrime = false;\n            }\n        }\n        else {\n\
    \            if (n % i !== 0) {\n                isPrime = true;\n           \
    \ }\n        }\n    }\n    return factors[factors.length - 1];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp1yl9omf7.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1yl9omf7.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n     \
    \ if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
    \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbproqxi7.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbproqxi7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphz062blh.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphz062blh.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ p = n;\n  while (p % i === 0) {\n    p /= i;\n    i++;\n  }\n  return p;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpl6_8axio.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl6_8axio.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 2;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpmhoyyhlo.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmhoyyhlo.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    if (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  if\
    \ (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return factors[0];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp277frnfm.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp277frnfm.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738932
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1) {\n\
    \      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  for (let i = factors.length - 1; i >= 0; i--) {\n    if (factors[i] >\
    \ maxFactor) {\n      maxFactor = factors[i];\n    }\n  }\n  return maxFactor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpugijc1sy.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpugijc1sy.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n     \
    \ if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
    \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbproqxi7.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbproqxi7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphy73p899.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphy73p899.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n   \
    \   n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpteulg0hv.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpteulg0hv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2\n  let factor:\
    \ number = n\n  while (i < n && n % i == 0) {\n    i += 1\n    factor *= i\n \
    \ }\n  return factor\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpfi0a14cw.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfi0a14cw.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738932
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    if (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpdn_ighdw.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdn_ighdw.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738932
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    isPrime\
    \ = true;\n    for (let j = 2; j < i; j++) {\n      if (n % j === 0) {\n     \
    \   isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n   \
    \   factors.push(i);\n    }\n  }\n  return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpdjcmo2b0.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdjcmo2b0.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738932
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factor: number\
    \ = 1;\n  let i: number;\n  for (i = 2; i <= Math.sqrt(n); i++) {\n    if (n %\
    \ i === 0) {\n      factor = i;\n      break;\n    }\n  }\n  return factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpmasprfxx.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmasprfxx.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738932
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = factors.length - 1; j >=\
    \ 0; j--) {\n      if (n % factors[j] === 0) {\n        isPrime = false;\n   \
    \     break;\n      }\n    }\n  }\n  return factors.length ? factors[factors.length\
    \ - 1] : 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpr5u9ghp0.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr5u9ghp0.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738932
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpteulg0hv.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpteulg0hv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n   \
    \   n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n  }\n  if (factors.length\
    \ === 0) {\n    return 1;\n  }\n  factors.sort((a, b) => a - b);\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738932
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 0;\n  let i: number;\n  for (i = 2; i <= n;\
    \ ++i) {\n    if (n % i === 0) {\n      factors.push(i);\n      if (i > maxFactor)\
    \ {\n        maxFactor = i;\n      }\n    }\n  }\n  if (factors.length === 0)\
    \ {\n    return 1;\n  }\n  return maxFactor;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpmb6_8ims.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmb6_8ims.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738932
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ p = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      p = i;\n    }\n    i\
    \ += p;\n  }\n  return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp1c18jtd3.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1c18jtd3.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738932
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n / i; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = i * i; j < n; j += i) {\n\
    \      isPrime = false;\n    }\n  }\n  return factors[factors.length - 1];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp6hta8jhq.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6hta8jhq.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738932
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    isPrime\
    \ = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n     \
    \   isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n   \
    \   factors.push(i);\n    }\n  }\n  return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n13\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp2ko1egjr.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2ko1egjr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 13,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    isPrime\
    \ = true;\n    for (let j = 2; j < i; j++) {\n      if (n % j === 0) {\n     \
    \   isPrime = false;\n      }\n    }\n    if (isPrime) {\n      factors.push(i);\n\
    \    }\n  }\n  if (factors.length === 0) {\n    return 1;\n  }\n  return Math.max(...factors);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpg5vya8js.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg5vya8js.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738933
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ let factors: number[] = [];\n    while (i <= n) {\n        if (n % i === 0)\
    \ {\n            factors.push(i);\n            n = n / i;\n        }\n       \
    \ else {\n            i++;\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2\n  let factor\
    \ = 2\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i\n      break\n\
    \    }\n    i++\n  }\n  return factor\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp65k8mfv6.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp65k8mfv6.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 1;\n  let i: number;\n  for (i = 2; i <= n;\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      if (i > maxFactor)\
    \ {\n        maxFactor = i;\n      }\n    }\n  }\n  if (factors.length === 0)\
    \ {\n    return 1;\n  }\n  return maxFactor;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpl8f9tgpz.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl8f9tgpz.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /=\
    \ i;\n    }\n    if (n > 1) {\n      factors.push(n);\n    }\n  }\n  factors.sort((a,\
    \ b) => b - a);\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i]\
    \ > maxFactor) {\n      maxFactor = factors[i];\n      maxFactorIndex = i;\n \
    \   }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbi39esk3.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbi39esk3.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime && n % i === 0) {\n      factors.push(i);\n    }\n    if (!isPrime\
    \ && n % i !== 0) {\n      isPrime = true;\n    }\n  }\n  if (isPrime) {\n   \
    \ return factors[factors.length - 1];\n  }\n  return n;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp54npqbpn.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp54npqbpn.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 2;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpmhoyyhlo.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmhoyyhlo.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpteulg0hv.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpteulg0hv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i;\n \
    \     break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_e3jcy0l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_e3jcy0l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n     \
    \ if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
    \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbproqxi7.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbproqxi7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: -1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (n > 1) {\n    while (n % 2 == 0) {\n \
    \     factors.push(2);\n      n = n / 2;\n    }\n    while (n % 3 == 0) {\n  \
    \    factors.push(3);\n      n = n / 3;\n    }\n    while (n % 5 == 0) {\n   \
    \   factors.push(5);\n      n = n / 5;\n    }\n    while (n % 7 == 0) {\n    \
    \  factors.push(7);\n      n = n / 7;\n    }\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738949
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ let p = 2;\n    let q = 3;\n    while (i <= n) {\n        if (n % i == 0) {\n\
    \            p += i;\n            while (n % p == 0) {\n                p += i;\n\
    \            }\n            q += i;\n            while (n % q == 0) {\n      \
    \          q += i;\n            }\n        }\n        i += 2;\n    }\n    return\
    \ q;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp8sy9sodk.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8sy9sodk.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = factors.length - 1; j >=\
    \ 0; j--) {\n      if (n % factors[j] === 0) {\n        isPrime = false;\n   \
    \     break;\n      }\n    }\n  }\n  return factors.length ? factors[factors.length\
    \ - 1] : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp1xx_gy9u.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1xx_gy9u.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n \
    \ }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpf35kmuv_.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf35kmuv_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 0;\n  for (let i = 2; i <= n; i++) {\n    while\
    \ (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1)\
    \ {\n      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  for (let i = factors.length - 1; i >= 0; i--) {\n    if (factors[i] >\
    \ maxFactor) {\n      maxFactor = factors[i];\n    }\n  }\n  return maxFactor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpix6zqghj.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpix6zqghj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n      isPrime\
    \ = false;\n    } else {\n      for (let j = factors.length - 1; j >= 0; j--)\
    \ {\n        if (n % factors[j] === 0) {\n          factors.push(factors[j]);\n\
    \          isPrime = true;\n          break;\n        }\n      }\n    }\n  }\n\
    \  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpy7_kgyd8.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpy7_kgyd8.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    isPrime = !isPrime;\n  }\n  if (factors.length === 0) {\n   \
    \ return 1;\n  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpd_hhqr9q.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd_hhqr9q.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1) {\n\
    \      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp8njlrirn.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8njlrirn.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    isPrime = !isPrime;\n  }\n  if (factors.length === 0) {\n   \
    \ return 1;\n  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpd_hhqr9q.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd_hhqr9q.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n\
    \    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  for (let i = factors.length\
    \ - 1; i >= 0; i--) {\n    if (factors[i] > maxFactor) {\n      maxFactor = factors[i];\n\
    \      maxFactorIndex = i;\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    isPrime\
    \ = !isPrime;\n  }\n  if (factors.length === 0) {\n    return 1;\n  }\n  return\
    \ Math.max(...factors);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpiv775k88.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpiv775k88.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factor: number\
    \ = 2\n  let i: number = 0\n  while (n > 1) {\n    if (n % factor === 0) {\n \
    \     n = n / factor\n    } else {\n      factor++\n      i++\n    }\n  }\n  return\
    \ factor\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpteulg0hv.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpteulg0hv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      for (let j = 2; j < i; j++) {\n        if (n % j === 0) {\n       \
    \   isPrime = false;\n          break;\n        }\n      }\n    }\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n  }\n  return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpngye672s.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpngye672s.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n     \
    \ if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
    \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbproqxi7.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbproqxi7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    else {\n      if (n % i !== 0) {\n        isPrime = false;\n\
    \      }\n    }\n  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp1ri2tdwe.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1ri2tdwe.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ let p = n;\n    while (p * p <= n) {\n        if (n % p == 0) {\n          \
    \  p /= i;\n        }\n        else {\n            i += 1;\n        }\n    }\n\
    \    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpwu0r5r1t.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwu0r5r1t.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = i * i; j < n; j += i) {\n\
    \      isPrime = false;\n    }\n  }\n  return factors[factors.length - 1];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpl55a5n2i.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl55a5n2i.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738936
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: -5
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (n > 1) {\n    factors.push(n % maxFactor);\n\
    \    maxFactor = n / maxFactor;\n  }\n  return factors[factors.length - 1];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffdff7d24d0\n 1: 0x2b79a6578727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b79a710d28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b79a6a47f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b79a6bd9760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b79a6be10cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b79a6dcb7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b79a672a7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738939
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    if\
    \ (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  if (isPrime) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphnm8pzmw.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphnm8pzmw.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738936
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    if (n > 1)\
    \ {\n      maxFactor = Math.max(maxFactor, i);\n    }\n  }\n  return maxFactor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpl5jymdx4.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl5jymdx4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738936
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ p = 2;\n  while (i <= n && n % i == 0) {\n    i++;\n    p *= i;\n  }\n  return\
    \ p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpx52072d_.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx52072d_.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738936
- exit_code: -5
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let i = 2;\n    while (n\
    \ % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    factors.push(n);\n\
    \    maxFactor = Math.max(maxFactor, n);\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffeede13de0\n 1: 0x2b09db893727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b09dc42828e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b09dbd62f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b09dbef4760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b09dbefc0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b09dc0e67db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b09dba457f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738939
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n   \
    \   n = n / i;\n    }\n  }\n  if (n > 1) {\n    for (let i = factors.length -\
    \ 1; i >= 0; i--) {\n      if (factors[i] > maxFactor) {\n        maxFactor =\
    \ factors[i];\n        maxFactorIndex = i;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpaxdh6ubk.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaxdh6ubk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ p = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      p = i;\n      n = n\
    \ / i;\n    } else {\n      i++;\n    }\n  }\n  return p;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpf7qt0d5m.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf7qt0d5m.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factor: number\
    \ = 1;\n  let i: number;\n  for (i = 2; i <= n; i += 1) {\n    if (n % i === 0)\
    \ {\n      factor = i;\n      break;\n    }\n  }\n  return factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpnmtg719u.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnmtg719u.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let factor =\
    \ 2; factor <= maxFactor; factor++) {\n    if (n % factor === 0) {\n      factors.push(factor);\n\
    \      if (factor > maxFactor) {\n        maxFactor = factor;\n        maxFactorIndex\
    \ = factors.length - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpr2qqydp0.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr2qqydp0.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    isPrime = !isPrime;\n  }\n  if (isPrime) {\n    factors.push(1);\n\
    \  }\n  return Math.max(...factors);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpsrre2cag.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsrre2cag.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    if (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  if\
    \ (isPrime) {\n    factors.push(1);\n  }\n  return factors[factors.length - 1];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpe0tzesr7.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe0tzesr7.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n \
    \ }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp9tbzx10q.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9tbzx10q.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 1;\n  let i: number;\n  for (i = 2; i <= n;\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      if (i > maxFactor)\
    \ {\n        maxFactor = i;\n      }\n    }\n  }\n  if (factors.length === 0)\
    \ {\n    return 1;\n  }\n  return maxFactor;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpl8f9tgpz.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl8f9tgpz.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpe8znbwfd.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe8znbwfd.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1) {\n\
    \      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpupm76kv9.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpupm76kv9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpteulg0hv.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpteulg0hv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1) {\n\
    \      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? factors[factors.length - 1] : 1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpys9fhyt2.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpys9fhyt2.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let i = 2;\n    while (i\
    \ < maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n        maxFactor\
    \ = i;\n      }\n      i++;\n    }\n    n--;\n  }\n  if (factors.length == 0)\
    \ {\n    return 1;\n  }\n  return factors[factors.length - 1];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp7i8ozr6v.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7i8ozr6v.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i;\n \
    \     break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_e3jcy0l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_e3jcy0l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  return factors.length ? Math.max(...factors) : -1;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738937
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n && n % i == 0) {\n    i += 1;\n    factor *= i;\n\
    \  }\n  return factor;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmptz2xab7b.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptz2xab7b.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738934
- exit_code: -5
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let i = 2;\n    while (n\
    \ % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    factors.push(n);\n\
    \    maxFactor = n;\n  }\n  return factors[factors.length - 1];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd8d571120\n 1: 0x2ae9f86a6727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ae9f923b28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ae9f8b75f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ae9f8d07760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ae9f8d0f0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ae9f8ef97db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ae9f88587f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738939
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp6f1m8agk.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6f1m8agk.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    if\
    \ (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  if (isPrime) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphnm8pzmw.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphnm8pzmw.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738936
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n     \
    \ if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
    \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbproqxi7.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbproqxi7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i <= n && n % i == 0) {\n    i += 1;\n    factor *= i;\n\
    \  }\n  return factor;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpy6vv2ndg.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpy6vv2ndg.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n \
    \ }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpf35kmuv_.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf35kmuv_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    isPrime\
    \ = !isPrime;\n  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp27mnl2sz.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp27mnl2sz.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n      isPrime\
    \ = false;\n    } else {\n      if (n % i !== 0) {\n        isPrime = true;\n\
    \      }\n    }\n  }\n  if (isPrime) {\n    factors.push(n);\n  }\n  return factors.length\
    \ ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmppc4w8glo.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppc4w8glo.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  let maxFactorIndex = -1;\n  for (let i = 2; i\
    \ <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n\
    \    }\n  }\n  if (n > 1) {\n    for (let i = 2; i <= n; i++) {\n      if (n %\
    \ i == 0) {\n        factors.push(i);\n      }\n    }\n  }\n  for (let i = factors.length\
    \ - 1; i >= 0; i--) {\n    if (factors[i] > maxFactor) {\n      maxFactor = factors[i];\n\
    \      maxFactorIndex = i;\n    }\n  }\n  return factors[maxFactorIndex];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738937
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      for (let j = i; j < n; j += i) {\n        isPrime = false;\n      }\n\
    \    }\n    if (isPrime) {\n      factors.push(i);\n    }\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpkoir_wnr.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkoir_wnr.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n   \
    \   n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factor: number\
    \ = 2\n  let i: number = 0\n  while (i < n && n % factor === 0) {\n    factor++\n\
    \    i++\n  }\n  return factor\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpef8xkoz1.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpef8xkoz1.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738937
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 2;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpmhoyyhlo.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmhoyyhlo.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: -5
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let i = 2;\n    while (n\
    \ % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    factors.push(n);\n\
    \    maxFactor = i;\n  }\n  return factors[factors.length - 1];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd4a58e550\n 1: 0x2b037cb5f727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b037d6f428e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b037d02ef8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b037d1c0760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b037d1c80cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b037d3b27db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b037cd117f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738939
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n   \
    \   n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo_02lp0o.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_02lp0o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n   \
    \   n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors.length\
    \ ? factors[factors.length - 1] : 1;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738938
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    } else {\n      if (n % i !== 0) {\n        isPrime = false;\n     \
    \ }\n    }\n  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpg3c00hwq.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg3c00hwq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738938
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpteulg0hv.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpteulg0hv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factors: number[]\
    \ = [];\n    let isPrime = true;\n    for (let i = 2; i <= n; i++) {\n       \
    \ isPrime = false;\n        for (let j = 2; j < i; j++) {\n            if (i %\
    \ j === 0) {\n                isPrime = true;\n                break;\n      \
    \      }\n        }\n        if (isPrime) {\n            factors.push(i);\n  \
    \      }\n    }\n    return factors.length ? Math.max(...factors) : -1;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpx8ol9489.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx8ol9489.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738938
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    isPrime\
    \ = !isPrime;\n  }\n  if (isPrime) {\n    factors.push(n);\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpi571zzy_.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi571zzy_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738939
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n      isPrime = !isPrime;\n    }\n  }\n  if (isPrime) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpg_z4jm3w.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg_z4jm3w.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738939
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    isPrime\
    \ = true;\n    for (let j = 2; j < i; j++) {\n      if (n % j === 0) {\n     \
    \   isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n   \
    \   factors.push(i);\n    }\n  }\n  return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpdjcmo2b0.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdjcmo2b0.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738932
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n && n % i == 0) {\n    i += 2;\n  }\n  return i;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpmhoyyhlo.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmhoyyhlo.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n\
    \ % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1) {\n\
    \      maxFactor = Math.max(maxFactor, i);\n    }\n  }\n  return maxFactor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpj3csien8.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj3csien8.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738939
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  return factors.length ? Math.max(...factors) : -1;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738937
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n      isPrime = !isPrime;\n    }\n  }\n  return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpvugzt3qv.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvugzt3qv.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738939
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i;\n \
    \     break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_e3jcy0l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_e3jcy0l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  return factors.length ? factors[factors.length -\
    \ 1] : 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738939
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factor: number\
    \ = 1;\n  let i: number;\n  for (i = 2; i <= Math.sqrt(n); i++) {\n    if (n %\
    \ i === 0) {\n      factor = i;\n      break;\n    }\n  }\n  return factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpmasprfxx.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmasprfxx.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738932
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ p = n;\n  while (p % i === 0) {\n    p /= i;\n    i += 1;\n  }\n  return p;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpvege9_y5.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvege9_y5.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n = n / i;\n    }\n  }\n  return factors[factors.length - 1];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738939
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n \
    \ }\n  return factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpf35kmuv_.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf35kmuv_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors.length ? factors[factors.length - 1] : 1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738939
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n / i; i++) {\n    if (n\
    \ % i == 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  for (let i\
    \ = 2; i <= n / i; i++) {\n    if (n % i == 0) {\n      factors.push(i);\n   \
    \ }\n  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ factors[0];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpeyndv8l8.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpeyndv8l8.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738939
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n \
    \           factors.push(i);\n            n /= i;\n        }\n    }\n    return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738939
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
    \ -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp6f1m8agk.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6f1m8agk.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  let\
    \ factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      factor = i;\n \
    \     break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp_e3jcy0l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_e3jcy0l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factor: number\
    \ = 1;\n  let i: number;\n  for (i = 2; i <= Math.sqrt(n); i++) {\n    if (n %\
    \ i == 0) {\n      factor = i;\n      break;\n    }\n  }\n  return factor;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpo7sptdf3.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo7sptdf3.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738939
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 1;\n  let i: number;\n  for (i = 2; i <= n;\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      if (i > maxFactor)\
    \ {\n        maxFactor = i;\n      }\n    }\n  }\n  if (factors.length === 0)\
    \ {\n    return 1;\n  }\n  return maxFactor;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpl8f9tgpz.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl8f9tgpz.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738934
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n    \
    \  }\n    }\n    if (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpdn_ighdw.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdn_ighdw.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738932
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factor: number\
    \ = 2;\n  let i: number;\n  for (i = 2; i <= Math.sqrt(n); i++) {\n    if (n %\
    \ i === 0) {\n      factor = i;\n      break;\n    }\n  }\n  return factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpu0bqoz8e.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu0bqoz8e.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738939
- exit_code: -1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let i = 2;\n    while (i\
    \ < maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n        maxFactor\
    \ = i;\n      }\n      i += 1;\n    }\n  }\n  return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738954
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n  \
    \    n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors[factors.length - 1];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738929
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor: number = 0;\n  for (let i = 2; i <= n; i++) {\n    while\
    \ (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    if (n > 1)\
    \ {\n      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp1xqsngmd.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1xqsngmd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738939
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n   \
    \   n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors[factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738931
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    isPrime\
    \ = true;\n    for (let j = 2; j < i; j++) {\n      if (n % j === 0) {\n     \
    \   isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n   \
    \   factors.push(i);\n    }\n  }\n  return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpdjcmo2b0.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdjcmo2b0.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738932
