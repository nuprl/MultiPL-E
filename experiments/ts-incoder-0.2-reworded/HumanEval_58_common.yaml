name: HumanEval_58_common
language: ts
prompt: "//Return sorted unique common elements for two arrays.\n// >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
  \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1: number[], l2: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34,\
  \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5,\
  \ 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2,\
  \ 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();"
completions: ["  const l1 = l1 || [];\n  const l2 = l2 || [];\n  const result = [];\n\
    \  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if\
    \ (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n   \
    \ } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n \
    \ }\n  return result;\n}\n", "  const result = [];\n  const lLen1 = l1.length;\n\
    \  const lLen2 = l2.length;\n  for (let i = 0; i < lLen1; i++) {\n    const val1\
    \ = l1[i];\n    for (let j = 0; j < lLen2; j++) {\n      const val2 = l2[j];\n\
    \      if (val1 === val2) {\n        result.push(val1);\n        break;\n    \
    \  }\n    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let\
    \ i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  let i: number;\n\
    \  let j: number;\n  let k: number;\n  for (i = 0, j = 0, k = l1.length; i < l1.length\
    \ && j < l2.length; i++, j++) {\n    if (l1[i] === l2[j]) {\n      l.push(l1[i]);\n\
    \      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      l.push(l1[i]);\n\
    \    } else {\n      l.push(l2[j]);\n    }\n  }\n  return l;\n}\n", "  const result\
    \ = [];\n  let j = 0;\n  let i = 0;\n  while (i < l1.length && j < l2.length)\
    \ {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n     \
    \ j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  const result: number[]\
    \ = [];\n  let j = 0;\n  let i = 0;\n  while (i < l1.length && j < l2.length)\
    \ {\n    if (l1[i] === l2[j]) {\n      l.push(l1[i]);\n      result.push(l1[i]);\n\
    \      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else\
    \ {\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    l.push(l1[i]);\n \
    \   result.push(l1[i]);\n    i++;\n  }\n  while (j < l2.length) {\n    l.push(l2[j]);\n\
    \    result.push(l2[j]);\n    j++;\n  }\n  return result;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  const sortedL1 = l1.sort((a, b) => a - b);\n  const sortedL2 = l2.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < sortedL1.length; i++) {\n    const element\
    \ = sortedL1[i];\n    if (sortedL2.indexOf(element) !== -1) {\n      l.push(element);\n\
    \    }\n  }\n  return l;\n}\n", "  const set1 = new Set(l1);\n  const set2 = new\
    \ Set(l2);\n  const result = [];\n  set1.forEach((val) => {\n    if (set2.has(val))\
    \ {\n      result.push(val);\n    }\n  });\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while\
    \ (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length)\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n \
    \   if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n \
    \     i++;\n    }\n  }\n  return l;\n}\n", "  const l1 = l1 || [];\n  const l2\
    \ = l2 || [];\n  const result = [];\n  const hash1 = {};\n  const hash2 = {};\n\
    \  for (let i = 0; i < l1.length; i++) {\n    hash1[l1[i]] = true;\n  }\n  for\
    \ (let i = 0; i < l2.length; i++) {\n    hash2[l2[i]] = true;\n  }\n  for (let\
    \ key in hash1) {\n    if (hash2.hasOwnProperty(key)) {\n      result.push(key);\n\
    \    }\n  }\n  return result;\n}\n", "  const set1 = new Set(l1);\n  const set2\
    \ = new Set(l2);\n  const result = [];\n  for (const item of set1) {\n    if (set2.has(item))\
    \ {\n      result.push(item);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found: boolean\
    \ = l2.some((x: number) => x === l1[i]);\n    if (!found) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  let j = 0;\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n   \
    \   l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const set1 = new Set(l1);\n\
    \  const set2 = new Set(l2);\n  const result = [];\n  set1.forEach(v => {\n  \
    \  if (set2.has(v)) {\n      result.push(v);\n    }\n  });\n  return result;\n\
    }\n", "  const result: number[] = [];\n  let j = 0;\n  let i = 0;\n  while (i\
    \ < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n\
    \      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else\
    \ {\n      j++;\n    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n\
    \  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n\
    \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
