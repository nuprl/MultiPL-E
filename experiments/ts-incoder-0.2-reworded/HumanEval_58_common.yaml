name: HumanEval_58_common
language: ts
prompt: "//Return sorted unique common elements for two arrays.\n// >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
  \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1: number[], l2: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34,\
  \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5,\
  \ 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2,\
  \ 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();"
completions: ["  const l1 = l1 || [];\n  const l2 = l2 || [];\n  const result = [];\n\
    \  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if\
    \ (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n   \
    \ } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n \
    \ }\n  return result;\n}\n", "  const result = [];\n  const lLen1 = l1.length;\n\
    \  const lLen2 = l2.length;\n  for (let i = 0; i < lLen1; i++) {\n    const val1\
    \ = l1[i];\n    for (let j = 0; j < lLen2; j++) {\n      const val2 = l2[j];\n\
    \      if (val1 === val2) {\n        result.push(val1);\n        break;\n    \
    \  }\n    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let\
    \ i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  let i: number;\n\
    \  let j: number;\n  let k: number;\n  for (i = 0, j = 0, k = l1.length; i < l1.length\
    \ && j < l2.length; i++, j++) {\n    if (l1[i] === l2[j]) {\n      l.push(l1[i]);\n\
    \      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      l.push(l1[i]);\n\
    \    } else {\n      l.push(l2[j]);\n    }\n  }\n  return l;\n}\n", "  const result\
    \ = [];\n  let j = 0;\n  let i = 0;\n  while (i < l1.length && j < l2.length)\
    \ {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n     \
    \ j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  const result: number[]\
    \ = [];\n  let j = 0;\n  let i = 0;\n  while (i < l1.length && j < l2.length)\
    \ {\n    if (l1[i] === l2[j]) {\n      l.push(l1[i]);\n      result.push(l1[i]);\n\
    \      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else\
    \ {\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    l.push(l1[i]);\n \
    \   result.push(l1[i]);\n    i++;\n  }\n  while (j < l2.length) {\n    l.push(l2[j]);\n\
    \    result.push(l2[j]);\n    j++;\n  }\n  return result;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  const sortedL1 = l1.sort((a, b) => a - b);\n  const sortedL2 = l2.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < sortedL1.length; i++) {\n    const element\
    \ = sortedL1[i];\n    if (sortedL2.indexOf(element) !== -1) {\n      l.push(element);\n\
    \    }\n  }\n  return l;\n}\n", "  const set1 = new Set(l1);\n  const set2 = new\
    \ Set(l2);\n  const result = [];\n  set1.forEach((val) => {\n    if (set2.has(val))\
    \ {\n      result.push(val);\n    }\n  });\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while\
    \ (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length)\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n \
    \   if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n \
    \     i++;\n    }\n  }\n  return l;\n}\n", "  const l1 = l1 || [];\n  const l2\
    \ = l2 || [];\n  const result = [];\n  const hash1 = {};\n  const hash2 = {};\n\
    \  for (let i = 0; i < l1.length; i++) {\n    hash1[l1[i]] = true;\n  }\n  for\
    \ (let i = 0; i < l2.length; i++) {\n    hash2[l2[i]] = true;\n  }\n  for (let\
    \ key in hash1) {\n    if (hash2.hasOwnProperty(key)) {\n      result.push(key);\n\
    \    }\n  }\n  return result;\n}\n", "  const set1 = new Set(l1);\n  const set2\
    \ = new Set(l2);\n  const result = [];\n  for (const item of set1) {\n    if (set2.has(item))\
    \ {\n      result.push(item);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found: boolean\
    \ = l2.some((x: number) => x === l1[i]);\n    if (!found) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  let j = 0;\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n   \
    \   l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const set1 = new Set(l1);\n\
    \  const set2 = new Set(l2);\n  const result = [];\n  set1.forEach(v => {\n  \
    \  if (set2.has(v)) {\n      result.push(v);\n    }\n  });\n  return result;\n\
    }\n", "  const result: number[] = [];\n  let j = 0;\n  let i = 0;\n  while (i\
    \ < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n\
    \      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else\
    \ {\n      j++;\n    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n\
    \  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n\
    \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n\
    \  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n\
    \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const set1 = new Set(l1);\n\
    \  const set2 = new Set(l2);\n  const result = [];\n  for (let i = 0; i < Math.min(set1.size,\
    \ set2.size); i++) {\n    if (set1.has(i) && set2.has(i)) {\n      result.push(i);\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  let i: number;\n\
    \  let j: number;\n  let k: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ len1: number;\n  let len2: number;\n  let minLen: number;\n  let minLen1: number;\n\
    \  let minLen2: number;\n  let maxLen: number;\n  let maxLen1: number;\n  let\
    \ maxLen2: number;\n  let mid: number;\n  let mid1: number;\n  let mid2: number;\n\
    \  let mid3: number;\n  let mid4: number;\n  let mid5: number;\n  let mid6: number;\n\
    \  let mid7: number;\n  let mid8: number;\n  let mid9: number;\n  let mid10: number;\n\
    \  let mid11: number;\n  let mid12: number;\n  let mid13: number;\n  let mid14:\
    \ number;\n  let mid15: number;\n  let mid16: number;\n  let mid17: number;\n\
    \  let mid18: number;\n  let mid19: number;\n  let mid20: number;\n  let mid21:\
    \ number;\n  let mid22: number;\n  let mid23: number;\n  let mid24: number;\n\
    \  let mid25: number;\n  let mid26: number;\n  let mid27: number;\n  let mid28:\
    \ number;\n  let mid29: number;\n  let mid30: number;\n  let mid31: number;\n\
    \  let mid32: number;\n  let mid33: number;\n  let mid34: number;\n  let mid35:\
    \ number;\n  let mid36: number;\n  let mid37: number;\n  let mid38: number;\n\
    \  let mid39: number;\n  let mid40: number;\n  let mid41: number;\n  let mid42:\
    \ number;\n  let mid43: number;\n  let mid44: number;\n  let mid45: number;\n\
    \  let mid46: number;\n  let mid47: number;\n  let mid48: number;\n  let mid49:\
    \ number;\n  let mid50: number;\n  let mid51: number;\n  let mid52: number;\n\
    \  let mid53: number;\n  let mid54: number;\n  let mid55: number;\n  let mid56:\
    \ number;\n  let mid57: number;\n  let mid58: number;\n  let mid59: number;\n\
    \  let mid60: number;\n  let mid61: number;\n  let mid62: number;\n  let mid63:\
    \ number;\n  let mid64: number;\n  let mid65: number;\n  let mid66: number;\n\
    \  let mid67: number;\n  let mid68: number;\n  let mid69: number;\n  let mid70:\
    \ number;\n  let mid71: number;\n  let mid72: number;\n  let mid73: number;\n\
    \  let mid74: number;\n  let mid75: number;\n  let mid76: number;\n  let mid77:\
    \ number;\n  let mid78: number;\n  let mid79: number;\n  let mid80: number;\n\
    \  let mid81: number;\n  let mid82: number;\n  let mid83: number;\n  let mid84:\
    \ number;\n  let mid85: number;\n  let mid86: number;\n  let mid", "  const result\
    \ = [];\n  let j = 0;\n  let i = 0;\n  while (i < l1.length && j < l2.length)\
    \ {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n     \
    \ j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n\
    \    }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < l1.length; i++) {\n    const found = false;\n    for (let j = 0;\
    \ j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n\
    \        found = true;\n        break;\n      }\n    }\n    if (!found) {\n  \
    \    result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l: number[]\
    \ = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l[j] = l1[i];\n      j++;\n    }\n  }\n  return l;\n}\n", " \
    \ const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  var result\
    \ = [];\n  for (var i = 0; i < l1.length; i++) {\n    for (var j = 0; j < l2.length;\
    \ j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n        break;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n\
    \  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length\
    \ && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n     \
    \ result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found = false;\n \
    \   for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n    \
    \    found = true;\n        break;\n      }\n    }\n    if (!found) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result: number[] = [];\n  let j = 0;\n\
    \  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] ===\
    \ l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  const hashMap\
    \ = new Map<number, number>();\n  for (let i = 0; i < l1.length; i++) {\n    const\
    \ val = l1[i];\n    if (hashMap.has(val)) {\n      l.push(hashMap.get(val));\n\
    \    } else {\n      hashMap.set(val, i);\n      l.push(i);\n    }\n  }\n  for\
    \ (let i = 0; i < l2.length; i++) {\n    const val = l2[i];\n    if (hashMap.has(val))\
    \ {\n      l.push(hashMap.get(val));\n    } else {\n      hashMap.set(val, i);\n\
    \      l.push(i);\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n\
    \  for (let i = 0; i < l1.length; i++) {\n    const found = false;\n    for (let\
    \ j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        l.push(l1[i]);\n\
    \        found = true;\n        break;\n      }\n    }\n    if (!found) {\n  \
    \    l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const set1 = new Set(l1);\n\
    \  const set2 = new Set(l2);\n  const set1Size = set1.size;\n  const set2Size\
    \ = set2.size;\n  const result = [];\n  for (let i = 0; i < set1Size; i++) {\n\
    \    if (set2.has(set1.get(i))) {\n      result.push(set1.get(i));\n    }\n  }\n\
    \  for (let i = 0; i < set2Size; i++) {\n    if (set1.has(set2.get(i))) {\n  \
    \    result.push(set2.get(i));\n    }\n  }\n  return result;\n}\n", "  const result\
    \ = [];\n  const hashMap = new Map<number, number>();\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    const key = l1[i];\n    if (!hashMap.has(key)) {\n      hashMap.set(key,\
    \ i);\n      result.push(key);\n    }\n  }\n  for (let i = 0; i < l2.length; i++)\
    \ {\n    const key = l2[i];\n    if (!hashMap.has(key)) {\n      hashMap.set(key,\
    \ i);\n      result.push(key);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  const i: number[] = [];\n  let j: number[] = [];\n  let k:\
    \ number[] = [];\n  let n: number[] = [];\n  let m: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[] = [];\n  let l: number[] = [];\n  let l1:\
    \ number[] = [];\n  let l2: number[]", "  const result: number[] = [];\n  const\
    \ hashMap = new Map<number, number>();\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    const key = l1[i];\n    if (!hashMap.has(key)) {\n      hashMap.set(key,\
    \ i);\n      result.push(key);\n    }\n  }\n  for (let i = 0; i < l2.length; i++)\
    \ {\n    const key = l2[i];\n    if (!hashMap.has(key)) {\n      hashMap.set(key,\
    \ i);\n      result.push(key);\n    }\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  const hashMap = new Map<number, number>();\n  for (let i =\
    \ 0; i < l1.length; i++) {\n    const key = l1[i];\n    if (!hashMap.has(key))\
    \ {\n      hashMap.set(key, 0);\n    }\n    hashMap.set(key, hashMap.get(key)\
    \ + 1);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const key = l2[i];\n\
    \    if (!hashMap.has(key)) {\n      hashMap.set(key, 0);\n    }\n    hashMap.set(key,\
    \ hashMap.get(key) - 1);\n  }\n  for (const [key, value] of hashMap) {\n    if\
    \ (value !== 0) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n",
  "  const result = [];\n  const hash1 = new Map();\n  const hash2 = new Map();\n\
    \  for (let i = 0; i < l1.length; i++) {\n    const val = l1[i];\n    if (hash1.has(val))\
    \ {\n      hash2.get(val).push(l1[i]);\n    } else {\n      hash1.set(val, [l1[i]]);\n\
    \    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const val = l2[i];\n\
    \    if (hash2.has(val)) {\n      result.push(...hash2.get(val));\n    } else\
    \ {\n      hash2.set(val, [l2[i]]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let\
    \ j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n\
    \        break;\n      }\n    }\n  }\n  return result;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  let i: number;\n  let j: number;\n  let k: number;\n  let l1: number;\n\
    \  let l2: number;\n  let n1: number;\n  let n2: number;\n  let n: number;\n \
    \ for (i = 0, n = l1.length; i < n; i++) {\n    l1 = l1[i];\n    l2 = l2[i];\n\
    \    if (l1 === l2) {\n      l.push(l1);\n      continue;\n    }\n    for (j =\
    \ 0, n1 = l1.length; j < n1; j++) {\n      l1 = l1[j];\n      n2 = l2[j];\n  \
    \    if (l1 === n2) {\n        l.push(l1);\n        break;\n      }\n      for\
    \ (k = 0, n2 = l2.length; k < n2; k++) {\n        l2 = l2[k];\n        if (l1\
    \ === n2) {\n          l.push(l1);\n          break;\n        }\n      }\n   \
    \ }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i <\
    \ l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l1 = l1 || [];\n  const l2 = l2 || [];\n\
    \  const result = [];\n  const hash1 = {};\n  const hash2 = {};\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    hash1[l1[i]] = l1[i];\n  }\n  for (let i = 0;\
    \ i < l2.length; i++) {\n    hash2[l2[i]] = l2[i];\n  }\n  for (let key in hash1)\
    \ {\n    if (hash2.hasOwnProperty(key)) {\n      result.push(key);\n    }\n  }\n\
    \  return result;\n}\n", "  const l: number[] = [];\n  const result: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found = false;\n \
    \   for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n    \
    \    result.push(l1[i]);\n        found = true;\n        break;\n      }\n   \
    \ }\n    if (!found) {\n      l.push(l1[i]);\n    }\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  const hash1 = new Map();\n  const hash2 = new\
    \ Map();\n  for (let i = 0; i < l1.length; i++) {\n    const val = l1[i];\n  \
    \  if (!hash1.has(val)) {\n      hash1.set(val, i);\n      result.push(val);\n\
    \    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const val = l2[i];\n\
    \    if (!hash2.has(val)) {\n      hash2.set(val, i);\n      result.push(val);\n\
    \    }\n  }\n  for (let i = 0; i < result.length; i++) {\n    const val = result[i];\n\
    \    if (hash1.has(val) && hash2.has(val)) {\n      result.splice(hash2.get(val),\
    \ 1);\n    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let\
    \ i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result = [];\n  const hash1 = new Set();\n\
    \  const hash2 = new Set();\n  for (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n\
    \  }\n  for (let i = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i]))\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found = false;\n \
    \   for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n    \
    \    result.push(l1[i]);\n        found = true;\n        break;\n      }\n   \
    \ }\n    if (!found) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n\
    \    const found = false;\n    for (let j = 0; j < l2.length; j++) {\n      if\
    \ (l1[i] === l2[j]) {\n        result.push(l1[i]);\n        found = true;\n  \
    \      break;\n      }\n    }\n    if (!found) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  var result = [];\n  for (var i = 0; i < l1.length;\
    \ i++) {\n    for (var j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
    \ {\n        result.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return\
    \ result;\n}\n", "  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n \
    \ const result = [];\n  set1.forEach(v => {\n    if (set2.has(v)) {\n      result.push(v);\n\
    \    }\n  });\n  return result;\n}\n", "  const l: number[] = [];\n  let i = 0;\n\
    \  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n    \
    \  l.push(l1[i]);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return\
    \ l;\n}\n", "  const result: number[] = [];\n  let j = 0;\n  for (let i = 0; i\
    \ < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n\
    \    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const result: number[] = [];\n  let j = 0;\n  for (let i =\
    \ 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n \
    \     j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n   \
    \ }\n  }\n  return result;\n}\n", "  const set1 = new Set(l1);\n  const set2 =\
    \ new Set(l2);\n  const result = [];\n  for (const item of set1) {\n    if (set2.has(item))\
    \ {\n      result.push(item);\n    }\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  const hashMap = new Map<number, number>();\n  for (let i =\
    \ 0; i < l1.length; i++) {\n    const key = l1[i];\n    if (!hashMap.has(key))\
    \ {\n      hashMap.set(key, 0);\n    }\n    hashMap.set(key, hashMap.get(key)\
    \ + 1);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const key = l2[i];\n\
    \    if (!hashMap.has(key)) {\n      hashMap.set(key, 0);\n    }\n    hashMap.set(key,\
    \ hashMap.get(key) - 1);\n  }\n  for (const [key, value] of hashMap) {\n    if\
    \ (value === 0) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const\
    \ found = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] ===\
    \ l2[j]) {\n        result.push(l1[i]);\n        found = true;\n        break;\n\
    \      }\n    }\n    if (!found) {\n      result.push(l1[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const l: number[] = [];\n  let i: number;\n  let j: number;\n\
    \  let k: number;\n  let l1: number;\n  let l2: number;\n  let len1: number;\n\
    \  let len2: number;\n  let min: number;\n  let max: number;\n  let min1: number;\n\
    \  let min2: number;\n  let max1: number;\n  let max2: number;\n  let mid: number;\n\
    \  let mid1: number;\n  let mid2: number;\n  let mid3: number;\n  let mid4: number;\n\
    \  let mid5: number;\n  let mid6: number;\n  let mid7: number;\n  let mid8: number;\n\
    \  let mid9: number;\n  let mid10: number;\n  let mid11: number;\n  let mid12:\
    \ number;\n  let mid13: number;\n  let mid14: number;\n  let mid15: number;\n\
    \  let mid16: number;\n  let mid17: number;\n  let mid18: number;\n  let mid19:\
    \ number;\n  let mid20: number;\n  let mid21: number;\n  let mid22: number;\n\
    \  let mid23: number;\n  let mid24: number;\n  let mid25: number;\n  let mid26:\
    \ number;\n  let mid27: number;\n  let mid28: number;\n  let mid29: number;\n\
    \  let mid30: number;\n  let mid31: number;\n  let mid32: number;\n  let mid33:\
    \ number;\n  let mid34: number;\n  let mid35: number;\n  let mid36: number;\n\
    \  let mid37: number;\n  let mid38: number;\n  let mid39: number;\n  let mid40:\
    \ number;\n  let mid41: number;\n  let mid42: number;\n  let mid43: number;\n\
    \  let mid44: number;\n  let mid45: number;\n  let mid46: number;\n  let mid47:\
    \ number;\n  let mid48: number;\n  let mid49: number;\n  let mid50: number;\n\
    \  let mid51: number;\n  let mid52: number;\n  let mid53: number;\n  let mid54:\
    \ number;\n  let mid55: number;\n  let mid56: number;\n  let mid57: number;\n\
    \  let mid58: number;\n  let mid59: number;\n  let mid60: number;\n  let mid61:\
    \ number;\n  let mid62: number;\n  let mid63: number;\n  let mid64: number;\n\
    \  let mid65: number;\n  let mid66: number;\n  let mid67: number;\n  let mid68:\
    \ number;\n  let mid69: number;\n  let mid70: number;\n  let mid71: number;\n\
    \  let mid72: number;\n  let mid73: number;\n  let mid74: number;\n  let mid75:\
    \ number;\n  let mid76: number;\n  let mid77: number;\n  let mid78: number;\n\
    \  let mid79: number;\n  let mid80: number;\n  let mid81: number;\n  let mid82:\
    \ number;\n  let mid83: number;\n  let mid84: number;\n  let mid85: number;\n\
    \  let mid86: number;\n  let mid87: number;\n  let mid88", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found = false;\n\
    \    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n   \
    \     found = true;\n        break;\n      }\n    }\n    if (!found) {\n     \
    \ result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const set1 = new\
    \ Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  set1.forEach((item)\
    \ => {\n    if (set2.has(item)) {\n      result.push(item);\n    }\n  });\n  return\
    \ result;\n}\n", "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i\
    \ < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result = [];\n  let j = 0;\n  for (let\
    \ i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n\
    \      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n  \
    \  }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i =\
    \ 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result: number[] = [];\n  let j = 0;\n\
    \  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] ===\
    \ l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const l1 = l1 || [];\n  const l2 = l2\
    \ || [];\n  const result = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
    \ {\n    if (l1[i] === l2[i]) {\n      result.push(l1[i]);\n      i++;\n    }\
    \ else {\n      break;\n    }\n  }\n  return result;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  var result =\
    \ [];\n  var lLen1 = l1.length;\n  var lLen2 = l2.length;\n  if (lLen1 > lLen2)\
    \ {\n    for (var i = 0; i < lLen1; i++) {\n      for (var j = 0; j < lLen2; j++)\
    \ {\n        if (l1[i] === l2[j]) {\n          result.push(l1[i]);\n         \
    \ break;\n        }\n      }\n    }\n  } else {\n    for (var i = 0; i < lLen2;\
    \ i++) {\n      for (var j = 0; j < lLen1; j++) {\n        if (l2[i] === l1[j])\
    \ {\n          result.push(l2[i]);\n          break;\n        }\n      }\n   \
    \ }\n  }\n  return result;\n}\n", "  const result = [];\n  const hash1 = new Set();\n\
    \  const hash2 = new Set();\n  for (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n\
    \  }\n  for (let i = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i]))\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const set1\
    \ = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let\
    \ i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      result.push(set1.get(i));\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  let i: number;\n\
    \  let j: number;\n  let k: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ j1: number;\n  let j2: number;\n  let k1: number;\n  let k2: number;\n  let\
    \ l1: number;\n  let l2: number;\n  let j1: number;\n  let j2: number;\n  let\
    \ k1: number;\n  let k2: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ j1: number;\n  let j2: number;\n  let k1: number;\n  let k2: number;\n  let\
    \ l1: number;\n  let l2: number;\n  let j1: number;\n  let j2: number;\n  let\
    \ k1: number;\n  let k2: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ j1: number;\n  let j2: number;\n  let k1: number;\n  let k2: number;\n  let\
    \ l1: number;\n  let l2: number;\n  let j1: number;\n  let j2: number;\n  let\
    \ k1: number;\n  let k2: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ j1: number;\n  let j2: number;\n  let k1: number;\n  let k2: number;\n  let\
    \ l1: number;\n  let l2: number;\n  let j1: number;\n  let j2: number;\n  let\
    \ k1: number;\n  let k2: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ j1: number;\n  let j2: number;\n  let k1: number;\n  let k2: number;\n  let\
    \ l1: number;\n  let l2: number;\n  let j1: number;\n  let j2: number;\n  let\
    \ k1: number;\n  let k2: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ j1: number;\n  let j2: number;\n  let k1: number;\n  let k2: number;\n  let\
    \ l1: number;\n  let l2: number;\n  let j1: number;\n  let j2: number;\n  let\
    \ k1: number;\n  let k2: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ j1: number;\n  let j2: number;\n  let k1: number;\n  let k2: number;\n  let\
    \ l1: number;\n  let l2: number;\n  let j1: number;\n  let j2: number;\n  let\
    \ k1: number;\n  let k2: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ j1: number;\n  let j2: number;\n  let k1: number;\n  let k2: number;\n  let\
    \ l1: number;\n  let l2: number;\n  let j1: number;\n  let j2: number;\n  let\
    \ k1: number;\n  let k2: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ j1: ", "  const result = [];\n  const hash1 = new Set();\n  const hash2 = new\
    \ Set();\n  for (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n  }\n\
    \  for (let i = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for (let\
    \ i = 0; i < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i]))\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result:\
    \ number[] = [];\n  const hashMap = new Map<number, number>();\n  for (let i =\
    \ 0; i < l1.length; i++) {\n    const val = l1[i];\n    if (!hashMap.has(val))\
    \ {\n      hashMap.set(val, i);\n      result.push(val);\n    }\n  }\n  for (let\
    \ i = 0; i < l2.length; i++) {\n    const val = l2[i];\n    if (!hashMap.has(val))\
    \ {\n      hashMap.set(val, i);\n      result.push(val);\n    }\n  }\n  return\
    \ result;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const result: number[] = [];\n  let j = 0;\n  for (let\
    \ i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n\
    \      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n  \
    \  }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i =\
    \ 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l1 = l1 || [];\n  const l2 = l2 || [];\n\
    \  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j\
    \ < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n    \
    \  i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n\
    \      j++;\n    }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n\
    \  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length\
    \ && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n     \
    \ result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const result = [];\n\
    \  let lLen = l1.length;\n  let lIdx = 0;\n  let l2Len = l2.length;\n  let l2Idx\
    \ = 0;\n  while (lIdx < lLen && l2Idx < l2Len) {\n    if (l1[lIdx] === l2[l2Idx])\
    \ {\n      result.push(l1[lIdx]);\n      lIdx++;\n      l2Idx++;\n    } else if\
    \ (l1[lIdx] < l2[l2Idx]) {\n      l2Idx++;\n    } else {\n      lIdx++;\n    }\n\
    \  }\n  return result;\n}\n", "  const l: number[] = [];\n  const hashMap = new\
    \ Map();\n  for (let i = 0; i < l1.length; i++) {\n    const key = l1[i];\n  \
    \  if (!hashMap.has(key)) {\n      l.push(key);\n      hashMap.set(key, true);\n\
    \    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const key = l2[i];\n\
    \    if (!hashMap.has(key)) {\n      l.push(key);\n      hashMap.set(key, true);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  let i: number;\n\
    \  let j: number;\n  let k: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ len1: number;\n  let len2: number;\n  l1 = l1 || [];\n  l2 = l2 || [];\n  len1\
    \ = l1.length;\n  len2 = l2.length;\n  for (i = 0; i < len1; i++) {\n    for (j\
    \ = 0; j < len2; j++) {\n      if (l1[i] === l2[j]) {\n        l.push(l1[i]);\n\
    \        break;\n      }\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result:\
    \ number[] = [];\n  const hashMap = new Map();\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    const key = l1[i];\n    if (!hashMap.has(key)) {\n      hashMap.set(key,\
    \ true);\n      result.push(key);\n    }\n  }\n  for (let i = 0; i < l2.length;\
    \ i++) {\n    const key = l2[i];\n    if (!hashMap.has(key)) {\n      hashMap.set(key,\
    \ true);\n      result.push(key);\n    }\n  }\n  return result;\n}\n", "  const\
    \ result: number[] = [];\n  const hash1 = new Set();\n  const hash2 = new Set();\n\
    \  for (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n  }\n  for (let\
    \ i = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i])) {\n   \
    \   result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found = false;\n \
    \   for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n    \
    \    found = true;\n        break;\n      }\n    }\n    if (!found) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result = [];\n  const hash1 = new Set();\n\
    \  const hash2 = new Set();\n  for (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n\
    \  }\n  for (let i = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i]))\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const set1\
    \ = new Set(l1);\n  const set2 = new Set(l2);\n  const common: number[] = [];\n\
    \  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n\
    \      set2.delete(val);\n    }\n  });\n  set2.forEach((val) => {\n    if (set1.has(val))\
    \ {\n      common.push(val);\n      set1.delete(val);\n    }\n  });\n  return\
    \ common;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const result = [];\n  const hash1 = new Set();\n  const\
    \ hash2 = new Set();\n  for (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n\
    \  }\n  for (let i = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i]))\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  var result\
    \ = [];\n  for (var i = 0; i < l1.length; i++) {\n    for (var j = 0; j < l2.length;\
    \ j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n        break;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n\
    \  const hashMap = new Map();\n  for (let i = 0; i < l1.length; i++) {\n    const\
    \ val = l1[i];\n    if (!hashMap.has(val)) {\n      hashMap.set(val, true);\n\
    \      result.push(val);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n\
    \    const val = l2[i];\n    if (!hashMap.has(val)) {\n      hashMap.set(val,\
    \ true);\n      result.push(val);\n    }\n  }\n  return result;\n}\n", "  const\
    \ result = [];\n  const hash1 = new Set();\n  const hash2 = new Set();\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n  }\n  for (let i\
    \ = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for (let i = 0; i\
    \ < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i])) {\n     \
    \ result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  var result =\
    \ [];\n  for (var i = 0; i < l1.length; i++) {\n    for (var j = 0; j < l2.length;\
    \ j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n        break;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  const result = [];\n  let i =\
    \ 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n\
    \      result.push(l1[i]);\n      i++;\n    } else {\n      break;\n    }\n  }\n\
    \  return result;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const result = [];\n  const lLen1 = l1.length;\n  const\
    \ lLen2 = l2.length;\n  for (let i = 0; i < lLen1; i++) {\n    for (let j = 0;\
    \ j < lLen2; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n\
    \        break;\n      }\n    }\n  }\n  return result;\n}\n", "  const l: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) ===\
    \ -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length;\
    \ i++) {\n    if (l.indexOf(l2[i]) === -1) {\n      l.push(l2[i]);\n    }\n  }\n\
    \  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  let i = 0;\n  while (i <\
    \ l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n\
    \      i++;\n    } else {\n      i++;\n    }\n  }\n  return l;\n}\n", "  const\
    \ l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result:\
    \ number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n \
    \   if (l1[i] === l2[i]) {\n      result.push(l1[i]);\n      i++;\n    } else\
    \ {\n      break;\n    }\n  }\n  return result;\n}\n", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !==\
    \ -1) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result:\
    \ number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while\
    \ (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length)\
    \ {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const set1\
    \ = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let\
    \ i = 0; i < set1.length; i++) {\n    if (set2.has(set1.get(i))) {\n      result.push(set1.get(i));\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result: number[] = [];\n  const hashTable:\
    \ Map<number, boolean> = new Map();\n  for (let i = 0; i < l1.length; i++) {\n\
    \    const key = l1[i];\n    if (!hashTable.has(key)) {\n      hashTable.set(key,\
    \ true);\n      result.push(key);\n    }\n  }\n  for (let i = 0; i < l2.length;\
    \ i++) {\n    const key = l2[i];\n    if (!hashTable.has(key)) {\n      hashTable.set(key,\
    \ true);\n      result.push(key);\n    }\n  }\n  return result;\n}\n", "  const\
    \ l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const set1\
    \ = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (const\
    \ item of set1) {\n    if (set2.has(item)) {\n      result.push(item);\n    }\n\
    \  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i\
    \ < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result: number[] = [];\n  let j = 0;\n\
    \  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] ===\
    \ l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result: number[] = [];\n  const hash1\
    \ = new Set();\n  const hash2 = new Set();\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    hash1.add(l1[i]);\n  }\n  for (let i = 0; i < l2.length; i++) {\n   \
    \ hash2.add(l2[i]);\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (hash1.has(l1[i])\
    \ && hash2.has(l2[i])) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
    }\n", "  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if\
    \ (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
    }\n", "  const result = [];\n  const hash1 = new Set();\n  const hash2 = new Set();\n\
    \  for (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n  }\n  for (let\
    \ i = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i])) {\n   \
    \   result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", " \
    \ const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n\
    \  for (let i = 0; i < set1.length; i++) {\n    if (set2.has(set1.get(i))) {\n\
    \      result.push(set1.get(i));\n    }\n  }\n  return result;\n}\n", "  const\
    \ l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result:\
    \ number[] = [];\n  const hashMap = new Map<number, number>();\n  for (let i =\
    \ 0; i < l1.length; i++) {\n    const item = l1[i];\n    if (hashMap.has(item))\
    \ {\n      hashMap.get(item).push(l2[i]);\n    } else {\n      hashMap.set(item,\
    \ l2[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const item\
    \ = l2[i];\n    if (hashMap.has(item)) {\n      result.push(...hashMap.get(item));\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l1 = l1 || [];\n  const l2 = l2 || [];\n\
    \  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j\
    \ < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n    \
    \  i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n\
    \      j++;\n    }\n  }\n  return result;\n}\n", "  const set1: Set<number> =\
    \ new Set(l1);\n  const set2: Set<number> = new Set(l2);\n  const result: number[]\
    \ = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      result.push(item);\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  let i: number;\n\
    \  let j: number;\n  let k: number;\n  let l1: number;\n  let l2: number;\n  let\
    \ len: number;\n  for (i = 0, len = l1.length; i < len; i++) {\n    l1 = l1[i];\n\
    \    for (j = 0, len2 = l2.length; j < len2; j++) {\n      l2 = l2[j];\n     \
    \ if (l1 === l2) {\n        l.push(l1);\n        break;\n      }\n      if (l1\
    \ < l2) {\n        k = l1;\n        l1 = l2;\n        l2 = k;\n      }\n    }\n\
    \  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const result = [];\n  let j = 0;\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    while (j < l2.length && l1[i] === l2[j]) {\n    \
    \  j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n\
    \  }\n  return result;\n}\n", "  const l: number[] = [];\n  let j = 0;\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n   \
    \   l[j] = l1[i];\n      j++;\n    }\n  }\n  return l;\n}\n", "  const l: number[]\
    \ = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j <\
    \ l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length)\
    \ {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result = [];\n\
    \  const hash1 = new Set();\n  const hash2 = new Set();\n  for (let i = 0; i <\
    \ l1.length; i++) {\n    hash1.add(l1[i]);\n  }\n  for (let i = 0; i < l2.length;\
    \ i++) {\n    hash2.add(l2[i]);\n  }\n  for (let i = 0; i < l1.length; i++) {\n\
    \    if (hash1.has(l1[i]) && hash2.has(l2[i])) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  const\
    \ hashMap = new Map<number, number>();\n  for (let i = 0; i < l1.length; i++)\
    \ {\n    const key = l1[i];\n    if (!hashMap.has(key)) {\n      hashMap.set(key,\
    \ i);\n      result.push(key);\n    }\n  }\n  for (let i = 0; i < l2.length; i++)\
    \ {\n    const key = l2[i];\n    if (!hashMap.has(key)) {\n      hashMap.set(key,\
    \ i);\n      result.push(key);\n    }\n  }\n  return result;\n}\n", "  var result\
    \ = [];\n  for (var i = 0; i < l1.length; i++) {\n    for (var j = 0; j < l2.length;\
    \ j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n        break;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n   \
    \   l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const result = [];\n  let\
    \ j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length &&\
    \ l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const set1 = new Set(l1);\n  const set2 = new\
    \ Set(l2);\n  const result = [];\n  for (const item of set1) {\n    if (set2.has(item))\
    \ {\n      result.push(item);\n    }\n  }\n  return result;\n}\n", "  const l:\
    \ number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n \
    \   if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n \
    \     break;\n    }\n  }\n  return l;\n}\n", "  var result = [];\n  var i = 0;\n\
    \  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n    \
    \  result.push(l1[i]);\n      i++;\n    } else {\n      result.push(l2[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  var result = [];\n  for (var i = 0; i\
    \ < l1.length; i++) {\n    for (var j = 0; j < l2.length; j++) {\n      if (l1[i]\
    \ === l2[j]) {\n        result.push(l1[i]);\n        break;\n      }\n    }\n\
    \  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i\
    \ < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result: number[] = [];\n  let j = 0;\n\
    \  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] ===\
    \ l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0;\
    \ i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result = [];\n  let j = 0;\n  for (let\
    \ i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n\
    \      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n  \
    \  }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i =\
    \ 0; i < l1.length; i++) {\n    const found = false;\n    for (let j = 0; j <\
    \ l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        found = true;\n   \
    \     break;\n      }\n    }\n    if (!found) {\n      l.push(l1[i]);\n    }\n\
    \  }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  var result: number[] = [];\n  for (var i = 0; i < l1.length;\
    \ i++) {\n    for (var j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
    \ {\n        result.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return\
    \ result;\n}\n", "  const result = [];\n  let i = 0;\n  while (i < l1.length &&\
    \ i < l2.length) {\n    if (l1[i] === l2[i]) {\n      result.push(l1[i]);\n  \
    \    i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n}\n", " \
    \ const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
    \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l:\
    \ number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n \
    \   if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n \
    \     i++;\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  let j\
    \ = 0;\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !==\
    \ -1) {\n      l.push(l1[i]);\n      j++;\n    }\n  }\n  return l;\n}\n", "  const\
    \ l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n\
    \    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
    \      break;\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n   \
    \   l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n\
    \  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n\
    \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n\
    \  for (let i = 0; i < l1.length; i++) {\n    const found: boolean = l2.some((x:\
    \ number) => x === l1[i]);\n    if (!found) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const l: number[] = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n    }\n \
    \ }\n  return l;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i <\
    \ l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  let j = 0;\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i])\
    \ {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for (let i\
    \ = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n\
    \    }\n  }\n  return l;\n}\n", "  const result: number[] = [];\n  let j = 0;\n\
    \  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] ===\
    \ l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  let j = 0;\n  let\
    \ i = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j])\
    \ {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] <\
    \ l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    while (j < l2.length && l1[i] === l2[j]) {\n      j++;\n    }\n\
    \    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n\
    \    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
    }\n", "  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result\
    \ = [];\n  for (let i = 0; i < set1.length; i++) {\n    if (set2.has(set1.get(i)))\
    \ {\n      result.push(set1.get(i));\n    }\n  }\n  return result;\n}\n", "  var\
    \ result: number[] = [];\n  var i = 0;\n  while (i < l1.length && i < l2.length)\
    \ {\n    if (l1[i] === l2[i]) {\n      result.push(l1[i]);\n      i++;\n    }\
    \ else {\n      break;\n    }\n  }\n  return result;\n}\n", "  var result = [];\n\
    \  for (var i = 0; i < l1.length; i++) {\n    for (var j = 0; j < l2.length; j++)\
    \ {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n        break;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  const l: number[] = [];\n  for\
    \ (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n   \
    \   l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n\
    \  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n\
    \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n", "  const l: number[] = [];\n\
    \  const result: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n   \
    \ if (l2.indexOf(l1[i]) === -1) {\n      l.push(l1[i]);\n    }\n  }\n  for (let\
    \ j = 0; j < l2.length; j++) {\n    if (l.indexOf(l2[j]) === -1) {\n      result.push(l2[j]);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  const hashMap =\
    \ new Map<number, number>();\n  for (let i = 0; i < l1.length; i++) {\n    const\
    \ val = l1[i];\n    if (!hashMap.has(val)) {\n      hashMap.set(val, 1);\n   \
    \   result.push(val);\n    } else {\n      hashMap.set(val, hashMap.get(val) +\
    \ 1);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const val = l2[i];\n\
    \    if (!hashMap.has(val)) {\n      hashMap.set(val, 1);\n      result.push(val);\n\
    \    } else {\n      hashMap.set(val, hashMap.get(val) + 1);\n    }\n  }\n  return\
    \ result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
