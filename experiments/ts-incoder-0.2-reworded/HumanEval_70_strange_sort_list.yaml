name: HumanEval_70_strange_sort_list
language: ts
prompt: "//Given array of integers, return array in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n\
  // [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>>\
  \ strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
  \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
  \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
  \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["  if (lst.length === 0) {\n    return [];\n  }\n\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n\n  return lst.sort((a, b) => {\n    if (a ===\
    \ min) {\n      return b;\n    }\n    if (b === min) {\n      return a;\n    }\n\
    \    return a - b;\n  });\n}\n", "  if (lst.length === 0) {\n    return lst;\n\
    \  }\n  const min = lst[0];\n  const max = lst.reduce((max, val) => Math.max(max,\
    \ val), -Infinity);\n  const min = lst.reduce((min, val) => Math.min(min, val),\
    \ Infinity);\n  return lst.sort((a, b) => {\n    if (a < min) {\n      return\
    \ -1;\n    }\n    if (a > max) {\n      return 1;\n    }\n    if (b < min) {\n\
    \      return -1;\n    }\n    if (b > max) {\n      return 1;\n    }\n    return\
    \ 0;\n  });\n}\n", "  if (lst.length === 0) {\n    return lst;\n  }\n  const min\
    \ = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n",
  "  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
    \  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return\
    \ strange_sort_list(left).concat(strange_sort_list(right)).concat([min]).concat(max);\n\
    }\n", "  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n\n  return lst.sort((a, b) => {\n    if (a ===\
    \ min) {\n      return -1;\n    }\n    if (b === min) {\n      return 1;\n   \
    \ }\n    if (a === max) {\n      return 1;\n    }\n    if (b === max) {\n    \
    \  return -1;\n    }\n    return a - b;\n  });\n}\n", "  const sorted = lst.slice();\n\
    \  sorted.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a\
    \ < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sorted;\n}\n",
  "  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n\
    }\n", "  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = lst[0];\n\
    \  const max = lst.reduce((max, num) => Math.max(max, num), -Infinity);\n  const\
    \ min = Math.min(min, max);\n  const max = Math.max(min, max);\n  const middle\
    \ = Math.round(lst.length / 2);\n\n  return strange_sort_list(\n    lst.slice(0,\
    \ middle).concat([min, max]).concat(lst.slice(middle))\n  );\n}\n", "  const len\
    \ = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(len / 2);\n  const\
    \ left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n", "  const len = lst.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  let min: number = lst[0];\n  let max: number =\
    \ lst[0];\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min\
    \ = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\
    \  const result: number[] = [];\n  for (let i = 0; i < len; i++) {\n    const\
    \ val = lst[i];\n    if (val < min) {\n      result.push(val);\n    } else if\
    \ (val > max) {\n      result.push(val);\n    } else {\n      result.push(min);\n\
    \      result.push(max);\n    }\n  }\n  return result;\n}\n", "  if (lst.length\
    \ === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max\
    \ = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n  const left\
    \ = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return strange_sort_list(left).concat([min],\
    \ strange_sort_list(right));\n}\n", "  const minValue = lst[0];\n  const maxValue\
    \ = lst[lst.length - 1];\n  const minIndex = lst.indexOf(minValue);\n  const maxIndex\
    \ = lst.indexOf(maxValue);\n  const sortedList = lst.slice(minIndex, maxIndex\
    \ + 1);\n  return sortedList;\n}\n", "  let min = Math.min(...lst);\n  let max\
    \ = Math.max(...lst);\n  let result = [];\n  for (let i = min; i <= max; i++)\
    \ {\n    result.push(i);\n  }\n  return result;\n}\n", "  let min: number = lst[0];\n\
    \  let max: number = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if\
    \ (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n    \
    \  max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  for (let i = min;\
    \ i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n", "  let min:\
    \ number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n  while\
    \ (min < max) {\n    result.push(min);\n    min = min + 1;\n  }\n  result.push(max);\n\
    \  return result;\n}\n", "  if (lst.length === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n",
  "  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
    \  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return\
    \ strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n", "  const\
    \ sorted_list = lst.slice();\n  sorted_list.sort((a, b) => a - b);\n  return sorted_list;\n\
    }\n", "  const sorted: number[] = [];\n  let min: number = Number.MAX_SAFE_INTEGER;\n\
    \  let max: number = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      sorted.push(min);\n    } else if (lst[i]\
    \ > max) {\n      sorted.push(max);\n    } else {\n      sorted.push(lst[i]);\n\
    \    }\n  }\n  return sorted;\n}\n", "  if (lst.length === 0) {\n    return lst;\n\
    \  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const\
    \ mid = Math.floor(lst.length / 2);\n  return strange_sort_list(\n    lst.slice(0,\
    \ mid).concat([max, min, ...lst.slice(mid)])\n  );\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
