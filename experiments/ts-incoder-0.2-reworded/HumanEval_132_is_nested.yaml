name: HumanEval_132_is_nested
language: ts
prompt: "//Create a function that takes a string as input which contains only square\
  \ brackets.\n// The function should return true if and only if there is a valid\
  \ subsequence of brackets \n// where at least one bracket in the subsequence is\
  \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
  )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n//\
  \ false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n//\
  \ true\nfunction is_nested(string: string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
  ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
  [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
  [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
  []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
  [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();"
completions: ["\tlet open_brackets = 0;\n\tlet close_brackets = 0;\n\tlet open_brackets_stack:\
    \ string[] = [];\n\tlet close_brackets_stack: string[] = [];\n\n\tfor (let i =\
    \ 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif (char === '[')\
    \ {\n\t\t\topen_brackets_stack.push(char);\n\t\t\topen_brackets++;\n\t\t} else\
    \ if (char === ']') {\n\t\t\tclose_brackets_stack.push(char);\n\t\t\tclose_brackets++;\n\
    \t\t} else if (char === ']' && open_brackets_stack.length > 0 && close_brackets_stack.length\
    \ > 0) {\n\t\t\tlet open_bracket = open_brackets_stack.pop();\n\t\t\tlet close_bracket\
    \ = close_brackets_stack.pop();\n\t\t\tif (open_bracket === close_bracket) {\n\
    \t\t\t\tclose_brackets--;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn open_brackets === close_brackets;\n\
    }\n", "    let brackets = string.match(/\\[.*?\\]/g);\n    if (brackets) {\n \
    \       let nested = false;\n        for (let i = 0; i < brackets.length; i++)\
    \ {\n            if (brackets[i].match(/[\\[\\]]/)) {\n                nested\
    \ = true;\n                break;\n            }\n        }\n        return nested;\n\
    \    }\n    return false;\n}\n", "    // Create a stack to keep track of brackets.\n\
    \    const stack: string[] = [];\n    // Iterate over the string and push brackets\
    \ to the stack.\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(\"[\");\n        } else if (string[i] ===\
    \ \"]\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        } else if (string[i] === \"\
    [\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            stack.push(\"[\");\n        } else if (string[i] ===\
    \ \"]\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    // If there are\
    \ any brackets left on the stack then there must be a nested bracket.\n    return\
    \ stack.length > 0;\n}\n", "    let brackets: number[] = [];\n    let open_brackets:\
    \ number[] = [];\n    let close_brackets: number[] = [];\n    let open_quotes:\
    \ number[] = [];\n    let close_quotes: number[] = [];\n    let open_parens: number[]\
    \ = [];\n    let close_parens: number[] = [];\n    let open_curly: number[] =\
    \ [];\n    let close_curly: number[] = [];\n    let open_angle: number[] = [];\n\
    \    let close_angle: number[] = [];\n    let open_paren_curly: number[] = [];\n\
    \    let close_paren_curly: number[] = [];\n    let open_paren_angle: number[]\
    \ = [];\n    let close_paren_angle: number[] = [];\n    let open_curly_curly:\
    \ number[] = [];\n    let close_curly_curly: number[] = [];\n    let open_curly_angle:\
    \ number[] = [];\n    let close_curly_angle: number[] = [];\n    let open_angle_curly:\
    \ number[] = [];\n    let close_angle_curly: number[] = [];\n    let open_angle_paren:\
    \ number[] = [];\n    let close_angle_paren: number[] = [];\n    let open_angle_paren_curly:\
    \ number[] = [];\n    let close_angle_paren_curly: number[] = [];\n    let open_angle_curly_curly:\
    \ number[] = [];\n    let close_angle_curly_curly: number[] = [];\n    let open_angle_curly_angle:\
    \ number[] = [];\n    let close_angle_curly_angle: number[] = [];\n    let open_angle_paren_curly_angle:\
    \ number[] = [];\n    let close_angle_paren_curly_angle: number[] = [];\n    let\
    \ open_angle_paren_curly_curly: number[] = [];\n    let close_angle_paren_curly_curly:\
    \ number[] = [];\n    let open_angle_paren_curly_angle_curly: number[] = [];\n\
    \    let close_angle_paren_curly_angle_curly: number[] = [];\n    let open_angle_curly_angle_curly:\
    \ number[] = [];\n    let close_angle_curly_angle_curly: number[] = [];\n    let\
    \ open_angle_paren_curly_angle_curly: number[] = [];\n    let close_angle_paren_curly_angle_curly:\
    \ number[] = [];\n    let open_angle_curly_angle_paren: number[] = [];\n    let\
    \ close_angle_curly_angle_paren: number[] = [];\n    let open_angle_paren_curly_angle_paren:\
    \ number[] = [];\n    let close_angle_paren_curly_angle_paren: number[] = [];\n\
    \    let open_angle_curly_angle_paren_curly: number[] = [];\n    let close_angle_curly_angle_paren_curly:\
    \ number[] = [];\n    let open_angle_paren_", "\tlet stack: string[] = [];\n\t\
    let open_brackets: number[] = [];\n\tlet close_brackets: number[] = [];\n\tlet\
    \ open_curly: number[] = [];\n\tlet close_curly: number[] = [];\n\tlet open_paren:\
    \ number[] = [];\n\tlet close_paren: number[] = [];\n\tlet open_brackets_stack:\
    \ number[] = [];\n\tlet close_brackets_stack: number[] = [];\n\tlet open_curly_stack:\
    \ number[] = [];\n\tlet close_curly_stack: number[] = [];\n\tlet open_paren_stack:\
    \ number[] = [];\n\tlet close_paren_stack: number[] = [];\n\tlet open_brackets_stack_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string: string[] = [];\n\tlet open_curly_stack_string:\
    \ string[] = [];\n\tlet close_curly_stack_string: string[] = [];\n\tlet open_paren_stack_string:\
    \ string[] = [];\n\tlet close_paren_stack_string: string[] = [];\n\tlet open_brackets_stack_string_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string_string: string[] = [];\n\t\
    let open_curly_stack_string_string: string[] = [];\n\tlet close_curly_stack_string_string:\
    \ string[] = [];\n\tlet open_paren_stack_string_string: string[] = [];\n\tlet\
    \ close_paren_stack_string_string: string[] = [];\n\tlet open_brackets_stack_string_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string_string: string[] = [];\n\t\
    let open_curly_stack_string_string: string[] = [];\n\tlet close_curly_stack_string_string:\
    \ string[] = [];\n\tlet open_paren_stack_string_string: string[] = [];\n\tlet\
    \ close_paren_stack_string_string: string[] = [];\n\tlet open_brackets_stack_string_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string_string: string[] = [];\n\t\
    let open_curly_stack_string_string: string[] = [];\n\tlet close_curly_stack_string_string:\
    \ string[] = [];\n\tlet open_paren_stack_string_string: string[] = [];\n\tlet\
    \ close_paren_stack_string_string: string[] = [];\n\tlet open_brackets_stack_string_string:\
    \ string[] = [];\n\tlet close_brackets_stack_string_string: string[] = [];\n\t\
    let open_curly_stack_string_string: string[] = [];\n\tlet close_curly_stack_string_string:\
    \ string[] = [];\n\tlet open_paren_stack_string_string: string[] = [];\n\tlet\
    \ close_paren_stack_string_string: string[] = [];\n\t", "    let stack: string[]\
    \ = [];\n    let open_brackets: number[] = [];\n    let close_brackets: number[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            open_brackets.push(i);\n        } else\
    \ if (char === ']') {\n            close_brackets.push(i);\n        } else if\
    \ (char === '[' || char === ']') {\n            if (open_brackets.length === 0)\
    \ {\n                return false;\n            }\n            let open_bracket\
    \ = open_brackets.pop();\n            let close_bracket = close_brackets.pop();\n\
    \            if (close_bracket < open_bracket) {\n                return false;\n\
    \            }\n            stack.push(string[i]);\n        }\n    }\n    if (open_brackets.length\
    \ !== 0 || close_brackets.length !== 0) {\n        return false;\n    }\n    return\
    \ true;\n}\n", "    let open_brackets: number[] = [];\n    let close_brackets:\
    \ number[] = [];\n    for (let i = 0; i < string.length; i++) {\n        let char\
    \ = string[i];\n        if (char === '[') {\n            open_brackets.push(i);\n\
    \        } else if (char === ']') {\n            close_brackets.push(i);\n   \
    \     }\n    }\n    if (open_brackets.length !== close_brackets.length) {\n  \
    \      return false;\n    }\n    for (let i = 0; i < open_brackets.length; i++)\
    \ {\n        let open = open_brackets[i];\n        let close = close_brackets[i];\n\
    \        if (open < close) {\n            return false;\n        }\n        let\
    \ open_bracket = open_brackets[i];\n        let close_bracket = close_brackets[i];\n\
    \        for (let j = open + 1; j < close_bracket; j++) {\n            if (string[j]\
    \ === '[') {\n                open_bracket++;\n            } else if (string[j]\
    \ === ']') {\n                close_bracket++;\n            }\n        }\n   \
    \     if (open_bracket !== close_bracket) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\n", "\tlet brackets = 0;\n\tlet open_brackets\
    \ = 0;\n\tlet close_brackets = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\
    \t\tlet char = string[i];\n\t\tif (char === '[') {\n\t\t\tbrackets++;\n\t\t\t\
    if (brackets === 1) {\n\t\t\t\topen_brackets++;\n\t\t\t}\n\t\t} else if (char\
    \ === ']') {\n\t\t\tbrackets--;\n\t\t\tif (brackets === 0) {\n\t\t\t\tclose_brackets++;\n\
    \t\t\t}\n\t\t} else if (char === '[' && brackets === 0) {\n\t\t\tclose_brackets++;\n\
    \t\t} else if (char === ']' && brackets === 0) {\n\t\t\topen_brackets--;\n\t\t\
    }\n\t}\n\treturn open_brackets <= close_brackets;\n}\n", "    // TODO: Write a\
    \ function that takes a string as input which contains only square brackets.\n\
    \    // The function should return true if and only if there is a valid subsequence\
    \ of brackets \n    // where at least one bracket in the subsequence is nested.\n\
    \    // >>> is_nested(\"[[]]\")\n    // true\n    // >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    // false\n    // >>> is_nested(\"[][]\")\n    // false\n    // >>> is_nested(\"\
    []\")\n    // false\n    // >>> is_nested(\"[[][]]\")\n    // true\n    // >>>\
    \ is_nested(\"[[]][[\")\n    // true\n}\n", "\tlet brackets: number[] = [];\n\t\
    let open_brackets: number[] = [];\n\tlet closed_brackets: number[] = [];\n\tlet\
    \ open_brackets_length: number = 0;\n\tlet closed_brackets_length: number = 0;\n\
    \tlet open_chars: number[] = [];\n\tlet close_chars: number[] = [];\n\tlet open_chars_length:\
    \ number = 0;\n\tlet close_chars_length: number = 0;\n\tlet open_char: string\
    \ = \"\";\n\tlet close_char: string = \"\";\n\tlet open_char_index: number = 0;\n\
    \tlet close_char_index: number = 0;\n\tlet open_char_index2: number = 0;\n\tlet\
    \ close_char_index2: number = 0;\n\tlet open_char_index3: number = 0;\n\tlet close_char_index3:\
    \ number = 0;\n\tlet open_char_index4: number = 0;\n\tlet close_char_index4: number\
    \ = 0;\n\tlet open_char_index5: number = 0;\n\tlet close_char_index5: number =\
    \ 0;\n\tlet open_char_index6: number = 0;\n\tlet close_char_index6: number = 0;\n\
    \tlet open_char_index7: number = 0;\n\tlet close_char_index7: number = 0;\n\t\
    let open_char_index8: number = 0;\n\tlet close_char_index8: number = 0;\n\tlet\
    \ open_char_index9: number = 0;\n\tlet close_char_index9: number = 0;\n\tlet open_char_index10:\
    \ number = 0;\n\tlet close_char_index10: number = 0;\n\tlet open_char_index11:\
    \ number = 0;\n\tlet close_char_index11: number = 0;\n\tlet open_char_index12:\
    \ number = 0;\n\tlet close_char_index12: number = 0;\n\tlet open_char_index13:\
    \ number = 0;\n\tlet close_char_index13: number = 0;\n\tlet open_char_index14:\
    \ number = 0;\n\tlet close_char_index14: number = 0;\n\tlet open_char_index15:\
    \ number = 0;\n\tlet close_char_index15: number = 0;\n\tlet open_char_index16:\
    \ number = 0;\n\tlet close_char_index16: number = 0;\n\tlet open_char_index17:\
    \ number = 0;\n\tlet close_char_index17: number = 0;\n\tlet open_char_index18:\
    \ number = 0;\n\tlet close_char_index18: number = 0;\n\tlet open_char_index19:\
    \ number = 0;\n\tlet close_char_index19: number = 0;\n\tlet open_char_index20:\
    \ number = 0;\n\tlet close_char_index20: number = 0;\n\tlet open_char_index21:\
    \ number = 0;\n\tlet close_char_index21: number = 0;\n", "\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_brackets_index = 0;\n\tlet close_brackets_index = 0;\n\tlet\
    \ open_brackets_length = 0;\n\tlet close_brackets_length = 0;\n\tlet open_brackets_index_in_string\
    \ = 0;\n\tlet close_brackets_index_in_string = 0;\n\tlet open_brackets_length_in_string\
    \ = 0;\n\tlet close_brackets_length_in_string = 0;\n\tlet open_brackets_index_in_string_in_string\
    \ = 0;\n\tlet close_brackets_index_in_string_in_string = 0;\n\tlet open_brackets_length_in_string_in_string\
    \ = 0;\n\tlet close_brackets_length_in_string_in_string = 0;\n\tlet open_brackets_index_in_string_in_string_in_string\
    \ = 0;\n\tlet close_brackets_index_in_string_in_string_in_string = 0;\n\tlet open_brackets_length_in_string_in_string_in_string\
    \ = 0;\n\tlet close_brackets_length_in_string_in_string_in_string = 0;\n\tlet\
    \ open_brackets_index_in_string_in_string_in_string = 0;\n\tlet close_brackets_index_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_length_in_string_in_string_in_string = 0;\n\tlet close_brackets_length_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_index_in_string_in_string_in_string = 0;\n\tlet close_brackets_index_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_length_in_string_in_string_in_string = 0;\n\tlet close_brackets_length_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_index_in_string_in_string_in_string = 0;\n\tlet close_brackets_index_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_length_in_string_in_string_in_string = 0;\n\tlet close_brackets_length_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_index_in_string_in_string_in_string = 0;\n\tlet close_brackets_index_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_length_in_string_in_string_in_string = 0;\n\tlet close_brackets_length_in_string_in_string_in_string\
    \ = 0;\n\tlet open_brackets_index_in_string_in_string_in_string = 0;\n\tlet close",
  "    let brackets: string[] = string.split(\"\");\n    let open_brackets: number[]\
    \ = [];\n    let closed_brackets: number[] = [];\n    let open_brackets_length:\
    \ number = 0;\n    let closed_brackets_length: number = 0;\n    for (let i = 0;\
    \ i < brackets.length; i++) {\n        if (brackets[i] == \"[\")\n           \
    \ open_brackets.push(open_brackets_length);\n        if (brackets[i] == \"]\"\
    )\n            closed_brackets.push(closed_brackets_length);\n        if (brackets[i]\
    \ == \"[\")\n            open_brackets_length++;\n        if (brackets[i] == \"\
    ]\")\n            closed_brackets_length++;\n    }\n    if (open_brackets.length\
    \ != closed_brackets.length)\n        return false;\n    for (let i = 0; i < open_brackets.length;\
    \ i++) {\n        if (open_brackets[i] != closed_brackets[i])\n            return\
    \ false;\n    }\n    return true;\n}\n", "    let brackets: number[] = [];\n \
    \   let open_brackets: number[] = [];\n    let close_brackets: number[] = [];\n\
    \    let open_brackets_stack: number[] = [];\n    let close_brackets_stack: number[]\
    \ = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];\n    let open_brackets_size: number[] = [];\n    let close_brackets_size:\
    \ number[] = [];", "    const stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        const char = string[i];\n        if (char === '[') {\n     \
    \       stack.push(char);\n        } else if (char === ']') {\n            if\
    \ (stack.length === 0) {\n                return false;\n            }\n     \
    \       const top = stack.pop();\n            if (top !== ']') {\n           \
    \     return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] == \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] == \"]\") {\n            if (stack.length == 0)\
    \ {\n                return false;\n            }\n            let openBracket\
    \ = stack.pop();\n            if (openBracket != string[i]) {\n              \
    \  return false;\n            }\n        }\n    }\n    return stack.length ==\
    \ 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n\
    \    return false;\n}\n", "    let stack: string[] = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        let char = string[i];\n        if (char ===\
    \ '[') {\n            stack.push(char);\n        } else if (char === ']') {\n\
    \            if (stack.length !== 0) {\n                let openBracket = stack.pop();\n\
    \                if (openBracket !== '[') {\n                    return false;\n\
    \                }\n            } else {\n                return false;\n    \
    \        }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n\
    \    }\n    return true;\n}\n", "    let open_brackets: number[] = [];\n    let\
    \ closed_brackets: number[] = [];\n    let open_brackets_length: number = 0;\n\
    \    let closed_brackets_length: number = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            open_brackets[open_brackets_length]\
    \ = i;\n            open_brackets_length++;\n        } else if (string[i] ===\
    \ \"]\") {\n            closed_brackets[closed_brackets_length] = i;\n       \
    \     closed_brackets_length++;\n        }\n    }\n    if (open_brackets_length\
    \ + closed_brackets_length === 0) {\n        return false;\n    }\n    for (let\
    \ i = 0; i < open_brackets_length; i++) {\n        for (let j = 0; j < closed_brackets_length;\
    \ j++) {\n            if (open_brackets[i] === closed_brackets[j]) {\n       \
    \         return false;\n            }\n        }\n    }\n    return true;\n}\n",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        let char = string[i];\n        if (char === '[') {\n            stack.push('[');\n\
    \        } else if (char === ']') {\n            if (stack.length === 0) {\n \
    \               return false;\n            }\n            let openBracket = stack.pop();\n\
    \            if (openBracket !== '[') {\n                return false;\n     \
    \       }\n        } else if (char === '\\'') {\n            stack.push('\\'');\n\
    \        } else if (char === '\\'') {\n            stack.push('\\'');\n      \
    \  } else if (char === '\\'') {\n            stack.push('\\'');\n        } else\
    \ if (char === '\\'') {\n            stack.push('\\'');\n        } else if (char\
    \ === '\\'') {\n            stack.push('\\'');\n        } else if (char === '\\\
    '') {\n            stack.push('\\'');\n        } else if (char === '\\'') {\n\
    \            stack.push('\\'');\n        } else if (char === '\\'') {\n      \
    \      stack.push('\\'');\n        } else if (char === '\\'') {\n            stack.push('\\\
    '');\n        } else if (char === '\\'') {\n            stack.push('\\'');\n \
    \       } else if (char === '\\'') {\n            stack.push('\\'');\n       \
    \ } else if (char === '\\'') {\n            stack.push('\\'');\n        } else\
    \ if (char === '\\'') {\n            stack.push('\\'');\n        } else if (char\
    \ === '\\'') {\n            stack.push('\\'');\n        } else if (char === '\\\
    '') {\n            stack.push('\\'');\n        } else if (char === '\\'') {\n\
    \            stack.push('\\'');\n        } else if (char === '\\'') {\n      \
    \      stack.push('\\'');\n        } else if (char === '\\'') {\n            stack.push('\\\
    '');\n        } else if (char === '\\'') {\n            stack.push('\\'');\n \
    \       } else if (char === '\\'') {\n            stack.push('\\'');\n       \
    \ } else if (char === '\\'') {\n            stack.push('\\'');\n        } else\
    \ if (char === '\\'') {\n            stack.push('\\'');\n        } else if (char\
    \ === '\\'') {\n            stack.push('\\'');\n        } else if (char === '\\\
    '') {\n            stack.push('\\'');\n        } else if (char === '\\'') {\n\
    \            stack.push('\\'');\n        } else if (char === '\\'') {\n      \
    \      stack.push('\\'');\n        } else if (char === '\\'') {\n            stack.push('\\\
    '');\n        } else if (char === '\\'') {\n            stack.push('\\'');\n \
    \       } else if (char === '\\'') {\n            stack.push('\\'');\n       \
    \ } else if (char === '\\'') {\n            stack.push('\\'');\n        } else\
    \ if (char === '\\'') {\n            stack.push('\\'');\n        } else if (char\
    \ === '\\'') {\n            stack.push('\\''", "\tlet brackets = string.match(/\\\
    [.*?\\]/g);\n\tlet brackets_count = brackets ? brackets.length : 0;\n\tlet brackets_count_nested\
    \ = 0;\n\tlet brackets_count_nested2 = 0; //count nested brackets\n\tlet brackets_count_nested3\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested4 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested5 = 0; //count nested brackets\n\tlet brackets_count_nested6\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested7 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested8 = 0; //count nested brackets\n\tlet brackets_count_nested9\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested10 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested11 = 0; //count nested brackets\n\tlet\
    \ brackets_count_nested12 = 0; //count nested brackets\n\tlet brackets_count_nested13\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested14 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested15 = 0; //count nested brackets\n\tlet\
    \ brackets_count_nested16 = 0; //count nested brackets\n\tlet brackets_count_nested17\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested18 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested19 = 0; //count nested brackets\n\tlet\
    \ brackets_count_nested20 = 0; //count nested brackets\n\tlet brackets_count_nested21\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested22 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested23 = 0; //count nested brackets\n\tlet\
    \ brackets_count_nested24 = 0; //count nested brackets\n\tlet brackets_count_nested25\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested26 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested27 = 0; //count nested brackets\n\tlet\
    \ brackets_count_nested28 = 0; //count nested brackets\n\tlet brackets_count_nested29\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested30 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested31 = 0; //count nested brackets\n\tlet\
    \ brackets_count_nested32 = 0; //count nested brackets\n\tlet brackets_count_nested33\
    \ = 0; //count nested brackets\n\tlet brackets_count_nested34 = 0; //count nested\
    \ brackets\n\tlet brackets_count_nested35 = 0; //count nested brackets\n\tlet "]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
