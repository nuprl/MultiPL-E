name: HumanEval_21_rescale_to_unit
language: ts
prompt: "//Given array of numbers (of at least two elements), apply a linear transform\
  \ to that array,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
  \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
  \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0,\
  \ 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
  \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
completions: ["    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range / numbers.length;\n   \
    \ const offset = min - min % scale;\n    return numbers.map(n => n * scale + offset);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range / Math.max(min, max);\n\
    \    return numbers.map(x => x * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = numbers.map((number) => {\n        const rescaled = ((number -\
    \ min) / range) * 2.0 - 1.0;\n        return rescaled;\n    });\n    return new_numbers;\n\
    }\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  const range = max - min;\n  const scale = range / Math.max(...numbers);\n \
    \ return numbers.map(n => n * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min + range / 2);\n    }\n    return new_numbers;\n\
    }\n", "    let min = Math.min(numbers[0], numbers[1]);\n    let max = Math.max(numbers[0],\
    \ numbers[1]);\n    let range = (max - min);\n    let scale = (range == 0) ? 0\
    \ : 1 / (range + 1);\n    let rescaled = [];\n    for (let i = 0; i < numbers.length;\
    \ ++i) {\n        rescaled.push(numbers[i] * scale);\n    }\n    return rescaled;\n\
    }\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  const range = max - min;\n  const scale = (range == 0) ? 0 : (numbers[0] -\
    \ min) / range;\n  return numbers.map(x => x * scale);\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = (max - min);\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] = new_numbers[i] / range;\n    }\n    return new_numbers;\n}\n",
  "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  const scale = range / numbers.length;\n  return numbers.map(x\
    \ => min + x * scale);\n}\n", "  const min = Math.min(...numbers);\n  const max\
    \ = Math.max(...numbers);\n  const range = max - min;\n  const scale = range /\
    \ numbers.length;\n  return numbers.map(n => min + n * scale);\n}\n", "    var\
    \ min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
    \ numbers[1]);\n    var range = (max - min);\n    var new_numbers: number[] =\
    \ [];\n    for (var i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    new_numbers = new_numbers.map(function (num) {\n       \
    \ return num / range;\n    });\n    return new_numbers;\n}\n", "    const min\
    \ = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const new_numbers: number[] = [];\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range /\
    \ 2);\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min);\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers[i] += range / new_numbers.length;\n    }\n    return\
    \ new_numbers;\n}\n", "    const min = Math.min(...numbers);\n    const max =\
    \ Math.max(...numbers);\n    const range = max - min;\n    const new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] += range / new_numbers.length;\n    }\n    return new_numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let rescaled: number[] = [];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min) / range;\n\
    \    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n   \
    \ let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min * range / numbers.length);\n    }\n    return new_numbers;\n}\n", "  \
    \  const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range / numbers.length;\n   \
    \ const new_numbers = numbers.map(n => n * scale);\n    return new_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    const min =\
    \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const new_numbers: number[] = [];\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range /\
    \ 2);\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = numbers.map(n => (n - min) / range);\n    return new_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] *= range / new_numbers.length;\n    }\n    return new_numbers;\n\
    }\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  const range = max - min;\n  const scale = range ? range / min : 1;\n  return\
    \ numbers.map(n => n * scale);\n}\n", "    const min_value = numbers[0];\n   \
    \ const max_value = numbers[0];\n    for (let i = 1; i < numbers.length; i++)\
    \ {\n        const value = numbers[i];\n        if (value < min_value) {\n   \
    \         min_value = value;\n        }\n        if (value > max_value) {\n  \
    \          max_value = value;\n        }\n    }\n    const scale = (max_value\
    \ - min_value) / (numbers.length - 1);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min_value) * scale + min_value;\n\
    \    }\n    return numbers;\n}\n", "    const min = Math.min(...numbers);\n  \
    \  const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min);\n    }\n    for (let i = 0; i < new_numbers.length;\
    \ i++) {\n        new_numbers[i] = (new_numbers[i] / range) * 2.0 - 1.0;\n   \
    \ }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n \
    \   const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = numbers.map((number) => {\n        const rescaled = ((number -\
    \ min) / range) * 2.0 - 1.0;\n        return rescaled + 0.5;\n    });\n    return\
    \ new_numbers;\n}\n", "    var min = Math.min(numbers[0], numbers[1]);\n    var\
    \ max = Math.max(numbers[0], numbers[1]);\n    var range = (max - min);\n    var\
    \ new_numbers: number[] = [];\n    for (var i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] + range * (numbers[i + 1] - numbers[i]));\n\
    \    }\n    return new_numbers;\n}\n", "    const min_value = Math.min(...numbers);\n\
    \    const max_value = Math.max(...numbers);\n    const range = max_value - min_value;\n\
    \    const scale = range / numbers.length;\n    return numbers.map(n => n * scale);\n\
    }\n", "    const min_value = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n\
    \    const range = max_value - min_value;\n    const scale = range / numbers.length;\n\
    \    return numbers.map(x => x * scale);\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min) / range;\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : 1 / (range + 1);\n    return numbers.map(n => n *\
    \ scale);\n}\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range / numbers.length;\n   \
    \ const offset = min - min % scale;\n    return numbers.map(n => n * scale + offset);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = (range == 0) ? 0 : (numbers[0]\
    \ - min) / range;\n    return numbers.map(x => x * scale);\n}\n", "    const min\
    \ = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const new_numbers = numbers.map(n => (n - min) / range);\n\
    \    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    const scale =\
    \ range / numbers.length;\n    return numbers.map(n => n * scale);\n}\n", "  \
    \  let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
    \ scale = (max - min) / (max - min);\n    let new_numbers = numbers.map(n => n\
    \ * scale);\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min);\n    }\n    for (let i = 0; i < new_numbers.length;\
    \ i++) {\n        new_numbers[i] *= (range / new_numbers.length);\n    }\n   \
    \ return new_numbers;\n}\n", "    var min = Math.min(numbers[0], numbers[1]);\n\
    \    var max = Math.max(numbers[0], numbers[1]);\n    var range = max - min;\n\
    \    var new_numbers: number[] = [];\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n    new_numbers.push(range);\n\
    \    return new_numbers;\n}\n", "    var min = Math.min(numbers[0], numbers[1]);\n\
    \    var max = Math.max(numbers[0], numbers[1]);\n    var range = max - min;\n\
    \    var scale = (range == 0) ? 0 : ((range + 1.0) / range);\n    var new_numbers\
    \ = [];\n    for (var i = 0; i < numbers.length; ++i) {\n        new_numbers.push(numbers[i]\
    \ * scale);\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range / numbers.length;\n    return numbers.map(n => n * scale);\n}\n",
  "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  const scale = range / numbers.length;\n  return numbers.map(n\
    \ => min + n * scale);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    const scale =\
    \ (range == 0) ? 0 : (numbers.length - 1) / (range + 1);\n    return numbers.map(n\
    \ => min + scale * n);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    const scale =\
    \ range / numbers.length;\n    const new_numbers = numbers.map(n => n * scale);\n\
    \    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    const scale =\
    \ (range == 0) ? 0 : 1 / (range + 1);\n    return numbers.map(n => min + scale\
    \ * n);\n}\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  const range = max - min;\n  const scale = range / Math.max(...numbers);\n \
    \ return numbers.map(n => n * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min + range / 2);\n    }\n    return new_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = (range == 0) ? 0 : (numbers.length\
    \ - 1) / (range + 1);\n    return numbers.map(n => min + scale * n);\n}\n", " \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range == 0 ? 0 : range / max;\n\
    \    return numbers.map(n => n * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = new Array(numbers.length);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers[i] = numbers[i] - min;\n    }\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        new_numbers[i] /= range;\n    }\n   \
    \ return new_numbers;\n}\n", "    var min = Math.min(numbers[0], numbers[1]);\n\
    \    var max = Math.max(numbers[0], numbers[1]);\n    var range = (max - min);\n\
    \    var scale = (range == 0) ? 0 : ((numbers[1] - numbers[0]) / range);\n   \
    \ var result: number[] = [];\n    for (var i = 0; i < numbers.length; ++i) {\n\
    \        result.push(numbers[i] * scale + min);\n    }\n    return result;\n}\n",
  "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let scale\
    \ = (range == 0) ? 0 : (1 / range);\n    return numbers.map(x => x * scale);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scaled_numbers = numbers.map(n => n /\
    \ range);\n    return scaled_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let rescaled:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < rescaled.length; i++) {\n        rescaled[i]\
    \ = rescaled[i] * range / Math.max(...rescaled);\n    }\n    return rescaled;\n\
    }\n", "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const\
    \ min = Math.min(numbers[0], numbers[1]);\n    const max = Math.max(numbers[0],\
    \ numbers[1]);\n    const range = max - min;\n    const scale = range / numbers.length;\n\
    \    const new_numbers = new Array(numbers.length);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers[i] = numbers[i] * scale;\n    }\n    return new_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range / numbers.length;\n   \
    \ return numbers.map(x => min + (x * scale));\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min + range / 2);\n    }\n    return new_numbers;\n\
    }\n", "    if (numbers.length <= 1) {\n        return numbers;\n    }\n    const\
    \ min = Math.min(numbers[0], numbers[1]);\n    const max = Math.max(numbers[0],\
    \ numbers[1]);\n    const range = max - min;\n    const new_numbers: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min) / range;\n    }\n    return new_numbers;\n}\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (range / (max - min));\n\
    \    var new_numbers = [];\n    for (var i = 0; i < numbers.length; i++) {\n \
    \       new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers = numbers.map(n => n - min)\
    \ / range;\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range / Math.max(...numbers);\n    const result = numbers.map(x => min\
    \ + x * scale);\n    return result;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range == 0 ? 0 : range / (max - min);\n    return numbers.map(n => n\
    \ * scale);\n}\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range / numbers.length;\n   \
    \ const rescaled = [];\n    for (let i = 0; i < numbers.length; i++) {\n     \
    \   rescaled.push(numbers[i] * scale);\n    }\n    return rescaled;\n}\n", " \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = (range == 0) ? 0 : (numbers.length\
    \ - 1) / (range + 1);\n    return numbers.map(n => min + scale * n);\n}\n", " \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  const scale = (range == 0) ? 0 : (min + max) / range;\n\
    \  return numbers.map(x => x * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range / numbers.length;\n    return numbers.map(n => min + n * scale);\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let new_numbers: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i]\
    \ = new_numbers[i] / range;\n    }\n    return new_numbers;\n}\n", "    let min\
    \ = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range\
    \ = (max - min);\n    let scaled_numbers: number[] = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        scaled_numbers.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < scaled_numbers.length; i++) {\n        scaled_numbers[i]\
    \ = (scaled_numbers[i] / range) * 2 - 1;\n    }\n    return scaled_numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let rescaled: number[] = [];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min + range\
    \ / 2);\n    }\n    return rescaled;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : (numbers.length - 1) / (range + 1);\n    return numbers.map(x\
    \ => min + ((x - min) * scale));\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : (numbers[0] - min) / range;\n    return numbers.map(n\
    \ => n * scale);\n}\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  const range = max - min;\n  const offset = min - min % range;\n  const scale\
    \ = range / range;\n  return numbers.map(n => n * scale + offset);\n}\n", "  \
    \  let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
    \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        new_numbers.push(numbers[i] + min / range);\n\
    \    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let rescaled:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < rescaled.length; i++) {\n        rescaled[i]\
    \ = rescaled[i] * range / Math.max(min, max);\n    }\n    return rescaled;\n}\n",
  "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
    \ range = max - min;\n    let scaled_numbers = numbers.map(n => n / range);\n\
    \    return scaled_numbers;\n}\n", "    let min = Math.min(...numbers);\n    let\
    \ max = Math.max(...numbers);\n    let range = max - min;\n    let rescaled: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < rescaled.length; i++) {\n        rescaled[i]\
    \ = rescaled[i] / range;\n    }\n    return rescaled;\n}\n", "    const min =\
    \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const scale = (range == 0) ? 0 : 1 / (range + 1);\n    return\
    \ numbers.map(x => x * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = numbers.map(n => (n - min) / range);\n    return new_numbers;\n\
    }\n", "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
    \ numbers[1]);\n    var range = (max - min);\n    var scale = (range == 0) ? 0\
    \ : ((range - min) / range);\n    var new_numbers = new Array<number>(numbers.length);\n\
    \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] *= range / new_numbers.length;\n    }\n    return new_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range / Math.max(...numbers);\n\
    \    return numbers.map(n => min + n * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : (1 / range);\n    return numbers.map(n => n * scale);\n\
    }\n", "    const min_value = numbers[0];\n    const max_value = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min_value)\
    \ {\n            min_value = numbers[i];\n        }\n        if (numbers[i] >\
    \ max_value) {\n            max_value = numbers[i];\n        }\n    }\n    const\
    \ scale = (max_value - min_value) / (numbers.length - 1);\n    const scaled_numbers\
    \ = numbers.map(n => n * scale);\n    return scaled_numbers;\n}\n", "    const\
    \ min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const\
    \ range = max - min;\n    const scale = (range == 0) ? 0 : (1 / range);\n    return\
    \ numbers.map(n => n * scale);\n}\n", "    if (numbers.length < 2) {\n       \
    \ return numbers;\n    }\n    const min = Math.min(numbers[0], numbers[1]);\n\
    \    const max = Math.max(numbers[0], numbers[1]);\n    const range = max - min;\n\
    \    const scale = range / numbers.length;\n    const new_numbers = new Array(numbers.length);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        new_numbers[i] = min\
    \ + scale * numbers[i];\n    }\n    return new_numbers;\n}\n", "    let min =\
    \ Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range =\
    \ max - min;\n    let scale = (range == 0) ? 0 : (1 / range);\n    return numbers.map(n\
    \ => n * scale);\n}\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  const range = max - min;\n  const scale = (range == 0) ? 0 : (numbers.length\
    \ - 1) / (max - min);\n  return numbers.map(n => n * scale);\n}\n", "  const min\
    \ = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range\
    \ = max - min;\n  const scale = range / 1.0;\n  return numbers.map(x => min +\
    \ x * scale);\n}\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let new_numbers: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min)\
    \ / range;\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = new Array(numbers.length);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers[i] = numbers[i] - min;\n    }\n    for (let i =\
    \ 0; i < new_numbers.length; i++) {\n        new_numbers[i] = (new_numbers[i]\
    \ / range) * 2 - 1;\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : (numbers.length - 1) / (range + 1);\n    return numbers.map(n\
    \ => min + scale * n);\n}\n", "    const min_value = Math.min(...numbers);\n \
    \   const max_value = Math.max(...numbers);\n    const range = max_value - min_value;\n\
    \    const scaled_numbers = numbers.map(n => n / range);\n    return scaled_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : (numbers[1] - numbers[0]) /\
    \ range;\n    var new_numbers = new Array<number>(numbers.length);\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i] * scale\
    \ + min;\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers[i]\
    \ = (new_numbers[i] / range) * 100;\n    }\n    return new_numbers;\n}\n", " \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min * range / numbers.length);\n    }\n    return new_numbers;\n}\n", "  \
    \  const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers = numbers.map(n => n - min)\
    \ / range;\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min);\n    }\n    for (let i = 0; i < new_numbers.length;\
    \ i++) {\n        new_numbers[i] = (new_numbers[i] / range) * 2.0 - 1.0;\n   \
    \ }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n   \
    \ let max = Math.max(...numbers);\n    let range = max - min;\n    let rescaled:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < rescaled.length; i++) {\n        rescaled[i]\
    \ = rescaled[i] / range;\n    }\n    return rescaled;\n}\n", "    const min =\
    \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const new_numbers: number[] = [];\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n\
    \    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i] =\
    \ (new_numbers[i] / range) * 2 - 1;\n    }\n    return new_numbers;\n}\n", " \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range / numbers.length;\n   \
    \ return numbers.map(x => min + (x * scale));\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scaled_numbers = numbers.map(n => (n - min) / range);\n    return scaled_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] = (new_numbers[i] / range);\n    }\n    return new_numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let scale = (range == 0) ? 0 : 1 / (range + 1);\n\
    \    return numbers.map(n => n * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : (numbers.length - 1) / (range + 1);\n    return numbers.map(n\
    \ => min + scale * n);\n}\n", "    let min = Math.min(...numbers);\n    let max\
    \ = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let rescaled:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < rescaled.length; i++) {\n        rescaled[i]\
    \ = rescaled[i] / range;\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] += range / new_numbers.length;\n    }\n    return new_numbers;\n\
    }\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  const range = max - min;\n  const scale = (range == 0) ? 0 : 1 / (range + 1);\n\
    \  return numbers.map(n => n * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = numbers.map(n => (n - min) / range * 2);\n    return new_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = (range === 0) ? 0 : (1 / range);\n\
    \    return numbers.map(n => n * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min + range / 2);\n    }\n    return new_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range / numbers.length;\n   \
    \ const new_numbers = numbers.map(n => n * scale);\n    return new_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range / Math.max(...numbers);\n\
    \    return numbers.map(n => n * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : 1 / (range + 1);\n    return numbers.map(x => x *\
    \ scale);\n}\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let rescaled: number[] = [];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled[i] =\
    \ rescaled[i] / range;\n    }\n    return rescaled;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range / numbers.length;\n    const new_numbers = numbers.map(n => min\
    \ + scale * n);\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : (1 / range);\n    return numbers.map(n => n * scale);\n\
    }\n", "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const\
    \ min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const\
    \ range = max - min;\n    const new_numbers: number[] = [];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i]\
    \ *= (range / numbers.length);\n    }\n    return new_numbers;\n}\n", "    const\
    \ min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const\
    \ range = max - min;\n    const scale = range / numbers.length;\n    return numbers.map(n\
    \ => min + n * scale);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    const scale =\
    \ (range == 0) ? 0 : (numbers.length - 1) / (range + 1);\n    return numbers.map(n\
    \ => min + scale * n);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    const scale =\
    \ (range == 0) ? 0 : 1 / (range + 1);\n    return numbers.map(x => x * scale);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = (range == 0) ? 0 : (1 / range);\n\
    \    return numbers.map(n => n * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range / numbers.length;\n    return numbers.map(n => min + n * scale);\n\
    }\n", "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const\
    \ min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const\
    \ range = max - min;\n    const scale = (range === 0) ? 0 : (range / numbers.length);\n\
    \    return numbers.map(n => min + scale * n);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range / numbers.length;\n    const offset = min - min % scale;\n   \
    \ return numbers.map(n => n * scale + offset);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range / numbers.length;\n    const rescaled = [];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] * scale);\n\
    \    }\n    return rescaled;\n}\n", "    const min = Math.min(...numbers);\n \
    \   const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : (min + max) / range;\n    return numbers.map(n =>\
    \ n * scale);\n}\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers = numbers.map(n => n - min)\
    \ / range;\n    return new_numbers;\n}\n", "  const min = Math.min(...numbers);\n\
    \  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale\
    \ = (range == 0) ? 0 : (numbers.length - 1) / (range + 1);\n  return numbers.map(n\
    \ => min + scale * n);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    const scale =\
    \ (range == 0) ? 0 : 1 / (range + 1);\n    return numbers.map(n => n * scale);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers = numbers.map(n => (n - min)\
    \ / range);\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range / numbers.length;\n    const new_numbers = numbers.map(n => n\
    \ * scale);\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = new Array(numbers.length);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers[i] = numbers[i] - min;\n    }\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        new_numbers[i] *= (range / numbers.length);\n\
    \    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] + min / range);\n    }\n    return new_numbers;\n\
    }\n", "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
    \ numbers[1]);\n    var range = (max - min);\n    var new_numbers = new Array<number>(numbers.length);\n\
    \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
    \ - min;\n    }\n    new_numbers[0] = new_numbers[0] / range;\n    new_numbers[1]\
    \ = new_numbers[1] / range;\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = new Array(numbers.length);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers[i] = numbers[i] - min;\n    }\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        new_numbers[i] = new_numbers[i] / range;\n\
    \    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scaled_numbers = numbers.map(n => n / range);\n    return scaled_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range ? 1.0 / (max - min) : 0.0;\n\
    \    return numbers.map(n => min + scale * n);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min + range / 2);\n    }\n    return new_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers = numbers.map(n => (n - min)\
    \ / range);\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : 1 / (range + 1);\n    return numbers.map(x => x *\
    \ scale);\n}\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let scale = (range == 0) ? 0 : (1 / range);\n\
    \    return numbers.map(x => x * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min);\n    }\n    for (let i = 0; i < new_numbers.length;\
    \ i++) {\n        new_numbers[i] += range / new_numbers.length;\n    }\n    return\
    \ new_numbers;\n}\n", "    const min = Math.min(...numbers);\n    const max =\
    \ Math.max(...numbers);\n    const range = max - min;\n    const scaled_numbers\
    \ = numbers.map(n => n / range);\n    return scaled_numbers;\n}\n", "  const min\
    \ = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range\
    \ = max - min;\n  const scale = (range == 0) ? 0 : (numbers.length - 1) / (range\
    \ + 1);\n  return numbers.map(x => min + scale * (x - min));\n}\n", "  const min\
    \ = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range\
    \ = max - min;\n  const scale = (range == 0) ? 0 : (numbers.length - 1) / (range\
    \ + 1);\n  return numbers.map(n => min + (n - min) * scale);\n}\n", "    const\
    \ min_value = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n\
    \    const range = max_value - min_value;\n    const new_numbers = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min_value);\n    }\n    for (let i = 0; i < numbers.length; i++) {\n     \
    \   new_numbers[i] = (new_numbers[i] - min_value) / range;\n    }\n    return\
    \ new_numbers;\n}\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  const range = max - min;\n  const scale = range / numbers.length;\n  return\
    \ numbers.map(n => min + n * scale);\n}\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (numbers[1] - numbers[0])\
    \ / range;\n    var new_numbers = new Array<number>(numbers.length);\n    for\
    \ (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
    \ * scale + min;\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : (numbers.length - 1) / (range + 1);\n    return numbers.map(x\
    \ => min + ((x - min) * scale));\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = (max - min);\n    let scaled_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        scaled_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < scaled_numbers.length; i++) {\n    \
    \    scaled_numbers[i] = (scaled_numbers[i] / range);\n    }\n    return scaled_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = (range == 0) ? 0 : 1 / (range\
    \ + 1);\n    return numbers.map(n => n * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range / Math.max(...numbers);\n    return numbers.map(n => min + n *\
    \ scale);\n}\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  const range = max - min;\n  const new_numbers = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    new_numbers.push(numbers[i] - min + range / 2);\n\
    \  }\n  return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n    let\
    \ max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    const min =\
    \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const new_numbers = new Array(numbers.length);\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i] - min;\n\
    \    }\n    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i]\
    \ *= range / new_numbers[i];\n    }\n    return new_numbers;\n}\n", "    const\
    \ min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const\
    \ range = max - min;\n    const new_numbers: number[] = [];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i]\
    \ = (new_numbers[i] / range) * 100;\n    }\n    return new_numbers;\n}\n", " \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ let range = max - min;\n    let rescaled: number[] = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min);\n    }\n\
    \    for (let i = 0; i < rescaled.length; i++) {\n        rescaled[i] = rescaled[i]\
    \ / range;\n    }\n    return rescaled;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min);\n    }\n    for (let i = 0; i < new_numbers.length;\
    \ i++) {\n        new_numbers[i] *= range / new_numbers.length;\n    }\n    return\
    \ new_numbers;\n}\n", "    const min = Math.min(...numbers);\n    const max =\
    \ Math.max(...numbers);\n    const range = max - min;\n    const new_numbers =\
    \ new Array(numbers.length);\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers[i] = numbers[i] - min;\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers[i] = (new_numbers[i] / range) * 2.0 - 1.0;\n   \
    \ }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n   \
    \ let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers[i]\
    \ = new_numbers[i] / range;\n    }\n    return new_numbers;\n}\n", "  const min\
    \ = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range\
    \ = max - min;\n  const scale = range / numbers.length;\n  return numbers.map(n\
    \ => min + n * scale);\n}\n", "  const min = Math.min(...numbers);\n  const max\
    \ = Math.max(...numbers);\n  const range = max - min;\n  const new_numbers = numbers.map(n\
    \ => n / range);\n  return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = numbers.map(n => n / range);\n    return new_numbers;\n}\n", " \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scaled_numbers = numbers.map(n => n /\
    \ range);\n    return scaled_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : 1 / (max - min);\n    return numbers.map(n => n *\
    \ scale);\n}\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let rescaled: number[] = [];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled[i] +=\
    \ range / numbers.length;\n    }\n    return rescaled;\n}\n", "    const min =\
    \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const scale = range / numbers.length;\n    return numbers.map(n\
    \ => min + n * scale);\n}\n", "    const min_value = numbers[0];\n    const max_value\
    \ = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        const\
    \ value = numbers[i];\n        if (value < min_value) {\n            min_value\
    \ = value;\n        }\n        if (value > max_value) {\n            max_value\
    \ = value;\n        }\n    }\n    const scale = (max_value - min_value) / (numbers.length\
    \ - 1);\n    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] =\
    \ (numbers[i] - min_value) * scale + min_value;\n    }\n    return numbers;\n}",
  "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = (range == 0) ? 0 : (1 / range);\n\
    \    return numbers.map(n => n * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range / numbers.length;\n    const rescaled = [];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] * scale);\n\
    \    }\n    return rescaled;\n}\n", "    const min_value = numbers[0];\n    const\
    \ max_value = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n  \
    \      const value = numbers[i];\n        if (value < min_value) {\n         \
    \   min_value = value;\n        }\n        if (value > max_value) {\n        \
    \    max_value = value;\n        }\n    }\n    const range = max_value - min_value;\n\
    \    const new_min_value = min_value / range;\n    const new_max_value = max_value\
    \ / range;\n    const new_numbers = new Array<number>(numbers.length);\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
    \ * range + new_min_value;\n    }\n    return new_numbers;\n}", "    const min\
    \ = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const scale = range == 0 ? 0 : range / max;\n    return numbers.map(n\
    \ => n * scale);\n}\n", "    if (numbers.length < 2) {\n        return numbers;\n\
    \    }\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range / numbers.length;\n   \
    \ return numbers.map(x => min + scale * x);\n}\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = range / 2;\n    var new_min = min - new_range;\n\
    \    var new_max = max + new_range;\n    var new_numbers = new Array<number>(numbers.length);\n\
    \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = ((numbers[i]\
    \ - new_min) * new_range) / new_range;\n    }\n    return new_numbers;\n}\n",
  "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
    \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range\
    \ / 2);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = (max - min);\n    let scale\
    \ = (range == 0) ? 0 : 1 / (max - min);\n    return numbers.map(n => n * scale);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range ? 1.0 / (max - min) : 0.0;\n\
    \    return numbers.map(x => x * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range / Math.max(min, max);\n    return numbers.map(x => x * scale);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] = (new_numbers[i] / range) * 100;\n    }\n    return new_numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let rescaled: number[] = [];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < rescaled.length; i++) {\n        rescaled[i] =\
    \ rescaled[i] * range / max;\n    }\n    return rescaled;\n}\n", "    const min\
    \ = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const new_numbers: number[] = [];\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n\
    \    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i] *=\
    \ (range / new_numbers.length);\n    }\n    return new_numbers;\n}\n", "  const\
    \ min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range\
    \ = max - min;\n  const scale = (range === 0) ? 0 : (1 / range);\n  return numbers.map(n\
    \ => n * scale);\n}\n", "    const min = Math.min(...numbers);\n    const max\
    \ = Math.max(...numbers);\n    const range = max - min;\n    const new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] = (new_numbers[i] / range);\n    }\n    return new_numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let rescaled: number[] = [];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min);\n\
    \    }\n    for (let i = 0; i < rescaled.length; i++) {\n        rescaled[i] =\
    \ rescaled[i] * range / rescaled[rescaled.length - 1];\n    }\n    return rescaled;\n\
    }\n", "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const\
    \ min = Math.min(numbers[0], numbers[1]);\n    const max = Math.max(numbers[0],\
    \ numbers[1]);\n    const range = max - min;\n    const new_numbers: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min / range);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let scale = (max - min) / (max - min);\n\
    \    return numbers.map(n => n * scale);\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = (max - min);\n    let rescaled:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled[i]\
    \ = rescaled[i] / range;\n    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] = (new_numbers[i] / range) * 2 - 1;\n    }\n    return new_numbers;\n\
    }\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  const range = max - min;\n  const new_numbers: number[] = [];\n  for (let i\
    \ = 0; i < numbers.length; i++) {\n    new_numbers.push(numbers[i] - min + range\
    \ / 2);\n  }\n  return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min * range / 2);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let rescaled:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i]\
    \ - min) / range;\n    }\n    return rescaled;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = numbers.map(n => n / range);\n    return new_numbers;\n}\n", " \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min / range);\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : (numbers.length - 1) / (range + 1);\n    return numbers.map(x\
    \ => min + ((x - min) * scale));\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : 1 / (range + 1);\n    return numbers.map(x => x *\
    \ scale);\n}\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers = numbers.map((number) =>\
    \ {\n        const scaled_number = (number - min) / range;\n        return scaled_number;\n\
    \    });\n    return new_numbers;\n}\n", "    if (numbers.length < 2) {\n    \
    \    return numbers;\n    }\n    const min_value = numbers[0];\n    const max_value\
    \ = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        const\
    \ value = numbers[i];\n        if (value < min_value) {\n            min_value\
    \ = value;\n        }\n        if (value > max_value) {\n            max_value\
    \ = value;\n        }\n    }\n    const scale = (max_value - min_value) / (numbers.length\
    \ - 1);\n    const scaled_numbers = new Array<number>(numbers.length);\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        scaled_numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return scaled_numbers;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
