name: HumanEval_21_rescale_to_unit
language: ts
prompt: "//Given array of numbers (of at least two elements), apply a linear transform\
  \ to that array,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
  \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
  \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0,\
  \ 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
  \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
completions: ["    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range / numbers.length;\n   \
    \ const offset = min - min % scale;\n    return numbers.map(n => n * scale + offset);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range / Math.max(min, max);\n\
    \    return numbers.map(x => x * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = numbers.map((number) => {\n        const rescaled = ((number -\
    \ min) / range) * 2.0 - 1.0;\n        return rescaled;\n    });\n    return new_numbers;\n\
    }\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  const range = max - min;\n  const scale = range / Math.max(...numbers);\n \
    \ return numbers.map(n => n * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min + range / 2);\n    }\n    return new_numbers;\n\
    }\n", "    let min = Math.min(numbers[0], numbers[1]);\n    let max = Math.max(numbers[0],\
    \ numbers[1]);\n    let range = (max - min);\n    let scale = (range == 0) ? 0\
    \ : 1 / (range + 1);\n    let rescaled = [];\n    for (let i = 0; i < numbers.length;\
    \ ++i) {\n        rescaled.push(numbers[i] * scale);\n    }\n    return rescaled;\n\
    }\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  const range = max - min;\n  const scale = (range == 0) ? 0 : (numbers[0] -\
    \ min) / range;\n  return numbers.map(x => x * scale);\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = (max - min);\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] = new_numbers[i] / range;\n    }\n    return new_numbers;\n}\n",
  "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
    \ range = max - min;\n  const scale = range / numbers.length;\n  return numbers.map(x\
    \ => min + x * scale);\n}\n", "  const min = Math.min(...numbers);\n  const max\
    \ = Math.max(...numbers);\n  const range = max - min;\n  const scale = range /\
    \ numbers.length;\n  return numbers.map(n => min + n * scale);\n}\n", "    var\
    \ min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
    \ numbers[1]);\n    var range = (max - min);\n    var new_numbers: number[] =\
    \ [];\n    for (var i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    new_numbers = new_numbers.map(function (num) {\n       \
    \ return num / range;\n    });\n    return new_numbers;\n}\n", "    const min\
    \ = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const new_numbers: number[] = [];\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range /\
    \ 2);\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min);\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        new_numbers[i] += range / new_numbers.length;\n    }\n    return\
    \ new_numbers;\n}\n", "    const min = Math.min(...numbers);\n    const max =\
    \ Math.max(...numbers);\n    const range = max - min;\n    const new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n       \
    \ new_numbers[i] += range / new_numbers.length;\n    }\n    return new_numbers;\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let rescaled: number[] = [];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] - min) / range;\n\
    \    }\n    return rescaled;\n}\n", "    let min = Math.min(...numbers);\n   \
    \ let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ + min * range / numbers.length);\n    }\n    return new_numbers;\n}\n", "  \
    \  const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range / numbers.length;\n   \
    \ const new_numbers = numbers.map(n => n * scale);\n    return new_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    const min =\
    \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const new_numbers: number[] = [];\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range /\
    \ 2);\n    }\n    return new_numbers;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
