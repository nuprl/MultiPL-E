{
  "language": "ts",
  "name": "HumanEval_161_solve",
  "results": [
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let answer = s.split('');\n    for (let i = 0; i < answer.length; i++) {\n        if (answer[i] === letterToUpperCase(answer[i])) {\n            answer[i] = letterToUpperCase(answer[i]);\n        } else if (answer[i] === letterToLowerCase(answer[i])) {\n            answer[i] = letterToLowerCase(answer[i]);\n        } else if (answer[i] === letterToTitleCase(answer[i])) {\n            answer[i] = letterToTitleCase(answer[i]);\n        }\n    }\n    return answer.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjxquqvb0.ts(16,27): error TS2304: Cannot find name 'letterToUpperCase'.\n../../../../tmp/tmpjxquqvb0.ts(17,25): error TS2304: Cannot find name 'letterToUpperCase'.\n../../../../tmp/tmpjxquqvb0.ts(18,34): error TS2304: Cannot find name 'letterToLowerCase'.\n../../../../tmp/tmpjxquqvb0.ts(19,25): error TS2304: Cannot find name 'letterToLowerCase'.\n../../../../tmp/tmpjxquqvb0.ts(20,34): error TS2304: Cannot find name 'letterToTitleCase'.\n../../../../tmp/tmpjxquqvb0.ts(21,25): error TS2304: Cannot find name 'letterToTitleCase'.\n",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    const lower = /[a-z]+/gi;\n    const upper = /[A-Z]+/gi;\n\n    return s.replace(lower, upper).replace(upper, lower);\n}\n\n<|/ file filename=leetcode.js |>\n<| c |>\nI don't understand your solution. Could you give an example? The one I wrote seems to work.\n<|/ c |>\n<| c |>\nI've updated my answer. Hope that helps!\n<|/ c |>\n<| c |>\nthanks a lot! that makes a lot of sense. I had misunderstood the purpose of the toLowerCase method.\n<|/ c |>\n<| a tags=javascript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_p6mbhi0.ts(20,3): error TS1110: Type expected.\n../../../../tmp/tmp_p6mbhi0.ts(20,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_p6mbhi0.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmp_p6mbhi0.ts(21,7): error TS1109: Expression expected.\n../../../../tmp/tmp_p6mbhi0.ts(22,3): error TS1005: ';' expected.\n../../../../tmp/tmp_p6mbhi0.ts(22,3): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp_p6mbhi0.ts(22,92): error TS1002: Unterminated string literal.\n../../../../tmp/tmp_p6mbhi0.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmp_p6mbhi0.ts(23,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_p6mbhi0.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmp_p6mbhi0.ts(24,7): error TS1109: Expression expected.\n../../../../tmp/tmp_p6mbhi0.ts(25,2): error TS1005: ';' expected.\n../../../../tmp/tmp_p6mbhi0.ts(25,41): error TS1002: Unterminated string literal.\n../../../../tmp/tmp_p6mb",
      "timestamp": 1660334874
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i += 1) {\n        const char = s[i];\n        // case 1: If s[i] is a letter, lowercase it and add it to the result.\n        // case 2: If s[i] is a number, reverse it case.\n        // case 3: If s[i] is a punctuation, keep it as it is.\n        switch (char) {\n            case 'a':\n            case 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n            case 'l':\n            case 'm':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case 's':\n            case 't':\n            case 'u':\n            case 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n            case 'z':\n                result += char.toLowerCase();\n                break;\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n                result += char.split(\"\").reverse().join(\"\");\n                break;\n            default:\n                result += char;\n                break;\n        }\n    }\n    if (result === '') {\n        return s.split(\"\").reverse().join(\"\");\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpo5o5tgu_.js:74:12)\n    at Object.<anonymous> (/tmp/tmpo5o5tgu_.js:83:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let result: string = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s[i];\n    const charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      result += String.fromCharCode(charCode + 32 - char);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqtsyc1j4.ts(19,53): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.split('').reverse().join('') \n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_ef4b289.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmp_ef4b289.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_ef4b289.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmp_ef4b289.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_ef4b289.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmp_ef4b289.ts(18,6): error TS1005: ';' expected.\n../../../../tmp/tmp_ef4b289.ts(18,16): error TS1109: Expression expected.\n../../../../tmp/tmp_ef4b289.ts(20,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334874
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            newString += s[s.charCodeAt(i) - 97];\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            newString += s[s.charCodeAt(i) - 65];\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Aundefinedfundefined'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpzdp8nknu.js:31:12)\n    at Object.<anonymous> (/tmp/tmpzdp8nknu.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Aundefinedfundefined',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334874
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let finalString = \"\"\n  \n  for (let i=0; i<s.length; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      finalString = finalString.concat(s[i].toUpperCase())\n    }\n    else {\n      finalString = finalString.concat(s[i])\n    }\n  }\n  \n  return finalString.trim()\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpr8vhm0iz.js:28:12)\n    at Object.<anonymous> (/tmp/tmpr8vhm0iz.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  const result: string = s;\n  for (let i = 0; i < result.length; i++) {\n    const letter = result[i];\n    if (letter === letter.toLowerCase()) {\n      result[i] = letter.toUpperCase();\n    }\n    else if (letter === letter.toUpperCase()) {\n      result[i] = letter.toLowerCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpafnikm9q.ts(18,7): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpafnikm9q.ts(21,7): error TS2542: Index signature in type 'String' only permits reading.\n",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      s[i] = s[i].toUpperCase();\n    } else if (s[i] >= 'a' && s[i] <= 'z') {\n      s[i] = s[i].toLowerCase();\n    }\n  }\n  return s.split('').reverse().join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv04wn25l.ts(16,7): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpv04wn25l.ts(18,7): error TS2542: Index signature in type 'String' only permits reading.\n",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  s = s.replace(/@/g, \"\");\n  return s.replace(/[a-z]/gi, (char: string) => {\n    return char.toLowerCase() === char ? char.toUpperCase() : char;\n  }).replace(/[^a-zA-Z0-9]/gi, (char: string) => {\n    return char.toUpperCase();\n  });\n}\n\nconsole.log(solve(\"aaa\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"abacad\"));</code>\n<|/ a tags=javascript,algorithm dscore=2 |>\n<| c |>\nNicely done! One minor suggestion: you can replace `/[^a-zA-Z0-9]/` with `/\\D/`\n<|/ c |>\n<| c |>\nThanks, indeed that would work and it's faster! I'll update my answer.\n<|/ c |>\n<| a tags=javascript,algorithm dscore=1 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphkoaursq.ts(24,31): error TS1110: Type expected.\n../../../../tmp/tmphkoaursq.ts(24,32): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphkoaursq.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmphkoaursq.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphkoaursq.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmphkoaursq.ts(26,7): error TS1109: Expression expected.\n../../../../tmp/tmphkoaursq.ts(27,8): error TS1005: ';' expected.\n../../../../tmp/tmphkoaursq.ts(27,14): error TS1005: ';' expected.\n../../../../tmp/tmphkoaursq.ts(27,18): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphkoaursq.ts(27,36): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphkoaursq.ts(27,40): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphkoaursq.ts(27,52): error TS1443: Module declaration names may only use ' or \" quoted strings.\n../../../../tmp/tmphkoaursq.ts(27,74): error TS1005: '(' expected.\n../../../../tmp/tmphkoaursq.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmphkoaursq.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphkoaursq.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmphkoaursq.ts(29,7): error TS1109: Expression expected.\n../../../../tmp/tmphkoaursq.ts(30,16): error TS1005: ')' expected.\n../../../../tmp/tmphkoaursq.ts(30,21): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphkoaursq.ts(30,27): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphkoaursq.ts(30,32): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphkoaursq.ts(30,36): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphkoaursq.ts(30,51): error TS1005: ';' expected.\n../../../../tmp/tmphkoaursq.ts(30,54): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphkoaursq.ts(30,61): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphkoaursq.ts(",
      "timestamp": 1660334874
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let arr: string[] = s.split(\"\");\n    let res = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].match(/[a-z]/i)) {\n            arr[i] = arr[i].toLowerCase();\n        } else {\n            arr[i] = arr[i].toUpperCase();\n        }\n    }\n    res = arr.reduce((a: string, b: string) => a + b);\n    return res.split('').reverse().join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'fdsa'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpkn0y9238.js:30:12)\n    at Object.<anonymous> (/tmp/tmpkn0y9238.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'fdsa',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let newString = s;\n\n    for (let i = 0; i < s.length; i += 1) {\n        const char = s.charAt(i);\n        if (isAlpha(char)) {\n            const letter = char.toLowerCase();\n\n            if (newString.includes(letter)) {\n                newString = newString.replace(letter, letter.toUpperCase());\n            } else {\n                newString = newString.replace(char, char.toLowerCase());\n            }\n        }\n    }\n\n    if (newString.length === 0) return s;\n\n    return newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxwbc870q.ts(18,13): error TS2304: Cannot find name 'isAlpha'.\n",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  s = s.toLowerCase();\n  if (s.length === 0) {\n    return s;\n  }\n\n  const arr = [...s];\n\n  for (let i = 0; i < arr.length; i++) {\n    const char = arr[i];\n\n    if (char.charCodeAt(0) >= 48 && char.charCodeAt(0) <= 57) {\n      arr[i] = String.fromCharCode(char.charCodeAt(0) + 32);\n    } else if (char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90) {\n      arr[i] = String.fromCharCode(char.charCodeAt(0) - 26);\n    }\n  }\n\n  return arr.join('');\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\nconsole.log(solve(\"123\"));\nconsole.log(solve(\"1-2-3\"));\nconsole.log(solve(\"123A456\"));\nconsole.log(solve(\"123A456\"));\nconsole.log(solve(\"123abc\"));\nconsole.log(solve(\"123abc\"));\nconsole.log(solve(\"1234\"));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\nI see this as a case for using RegEx for character set checking. For instance\n<code>\nconst solve = str => {\n  const re = /^[A-Za-z0-9]+$/;\n  const isLetter = char => {\n    return /[A-Za-z]/.test(char);\n  };\n  const checkChar = char => {\n    if (re.test(char)) {\n      return char.toUpperCase();\n    } else {\n      return char;\n    }\n  };\n  return str.split('').map(checkChar).join('');\n};\n</code>\n<|/ a tags=javascript,arrays |>\n<| a |>\n<code>\nconst solution = (string) => {\n  let reverse = ''\n  const regex = /[A-z]+/g\n  string.split('')\n    .map((char) => {\n      return regex.test(char) ? char.toUpperCase() : char\n    })\n    .join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().join('')\n    .match(regex).reverse().\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzujhlolv.ts(43,29): error TS1110: Type expected.\n../../../../tmp/tmpzujhlolv.ts(43,30): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpzujhlolv.ts(44,2): error TS1109: Expression expected.\n../../../../tmp/tmpzujhlolv.ts(44,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpzujhlolv.ts(45,2): error TS1109: Expression expected.\n../../../../tmp/tmpzujhlolv.ts(45,6): error TS1005: ';' expected.\n../../../../tmp/tmpzujhlolv.ts(45,16): error TS1109: Expression expected.\n../../../../tmp/tmpzujhlolv.ts(46,3): error TS1005: ';' expected.\n../../../../tmp/tmpzujhlolv.ts(46,17): error TS1005: ';' expected.\n../../../../tmp/tmpzujhlolv.ts(46,26): error TS1005: '(' expected.\n../../../../tmp/tmpzujhlolv.ts(46,32): error TS1005: ';' expected.\n../../../../tmp/tmpzujhlolv.ts(46,38): error TS1005: ';' expected.\n../../../../tmp/tmpzujhlolv.ts(46,42): error TS1005: '(' expected.\n../../../../tmp/tmpzujhlolv.ts(46,52): error TS1005: ';' expected.\n../../../../tmp",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let arr: string[] = s.split(\"\");\n    return arr.map((el) => {\n        let lower = el.toLowerCase();\n        let upper = el.toUpperCase();\n        if (el === lower) {\n            return upper;\n        }\n        if (el === upper) {\n            return lower;\n        }\n        return el;\n    }).join(\"\");\n}\n</code>\n<|/ a tags=javascript |>\n<| c |>\nThis works but doesn't answer the question because you reversed \"1\" and \"2\" rather than \"1\" and \"3\"\n<|/ c |>\n<| c |>\nThank you for the comment. I added some more comments to the answer, hope it helps. :)\n<|/ c |>\n<| a |>\nYou can reverse characters by looping through characters. \n<code>\nvar str = \"abc\";\nvar newStr = str.reverse();\n</code>\n<|/ a tags=javascript dscore=0 |>\n<| c |>\nThis will not reverse the order of the letters, but reverse the order of the characters.\n<|/ c |>\n<| c |>\nOh, I missed that point. Thanks for pointing it out!\n<|/ c |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp298kza0b.ts(27,2): error TS1110: Type expected.\n../../../../tmp/tmp298kza0b.ts(27,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp298kza0b.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmp298kza0b.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp298kza0b.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmp298kza0b.ts(29,7): error TS1109: Expression expected.\n../../../../tmp/tmp298kza0b.ts(30,6): error TS1005: ';' expected.\n../../../../tmp/tmp298kza0b.ts(30,12): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp298kza0b.ts(30,16): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp298kza0b.ts(30,100): error TS1002: Unterminated string literal.\n../../../../tmp/tmp298kza0b.ts(31,2): error TS1109: Expression expected.\n../../../../tmp/tmp298kza0b.ts(31,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp298kza0b.ts(32,2): error TS1109: Expression ",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let result: string = \"\"\n  for (let i = 0; i<s.length; i++){\n    if(s[i].match(/[a-z]/i)) result = s[i].toUpperCase() + result\n    else result = s[i].toLowerCase() + result\n  }\n  return result\n}\n\nsolve(\"ab\") //AB\nsolve(\"a\") //a\nsolve(\"ab1\") //Ab1\nsolve(\"a1b1\") //a1B1\nsolve(\"a1b1\") //a1B1 \n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=javascript,string |>\nOne more approach with Array.from and String#replace methods:\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_ftb5_y9.ts(27,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_ftb5_y9.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmp_ftb5_y9.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_ftb5_y9.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmp_ftb5_y9.ts(29,6): error TS1005: ';' expected.\n../../../../tmp/tmp_ftb5_y9.ts(29,15): error TS1005: ';' expected.\n../../../../tmp/tmp_ftb5_y9.ts(29,39): error TS1109: Expression expected.\n../../../../tmp/tmp_ftb5_y9.ts(30,5): error TS1005: ';' expected.\n../../../../tmp/tmp_ftb5_y9.ts(30,10): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp_ftb5_y9.ts(30,24): error TS1005: '(' expected.\n../../../../tmp/tmp_ftb5_y9.ts(30,35): error TS1005: ')' expected.\n../../../../tmp/tmp_ftb5_y9.ts(30,39): error TS1435: Unknown keyword or identifier. Did you mean 'string'?\n../../../../tmp/tmp_ftb5_y9.ts(30,54): error TS1005: ';' expected.\n../../../../tmp/tmp_ftb5",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  s = s.replace(/\\W+/g, \"\").toLowerCase();\n  if (s.length === 0) {\n    return s;\n  }\n  if (s.match(/[a-z]/i)) {\n    return s.match(/[a-z]/i)\n      .map((x) => { return {lower: x.toLowerCase(), upper: x.toUpperCase()}; })\n      .reduce((a, b) => a.lower < b.lower ? a : b);\n  }\n  return s.match(/[0-9]/)\n    .map((x) => { return {lower: x.toLowerCase(), upper: x.toUpperCase()}; })\n    .reduce((a, b) => a.lower < b.lower ? a : b);\n}</code>\n\nHope this helps.\n<|/ a tags=javascript,algorithm,string,arrays,sorting |>\n<| c |>\nThis isn't very efficient, isn't it?\n<|/ c |>\n<| c |>\nIt doesn't work for the example: \"#a@c\", because it's only checking for lowercase and it's checking just \"a\" and not \"a@c\". I'd say this is the right answer though.\n<|/ c |>\n<| c |>\nIt does work for the example. Just try the example in your code snippet.\n<|/ c |>\n<| c |>\nWhat do you mean by \"It doesn't work\"? If you meant it only works for the lowercase version of the string, then the function works. If you meant it works only for uppercase version of the string, then my code doesn't work.\n<|/ c |>\n<| c |>\nI mean, when I put this example in my code it only works if the first letter in the string is uppercase. It doesn't work if the letters are lowercase\n<|/ c |>\n<| a tags=javascript,algorithm,string,arrays,sorting dscore=2 |>\nA very simple solution using string slice and string reverse functions:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpljkzrf78.ts(26,3): error TS1110: Type expected.\n../../../../tmp/tmpljkzrf78.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpljkzrf78.ts(28,1): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpljkzrf78.ts(28,11): error TS1005: ';' expected.\n../../../../tmp/tmpljkzrf78.ts(29,1): error TS1003: Identifier expected.\n../../../../tmp/tmpljkzrf78.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmpljkzrf78.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpljkzrf78.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmpljkzrf78.ts(30,7): error TS1109: Expression expected.\n../../../../tmp/tmpljkzrf78.ts(31,6): error TS1005: ';' expected.\n../../../../tmp/tmpljkzrf78.ts(31,32): error TS1005: ';' expected.\n../../../../tmp/tmpljkzrf78.ts(32,3): error TS1110: Type expected.\n../../../../tmp/tmpljkzrf78.ts(32,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpljkzrf78.ts(33,2): error TS1109: Expression expected.\n../../../../tmp/tmpljkzrf78.ts(33,7): error TS1109: Expression expected.\n../../../../tmp/tmpljkzrf78.ts(34,4): error TS1005: ':' expected.\n../../../../tmp/tmpljkzrf78.ts(34,53): error TS1005: ';' expected.\n../../../../tmp/tmpljkzrf78.ts(34,55): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpljkzrf78.ts(34,60): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpljkzrf78.ts(34,73): error TS1005: '(' expected.\n../../../../tmp/tmpljkzrf78.ts(34,83): error TS1005: ';' expected.\n../../../../tmp/tmpljkzrf78.ts(34,87): error TS1005: ';' expected.\n../../../../tmp/tmpljkzrf78.ts(34,89): error TS1005: ')' expected.\n../../../../tmp/tmpljkzrf78.ts(34,127): error TS1005: ';' expected.\n../../../../tmp/tmpljkzrf78.ts(34,129): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpljkzrf78.ts(34,138): error TS1005: ';' expected.\n../../../../tmp/tmpljkzrf78.ts(34,141): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpljkzr",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    \n    let result = \"\";\n    let charMap = new Map<string, string>();\n\n    for (let i = 0; i < s.length; i++){\n        let curr = s[i];\n        let lower = curr.toLowerCase();\n        let upper = curr.toUpperCase();\n\n        let lowerChar = charMap.get(lower);\n        let upperChar = charMap.get(upper);\n\n        if (lowerChar !== undefined) {\n            if (upperChar === undefined) {\n                result += upperChar;\n            } else {\n                result += lowerChar + upperChar;\n            }\n            charMap.delete(lower);\n        } else {\n            result += curr;\n            charMap.set(curr, curr);\n        }\n    }\n\n    if (charMap.size > 0){\n        for (let i = 0; i < charMap.keys.length; i++) {\n            result += charMap.get(charMap.keys[i]);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI ran your code and it works, but it doesn't work when there is multiple capital letters next to each other, for example, in the string \"aAa#\" it returns \"aAa#\". Also, your code only works for a single capital letter next to each other, like \"AB#\" returns \"B#\", but your expected output should be \"b#\". Is that because of your code? or did you just revise it? Thanks\n<|/ c |>\n<| a tags=algorithm,string,javascript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1j9lycdn.ts(46,2): error TS1110: Type expected.\n../../../../tmp/tmp1j9lycdn.ts(46,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp1j9lycdn.ts(47,2): error TS1109: Expression expected.\n../../../../tmp/tmp1j9lycdn.ts(47,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp1j9lycdn.ts(48,2): error TS1109: Expression expected.\n../../../../tmp/tmp1j9lycdn.ts(48,7): error TS1109: Expression expected.\n../../../../tmp/tmp1j9lycdn.ts(49,3): error TS1005: ';' expected.\n../../../../tmp/tmp1j9lycdn.ts(49,7): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1j9lycdn.ts(49,12): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1j9lycdn.ts(49,17): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1j9lycdn.ts(49,21): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1j9lycdn.ts(49,35): error TS1005: ';' expected.\n../../../../tmp/tmp1j9lycdn.ts(49,38): error TS1434: Unexpected keyword ",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    \n    let i = 0;\n    let result: string = '';\n\n    while (i < s.length) {\n        let c = s[i];\n        \n        if (c >= 'a' && c <= 'z') {\n            result = (c === 'z') ? result : result + c.toLowerCase();\n        } else if (c >= 'A' && c <= 'Z') {\n            result = (c === 'Z') ? result : result + c.toUpperCase();\n        } else if (c >= '0' && c <= '9') {\n            result = (c === '0') ? result : result + c;\n        }\n        \n        i++;\n    }\n    return result.length === 0 ? s.split('').reverse().join('') : result;\n}\n<|/ file ext=.ts source=github filename=day07.ts |>\n<| c |>\nI like the solution but, for the exercise the solution should use the string class and not any array method. I don't know what would be the best approach.\n<|/ c |>\n<| c |>\nThis solution is O(n) and also uses string methods. I would suggest to try the one with `forEach` first.\n<|/ c |>\n<| c |>\nI didn't notice that requirement before. I just edited my answer with working `forEach` solution.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1_rb7xvt.ts(33,3): error TS1110: Type expected.\n../../../../tmp/tmp1_rb7xvt.ts(33,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp1_rb7xvt.ts(34,2): error TS1109: Expression expected.\n../../../../tmp/tmp1_rb7xvt.ts(34,7): error TS1109: Expression expected.\n../../../../tmp/tmp1_rb7xvt.ts(35,3): error TS1005: ';' expected.\n../../../../tmp/tmp1_rb7xvt.ts(35,8): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1_rb7xvt.ts(35,12): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1_rb7xvt.ts(35,26): error TS1109: Expression expected.\n../../../../tmp/tmp1_rb7xvt.ts(35,30): error TS1005: '(' expected.\n../../../../tmp/tmp1_rb7xvt.ts(35,34): error TS1005: ';' expected.\n../../../../tmp/tmp1_rb7xvt.ts(35,43): error TS1005: ';' expected.\n../../../../tmp/tmp1_rb7xvt.ts(35,47): error TS1005: ')' expected.\n../../../../tmp/tmp1_rb7xvt.ts(35,56): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1_rb7xvt.ts(35,63): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1_rb7xvt.ts(35,67): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1_rb7xvt.ts(35,71): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1_rb7xvt.ts(35,88): error TS1005: '{' expected.\n../../../../tmp/tmp1_rb7xvt.ts(35,92): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1_rb7xvt.ts(35,96): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1_rb7xvt.ts(35,112): error TS1005: ';' expected.\n../../../../tmp/tmp1_rb7xvt.ts(35,112): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1_rb7xvt.ts(35,155): error TS1002: Unterminated string literal.\n../../../../tmp/tmp1_rb7xvt.ts(36,2): error TS1109: Expression expected.\n../../../../tmp/tmp1_rb7xvt.ts(36,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp1_rb7xvt.ts(37,2): error TS1109: Expression expected.\n../../../../tmp/tmp1_rb7xvt.ts(37,7): error TS1109: Expression expected.\n../../../../tmp/tmp1_",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  if (s.length == 0) return s;\n  if (s.includes('@')) return reverse(s, 0);\n  if (s.includes('#')) return reverse(s, 1);\n  for (let i = 0; i < s.length; i++) {\n    let ch = s[i];\n    if (ch.match(/[a-z]/i)) {\n      let rev = toUpper(ch);\n      let lower = toLower(ch);\n      if (lower.match(new RegExp(`^${lower}$`))) rev = rev;\n      else rev = lower;\n      s[i] = rev;\n    }\n  }\n  return s;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4uewfvb.ts(15,31): error TS2304: Cannot find name 'reverse'.\n../../../../tmp/tmps4uewfvb.ts(16,31): error TS2304: Cannot find name 'reverse'.\n../../../../tmp/tmps4uewfvb.ts(20,17): error TS2304: Cannot find name 'toUpper'.\n../../../../tmp/tmps4uewfvb.ts(21,19): error TS2552: Cannot find name 'toLower'. Did you mean 'lower'?\n../../../../tmp/tmps4uewfvb.ts(24,7): error TS2542: Index signature in type 'String' only permits reading.\n",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  if (s.length === 0) {\n    return '';\n  }\n\n  let charMap = new Map<string, string>();\n  for (let char of s) {\n    let newChar = char.toLowerCase();\n    if (!charMap.has(newChar)) {\n      charMap.set(newChar, char);\n    }\n  }\n\n  for (let [k, v] of charMap) {\n    charMap.set(k, v.toUpperCase());\n  }\n\n  let newString = '';\n  for (let [k, v] of charMap) {\n    newString += v;\n  }\n\n  return newString;\n}\n</code>\n<|/ a dscore=0 tags=algorithm,sorting,javascript |>\n<| c |>\nPlease add some explanation to your answer\n<|/ c |>\n<| a tags=algorithm,sorting,javascript dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyrzfpph3.ts(37,2): error TS1110: Type expected.\n../../../../tmp/tmpyrzfpph3.ts(37,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpyrzfpph3.ts(38,2): error TS1109: Expression expected.\n../../../../tmp/tmpyrzfpph3.ts(38,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpyrzfpph3.ts(39,2): error TS1109: Expression expected.\n../../../../tmp/tmpyrzfpph3.ts(39,7): error TS1109: Expression expected.\n../../../../tmp/tmpyrzfpph3.ts(40,8): error TS1005: ';' expected.\n../../../../tmp/tmpyrzfpph3.ts(40,12): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpyrzfpph3.ts(40,17): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpyrzfpph3.ts(40,29): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpyrzfpph3.ts(40,32): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpyrzfpph3.ts(41,2): error TS1109: Expression expected.\n../../../../tmp/tmpyrzfpph3.ts(41,4): error TS1161: Unterminated ",
      "timestamp": 1660334874
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  if (s == \"\") {\n    return s;\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    let letter = s.charAt(i);\n    console.log(letter);\n    if (letter >= 'a' && letter <= 'z') {\n      s = s.split(letter).join(letter.toUpperCase());\n      console.log(s);\n    } else if (letter >= 'A' && letter <= 'Z') {\n      s = s.split(letter).join(letter.toLowerCase());\n      console.log(s);\n    }\n  }\n  return s;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpcj648q9q.js:35:12)\n    at Object.<anonymous> (/tmp/tmpcj648q9q.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "A\nasDf\ns\naSDf\nD\naSdf\nf\naSdF\n1\n2\n3\n4\n",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  var i = 0;\n  while (i<s.length){\n    if(isNaN(s[i])) i++; \n    else \n      switch(s[i]){\n        case \"A\": s[i] = \"a\"; break;\n        case \"B\": s[i] = \"b\"; break;\n        case \"C\": s[i] = \"c\"; break;\n        case \"D\": s[i] = \"d\"; break;\n        case \"E\": s[i] = \"e\"; break;\n        case \"F\": s[i] = \"f\"; break;\n        case \"G\": s[i] = \"g\"; break;\n        case \"H\": s[i] = \"h\"; break;\n        case \"I\": s[i] = \"i\"; break;\n        case \"J\": s[i] = \"j\"; break;\n        case \"K\": s[i] = \"k\"; break;\n        case \"L\": s[i] = \"l\"; break;\n        case \"M\": s[i] = \"m\"; break;\n        case \"N\": s[i] = \"n\"; break;\n        case \"O\": s[i] = \"o\"; break;\n        case \"P\": s[i] = \"p\"; break;\n        case \"Q\": s[i] = \"q\"; break;\n        case \"R\": s[i] = \"r\"; break;\n        case \"S\": s[i] = \"s\"; break;\n        case \"T\": s[i] = \"t\"; break;\n        case \"U\": s[i] = \"u\"; break;\n        case \"V\": s[i] = \"v\"; break;\n        case \"W\": s[i] = \"w\"; break;\n        case \"X\": s[i] = \"x\"; break;\n        case \"Y\": s[i] = \"y\"; break;\n        case \"Z\": s[i] = \"z\"; break;\n        default: i++;\n      }\n  }\n  var res: string = \"\";\n  for(var j=i; j<s.length; j++){\n    res += s[j];\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd63avjt4.ts(16,14): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpd63avjt4.ts(19,19): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpd63avjt4.ts(20,19): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpd63avjt4.ts(21,19): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpd63avjt4.ts(22,19): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpd63avjt4.ts(23,19): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpd63avjt4.ts(24,19): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpd63avjt4.ts(25,19): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpd63avjt4.ts(26,19): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpd63avjt4.ts(2",
      "timestamp": 1660334874
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  for (let i = 0; i < s.length; ++i) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      s = s.substr(0, i) + s.substr(i + 1, 1).toLowerCase() + s.substr(i + 2, s.length);\n    }\n  }\n  return s;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'sf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpekbfj0as.js:24:12)\n    at Object.<anonymous> (/tmp/tmpekbfj0as.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'sf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334874
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  const newString = \"\";\n  for(let i = 0; i < s.length; i++) {\n    const ch = s.charAt(i)\n    if(isNaN(ch)) continue;\n    if(isLetter(ch)) {\n      newString = newString.concat(\n        ch,\n        ch.toLowerCase() === ch ? ch.toUpperCase() : ch.toLowerCase()\n      )\n    } else {\n      newString = newString.concat(ch)\n    }\n  }\n  \n  if(newString === \"\") return s;\n  return newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp21y8r66s.ts(17,14): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmp21y8r66s.ts(18,8): error TS2304: Cannot find name 'isLetter'.\n../../../../tmp/tmp21y8r66s.ts(19,7): error TS2588: Cannot assign to 'newString' because it is a constant.\n../../../../tmp/tmp21y8r66s.ts(24,7): error TS2588: Cannot assign to 'newString' because it is a constant.\n",
      "timestamp": 1660334877
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let result: string = s;\n    for (let i = 0; i < s.length; ++i) {\n        let letter: string = s[i];\n        if (letter === letter.toUpperCase()) {\n            result = result.replace(letter, letter.toLowerCase());\n        } else {\n            result = result.replace(letter, letter.toUpperCase());\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is very similar to my solution. However OP wants to remove the spaces at the end of the string.\n<|/ c |>\n<| c |>\nThe example code in the question doesn't have a space at the end. He stated he wants the spaces to beat the letters and letters to the end of the string so the code will remove spaces at the end.\n<|/ c |>\n<| c |>\nYes, your solution is correct. I just thought it would be more useful to show the actual code. Thank you.\n<|/ c |>\n<| c |>\nYes, I did not think about the fact that it could have spaces at the end but this should work fine as well.\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7ulpuwut.ts(25,2): error TS1110: Type expected.\n../../../../tmp/tmp7ulpuwut.ts(25,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp7ulpuwut.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmp7ulpuwut.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp7ulpuwut.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmp7ulpuwut.ts(27,7): error TS1109: Expression expected.\n../../../../tmp/tmp7ulpuwut.ts(28,6): error TS1005: ';' expected.\n../../../../tmp/tmp7ulpuwut.ts(28,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7ulpuwut.ts(28,14): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7ulpuwut.ts(28,22): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7ulpuwut.ts(28,25): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7ulpuwut.ts(28,46): error TS1005: ';' expected.\n../../../../tmp/tmp7ulpuwut.ts(28,49): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7ulpuwut.ts(28,55): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7ulpuwut.ts(28,58): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7ulpuwut.ts(28,65): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7ulpuwut.ts(28,69): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7ulpuwut.ts(28,76): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7ulpuwut.ts(28,79): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7ulpuwut.ts(28,83): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7ulpuwut.ts(28,87): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7ulpuwut.ts(28,90): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp7ulpuwut.ts(29,1): error TS1003: Identifier expected.\n../../../../tmp/tmp7ulpuwut.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmp7ulpuwut.ts(29,4): error TS1161: Unterminated regular express",
      "timestamp": 1660334877
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    return s.split('').reduce((acc, curr) => {\n        if (curr >= 'a' && curr <= 'z') {\n            return `${acc}${curr.toUpperCase()}`;\n        } else if (curr >= 'A' && curr <= 'Z') {\n            return `${acc}${curr.toLowerCase()}`;\n        } else {\n            return acc;\n        }\n    }, '');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp2ceyjnuc.js:30:12)\n    at Object.<anonymous> (/tmp/tmp2ceyjnuc.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334878
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\n            result += s.substring(i, s[i].toUpperCase());\n        else if (s[i] >= 'A' && s[i] <= 'Z')\n            result += s.substring(i, s[i].toLowerCase());\n        else\n            result += s[i];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprz_1hwe4.ts(17,38): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmprz_1hwe4.ts(19,38): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "timestamp": 1660334877
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  \n  s = s.toUpperCase();\n\n  if (s.length === 0) {\n    return s;\n  }\n\n  if (s.includes('A') && s.includes('a')) {\n    return s.replace('A', 'a').replace('a', 'A');\n  }\n\n  else if (s.includes('a') && s.includes('A')) {\n    return s.replace('a', 'A').replace('A', 'a');\n  }\n\n  else {\n    return s;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpban814md.js:31:12)\n    at Object.<anonymous> (/tmp/tmpban814md.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334878
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let reverse = s.split('').reverse().join('');\n    return reverse.split('').map(x => x === '@' ? x.toUpperCase() : x.toLowerCase()).join('');\n}\n</code>\nThe above function is pretty straightforward and easy to understand. Now we can use map function and join to get the final result. The above solution is not the best but it's a good exercise to learn about functional programming.\nLet's make it better!\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcfiwr7gv.ts(17,2): error TS1110: Type expected.\n../../../../tmp/tmpcfiwr7gv.ts(17,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpcfiwr7gv.ts(18,1): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpcfiwr7gv.ts(18,5): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpcfiwr7gv.ts(18,23): error TS1005: '(' expected.\n../../../../tmp/tmpcfiwr7gv.ts(18,30): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpcfiwr7gv.ts(18,46): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpcfiwr7gv.ts(18,50): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpcfiwr7gv.ts(18,55): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpcfiwr7gv.ts(18,74): error TS1005: ';' expected.\n../../../../tmp/tmpcfiwr7gv.ts(18,77): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpcfiwr7gv.ts(18,81): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpcfiwr7gv.ts(18,85",
      "timestamp": 1660334878
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  for (let i = 0; i < s.length; i++){\n    if (!isLetter(s[i])) {\n      s = s.toUpperCase();\n      break;\n    } else {\n      s = s.toLowerCase();\n      break;\n    }\n  }\n\n  return s;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj6m0tr89.ts(15,10): error TS2304: Cannot find name 'isLetter'.\n",
      "timestamp": 1660334878
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    \n    let reversedString = s.split('')\n        .reverse()\n        .join('');\n    \n    let charArray = s.split('')\n    \n    charArray.forEach(element => {\n        if(element.charCodeAt(0) > 96 && element.charCodeAt(0) < 123){\n            reversedString = reversedString.replace(element, String.fromCharCode(element.charCodeAt(0) - 32))\n        }\n        else{\n            reversedString = reversedString.replace(element, element)\n        }\n    })\n    return reversedString;\n}\n\nconsole.log(solve('ab'))\nconsole.log(solve('1234'))\nconsole.log(solve('#a@C'))\nconsole.log(solve('#A@c'))\nconsole.log(solve('a@b'))</code>\n<|/ a tags=javascript,algorithm |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpijopn0ze.ts(36,28): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpijopn0ze.ts(37,2): error TS1109: Expression expected.\n../../../../tmp/tmpijopn0ze.ts(37,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpijopn0ze.ts(38,2): error TS1109: Expression expected.\n../../../../tmp/tmpijopn0ze.ts(38,6): error TS1005: ';' expected.\n../../../../tmp/tmpijopn0ze.ts(38,33): error TS1109: Expression expected.\n../../../../tmp/tmpijopn0ze.ts(40,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334877
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  const lowerCase = s.toLowerCase()\n  if (lowerCase.search(/[a-z]/) === -1) {\n    return s\n  }\n  const result = lowerCase.replace(\n    /[a-z]/g,\n    (letter: string) => letter.toUpperCase()\n  )\n  if (result.search(/[^a-z]/) === -1) {\n    return result\n  }\n  return result.replace(\n    /[a-z]/g,\n    (letter: string) => letter.toLowerCase()\n  )\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nHere is my solution with reduce function\n\n<code>\nconst input = '#a@C'\n\nconst result = input\n  .replace('#', '')\n  .replace(/[a-z]/g, m => m.toUpperCase())\n  .replace(/[^a-z]/g, m => m.toLowerCase())\n  .replace(/[^A-Z]/g, m => m.toUpperCase())\n  .replace(/[A-Z]/g, m => m.toLowerCase())\n  .replace(/@/g, '')\n\nconsole.log(result)</code>\n<|/ a dscore=1 tags=javascript,string |>\n<| c |>\nYour solution looks more efficient than mine\n<|/ c |>\n<| a |>\nYou could take a look to the String.prototype.replace method which has a function callback that is called for each occurence of a matched pattern and you can implement the desired transformation of your string with it.\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa0_27loz.ts(30,2): error TS1110: Type expected.\n../../../../tmp/tmpa0_27loz.ts(30,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpa0_27loz.ts(31,2): error TS1109: Expression expected.\n../../../../tmp/tmpa0_27loz.ts(31,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpa0_27loz.ts(32,2): error TS1109: Expression expected.\n../../../../tmp/tmpa0_27loz.ts(32,7): error TS1109: Expression expected.\n../../../../tmp/tmpa0_27loz.ts(33,6): error TS1005: ';' expected.\n../../../../tmp/tmpa0_27loz.ts(33,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpa0_27loz.ts(33,12): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpa0_27loz.ts(33,26): error TS1005: '(' expected.\n../../../../tmp/tmpa0_27loz.ts(33,33): error TS1005: ')' expected.\n../../../../tmp/tmpa0_27loz.ts(35,1): error TS1003: Identifier expected.\n../../../../tmp/tmpa0_27loz.ts(36,1): error TS1005: '(' expected.\n../../../../tmp/tmpa0_27loz.ts(46,22): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpa0_27loz.ts(47,2): error TS1109: Expression expected.\n../../../../tmp/tmpa0_27loz.ts(47,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpa0_27loz.ts(48,2): error TS1109: Expression expected.\n../../../../tmp/tmpa0_27loz.ts(48,7): error TS1109: Expression expected.\n../../../../tmp/tmpa0_27loz.ts(49,6): error TS1005: ';' expected.\n../../../../tmp/tmpa0_27loz.ts(49,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpa0_27loz.ts(49,21): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpa0_27loz.ts(49,26): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpa0_27loz.ts(49,36): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpa0_27loz.ts(50,2): error TS1109: Expression expected.\n../../../../tmp/tmpa0_27loz.ts(50,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpa0_27loz.ts(51,2): error TS1109: Expression expected.\n../..",
      "timestamp": 1660334878
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n\treturn s.split('').map(\n\t\tc => c === '#' || c === '.' ? c : c.toUpperCase()\n\t).join('');\n}\n*/\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpoga0h079.ts(18,1): error TS1109: Expression expected.\n../../../../tmp/tmpoga0h079.ts(18,3): error TS1161: Unterminated regular expression literal.\n",
      "timestamp": 1660334878
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    return s.split(\"\").reduce((acc, char) => {\n        char = char.toLowerCase();\n        if (/[a-z]/.test(char)) {\n            char += char.substr(1).toLowerCase();\n        } else {\n            char += char.substr(1).toUpperCase();\n        }\n        \n        return acc + char;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpt_e2gwff.js:28:12)\n    at Object.<anonymous> (/tmp/tmpt_e2gwff.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334878
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  for (let i = 0; i < s.length; i += 1) {\n    let char = s[i];\n    if (char.match(/[a-z]/)) {\n      s[i] = char.toLowerCase() === char ? char.toUpperCase() : char.toLowerCase();\n    } else {\n      s[i] = char;\n    }\n  }\n  return s.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8bsyxnbv.ts(17,7): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmp8bsyxnbv.ts(19,7): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmp8bsyxnbv.ts(22,12): error TS2339: Property 'join' does not exist on type 'string'.\n",
      "timestamp": 1660334878
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    return s.replace(/[a-zA-Z]/, (l: string) => {\n        if (l.charCodeAt(0) >= 65 && l.charCodeAt(0) <= 90) {\n            return String.fromCharCode(l.charCodeAt(0) - 32 + 32) + l.substring(1);\n        }\n        return l;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp4kllf28q.js:24:12)\n    at Object.<anonymous> (/tmp/tmp4kllf28q.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334878
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let str = \"\"\n  for (let i = 0; i < s.length; i++) {\n    let isLetter = s[i] >= 'a' && s[i] <= 'z' || s[i] >= 'A' && s[i] <= 'Z'\n    if (isLetter) {\n      str = str.concat(s[i].toUpperCase())\n    } else {\n      str = str.concat(s[i])\n    }\n  }\n  if (str.length == 0) {\n    return str\n  } else {\n    return str\n  }\n}\nsolve(\"123\")\nsolve(\"ab\")\nsolve(\"#a@C\")\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpyoyxcs8c.js:37:12)\n    at Object.<anonymous> (/tmp/tmpyoyxcs8c.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334878
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  var result = '';\n  s.split(\"\").forEach(function(letter, i){\n    if(letter.match(/[a-z]/i)){\n      result += letter.toUpperCase();\n    }\n    else result += letter.toLowerCase();\n  });\n  return result;\n}\n</code>\n<|/ a tags=string,javascript |>\n<| a dscore=0 tags=string,javascript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppdoejjzg.ts(23,2): error TS1110: Type expected.\n../../../../tmp/tmppdoejjzg.ts(23,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmppdoejjzg.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmppdoejjzg.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmppdoejjzg.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmppdoejjzg.ts(25,6): error TS1005: ';' expected.\n../../../../tmp/tmppdoejjzg.ts(25,15): error TS1005: ';' expected.\n../../../../tmp/tmppdoejjzg.ts(25,39): error TS1109: Expression expected.\n../../../../tmp/tmppdoejjzg.ts(27,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334878
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  if (s[0] === '#') {\n    return reverse(s);\n  }\n\n  if (s.indexOf('@') !== -1) {\n    return reverse(s.replace('@', ''));\n  }\n\n  const chars = s.split('').map(i => {\n    if (i.charCodeAt(0) > 96 && i.charCodeAt(0) < 123) {\n      return i.charCodeAt(0) - 32; // 65 - 90\n    }\n\n    return i.charCodeAt(0);\n  });\n\n  let result = '';\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] >= 65 && chars[i] <= 90) {\n      result += String.fromCharCode(chars[i] + 32);\n    } else if (chars[i] >= 97 && chars[i] <= 122) {\n      result += String.fromCharCode(chars[i] - 32);\n    } else {\n      result += chars[i];\n    }\n  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt5o6x_iz.ts(15,12): error TS2304: Cannot find name 'reverse'.\n../../../../tmp/tmpt5o6x_iz.ts(19,12): error TS2304: Cannot find name 'reverse'.\n",
      "timestamp": 1660334878
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    \n    const strArr = s.split(\"\");\n    const len = strArr.length;\n    \n    if (s.includes(\"@\") && s.includes(\"#\")) {\n        return s;\n    }\n    \n    for (let i = 0; i < len; i++) {\n        if (strArr[i].length === 0) {\n            return strArr.join(\"\");\n        }\n    }\n    \n    for (let i = 0; i < len; i++) {\n        if (strArr[i].length === 1 && strArr[i].toLowerCase() !== strArr[i].toUpperCase()) {\n            return strArr.join(\"\");\n        }\n    }\n    \n    return s;\n}\n</code>\n<|/ a tags=string,javascript,algorithm,substring |>\n<| c |>\nThe algorithm works perfectly on all the test cases. Thank you so much!\n<|/ c |>\n<| c |>\nGlad it helped, feel free to upvote if you feel it helped you and accept the answer if it resolved your problem.\n<|/ c |>\n<| a dscore=1 |>\nUsing filter + includes\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdhk9ex1c.ts(36,2): error TS1110: Type expected.\n../../../../tmp/tmpdhk9ex1c.ts(36,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpdhk9ex1c.ts(37,2): error TS1109: Expression expected.\n../../../../tmp/tmpdhk9ex1c.ts(37,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpdhk9ex1c.ts(38,2): error TS1109: Expression expected.\n../../../../tmp/tmpdhk9ex1c.ts(38,7): error TS1109: Expression expected.\n../../../../tmp/tmpdhk9ex1c.ts(39,5): error TS1005: ';' expected.\n../../../../tmp/tmpdhk9ex1c.ts(39,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpdhk9ex1c.ts(39,21): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpdhk9ex1c.ts(39,31): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpdhk9ex1c.ts(39,34): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpdhk9ex1c.ts(39,38): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpdhk9ex1c.ts(39,42): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpdhk9ex1c.ts(39,60): error TS1005: ';' expected.\n../../../../tmp/tmpdhk9ex1c.ts(39,64): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpdhk9ex1c.ts(40,2): error TS1109: Expression expected.\n../../../../tmp/tmpdhk9ex1c.ts(40,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpdhk9ex1c.ts(41,2): error TS1109: Expression expected.\n../../../../tmp/tmpdhk9ex1c.ts(41,7): error TS1109: Expression expected.\n../../../../tmp/tmpdhk9ex1c.ts(42,6): error TS1005: ';' expected.\n../../../../tmp/tmpdhk9ex1c.ts(42,22): error TS1005: ';' expected.\n../../../../tmp/tmpdhk9ex1c.ts(42,27): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpdhk9ex1c.ts(42,30): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpdhk9ex1c.ts(42,40): error TS1005: '(' expected.\n../../../../tmp/tmpdhk9ex1c.ts(42,44): error TS1005: ')' expected.\n../../../../tmp/tmpdhk9ex1c.ts(42,49): error TS1434: Unexpected keyword or identi",
      "timestamp": 1660334878
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let lower = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  let upper = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n  let lowerCase = s.split(\"\").map(c => lower.indexOf(c) > -1 ? upper[lower.indexOf(c)]: lower[lower.indexOf(c)]);\n  let upperCase = s.split(\"\").map(c => upper.indexOf(c) > -1 ? upper[upper.indexOf(c)]: lower[upper.indexOf(c)]);\n  let reversed = s.split(\"\").map((c, index) => index > 0 ? upperCase.indexOf(c) < lowerCase.indexOf(c) ? upperCase.indexOf(c) < upperCase.indexOf(c) ? upperCase.indexOf(c) < lowerCase.indexOf(c) ? upperCase.indexOf(c) < lowerCase.indexOf(c) ? lowerCase.indexOf(c) < upperCase.indexOf(c) ? lowerCase.indexOf(c) < upperCase.indexOf(c) ? lowerCase.indexOf(c) < lowerCase.indexOf(c) ? upperCase.indexOf(c) < upperCase.indexOf(c) ? upperCase.indexOf(c) < lowerCase.indexOf(c) ? upperCase.indexOf(c) < upperCase.indexOf(c) ? lowerCase.indexOf(c) < upperCase.indexOf(c) ? lowerCase.indexOf(c) < lowerCase.indexOf(c) ? lowerCase.indexOf(c) < upperCase.indexOf(c) ? upperCase.indexOf(c) < upperCase.indexOf(c) ? upperCase.indexOf(c) < lowerCase.indexOf(c) ? upperCase.indexOf(c) < upperCase.indexOf(c) ? upperCase.indexOf(c) < lowerCase.indexOf(c) ? upperCase.indexOf(c) < upperCase.indexOf(c) ? lowerCase.indexOf(c) < upperCase.indexOf(c) ? lowerCase.indexOf(c) < lowerCase.indexOf(c) ? lowerCase.indexOf(c) < upperCase.indexOf(c) ? upperCase.indexOf(c) < upperCase.indexOf(c) ? upperCase.indexOf(c) < lowerCase.indexOf(c) ? upperCase.indexOf(c) < upperCase.indexOf(c) ? upperCase.indexOf(c) < lowerCase.indexOf(c) ? lowerCase.indexOf(c) < upperCase.indexOf(c) ? lowerCase.indexOf(c) < lowerCase.indexOf(c) ? lowerCase.indexOf\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm89e78ws.ts(19,1): error TS1005: ':' expected.\n../../../../tmp/tmpm89e78ws.ts(19,9): error TS1005: ',' expected.\n../../../../tmp/tmpm89e78ws.ts(35,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334878
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    const strArr: string[] = s.split('')\n    let len: number = strArr.length\n    let idx: number = 0\n\n    while (idx < len) {\n        if (strArr[idx] === letter) {\n            strArr[idx] = strArr[len]\n            strArr[len] = letter\n        } else {\n            strArr[idx] = letter\n        }\n\n        len--\n        idx++\n    }\n    return strArr.join('')\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6fcmms28.ts(19,29): error TS2304: Cannot find name 'letter'.\n../../../../tmp/tmp6fcmms28.ts(21,27): error TS2304: Cannot find name 'letter'.\n../../../../tmp/tmp6fcmms28.ts(23,27): error TS2304: Cannot find name 'letter'.\n",
      "timestamp": 1660334878
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    var low = s.toLowerCase();\n    var upped = s.toUpperCase();\n    var letters = \"\";\n    \n    for(var i = 0;i<s.length;i++) {\n        if(s[i] == low[i]) {\n            letters += upped[i];\n        } else {\n            letters += low[i];\n        }\n    }\n    return letters;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpbpke9d2t.js:31:12)\n    at Object.<anonymous> (/tmp/tmpbpke9d2t.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334878
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.split('').map(c => c.match(/[a-z]/i) ? c.toLowerCase() : c.toUpperCase()).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpiru28ldi.js:19:12)\n    at Object.<anonymous> (/tmp/tmpiru28ldi.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334878
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let lowerCase = s.toLowerCase()\n    let upperCase = s.toUpperCase()\n    let reverseCase = lowerCase.split(\"\").reduce((a, b) => a + (b.toUpperCase()), \"\")\n    let noLetters = reverseCase.split(\"\").reduce((a, b) => a + b, \"\")\n\n    let result = lowerCase + upperCase\n    if (result.length === noLetters) {\n        result = reverseCase\n    }\n    return result\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,javascript,reverse |>\nSimple Solution in javascript \n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp59i0v68l.ts(25,2): error TS1110: Type expected.\n../../../../tmp/tmp59i0v68l.ts(25,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp59i0v68l.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmp59i0v68l.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp59i0v68l.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmp59i0v68l.ts(27,6): error TS1005: ';' expected.\n../../../../tmp/tmp59i0v68l.ts(27,45): error TS1109: Expression expected.\n../../../../tmp/tmp59i0v68l.ts(28,8): error TS1005: ';' expected.\n../../../../tmp/tmp59i0v68l.ts(31,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334878
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    const result: string = s;\n    for (let i = 0; i < s.length; i += 1) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result =\n                result.substring(0, i) + result.substring(i + 1, result.length) + s[i].toUpperCase();\n        } else {\n            result =\n                result.substring(0, i) + result.substring(i + 1, result.length) + s[i].toLowerCase();\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpey4yfc3u.ts(17,13): error TS2588: Cannot assign to 'result' because it is a constant.\n../../../../tmp/tmpey4yfc3u.ts(20,13): error TS2588: Cannot assign to 'result' because it is a constant.\n",
      "timestamp": 1660334878
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    if (s.length === 0) {\n        return '';\n    }\n    let lower = true\n    \n    const chars = s.replace(/[^a-z]/g, '').split('')\n    for (let i = 0, len = chars.length; i < len; i++) {\n        if (chars[i].charCodeAt() < 97) {\n            if (lower) {\n                chars[i] = chars[i].toUpperCase()\n            } else {\n                chars[i] = chars[i].toLowerCase()\n            }\n        } else {\n            if (lower) {\n                chars[i] = chars[i].toLowerCase()\n            } else {\n                chars[i] = chars[i].toUpperCase()\n            }\n        }\n        lower = !lower\n    }\n    return chars.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppdgwesn3.ts(21,22): error TS2554: Expected 1 arguments, but got 0.\n",
      "timestamp": 1660334880
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  // your code here\n  const newString = s.split(\"\").map((char, i) => {\n    if (/[A-Za-z]/.test(char)) {\n      return char.toLowerCase()\n    }\n    return char.toUpperCase()\n  })\n  const newChars = newString.join(\"\")\n  if (newChars === \"\") {\n    return s\n  }\n  return newChars\n}\n\n</code>\n<|/ a tags=javascript,algorithm,string |>\n<| c |>\nWhat if the input is `\"#a@C\"`? It gives `\"#A@c\"`\n<|/ c |>\n<| c |>\nOh yes, it does. I forgot to change that. Thanks for pointing out. I've updated the code now.\n<|/ c |>\n<| c |>\nI think you need to `return char.toUpperCase()`. Otherwise, it returns `undefined`. See here: https://jsfiddle.net/wLz1k0wz/\n<|/ c |>\n<| c |>\nYeah, I missed that part, thanks for pointing it out. I've updated the code now.\n<|/ c |>\n<| a tags=javascript,algorithm,string |>\nYou can try this below approach\n\n<code>\nvar str = \"hello\";\nvar strArr = str.split(\"\");\nvar result = \"\";\nstrArr.forEach(function(item) {\n  result += (item === strArr[0].toLowerCase() ? item.toUpperCase() : item.toLowerCase());\n});\nconsole.log(result);</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj9umjxyg.ts(28,2): error TS1110: Type expected.\n../../../../tmp/tmpj9umjxyg.ts(28,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpj9umjxyg.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmpj9umjxyg.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpj9umjxyg.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmpj9umjxyg.ts(30,7): error TS1109: Expression expected.\n../../../../tmp/tmpj9umjxyg.ts(31,6): error TS1005: ';' expected.\n../../../../tmp/tmpj9umjxyg.ts(31,9): error TS1005: '(' expected.\n../../../../tmp/tmpj9umjxyg.ts(31,13): error TS1005: ')' expected.\n../../../../tmp/tmpj9umjxyg.ts(31,35): error TS1005: ':' expected.\n../../../../tmp/tmpj9umjxyg.ts(32,2): error TS1109: Expression expected.\n../../../../tmp/tmpj9umjxyg.ts(32,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpj9umjxyg.ts(33,2): error TS1109: Expression expected.\n../../../../tmp/tmpj9umjxyg.ts(33,7): error TS1109: Expression expected.\n../../../../tmp/tmpj9umjxyg.ts(34,4): error TS1005: ';' expected.\n../../../../tmp/tmpj9umjxyg.ts(34,12): error TS1005: ';' expected.\n../../../../tmp/tmpj9umjxyg.ts(34,20): error TS1005: ';' expected.\n../../../../tmp/tmpj9umjxyg.ts(34,27): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj9umjxyg.ts(34,30): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpj9umjxyg.ts(34,50): error TS1005: ';' expected.\n../../../../tmp/tmpj9umjxyg.ts(34,54): error TS1005: '(' expected.\n../../../../tmp/tmpj9umjxyg.ts(34,63): error TS1005: ';' expected.\n../../../../tmp/tmpj9umjxyg.ts(34,69): error TS1005: ';' expected.\n../../../../tmp/tmpj9umjxyg.ts(34,94): error TS1002: Unterminated string literal.\n../../../../tmp/tmpj9umjxyg.ts(35,2): error TS1109: Expression expected.\n../../../../tmp/tmpj9umjxyg.ts(35,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpj9umjxyg.ts(36,2): error TS1109: Expression expected.\n../../../../tmp/tmpj9umjxyg.ts(36,7",
      "timestamp": 1660334881
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    \n    return s.split('').map(a => a >= 'a' ? a.charCodeAt(0) - 96 : a.charCodeAt(0) - 64).join();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1,19,4,6'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpqwo6vwea.js:19:12)\n    at Object.<anonymous> (/tmp/tmpqwo6vwea.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1,19,4,6',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334881
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let stack = [...s.split(\"\")];\n    while (stack.length > 0) {\n        let lastIndex = stack.length - 1;\n        let currentValue = stack[lastIndex];\n        if (currentValue.length > 0) {\n            if (currentValue[0] >= 'A' && currentValue[0] <= 'Z') {\n                stack[lastIndex] = currentValue.substr(0, 1) + currentValue.substr(1).toLowerCase();\n            } else {\n                stack[lastIndex] = currentValue.substr(0, 1) + currentValue.substr(1).toUpperCase();\n            }\n        } else {\n            stack[lastIndex] = currentValue;\n        }\n        stack.splice(lastIndex + 1, 0, stack.pop());\n    }\n    return stack.join(\"\");\n}\n</code>\n<|/ a |>\n<| c |>\nPlease provide some explanation\n<|/ c |>\n<| a tags=arrays,javascript,string dscore=0 |>\nHere's a functional solution that uses a map to build an array of letters and then joins to create your string again:\n<code>\nlet input = \"ab#a@c\"\n\nlet arr = input.split('')\nlet letters = arr.map(letter => {\n  if (letter == '#') return letter.toLowerCase()\n  return letter.toUpperCase()\n})\n\nconsole.log(letters.join(''))\n</code>\n<|/ a |>\n<| a tags=arrays,javascript,string |>\nThis should also work, using two loops to split the string into two separate arrays, then mapping each array to capitalize or lower case, returning each array joined.\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk6kf5io0.ts(31,2): error TS1110: Type expected.\n../../../../tmp/tmpk6kf5io0.ts(31,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpk6kf5io0.ts(32,2): error TS1109: Expression expected.\n../../../../tmp/tmpk6kf5io0.ts(32,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpk6kf5io0.ts(33,2): error TS1109: Expression expected.\n../../../../tmp/tmpk6kf5io0.ts(33,7): error TS1109: Expression expected.\n../../../../tmp/tmpk6kf5io0.ts(34,8): error TS1005: ';' expected.\n../../../../tmp/tmpk6kf5io0.ts(34,16): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpk6kf5io0.ts(35,2): error TS1109: Expression expected.\n../../../../tmp/tmpk6kf5io0.ts(35,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpk6kf5io0.ts(36,2): error TS1109: Expression expected.\n../../../../tmp/tmpk6kf5io0.ts(36,6): error TS1005: ';' expected.\n../../../../tmp/tmpk6kf5io0.ts(36,36): error TS1005: ';' expected.\n../../../../tmp/tmpk6kf5io0",
      "timestamp": 1660334881
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n\treturn s.split('').reduce((a,c) => {\n\t\treturn a.length == 0 ? c : (\n\t\t\tisLower(a[0]) ? a.charAt(0) + c.toLowerCase() : a.charAt(0) + c.toUpperCase()\n\t\t)\n\t}).reverse().join('')\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpypuwcz_k.ts(16,4): error TS2304: Cannot find name 'isLower'.\n../../../../tmp/tmpypuwcz_k.ts(18,5): error TS2339: Property 'reverse' does not exist on type 'string'.\n",
      "timestamp": 1660334881
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  s = s.toUpperCase();\n  let ans = \"\";\n  for (let i = 0; i < s.length; i++) {\n    const charToSwap = s[i];\n    if (i === 0) {\n      ans = charToSwap;\n    } else {\n      if (charToSwap === ans) {\n        ans = charToSwap;\n      } else {\n        ans += charToSwap;\n      }\n    }\n  }\n  return ans;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpah9i77si.js:35:12)\n    at Object.<anonymous> (/tmp/tmpah9i77si.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334882
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    if (s.trim() === '') return s; // do nothing\n    const result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\n            result[i] = s[i] - 32;\n        else if (s[i] >= 'A' && s[i] <= 'Z')\n            result[i] = s[i] + 32;\n        else\n            result[i] = s[i];\n    }\n    return result.join('');\n}\n</code>\n<|/ a |>\n<| c |>\nthanks for your help! I do get the correct answer now but there is a runtime error with your solution when I put input strings like \"ab\" which should reverse to return \"ba\". It does not output the right answer but rather outputs \"Ab\", which is different from my results. Any thoughts?\n<|/ c |>\n<| c |>\nThis code doesn't output the correct answer. I tested it and it works for me for the input you provided. For instance, `solve(\"ab\")` outputs `\"Ba\"`.\n<|/ c |>\n<| c |>\nYou are right I didn't see the typo with the capitalization, I did just change it to lower case and it works now. Thank you very much!\n<|/ c |>\n<| a dscore=2 |>\nI would use RegEx replace:\n<code>\nimport re\ndef solve(s: str) -> str:\n    s = re.sub(\"[A-Z]\", \"a\", s)\n    s = re.sub(\"[a-z]\", \"z\", s)\n    s = re.sub(\"\\W\", \"\", s)\n    return s\n</code>\nExplanation:\n\nre.sub(pattern, replacement, string) will replace all occurrences of a pattern with another pattern where pattern is a regular expression\n[A-Z] will replace all capital letters with a\n[a-z] will replace all lowercase letters with z\n\\W will replace all non-word characters with nothing\n\nThis can easily be modified to handle other characters like spaces\n<|/ a tags=python |>\n<| c |>\nI didn't know this module existed. Thanks for sharing! This looks really useful!\n<|/ c |>\n<| a dscore=1 tags=python |>\nA recursive solution using str[::-1]:\n<code>\ndef solve(s):\n    if len(s) == 1: return s\n    if len(s) >= 2 and s[0] == s[-1]: return solve(s[:-1]) + solve(s[1:])\n    if len(s) >= 2 and s[0] == s[-2]: return solve(s[:-2]) + solve(s[:-2])\n    return s + s[0] + solve(s[2:])\n</code>\n<|/ a |>\n<| a tags=python |>\n<code>\ndef solve(s):\n    li = []\n    for letter in s:\n        if letter.islower():\n            li.append('z')\n        elif letter.isupper():\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5e5517fi.ts(26,2): error TS1110: Type expected.\n../../../../tmp/tmp5e5517fi.ts(26,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp5e5517fi.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmp5e5517fi.ts(27,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp5e5517fi.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmp5e5517fi.ts(28,7): error TS1109: Expression expected.\n../../../../tmp/tmp5e5517fi.ts(29,8): error TS1005: ';' expected.\n../../../../tmp/tmp5e5517fi.ts(29,12): error TS1005: '(' expected.\n../../../../tmp/tmp5e5517fi.ts(29,17): error TS1005: ';' expected.\n../../../../tmp/tmp5e5517fi.ts(29,23): error TS1005: ';' expected.\n../../../../tmp/tmp5e5517fi.ts(29,25): error TS1005: ')' expected.\n../../../../tmp/tmp5e5517fi.ts(29,28): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5e5517fi.ts(29,32): error TS1005: 'while' expected.\n../../../../tmp/tmp5e5517fi.ts(29,36): error TS1005: ')' expected.\n../../../../tmp/tmp5e5517fi.ts(29,44): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5e5517fi.ts(29,51): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5e5517fi.ts(29,55): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5e5517fi.ts(29,59): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5e5517fi.ts(29,65): error TS1228: A type predicate is only allowed in return type position for functions and methods.\n../../../../tmp/tmp5e5517fi.ts(29,68): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5e5517fi.ts(29,70): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5e5517fi.ts(29,78): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5e5517fi.ts(29,89): error TS1005: '(' expected.\n../../../../tmp/tmp5e5517fi.ts(29,94): error TS1005: ')' expected.\n../../../../tmp/tmp5e5517fi.ts(29,103): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp5e5517fi.ts(29,108): error TS1",
      "timestamp": 1660334881
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  if (s.length === 0) {\n    return ''\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].match(/[a-z]/)) {\n      const lower = s[i].toUpperCase()\n      const upper = s[i].toLowerCase()\n      return `${lower}${solve(s.substring(i + 1))}`\n    }\n    return s[i]\n  }\n  return solve(s.substring(1));\n}\n\nconst solve = solve(`c#d#e#a#b#e#b#a#d#c#e#c#b#a#d#e#b#a#e#b#a#d#c#c#d#e#c#b#a#d#e#b#a#e#b#a#d#c#c#d#e#c#b#a#d#e#b#a#e#b#a#d#c#c#d#e#c#b#a#d#e#b#a#e#b#a#d#c#c#d#e#c#b#a#d#e#b#a#e#b#a#d#c#c#d#e#c#b#a#d#e#b#a#e#b#a#d#c#c#d#e#c#b#a#d#e#b#a#e#b#a#d#c#c#d#e#c#b#a#d#e#b#a#e#b#a#d#c#c#d#e#c#b#a#d#e#b#a#e#b#a#d#c#c#d#e#c#b#a#d#e#b#a#e#b#a#d#c#c#d#e#c#b#a#d#e#b#a#e#b#a#d#c#c#d#e#c#b#a#d#e#b#a#e#b#a#d#c#c#d#e#c#b#a#d#e#b#a#e#b#a#d#c#c#d#e#c#b#a#d#e#b#a#e#b#a#d#c#c#d\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9833zxua.ts(45,8): error TS1160: Unterminated template literal.\n",
      "timestamp": 1660334881
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n\treturn s.split('').map( (c: any) => {\n\t\tif( typeof c === \"string\") {\n\t\t\tc = c.split('').map( (s: string) => { return s.toLowerCase() });\n\t\t\tc = c.map( (s: string) => { return s.toUpperCase() });\n\t\t} else {\n\t\t\tc = [c];\n\t\t}\n\t\tlet ret = c[0];\n\t\tc.map((e: any) => { ret = e.split('').reduce((acc, cur) => { return cur + acc; }, '') });\n\t\treturn ret;\n\t}).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpikyocckc.js:30:12)\n    at Object.<anonymous> (/tmp/tmpikyocckc.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334881
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let ans = \"\";\n    for (let i = 0; i < s.length; i++){\n        if (s[i].toLowerCase() !== s[i]){\n            ans = ans.concat(s[i].toUpperCase());\n        } else {\n            ans = ans.concat(s[i].toLowerCase());\n        }\n    }\n    return ans;\n}\n</code>\n<|/ a dscore=0 tags=string,javascript |>\n<| a dscore=0 |>\nYou can try something like this\n<code>\nconst solve = str => {\n  const rev = str => {\n    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    return str.split('').reduce((acc, val) => {\n      const index = alphabet.indexOf(val)\n      return (index > -1) ? (acc += alphabet[index].toUpperCase()) : acc\n    }, '')\n  }\n  \n  return rev(str).split('').reduce((acc, val) => {\n    const index = alphabet.indexOf(val)\n    return (index > -1) ? (acc += alphabet[index].toLowerCase()) : acc\n  }, '')\n}\n\nconst strs = ['1234', '#a@C', 'ab', 'a12bc']\nstrs.forEach(s => console.log(solve(s))) // \"4321\", \"#A@c\", \"AB\", \"a12bc\"\n</code>\nThis just traverses the string from left to right. Whenever a letter is found, it checks if that letter is in a string containing all letters. \nIf so, its value is mapped to the index of the letter in the alphabet and added accordingly. \nIf not, its value is simply added to the accumulator acc.\nIf no letter is found, its value is the same.\n<|/ a tags=string,javascript |>\n<| a dscore=0 |>\nHere is another solution without using any loop. This solution has two phases 1. Reverse the string and 2. Reverse the alphabets.\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4sa3880z.ts(24,2): error TS1110: Type expected.\n../../../../tmp/tmp4sa3880z.ts(24,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp4sa3880z.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmp4sa3880z.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp4sa3880z.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmp4sa3880z.ts(26,6): error TS1005: ';' expected.\n../../../../tmp/tmp4sa3880z.ts(26,16): error TS1109: Expression expected.\n../../../../tmp/tmp4sa3880z.ts(27,5): error TS1005: ';' expected.\n../../../../tmp/tmp4sa3880z.ts(27,13): error TS1005: '{' expected.\n../../../../tmp/tmp4sa3880z.ts(27,23): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp4sa3880z.ts(46,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp4sa3880z.ts(47,1): error TS1435: Unknown keyword or identifier. Did you mean 'this'?\n../../../../tmp/tmp4sa3880z.ts(47,6): error TS1434: Unexpected keywo",
      "timestamp": 1660334881
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    var newS: string = \"\",\n        i: number,\n        iMax: number = s.length;\n\n    for (i = 0; i <= iMax; i++) {\n        if (isValidCharacter(s.charAt(i))) {\n            if (newS) {\n                newS = newS + s.charAt(i);\n            }\n            else {\n                newS = s.charAt(i);\n            }\n        }\n        else {\n            newS = newS + s.charAt(i);\n        }\n    }\n    return newS;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8g2hc8_f.ts(19,13): error TS2304: Cannot find name 'isValidCharacter'.\n",
      "timestamp": 1660334881
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  const result = s.split('');\n  for (let i = 0; i < result.length; i++) {\n    if (result[i].match(/[a-z]/g)) {\n      result[i] = result[i].toUpperCase();\n    } else {\n      result[i] = result[i].toLowerCase();\n    }\n  }\n  return result.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpv8ym2epg.js:29:12)\n    at Object.<anonymous> (/tmp/tmpv8ym2epg.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334881
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.split('')\n    .map(s => s.includes('a') ? s.toUpperCase() : s.toLowerCase())\n    .join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp3zb2snr7.js:21:12)\n    at Object.<anonymous> (/tmp/tmp3zb2snr7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334882
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.replace(/[a-z]/gi, c => c.toUpperCase() === c ? c.toLowerCase() : c.toLowerCase())\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpbhzapvi8.js:19:12)\n    at Object.<anonymous> (/tmp/tmpbhzapvi8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334882
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.replace(/[a-zA-Z]/gi, m => m.toUpperCase() === m ? m.toLowerCase() : m.toUpperCase()).replace(/^/gm, '')\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpvuvwyhc4.js:20:12)\n    at Object.<anonymous> (/tmp/tmpvuvwyhc4.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334882
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    // return s if there are no letters\n    if (s.length === 0) return s;\n\n    // return s if there is only one letter\n    if (s.length === 1) return s;\n\n    const isCharDigit = char => char >= '0' && char <= '9';\n\n    let chars = s.split('');\n\n    // Loop through each letter\n    for (let i = 0, len = chars.length; i < len; i++) {\n        const char = chars[i];\n\n        if (isCharDigit(char)) {\n            // Reverse if char is digit\n            chars[i] = chars.splice(i, 1).join('');\n            chars.splice(i, 0, char);\n            i += 1;\n        } else if (char === '.') {\n            // Reverse if char is .\n            chars[i] = chars.splice(i, 1).join('');\n            chars.splice(i, 0, char);\n            i += 1;\n        } else {\n            // Otherwise keep it\n        }\n    }\n\n    return chars.join('');\n}\n\nconsole.log(solve(\"1234\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp2hno5p21.js:47:12)\n    at Object.<anonymous> (/tmp/tmp2hno5p21.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "1133\n",
      "timestamp": 1660334882
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  if (s.length === 0) {\n    return s;\n  }\n  if (isLetter(s[0])) {\n    const lower = s.toLowerCase();\n    const upper = s.toUpperCase();\n    if (isLetter(s[s.length - 1])) {\n      return `${lower}${s[s.length - 1].toUpperCase()}${upper}`;\n    } else {\n      return `${lower}${s[s.length - 1].toUpperCase()}`;\n    }\n  }\n  return s;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkx05lchf.ts(17,7): error TS2304: Cannot find name 'isLetter'.\n../../../../tmp/tmpkx05lchf.ts(20,9): error TS2304: Cannot find name 'isLetter'.\n",
      "timestamp": 1660334882
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    return s.split('').map(c => c === 'a' || c === 'A' || c === '#' || c === '#' ? c.toUpperCase() : c.toLowerCase()).join('');\n}\n</code>\n<|/ a tags=string,javascript dscore=0 |>\n<| a tags=string,javascript |>\nYou can try this one:\n\n<code>\nconst solve = (str) => {\n   const letters = 'abcdefghijklmnopqrstuvwxyz'.split('');\n   return letters.map((e) => str.includes(e) ? e.toUpperCase() : e.toLowerCase()).join('');\n}\n\nconsole.log(solve(\"1234\")); // \"4321\"\nconsole.log(solve(\"ab\")); // \"AB\"\nconsole.log(solve(\"#a@C\")); // \"#A@c\"</code>\n<|/ a dscore=0 |>\n<| a tags=string,javascript dscore=0 |>\nThis solution also returns reversed letters.\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptp480ite.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmptp480ite.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmptp480ite.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmptp480ite.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmptp480ite.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmptp480ite.ts(18,6): error TS1005: ';' expected.\n../../../../tmp/tmptp480ite.ts(18,30): error TS1109: Expression expected.\n../../../../tmp/tmptp480ite.ts(19,5): error TS1005: ';' expected.\n../../../../tmp/tmptp480ite.ts(19,13): error TS1005: '{' expected.\n../../../../tmp/tmptp480ite.ts(19,18): error TS1005: ';' expected.\n../../../../tmp/tmptp480ite.ts(22,1): error TS1109: Expression expected.\n../../../../tmp/tmptp480ite.ts(30,3): error TS1110: Type expected.\n../../../../tmp/tmptp480ite.ts(30,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmptp480ite.ts(31,2): error TS1109: Expression expected.\n../../../../tmp/tmptp480ite.ts(31,6): error TS1005: ';' expected.\n../../../../tmp/tmptp480ite.ts(31,29): error TS1005: ';' expected.\n../../../../tmp/tmptp480ite.ts(31,39): error TS1109: Expression expected.\n../../../../tmp/tmptp480ite.ts(32,6): error TS1005: ';' expected.\n../../../../tmp/tmptp480ite.ts(32,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmptp480ite.ts(32,20): error TS1435: Unknown keyword or identifier. Did you mean 'return'?\n../../../../tmp/tmptp480ite.ts(32,28): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmptp480ite.ts(34,1): error TS1003: Identifier expected.\n../../../../tmp/tmptp480ite.ts(35,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334881
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let result = '';\n  let letters = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    let upper = false;\n    let lowerCase = false;\n    if (char >= 'a' && char <= 'z') {\n      letters += char;\n      upper = true;\n    } else if (char >= 'A' && char <= 'Z') {\n      letters += char.toUpperCase();\n      upper = true;\n    } else {\n      letters += char.toLowerCase();\n      lowerCase = true;\n    }\n    if (upper) {\n      result += String.fromCharCode(ord(letters) - 32);\n      letters = '';\n    }\n    if (lowerCase) {\n      result += String.fromCharCode(ord(letters) - 32);\n      letters = '';\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3w6frcvx.ts(31,37): error TS2304: Cannot find name 'ord'.\n../../../../tmp/tmp3w6frcvx.ts(35,37): error TS2304: Cannot find name 'ord'.\n",
      "timestamp": 1660334881
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  \n}\n</code>\n<|/ q tags=javascript,string,arrays dscore=1 |>\n<| c |>\nDid you try anything, because if you don't even know where to start you might end up asking for help with your homework?\n<|/ c |>\n<| c |>\nI have been thinking about it for about a week now. I have a solution but I don't think it is the best\n<|/ c |>\n<| c |>\nCan you show us the solution you came up with?\n<|/ c |>\n<| c |>\nI edited my post to include the solution\n<|/ c |>\n<| c |>\n`return s.split(\"\").reverse().join(\"\");` should be sufficient\n<|/ c |>\n<| a tags=javascript,string,arrays dscore=2 |>\nJust for fun, here's another approach that uses regular expressions instead of split/join.\nThis approach also has the benefit of not needing to keep an extra variable for the reverse string - it's always reversed no matter what:\n\n<code>\nconst solve = (s) => s.replace(/[a-z]/gi, m => m ? '' : 'Z').replace(/[A-Z]/gi, m => m ? '' : 'A');\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));</code>\n<|/ a |>\n<| a dscore=1 tags=javascript,string,arrays |>\nYou could take a Set for collecting each character and replace it with an empty string. This would also take care of non letters later on.\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnp93immp.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmpnp93immp.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpnp93immp.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpnp93immp.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpnp93immp.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmpnp93immp.ts(18,7): error TS1109: Expression expected.\n../../../../tmp/tmpnp93immp.ts(19,5): error TS1005: ';' expected.\n../../../../tmp/tmpnp93immp.ts(19,13): error TS1005: '{' expected.\n../../../../tmp/tmpnp93immp.ts(19,31): error TS1005: ';' expected.\n../../../../tmp/tmpnp93immp.ts(19,34): error TS1005: '(' expected.\n../../../../tmp/tmpnp93immp.ts(19,38): error TS1005: ')' expected.\n../../../../tmp/tmpnp93immp.ts(19,38): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpnp93immp.ts(19,121): error TS1002: Unterminated string literal.\n../../../../tmp/tmpnp93immp.ts(20,2): error TS11",
      "timestamp": 1660334881
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let arr: string[] = s.split(\"\");\n    let result: string = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        let index = arr[i].charCodeAt(0) - 97;\n        index = (index >= 0) ? index : 96;\n        result += String.fromCharCode(index);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'`\\x12`\\x05'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpp2y1el7z.js:26:12)\n    at Object.<anonymous> (/tmp/tmpp2y1el7z.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '`\\x12`\\x05',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334882
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n\treturn s.replace(/[a-z]/gi, x => (x.charCodeAt(0) > 96) ? x.toUpperCase() : x.toLowerCase());\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpfymq9l8b.js:20:12)\n    at Object.<anonymous> (/tmp/tmpfymq9l8b.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334882
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++){\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 103){\n      let charA = String.fromCharCode((s.charCodeAt(i) - 32));\n      newString += charA;\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpuz7xle8r.js:29:12)\n    at Object.<anonymous> (/tmp/tmpuz7xle8r.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334882
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  const rev_letters = s.split('').map(c => c === 'a' || c === 'A' ? 'a' : 'A').join('');\n  return rev_letters === s ? s : rev_letters;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'aAAA'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmplf9mq3df.js:20:12)\n    at Object.<anonymous> (/tmp/tmplf9mq3df.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'aAAA',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334884
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    return s.split('').reduce((res, cur, i, arr) => {\n        if (cur === arr[0]) return arr.reverse().join('');\n        return res + cur;\n    }, '');\n}\n</code>\n<|/ a tags=string,javascript,char,arrays,reverse dscore=0 |>\n<| c |>\nThis code doesn't work for me. Says that \".reduce is not a function\"\n<|/ c |>\n<| c |>\nI updated my answer to show a more functional approach that can handle arbitrary string length and content.\n<|/ c |>\n<| a tags=string,javascript,char,arrays,reverse dscore=0 |>\nThis is how I solved it in Javascript.\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbzncptue.ts(19,2): error TS1110: Type expected.\n../../../../tmp/tmpbzncptue.ts(19,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpbzncptue.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpbzncptue.ts(20,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpbzncptue.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpbzncptue.ts(21,7): error TS1109: Expression expected.\n../../../../tmp/tmpbzncptue.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmpbzncptue.ts(22,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpbzncptue.ts(22,69): error TS1002: Unterminated string literal.\n../../../../tmp/tmpbzncptue.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmpbzncptue.ts(23,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpbzncptue.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmpbzncptue.ts(24,7): error TS1109: Expression expected.\n../..",
      "timestamp": 1660334884
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    return s.split('').reduce((prev, curr, i, arr) => {\n        if (curr.match(/[a-z]/i)) {\n            prev = prev + curr.toUpperCase()\n        } else {\n            prev = prev + curr\n        }\n        return prev\n    }, '')\n}\n\nconsole.log(solve(\"1234\"))\nconsole.log(solve(\"ab\"))\nconsole.log(solve(\"#a@C\"))\n</code>\n<|/ a tags=string,recursion,javascript,arrays |>\n<| a |>\nI believe there are more efficient ways of doing this but this works and is easy to understand by someone who has never used reduce before.\n<code>\nlet solve = s => {\n  let splits = s.split('')\n  let newSplits = []\n  for(let i = 0; i < splits.length; i++) {\n    if(splits[i].match(/[a-z]/)) {\n      newSplits.push(splits[i] + splits[i].toUpperCase())\n    } else {\n      newSplits.push(splits[i])\n    }\n  }\n  return newSplits.join('')\n}\n</code>\n<|/ a tags=string,recursion,javascript,arrays dscore=2 |>\n<| a |>\nI believe the best way to approach this problem is to create a function that returns an array of strings composed of lower case letters (and upper case) of your string, and then apply the Array.prototype.map function to that array. Here's an example:\n\n<code>\nconst str = 'abcdefg';\n\nconst upperCaseLetters = str\n  .split('')\n  .map(letter => letter.toUpperCase())\n\nconst lowerCaseLetters = str\n  .split('')\n  .map(letter => letter.toLowerCase())\n\nconst arr = [upperCaseLetters, lowerCaseLetters]\n\nconst res = arr.reduce((acc, value) => acc.concat(value), [])\n\nconsole.log(res)</code>\n<|/ a dscore=1 tags=string,recursion,javascript,arrays |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp22g2p5vy.ts(27,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp22g2p5vy.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmp22g2p5vy.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp22g2p5vy.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmp22g2p5vy.ts(29,7): error TS1109: Expression expected.\n../../../../tmp/tmp22g2p5vy.ts(30,3): error TS1005: ';' expected.\n../../../../tmp/tmp22g2p5vy.ts(30,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp22g2p5vy.ts(30,17): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp22g2p5vy.ts(30,21): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp22g2p5vy.ts(30,26): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp22g2p5vy.ts(30,36): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp22g2p5vy.ts(30,41): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp22g2p5vy.ts(",
      "timestamp": 1660334884
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    return s.replace(/[a-zA-Z]/g, (m) => m.toUpperCase()) ? s.toLowerCase() : s;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpmfmg7_8r.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmfmg7_8r.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334884
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n\treturn s.match(/[a-z]+/i) ? s.match(/[a-z]+/i)\n\t\t? s.match(/[a-z]+/i)\n\t\t: s.match(/[A-Z]+/i) \n\t\t? s.match(/[A-Z]+/i)\n\t\t: s.match(/[a-z]+/i) ? s.match(/[A-Z]+/i)\n\t\t: s.match(/[A-Z]+/i) ? s.match(/[a-z]+/i)\n\t\t: s.match(/[A-Z]+/i) ? s.match(/[A-Z]+/i)\n\t\t: s.match(/[a-z]+/i) ? s.match(/[A-Z]+/i)\n\t\t: s.match(/[A-Z]+/i) ? s.match(/[a-z]+/i)\n\t\t: s.match(/[A-Z]+/i) ? s.match(/[A-Z]+/i) : \n\t\ts.match(/[a-z]+/i) ? s.match(/[A-Z]+/i) ? \n\t\ts.match(/[a-z]+/i)\n\t\t: s.match(/[A-Z]+/i) ? s.match(/[A-Z]+/i) : \n\t\ts.match(/[a-z]+/i) ? s.match(/[A-Z]+/i) ? s.match(/[a-z]+/i)\n\t\t: s.match(/[A-Z]+/i) ? s.match(/[A-Z]+/i) ? s.match(/[A-Z]+/i) : \n\t\ts.match(/[a-z]+/i) ? s.match(/[A-Z]+/i) ? s.match(/[A-Z]+/i) : \n\t\ts.match(/[A-Z]+/i) ? s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i)\n\t\t: s.match(/[A-Z]+/i) ? s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i)\n\t\t: s.match(/[A-Z]+/i) ? s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i) : s.match(/[A-Z]+/i)\n\t\t: s.match(/[a-z]+/i) ? s.match(/[A-Z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i)\n\t\t: s.match(/[A-Z]+/i) ? s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i) : s.match(/[A-Z]+/i) : s.match(/[a-z]+/i) : \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfs7yifx4.ts(31,129): error TS1005: ';' expected.\n../../../../tmp/tmpfs7yifx4.ts(31,150): error TS1005: ';' expected.\n../../../../tmp/tmpfs7yifx4.ts(31,171): error TS1005: ';' expected.\n../../../../tmp/tmpfs7yifx4.ts(31,192): error TS1005: ';' expected.\n../../../../tmp/tmpfs7yifx4.ts(32,3): error TS1128: Declaration or statement expected.\n../../../../tmp/tmpfs7yifx4.ts(32,66): error TS1005: ';' expected.\n../../../../tmp/tmpfs7yifx4.ts(32,87): error TS1005: ';' expected.\n../../../../tmp/tmpfs7yifx4.ts(32,108): error TS1005: ';' expected.\n../../../../tmp/tmpfs7yifx4.ts(32,129): error TS1005: ';' expected.\n../../../../tmp/tmpfs7yifx4.ts(32,150): error TS1005: ';' expected.\n../../../../tmp/tmpfs7yifx4.ts(32,171): error TS1005: ';' expected.\n../../../../tmp/tmpfs7yifx4.ts(32,192): error TS1005: ';' expected.\n../../../../tmp/tmpfs7yifx4.ts(32,213): error TS1005: ';' expected.\n../../../../tmp/tmpfs7yifx4.ts(32,234): error TS1005: ';' expected.\n../../../../tmp/tmpfs7yifx4.ts(32,255): error TS1005: '",
      "timestamp": 1660334884
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.split('').map(x => x.match(/[a-z]+/) ? x.toUpperCase() : x.toLowerCase()).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp62sdh1uj.js:20:12)\n    at Object.<anonymous> (/tmp/tmp62sdh1uj.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let letters = s\n    let reverse = ''\n\n    for (let i = 0; i < letters.length; i++) {\n        let char = letters[i]\n        let isLetter = char >= 'a' && char <= 'z'\n\n        if (isLetter) {\n            let upperCase = char.toUpperCase()\n            let lowerCase = char.toLowerCase()\n            reverse = `${lowerCase}${upperCase}`\n        } else {\n            reverse = char\n        }\n\n        if (i == letters.length - 1) {\n            reverse = reverse.split(\"\").reverse().join(\"\")\n        }\n    }\n\n    return reverse\n}\n</code>\n<|/ a |>\n<| a tags=javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8xxmfgjy.ts(36,2): error TS1110: Type expected.\n../../../../tmp/tmp8xxmfgjy.ts(36,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8xxmfgjy.ts(37,2): error TS1109: Expression expected.\n../../../../tmp/tmp8xxmfgjy.ts(37,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8xxmfgjy.ts(38,2): error TS1109: Expression expected.\n../../../../tmp/tmp8xxmfgjy.ts(38,6): error TS1005: ';' expected.\n../../../../tmp/tmp8xxmfgjy.ts(38,33): error TS1109: Expression expected.\n../../../../tmp/tmp8xxmfgjy.ts(40,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334885
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let str = '';\n    for (let i = 0; i < s.length; i++){\n        if (s[i] >= 'a' && s[i] <= 'z'){\n            str += s[i] + s[i].toUpperCase();\n        } else if (s[i] >= 'A' && s[i] <= 'Z'){\n            str += s[i] + s[i].toLowerCase();\n        } else {\n            str += s[i];\n        }\n    }\n    return str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AasSDdfF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwqit3dke.js:31:12)\n    at Object.<anonymous> (/tmp/tmpwqit3dke.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AasSDdfF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    const newStr = s.toLowerCase().replace(/[A-Z]/g, (m) => String.fromCharCode(ord(m) + 32));\n    const firstChar = s.charAt(0);\n    if (newStr === s) {\n        return s;\n    } else {\n        return newStr + firstChar;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl0y78rp_.ts(14,81): error TS2304: Cannot find name 'ord'.\n",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.split(\"\").map(function(el){\n    return el.toUpperCase().charCodeAt(0) - 97;\n  }).join(\"\");\n}\n</cell>\n<cell>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkdry1z1j.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmpkdry1z1j.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpkdry1z1j.ts(20,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334885
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let ret: string = \"\";\n  for (let i = 0; i < s.length; i++){\n    let letter = s[i];\n    if (letter === letter.toLowerCase()){\n      ret += letter.toUpperCase();\n    } else {\n      ret += letter;\n    }\n  }\n  return ret.replace(/[^a-zA-Z]/g, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmptt6446bg.js:29:12)\n    at Object.<anonymous> (/tmp/tmptt6446bg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let news = s.replace(/[a-zA-Z]/ig, (x) => x.toUpperCase());\n  news = news.replace(/[^a-zA-Z]/ig, (x) => x.toLowerCase());\n  \n  return news;\n}\n\nlet output = solve(\"1234\");\nconsole.log(output);</code>\n<|/ a tags=javascript,typescript,functional-programming dscore=1 |>\n<| a tags=javascript,typescript,functional-programming dscore=1 |>\nYou can simply use some of String.prototype.replace functions:\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw86kjtyt.ts(21,22): error TS1110: Type expected.\n../../../../tmp/tmpw86kjtyt.ts(21,23): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpw86kjtyt.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpw86kjtyt.ts(22,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpw86kjtyt.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmpw86kjtyt.ts(23,6): error TS1005: ';' expected.\n../../../../tmp/tmpw86kjtyt.ts(23,56): error TS1005: ';' expected.\n../../../../tmp/tmpw86kjtyt.ts(23,66): error TS1109: Expression expected.\n../../../../tmp/tmpw86kjtyt.ts(24,5): error TS1005: ';' expected.\n../../../../tmp/tmpw86kjtyt.ts(24,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpw86kjtyt.ts(24,16): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpw86kjtyt.ts(24,20): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpw86kjtyt.ts(24,25): error TS1434: Unexpected keyword or identifier.\n../",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  if (s.length === 0) {\n    return s\n  }\n  let lower = false\n  let upper = false\n  for (let i = 0; i < s.length; i++) {\n    const chr = s.charAt(i)\n    if (chr !== LOWER && chr !== UPPER) {\n      lower = false\n      upper = false\n    } else {\n      if (chr === LOWER) {\n        lower = true\n      } else if (chr === UPPER) {\n        upper = true\n      } else {\n        if (lower) {\n          s = s.substring(0, i) + UPPER + s.substring(i + 1)\n        } else {\n          s = s.substring(0, i) + LOWER + s.substring(i + 1)\n        }\n      }\n    }\n  }\n  if (s.length) {\n    if (upper) {\n      return s.toUpperCase()\n    } else {\n      return s.toLowerCase()\n    }\n  }\n  return s\n}\n\nconst strings = [\n  \"The quick brown fox jumps over the lazy dog\",\n  \"the quick brown fox jumps over the lazy dog\",\n  \"Quick Brown Fex Jumps Over The Lazy Dog\",\n  \"The Quick Brown Fex Jumps Over The Lazy Dog\",\n  \"ABcdEFG\",\n  \"abcdeFg\",\n  \"abCdEfG\",\n  \"abc de fg\",\n  \"a bcde fg\",\n  \"a b c de fg\",\n  \"A  B  C  D  E  F  G\",\n  \"A B C D E F G\",\n  \"A B B B B B B\",\n  \"A B B B C C D D D\",\n  \"A B C D E F G G G G\",\n  \"a b c d e f g g g g g\",\n  \"a   b   c   d   e   f   g   g   g   g\",\n  \"a  \\t   b  \\t   c  \\t   d  \\t   e  \\t   f  \\t   g  \\t   g  \\t   g  \\t\",\n  \"a   b   c   d   e   f   g   g   g   g   g   g   g   g   g\",\n  \"a  \\t   b  \\t   c  \\t   d  \\t   e  \\t   f  \\t   g  \\t   g  \\t   g  \\t   g  \\t   g  \\t   g  \\t\",\n  \"a   b   c   d   e   f   g   g   g   g   g   g   g   g   g   g\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyh4u6jl9.ts(69,65): error TS1002: Unterminated string literal.\n../../../../tmp/tmpyh4u6jl9.ts(70,1): error TS1005: ',' expected.\n../../../../tmp/tmpyh4u6jl9.ts(70,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let result: string = \"\"\n    for (const char of s) {\n        if (char === char.toLowerCase()) {\n            result = result + char.toUpperCase()\n        } else {\n            result = result + char\n        }\n    }\n    return result\n}\n<|/ file dstars=0 |>\n<| c |>\nHow can you be sure that every string you get will be in lower case?\n<|/ c |>\n<| a tags=string,arrays,javascript dscore=0 |>\nHere's a good exercise for you to work on on your own. It's not exactly a problem that fits the \"What you should do question\" format but it'll give you a good idea of what to think about when solving problems.\nYou can think of each character as a separate \"thing\". If you're working with strings, it's probably best to think of characters as strings. For example, you can think of a character as being a sub-string of another string. That sub-string is a single character.\nNow, let's think about what you want to do with each character. How can you reverse a string? Let's start with the most basic case of a single character. Let's say you're working with the string \"abc\". You can think of the characters as being:\n<code>\n\"a\"\n\"b\"\n\"c\"\n</code>\nIf you're trying to reverse this string in place, you'll notice that \"c\" comes after \"b\" and \"a\" comes after \"b\". What if you were to reverse \"abc\" into \"cba\"? You'd do this:\n<code>\n\"a\" > \"c\"\n\"b\" > \"a\"\n\"c\" > \"b\"\n</code>\nIn your code, you do this to reverse each character:\n<code>\nresult.push(char.toLowerCase())\n</code>\nSo now you've got two pieces of information:\n\nThe original character (let's call it originalChar)\nThe new character (let's call it newChar)\n\nNow what you want to do is check whether newChar is alphabetically less than the original character - which means it'll have to be in lower-case:\n\nnewChar < originalChar\nnewChar.toLowerCase() < originalChar.toLowerCase()\n\nIf that comparison returns true, you want to push newChar to the end of the result array.\nIf the comparison returns false, you want to push originalChar to the end of the result array.\nHere's how you can do that:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgsoqf3sw.ts(24,3): error TS1110: Type expected.\n../../../../tmp/tmpgsoqf3sw.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpgsoqf3sw.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpgsoqf3sw.ts(25,7): error TS1109: Expression expected.\n../../../../tmp/tmpgsoqf3sw.ts(26,5): error TS1005: ';' expected.\n../../../../tmp/tmpgsoqf3sw.ts(26,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpgsoqf3sw.ts(26,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpgsoqf3sw.ts(26,16): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpgsoqf3sw.ts(26,21): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpgsoqf3sw.ts(26,26): error TS1435: Unknown keyword or identifier. Did you mean 'never'?\n../../../../tmp/tmpgsoqf3sw.ts(26,32): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpgsoqf3sw.ts(26,39): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpgsoqf3",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    const result = [];\n\n    for (let i = 0; i < s.length; i++) {\n        const temp = s.charAt(i).toLowerCase();\n        let reversed = '';\n\n        for (let j = 0; j < temp.length; j++) {\n            const value = temp.charCodeAt(j);\n\n            if (value === 61) {\n                const letter = temp[temp.length - (j + 2)];\n                temp = (letter === 'a' ? 'A' : 'a').toUpperCase();\n            } else if (value === 62) {\n                const letter = temp[temp.length - (j + 3)];\n                temp = (letter === 'A' ? 'a' : 'A').toUpperCase();\n            } else if (value === 63) {\n                temp = 'a';\n            } else {\n                temp = temp.toLowerCase();\n            }\n            \n            reversed += temp;\n        }\n\n        result.push(reversed);\n    }\n\n    return result.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpukkcvbqk.ts(25,17): error TS2588: Cannot assign to 'temp' because it is a constant.\n../../../../tmp/tmpukkcvbqk.ts(28,17): error TS2588: Cannot assign to 'temp' because it is a constant.\n../../../../tmp/tmpukkcvbqk.ts(30,17): error TS2588: Cannot assign to 'temp' because it is a constant.\n../../../../tmp/tmpukkcvbqk.ts(32,17): error TS2588: Cannot assign to 'temp' because it is a constant.\n",
      "timestamp": 1660334885
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n\treturn s.split('').map(c => {\n\t\tswitch(c) {\n\t\t\tcase 'a': return 'A'\n\t\t\tcase 'b': return 'B'\n\t\t\tcase 'c': return 'C'\n\t\t\tcase 'd': return 'D'\n\t\t\tcase 'e': return 'E'\n\t\t\tcase 'f': return 'F'\n\t\t\tcase 'g': return 'G'\n\t\t\tcase 'h': return 'H'\n\t\t\tcase 'i': return 'I'\n\t\t\tcase 'j': return 'J'\n\t\t\tcase 'k': return 'K'\n\t\t\tcase 'l': return 'L'\n\t\t\tcase 'm': return 'M'\n\t\t\tcase 'n': return 'N'\n\t\t\tcase 'o': return 'O'\n\t\t\tcase 'p': return 'P'\n\t\t\tcase 'q': return 'Q'\n\t\t\tcase 'r': return 'R'\n\t\t\tcase 's': return 'S'\n\t\t\tcase 't': return 'T'\n\t\t\tcase 'u': return 'U'\n\t\t\tcase 'v': return 'V'\n\t\t\tcase 'w': return 'W'\n\t\t\tcase 'x': return 'X'\n\t\t\tcase 'y': return 'Y'\n\t\t\tcase 'z': return 'Z'\n\t\t}\n\t}).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'SF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpjpbmoii4.js:48:12)\n    at Object.<anonymous> (/tmp/tmpjpbmoii4.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'SF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  const map = new Map<string, string>([\n    [\"A\", \"B\"],\n    [\"a\", \"b\"],\n    [\"#\", \"@\"],\n    [\"a\", \"@\"],\n    [\"@\", \"a\"]\n  ])\n  return s.split('').map(c => map.get(c) || c).join('')\n}\n\nconsole.log(solve('1234'))\nconsole.log(solve('ab'))\nconsole.log(solve('#a@C'))</code>\n\nEDIT:\nIf you want a pure javascript solution, that doesn't require an external library that would have to be loaded on every page load, you can use the following function which doesn't require an external library.\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpesje6xpp.ts(26,29): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpesje6xpp.ts(29,1): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpesje6xpp.ts(29,4): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpesje6xpp.ts(29,8): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpesje6xpp.ts(29,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpesje6xpp.ts(29,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpesje6xpp.ts(29,20): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpesje6xpp.ts(29,46): error TS1005: ';' expected.\n../../../../tmp/tmpesje6xpp.ts(29,178): error TS1005: ';' expected.\n../../../../tmp/tmpesje6xpp.ts(29,180): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpesje6xpp.ts(29,188): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpesje6xpp.ts(29,191): error TS1434: Unexpected keyword or identifier.\n../../../../",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let lowerCaseString = \"\";\n  let upperCaseString = \"\";\n  \n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      if (s[i] >= 'a' && s[i] <= 'z') {\n        upperCaseString += s[i];\n      } else {\n        lowerCaseString += s[i];\n      }\n    } else {\n      lowerCaseString += s[i];\n    }\n  }\n\n  if (lowerCaseString === \"\") {\n    lowerCaseString = upperCaseString;\n  }\n\n  if (upperCaseString === \"\") {\n    upperCaseString = lowerCaseString;\n  }\n\n  if (lowerCaseString === \"\") {\n    lowerCaseString = upperCaseString;\n  }\n  \n  return upperCaseString + lowerCaseString;\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));</code>\n<|/ a dscore=2 |>\n<| a tags=javascript,algorithm |>\nI ran into an interesting problem. I am guessing there are many different approaches to this, but here is a solution that only uses simple string methods.\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp95fwsy49.ts(46,29): error TS1110: Type expected.\n../../../../tmp/tmp95fwsy49.ts(46,30): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp95fwsy49.ts(47,2): error TS1109: Expression expected.\n../../../../tmp/tmp95fwsy49.ts(47,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp95fwsy49.ts(48,2): error TS1109: Expression expected.\n../../../../tmp/tmp95fwsy49.ts(48,6): error TS1005: ';' expected.\n../../../../tmp/tmp95fwsy49.ts(48,33): error TS1109: Expression expected.\n../../../../tmp/tmp95fwsy49.ts(49,3): error TS1005: ';' expected.\n../../../../tmp/tmp95fwsy49.ts(49,7): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp95fwsy49.ts(49,12): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp95fwsy49.ts(49,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp95fwsy49.ts(49,38): error TS1005: ';' expected.\n../../../../tmp/tmp95fwsy49.ts(49,41): error TS1434: Unexpected keyword or identifier.\n../",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.split(\"\").map((char) => {\n    return char.toLowerCase() === char ? char.toUpperCase() : char;\n  }).join(\"\");\n}\n\nexport { solve };\n</code>\n<|/ a |>\n<| c |>\nThanks for the answer, but your solution is only half correct. It also doesn't work when the string is \"#a@c\".\n<|/ c |>\n<| c |>\nThanks for your answer, it works as expected! But I still think the code should be simpler\n<|/ c |>\n<| c |>\nYes there should be one line for the entire string and one line for individual characters but it is very unreadable and unecessary when compared with more readable code\n<|/ c |>\n<| c |>\nThis code doesn't seem to be working as expected. On input of \"#a@c\", it returns \"#AC\"\n<|/ c |>\n<| c |>\nI have added a comment at the top of the code explaining the code in the answer.\n<|/ c |>\n<| a dscore=4 |>\nThis seems like a good use case for String.prototype.reverse()\n\n<code>\nvar foo = '#a@c';\nconsole.log(foo);\nfoo = foo.reverse();\nconsole.log(foo);</code>\n<|/ a tags=javascript,string,reverse |>\n<| a |>\nYou can use this simple approach for reversing strings. \n<code>\nlet string = 'abc';\nlet reverse = string.reverse();\n\nconsole.log(reverse);\n</code>\n<|/ a tags=javascript,string,reverse dscore=3 |>\n<| a tags=javascript,string,reverse |>\nThe simplest answer is that you can use the reverse method of a string to do this\n<code>\nvar myString = '#a@c';\nvar reversedString = myString.reverse(); // reversedString becomes \"c@a#\" \n</code>\n<|/ a dscore=3 |>\n<| a tags=javascript,string,reverse |>\n<code>\nlet string = '#a@c';\n\nstring.replace(/#/,'#').replace(/@/,'@').replace(/c/,'c')\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThanks for the answer, but your solution is only half correct. It also doesn't work when the string is \"#a@c\".\n<|/ c |>\n<| a |>\n<code>\nvar str = \"#a@c\";\nvar reverseStr = \"\";\nvar lastChar = \"c\";\nvar currChar = \"c\";\nvar i = 0;\nwhile (i<str.length) {\n reverseStr += currChar;\n currChar\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwfs_gqvp.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpwfs_gqvp.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwfs_gqvp.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpwfs_gqvp.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwfs_gqvp.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpwfs_gqvp.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmpwfs_gqvp.ts(23,8): error TS1005: ';' expected.\n../../../../tmp/tmpwfs_gqvp.ts(23,12): error TS1005: '(' expected.\n../../../../tmp/tmpwfs_gqvp.ts(23,16): error TS1005: ';' expected.\n../../../../tmp/tmpwfs_gqvp.ts(23,28): error TS1005: ';' expected.\n../../../../tmp/tmpwfs_gqvp.ts(23,33): error TS1005: ')' expected.\n../../../../tmp/tmpwfs_gqvp.ts(23,42): error TS1228: A type predicate is only allowed in return type position for functions and methods.\n../../../../tmp/tmpwfs_gqvp.ts(23,45): error TS1434: Unexpected keyword or identi",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    let isLetter = char.match(/[a-z]/i);\n    if (isLetter) {\n      newString += char.toUpperCase();\n    } else {\n      newString += char;\n    }\n  }\n  return newString;\n}\n\nsolve(\"ab\");\nsolve(\"aB\");\nsolve(\"12\");\nsolve(\"$@B#\");\nsolve(\"$@B#@\");\nsolve(\"$@B#@@\");\nsolve(\"$@B#@@@\");\nsolve(\"$@B#@@@$\");\nsolve(\"$@B#@@@$@\");\nsolve(\"$@B#@@@$@$\");\nsolve(\"$@B#@@@$@$@\");\nsolve(\"$@B#@@@$@$@$\");\nsolve(\"$@B#@@@$@$@$@\");\nsolve(\"$@B#@@@$@$@$@$\");\nsolve(\"$@B#@@@$@$@$@$@\");\nsolve(\"$@B#@@@$@$@$@$@$\");\nsolve(\"$@B#@@@$@$@$@$@$@\");\nsolve(\"$@B#@@@$@$@$@$@$@$\");\nsolve(\"$@B#@@@$@$@$@$@$@$@\");\nsolve(\"$@B#@@@$@$@$@$@$@$@$\");\nsolve(\"$@B#@@@$@$@$@$@$@$@$@\");\nsolve(\"$@B#@@@$@$@$@$@$@$@$@$\");\nsolve(\"$@B#@@@$@$@$@$@$@$@$@$@\");\nsolve(\"$@B#@@@$@$@$@$@$@$@$@$@\");\nsolve(\"$@B#@@@$@$@$@$@$@$@$@$\");\nsolve(\"$@B#@@@$@$@$@$@$@$@$@$@$@\");\nsolve(\"$@B#@@@$@$@$@$@$@$@$@$@$\");\nsolve(\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6ayuuqgv.ts(54,8): error TS1002: Unterminated string literal.\n../../../../tmp/tmp6ayuuqgv.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmp6ayuuqgv.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    // base case\n    if (s.length === 0) {\n        return ''\n    }\n    // split string by characters\n    const characters = s.split('');\n    // check whether character is a letter\n    // if so, reverse\n    for (let i = 0; i < characters.length; i++) {\n        characters[i] = characters[i].toLowerCase();\n    }\n    // return reversed string\n    return characters.reverse().join('');\n}\n\nsolve(\"a#b\");\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease explain how your solution works\n<|/ c |>\n<| c |>\nIf you can see above code, I split string by character and then checked whether each character is a letter or not and if it is letter, I reverse the letters.\n<|/ c |>\n<| c |>\nThat's not an explanation, that's just an implementation detail.  Please edit your answer to explain how this code works.\n<|/ c |>\n<| c |>\nThanks for your suggestion. I edited my answer.\n<|/ c |>\n<| c |>\nThis is a terrible solution.  Please explain your code.\n<|/ c |>\n<| a tags=javascript,string |>\nThis is more a mathematical problem, not programming related. \nYou need to realise that when reversing a string, you just move the character to the left until the last character is reached. \nTo do this move the character to the right until you reach the first character in the string and swap their characters.\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp561leox3.ts(30,2): error TS1110: Type expected.\n../../../../tmp/tmp561leox3.ts(30,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp561leox3.ts(31,2): error TS1109: Expression expected.\n../../../../tmp/tmp561leox3.ts(31,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp561leox3.ts(32,2): error TS1109: Expression expected.\n../../../../tmp/tmp561leox3.ts(32,7): error TS1109: Expression expected.\n../../../../tmp/tmp561leox3.ts(33,8): error TS1005: ';' expected.\n../../../../tmp/tmp561leox3.ts(33,16): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp561leox3.ts(33,20): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp561leox3.ts(33,25): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp561leox3.ts(34,2): error TS1109: Expression expected.\n../../../../tmp/tmp561leox3.ts(34,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp561leox3.ts(35,2): error TS1109: Expression expected.\n../../../../tmp/tmp561leox3.ts(35,7): error TS1109: Expression expected.\n../../../../tmp/tmp561leox3.ts(36,4): error TS1005: ';' expected.\n../../../../tmp/tmp561leox3.ts(36,8): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp561leox3.ts(36,12): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp561leox3.ts(36,16): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp561leox3.ts(36,30): error TS1005: ';' expected.\n../../../../tmp/tmp561leox3.ts(36,36): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp561leox3.ts(36,43): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp561leox3.ts(36,46): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp561leox3.ts(36,56): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp561leox3.ts(36,60): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp561leox3.ts(36,65): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp561",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let resultString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= \"A\" && s[i] <= \"Z\") {\n            let currentUpperCase = s[i];\n            s[i] = \"a\" <= currentUpperCase && currentUpperCase <= \"z\" ? \"A\" : \"a\";\n        }\n    }\n    for (let i = 0; i < s.length; i++) {\n        resultString += s[i];\n    }\n    return resultString;\n}\n</code>\n<|/ a dscore=0 tags=data-structures,algorithm,javascript |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgfxwm33f.ts(26,2): error TS1110: Type expected.\n../../../../tmp/tmpgfxwm33f.ts(26,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpgfxwm33f.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmpgfxwm33f.ts(27,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpgfxwm33f.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmpgfxwm33f.ts(28,6): error TS1005: ';' expected.\n../../../../tmp/tmpgfxwm33f.ts(28,16): error TS1109: Expression expected.\n../../../../tmp/tmpgfxwm33f.ts(30,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let stack = [];\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (!isNaN(char)) {\n            // console.log(char, i);\n            if (char >= '0' && char <= '9') {\n                stack.push(char - '0');\n            } else {\n                stack.push(char);\n            }\n        } else if (char >= 'a' && char <= 'z') {\n            stack.push(char - 'a');\n        } else {\n            stack.push(char);\n        }\n    }\n    \n    while (stack.length > 0) {\n        let pop = stack.pop();\n        if (pop >= '0' && pop <= '9') {\n            stack.push(pop - '0');\n        } else {\n            stack.push(pop);\n        }\n    }\n    \n    return stack.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjdi3p4p3.ts(17,20): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpjdi3p4p3.ts(20,28): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpjdi3p4p3.ts(20,35): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpjdi3p4p3.ts(25,24): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpjdi3p4p3.ts(25,31): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpjdi3p4p3.ts(34,30): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "timestamp": 1660334885
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    const result = ''\n\n    for (let i = 0; i < s.length; i += 1) {\n        const char = s.charAt(i)\n        // console.log(i, char, s.charAt(i).charCodeAt(0))\n        const letter = String.fromCharCode(char.charCodeAt(0) > 65 ? char.charCodeAt(0) - 65 : char.charCodeAt(0) - 97)\n        result += letter\n    }\n\n    return result\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9tnmt2eh.ts(25,2): error TS1110: Type expected.\n../../../../tmp/tmp9tnmt2eh.ts(25,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp9tnmt2eh.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmp9tnmt2eh.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp9tnmt2eh.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmp9tnmt2eh.ts(27,7): error TS1109: Expression expected.\n../../../../tmp/tmp9tnmt2eh.ts(29,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334887
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    return s.split(\"\").reduce((acc, char, index, arr) => {\n        return char === arr[index] ? `${acc}${char.toUpperCase()}${char.toLowerCase()}`\n            : char === arr[index] ? `${acc}${char.toLowerCase()}${char.toUpperCase()}`\n            : `${acc}${char}`\n    }, '');\n}\n</code>\n<|/ a tags=string,javascript,ecmascript-6 dscore=1 |>\n<| a tags=string,javascript,ecmascript-6 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxxnapsb1.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmpxxnapsb1.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpxxnapsb1.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpxxnapsb1.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpxxnapsb1.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpxxnapsb1.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmpxxnapsb1.ts(22,43): error TS1109: Expression expected.\n../../../../tmp/tmpxxnapsb1.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334888
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let ans = \"\";\n    for (let i = 0; i < s.length; i += 1) {\n        if (/[a-z]+/i.test(s[i])) {\n            if (s[i].toLowerCase() === s[i]) {\n                ans += s[i].toUpperCase();\n            } else {\n                ans += s[i].toLowerCase();\n            }\n        } else {\n            ans += s[i];\n        }\n    }\n    return ans;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmphat_ezi1.js:34:12)\n    at Object.<anonymous> (/tmp/tmphat_ezi1.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334888
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  if (s == null || s.length == 0) {\n    return s;\n  }\n\n  let letters = s.split('');\n  let res: string = '';\n\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i].length > 0) {\n      let upperCase: number = letters[i].charCodeAt(0) - 32;\n      let lowerCase: number = letters[i].charCodeAt(0);\n\n      if (upperCase > 26 || lowerCase > 26) {\n        res += String.fromCharCode(upperCase);\n        res += String.fromCharCode(lowerCase);\n      } else {\n        res += letters[i];\n      }\n    } else {\n      res += letters[i];\n    }\n  }\n\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'!ASs$DFf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpvhlms8zb.js:40:12)\n    at Object.<anonymous> (/tmp/tmpvhlms8zb.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '!ASs$DFf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334888
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n\t\n\treturn s.split('')\n\t\t.map(char => {\n\t\t\tif(!isNaN(Number(char))){\n\t\t\t\tif(char>90){\n\t\t\t\t\treturn char.toString() + char.toString()\n\t\t\t\t}else if(char<90){\n\t\t\t\t\treturn char.toString() + char.toString().toUpperCase()\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn char\n\t\t\t}\n\t\t})\n\t\t.sort((a,b) => a.localeCompare(b))\n\t\t.join('')\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1ooadd9a.ts(18,8): error TS2365: Operator '>' cannot be applied to types 'string' and 'number'.\n../../../../tmp/tmp1ooadd9a.ts(20,14): error TS2365: Operator '<' cannot be applied to types 'string' and 'number'.\n",
      "timestamp": 1660334888
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    const lower = String.fromCharCode(97);\n    const upper = String.fromCharCode(65);\n\n    if (s.split(lower).length > 0) {\n        return s.replace(lower,upper).toLowerCase();\n    }\n\n    return s.toLowerCase().split(upper).reverse().join(upper);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nGood answer. Small suggestion: instead of using `String.fromCharCode` you could use the [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) function which accepts a single integer argument that represents the UTF-16 code point of a unicode character.\n<|/ c |>\n<| c |>\n: that's an interesting suggestion. Thanks.\n<|/ c |>\n<| c |>\nThis does not work for all Unicode characters. For example, a double heart `\u2764` does not get converted correctly with this solution.\n<|/ c |>\n<| c |>\nYou're absolutely right. For the purpose of what I'm trying to do, I would need to include non-ASCII characters as well, which is why I went with using the Unicode character code. Thanks for your feedback and answer!\n<|/ c |>\n<| a tags=javascript |>\nI've rewritten my answer using the method suggested by jfriend00 to improve the performance by only looping through the string once:\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1icgk327.ts(23,2): error TS1110: Type expected.\n../../../../tmp/tmp1icgk327.ts(23,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp1icgk327.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmp1icgk327.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp1icgk327.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmp1icgk327.ts(25,7): error TS1109: Expression expected.\n../../../../tmp/tmp1icgk327.ts(26,6): error TS1005: ';' expected.\n../../../../tmp/tmp1icgk327.ts(26,20): error TS1005: ';' expected.\n../../../../tmp/tmp1icgk327.ts(26,32): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1icgk327.ts(26,40): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1icgk327.ts(26,49): error TS1443: Module declaration names may only use ' or \" quoted strings.\n../../../../tmp/tmp1icgk327.ts(26,71): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp1icgk327.ts(26,75): error",
      "timestamp": 1660334888
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    if (s.length === 0) {\n        return s\n    }\n    if (/^[a-z]+$/.test(s)) {\n        let lowerToUpper: string = s.toLowerCase()\n        return lowerToUpper.replace(/\\d(?=\\d$)/g, (m) => (m).toUpperCase())\n    }\n    return s.replace(/[a-z](?=.*[a-z])|[A-Z](?=.*[A-Z])|\\d/, (m) => (m.charCodeAt(0) > 96 ? m.toUpperCase() : m.toLowerCase()))\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpk0ootk7e.js:26:12)\n    at Object.<anonymous> (/tmp/tmpk0ootk7e.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334888
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    const result: string = s.split('');\n    const count = {\n        lower: 0,\n        upper: 0,\n    };\n    for (const c of s) {\n        count[c] = count[c] + 1;\n    }\n    const char: keyof typeof count = Object.keys(count).reduce((a, b) => count[b] > count[a] ? b : a, undefined);\n    if (char === undefined) {\n        return s.split('').reverse().join('');\n    }\n    result[result.indexOf(char)] == char && (result[result.indexOf(char) + 1] = char === char.toUpperCase() ? '' : char.toLowerCase());\n    return result.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvs2k4z0f.ts(14,11): error TS2322: Type 'string[]' is not assignable to type 'string'.\n../../../../tmp/tmpvs2k4z0f.ts(22,11): error TS2322: Type 'string' is not assignable to type '\"upper\" | \"lower\"'.\n../../../../tmp/tmpvs2k4z0f.ts(26,46): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpvs2k4z0f.ts(27,19): error TS2339: Property 'join' does not exist on type 'string'.\n",
      "timestamp": 1660334888
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let res = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      res += s[i].toUpperCase();\n    }\n    else if (s[i] >= 'A' && s[i] <= 'Z') {\n      res += s[i].toLowerCase();\n    }\n    else {\n      res += s[i];\n    }\n  }\n  return res;\n}\n</code>\n<|/ a tags=javascript,string |>\n<| c |>\nIt's not working for the string \"#a@C\". Check my answer.\n<|/ c |>\n<| c |>\nI got your point but `#a@C` doesn't contain any letter but `@C` does. So the function should return a string containing only the letters.\n<|/ c |>\n<| c |>\n: Good point, I misunderstood how OP wants to handle the empty string. Thank you for pointing that out.\n<|/ c |>\n<| a dscore=1 |>\nA few lines of RegExp magic:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjgrm1agf.ts(28,2): error TS1110: Type expected.\n../../../../tmp/tmpjgrm1agf.ts(28,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpjgrm1agf.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmpjgrm1agf.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpjgrm1agf.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmpjgrm1agf.ts(30,7): error TS1109: Expression expected.\n../../../../tmp/tmpjgrm1agf.ts(31,3): error TS1005: ';' expected.\n../../../../tmp/tmpjgrm1agf.ts(31,57): error TS1002: Unterminated string literal.\n../../../../tmp/tmpjgrm1agf.ts(32,2): error TS1109: Expression expected.\n../../../../tmp/tmpjgrm1agf.ts(32,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpjgrm1agf.ts(33,2): error TS1109: Expression expected.\n../../../../tmp/tmpjgrm1agf.ts(33,7): error TS1109: Expression expected.\n../../../../tmp/tmpjgrm1agf.ts(34,3): error TS1005: ';' expected.\n../../../../tmp/tmpjgrm1ag",
      "timestamp": 1660334888
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let res: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (/[a-zA-Z]/.test(s[i])) {\n            res += s[i].toUpperCase();\n        } else {\n            res += s[i];\n        }\n    }\n    return res.trim();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp8q9tzc9a.js:28:12)\n    at Object.<anonymous> (/tmp/tmp8q9tzc9a.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334889
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  s = s.toLowerCase()\n  let i = 0\n  while (i < s.length) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      if (s[i + 1] === 'a') {\n        s[i + 1] = 'b'\n      } else if (s[i + 1] === 'z') {\n        s[i + 1] = 'a'\n      } else {\n        s[i + 1] += s[i]\n        s[i] = 'a'\n      }\n    } else if (s[i] >= '0' && s[i] <= '9') {\n      s[i] += s[i]\n      s[i] = '0'\n    }\n    i++\n  }\n  return s\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprgse7h8b.ts(19,9): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmprgse7h8b.ts(21,9): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmprgse7h8b.ts(23,9): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmprgse7h8b.ts(24,9): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmprgse7h8b.ts(27,7): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmprgse7h8b.ts(28,7): error TS2542: Index signature in type 'String' only permits reading.\n",
      "timestamp": 1660334888
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let r = '', i = 0\n  while (i < s.length) {\n    const n = s.charAt(i)\n    if (n.match(/[a-z]/i)) {\n      r = n.toUpperCase() + r\n    } else {\n      r = n + r\n    }\n    i++\n  }\n  return r\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'FDSA'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp_muuhbsx.js:30:12)\n    at Object.<anonymous> (/tmp/tmp_muuhbsx.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'FDSA',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334889
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let str: string = s;\n  return str\n    .split('')\n    .reverse()\n    .map(char=>char.toLowerCase())\n    .join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'fdsa'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpkg_du03n.js:24:12)\n    at Object.<anonymous> (/tmp/tmpkg_du03n.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'fdsa',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334889
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n\treturn s.split(\"\").map(c => c.charCodeAt(0) >= 65 && c.charCodeAt(0) <= 90 ? (c.charCodeAt(0) - 65 + c.charCodeAt(1) - 64).toString() + c.charCodeAt(1) + 65 : c.charCodeAt(0).toString() + c.charCodeAt(0).toString() + 65).join(\"\");\n}\n<|/ file |>\n<| a tags=javascript,arrays |>\nA more concise version\n\n<code>\nconst solve = s =>\n  [...s]\n    .reverse()\n    .map(c => c.charCodeAt(0) >= 65 && c.charCodeAt(0) <= 90 ? c.charCodeAt(0) - 65 + c.charCodeAt(1) - 64 : c.charCodeAt(0).toString() + c.charCodeAt(0).toString() + 65)\n    .join('');\n    \nconsole.log(solve('abc'));\nconsole.log(solve('abc d'));\nconsole.log(solve('#a@C'));\nconsole.log(solve('123abc'));</code>\n\nAnd a more readable version\n\n<code>\nconst solve = s =>\n  s\n    .split('')\n    .reverse()\n    .map(c =>\n      (c.charCodeAt(0) >= 65 && c.charCodeAt(0) <= 90\n        ? c.charCodeAt(0) - 65 + c.charCodeAt(1) - 64\n        : c.charCodeAt(0).toString() + c.charCodeAt(0).toString() + 65\n      )\n    )\n    .join('');\n\nconsole.log(solve('abc'));\nconsole.log(solve('abc d'));\nconsole.log(solve('#a@C'));\nconsole.log(solve('123abc'));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nUsing regex and replace function\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprh3nbfz7.ts(16,3): error TS1110: Type expected.\n../../../../tmp/tmprh3nbfz7.ts(16,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmprh3nbfz7.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmprh3nbfz7.ts(17,6): error TS1005: ';' expected.\n../../../../tmp/tmprh3nbfz7.ts(17,30): error TS1109: Expression expected.\n../../../../tmp/tmprh3nbfz7.ts(18,3): error TS1005: ';' expected.\n../../../../tmp/tmprh3nbfz7.ts(18,8): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprh3nbfz7.ts(30,31): error TS1110: Type expected.\n../../../../tmp/tmprh3nbfz7.ts(30,32): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmprh3nbfz7.ts(32,1): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprh3nbfz7.ts(32,5): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprh3nbfz7.ts(32,7): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprh3nbfz7.ts(32,12): error TS1434: Unexpected keyword or iden",
      "timestamp": 1660334888
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    const result: string[] = s.split(\"\");\n    const sorted: string[] = [];\n\n    for (let i = 0; i < result.length; i++) {\n        const letter = result[i].toLowerCase();\n        if (letter != letter.toUpperCase()) {\n            sorted.push(letter.toUpperCase());\n        } else {\n            sorted.push(letter);\n        }\n    }\n\n    return sorted.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp2kt_tico.js:30:12)\n    at Object.<anonymous> (/tmp/tmp2kt_tico.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334889
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    const result: string[] = [];\n    for (let i = 0; i < s.length; i += 1) {\n        const char = s.charAt(i);\n        if (isValidLetter(char)) {\n            result.push(char.toLowerCase());\n        } else {\n            result.push(char.toUpperCase());\n        }\n    }\n    return result.join(\"\");\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nYou can reverse a string using reverse() method\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqwyj_f8_.ts(25,2): error TS1110: Type expected.\n../../../../tmp/tmpqwyj_f8_.ts(25,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpqwyj_f8_.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmpqwyj_f8_.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpqwyj_f8_.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmpqwyj_f8_.ts(27,6): error TS1005: ';' expected.\n../../../../tmp/tmpqwyj_f8_.ts(27,16): error TS1109: Expression expected.\n../../../../tmp/tmpqwyj_f8_.ts(28,5): error TS1005: ';' expected.\n../../../../tmp/tmpqwyj_f8_.ts(28,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqwyj_f8_.ts(28,17): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqwyj_f8_.ts(28,19): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqwyj_f8_.ts(28,26): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqwyj_f8_.ts(28,42): error TS1005: ';' expected.\n../..",
      "timestamp": 1660334889
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    \n    return s.split(\"\").map(function (char) {\n        \n        let lcase = char.toLowerCase();\n        let ucase = char.toUpperCase();\n        \n        return lcase === ucase ? char : ucase;\n        \n    }).join(\"\");\n}\n</code>\n<|/ a dscore=5 tags=string,javascript |>\n<| a tags=string,javascript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzid2icdl.ts(24,2): error TS1110: Type expected.\n../../../../tmp/tmpzid2icdl.ts(24,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpzid2icdl.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpzid2icdl.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpzid2icdl.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmpzid2icdl.ts(26,6): error TS1005: ';' expected.\n../../../../tmp/tmpzid2icdl.ts(26,30): error TS1109: Expression expected.\n../../../../tmp/tmpzid2icdl.ts(28,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334889
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let lower = \"\";\n    let upper = \"\";\n    for (let i of s) {\n        if (i.toUpperCase() === i) { //upper\n            upper += i;\n        } else {\n            lower += i;\n        }\n    }\n    let newString = lower + upper;\n    if (newString.length === 0) {\n        return s;\n    }\n    return newString;\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\nconsole.log(solve(\"abcde\"));\n</code>\n<|/ a |>\n<| a dscore=0 |>\nTry this approach \n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk6vlke5k.ts(34,2): error TS1110: Type expected.\n../../../../tmp/tmpk6vlke5k.ts(34,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpk6vlke5k.ts(35,2): error TS1109: Expression expected.\n../../../../tmp/tmpk6vlke5k.ts(35,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpk6vlke5k.ts(36,2): error TS1109: Expression expected.\n../../../../tmp/tmpk6vlke5k.ts(36,6): error TS1005: ';' expected.\n../../../../tmp/tmpk6vlke5k.ts(36,16): error TS1109: Expression expected.\n../../../../tmp/tmpk6vlke5k.ts(37,5): error TS1005: ';' expected.\n../../../../tmp/tmpk6vlke5k.ts(37,10): error TS1005: ';' expected.\n../../../../tmp/tmpk6vlke5k.ts(39,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334889
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.split('').reduce((prev, curr, i) => {\n    return (curr === '#') ? prev + curr :\n      ((curr === '@') && (prev[i] !== '@')) ? curr + prev[i] :\n      curr + prev;\n  }, '');\n}\n\nsolve(\"1234\") // 4321\nsolve(\"ab\") // AB\nsolve(\"#a@C\") // #A@c\n</code>\n<|/ a dscore=0 tags=string,javascript |>\n<| a dscore=0 tags=string,javascript |>\nUsing Javascript:\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr617tk2i.ts(24,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpr617tk2i.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpr617tk2i.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpr617tk2i.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmpr617tk2i.ts(26,6): error TS1005: ';' expected.\n../../../../tmp/tmpr617tk2i.ts(26,15): error TS1005: ';' expected.\n../../../../tmp/tmpr617tk2i.ts(26,39): error TS1109: Expression expected.\n../../../../tmp/tmpr617tk2i.ts(27,7): error TS1005: ';' expected.\n../../../../tmp/tmpr617tk2i.ts(30,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334889
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  const map: { [key: string]: number } = { 'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4 };\n  const map2 = { 'A': '@', 'b': 'B', 'c': 'C', 'd': 'D', 'e': 'E' };\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (map.hasOwnProperty(char)) {\n      char = map[char];\n    }\n    if (i === 0) {\n      char = map2[char];\n    }\n    result.push(char);\n  }\n  return result.join('');\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nHere is a solution that works on any length string and does not use any map or switch statements.\nIt starts by reversing the string, then iterates through the string one character at a time while adding it to a stringBuilder.  Once the string is fully iterated through it returns the stringBuilder as the result.\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpna50_e1c.ts(29,2): error TS1110: Type expected.\n../../../../tmp/tmpna50_e1c.ts(29,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpna50_e1c.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmpna50_e1c.ts(30,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpna50_e1c.ts(31,2): error TS1109: Expression expected.\n../../../../tmp/tmpna50_e1c.ts(31,6): error TS1005: ';' expected.\n../../../../tmp/tmpna50_e1c.ts(31,16): error TS1109: Expression expected.\n../../../../tmp/tmpna50_e1c.ts(32,6): error TS1005: ';' expected.\n../../../../tmp/tmpna50_e1c.ts(32,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpna50_e1c.ts(32,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpna50_e1c.ts(32,20): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpna50_e1c.ts(32,25): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpna50_e1c.ts(32,31): error TS1434: Unexpected keyword ",
      "timestamp": 1660334889
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let lower = \"\";\n    let upper = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        s[i] = c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase();\n    }\n    for (let i = 0; i < s.length; i++) {\n        lower = lower + s[i];\n        upper = upper + s[i];\n    }\n    return lower === upper ? lower : upper + lower;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa90jxu68.ts(18,9): error TS2542: Index signature in type 'String' only permits reading.\n",
      "timestamp": 1660334889
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    var chars = s.split(\"\");\n    for (var i = 0; i < chars.length; i++) {\n        var char = chars[i];\n        if (char.match(/[a-z]/)) {\n            chars[i] = char.toUpperCase();\n        } else {\n            chars[i] = char.toLowerCase();\n        }\n    }\n    return chars.join(\"\");\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8_cc2foh.ts(25,2): error TS1110: Type expected.\n../../../../tmp/tmp8_cc2foh.ts(25,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8_cc2foh.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmp8_cc2foh.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8_cc2foh.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmp8_cc2foh.ts(27,7): error TS1109: Expression expected.\n../../../../tmp/tmp8_cc2foh.ts(29,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334889
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let final = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[A-Z]/)) {\n      if (s[i].match(/[a-z]/)) {\n        final = s.slice(0, i) + s[i].toUpperCase() + s.slice(i + 1);\n      } else {\n        final = s.slice(0, i) + s[i].toLowerCase() + s.slice(i + 1);\n      }\n    } else {\n      final = s.slice(0, i) + s[i] + s.slice(i + 1);\n    }\n  }\n  return final;\n}\n</code>\n<|/ a tags=javascript,data-structures,string,algorithm,arrays |>\n<| a dscore=0 tags=javascript,data-structures,string,algorithm,arrays |>\nThis can be solved by using a regexp to get all the letters [a-z] and ignore case. \nIn each iteration add all the letters to the final string except the last one.\nTo ignore case, use toLowerCase()\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp40l5vmu_.ts(28,2): error TS1110: Type expected.\n../../../../tmp/tmp40l5vmu_.ts(28,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp40l5vmu_.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmp40l5vmu_.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp40l5vmu_.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmp40l5vmu_.ts(30,6): error TS1005: ';' expected.\n../../../../tmp/tmp40l5vmu_.ts(30,15): error TS1005: ';' expected.\n../../../../tmp/tmp40l5vmu_.ts(30,72): error TS1109: Expression expected.\n../../../../tmp/tmp40l5vmu_.ts(31,6): error TS1005: ';' expected.\n../../../../tmp/tmp40l5vmu_.ts(31,10): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp40l5vmu_.ts(31,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp40l5vmu_.ts(31,20): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp40l5vmu_.ts(31,23): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp40l5vmu_.ts(31,29): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp40l5vmu_.ts(31,31): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp40l5vmu_.ts(31,38): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp40l5vmu_.ts(31,41): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp40l5vmu_.ts(31,45): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp40l5vmu_.ts(31,49): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp40l5vmu_.ts(31,67): error TS1005: ';' expected.\n../../../../tmp/tmp40l5vmu_.ts(31,71): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp40l5vmu_.ts(31,78): error TS1128: Declaration or statement expected.\n../../../../tmp/tmp40l5vmu_.ts(31,82): error TS1128: Declaration or statement expected.\n../../../../tmp/tmp40l5vmu_.ts(32,1): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp40l5vmu_.ts(32,4): error TS1434: Unexpected keyword or identifier.\n../.",
      "timestamp": 1660334889
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let upperCaseLettersCount = 0;\n    let lowerCaseLettersCount = 0;\n    let allLettersCount = 0;\n    let result = '';\n    for(let i = 0; i < s.length; i++) {\n        let char = s[i];\n        switch(char) {\n            case 'A':\n            case 'a':\n            case 'B':\n            case 'b':\n            case 'C':\n            case 'c':\n            case 'D':\n            case 'd':\n            case 'E':\n            case 'e':\n            case 'F':\n            case 'f':\n            case 'G':\n            case 'g':\n            case 'H':\n            case 'h':\n            case 'I':\n            case 'i':\n            case 'J':\n            case 'j':\n            case 'K':\n            case 'k':\n            case 'L':\n            case 'l':\n            case 'M':\n            case 'm':\n            case 'N':\n            case 'n':\n            case 'O':\n            case 'o':\n            case 'P':\n            case 'p':\n            case 'Q':\n            case 'q':\n            case 'R':\n            case 'r':\n            case 'S':\n            case 's':\n            case 'T':\n            case 't':\n            case 'U':\n            case 'u':\n            case 'V':\n            case 'v':\n            case 'W':\n            case 'w':\n            case 'X':\n            case 'x':\n            case 'Y':\n            case 'y':\n            case 'Z':\n            case 'z':\n                result += char.toUpperCase();\n                upperCaseLettersCount++;\n                break;\n            case 'a':\n            case 'A':\n            case 'b':\n            case 'B':\n            case 'c':\n            case 'C':\n            case 'd':\n            case 'D':\n            case 'e':\n            case 'E':\n            case 'f':\n            case 'F':\n            case 'g':\n            case 'G':\n            case 'h':\n            case 'H':\n            case 'i':\n            case 'I':\n            case 'j':\n            case 'J':\n            case 'k':\n            case 'K':\n            case 'l':\n            case 'L':\n            case 'm':\n            case 'M':\n            case 'n':\n            case 'N':\n            case 'o':\n            case 'O':\n            case 'p':\n            case 'P':\n            case 'q':\n            case 'Q':\n            case 'r':\n            case 'R':\n            case 's':\n            case 'S':\n            case 't':\n            case 'T':\n            case 'u':\n            case 'U':\n            case 'v':\n            case 'V':\n            case 'w':\n            case 'W':\n            case 'x':\n            case 'X':\n            case 'y':\n            case 'Y':\n            case 'z':\n            case 'Z':\n                result += char.toLowerCase();\n                lowerCaseLettersCount++;\n                break;\n            case '#':\n            case '@':\n                result += '#';\n                allLettersCount++;\n                break;\n            case '.':\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgr9holnd.ts(154,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334891
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  \n  s = s.toLowerCase().replace(/[^a-z]/g, '');\n  \n  if(s.length === 0) {\n    return \"\";\n  }\n\n  if(s.indexOf(\"a\") >= 0 || s.indexOf(\"b\") >= 0 || s.indexOf(\"c\") >= 0 || s.indexOf(\"d\") >= 0) {\n    s = s.replace(\"a\", \"\");\n    s = s.replace(\"b\", \"\");\n    s = s.replace(\"c\", \"\");\n    s = s.replace(\"d\", \"\");\n    s = s.replace(\"@\", \"\");\n  }\n\n  return s;\n}\n\nsolve(\"1234\");\nsolve(\"ab\");\nsolve(\"#a@C\");\nsolve(\"AB\");\nsolve(\"ABC\");\nsolve(\"aA\");\nsolve(\"Aa\");\nsolve(\"aBbB\");\nsolve(\"AAAB\");\nsolve(\"aaaBBA\");\nsolve(\"aAAbBBA\");\nsolve(\"abBcCDAbBBcCdA\");\nsolve(\"abA\");\nsolve(\"bA\");\nsolve(\"bAaB\");\nsolve(\"ABaB\");\nsolve(\"abAaB\");\nsolve(\"abBbBcC\");\nsolve(\"AaBC\");\nsolve(\"AAABC\");\nsolve(\"AbC\");\nsolve(\"abAaBC\");\nsolve(\"abAaBC\");\nsolve(\"aab\");\nsolve(\"aaab\");\nsolve(\"abbb\");\nsolve(\"aabb\");\nsolve(\"aAaBBb\");\nsolve(\"aAaBBBb\");\nsolve(\"aAaBBbBb\");\nsolve(\"aAaBbbb\");\nsolve(\"aAaBbbb\");\nsolve(\"aAaBBbBb\");\nsolve(\"aAaBBbBbb\");\nsolve(\"aAaBBbBbBb\");\nsolve(\"aAaBBbBbBbb\");\nsolve(\"aAaBBbBbBbb\");\nsolve(\"aAaBBbBbBbBb\");\nsolve(\"aAaBBbBbBbBbb\");\nsolve(\"aAaBBbBbBbBbBb\");\nsolve(\"aAaBBbBbBbBbBbb\");\nsolve(\"aAaBBbBbBbBbBbBb\");\nsolve(\"aAaBBbBbBbBbBbBbb\");\nsolve(\"aAaBBbBbBbBb\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplrodu85c.ts(75,20): error TS1002: Unterminated string literal.\n../../../../tmp/tmplrodu85c.ts(76,1): error TS1005: ',' expected.\n../../../../tmp/tmplrodu85c.ts(76,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334891
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let chars = s.split('');\n    for (let i = 0; i < chars.length; i++) {\n        let char = chars[i];\n        if (char.toLowerCase() !== char) {\n            chars[i] = chars[i].toUpperCase();\n        } else {\n            chars[i] = chars[i].toLowerCase();\n        }\n    }\n    return chars.join('');\n}\n</code>\n<|/ a tags=javascript,string,algorithm dscore=0 |>\n<| a |>\nYou can try this:\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0p5antpx.ts(25,2): error TS1110: Type expected.\n../../../../tmp/tmp0p5antpx.ts(25,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0p5antpx.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmp0p5antpx.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0p5antpx.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmp0p5antpx.ts(27,7): error TS1109: Expression expected.\n../../../../tmp/tmp0p5antpx.ts(28,5): error TS1005: ';' expected.\n../../../../tmp/tmp0p5antpx.ts(28,13): error TS1005: '{' expected.\n../../../../tmp/tmp0p5antpx.ts(28,17): error TS1005: ';' expected.\n../../../../tmp/tmp0p5antpx.ts(31,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334891
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    if (!s) {\n        return s;\n    }\n\n    let chars = s.split('');\n\n    chars.forEach((char, i) => {\n        if (char === char.toLowerCase()) {\n            chars[i] = char.toUpperCase();\n        }\n        else if (char === char.toUpperCase()) {\n            chars[i] = char.toLowerCase();\n        }\n    });\n\n    return chars.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp61j97eo4.js:32:12)\n    at Object.<anonymous> (/tmp/tmp61j97eo4.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334892
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let ret = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      ret += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      ret += s[i].toLowerCase();\n    } else {\n      ret += s[i];\n    }\n  }\n  if (ret.match(/[a-z]/i)) {\n    ret =\n      ret\n        .split(\"\")\n        .map((v, i) => i ? v.toUpperCase() : v.toLowerCase())\n        .join(\"\");\n  }\n  return ret;\n}\n\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2q7zcz5b.ts(34,2): error TS1110: Type expected.\n../../../../tmp/tmp2q7zcz5b.ts(34,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2q7zcz5b.ts(35,2): error TS1109: Expression expected.\n../../../../tmp/tmp2q7zcz5b.ts(35,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2q7zcz5b.ts(36,2): error TS1109: Expression expected.\n../../../../tmp/tmp2q7zcz5b.ts(36,6): error TS1005: ';' expected.\n../../../../tmp/tmp2q7zcz5b.ts(36,16): error TS1109: Expression expected.\n../../../../tmp/tmp2q7zcz5b.ts(38,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334891
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let arr = [];\n  for( let i = 0;i<s.length;i++ ){\n    if( s.charCodeAt(i)>96 && s.charCodeAt(i)<123 ){\n      arr.push(s.charCodeAt(i)-32);\n    }\n    else{\n      arr.push( s.charCodeAt(i) );\n    }\n  }\n  return arr.map(v=>String.fromCharCode(v)).join('');\n}\n</code>\n<|/ a tags=javascript |>\n<| c |>\nHi this works just fine. Thanks. But I dont understand what you are doing with 'v'. Can you please explain?\n<|/ c |>\n<| c |>\nHi the v variable is basically an \"array\", so when you map the string you return an array with all the characters that you want, that's why you map the array to string.\n<|/ c |>\n<| c |>\nHi, thanks again, but why do you use \"s.charCodeAt(i)\" instead of \"s[i]\" ?\n<|/ c |>\n<| c |>\n`s.charCodeAt(i)` return the code of the letter you want, but `s[i]` return just the letter that you want without code, but if you need code like if you want capital \"A\" then `s[i]` will give you \"A\", but `s.charCodeAt(i)` will give you the code of \"A\" which is 65\n<|/ c |>\n<| c |>\nThanks a lot. I understand it now. Great help.\n<|/ c |>\n<| a tags=javascript |>\nThis seems to work pretty well:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiqwoynp1.ts(25,2): error TS1110: Type expected.\n../../../../tmp/tmpiqwoynp1.ts(25,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpiqwoynp1.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmpiqwoynp1.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpiqwoynp1.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmpiqwoynp1.ts(27,7): error TS1109: Expression expected.\n../../../../tmp/tmpiqwoynp1.ts(28,4): error TS1005: ';' expected.\n../../../../tmp/tmpiqwoynp1.ts(28,9): error TS1005: ';' expected.\n../../../../tmp/tmpiqwoynp1.ts(28,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpiqwoynp1.ts(28,38): error TS1005: ';' expected.\n../../../../tmp/tmpiqwoynp1.ts(28,40): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpiqwoynp1.ts(28,45): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpiqwoynp1.ts(28,56): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpiqwoynp1.ts(28,61): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpiqwoynp1.ts(28,65): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpiqwoynp1.ts(28,69): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpiqwoynp1.ts(28,80): error TS1005: '(' expected.\n../../../../tmp/tmpiqwoynp1.ts(28,89): error TS1005: ')' expected.\n../../../../tmp/tmpiqwoynp1.ts(28,93): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpiqwoynp1.ts(29,3): error TS1110: Type expected.\n../../../../tmp/tmpiqwoynp1.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpiqwoynp1.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmpiqwoynp1.ts(30,7): error TS1109: Expression expected.\n../../../../tmp/tmpiqwoynp1.ts(31,4): error TS1005: ':' expected.\n../../../../tmp/tmpiqwoynp1.ts(31,8): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpiqwoynp1.ts(31,10): error TS1435: Unknown keyword or identifier. Did y",
      "timestamp": 1660334892
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  for (let i = 0; i < s.length; i++){\n    let currentChar = s[i];\n    let lowerChar = currentChar.toLowerCase();\n    let upperChar = currentChar.toUpperCase();\n    if (currentChar === lowerChar || currentChar === upperChar){\n      if (currentChar === lowerChar){\n        s[i] = upperChar;\n      }\n      else if (currentChar === upperChar){\n        s[i] = lowerChar;\n      }\n    }\n  }\n  return s.reverse().join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv1fm4iom.ts(20,9): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpv1fm4iom.ts(23,9): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmpv1fm4iom.ts(27,12): error TS2339: Property 'reverse' does not exist on type 'string'.\n",
      "timestamp": 1660334891
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    if (s == '') { return ''}\n    return solveInternal(s, '', 0, s.length, 0)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptywq3si7.ts(15,12): error TS2304: Cannot find name 'solveInternal'.\n",
      "timestamp": 1660334891
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    if (s.length == 0) {\n        return \"\";\n    }\n\n    let upperChar: boolean;\n    let lowerChar: boolean;\n\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            upperChar = true;\n            lowerChar = false;\n        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            upperChar = false;\n            lowerChar = true;\n        } else {\n            upperChar = lowerChar = false;\n        }\n    }\n\n    let retVal: string = \"\";\n\n    if (lowerChar) {\n        for (let i = s.length - 1; i >= 0; i--) {\n            retVal += s.charAt(i);\n        }\n    } else {\n        for (let i = 0; i < s.length; i++) {\n            retVal += s.charAt(i);\n        }\n    }\n\n    return retVal.toUpperCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp58pxnvec.js:48:12)\n    at Object.<anonymous> (/tmp/tmp58pxnvec.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334892
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    return s.split(\"\").map(char => char !== \"\" ? char.toUpperCase() : char.toLowerCase()).join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmplf78qxtw.js:19:12)\n    at Object.<anonymous> (/tmp/tmplf78qxtw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334892
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let res = '';\n  for (let i = 0; i < s.length; ++i) {\n    if (s[i].match(/[a-z]/i)) {\n      res += s.substring(i, s.length) + s[i].toUpperCase();\n      i = s.length - 1;\n    } else {\n      res += s.substring(i, s.length) + s[i];\n    }\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDfA'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpfbk3slf4.js:29:12)\n    at Object.<anonymous> (/tmp/tmpfbk3slf4.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDfA',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334892
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.split(\"\").reduce((a: string, b: string) => {\n    if (a.indexOf(b) !== -1) {\n      a = a.replace(b, a.substr(b.length, 1));\n    } else if (b.indexOf(a) !== -1) {\n      b = b.replace(a, b.substr(a.length, 1));\n    }\n    return a + b;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpvw_78edt.js:27:12)\n    at Object.<anonymous> (/tmp/tmpvw_78edt.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334892
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let reversed = \"\";\n  for (let i of s) {\n    if (i.charCodeAt(0) >= 65 && i.charCodeAt(0) <= 90) {\n      reversed = i.charCodeAt(0) - 64 + reversed;\n    } else if (i.charCodeAt(0) >= 97 && i.charCodeAt(0) <= 122) {\n      reversed = i.charCodeAt(0) - 96 + reversed;\n    } else {\n      reversed = i;\n    }\n  }\n  return reversed;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'64191'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpoe568gtq.js:31:12)\n    at Object.<anonymous> (/tmp/tmpoe568gtq.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '64191',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334892
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let map = {};\n    for (let i = 0; i < s.length; i++) {\n        let ch = s[i];\n        map[ch] = map[ch] || 0;\n        map[ch]++;\n    }\n\n    for (let k in map) {\n        if (map[k] > 1) {\n            let new_k: string = k;\n            let count: number = 1;\n            while (new_k in map) {\n                count++;\n                new_k = new_k + ch.toUpperCase();\n            }\n            return s.substring(0, i) + new_k + s.substring(i + 1, s.length);\n        }\n    }\n\n    return s;\n}\n</code>\n<|/ a dscore=0 tags=c#,string,javascript,algorithm |>\n<| c |>\nWhat is this supposed to do? Could you add some explanation?\n<|/ c |>\n<| a dscore=0 |>\nJust as an alternative, here's a solution in JavaScript:\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmk05p4s2.ts(35,2): error TS1110: Type expected.\n../../../../tmp/tmpmk05p4s2.ts(35,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpmk05p4s2.ts(36,2): error TS1109: Expression expected.\n../../../../tmp/tmpmk05p4s2.ts(36,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpmk05p4s2.ts(37,2): error TS1109: Expression expected.\n../../../../tmp/tmpmk05p4s2.ts(37,7): error TS1109: Expression expected.\n../../../../tmp/tmpmk05p4s2.ts(38,6): error TS1005: ';' expected.\n../../../../tmp/tmpmk05p4s2.ts(38,14): error TS1005: ';' expected.\n../../../../tmp/tmpmk05p4s2.ts(38,23): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpmk05p4s2.ts(38,28): error TS1109: Expression expected.\n../../../../tmp/tmpmk05p4s2.ts(38,36): error TS1005: ':' expected.\n../../../../tmp/tmpmk05p4s2.ts(38,40): error TS1005: ')' expected.\n../../../../tmp/tmpmk05p4s2.ts(38,44): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpmk05p4s2.ts(39,3):",
      "timestamp": 1660334892
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let result = ''\n  for(let i=0; i<s.length; i++){\n    if(typeof s[i] === 'string'){\n      result += s[i].split('').map(l => l === s[i].toLowerCase() ? l.toUpperCase() : l.toLowerCase()).join('')\n    }else{\n      result += s[i]\n    }\n  }\n  return result\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpxqmhrsry.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxqmhrsry.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334893
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let lower = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  let upper = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n  let num = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  let str = [s, s]\n  \n  for (let i = 0; i < str.length; i++) {\n    let str = str[i].toLowerCase()\n    let str = str.toUpperCase()\n    for (let j = 0; j < str.length; j++) {\n      if (num.includes(j)) {\n        str[j] = str[j].charCodeAt(0) - 64\n      } else if (lower.includes(str[j])) {\n        str[j] = lower[lower.indexOf(str[j]) + 1]\n      } else if (upper.includes(str[j])) {\n        str[j] = upper[upper.indexOf(str[j]) - 1]\n      }\n    }\n    str[i] = String.fromCharCode(str[i] + 64)\n  }\n  return str[0]\n}</code>\n<|/ a tags=javascript,algorithm,string |>\n<| c |>\nThe question does not ask for \"reverse it\", but to \"reverse case\", which means to convert a letter into its uppercase version.\n<|/ c |>\n<| c |>\nThis question is tagged with [tag:algorithm], not [tag:python], so answers here should be in either language, or other language-specific answers describing how an algorithm can be implemented in either language.\n<|/ c |>\n<| a |>\nI thought of a simple solution:\n\nSplit the string in substrings of the same length\nConvert the first character to uppercase, if it is a letter\nConvert each letter in turn to lowercase, if it is a letter\nRecombine with the first letter in lowercase and the second letter in uppercase\nRepeat until only one character remains\n\nThis implementation is basically the method of Brecht but in javascript. You can see it working here and here it is in javascript on jsfiddle.\nI hope this is helpful for you.\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk6o1nnn9.ts(34,3): error TS1110: Type expected.\n../../../../tmp/tmpk6o1nnn9.ts(34,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpk6o1nnn9.ts(35,2): error TS1109: Expression expected.\n../../../../tmp/tmpk6o1nnn9.ts(35,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpk6o1nnn9.ts(36,2): error TS1109: Expression expected.\n../../../../tmp/tmpk6o1nnn9.ts(36,7): error TS1109: Expression expected.\n../../../../tmp/tmpk6o1nnn9.ts(37,5): error TS1005: ';' expected.\n../../../../tmp/tmpk6o1nnn9.ts(37,14): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpk6o1nnn9.ts(37,19): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpk6o1nnn9.ts(37,23): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpk6o1nnn9.ts(37,31): error TS1005: '(' expected.\n../../../../tmp/tmpk6o1nnn9.ts(37,49): error TS1005: ';' expected.\n../../../../tmp/tmpk6o1nnn9.ts(37,52): error TS1005: ';' expected.\n../../../../tmp/tmpk6o1n",
      "timestamp": 1660334892
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  if (s.length === 0) {\n    return s\n  }\n  if (s.charAt(0) === s.charAt(s.length - 1) && s.charAt(0) === '#') {\n    const reg = new RegExp(`.${s.charAt(s.length - 1)}`, 'ig')\n    return s.toLowerCase().replace(reg, (m, pos, arr) => arr[0] + m.toLowerCase())\n  }\n  return s.toLowerCase().split('').map((c) => {\n    return c.toLowerCase()\n  }).join('')\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp6c85fdfx.js:28:12)\n    at Object.<anonymous> (/tmp/tmp6c85fdfx.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334893
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.split(\"\").map(char => {\n    const capitalCaseChar = char.toUpperCase();\n    const lowercaseChar = char.toLowerCase();\n    return (capitalCaseChar === char) ? lowercaseChar : capitalCaseChar;\n  }).join(\"\");\n}\n</code>\n<|/ a tags=javascript |>\n<| c |>\nYou know that `map` does a lot more than just map a character (like `charCodeAt`?). Also, why are you using `toLowerCase` and `toUpperCase`? Why not just use `char` directly? Finally, why are you creating an intermediate array and then joining it? That is very inefficient.\n<|/ c |>\n<| c |>\nI think this is more efficient than my solution but as you said it can be better\n<|/ c |>\n<| a tags=javascript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphaus1tt9.ts(20,2): error TS1110: Type expected.\n../../../../tmp/tmphaus1tt9.ts(20,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphaus1tt9.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmphaus1tt9.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphaus1tt9.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmphaus1tt9.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmphaus1tt9.ts(23,5): error TS1005: ';' expected.\n../../../../tmp/tmphaus1tt9.ts(23,15): error TS1443: Module declaration names may only use ' or \" quoted strings.\n../../../../tmp/tmphaus1tt9.ts(23,21): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphaus1tt9.ts(23,26): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphaus1tt9.ts(23,28): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphaus1tt9.ts(23,32): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphaus1",
      "timestamp": 1660334892
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let arr:number[] = [...s];\n    let result = '';\n    for (const letter of arr) {\n        result += letter == parseInt(letter) ? letter.toLowerCase() : letter.toUpperCase();\n    }\n    if (arr.length === 0) {\n        result += 'z';\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1rs03tdg.ts(14,9): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp1rs03tdg.ts(17,38): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp1rs03tdg.ts(17,55): error TS2339: Property 'toLowerCase' does not exist on type 'number'.\n../../../../tmp/tmp1rs03tdg.ts(17,78): error TS2339: Property 'toUpperCase' does not exist on type 'number'.\n",
      "timestamp": 1660334892
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let result = \"\";\n    let reversed = s.split(\"\").reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i].match(/^[a-z]+$/)) {\n            let lower = reversed[i].replace(/^[a-z]/, \"A\");\n            let upper = reversed[i].replace(/^[A-Z]/, \"a\");\n            result += lower + upper;\n        } else {\n            result += reversed[i];\n        }\n    }\n    return result\n}\n\nconsole.log(solve(\"1234\"))\nconsole.log(solve(\"ab\"))\nconsole.log(solve(\"#a@C\"))\nconsole.log(solve(\"@A#c\"))\nconsole.log(solve(\"$a!c?\"))\nconsole.log(solve(\"A$c$b\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&^%$\"))\nconsole.log(solve(\"&\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp007ixj2q.ts(76,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmp007ixj2q.ts(77,1): error TS1005: ',' expected.\n../../../../tmp/tmp007ixj2q.ts(77,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334892
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let newString = \"\";\n    const arr: string[] = s.split(\"\");\n    for (let i = 0; i < arr.length; i++) {\n        const letter = arr[i].toLowerCase();\n        \n        // if the letter is in lower case then reverse it\n        if (letter === letter.toLowerCase()) {\n            newString += letter.toUpperCase();\n        }\n        \n        // else keep it as it is\n        else {\n            newString += letter;\n        }\n    }\n    \n    return newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpi98bh41e.js:32:12)\n    at Object.<anonymous> (/tmp/tmpi98bh41e.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334893
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let resultString = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i].toUpperCase()) {\n            resultString += s[i].toUpperCase();\n        } else {\n            resultString += s[i].toLowerCase();\n        }\n    }\n    return resultString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpcp1xljwh.js:28:12)\n    at Object.<anonymous> (/tmp/tmpcp1xljwh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334893
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.split('').reduce((prev, cur) => {\n    const char = prev[prev.length-1]\n    if (typeof char === 'string') {\n      prev[prev.length-1] = char.toLowerCase() === cur.toLowerCase() ? char.toUpperCase() : char.toLowerCase()\n      return prev\n    }\n    return char.toLowerCase() === cur.toLowerCase() ? char.toUpperCase() : char.toLowerCase()\n  }, []).join('')\n}\n</code>\n<|/ a |>\n<| a |>\nI solved this problem in Kata called Reverse the Case. The idea is to reverse each character of the string and join them again to reverse the case. Here's the solution:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9lysvuwe.ts(23,2): error TS1110: Type expected.\n../../../../tmp/tmp9lysvuwe.ts(23,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp9lysvuwe.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmp9lysvuwe.ts(24,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp9lysvuwe.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmp9lysvuwe.ts(25,7): error TS1109: Expression expected.\n../../../../tmp/tmp9lysvuwe.ts(26,3): error TS1005: ';' expected.\n../../../../tmp/tmp9lysvuwe.ts(26,15): error TS1005: ';' expected.\n../../../../tmp/tmp9lysvuwe.ts(26,31): error TS1005: ';' expected.\n../../../../tmp/tmp9lysvuwe.ts(26,38): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9lysvuwe.ts(26,46): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9lysvuwe.ts(26,60): error TS1005: ';' expected.\n../../../../tmp/tmp9lysvuwe.ts(26,65): error TS1228: A type predicate is only allowed in return type position for functions and methods.\n../../../../tmp/tmp9lysvuwe.ts(26,68): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9lysvuwe.ts(26,71): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9lysvuwe.ts(26,79): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9lysvuwe.ts(26,84): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9lysvuwe.ts(26,94): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9lysvuwe.ts(26,97): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9lysvuwe.ts(26,101): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9lysvuwe.ts(26,108): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9lysvuwe.ts(26,112): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9lysvuwe.ts(26,117): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9lysvuwe.ts(26,122): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9lysvuwe.ts(26,12",
      "timestamp": 1660334893
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let chars = s.replace(/[^a-z]/gi, \"\").split('').sort().join('');\n    return chars.toLowerCase() !== chars ? solve(chars.toLowerCase()) : chars;\n}\n\nconsole.log(solve(\"\")); // 0\nconsole.log(solve(\"a\")); // a\nconsole.log(solve(\"z\")); // z\nconsole.log(solve(\"abc\")); // cba\nconsole.log(solve(\"abe\")); // abe\nconsole.log(solve(\"abd\")); // adb\nconsole.log(solve(\"abba\")); // abba\nconsole.log(solve(\"abdb\")); // abdb\n\n</code>\n<|/ a tags=string,recursion,javascript |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcw95se6v.ts(27,2): error TS1110: Type expected.\n../../../../tmp/tmpcw95se6v.ts(27,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpcw95se6v.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmpcw95se6v.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpcw95se6v.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmpcw95se6v.ts(29,6): error TS1005: ';' expected.\n../../../../tmp/tmpcw95se6v.ts(29,16): error TS1109: Expression expected.\n../../../../tmp/tmpcw95se6v.ts(31,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334894
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let sArr = s.split(\"\")\n  if (s.length === 0) {\n    return sArr.join(\"\")\n  }\n  for (let i = 0; i < sArr.length; i++) {\n    if (sArr[i] === undefined) {\n      sArr[i] = sArr[i].toUpperCase()\n    } else {\n      sArr[i] = sArr[i].toLowerCase()\n    }\n  }\n  return sArr.join(\"\")\n}\n\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8rjy6mmh.ts(28,2): error TS1110: Type expected.\n../../../../tmp/tmp8rjy6mmh.ts(28,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8rjy6mmh.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmp8rjy6mmh.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8rjy6mmh.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmp8rjy6mmh.ts(30,6): error TS1005: ';' expected.\n../../../../tmp/tmp8rjy6mmh.ts(30,16): error TS1109: Expression expected.\n../../../../tmp/tmp8rjy6mmh.ts(32,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334894
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    if (s.indexOf('@') !== -1) {\n        throw new Error('This string contains invalid symbols');\n    }\n\n    return s.split('')\n        .map(x => x.toUpperCase())\n        .join('') \n        .replace(/[a-z]/g, x => x.toUpperCase())\n        .toLowerCase()\n        .replace(/[^a-zA-Z]/g, '');\n}\n\nconst input2: string = \n`\n#a@c\n#A@c\n#A@C\n`\n\nlet output2: string = solve(input2);\nconsole.log(output2);\n</code>\n<|/ a dscore=1 tags=javascript,functional-programming,string |>\n<| a dscore=0 tags=javascript,functional-programming,string |>\nI guess you're looking for this:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_d75brhg.ts(35,2): error TS1110: Type expected.\n../../../../tmp/tmp_d75brhg.ts(35,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_d75brhg.ts(36,2): error TS1109: Expression expected.\n../../../../tmp/tmp_d75brhg.ts(36,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_d75brhg.ts(37,2): error TS1109: Expression expected.\n../../../../tmp/tmp_d75brhg.ts(37,6): error TS1005: ';' expected.\n../../../../tmp/tmp_d75brhg.ts(37,15): error TS1005: ';' expected.\n../../../../tmp/tmp_d75brhg.ts(37,62): error TS1109: Expression expected.\n../../../../tmp/tmp_d75brhg.ts(38,3): error TS1005: ';' expected.\n../../../../tmp/tmp_d75brhg.ts(38,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp_d75brhg.ts(38,33): error TS1002: Unterminated string literal.\n../../../../tmp/tmp_d75brhg.ts(40,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334895
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  for (let i = 0; i < s.length; i++) {\n    let lowerCaseLetter = s[i];\n    let upperCaseLetter = String.fromCharCode(s[i].charCodeAt() + 32);\n    if (lowerCaseLetter == upperCaseLetter) {\n      s[i] = s[i].toUpperCase();\n    } else {\n      s[i] = s[i].toLowerCase();\n    }\n  }\n  let reversedString = s.join(\"\");\n  reversedString = reversedString.replace(/(.)(.)/g, (m, c, n) => {\n    let firstChar = c.toUpperCase();\n    let secondChar = n.toLowerCase();\n    return firstChar + secondChar;\n  });\n  return reversedString;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you! This solved my problem! It also helped me to understand some more about regex (which I didn't know), so thank you again!\n<|/ c |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvkf85opw.ts(31,2): error TS1110: Type expected.\n../../../../tmp/tmpvkf85opw.ts(31,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpvkf85opw.ts(32,2): error TS1109: Expression expected.\n../../../../tmp/tmpvkf85opw.ts(32,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpvkf85opw.ts(33,2): error TS1109: Expression expected.\n../../../../tmp/tmpvkf85opw.ts(33,7): error TS1109: Expression expected.\n../../../../tmp/tmpvkf85opw.ts(34,7): error TS1005: ';' expected.\n../../../../tmp/tmpvkf85opw.ts(34,12): error TS1005: ';' expected.\n../../../../tmp/tmpvkf85opw.ts(34,17): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpvkf85opw.ts(34,24): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpvkf85opw.ts(34,36): error TS1005: ';' expected.\n../../../../tmp/tmpvkf85opw.ts(34,39): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpvkf85opw.ts(34,44): error TS1434: Unexpected keyword or identifier.\n../.",
      "timestamp": 1660334895
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    return s.replace(/[a-z]/gi, (a) => a.toLowerCase()) //This finds all the letters \n    .replace(/[^A-Z]/gi, (a) => a.toUpperCase()) //and replaces them with the upper-case version.\n}\n\n</code>\n<|/ a tags=string,function,javascript,typescript dscore=0 |>\n<| a dscore=0 |>\nThis can be solved using map() and reverse() functions of javascript array\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt3zr4bfi.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmpt3zr4bfi.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpt3zr4bfi.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpt3zr4bfi.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpt3zr4bfi.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpt3zr4bfi.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmpt3zr4bfi.ts(20,16): error TS1109: Expression expected.\n../../../../tmp/tmpt3zr4bfi.ts(21,6): error TS1005: ';' expected.\n../../../../tmp/tmpt3zr4bfi.ts(21,10): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpt3zr4bfi.ts(21,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpt3zr4bfi.ts(21,20): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpt3zr4bfi.ts(21,32): error TS1005: ';' expected.\n../../../../tmp/tmpt3zr4bfi.ts(21,46): error TS1005: ';' expected.\n../../../../tmp/tmpt3zr4",
      "timestamp": 1660334895
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    // ++; Look at the code below to see the meaning of \"i++\"\n    // i is initialized to 0\n    // ++; Look at the code below to see the meaning of \"i++\"\n    // i is initialized to 1\n    // ++; Look at the code below to see the meaning of \"i++\"\n    // i is initialized to 2\n    let i: number = 0, result: string = s;\n    // The code below is looking at each character in \"s\"\n    // and deciding whether or not to reverse the case\n    // of the character to its lower or upper case\n    while (i < s.length) {\n        if (s.charAt(i) === '@') {\n            // ++; Look at the code below to see the meaning of \"i++\"\n            // i is increased by 1 after a condition is met\n            // \"i\" is incremented by 1\n            i += 1;\n            // ++; Look at the code below to see the meaning of \"i++\"\n            // i is increased by 1 after a condition is met\n            // \"i\" is incremented by 1\n            if (s.charAt(i) !== '#') {\n                result = s.toUpperCase();\n            } else {\n                result = s.toLowerCase();\n            }\n        } else {\n            result = s;\n        }\n        // ++; Look at the code below to see the meaning of \"i++\"\n        // i is increased by 1 after a condition is met\n        // \"i\" is incremented by 1\n        i += 1;\n    }\n    return result;\n}\n\n</code>\n<|/ a dscore=1 tags=javascript,string |>\n<| c |>\nHi, thank you for your help, I tried the solution in the comments and it didn't work. I'm thinking I might have something wrong with my input parameters. I edited my question and added my code for the method I created, but I don't know if it will help.\n<|/ c |>\n<| c |>\nHi, I'm still trying to figure this out, but I think I see what the problem is - I wasn't resetting the value of i to 0 after I finished changing the string. After I did that, it started working correctly! Thank you for your help, I really appreciate it!\n<|/ c |>\n<| a dscore=1 tags=javascript,string |>\nI tried to solve this problem in Java but my solution was only working on one test case. \n<code>\npublic String reverse(String s) {\n    if (s == null || s.isEmpty()) {\n        return s;\n    }\n    int len = s.length();\n    String reverse = \"\";\n    for (int i = 0; i < len; i++) {\n        reverse = reverse + s.charAt(i);\n        System.out.println(reverse);\n    }\n    int count = 0;\n    for (int i = len - 1; i >= 0; i--) {\n        if (reverse.charAt(i) == reverse.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3it_rwvw.ts(49,2): error TS1110: Type expected.\n../../../../tmp/tmp3it_rwvw.ts(49,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3it_rwvw.ts(50,2): error TS1109: Expression expected.\n../../../../tmp/tmp3it_rwvw.ts(50,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3it_rwvw.ts(51,2): error TS1109: Expression expected.\n../../../../tmp/tmp3it_rwvw.ts(51,7): error TS1109: Expression expected.\n../../../../tmp/tmp3it_rwvw.ts(52,11): error TS1005: ';' expected.\n../../../../tmp/tmp3it_rwvw.ts(52,19): error TS1005: '(' expected.\n../../../../tmp/tmp3it_rwvw.ts(52,24): error TS1005: ';' expected.\n../../../../tmp/tmp3it_rwvw.ts(52,32): error TS1005: ';' expected.\n../../../../tmp/tmp3it_rwvw.ts(52,38): error TS1005: ')' expected.\n../../../../tmp/tmp3it_rwvw.ts(52,58): error TS1005: ';' expected.\n../../../../tmp/tmp3it_rwvw.ts(52,67): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3it_rwvw.ts(52,71): error TS1434: Unexpected",
      "timestamp": 1660334895
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.replace(/[a-z]/gi, () => {\n    if (s.toLowerCase() === s) {\n      return s.toUpperCase();\n    } else {\n      return s.toLowerCase();\n    }\n  });\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));</code>\n<|/ a |>\n<| c |>\nthis doesn't work. for input `#a@C` it returns `#a@c` instead of `#A@c`\n<|/ c |>\n<| c |>\nyeah it's only a working solution because I didn't wanted to use regex. I edited my answer and now it's working like you want\n<|/ c |>\n<| a tags=javascript,string |>\nThis also can be done using String#split and String#toUpperCase.\n<code>\nlet result = str.split('').map(ch => ch.toUpperCase()).join('');\n</code>\n\n<code>\nlet str = \"#a@C\"\n\nlet result = str.split('').map(ch => ch.toUpperCase()).join('');\n\nconsole.log(result);</code>\n<|/ a dscore=1 |>\n<| c |>\nI like the use of `String#split`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpabfotdh6.ts(25,29): error TS1110: Type expected.\n../../../../tmp/tmpabfotdh6.ts(25,30): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpabfotdh6.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmpabfotdh6.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpabfotdh6.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmpabfotdh6.ts(27,7): error TS1109: Expression expected.\n../../../../tmp/tmpabfotdh6.ts(28,6): error TS1005: ';' expected.\n../../../../tmp/tmpabfotdh6.ts(28,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpabfotdh6.ts(28,72): error TS1002: Unterminated string literal.\n../../../../tmp/tmpabfotdh6.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmpabfotdh6.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpabfotdh6.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmpabfotdh6.ts(30,7): error TS1109: Expression expected.\n../.",
      "timestamp": 1660334895
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.split(\"\").map(c => c.toLowerCase().charCodeAt(0) >= 97 ? c.toUpperCase() : c.toLowerCase()).join(\"\");\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThe code is in Javascript. I don't know why you tagged \"typescript\" if you need it only in JS. You can use ES6 or ES5 with the transpiler like Babel.\n<|/ c |>\n<| a tags=algorithm,string |>\nThis problem can be solved with following approach:\n\nUse two variables to represent each character and it's original case \n<code>\nstring original = \"ab#a@c\"\nstring reversed = \"4321\"\n</code>\nSplit original string into array and store character and it's original case into respective array\n<code>\nstring original = \"ab#a@c\"\nvar arr = original.ToCharArray();\nvar originalCase = original.ToCharArray().Select(c => c.ToString().ToUpper()).ToArray();\n</code>\nIterate over array, check if current character is upper case and change to lower case else change to upper case\n<code>\nfor (int i = 0; i < arr.Length; i++)\n{\n    if (arr[i] == originalCase[i])\n        arr[i] = arr[i].ToString().ToLower();\n    else\n        arr[i] = arr[i].ToString().ToUpper();\n}\n</code>\nJoin array elements back to string\n<code>\nstring result = String.Join(\"\", arr);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this approach. It can be easily extended to take into account any number of characters to be flipped.\n<|/ c |>\n<| a dscore=1 |>\nHere is some more code that can be used in a function.\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4lh5p3v2.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmp4lh5p3v2.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp4lh5p3v2.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmp4lh5p3v2.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp4lh5p3v2.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmp4lh5p3v2.ts(18,7): error TS1109: Expression expected.\n../../../../tmp/tmp4lh5p3v2.ts(19,5): error TS1005: ';' expected.\n../../../../tmp/tmp4lh5p3v2.ts(19,30): error TS1005: ';' expected.\n../../../../tmp/tmp4lh5p3v2.ts(19,30): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp4lh5p3v2.ts(19,150): error TS1002: Unterminated string literal.\n../../../../tmp/tmp4lh5p3v2.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmp4lh5p3v2.ts(20,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp4lh5p3v2.ts(21,2): error TS1109: Expression expected.\n../../../.",
      "timestamp": 1660334895
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let ls = s.length\n    if (ls <= 0) {\n        return s\n    }\n    let i = ls\n    let result = s.slice(1)\n    for (let j = i; j <= ls - 1; j++) {\n        let char = s[j]\n        if (char >= 'a' && char <= 'z') {\n            if (char >= 'A' && char <= 'Z') {\n                char = char.toUpperCase()\n            } else {\n                char = char.toLowerCase()\n            }\n        }\n        result = char + result\n    }\n    return result\n}\n</code>\n<|/ a |>\n<| a |>\nI find that using regex to replace multiple strings with another string is unintuitive and complicated compared to other approaches, but here is one simple solution.\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqxja4feq.ts(33,2): error TS1110: Type expected.\n../../../../tmp/tmpqxja4feq.ts(33,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpqxja4feq.ts(34,2): error TS1109: Expression expected.\n../../../../tmp/tmpqxja4feq.ts(34,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpqxja4feq.ts(35,2): error TS1109: Expression expected.\n../../../../tmp/tmpqxja4feq.ts(35,7): error TS1109: Expression expected.\n../../../../tmp/tmpqxja4feq.ts(36,3): error TS1005: ';' expected.\n../../../../tmp/tmpqxja4feq.ts(36,8): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqxja4feq.ts(36,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqxja4feq.ts(36,19): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqxja4feq.ts(36,25): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqxja4feq.ts(36,28): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqxja4feq.ts(36,36): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqxja4feq.ts(36,45): error TS1435: Unknown keyword or identifier. Did you mean 'string'?\n../../../../tmp/tmpqxja4feq.ts(36,58): error TS1005: '(' expected.\n../../../../tmp/tmpqxja4feq.ts(36,66): error TS1005: ')' expected.\n../../../../tmp/tmpqxja4feq.ts(36,73): error TS1228: A type predicate is only allowed in return type position for functions and methods.\n../../../../tmp/tmpqxja4feq.ts(36,76): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqxja4feq.ts(36,88): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqxja4feq.ts(36,92): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqxja4feq.ts(36,104): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqxja4feq.ts(36,113): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqxja4feq.ts(36,116): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpqxja4feq.ts(36,138): error TS1005: ';' expected.\n../../../../tmp/tm",
      "timestamp": 1660334895
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let res = s.split('').reverse().join('');\n  let len = res.length;\n\n  if (len === 0) return s;\n  if (len === 1) return res.charAt(0);\n\n  for (let i = 0; i < res.length; i++) {\n    let c = res.charAt(i);\n    if (c === c.toUpperCase()) {\n      res = res.slice(0, i) + res.slice(i + 1, i + 1) + c.toLowerCase();\n    }\n  }\n  return res;\n}\n</code>\nThe same with regex:\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2uklc3zo.ts(28,2): error TS1110: Type expected.\n../../../../tmp/tmp2uklc3zo.ts(28,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2uklc3zo.ts(29,1): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2uklc3zo.ts(29,5): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2uklc3zo.ts(29,15): error TS1005: '(' expected.\n../../../../tmp/tmp2uklc3zo.ts(29,20): error TS1005: ')' expected.\n../../../../tmp/tmp2uklc3zo.ts(32,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334895
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let re = s.replace(/[a-z]/gi, (m) => {\n        if (m == '@') {\n            return m;\n        } else if (m == m.toLowerCase()) {\n            return m.toUpperCase();\n        } else if (m == m.toUpperCase()) {\n            return m.toLowerCase();\n        }\n    });\n    return re;\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\nconsole.log(solve(\"@b@\"));\nconsole.log(solve(\"a@b\"));\nconsole.log(solve(\"abcde\"));\nconsole.log(solve(\"abcdefg\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"@abc\"));\nconsole.log(solve(\"#a@b@\"));\nconsole.log(solve(\"a@b\"));\nconsole.log(solve(\"abc\"));\nconsole.log(solve(\"abcde\"));\nconsole.log(solve(\"@a@b@\"));\nconsole.log(solve(\"@a@b\"));\nconsole.log(solve(\"@abc\"));\nconsole.log(solve(\"#a@C\"));\nconsole.log(solve(\"a@C\"));</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,node.js |>\nThis should work without any extra functions. Just a regex to check if the word is lowercase or not and replace with lowercase if word is lowercase. \n\n<code>\nconst input = prompt(\"Enter the String\");\ninput = input.replace(/[a-z]/gi, (m) => {\n  if (m == '@') {\n    return m;\n  } else if (m == m.toLowerCase()) {\n    return m.toUpperCase();\n  } else if (m == m.toUpperCase()) {\n    return m.toLowerCase();\n  }\n});\n\nconsole.log(input);</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,node.js |>\nA simple regex would do the trick :\n\n<code>\nconst input = '@a@b@';\nconst res = input.replace(/[a-z]/gi, (m) => {\n    if (m == '@') {\n        return m;\n    } else if (m == m.toLowerCase()) {\n        return m.toUpperCase();\n    } else if (m == m.toUpperCase()) {\n        return m.toLowerCase();\n    }\n});\n\nconsole.log(res);</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nconst input = prompt(\"Enter the String\");\nconst arr = [...input];\narr=arr.replace(/[a-z]/gi, (m) => {\n    if (m == '@') {\n        return m;\n    } else if (m == m.toLowerCase()) {\n        return m.toUpperCase();\n    } else if (m == m.toUpperCase()) {\n        return m.toLowerCase();\n    }\n});\narr=arr.reverse();\narr=arr.join('');\nconsole.log(arr);\n</code>\n<|/ a dscore=0 tags=javascript,node.js |>\n<| a dscore=0 |>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppfuewpwu.ts(43,28): error TS1110: Type expected.\n../../../../tmp/tmppfuewpwu.ts(43,29): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmppfuewpwu.ts(44,2): error TS1109: Expression expected.\n../../../../tmp/tmppfuewpwu.ts(44,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmppfuewpwu.ts(45,2): error TS1109: Expression expected.\n../../../../tmp/tmppfuewpwu.ts(45,6): error TS1005: ';' expected.\n../../../../tmp/tmppfuewpwu.ts(45,31): error TS1109: Expression expected.\n../../../../tmp/tmppfuewpwu.ts(46,6): error TS1005: ';' expected.\n../../../../tmp/tmppfuewpwu.ts(46,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppfuewpwu.ts(46,18): error TS1435: Unknown keyword or identifier. Did you mean 'with out'?\n../../../../tmp/tmppfuewpwu.ts(46,26): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppfuewpwu.ts(46,30): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppfuewpwu.ts(46,52): error TS1005: ';' expected.\n../../../../tmp/tmppfuewpwu.ts(46,54): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppfuewpwu.ts(46,60): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppfuewpwu.ts(46,63): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppfuewpwu.ts(46,72): error TS1005: '(' expected.\n../../../../tmp/tmppfuewpwu.ts(46,76): error TS1005: ')' expected.\n../../../../tmp/tmppfuewpwu.ts(46,81): error TS1228: A type predicate is only allowed in return type position for functions and methods.\n../../../../tmp/tmppfuewpwu.ts(46,84): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppfuewpwu.ts(46,94): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppfuewpwu.ts(46,97): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppfuewpwu.ts(46,101): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppfuewpwu.ts(46,105): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppfuewpwu.ts(46,1",
      "timestamp": 1660334896
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  if (s.split('').reduce((a: any, b: any) => a + (b.charCodeAt(0) >= 65 && b.charCodeAt(0) <= 90 ? '' : b.toLowerCase()) + b.toLowerCase(), '') === '') {\n    return s.split('').reverse().join('');\n  } else {\n    return s;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpwtfmrv51.js:24:12)\n    at Object.<anonymous> (/tmp/tmpwtfmrv51.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334896
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.split('').map(c => c===c ? c.toUpperCase() : c.toLowerCase()).join('');\n}\n</code>\n<|/ a |>\n<| a tags=javascript,string,case-conversion |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi8t_6wvd.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmpi8t_6wvd.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpi8t_6wvd.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpi8t_6wvd.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpi8t_6wvd.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmpi8t_6wvd.ts(18,6): error TS1005: ';' expected.\n../../../../tmp/tmpi8t_6wvd.ts(18,29): error TS1109: Expression expected.\n../../../../tmp/tmpi8t_6wvd.ts(18,46): error TS1109: Expression expected.\n../../../../tmp/tmpi8t_6wvd.ts(20,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334896
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    const map = new Map<string, string>();\n    let str = \"\";\n    \n    for (let i = 0; i < s.length; i++) {\n        if (map.has(s[i])) {\n            str = map.get(s[i]) + str;\n            map.delete(s[i]);\n        } else {\n            map.set(s[i], str);\n            str = s[i];\n        }\n    }\n    \n    str = str + map.get(s[i]);\n    return str;\n}\n<|/ file dstars=0 ext=.ts |>\n<| a |>\nA straightforward solution without using extra memory, is to reverse the string using two pointers and swap the characters with each other. \nFor this, you have to keep track of two indices and make sure that the final result does not contain a character that is contained in the string twice.\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp98hmnbk0.ts(30,3): error TS1110: Type expected.\n../../../../tmp/tmp98hmnbk0.ts(30,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp98hmnbk0.ts(31,2): error TS1109: Expression expected.\n../../../../tmp/tmp98hmnbk0.ts(31,7): error TS1109: Expression expected.\n../../../../tmp/tmp98hmnbk0.ts(32,3): error TS1005: ';' expected.\n../../../../tmp/tmp98hmnbk0.ts(32,19): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp98hmnbk0.ts(32,28): error TS1435: Unknown keyword or identifier. Did you mean 'with out'?\n../../../../tmp/tmp98hmnbk0.ts(32,36): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp98hmnbk0.ts(32,42): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp98hmnbk0.ts(32,59): error TS1005: ';' expected.\n../../../../tmp/tmp98hmnbk0.ts(32,62): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp98hmnbk0.ts(32,70): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp98hmnbk0.ts(32,74): er",
      "timestamp": 1660334896
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let reversed = s.split('').reverse().join('');\n  if (reversed.split('').every(x => x !== '') && s.split('').every(x => x !== '')) {\n    return reversed;\n  } else {\n    return s.split('').reverse().join('');\n  }\n}\n\n</code>\n<|/ a tags=string,typescript,javascript,algorithm dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar str = \"#a@C\";\nvar reverse = str.split(\"\").reverse().join(\"\");\nvar reg = new RegExp(/[^a-zA-Z]/g);\nvar result = reverse.replace(reg,\"\");\nconsole.log(result);</code>\n\nOr else you can try with this:\n\n<code>\nvar str = \"#a@C\";\nvar reverse = str.split(\"\").reverse().join(\"\");\nvar reg = new RegExp(/[^a-zA-Z]/g);\nvar result = reverse.replace(reg,\"\");\nconsole.log(result);</code>\n<|/ a tags=string,typescript,javascript,algorithm |>\n<| a dscore=0 |>\nIn a case where you want to replace all occurrences of any non-alphabetic character with the empty string you can use replace with regex /[^a-zA-Z]/g where /g stands for global search\n<code>\nconst result = \"#a@C\".replace(/[^a-zA-Z]/g, '');\n</code>\n<|/ a tags=string,typescript,javascript,algorithm |>\n<| a tags=string,typescript,javascript,algorithm |>\nThis can be solved using RegExp /[^a-zA-Z]/g\nThe code is:\n\n<code>\nlet str = '#a@C';\nlet rev = str.split(\"\").reverse().join(\"\");\nlet re = RegExp(/[^a-zA-Z]/g);\nlet result = rev.replace(re, \"\")\nconsole.log(result);</code>\n<|/ a dscore=0 |>\n<| a tags=string,typescript,javascript,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpg4w9f7rt.ts(22,2): error TS1110: Type expected.\n../../../../tmp/tmpg4w9f7rt.ts(22,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpg4w9f7rt.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmpg4w9f7rt.ts(23,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpg4w9f7rt.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/tmpg4w9f7rt.ts(24,6): error TS1005: ';' expected.\n../../../../tmp/tmpg4w9f7rt.ts(24,16): error TS1109: Expression expected.\n../../../../tmp/tmpg4w9f7rt.ts(26,1): error TS1109: Expression expected.\n../../../../tmp/tmpg4w9f7rt.ts(30,22): error TS1110: Type expected.\n../../../../tmp/tmpg4w9f7rt.ts(30,23): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpg4w9f7rt.ts(32,1): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpg4w9f7rt.ts(32,4): error TS1128: Declaration or statement expected.\n../../../../tmp/tmpg4w9f7rt.ts(32,9): error TS1434: Unexpected keyword or ide",
      "timestamp": 1660334896
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.replace(/[a-z]/gi, (x: string) => {\n    if (x.toLowerCase() === x.toUpperCase()) {\n      return x.toLowerCase();\n    }\n    return x.toUpperCase();\n  });\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));</code>\n<|/ a dscore=3 |>\n<| a tags=javascript,angular,ecmascript-6 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp5v1mekd.ts(24,29): error TS1110: Type expected.\n../../../../tmp/tmpp5v1mekd.ts(24,30): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpp5v1mekd.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpp5v1mekd.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpp5v1mekd.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmpp5v1mekd.ts(26,6): error TS1005: ';' expected.\n../../../../tmp/tmpp5v1mekd.ts(26,44): error TS1109: Expression expected.\n../../../../tmp/tmpp5v1mekd.ts(28,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334896
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    if (!s || s[0] == '#') {\n        return s.split('').reverse().join('');\n    }\n    let chars = s.split('');\n    for (let i = 0; i < chars.length; i++) {\n        if (!chars[i].match(/[a-z]/i)) {\n            chars.splice(i, 1);\n            i--;\n        }\n    }\n    return chars.join('').split('').reverse().join('');\n}\n</code>\n<|/ a |>\n<| a |>\nAs pointed out, there are many ways to solve this, but here are some thoughts\nFirst of all, you should probably think about your functional approach. Using mutation and looping can be a bit problematic, but in your case, if you only need to reverse a string it might be ok to just use a reverse function in one line.\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpho3qz0dg.ts(26,2): error TS1110: Type expected.\n../../../../tmp/tmpho3qz0dg.ts(26,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpho3qz0dg.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmpho3qz0dg.ts(27,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpho3qz0dg.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmpho3qz0dg.ts(28,7): error TS1109: Expression expected.\n../../../../tmp/tmpho3qz0dg.ts(29,4): error TS1005: ';' expected.\n../../../../tmp/tmpho3qz0dg.ts(29,23): error TS1005: ';' expected.\n../../../../tmp/tmpho3qz0dg.ts(29,27): error TS1435: Unknown keyword or identifier. Did you mean 'any'?\n../../../../tmp/tmpho3qz0dg.ts(29,32): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpho3qz0dg.ts(29,37): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpho3qz0dg.ts(29,40): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpho3qz0dg.ts(29,56): error TS1005: '",
      "timestamp": 1660334896
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n\tlet ret = \"\"\n\tlet count = new Map();\n\tfor (let i = 0; i < s.length; i++){\n\t\tlet char = s[i]\n\t\tif (char == \"#\") {\n\t\t\tlet temp = count\n\t\t\tcount = new Map()\n\t\t\tfor (let j of temp) {\n\t\t\t\tcount.set(j + 1, j + 1 + \"#\")\n\t\t\t}\n\t\t}\n\t\tif (count.has(char)) {\n\t\t\tlet count = count.get( char )\n\t\t\tcount = (count[0] === \"\" ? count : count + \"#\")\n\t\t\tcount.replace(char,\"\")\n\t\t\tcount.push(char)\n\t\t\tcount.sort((a,b) => a.length - b.length)\n\t\t\tret += count.join(\"\")\n\t\t}\n\t\telse {\n\t\t\tret += char\n\t\t}\n\t}\n\treturn ret\n}\n\nconst tests = require(\"quick.tests\");\nfor (let i = 0; i < tests.length; i++) {\n\ttests[i]();\n}\n<|/ file source=gitlab |>\n<| c |>\nPlease read through the [help], in particular [*How do I ask a good question?*](/help/how-to-ask) Your best bet here is to do your research, [search](/help/searching) for related topics on SO, and give it a go. ***If*** you get stuck and can't get unstuck after doing more research and searching, post a [mcve] of your attempt and say specifically where you're stuck. People will be glad to help. Good luck!\n<|/ c |>\n<| c |>\nI'm having trouble understanding why this program doesn't work. Could you please give me some insight? Or even better an example of how this program would run? Thanks.\n<|/ c |>\n<| c |>\nWhat have you tried? What error are you getting? What line is it on? Please don't just dump your code on us and expect us to debug it. Instead please update your question to show what you've tried and the error you're getting.\n<|/ c |>\n<| c |>\nPlease read through the [help], in particular [*How do I ask a good question?*](/help/how-to-ask) Your best bet here is to do your research, [search](/help/searching) for related topics on SO, and give it a go. ***If*** you get stuck and can't get unstuck after doing more research and searching, post a [mcve] of your attempt and say specifically where you're stuck. People will be glad to help. Good luck!\n<|/ c |>\n<| c |>\nHe\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3k5o23s0.ts(44,3): error TS1110: Type expected.\n../../../../tmp/tmp3k5o23s0.ts(44,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3k5o23s0.ts(45,2): error TS1109: Expression expected.\n../../../../tmp/tmp3k5o23s0.ts(45,7): error TS1109: Expression expected.\n../../../../tmp/tmp3k5o23s0.ts(46,8): error TS1005: ';' expected.\n../../../../tmp/tmp3k5o23s0.ts(46,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k5o23s0.ts(46,33): error TS1109: Expression expected.\n../../../../tmp/tmp3k5o23s0.ts(46,48): error TS1109: Expression expected.\n../../../../tmp/tmp3k5o23s0.ts(46,53): error TS1005: ']' expected.\n../../../../tmp/tmp3k5o23s0.ts(46,56): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k5o23s0.ts(46,58): error TS1005: 'while' expected.\n../../../../tmp/tmp3k5o23s0.ts(46,62): error TS1005: ')' expected.\n../../../../tmp/tmp3k5o23s0.ts(46,64): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k5o23s0.ts(46,78): error TS1109: Expression expected.\n../../../../tmp/tmp3k5o23s0.ts(46,79): error TS1109: Expression expected.\n../../../../tmp/tmp3k5o23s0.ts(46,99): error TS1005: ';' expected.\n../../../../tmp/tmp3k5o23s0.ts(46,104): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k5o23s0.ts(46,109): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k5o23s0.ts(46,113): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k5o23s0.ts(46,118): error TS1228: A type predicate is only allowed in return type position for functions and methods.\n../../../../tmp/tmp3k5o23s0.ts(46,121): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k5o23s0.ts(46,127): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3k5o23s0.ts(46,132): error TS1005: 'while' expected.\n../../../../tmp/tmp3k5o23s0.ts(46,168): error TS1005: ')' expected.\n../../../../tmp/tmp3k5o23s0.ts(46,172): error TS1005: '(' expected.\n../../../../tmp/tmp3k5o23s0.ts(46,180): error TS1005: ';' exp",
      "timestamp": 1660334896
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let result: string;\n    let index = 0;\n\n    for(let i = 0; i < s.length; i++) {\n        if(s[i].toLowerCase() === s[i]) {\n            index = i;\n            s[i] = s[i].toUpperCase();\n        } else {\n            s[i] = s[i].toLowerCase();\n        }\n    }\n\n    result = s.join(\"\");\n    s[index] = s[index].toUpperCase();\n\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0lsgbnti.ts(20,13): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmp0lsgbnti.ts(22,13): error TS2542: Index signature in type 'String' only permits reading.\n../../../../tmp/tmp0lsgbnti.ts(26,16): error TS2339: Property 'join' does not exist on type 'string'.\n../../../../tmp/tmp0lsgbnti.ts(27,5): error TS2542: Index signature in type 'String' only permits reading.\n",
      "timestamp": 1660334896
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.replace(/[a-z]/g, function(letter){\n    letter = letter.charCodeAt(0);\n    return (letter >= 65 && letter <= 90) ? 'A' : \n             (letter >= 97 && letter <= 122) ? 'B' : \n             letter;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6d3mb8wi.ts(15,5): error TS2322: Type 'number' is not assignable to type 'string'.\n../../../../tmp/tmp6d3mb8wi.ts(16,13): error TS2365: Operator '>=' cannot be applied to types 'string' and 'number'.\n../../../../tmp/tmp6d3mb8wi.ts(16,29): error TS2365: Operator '<=' cannot be applied to types 'string' and 'number'.\n../../../../tmp/tmp6d3mb8wi.ts(17,15): error TS2365: Operator '>=' cannot be applied to types 'string' and 'number'.\n../../../../tmp/tmp6d3mb8wi.ts(17,31): error TS2365: Operator '<=' cannot be applied to types 'string' and 'number'.\n",
      "timestamp": 1660334896
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let res = [];\n    for (let i of s) {\n        if (i.match(/[a-z]/i)) {\n            i = i.toUpperCase();\n        } else if (!i.match(/[a-z]/)) {\n            i = i.toLowerCase();\n        }\n        res.push(i);\n    }\n    return res.join('');\n}\n\nconsole.log(solve('ab'))\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmph43irkmn.js:30:12)\n    at Object.<anonymous> (/tmp/tmph43irkmn.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "AB\n",
      "timestamp": 1660334897
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let arr: string[] = s.split(\"\");\n    for (let i = 0; i < arr.length; i++) {\n        let str = arr[i];\n        switch (str) {\n            case \"A\": case \"a\": case \"B\": case \"b\": case \"C\": case \"c\":\n                arr[i] = str.charCodeAt(0) - \"A\".charCodeAt(0) + 26;\n                break;\n            case \"D\": case \"d\": case \"E\": case \"e\": case \"F\": case \"f\":\n                arr[i] = str.charCodeAt(0) - \"D\".charCodeAt(0) + 26;\n                break;\n            case \"G\": case \"g\": case \"H\": case \"h\": case \"I\": case \"i\":\n                arr[i] = str.charCodeAt(0) - \"G\".charCodeAt(0) + 26;\n                break;\n            case \"J\": case \"j\": case \"K\": case \"k\": case \"L\": case \"l\":\n                arr[i] = str.charCodeAt(0) - \"J\".charCodeAt(0) + 26;\n                break;\n            case \"M\": case \"m\": case \"N\": case \"n\": case \"O\": case \"o\":\n                arr[i] = str.charCodeAt(0) - \"M\".charCodeAt(0) + 26;\n                break;\n            case \"P\": case \"p\": case \"R\": case \"r\": case \"S\": case \"s\":\n                arr[i] = str.charCodeAt(0) - \"P\".charCodeAt(0) + 26;\n                break;\n            case \"T\": case \"t\": case \"U\": case \"u\": case \"V\": case \"v\":\n                arr[i] = str.charCodeAt(0) - \"T\".charCodeAt(0) + 26;\n                break;\n            case \"W\": case \"w\": case \"X\": case \"x\": case \"Y\": case \"y\":\n                arr[i] = str.charCodeAt(0) - \"W\".charCodeAt(0) + 26;\n                break;\n            case \"Z\": case \"z\": case \"a\": case \"b\": case \"c\": case \"d\": case \"e\": case \"f\": case \"g\": case \"h\": case \"i\": case \"j\": case \"k\": case \"l\": case \"m\": case \"n\": case \"o\": case \"p\": case \"q\": case \"r\": case \"s\": case \"t\": case \"u\": case \"v\": case \"w\": case \"x\": case \"y\": case \"z\":\n                arr[i] = str.charCodeAt(0) - \"Z\".charCodeAt(0) + 26;\n                break;\n            case \"0\": case \"1\": case \"2\": case \"3\": case \"4\": case \"5\": case \"6\": case \"7\": case \"8\": case \"9\":\n                arr[i] = str.charCodeAt(0) - \"0\".charCodeAt(0) + 26;\n                break;\n            case \"!\": case \"@\": case \"#\": case \"$\": case \"%\": case \"&\": case \"*\": case \"^\": case \"(\": case \"[\": case \")\": case \"_\": case \"+\": case \"-\": \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt3owwfrc.ts(65,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334897
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let lower = true;\n  let upper = true;\n  let result = \"\";\n\n  for (let i = 0; i < s.length; i++) {\n    const letter = s[i];\n    if (letter == lower) {\n      if (upper) {\n        lower = true;\n        upper = false;\n      } else {\n        lower = false;\n        upper = true;\n      }\n    } else {\n      if (upper) {\n        upper = true;\n        lower = false;\n      } else {\n        upper = false;\n        lower = true;\n      }\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    result += s[i];\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,javascript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8d2yv33q.ts(43,2): error TS1110: Type expected.\n../../../../tmp/tmp8d2yv33q.ts(43,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8d2yv33q.ts(44,2): error TS1109: Expression expected.\n../../../../tmp/tmp8d2yv33q.ts(44,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp8d2yv33q.ts(45,2): error TS1109: Expression expected.\n../../../../tmp/tmp8d2yv33q.ts(45,6): error TS1005: ';' expected.\n../../../../tmp/tmp8d2yv33q.ts(45,30): error TS1109: Expression expected.\n../../../../tmp/tmp8d2yv33q.ts(47,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334897
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    return s.toLowerCase()\n        .replace(/[a-z]/g, c => c.toUpperCase())\n        .replace(/[A-Z]/g, c => c.toLowerCase())\n        .replace(/[@#]/g, c => c[0]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpqmhj75cv.js:22:12)\n    at Object.<anonymous> (/tmp/tmpqmhj75cv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    const map = new Map<string, string>();\n\n    for (const c of s) {\n        const c1 = map.get(c);\n        if (c1) {\n            map.set(c, c1.toUpperCase());\n        } else {\n            map.set(c, c.toUpperCase());\n        }\n    }\n\n    return s.split('').map(k => map.get(k)).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpxpmh6pjo.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxpmh6pjo.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334898
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let res = [];\n    for(let i = 0; i < s.length; i++) {\n        if(typeof s[i] === \"string\") {\n            res.push(solve(s[i]));\n        } else {\n            res.push(s[i]);\n        }\n    }\n    return res.reverse().join(\"\");\n}\n</code>\n<|/ a dscore=2 tags=string,typescript,recursion |>\n<| c |>\nThis doesn't answer the question \"how to solve this recursively\"\n<|/ c |>\n<| c |>\nThis should be the accepted answer. It's simple and efficient.\n<|/ c |>\n<| c |>\nthe only problem with the solution is that its not recursive. the only recursive part is the function itself\n<|/ c |>\n<| a tags=string,typescript,recursion |>\nThe answer here isn't just to copy and paste a few lines from the previous answer.\nThe answer should explain the logic and why this is so.  \n\nWhat does the problem actually look like?\nThe problem is pretty simple.  \nThe problem is broken down to two problems.  \n\nTo check if the string contains at least one letter.\nTo reverse the string.\n\nTo check if a string contains at least one letter.\nThe simplest way is to use the includes() function of the String class.\n<code>\nif (s.includes(\"a\")) {\n    // string contains 'a', do some stuff with it\n}\n</code>\nNow to reverse the string.\nThe same function can be used on the string itself.\n<code>\nif (s.includes(\"a\")) {\n    // string contains 'a', reverse the string\n    s = s.split(\"\").reverse().join(\"\");\n}\n</code>\nThe above code is quite elegant.  \nExplanation:\nsplit(\"\") splits the string in to an array of characters.\nreverse() reverses the array.\njoin(\"\") rejoins the array of characters.\nNow why isn't this recursive?\nThe above code is relatively simple.  \nThe string manipulation can be done in a single line.\n<code>\nif (s.includes(\"a\")) {\n    // string contains 'a', reverse the string\n    s = s.replace(/[^a-zA-Z]/g, \"\");\n}\n</code>\nThe above code uses RegEx to remove all non alpha-numeric characters.\nNow how do you do it with recursion?\nThe same basic idea can be applied.  \n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprxi0bcdx.ts(24,2): error TS1110: Type expected.\n../../../../tmp/tmprxi0bcdx.ts(24,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmprxi0bcdx.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmprxi0bcdx.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmprxi0bcdx.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmprxi0bcdx.ts(26,7): error TS1109: Expression expected.\n../../../../tmp/tmprxi0bcdx.ts(27,6): error TS1005: ';' expected.\n../../../../tmp/tmprxi0bcdx.ts(27,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprxi0bcdx.ts(27,65): error TS1002: Unterminated string literal.\n../../../../tmp/tmprxi0bcdx.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmprxi0bcdx.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmprxi0bcdx.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmprxi0bcdx.ts(29,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334898
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let reversedString = \"\";\n  if(s.length == 0) {\n    return s;\n  }\n  for(let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if(isLetter(char)) {\n      reversedString += char.toUpperCase();\n    } else {\n      reversedString += char.toLowerCase();\n    }\n  }\n  return reversedString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt7126pa7.ts(20,8): error TS2304: Cannot find name 'isLetter'.\n",
      "timestamp": 1660334898
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  const lowerCaseChars = s.toLowerCase()\n  const reversed = lowerCaseChars.split('').map(letter => letter.toLowerCase() === letter ? letter.toUpperCase() : letter).join('')\n  return lowerCaseChars.length > 0 ? `${reversed}${lowerCaseChars.charAt(0)}` : reversed\n}\n\n</code>\n<|/ a dscore=0 |>\n<| c |>\nthanks for your help, i used your function to create this one, and it worked, appreciate it! `function solve(s: string): string {\n    const lowerCaseChars = s.toLowerCase();\n    const reversed = lowerCaseChars.split('').map(letter => letter.toLowerCase() === letter ? letter.toUpperCase() : letter).join('');\n    return lowerCaseChars.length > 0 ? `${reversed}${lowerCaseChars.charAt(0)}` : reversed;\n  }`\n<|/ c |>\n<| c |>\nIf you want any specific thing, you can ask. :)\n<|/ c |>\n<| a tags=arrays,javascript,string |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpru4lu3v5.ts(19,2): error TS1110: Type expected.\n../../../../tmp/tmpru4lu3v5.ts(19,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpru4lu3v5.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpru4lu3v5.ts(20,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpru4lu3v5.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpru4lu3v5.ts(21,7): error TS1109: Expression expected.\n../../../../tmp/tmpru4lu3v5.ts(22,8): error TS1005: ';' expected.\n../../../../tmp/tmpru4lu3v5.ts(22,12): error TS1005: '(' expected.\n../../../../tmp/tmpru4lu3v5.ts(22,17): error TS1005: ';' expected.\n../../../../tmp/tmpru4lu3v5.ts(22,25): error TS1005: ';' expected.\n../../../../tmp/tmpru4lu3v5.ts(22,30): error TS1005: ')' expected.\n../../../../tmp/tmpru4lu3v5.ts(22,47): error TS1005: '(' expected.\n../../../../tmp/tmpru4lu3v5.ts(22,59): error TS1005: ';' expected.\n../../../../tmp/tmpru4lu3v5.ts(22,68): error TS1005: ';' expected.\n../../../../tmp/tmpru4lu3v5.ts(22,90): error TS1005: ';' expected.\n../../../../tmp/tmpru4lu3v5.ts(22,94): error TS1443: Module declaration names may only use ' or \" quoted strings.\n../../../../tmp/tmpru4lu3v5.ts(25,41): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpru4lu3v5.ts(25,52): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpru4lu3v5.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmpru4lu3v5.ts(27,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpru4lu3v5.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmpru4lu3v5.ts(28,7): error TS1109: Expression expected.\n../../../../tmp/tmpru4lu3v5.ts(29,4): error TS1005: ';' expected.\n../../../../tmp/tmpru4lu3v5.ts(29,8): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpru4lu3v5.ts(29,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpru4lu3v5.ts(29,17): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpru4lu3v5.ts(29,37): error TS1",
      "timestamp": 1660334899
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n\tlet newString = \"\";\n\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet charArray = s[i].split(\"\");\n\t\tlet charArray1 = charArray.reverse();\n\n\t\tlet charArray2 = charArray.map((x) => x.toUpperCase());\n\t\tlet charArray3 = charArray.map((x) => x.toLowerCase());\n\n\t\tlet charArray4 = charArray2.map((x) => x.toUpperCase());\n\t\tlet charArray5 = charArray2.map((x) => x.toLowerCase());\n\n\t\tif (charArray3.includes(s[i]) || charArray4.includes(s[i])) {\n\t\t\tnewString += charArray2[i];\n\t\t}\n\t\tif (charArray5.includes(s[i]) || charArray4.includes(s[i])) {\n\t\t\tnewString += charArray1[i];\n\t\t}\n\t\telse {\n\t\t\tnewString += s[i];\n\t\t}\n\t}\n\treturn newString;\n}\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));</code>\n<|/ a tags=javascript |>\n<| a dscore=0 tags=javascript |>\n<code>\nvar letters = \"1234\".split(\"\").reverse().join(\"\");\n\nconsole.log(letters);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfn3toyaw.ts(40,29): error TS1110: Type expected.\n../../../../tmp/tmpfn3toyaw.ts(40,30): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfn3toyaw.ts(41,2): error TS1109: Expression expected.\n../../../../tmp/tmpfn3toyaw.ts(41,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfn3toyaw.ts(42,2): error TS1109: Expression expected.\n../../../../tmp/tmpfn3toyaw.ts(42,6): error TS1005: ';' expected.\n../../../../tmp/tmpfn3toyaw.ts(42,15): error TS1005: ';' expected.\n../../../../tmp/tmpfn3toyaw.ts(42,32): error TS1109: Expression expected.\n../../../../tmp/tmpfn3toyaw.ts(44,1): error TS1109: Expression expected.\n",
      "timestamp": 1660334898
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    if (s.length === 0) {\n        return s;\n    }\n    if (s.includes(\"a\") || s.includes(\"A\")) {\n        return s.toLowerCase();\n    }\n    if (s.includes(\"b\") || s.includes(\"B\")) {\n        return s.toUpperCase();\n    }\n    return s;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI do not want to just give the answer, but explain why it works, so other people can learn from it.\n<|/ c |>\n<| c |>\nOh I understood now what u meant... Thanks a lot, that helps a lot\n<|/ c |>\n<| c |>\nI suggest you add a `else` branch at the end of this function in case nothing matches, just in case someone calls it. It can return undefined without having a `return s;` statement.\n<|/ c |>\n<| c |>\nYes, that is also a good suggestion, I will update my answer accordingly.\n<|/ c |>\n<| a tags=typescript,javascript,string,char,reverse-string dscore=2 |>\nYou can use a regular expression and a for loop.\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps59yjf_d.ts(25,2): error TS1110: Type expected.\n../../../../tmp/tmps59yjf_d.ts(25,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmps59yjf_d.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmps59yjf_d.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmps59yjf_d.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmps59yjf_d.ts(27,7): error TS1109: Expression expected.\n../../../../tmp/tmps59yjf_d.ts(28,3): error TS1005: ';' expected.\n../../../../tmp/tmps59yjf_d.ts(28,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmps59yjf_d.ts(28,10): error TS1005: 'while' expected.\n../../../../tmp/tmps59yjf_d.ts(28,15): error TS1005: ')' expected.\n../../../../tmp/tmps59yjf_d.ts(28,18): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmps59yjf_d.ts(28,23): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmps59yjf_d.ts(28,28): error TS1434: Unexpected keyword or identifier.\n.",
      "timestamp": 1660334899
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charAt(i);\n    if (c.match(/[a-z]/)) {\n      result += c.toUpperCase();\n    } else {\n      result += c.toLowerCase();\n    }\n  }\n  if (result.length === 0) return s;\n  return result;\n}\n\nlet string = '';\nfor (let i = 0; i < 100; i++) {\n  string += Math.random().toString(36).slice(2);\n}\n\nconsole.time('solution 1');\nsolve(string);\nconsole.timeEnd('solution 1');\n\nconsole.time('solution 2');\nreverse(string);\nconsole.timeEnd('solution 2');</code>\n<|/ a tags=string,javascript,algorithm |>\n<| a tags=string,javascript,algorithm |>\nThe solution using recursive function and reduce:\n\n<code>\nlet reverse = (str) => {\n  return str\n    .split('')\n    .reduce((acc, x) => acc + x.toLowerCase(), '');\n};\n\nconsole.log(reverse(\"1234\"));</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks, but this has O(n\u00b2) time complexity, which is really bad for performance on large strings.\n<|/ c |>\n<| c |>\n.Todua It isn't. It's linear actually, because `reduce` is designed to run iteratively.\n<|/ c |>\n<| c |>\nYou're right. It doesn't change the complexity but it's still linear :) But anyway, my solution has linear time complexity and it's very similar to yours.\n<|/ c |>\n<| a dscore=2 |>\nA function without using String.prototype.match() , Array.prototype.flat() and String.prototype.reverse()\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0yezictd.ts(38,32): error TS1110: Type expected.\n../../../../tmp/tmp0yezictd.ts(38,33): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0yezictd.ts(39,2): error TS1109: Expression expected.\n../../../../tmp/tmp0yezictd.ts(39,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0yezictd.ts(40,2): error TS1109: Expression expected.\n../../../../tmp/tmp0yezictd.ts(40,6): error TS1005: ';' expected.\n../../../../tmp/tmp0yezictd.ts(40,40): error TS1109: Expression expected.\n../../../../tmp/tmp0yezictd.ts(41,5): error TS1005: ';' expected.\n../../../../tmp/tmp0yezictd.ts(41,14): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp0yezictd.ts(41,20): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp0yezictd.ts(41,43): error TS1005: '(' expected.\n../../../../tmp/tmp0yezictd.ts(44,5): error TS1005: ';' expected.\n../../../../tmp/tmp0yezictd.ts(50,31): error TS1110: Type expected.\n../../../../tmp/tmp0yezictd.ts(50,32): err",
      "timestamp": 1660334899
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  const map = new Map<string, number>();\n\n  for (let i = 0; i < s.length; i += 1) {\n    if (map.has(s[i])) {\n      map.set(s[i], map.get(s[i]) + 1);\n    } else {\n      map.set(s[i], 1);\n    }\n  }\n\n  for (let key of map.keys()) {\n    if (map.get(key) > 1) {\n      map.set(key, map.get(key) - 1);\n    } else {\n      map.set(key, 0);\n    }\n  }\n\n  let result = \"\";\n  for (let key of map.keys()) {\n    result += key;\n  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp2wtttgtw.js:40:12)\n    at Object.<anonymous> (/tmp/tmp2wtttgtw.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334899
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let res = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if ((c >= \"A\" && c <= \"Z\") || (c >= \"a\" && c <= \"z\")) {\n            res = c + res;\n        } else {\n            res = c + res.toUpperCase();\n        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'fDsA'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpi7m5ot5e.js:29:12)\n    at Object.<anonymous> (/tmp/tmpi7m5ot5e.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'fDsA',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334899
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  const newString = \"\";\n  for (let i = 0; i<s.length; i++){\n    if (s[i] >= \"a\" && s[i] <= \"z\"){\n      newString += s[i].toUpperCase();\n    }\n    else {\n      newString += s[i];\n    }\n  }\n  return newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3lxa46jw.ts(17,7): error TS2588: Cannot assign to 'newString' because it is a constant.\n../../../../tmp/tmp3lxa46jw.ts(20,7): error TS2588: Cannot assign to 'newString' because it is a constant.\n",
      "timestamp": 1660334899
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  for (let i = 0; i < s.length; i++) {\n    const l = s.charAt(i);\n    if (!isLetter(l)) {\n      s = s.slice(0, i) + s.slice(i + 1, s.length);\n    }\n  }\n  return s.split(\"\").reduce((acc, val) => acc + toUp(val));\n}\n\nconsole.log(solve(\"ab\"));\n</code>\n<|/ a tags=javascript,ecmascript-6,arrays,string |>\n<| a dscore=1 tags=javascript,ecmascript-6,arrays,string |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5zn2bk_c.ts(24,2): error TS1110: Type expected.\n../../../../tmp/tmp5zn2bk_c.ts(24,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp5zn2bk_c.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmp5zn2bk_c.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp5zn2bk_c.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmp5zn2bk_c.ts(26,6): error TS1005: ';' expected.\n../../../../tmp/tmp5zn2bk_c.ts(26,15): error TS1005: ';' expected.\n../../../../tmp/tmp5zn2bk_c.ts(26,59): error TS1109: Expression expected.\n../../../../tmp/tmp5zn2bk_c.ts(28,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334900
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let ret = \"\";\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (char === char.toLowerCase()) {\n            ret += char.toUpperCase();\n        } else {\n            ret += char.toLowerCase();\n        }\n    }\n    if (ret.length <= 1) return ret;\n    return ret[0].toUpperCase() + ret.slice(1);\n}\n</code>\n<|/ a tags=javascript |>\n<| a tags=javascript dscore=2 |>\n<code>\nvar str = \"aBcDE\";\nconsole.log(str.toUpperCase());\nconsole.log(str.toLowerCase());\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\nconst str = \"AbcdEFghi\";\n\nconst reverse = (str) => str.split(\"\").reverse().join(\"\");\n\nconsole.log(reverse(str));\n</code>\n<|/ a tags=javascript |>\n<| a tags=javascript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfg5sh4t3.ts(26,2): error TS1110: Type expected.\n../../../../tmp/tmpfg5sh4t3.ts(26,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfg5sh4t3.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmpfg5sh4t3.ts(27,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfg5sh4t3.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmpfg5sh4t3.ts(28,6): error TS1005: ';' expected.\n../../../../tmp/tmpfg5sh4t3.ts(28,22): error TS1005: ';' expected.\n../../../../tmp/tmpfg5sh4t3.ts(28,32): error TS1109: Expression expected.\n../../../../tmp/tmpfg5sh4t3.ts(30,1): error TS1109: Expression expected.\n../../../../tmp/tmpfg5sh4t3.ts(33,2): error TS1110: Type expected.\n../../../../tmp/tmpfg5sh4t3.ts(33,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfg5sh4t3.ts(34,2): error TS1109: Expression expected.\n../../../../tmp/tmpfg5sh4t3.ts(34,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfg5sh4t3.ts(35,2): error TS1109: Expression expected.\n../../../../tmp/tmpfg5sh4t3.ts(35,6): error TS1005: ';' expected.\n../../../../tmp/tmpfg5sh4t3.ts(35,16): error TS1109: Expression expected.\n../../../../tmp/tmpfg5sh4t3.ts(37,1): error TS1109: Expression expected.\n../../../../tmp/tmpfg5sh4t3.ts(42,2): error TS1110: Type expected.\n../../../../tmp/tmpfg5sh4t3.ts(42,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfg5sh4t3.ts(43,2): error TS1109: Expression expected.\n../../../../tmp/tmpfg5sh4t3.ts(43,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfg5sh4t3.ts(44,2): error TS1109: Expression expected.\n../../../../tmp/tmpfg5sh4t3.ts(44,6): error TS1005: ';' expected.\n../../../../tmp/tmpfg5sh4t3.ts(44,23): error TS1109: Expression expected.\n../../../../tmp/tmpfg5sh4t3.ts(46,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334899
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.split('').map(char => {\n    const upperCase = char.toUpperCase();\n    const lower = char.toLowerCase();\n    return upperCase === char ? lower.toLowerCase() : upperCase;\n  }).join('');\n}</code>\n<|/ a tags=string,arrays,javascript,algorithm,sorting |>\n<| c |>\nThank you very much for your answer. I am working on it and I will update you with the answer. Thank you again\n<|/ c |>\n<| a dscore=0 |>\nHere is a working solution I came up with:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb1hwfrz0.ts(19,3): error TS1110: Type expected.\n../../../../tmp/tmpb1hwfrz0.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpb1hwfrz0.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpb1hwfrz0.ts(20,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpb1hwfrz0.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpb1hwfrz0.ts(21,7): error TS1109: Expression expected.\n../../../../tmp/tmpb1hwfrz0.ts(22,7): error TS1005: ';' expected.\n../../../../tmp/tmpb1hwfrz0.ts(22,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpb1hwfrz0.ts(22,16): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpb1hwfrz0.ts(22,25): error TS1005: '(' expected.\n../../../../tmp/tmpb1hwfrz0.ts(22,30): error TS1005: ';' expected.\n../../../../tmp/tmpb1hwfrz0.ts(22,40): error TS1005: ';' expected.\n../../../../tmp/tmpb1hwfrz0.ts(22,43): error TS1005: ')' expected.\n../../../../tmp/tmpb1hwfrz0.ts(22,51): error",
      "timestamp": 1660334899
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    const reverseCase = (s: string) => {\n        let result = ''\n        for (let i = 0; i < s.length; i++) {\n            if (isLetter(s[i])) {\n                result = result.concat(s[i].toUpperCase())\n                i = i\n            } else {\n                result = result.concat(s[i])\n            }\n        }\n        return result\n    }\n    const reverse = (s: string) => {\n        let result = ''\n        for (let i = 0; i < s.length; i++) {\n            if (isLetter(s[i])) {\n                result = result.concat(s[i].toUpperCase())\n                i = i\n            } else {\n                result = result.concat(s[i])\n            }\n        }\n        return result\n    }\n    const reverse2 = (s: string) => {\n        let result = ''\n        for (let i = 0; i < s.length; i++) {\n            if (isLetter(s[i])) {\n                result = result + s[i].toUpperCase()\n            } else {\n                result = result + s[i]\n            }\n        }\n        return result\n    }\n\n    let result = ''\n    let i = 0\n    while (i<s.length){\n        if (isLetter(s[i])){\n            result = result + reverseCase(s[i]+s[i])\n            i++\n        } else {\n            result = result + reverse2(s[i]+s[i])\n            i++\n        }\n    }\n    return result\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nHere is another solution, based on Kevin Kwok's solution. Using regular expression and lookahead.\n<code>\nvar solve = function(s) {\n    return s.replace(/(?=(.))/g, ($0) => $0.toUpperCase());\n}\n</code>\n<|/ a tags=string,javascript dscore=0 |>\n<| c |>\nI think this answer is more readable than mine. `:)`\n<|/ c |>\n<| c |>\nI think it's a lot more readable, but I still think that some explanation wouldn't hurt either.\n<|/ c |>\n<| a dscore=0 tags=string,javascript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp8rd5srl.ts(63,2): error TS1110: Type expected.\n../../../../tmp/tmpp8rd5srl.ts(63,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpp8rd5srl.ts(64,2): error TS1109: Expression expected.\n../../../../tmp/tmpp8rd5srl.ts(64,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpp8rd5srl.ts(65,2): error TS1109: Expression expected.\n../../../../tmp/tmpp8rd5srl.ts(65,7): error TS1109: Expression expected.\n../../../../tmp/tmpp8rd5srl.ts(66,6): error TS1005: ';' expected.\n../../../../tmp/tmpp8rd5srl.ts(66,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpp8rd5srl.ts(66,33): error TS1005: ';' expected.\n../../../../tmp/tmpp8rd5srl.ts(66,36): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpp8rd5srl.ts(66,42): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpp8rd5srl.ts(66,98): error TS1002: Unterminated string literal.\n../../../../tmp/tmpp8rd5srl.ts(71,3): error TS1161: Unterminated regular expr",
      "timestamp": 1660334899
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let lower = \"\";\n  let upper = \"\";\n  let first = true;\n\n  for (let char of s) {\n    if (char >= 'a' && char <= 'z') {\n      lower += char;\n    }\n    else if (char >= 'A' && char <= 'Z') {\n      upper += char;\n    }\n    else {\n      if (first) {\n        lower += char;\n        upper += char;\n        first = false;\n      }\n      else {\n        lower += char.toUpperCase();\n        upper += char.toLowerCase();\n      }\n    }\n  }\n\n  return lower + upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'sfAD'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpz7km5oon.js:41:12)\n    at Object.<anonymous> (/tmp/tmpz7km5oon.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'sfAD',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334900
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    var newString = \"\";\n    var i = 0;\n    var len = s.length;\n    var isFirstChar = true;\n    while (i < len) {\n        if (s[i].length === 0) {\n            isFirstChar = true;\n            newString += s[i];\n            i++;\n            continue;\n        }\n        if (isFirstChar) {\n            newString += s[i].toLowerCase();\n            isFirstChar = false;\n        } else {\n            newString += s[i].toUpperCase();\n        }\n        i++;\n    }\n    return newString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'aSDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpw2gfwzf5.js:39:12)\n    at Object.<anonymous> (/tmp/tmpw2gfwzf5.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'aSDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334900
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let newString = '';\n    for (let i = 0; i < s.length; i++) {\n        if (isValidChar(s[i]) == true) {\n            newString += s[i].toUpperCase();\n        } else if (isValidChar(s[i]) == false) {\n            newString += s[i];\n        }\n    }\n    return newString.toString();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyy27f4g0.ts(16,13): error TS2304: Cannot find name 'isValidChar'.\n../../../../tmp/tmpyy27f4g0.ts(18,20): error TS2304: Cannot find name 'isValidChar'.\n",
      "timestamp": 1660334899
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    return s.split('')\n        .map(c => c.toUpperCase())\n        .map(c => c.toLowerCase())\n        .filter(c => c !== '')\n        .map(c => c.split(''))\n        .map(c => c.join(''))\n        .join('')\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'asdf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpcnoey23e.js:25:12)\n    at Object.<anonymous> (/tmp/tmpcnoey23e.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'asdf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334900
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n\tlet result: string = s;\n\tfor (let i = 0; i < s.length; i += 1) {\n\t\tif (isLetter(s[i])) {\n\t\t\tresult =\n\t\t\t\tresult === s ?\n\t\t\t\t\ts.split(\"\").map(letter => letter.toUpperCase()).join(\"\") :\n\t\t\t\t\ts.split(\"\").map(letter => letter.toLowerCase()).join(\"\");\n\t\t}\n\t}\n\treturn result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4txfv3e0.ts(16,7): error TS2304: Cannot find name 'isLetter'.\n",
      "timestamp": 1660334899
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let reversed = \"\";\n    for (let i = 0; i < s.length; i += 1) {\n        if (charAt.call(s, i) >= 65 && charAt.call(s, i) <= 90) {\n            charAt.call(s, i) - 32; // ascii char - 32 is the ascii value of letter 'a'\n        } else if (charAt.call(s, i) >= 97 && charAt.call(s, i) <= 122) {\n            charAt.call(s, i) - 32;\n        }\n        reversed += s[i];\n    }\n    return reversed;\n}\n</code>\n<|/ a tags=javascript,string |>\n<| a tags=javascript,string |>\nHere is a simple solution:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpclotk_o1.ts(25,2): error TS1110: Type expected.\n../../../../tmp/tmpclotk_o1.ts(25,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpclotk_o1.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmpclotk_o1.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpclotk_o1.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmpclotk_o1.ts(27,6): error TS1005: ';' expected.\n../../../../tmp/tmpclotk_o1.ts(27,30): error TS1109: Expression expected.\n../../../../tmp/tmpclotk_o1.ts(28,6): error TS1005: ';' expected.\n../../../../tmp/tmpclotk_o1.ts(28,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpclotk_o1.ts(28,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpclotk_o1.ts(30,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334900
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let charsArray = s.split(\"\");\n  let rev_charsArray = charsArray.reverse();\n  let rev_string = rev_charsArray.join();\n  let rev_strArray = rev_string.split(\"\");\n  let res = \"\";\n  let i = 0;\n  for (let j = 0; j < rev_strArray.length; j++) {\n    if (rev_strArray[j] === \"#\" && rev_strArray[j + 1] === \"@\") {\n      res += rev_charsArray[i - j];\n    } else if (rev_strArray[j] === \"@\" && rev_strArray[j + 1] === \"#\") {\n      res += rev_charsArray[i - j + 1];\n    } else {\n      res += rev_strArray[j];\n    }\n  }\n  return res;\n}\n</code>\n<|/ a dscore=0 tags=javascript,algorithm |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7xi3_cd8.ts(31,2): error TS1110: Type expected.\n../../../../tmp/tmp7xi3_cd8.ts(31,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp7xi3_cd8.ts(32,2): error TS1109: Expression expected.\n../../../../tmp/tmp7xi3_cd8.ts(32,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp7xi3_cd8.ts(33,2): error TS1109: Expression expected.\n../../../../tmp/tmp7xi3_cd8.ts(33,7): error TS1109: Expression expected.\n../../../../tmp/tmp7xi3_cd8.ts(35,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334900
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let rev = s.split('').reverse().join('')\n  if (!rev.includes('a')) return s\n  return rev.replace('a', (c => c.toUpperCase()).replace('A', (c => c.toLowerCase())));\n}\n</code>\n<|/ a tags=javascript,typescript |>\n<| a |>\n<code>\nconst input = \"ab#c\";\nlet output = \"\";\n\nfor (let i = 0; i < input.length; i++) {\n    if (input.charAt(i) == 'a') {\n        output += input.toLowerCase() === 'a' ? input.toLowerCase() : input.toUpperCase();\n    } else {\n        output += input[i];\n    }\n}\n\nconsole.log(output);\n</code>\n<|/ a dscore=3 tags=javascript,typescript |>\n<| c |>\nPlease add some explanation to your answer.\n<|/ c |>\n<| a |>\nYou cant do it with a string method but you can with charAt\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpowbx0bmy.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmpowbx0bmy.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpowbx0bmy.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpowbx0bmy.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpowbx0bmy.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpowbx0bmy.ts(20,7): error TS1109: Expression expected.\n../../../../tmp/tmpowbx0bmy.ts(22,1): error TS1109: Expression expected.\n../../../../tmp/tmpowbx0bmy.ts(34,2): error TS1110: Type expected.\n../../../../tmp/tmpowbx0bmy.ts(34,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpowbx0bmy.ts(35,2): error TS1109: Expression expected.\n../../../../tmp/tmpowbx0bmy.ts(35,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpowbx0bmy.ts(36,2): error TS1109: Expression expected.\n../../../../tmp/tmpowbx0bmy.ts(36,7): error TS1109: Expression expected.\n../../.",
      "timestamp": 1660334900
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  const map = {};\n  const s = s.replace(/[^a-zA-Z]/g, (x) => map[x] = true);\n  if (s.length === 0) {\n    return s;\n  }\n\n  for (let i = 0; i < s.length; ++i) {\n    const c = s.charAt(i);\n    if (map[c]) {\n      s = s.substring(0, i) + s.substring(i + 1);\n      break;\n    }\n  }\n  return s;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj54q77dy.ts(13,16): error TS2300: Duplicate identifier 's'.\n../../../../tmp/tmpj54q77dy.ts(15,9): error TS2300: Duplicate identifier 's'.\n../../../../tmp/tmpj54q77dy.ts(15,44): error TS2769: No overload matches this call.\n  The last overload gave the following error.\n    Type 'boolean' is not assignable to type 'string'.\n",
      "timestamp": 1660334901
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  var result = [];\n  var length = s.length - 1;\n  \n  for(let i = 0; i < length; i++) {\n    switch(s[i] && s[i]) {\n      case 'a':\n        s[i] = 'A';\n        break;\n      case 'A':\n        s[i] = 'a';\n        break;\n      default:\n        s[i] = s[i] + 'A';\n        break;\n    }\n  }\n  return s.slice(0, length).split('').join('').split('').join('');\n}\n</code>\n<|/ a tags=javascript |>\n<| a dscore=0 |>\nThis can also be done with regex:\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuirdxmms.ts(32,2): error TS1110: Type expected.\n../../../../tmp/tmpuirdxmms.ts(32,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpuirdxmms.ts(33,2): error TS1109: Expression expected.\n../../../../tmp/tmpuirdxmms.ts(33,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpuirdxmms.ts(34,2): error TS1109: Expression expected.\n../../../../tmp/tmpuirdxmms.ts(34,6): error TS1005: ';' expected.\n../../../../tmp/tmpuirdxmms.ts(34,16): error TS1109: Expression expected.\n../../../../tmp/tmpuirdxmms.ts(35,6): error TS1005: ';' expected.\n../../../../tmp/tmpuirdxmms.ts(35,10): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuirdxmms.ts(35,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuirdxmms.ts(35,18): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuirdxmms.ts(35,28): error TS1005: '(' expected.\n../../../../tmp/tmpuirdxmms.ts(35,33): error TS1005: ')' expected.\n../../../../tmp/tmpuirdx",
      "timestamp": 1660334901
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  // code here\n  var chars = s.split(\"\");\n  chars = chars.map(function(char) {\n    if (char.charCodeAt(0) > 96) {\n      return char.toUpperCase();\n    } else {\n      return char.toLowerCase();\n    }\n  });\n  return chars.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmprynsf7qw.js:30:12)\n    at Object.<anonymous> (/tmp/tmprynsf7qw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334901
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  return s.split('').map(letter => {\n    return letter.toLowerCase() === letter ? letter.toUpperCase() : letter;\n  }).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpkdlmx3hh.js:21:12)\n    at Object.<anonymous> (/tmp/tmpkdlmx3hh.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    return reverse(s);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxbkcc94h.ts(14,12): error TS2304: Cannot find name 'reverse'.\n",
      "timestamp": 1660334901
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() !== s[i].toUpperCase()) {\n      return s.split(\"\").map(a => a.toLowerCase()).join(\"\");\n    }\n  }\n  return s;\n}\n</code>\n<|/ a |>\n<| c |>\nIt works well but how do you know it? How does that work? Does it only reverse the cases when there's an alphabet on both sides?\n<|/ c |>\n<| c |>\nThe idea is, first we traverse all character in the string, if the character is alphabet, we simply reverse the case. If the character is not a alphabet, we simply return the string as it is.\n<|/ c |>\n<| c |>\nJust a small question: does the return in the `if` statement get executed if there's no alphabet?\n<|/ c |>\n<| c |>\nYes, it will, I have updated my answer, please have a look.\n<|/ c |>\n<| a dscore=4 |>\nHere is a solution using Regex:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp019mpesv.ts(21,2): error TS1110: Type expected.\n../../../../tmp/tmp019mpesv.ts(21,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp019mpesv.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp019mpesv.ts(22,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp019mpesv.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmp019mpesv.ts(23,7): error TS1109: Expression expected.\n../../../../tmp/tmp019mpesv.ts(24,4): error TS1005: ';' expected.\n../../../../tmp/tmp019mpesv.ts(24,10): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp019mpesv.ts(24,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp019mpesv.ts(24,19): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp019mpesv.ts(24,26): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp019mpesv.ts(24,30): error TS1005: 'while' expected.\n../../../../tmp/tmp019mpesv.ts(24,35): error TS1005: ')' expected.\n",
      "timestamp": 1660334901
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  // your code here\n  const result = s.split('').map(char => {\n    if (char >= 'a' && char <= 'z') {\n      return char.toUpperCase()\n    }\n    return char.toLowerCase()\n  }).join('')\n\n  return result ? result : s.replace(/[a-z]+/ig, c => c.toUpperCase())\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpm8_sw9yi.js:27:12)\n    at Object.<anonymous> (/tmp/tmpm8_sw9yi.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++){\n    let currentLetter = s[i];\n    if (currentLetter >= 'A' && currentLetter <= 'Z'){\n      currentLetter = currentLetter.toUpperCase();\n    }\n    else if (currentLetter >= 'a' && currentLetter <= 'z'){\n      currentLetter = currentLetter.toLowerCase();\n    }\n    else {\n      currentLetter = currentLetter;\n    }\n    newString += currentLetter;\n  }\n  return newString;\n}\n</code>\n<|/ a tags=string,char,javascript,arrays |>\n<| a |>\nOne liner:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6ul8oehn.ts(30,2): error TS1110: Type expected.\n../../../../tmp/tmp6ul8oehn.ts(30,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp6ul8oehn.ts(31,2): error TS1109: Expression expected.\n../../../../tmp/tmp6ul8oehn.ts(31,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp6ul8oehn.ts(32,2): error TS1109: Expression expected.\n../../../../tmp/tmp6ul8oehn.ts(32,7): error TS1109: Expression expected.\n../../../../tmp/tmp6ul8oehn.ts(33,5): error TS1005: ';' expected.\n../../../../tmp/tmp6ul8oehn.ts(35,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334902
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let result = \"\";\n\n    for (let i = 0; i < s.length; i++) {\n        let charCode = s.charCodeAt(i);\n        if (charCode > 96) {\n            result += String.fromCharCode(charCode - 32);\n        } else {\n            result += s[i];\n        }\n    }\n\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nYou could try this too:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy7tkpo1x.ts(27,2): error TS1110: Type expected.\n../../../../tmp/tmpy7tkpo1x.ts(27,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpy7tkpo1x.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmpy7tkpo1x.ts(28,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpy7tkpo1x.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmpy7tkpo1x.ts(29,7): error TS1109: Expression expected.\n../../../../tmp/tmpy7tkpo1x.ts(30,5): error TS1005: ';' expected.\n../../../../tmp/tmpy7tkpo1x.ts(30,15): error TS1005: '{' expected.\n../../../../tmp/tmpy7tkpo1x.ts(30,20): error TS1005: ';' expected.\n../../../../tmp/tmpy7tkpo1x.ts(32,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let newS: string;\n    for (let i = 0; i < s.length; i++) {\n        const char: number = s.charCodeAt(i); //gets the ASCII code for the letter\n        if (char >= 65 && char <= 90 || char >= 97 && char <= 122) {\n            newS = s.slice(0, i) + String.fromCharCode(char + 32) + s.slice(i + 1); //uppercase if between a letter and A, lowercase if between a and Z\n        } else {\n            newS = s; //the string does not contain any letters\n        }\n    }\n    return newS;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsD\\x86'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpow0te18d.js:29:12)\n    at Object.<anonymous> (/tmp/tmpow0te18d.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsD\\x86',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  const result = s.replace(/[^a-zA-Z]/g, s => \n    /[a-z]/i.test(s) ? s.toLowerCase() : s.toUpperCase());\n  return result.length === 0 ? s.split('').reverse().join('') : result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AsDf'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmp70hlkxfd.js:20:12)\n    at Object.<anonymous> (/tmp/tmp70hlkxfd.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AsDf',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    return s.split('').map(letter => letter.toLowerCase() === letter ? letter.toUpperCase() : letter).join('');\n}\n</code>\n<|/ a dscore=0 tags=algorithm,string,javascript |>\n<| c |>\nThis answer should mention that this solution only works for lower cased letters because of the `toLowerCase`.\n<|/ c |>\n<| a dscore=0 |>\nA solution in Java:\n<code>\nString convert(String s) {\n    StringBuilder sb = new StringBuilder();\n    boolean prevUpper = false;\n    for (char c : s.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            sb = new StringBuilder(c);\n        } else if (prevUpper && Character.isUpperCase(c)) {\n            sb.setCharAt(sb.length() - 1, Character.toLowerCase(sb.charAt(sb.length() - 1)));\n        } else {\n            prevUpper = Character.isUpperCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n</code>\n<|/ a tags=algorithm,string,javascript |>\n<| a |>\nI have also used the below code:\n<code>\nconst string = 'apple';\nlet newString = '';\nfor (let i = 0; i < string.length; i++) {\n if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n  newString += string[i]\n } else if (newString !== '') {\n  newString += string[i].toLowerCase()\n } else {\n  newString += string[i].toLowerCase()\n }\n}\nconsole.log(newString)\n</code>\n<|/ a tags=algorithm,string,javascript dscore=0 |>\n<| a tags=algorithm,string,javascript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnlq8gqrz.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmpnlq8gqrz.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpnlq8gqrz.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpnlq8gqrz.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpnlq8gqrz.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmpnlq8gqrz.ts(18,7): error TS1109: Expression expected.\n../../../../tmp/tmpnlq8gqrz.ts(19,6): error TS1005: ';' expected.\n../../../../tmp/tmpnlq8gqrz.ts(19,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpnlq8gqrz.ts(19,20): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpnlq8gqrz.ts(19,28): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpnlq8gqrz.ts(19,38): error TS1005: ';' expected.\n../../../../tmp/tmpnlq8gqrz.ts(19,47): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpnlq8gqrz.ts(19,52): error TS1434: Unexpected keyword",
      "timestamp": 1660334902
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let reversedString = s.split(\"\").reverse().join(\"\");\n  if (reversedString.length === 0) {\n    return reversedString;\n  }\n\n  if (s.split(\"\").some(letter => letter === reversedString.charAt(0))) {\n    return s.split(\"\").map(letter => letter === reversedString.charAt(0) ? letter : letter.toUpperCase()).join(\"\");\n  }\n  return reversedString;\n}\n\nexport { solve };\n</code>\n<|/ a tags=arrays,recursion,javascript,string dscore=1 |>\n<| c |>\nThanks for the reply. I tested your code, it works fine for \"1234\". But fails for \"#a@c\", it should return \"#A@c\", but it returns \"#A@c\".\n<|/ c |>\n<| a tags=arrays,recursion,javascript,string |>\nTry this\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2p8q27fk.ts(26,2): error TS1110: Type expected.\n../../../../tmp/tmp2p8q27fk.ts(26,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2p8q27fk.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmp2p8q27fk.ts(27,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2p8q27fk.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmp2p8q27fk.ts(28,7): error TS1109: Expression expected.\n../../../../tmp/tmp2p8q27fk.ts(29,8): error TS1005: ';' expected.\n../../../../tmp/tmp2p8q27fk.ts(29,12): error TS1005: '(' expected.\n../../../../tmp/tmp2p8q27fk.ts(29,16): error TS1005: ';' expected.\n../../../../tmp/tmp2p8q27fk.ts(29,25): error TS1005: ';' expected.\n../../../../tmp/tmp2p8q27fk.ts(29,32): error TS1005: ')' expected.\n../../../../tmp/tmp2p8q27fk.ts(29,46): error TS1005: ';' expected.\n../../../../tmp/tmp2p8q27fk.ts(29,52): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2p8q27fk.ts(29,61): error TS1005: '(' expecte",
      "timestamp": 1660334902
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let low = s.toLowerCase()\n    let up = low\n    for(let i = 0; i < low.length; i++) {\n        let letter = low[i]\n        if(letter == letter.toLowerCase()) {\n            low = low.replace(letter, letter.toUpperCase())\n        } else if(letter == letter.toUpperCase()) {\n            low = low.replace(letter, letter.toLowerCase())\n        }\n    }\n    return up\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,javascript dscore=0 |>\nHere is a solution that checks for valid input and can handle capital letters and symbols.\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm2xgpzfj.ts(26,2): error TS1110: Type expected.\n../../../../tmp/tmpm2xgpzfj.ts(26,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpm2xgpzfj.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmpm2xgpzfj.ts(27,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpm2xgpzfj.ts(28,2): error TS1109: Expression expected.\n../../../../tmp/tmpm2xgpzfj.ts(28,6): error TS1005: ';' expected.\n../../../../tmp/tmpm2xgpzfj.ts(28,29): error TS1005: ';' expected.\n../../../../tmp/tmpm2xgpzfj.ts(28,39): error TS1109: Expression expected.\n../../../../tmp/tmpm2xgpzfj.ts(29,6): error TS1005: ';' expected.\n../../../../tmp/tmpm2xgpzfj.ts(29,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpm2xgpzfj.ts(29,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpm2xgpzfj.ts(29,20): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpm2xgpzfj.ts(29,25): error TS1434: Unexpected keyword or identifier.\n../..",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) === \"@\" || s.charAt(i) === \"#\") {\n            result += s.charAt(i);\n        } else {\n            result += s.toUpperCase();\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDFASDFASDFASDF'\n\nshould loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpx4q3pkiy.js:28:12)\n    at Object.<anonymous> (/tmp/tmpx4q3pkiy.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDFASDFASDFASDF',\n  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  const s = s\n    .split('')\n    .map(c => {\n      const isLetter = /^[a-zA-Z]+$/.test(c)\n      if (isLetter) {\n        return c.toUpperCase()\n      }\n      return c\n    })\n    .join('')\n  return s\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpso_g08nj.ts(13,16): error TS2300: Duplicate identifier 's'.\n../../../../tmp/tmpso_g08nj.ts(14,9): error TS2300: Duplicate identifier 's'.\n",
      "timestamp": 1660334902
    }
  ]
}