{
  "language": "ts",
  "name": "HumanEval_36_fizz_buzz",
  "results": [
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n % 11 === 0 && n % 13 === 0) {\n    return 1\n  }\n  return fizz_buzz(n - 1)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpxcyg3p8_.js:17:12)\n    at Object.<anonymous> (/tmp/tmpxcyg3p8_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let num = 0;\n  let divisibleBy11Or13 = n / 11 | 0;\n  let divisibleBy11Or13LessThanN = (n % 11 | 0) === 0;\n  let divisibleBy13 = (n % 13 | 0) === 0;\n  for (let i = 1; i <= n; ++i) {\n    if ((i % divisibleBy11Or13) === 0 && divisibleBy11Or13LessThanN) {\n      num++;\n    } else if (divisibleBy11Or13 !== 0 && i % divisibleBy11Or13 === 0 && divisibleBy13) {\n      num += 2;\n    } else if (divisibleBy11Or13 !== 0 && i % divisibleBy11Or13 === 0 && divisibleBy13 === false) {\n      num += 1;\n    }\n  }\n  return num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpm8c3k0_r.js:29:12)\n    at Object.<anonymous> (/tmp/tmpm8c3k0_r.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n % 11 === 0 || n % 13 === 0) return n\n\n  var count = 0;\n\n  while (n % 10 !== 0) {\n    count++\n    n /= 10\n  }\n\n  return count\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n78\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpl9bhr09u.js:22:12)\n    at Object.<anonymous> (/tmp/tmpl9bhr09u.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 78,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 100) return n;\n  if (n < 10) return fizz_buzz(n / 10);\n  if (n < 13) return fizz_buzz(n % 10) + 1;\n  if (n < 100) return fizz_buzz((n / 10) + 1);\n}\n</code>\n<|/ a dscore=0 tags=javascript,algorithm |>\n<| c |>\n\"fizz_buzz(n) is a recursive function. It takes a number and returns the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\n<|/ c |>\n<| c |>\nThat doesn't make any sense. `fizz_buzz` _is_ a recursive function. You can't have one that is not a recursive function.\n<|/ c |>\n<| c |>\n\"fizz_buzz(n) is a recursive function. It takes a number and returns the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\n<|/ c |>\n<| c |>\nWell, that doesn't help you at all. You are asking about a recursive function, but your comment doesn't make that clear.\n<|/ c |>\n<| a dscore=0 tags=javascript,algorithm |>\nHere's one way using Array.filter \n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3q5ta0y2.ts(14,2): error TS1110: Type expected.\n../../../../tmp/tmp3q5ta0y2.ts(14,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3q5ta0y2.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmp3q5ta0y2.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3q5ta0y2.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmp3q5ta0y2.ts(16,7): error TS1109: Expression expected.\n../../../../tmp/tmp3q5ta0y2.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmp3q5ta0y2.ts(18,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3q5ta0y2.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmp3q5ta0y2.ts(19,7): error TS1109: Expression expected.\n../../../../tmp/tmp3q5ta0y2.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmp3q5ta0y2.ts(20,77): error TS1005: ';' expected.\n../../../../tmp/tmp3q5ta0y2.ts(20,79): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3q5ta0y2.ts(20,84): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3q5ta0y2.ts(20,88): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3q5ta0y2.ts(20,93): error TS1228: A type predicate is only allowed in return type position for functions and methods.\n../../../../tmp/tmp3q5ta0y2.ts(20,96): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3q5ta0y2.ts(20,100): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3q5ta0y2.ts(20,102): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3q5ta0y2.ts(20,120): error TS1003: Identifier expected.\n../../../../tmp/tmp3q5ta0y2.ts(21,3): error TS1110: Type expected.\n../../../../tmp/tmp3q5ta0y2.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3q5ta0y2.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp3q5ta0y2.ts(22,7): error TS1109: Expression expected.\n../../../../tmp/tmp3q5ta0y2.ts(24,2): error TS1109: Expression expected.\n../../../../tmp/",
      "timestamp": 1660334431
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    const s = String(parseInt(n));\n    return s.indexOf(\"7\") === -1 ? n : s.indexOf(\"11\") === -1 ? n : s.indexOf(\"13\") === -1 ? n : n;\n}\n</code>\n<|/ a dscore=0 tags=javascript |>\n<| a tags=javascript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpypzwwbcq.ts(12,2): error TS1110: Type expected.\n../../../../tmp/tmpypzwwbcq.ts(12,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpypzwwbcq.ts(13,2): error TS1109: Expression expected.\n../../../../tmp/tmpypzwwbcq.ts(13,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpypzwwbcq.ts(14,2): error TS1109: Expression expected.\n../../../../tmp/tmpypzwwbcq.ts(14,6): error TS1005: ';' expected.\n../../../../tmp/tmpypzwwbcq.ts(14,23): error TS1109: Expression expected.\n../../../../tmp/tmpypzwwbcq.ts(16,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334431
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n\tif (n < 11) {\n\t\treturn n\n\t} else if (n < 13) {\n\t\treturn fizz_buzz(n - 3) * 11 + n\n\t} else if (n < 16) {\n\t\treturn fizz_buzz(n - 13) * 13 + n\n\t} else {\n\t\treturn fizz_buzz(n - 16) * 16 + n\n\t}\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n13394\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp8fpacdue.js:25:12)\n    at Object.<anonymous> (/tmp/tmp8fpacdue.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 13394,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    if (n === 0 || ((n % 11) === 0 && (n % 13) === 0)) {\n        return 0;\n    }\n    if (n !== Math.ceil(n)) {\n        return fizz_buzz(Math.ceil(n));\n    }\n    return 1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmprzpcjlir.js:20:12)\n    at Object.<anonymous> (/tmp/tmprzpcjlir.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 100) {\n    if (n % 11 === 0 && n % 13 !== 0) {\n      return 3;\n    }\n    return n % 11 === 0 ? 0 : 2;\n  }\n  if (n < 1000) {\n    if (n % 11 === 0 || n % 13 !== 0) {\n      return 1;\n    }\n    return n % 11 === 0 ? 0 : 3;\n  }\n  return 4;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpof031iqz.js:26:12)\n    at Object.<anonymous> (/tmp/tmpof031iqz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let arr: number[] = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      arr[i] = i;\n      count++;\n    } else {\n      arr[i] = count;\n    }\n  }\n  return arr[n];\n}\n\nconst fizz_buzz_test = () => {\n  expect(fizz_buzz(1)).toEqual(1);\n  expect(fizz_buzz(2)).toEqual(1);\n  expect(fizz_buzz(3)).toEqual(2);\n  expect(fizz_buzz(4)).toEqual(2);\n  expect(fizz_buzz(5)).toEqual(3);\n  expect(fizz_buzz(6)).toEqual(3);\n  expect(fizz_buzz(7)).toEqual(3);\n  expect(fizz_buzz(8)).toEqual(3);\n  expect(fizz_buzz(9)).toEqual(3);\n  expect(fizz_buzz(10)).toEqual(3);\n  expect(fizz_buzz(11)).toEqual(3);\n  expect(fizz_buzz(12)).toEqual(3);\n  expect(fizz_buzz(13)).toEqual(3);\n  expect(fizz_buzz(14)).toEqual(3);\n  expect(fizz_buzz(15)).toEqual(3);\n  expect(fizz_buzz(16)).toEqual(3);\n  expect(fizz_buzz(17)).toEqual(3);\n  expect(fizz_buzz(18)).toEqual(3);\n  expect(fizz_buzz(19)).toEqual(3);\n  expect(fizz_buzz(20)).toEqual(3);\n  expect(fizz_buzz(21)).toEqual(4);\n  expect(fizz_buzz(22)).toEqual(4);\n  expect(fizz_buzz(23)).toEqual(4);\n  expect(fizz_buzz(24)).toEqual(4);\n  expect(fizz_buzz(25)).toEqual(4);\n  expect(fizz_buzz(26)).toEqual(4);\n  expect(fizz_buzz(27)).toEqual(4);\n  expect(fizz_buzz(28)).toEqual(4);\n  expect(fizz_buzz(29)).toEqual(4);\n  expect(fizz_buzz(30)).toEqual(4);\n  expect(fizz_buzz(31)).toEqual(4);\n  expect(fizz_buzz(32)).toEqual(4);\n  expect(fizz_buzz(33)).toEqual(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbot_dlsj.ts(56,9): error TS1005: ',' expected.\n../../../../tmp/tmpbot_dlsj.ts(72,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334431
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let remainder = n % 11;\n  if (remainder === 0 || remainder === 11) return n;\n  remainder = n % 13;\n  if (remainder === 0) return n + 1;\n  return n + 2;\n}\n</code>\n<|/ a dscore=0 tags=fizzbuzz,javascript,ecmascript-6 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxo0_mqiv.ts(15,2): error TS1110: Type expected.\n../../../../tmp/tmpxo0_mqiv.ts(15,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpxo0_mqiv.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmpxo0_mqiv.ts(16,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpxo0_mqiv.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpxo0_mqiv.ts(17,6): error TS1005: ';' expected.\n../../../../tmp/tmpxo0_mqiv.ts(17,16): error TS1109: Expression expected.\n../../../../tmp/tmpxo0_mqiv.ts(19,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334431
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let n1 = n - 1;\n  for (let i = 2; i <= n / 11; i++) {\n    if (n % i == 0 || i % 11 == 0 || i % 13 == 0) {\n      return i;\n    }\n  }\n  return n1;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation) you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment); instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead). - [From Review](/review/low-quality-posts/27147017)\n<|/ c |>\n<| c |>\nThe solution is correct, if you test it on [Code Sandbox](https://www.codesandbox.io/s/competent-brook-szcqw?file=/src/index.tsx): `fizz_buzz(78) //=> 2`, `fizz_buzz(79) //=> 3` - Please see the provided link above.\n<|/ c |>\n<| c |>\nThe provided link just shows code and the result is not what I'm looking for. I'm looking for a way to make a program that does the same thing that the code below does, but with much less code.\n\n```javascript\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2jfcmije.ts(17,2): error TS1110: Type expected.\n../../../../tmp/tmp2jfcmije.ts(17,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2jfcmije.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmp2jfcmije.ts(18,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp2jfcmije.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmp2jfcmije.ts(19,7): error TS1109: Expression expected.\n../../../../tmp/tmp2jfcmije.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmp2jfcmije.ts(20,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2jfcmije.ts(20,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2jfcmije.ts(20,23): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2jfcmije.ts(20,26): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2jfcmije.ts(20,33): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp2jfcmije.ts(20,36): error TS1434",
      "timestamp": 1660334431
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 0) return 0;\n\n  const strings = Array.from({ length: 10 }, (_, i) => String(i));\n\n  const [count] = strings.filter(\n    (str: string) => str.startsWith(\"7\") && isDivisibleBy11Or13(n)\n  );\n\n  return count || 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbhfxuenb.ts(14,45): error TS2304: Cannot find name 'isDivisibleBy11Or13'.\n../../../../tmp/tmpbhfxuenb.ts(17,3): error TS2322: Type 'string | 0' is not assignable to type 'number'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334431
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 7;\n  while (n > count) {\n    if (n % 11 === 0 || n % 13 === 0) {\n      count++;\n    }\n    n = Math.floor(n / 10);\n  }\n  return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code doesn't work in all cases. The first number it returns is wrong, and for larger numbers it's wrong for some reason. Here's an example:\n>>> fizz_buzz(91)\n5\n>>> fizz_buzz(139)\n7\n>>> fizz_buzz(136)\n3\n>>> fizz_buzz(135)\n2\n>>> fizz_buzz(130)\n3\n>>> fizz_buzz(129)\n2\n>>> fizz_buzz(126)\n4\n>>> fizz_buzz(125)\n4\n>>> fizz_buzz(124)\n2\n>>> fizz_buzz(121)\n3\n>>> fizz_buzz(118)\n3\n>>> fizz_buzz(117)\n4\n>>> fizz_buzz(117)\n4\n>>> fizz_buzz(112)\n2\n>>> fizz_buzz(109)\n5\n>>> fizz_buzz(104)\n4\n>>> fizz_buzz(100)\n1\n<|/ c |>\n<| c |>\nYeah, it's definitely not correct for all cases. I guess that I misread the question a little bit. Thanks for pointing that out!\n<|/ c |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpie8r0mr3.ts(18,2): error TS1110: Type expected.\n../../../../tmp/tmpie8r0mr3.ts(18,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpie8r0mr3.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpie8r0mr3.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpie8r0mr3.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpie8r0mr3.ts(20,7): error TS1109: Expression expected.\n../../../../tmp/tmpie8r0mr3.ts(21,6): error TS1005: ';' expected.\n../../../../tmp/tmpie8r0mr3.ts(21,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpie8r0mr3.ts(21,102): error TS1005: ';' expected.\n../../../../tmp/tmpie8r0mr3.ts(21,104): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpie8r0mr3.ts(21,114): error TS1005: '(' expected.\n../../../../tmp/tmpie8r0mr3.ts(21,119): error TS1005: ';' expected.\n../../../../tmp/tmpie8r0mr3.ts(21,131): error TS1005: ';' expected.\n../../../../tmp/tmpie8r0mr3.ts(21,145):",
      "timestamp": 1660334431
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  while (n > 1 && n != 11 && n != 13) {\n    if (n % 10 == 7 && n % 100 != 11) {\n      count++;\n    }\n    n = Math.floor(n / 10);\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbdvstjgt.js:22:12)\n    at Object.<anonymous> (/tmp/tmpbdvstjgt.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  while (n >= 11 || n >= 13) {\n    if (n % 11 === 0 && n % 13 === 0) {\n      count++;\n    }\n    n /= 13;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpkl9wjz9r.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkl9wjz9r.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const str = n.toString();\n  return str.includes('7') ? str.split('7').length : 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp3grzlmaj.js:17:12)\n    at Object.<anonymous> (/tmp/tmp3grzlmaj.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let counter = 0;\n  for (let i = 1; i < n; i += 1) {\n    if (n % i === 0 || n % i === 11 || n % i === 13) {\n      counter += 1;\n    }\n  }\n  return counter;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpn9a8s1j3.js:20:12)\n    at Object.<anonymous> (/tmp/tmpn9a8s1j3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n\tif(n%11==0){\n\t\tif(n >= 13){\n\t\t\treturn 2;\n\t\t}\n\t\treturn 1;\n\t}\n\tif(n%13==0){\n\t\tif(n >= 11){\n\t\t\treturn 3;\n\t\t}\n\t\treturn 2;\n\t}\n\treturn 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp5ztfhm_u.js:27:12)\n    at Object.<anonymous> (/tmp/tmp5ztfhm_u.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": -1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  while (n >= 0) {\n    if (n % 11 === 0 || (n % 13 === 0 && n % 11 === 0)) {\n      ++count;\n    }\n    n /= 11;\n    n /= 13;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334446
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const numDivisibleBy11 = n % 11;\n  const numDivisibleBy13 = n % 13;\n\n  if (numDivisibleBy11 === 0 || numDivisibleBy13 === 0) {\n    return 0;\n  }\n\n  return 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpynfos2p7.js:19:12)\n    at Object.<anonymous> (/tmp/tmpynfos2p7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    const isBuzzy = n => n % 11 === 0 || n % 13 === 0;\n    const fizzBuzz = n => String(n % 11) + String(n % 13);\n\n    if (isBuzzy(n)) {\n        return 0;\n    }\n\n    let counter = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isBuzzy(i) && i <= n) {\n            counter++;\n        }\n    }\n    return counter;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpk59178px.js:25:12)\n    at Object.<anonymous> (/tmp/tmpk59178px.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    if (n < 0 || n % 11 === 0) {\n        return 0;\n    }\n\n    if (n % 13 === 0) {\n        return 2;\n    }\n\n    return 3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpqm40a1g7.js:20:12)\n    at Object.<anonymous> (/tmp/tmpqm40a1g7.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 11) return n\n  if (n % 11 === 13) return n // return number as is if it is divisible by 13\n  if (n % 11 === 11) return 0 // return zero if the number is divisible by 11\n  return fizz_buzz(Math.floor(n / 11)) // recursively call the function with n%11\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmptkh813i8.js:20:12)\n    at Object.<anonymous> (/tmp/tmptkh813i8.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334431
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return Math.floor(n / 11) % 2 === 0 ? Math.floor(n / 13) % 2 === 0 ? 1 : 2 : 3\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpi86r78a3.js:14:12)\n    at Object.<anonymous> (/tmp/tmpi86r78a3.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334434
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const isEven = n % 2 === 0;\n  const isOdd = n % 2 === 1;\n  const hasMultiple = (isEven && isOdd) || isEven;\n  return (hasMultiple || n === 7) ? 3 : 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpn31201jz.js:17:12)\n    at Object.<anonymous> (/tmp/tmpn31201jz.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334434
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const isPrime: boolean;\n  let count: number;\n  for (isPrime = false, count = 0; n < 1000; n++, count += n >= 200 && n <= 500 && n % 10 === 7 ? 1 : 0) {\n    if (isPrime) break;\n    for (let i = 1; i <= n; i += 11) if (n % i === 11) isPrime = true;\n    for (let i = 1; i <= n; i += 13) if (n % i === 13) isPrime = true;\n    if (isPrime) return count;\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiqsoh3y1.ts(9,9): error TS1155: 'const' declarations must be initialized.\n../../../../tmp/tmpiqsoh3y1.ts(11,8): error TS2588: Cannot assign to 'isPrime' because it is a constant.\n../../../../tmp/tmpiqsoh3y1.ts(13,56): error TS2588: Cannot assign to 'isPrime' because it is a constant.\n../../../../tmp/tmpiqsoh3y1.ts(14,56): error TS2588: Cannot assign to 'isPrime' because it is a constant.\n",
      "timestamp": 1660334434
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 1;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 2;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 3;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 4;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 5;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 6;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 7;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 8;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 9;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 10;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 11;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 12;\n  }\n\n  return 0;\n}\n\nmodule.exports = fizz_buzz;\n\n},{}],114:[function(require,module,exports){\nconst { isEven, isNaN, isInteger } = require(\"@algebraicwolf/number\");\nconst { add, mul, pow, trunc } = require(\"@algebraicwolf/vector-utils\");\nconst { repeat } = require(\"../util\");\nconst { fromNullable, toNullable } = require(\"../conversion\");\n\nconst isPositive = (n) => {\n  if (!isInteger(n)) {\n    throw new TypeError(\"Expected integer but received \" + toNullable(n));\n  }\n\n  return trunc(n) === 0 || trunc(n) === 1;\n};\n\nconst isNegative = (n) => {\n  if (!isInteger(n)) {\n    throw new TypeError(\"Expected integer but received \" + toNullable(n));\n  }\n\n  return trunc(n) === -1 || trunc(n) === -2;\n};\n\nconst isIntegerAndNegative = (n) => {\n  return isPositive(n) && isNegative(n);\n};\n\nconst isIntegerAndPositive = (n) => {\n  return isPositive(n) && isNegative(n) === false;\n};\n\nconst fromPositiveAndNegative = (n) => {\n  return isPositive(n) ? 0 : isNegative(n) ? -1 : n;\n};\n\nconst fromPositiveAndPositive = (n) => {\n  return isPositive(n) ? 0 : isNegative(n) ? 1 : n;\n};\n\nconst fromNegativeAndPositive = (n) => {\n  return isPositive(n) ? 0 : isNegative(n) ? -1 : n;\n};\n\nconst fromNegativeAndNegative = (n) => {\n  return isPositive(n) ? 0 : isNegative(n) ? -2 : n;\n};\n\nconst fromNegative = (n) => {\n  return isNegative(n) ? -2 : n;\n};\n\nconst fromPositive\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpem99dzv3.ts(66,1): error TS1128: Declaration or statement expected.\n../../../../tmp/tmpem99dzv3.ts(66,2): error TS1128: Declaration or statement expected.\n../../../../tmp/tmpem99dzv3.ts(66,5): error TS1128: Declaration or statement expected.\n../../../../tmp/tmpem99dzv3.ts(66,6): error TS1128: Declaration or statement expected.\n../../../../tmp/tmpem99dzv3.ts(66,10): error TS1005: ';' expected.\n../../../../tmp/tmpem99dzv3.ts(133,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334434
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 0) throw new Error('n must be positive.');\n  if (n < 11) return n;\n  if (n < 13) return n + 1;\n  if (n % 2 === 1) return n + 1;\n  return n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n50\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpun7i9942.js:22:12)\n    at Object.<anonymous> (/tmp/tmpun7i9942.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 50,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334435
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  while (n % 11 == 0 || n % 13 == 0) {\n    n /= 11;\n    count += 1;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpilqpekue.js:20:12)\n    at Object.<anonymous> (/tmp/tmpilqpekue.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334434
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    return ((n / 11) | 0) + ((n / 13) | 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpb3gdm_cs.js:14:12)\n    at Object.<anonymous> (/tmp/tmpb3gdm_cs.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334435
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    const numbers = [11, 13, 17, 19, 23]\n    let counter = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (n % numbers[i] === 0) {\n            counter++;\n        }\n    }\n    return counter;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp_6zxl89e.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_6zxl89e.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334435
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  if (n === 4) return 4;\n  if (n === 5) return 5;\n  if (n === 6) return 6;\n  if (n === 7) return 7;\n  if (n === 8) return 8;\n  if (n === 9) return 9;\n  if (n === 10) return 11;\n  if (n === 11) return 12;\n  if (n === 12) return 13;\n  if (n === 13) return 14;\n  if (n === 14) return 15;\n  if (n === 15) return 16;\n  if (n === 16) return 17;\n  if (n === 17) return 18;\n  if (n === 18) return 19;\n  if (n === 19) return 20;\n  if (n === 20) return 21;\n  if (n === 21) return 22;\n  if (n === 22) return 23;\n  if (n === 23) return 24;\n  if (n === 24) return 25;\n  if (n === 25) return 26;\n  if (n === 26) return 27;\n  if (n === 27) return 28;\n  if (n === 28) return 29;\n  if (n === 29) return 30;\n  if (n === 30) return 31;\n  if (n === 31) return 32;\n  if (n === 32) return 33;\n  if (n === 33) return 34;\n  if (n === 34) return 35;\n  if (n === 35) return 36;\n  if (n === 36) return 37;\n  if (n === 37) return 38;\n  if (n === 38) return 39;\n  if (n === 39) return 40;\n  if (n === 40) return 41;\n  if (n === 41) return 42;\n  if (n === 42) return 43;\n  if (n === 43) return 44;\n  if (n === 44) return 45;\n  if (n === 45) return 46;\n  if (n === 46) return 47;\n  if (n === 47) return 48;\n  if (n === 48) return 49;\n  if (n === 49) return 50;\n  if (n === 50) return 51;\n  if (n === 51) return 52;\n  if (n === 52) return 53;\n  if (n === 53) return 54;\n  if (n === 54) return 55;\n  if (n === 55) return 56;\n  if (n === 56) return 57;\n  if (n === 57) return 58;\n  if (n === 58) return 59;\n  if (n === 59) return 60;\n  if (n === 60) return 61;\n  if (n === 61) return 62;\n  if (n === 62) return 63;\n  if (n === 63) return 64;\n  if (n === 64) return 65;\n  if (n === 65) return 66;\n  if (n === 66) return 67;\n  if (n === 67) return 68;\n  if (n === 68) return 69;\n  if (n === 69) return 70;\n  if (n === 70) return 71;\n  if (n === 71) return 72;\n  if (n === 72) return 73;\n  if (n === 73) return 74;\n  if (n === 74) return 75;\n  if (n === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk_eiqtfz.ts(85,9): error TS1005: ')' expected.\n../../../../tmp/tmpk_eiqtfz.ts(101,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334434
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n\tn = +n;\n\treturn ((n === 0 || n === 11 || n === 13) && n % 11 === 0) || (n !== 0 && n % 13 === 0) ? 0 : 2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpzkzub_9h.js:15:12)\n    at Object.<anonymous> (/tmp/tmpzkzub_9h.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334435
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 0;\n  }\n\n  return 1;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nCan you explain the last two lines of the code please\n<|/ c |>\n<| c |>\nCan you explain the last two lines of the code please\n<|/ c |>\n<| c |>\nhow about `let fb = Math.ceil(Math.log(n) / Math.LN2); return fb === 0 ? n : Math.floor(n * Math.pow(10, fb));`?\n<|/ c |>\n<| a |>\nHere's my version\n<code>\nconst fizzBuzz = (number: number) => {\n    if (number > 99) {\n      return number\n    }\n    let divisor = 11\n    if (number % divisor === 0) {\n        divisor = 13\n    }\n    let result = ''\n    while (number >= divisor) {\n        result += divisor % 10 + ''\n        number = number / divisor\n        divisor = 11\n        if (number % divisor === 0) {\n            divisor = 13\n        }\n    }\n    return result\n}\n</code>\n<|/ a dscore=4 tags=javascript |>\n<| c |>\nI really like this solution, but I would advise against using const and let in ES6. I prefer let. Here is a great article on this: https://hacks.mozilla.org/2015/08/es6-in-depth-let-and-const/\n<|/ c |>\n<| a dscore=4 |>\nYou can do it this way, too:\n<code>\nvar fizzBuzz = (x) => {\n  let str = \"\";\n  let y = x;\n  while (y > 0 && y % 3 === 0 && y % 5 === 0) {\n    str += \"FizzBuzz\"\n    y = y / 5;\n  }\n  while (y > 0 && y % 3 === 0) {\n    str += \"Fizz\"\n    y = y / 3;\n  }\n  while (y > 0 && y % 5 === 0) {\n    str += \"Buzz\"\n    y = y / 5;\n  }\n  return str;\n};\n</code>\n<|/ a tags=javascript |>\n<| a tags=javascript |>\nHere's a solution that uses recursion and doesn't require any looping:\n<code>\nvar fizzBuzz = (n) => {\n  var div = Math.floor(n/3);\n  if (div > 0 && n % 3 === 0 && n % 5 === 0) {\n    return `${div}FizzBuzz`;\n  }\n  if (div > 0 && n % 3 === 0) {\n    return `${div}Fizz`;\n  }\n  if (div > 0 && n % 5 === 0) {\n    return `${div}Buzz`;\n  }\n  return n;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprhryjp0l.ts(15,2): error TS1110: Type expected.\n../../../../tmp/tmprhryjp0l.ts(15,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmprhryjp0l.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmprhryjp0l.ts(16,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmprhryjp0l.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmprhryjp0l.ts(17,7): error TS1109: Expression expected.\n../../../../tmp/tmprhryjp0l.ts(18,5): error TS1005: ';' expected.\n../../../../tmp/tmprhryjp0l.ts(18,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprhryjp0l.ts(18,17): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprhryjp0l.ts(18,21): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprhryjp0l.ts(18,26): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprhryjp0l.ts(18,30): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprhryjp0l.ts(18,36): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprhryjp0l.ts(18,39): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprhryjp0l.ts(18,43): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprhryjp0l.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmprhryjp0l.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmprhryjp0l.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmprhryjp0l.ts(20,7): error TS1109: Expression expected.\n../../../../tmp/tmprhryjp0l.ts(21,5): error TS1005: ';' expected.\n../../../../tmp/tmprhryjp0l.ts(21,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprhryjp0l.ts(21,17): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprhryjp0l.ts(21,21): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprhryjp0l.ts(21,26): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmprhryjp0l.ts(21,30): error TS1434: Unexpected keyword or identifier.\n../",
      "timestamp": 1660334434
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  while (n) {\n    if (n % 11 == 0 || n % 13 == 0) {\n      count++;\n    }\n    n = Math.floor(n / 11);\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(78));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmppk0ztg_2.js:23:12)\n    at Object.<anonymous> (/tmp/tmppk0ztg_2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "1\n",
      "timestamp": 1660334435
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 11) {\n    if (n % 11 === 0) return 0\n    if (n % 13 === 0) return 1\n  }\n  return n > 99 ? 2 : 3\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpua5gb7a4.js:20:12)\n    at Object.<anonymous> (/tmp/tmpua5gb7a4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334435
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n === 0) {\n    return 0;\n  }\n\n  if (n / 11 < n % 11 || n % 11 === 0 && n / 13 < n % 13) {\n    return 2;\n  }\n\n  return 3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpyd80nrt_.js:20:12)\n    at Object.<anonymous> (/tmp/tmpyd80nrt_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334435
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return Math.max(n / 11, n / 13) + 1;\n}\n\nconsole.log(fizz_buzz(12));\nconsole.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(50));\nconsole.log(fizz_buzz(78));\nconsole.log(fizz_buzz(79));</code>\n<|/ a tags=javascript dscore=0 |>\n<| c |>\nI haven't found any solution for this problem with single return statement like yours so I decided to put two return statements one for n divisible by 11 and other for n divisible by 13. Thanks for your answer though\n<|/ c |>\n<| a dscore=0 tags=javascript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_xp0q3nd.ts(17,29): error TS1110: Type expected.\n../../../../tmp/tmp_xp0q3nd.ts(17,30): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_xp0q3nd.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmp_xp0q3nd.ts(18,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_xp0q3nd.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmp_xp0q3nd.ts(19,7): error TS1109: Expression expected.\n../../../../tmp/tmp_xp0q3nd.ts(20,3): error TS1005: ';' expected.\n../../../../tmp/tmp_xp0q3nd.ts(20,3): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp_xp0q3nd.ts(20,217): error TS1002: Unterminated string literal.\n../../../../tmp/tmp_xp0q3nd.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmp_xp0q3nd.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_xp0q3nd.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp_xp0q3nd.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmp_xp0q3nd.ts(22,15): error TS1005: ';' expected.\n../../../../tmp/tmp_xp0q3nd.ts(22,32): error TS1109: Expression expected.\n../../../../tmp/tmp_xp0q3nd.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334435
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 11 || n % 11 === 0) {\n    return 0;\n  }\n  if (n < 13 || n % 13 === 0) {\n    return 2;\n  }\n  return 3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp2ej4ppwh.js:20:12)\n    at Object.<anonymous> (/tmp/tmp2ej4ppwh.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334435
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return Math.ceil(Math.log10(n)) <= 3 ? fizz_buzz_digit(n % 11, n % 13) + fizz_buzz_digit(n % 11, n % 13) + fizz_buzz_digit(n % 11, n % 13) + fizz_buzz_digit(n % 11, n % 13) : fizz_buzz_digit(n % 11, n % 13);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpobj5oyif.ts(9,42): error TS2304: Cannot find name 'fizz_buzz_digit'.\n../../../../tmp/tmpobj5oyif.ts(9,76): error TS2304: Cannot find name 'fizz_buzz_digit'.\n../../../../tmp/tmpobj5oyif.ts(9,110): error TS2304: Cannot find name 'fizz_buzz_digit'.\n../../../../tmp/tmpobj5oyif.ts(9,144): error TS2304: Cannot find name 'fizz_buzz_digit'.\n../../../../tmp/tmpobj5oyif.ts(9,178): error TS2304: Cannot find name 'fizz_buzz_digit'.\n",
      "timestamp": 1660334435
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 10) return n;\n  if (n % 10 === 0) return 0;\n  if (n % 10 === 1) return 1;\n  if (n % 10 === 2) return 2;\n  if (n % 10 === 3) return 3;\n  if (n % 10 === 4) return 4;\n  if (n % 10 === 5) return 5;\n  if (n % 10 === 6) return 6;\n  if (n % 10 === 7) return 7;\n  if (n % 10 === 8) return 8;\n  if (n % 10 === 9) return 9;\n  if (n % 10 === 11) return 11;\n  if (n % 10 === 12) return 12;\n  if (n % 10 === 13) return 13;\n  if (n % 10 === 14) return 14;\n  if (n % 10 === 15) return 15;\n  if (n % 10 === 16) return 16;\n  if (n % 10 === 17) return 17;\n  if (n % 10 === 18) return 18;\n  if (n % 10 === 19) return 19;\n  if (n % 10 === 20) return 20;\n  if (n % 10 === 21) return 21;\n  if (n % 10 === 22) return 22;\n  if (n % 10 === 23) return 23;\n  if (n % 10 === 24) return 24;\n  if (n % 10 === 25) return 25;\n  if (n % 10 === 26) return 26;\n  if (n % 10 === 27) return 27;\n  if (n % 10 === 28) return 28;\n  if (n % 10 === 29) return 29;\n  if (n % 10 === 30) return 30;\n  if (n % 10 === 31) return 31;\n  if (n % 10 === 32) return 32;\n  if (n % 10 === 33) return 33;\n  if (n % 10 === 34) return 34;\n  if (n % 10 === 35) return 35;\n  if (n % 10 === 36) return 36;\n  if (n % 10 === 37) return 37;\n  if (n % 10 === 38) return 38;\n  if (n % 10 === 39) return 39;\n  if (n % 10 === 40) return 40;\n  if (n % 10 === 41) return 41;\n  if (n % 10 === 42) return 42;\n  if (n % 10 === 43) return 43;\n  if (n % 10 === 44) return 44;\n  if (n % 10 === 45) return 45;\n  if (n % 10 === 46) return 46;\n  if (n % 10 === 47) return 47;\n  if (n % 10 === 48) return 48;\n  if (n % 10 === 49) return 49;\n  if (n % 10 === 50) return 50;\n  if (n % 10 === 51) return 51;\n  if (n % 10 === 52) return 52;\n  if (n % 10 === 53) return 53;\n  if (n % 10 === 54) return 54;\n  if (n % 10 === 55) return 55;\n  if (n % 10 === 56) return 56;\n  if (n % 10 === 57) return 57;\n  if (n % 10 === 58) return 58;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpip3umcyb.ts(85,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334435
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  n = Math.floor(n);\n  let count = 0;\n\n  for (let i = 2; i <= n; i += 1) {\n    if (n % i === 0) {\n      if (i % 11 === 0 || i % 13 === 0) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n<|/ file dstars=0 source=github |>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjkf8368b.ts(22,3): error TS1110: Type expected.\n../../../../tmp/tmpjkf8368b.ts(22,4): error TS1161: Unterminated regular expression literal.\n",
      "timestamp": 1660334435
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n <= 0) return 0;\n  let cnt = 0;\n  while (n % 11 != 0 || n % 13 != 0) {\n    n /= 10;\n    cnt++;\n  }\n  return cnt;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n326\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpau5arp72.js:21:12)\n    at Object.<anonymous> (/tmp/tmpau5arp72.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 326,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334435
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return Math.floor(n / 11) * 13 + n % 11;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n58\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmptchkp1wn.js:14:12)\n    at Object.<anonymous> (/tmp/tmptchkp1wn.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 58,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334435
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  n = n.toString().split('')\n  \n  let count = 0\n  for (let i = n.length - 1; i >= 0; i--) {\n    if (n[i] === '7') {\n      count++\n    }\n  }\n  return count\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp02efie9w.ts(9,3): error TS2322: Type 'string[]' is not assignable to type 'number'.\n../../../../tmp/tmp02efie9w.ts(12,18): error TS2339: Property 'length' does not exist on type 'number'.\n",
      "timestamp": 1660334435
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 0;\n  }\n  return Math.ceil(Math.log2(n) / Math.LN10);\n}\n\n<|/ file ext=.ts |>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1wfq352n.ts(15,3): error TS1110: Type expected.\n../../../../tmp/tmp1wfq352n.ts(15,4): error TS1161: Unterminated regular expression literal.\n",
      "timestamp": 1660334437
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 10) return n\n  if (n < 13) return fizz_buzz_11(n)\n  return fizz_buzz_13(n)\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqggt9_ft.ts(10,22): error TS2304: Cannot find name 'fizz_buzz_11'.\n../../../../tmp/tmpqggt9_ft.ts(11,10): error TS2304: Cannot find name 'fizz_buzz_13'.\n",
      "timestamp": 1660334437
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const isDivisibleBy11 = n % 11 === 0;\n  const isDivisibleBy13 = n % 13 === 0;\n  let count = 0;\n  if (isDivisibleBy11 && isDivisibleBy13) {\n    return count;\n  }\n  for (let i = n; i > 0; i--) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(50));\nconsole.log(fizz_buzz(78));\nconsole.log(fizz_buzz(79));</code>\n<|/ a tags=fizzbuzz,javascript,algorithm,numbers |>\n<| a tags=fizzbuzz,javascript,algorithm,numbers |>\nThis is not an algorithmic problem, but rather an algorithm problem, and I think this is one of the simplest solutions, given that there is only one way to solve the problem. \nFirst note that what you want to do is count the numbers that are divisible by both 3 and 5 that come before them in a sequence. For example, if the input is 123, then your algorithm needs to count the number 123 as 1 because 123 is divisible by 3 and 5, 12 is divisible by 3, and 11 is divisible by 5. \nThe main problem here is how to find the number that is divisible by both 3 and 5 that comes before them. \nThe number that is divisible by 3 that comes before it is (3 x 5 - 1) and the number that is divisible by 5 that comes before it is (5 x 3 - 1). There are three other ways of getting to this number, so you just need to keep a count of how many times you divide by 3 and 5 and increment the count accordingly. \nTo illustrate this, here are some examples. Let's say the input number is 123. Let's look at the number that comes before the number that is divisible by both 3 and 5 (i.e. 123 - 123). Since the number 12 is divisible by 3, the number 12 is divisible by 5 and you just need to increment your count by 1, since that's the only number that is divisible by both 3 and 5 and is less than 123. \nTo find out the number that comes before it, you just need to find the number that is divisible by 3 that is less than 123 and then subtract from that number the number that is divisible by 5. This will give you the number that comes before it, which is 11. \nThis is how I would solve the problem. \n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp850l2c2e.ts(37,29): error TS1110: Type expected.\n../../../../tmp/tmp850l2c2e.ts(37,30): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp850l2c2e.ts(38,2): error TS1109: Expression expected.\n../../../../tmp/tmp850l2c2e.ts(38,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp850l2c2e.ts(39,2): error TS1109: Expression expected.\n../../../../tmp/tmp850l2c2e.ts(39,6): error TS1005: ';' expected.\n../../../../tmp/tmp850l2c2e.ts(39,50): error TS1109: Expression expected.\n../../../../tmp/tmp850l2c2e.ts(40,6): error TS1005: ';' expected.\n../../../../tmp/tmp850l2c2e.ts(40,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp850l2c2e.ts(40,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp850l2c2e.ts(40,16): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp850l2c2e.ts(40,41): error TS1005: ';' expected.\n../../../../tmp/tmp850l2c2e.ts(40,48): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp850l2c2e.ts(40,51): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp850l2c2e.ts(40,74): error TS1005: ';' expected.\n../../../../tmp/tmp850l2c2e.ts(40,76): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp850l2c2e.ts(40,87): error TS1005: ';' expected.\n../../../../tmp/tmp850l2c2e.ts(40,90): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp850l2c2e.ts(40,94): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp850l2c2e.ts(40,97): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp850l2c2e.ts(40,101): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp850l2c2e.ts(40,127): error TS1005: ';' expected.\n../../../../tmp/tmp850l2c2e.ts(40,132): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp850l2c2e.ts(40,138): error TS1228: A type predicate is only allowed in return type position for functions and methods.\n../../../../tmp/tmp850l2c2e.ts(40,141): error TS1434: Unexpected keyword or ",
      "timestamp": 1660334438
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n % 11 === 0 && n % 13 === 0) {\n    return 0;\n  } else if (n % 11 === 0 && n % 13 !== 0) {\n    return 1;\n  } else if (n % 11 !== 0 && n % 13 === 0) {\n    return 2;\n  } else {\n    return 3;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmphla8wswb.js:25:12)\n    at Object.<anonymous> (/tmp/tmphla8wswb.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334438
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const str = n.toString();\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === '7') {\n      count += 3;\n    } else if (char === '9') {\n      count += 2;\n    } else {\n      count++;\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpq6tqeilu.js:28:12)\n    at Object.<anonymous> (/tmp/tmpq6tqeilu.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334438
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let num: number = n;\n  let numStr: string = num.toString(10);\n  let fbuz: number = 0;\n\n  while (numStr.length !== 0) {\n    fbuz += parseInt(numStr.substr(numStr.length - 1, 1));\n    numStr = numStr.substr(0, numStr.length - 1);\n  }\n\n  if (fbuz % 11 === 0 || fbuz % 13 === 0) {\n    return fbuz;\n  } else {\n    return 0;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmplw55s9pt.js:27:12)\n    at Object.<anonymous> (/tmp/tmplw55s9pt.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334438
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n === 11 || n === 13) {\n    return 1;\n  }\n\n  if (n === 1) {\n    return 0;\n  }\n\n  if (n % 2 === 1 && n % 3 === 1 && n % 5 === 1) {\n    return 1;\n  }\n\n  if (n % 2 === 1 || n % 3 === 1 || n % 5 === 1) {\n    return 2;\n  }\n\n  if (n % 2 === 1 && n % 3 === 1) {\n    return 3;\n  }\n\n  if (n % 3 === 1) {\n    return 4;\n  }\n\n  if (n % 5 === 1) {\n    return 5;\n  }\n\n  return 6;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp6ao19hys.js:35:12)\n    at Object.<anonymous> (/tmp/tmp6ao19hys.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334438
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return +(n).toString(10).match(/^7(0*1)?$/) ? 0 : (+(n).toString(10).match(/^7(0*13)?$/) ? 2 : 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpebut8wwu.js:14:12)\n    at Object.<anonymous> (/tmp/tmpebut8wwu.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334438
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    n /= 11;\n    count += 1;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpb6tpwnt9.js:20:12)\n    at Object.<anonymous> (/tmp/tmpb6tpwnt9.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334438
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  for (let i = 1; i < n; i++) if (n % 11 === 0 || n % 13 === 0) return i\n  return 1\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmps0jcd92c.js:17:12)\n    at Object.<anonymous> (/tmp/tmps0jcd92c.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334438
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let result = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      result++;\n    }\n  }\n  return result;\n}\n</code>\n<|/ a tags=typescript,javascript,algorithm |>\n<| c |>\nJust a small remark: `fizz_buzz(100)` returns `0` and not `1`.\n<|/ c |>\n<| a tags=typescript,javascript,algorithm dscore=0 |>\n<code>\nconst fizz_buzz = (n) => {\n    if (n === 0 || n === 1)\n        return n;\n\n    const result = n\n        .toString()\n        .split('')\n        .filter(i => i % 3 === 0)\n        .length;\n\n    return n % 11 === 0 || n % 13 === 0 ? result : fizz_buzz(n - 1);\n};\n</code>\n<|/ a |>\n<| a |>\nIn C#:\n<code>\nstatic int fizz_buzz(int n){\n    if (n == 1 || n == 0)\n        return n;\n    string[] arr = n.ToString().ToCharArray();\n    int count = 0;\n    int sum = 0;\n    for (int i = 0; i < arr.Length; i++)\n    {\n        if (arr[i] == '0') count += 0;\n        if (arr[i] == '1') count += 1;\n        if (arr[i] == '2') count += 2;\n        if (arr[i] == '3') count += 3;\n        if (arr[i] == '4') count += 4;\n        if (arr[i] == '5') count += 5;\n        if (arr[i] == '6') count += 6;\n        if (arr[i] == '7') count += 7;\n        if (arr[i] == '8') count += 8;\n        if (arr[i] == '9') count += 9;\n        if (arr[i] == 'A') count += 10;\n        if (arr[i] == 'B') count += 11;\n        if (arr[i] == 'C') count += 12;\n        if (arr[i] == 'D') count += 13;\n        if (arr[i] == 'E') count += 14;\n        if (arr[i] == 'F') count += 15;\n        if (arr[i] == 'G') count += 16;\n        if (arr[i] == 'H') count += 17;\n        if (arr[i] == 'I') count += 18;\n        if (arr[i] == 'J') count += 19;\n        if (arr[i] == 'K') count += 20;\n        if (arr[i] == 'L') count += 21;\n        if (arr[i] == 'M') count += 22;\n        if (arr[i] == 'N') count += 23;\n        if (arr[i] == 'O') count += 24;\n        if (arr[i] == 'P') count += 25;\n        if (arr[i] == 'Q') count += 26;\n        if (arr[i] == 'R') \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt4ga8eba.ts(17,2): error TS1110: Type expected.\n../../../../tmp/tmpt4ga8eba.ts(17,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpt4ga8eba.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmpt4ga8eba.ts(18,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpt4ga8eba.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpt4ga8eba.ts(19,7): error TS1109: Expression expected.\n../../../../tmp/tmpt4ga8eba.ts(20,6): error TS1005: ';' expected.\n../../../../tmp/tmpt4ga8eba.ts(20,8): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpt4ga8eba.ts(20,39): error TS1005: ';' expected.\n../../../../tmp/tmpt4ga8eba.ts(20,47): error TS1443: Module declaration names may only use ' or \" quoted strings.\n../../../../tmp/tmpt4ga8eba.ts(20,51): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpt4ga8eba.ts(21,1): error TS1003: Identifier expected.\n../../../../tmp/tmpt4ga8eba.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmpt4ga8eba.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpt4ga8eba.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpt4ga8eba.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmpt4ga8eba.ts(22,43): error TS1005: ';' expected.\n../../../../tmp/tmpt4ga8eba.ts(22,53): error TS1109: Expression expected.\n../../../../tmp/tmpt4ga8eba.ts(24,1): error TS1109: Expression expected.\n../../../../tmp/tmpt4ga8eba.ts(36,2): error TS1110: Type expected.\n../../../../tmp/tmpt4ga8eba.ts(36,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpt4ga8eba.ts(37,2): error TS1109: Expression expected.\n../../../../tmp/tmpt4ga8eba.ts(37,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpt4ga8eba.ts(38,2): error TS1109: Expression expected.\n../../../../tmp/tmpt4ga8eba.ts(38,7): error TS1109: Expression expected.\n../../../../tmp/tmpt4ga8eba.ts(39,4): error TS1005: ';' expected.\n../../../../tmp/tmpt4ga8eb",
      "timestamp": 1660334438
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let counter = 0;\n  const modulo = n % 11;\n  if (modulo === 11) {\n    counter++;\n  }\n  if (modulo === 13) {\n    counter++;\n  }\n  if (n >= 100) {\n    for (let i = 1; i <= n; i += 11) {\n      if (i % 11 === 0 || i % 13 === 0) {\n        counter++;\n      }\n    }\n  }\n  return counter;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbf2jqczf.js:30:12)\n    at Object.<anonymous> (/tmp/tmpbf2jqczf.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334438
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return n < 0 ? 0 : n <= 90 ? n : n % 10 === 11 ? n : n % 10 === 13 ? n + 1 : fizz_buzz(parseInt(n / 10, 10)) % 10;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdy8ogqt6.ts(9,99): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660334438
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    if (n === 1) {\n        return 0;\n    }\n    if (n % 11 === 0 || n % 13 === 0) {\n        return n + fizz_buzz(n / 11);\n    }\n    return fizz_buzz(n / 13) + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpbv9ytr3t.js:9\n    if (n === 1) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at fizz_buzz (/tmp/tmpbv9ytr3t.js:9:5)\n    at fizz_buzz (/tmp/tmpbv9ytr3t.js:13:20)\n    at fizz_buzz (/tmp/tmpbv9ytr3t.js:13:20)\n    at fizz_buzz (/tmp/tmpbv9ytr3t.js:13:20)\n    at fizz_buzz (/tmp/tmpbv9ytr3t.js:13:20)\n    at fizz_buzz (/tmp/tmpbv9ytr3t.js:13:20)\n    at fizz_buzz (/tmp/tmpbv9ytr3t.js:13:20)\n    at fizz_buzz (/tmp/tmpbv9ytr3t.js:13:20)\n    at fizz_buzz (/tmp/tmpbv9ytr3t.js:13:20)\n    at fizz_buzz (/tmp/tmpbv9ytr3t.js:13:20)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334438
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return n;\n  } else {\n    return fizz_buzz(Math.ceil(n / 11)) +\n      fizz_buzz(Math.ceil(n / 13)) +\n      1;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpjl67wl80.js:9\n    if (n % 11 === 0 || n % 13 === 0) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at fizz_buzz (/tmp/tmpjl67wl80.js:9:5)\n    at fizz_buzz (/tmp/tmpjl67wl80.js:13:16)\n    at fizz_buzz (/tmp/tmpjl67wl80.js:13:16)\n    at fizz_buzz (/tmp/tmpjl67wl80.js:13:16)\n    at fizz_buzz (/tmp/tmpjl67wl80.js:13:16)\n    at fizz_buzz (/tmp/tmpjl67wl80.js:13:16)\n    at fizz_buzz (/tmp/tmpjl67wl80.js:13:16)\n    at fizz_buzz (/tmp/tmpjl67wl80.js:13:16)\n    at fizz_buzz (/tmp/tmpjl67wl80.js:13:16)\n    at fizz_buzz (/tmp/tmpjl67wl80.js:13:16)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334438
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return Math.floor((n - 1) / 11) * 13 + n % 11;\n}\n</code>\nI added an extra check for n % 11 > 1 just in case you wanted to deal with that case. Also, as you probably know from my comment, you can do this in a one-liner by using the modulo operator and conditional expression.\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuwh7s6nu.ts(11,2): error TS1110: Type expected.\n../../../../tmp/tmpuwh7s6nu.ts(11,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpuwh7s6nu.ts(12,1): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuwh7s6nu.ts(12,3): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuwh7s6nu.ts(12,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuwh7s6nu.ts(12,12): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuwh7s6nu.ts(12,18): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuwh7s6nu.ts(12,28): error TS1005: '(' expected.\n../../../../tmp/tmpuwh7s6nu.ts(12,39): error TS1005: ';' expected.\n../../../../tmp/tmpuwh7s6nu.ts(12,47): error TS1109: Expression expected.\n../../../../tmp/tmpuwh7s6nu.ts(12,52): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuwh7s6nu.ts(12,56): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuwh7s6nu.ts(12,63): error TS143",
      "timestamp": 1660334438
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let counter = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      counter++;\n    }\n  }\n  return counter;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpugday0hu.js:20:12)\n    at Object.<anonymous> (/tmp/tmpugday0hu.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334438
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return  Number(n%11 === 0 || n%13 === 0 ? 0 : (n % 11 === 5 || n % 11 === 7 || n % 13 === 5 || n % 13 === 7 ? 2 : 1));\n}\n\n<|/ file ext=.ts filename=index.ts |>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5fgk072f.ts(12,3): error TS1110: Type expected.\n../../../../tmp/tmp5fgk072f.ts(12,4): error TS1161: Unterminated regular expression literal.\n",
      "timestamp": 1660334438
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return ((n / 11) | 0) + ((n % 11 === 0) || ((n / 13) | 0) !== 0 ? 1 : 0)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpamam360b.js:14:12)\n    at Object.<anonymous> (/tmp/tmpamam360b.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334438
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return Array.from(Array(n).keys()).reduce((a, i) => a + (n % 11 == 0 || n % 13 == 0 ? 0 : 1), 0);\n}\n</code>\n<|/ a |>\n<| a |>\nA few optimizations are possible:\n\nIf n is a power of 2, then it's an exact power of 2.\nIf n is divisible by 11, then it's an exact power of 11.\nIf n is divisible by 13, then it's an exact power of 13.\n\nThis means that no special handling is necessary for the last case.\nThis makes the whole function simpler and faster, with no unnecessary loops.\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphobxgbmt.ts(11,2): error TS1110: Type expected.\n../../../../tmp/tmphobxgbmt.ts(11,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphobxgbmt.ts(12,2): error TS1109: Expression expected.\n../../../../tmp/tmphobxgbmt.ts(12,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphobxgbmt.ts(13,2): error TS1109: Expression expected.\n../../../../tmp/tmphobxgbmt.ts(13,7): error TS1109: Expression expected.\n../../../../tmp/tmphobxgbmt.ts(14,3): error TS1005: ';' expected.\n../../../../tmp/tmphobxgbmt.ts(14,7): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphobxgbmt.ts(14,21): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphobxgbmt.ts(16,1): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphobxgbmt.ts(16,4): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmphobxgbmt.ts(16,6): error TS1228: A type predicate is only allowed in return type position for functions and methods.\n../..",
      "timestamp": 1660334438
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  if (n % 11 === 0 && n % 13 !== 0) {\n    count++;\n  }\n  if (n % 11 !== 0 && n % 13 !== 0) {\n    count++;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmptqmjpjtt.js:21:12)\n    at Object.<anonymous> (/tmp/tmptqmjpjtt.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334439
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let result = 0;\n  let count = 0;\n\n  while (n > 0) {\n    if (n % 10 === 7) {\n      count += 1;\n    }\n\n    n /= 10;\n  }\n\n  if (count % 11 === 0 || count % 13 === 0) {\n    result = count;\n  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpc889baag.js:26:12)\n    at Object.<anonymous> (/tmp/tmpc889baag.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334438
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  for (let i = 0; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      return i;\n    }\n  }\n  return 0;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt7g99l3p.js:20:12)\n    at Object.<anonymous> (/tmp/tmpt7g99l3p.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334441
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let counter = 0;\n  while (n > 0 && n % 11 == 0 || n % 13 == 0) {\n    n /= 11;\n    counter += 1;\n  }\n  return counter;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmprhxzaxyr.js:20:12)\n    at Object.<anonymous> (/tmp/tmprhxzaxyr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334440
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return isDivisibleBy11Or13(n) ? 0 :\n      isDivisibleBy11Or13(n - 1) ? 1 :\n          isDivisibleBy11Or13(n - 2) ? 2 : 3\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyx6_gd78.ts(9,10): error TS2304: Cannot find name 'isDivisibleBy11Or13'.\n../../../../tmp/tmpyx6_gd78.ts(10,7): error TS2304: Cannot find name 'isDivisibleBy11Or13'.\n../../../../tmp/tmpyx6_gd78.ts(11,11): error TS2304: Cannot find name 'isDivisibleBy11Or13'.\n",
      "timestamp": 1660334441
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  var result = 0;\n  while (n > 0) {\n    if (n % 11 == 0 || n % 13 == 0) {\n      result += 1;\n    }\n    n /= 10;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmps7ddnzx1.js:22:12)\n    at Object.<anonymous> (/tmp/tmps7ddnzx1.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334441
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const stringNumbers = (`${n}`).split('');\n  const count = 0;\n  for (let i = 0; i < stringNumbers.length; i++) {\n    if (stringNumbers[i] === '7') {\n      count++;\n    }\n    if (stringNumbers[i] === '3' || stringNumbers[i] === '7') {\n      count++;\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkmfjdig0.ts(13,7): error TS2588: Cannot assign to 'count' because it is a constant.\n../../../../tmp/tmpkmfjdig0.ts(16,7): error TS2588: Cannot assign to 'count' because it is a constant.\n",
      "timestamp": 1660334441
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count: number;\n  if (n <= 0) return 0;\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 !== 0 && n % 13 !== 0) count = 2;\n  if (n % 11 !== 0) count = 1;\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpwovbffpr.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwovbffpr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334441
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    if (n <= 0) return 0;\n    if (n % 11 === 0) return 1;\n    if (n % 13 === 0) return 2;\n    return fizz_buzz(n - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpdozkejbx.js:20:12)\n    at Object.<anonymous> (/tmp/tmpdozkejbx.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334442
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let counter = 0;\n  let temp = 0;\n  while (n >= 100 && counter <= 2) {\n    temp = n % 10;\n    if (temp == 7 || temp == 11 || temp == 13) {\n      n = (n - temp) / 100;\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return counter;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbgin21j4.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbgin21j4.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334442
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let result: number;\n  if (n <= 0) {\n    return 0;\n  }\n\n  //Check if n is divisible by either 11 or 13.\n  if (n % 11 === 0 || n % 13 === 0) {\n    return n % 11 === 0 ? 11 : 13;\n  }\n\n  //If n is divisible by both 11 and 13, subtract from 11 to get the correct remainder.\n  result = n % 11;\n  if (result === 0 || result === 11) {\n    result = result === 0 ? 0 : 11 - result;\n  }\n\n  //If n is divisible by both 11 and 13, subtract from 13 to get correct remainder.\n  result = result % 13;\n  if (result === 0 || result === 13) {\n    result = result === 0 ? 0 : 13 - result;\n  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpnhng4vcc.js:32:12)\n    at Object.<anonymous> (/tmp/tmpnhng4vcc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334441
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    if (n === 0 || n === 1) {\n        return n\n    }\n    if (n % 10 === 11 || n % 10 === 13) {\n        return n\n    }\n    if (n % 100 === 111) {\n        return n / 100\n    }\n    return n % 100\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n50\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp6l43y4z8.js:23:12)\n    at Object.<anonymous> (/tmp/tmp6l43y4z8.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 50,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334442
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    let ret: number = 0;\n    let base: number[] = [1, 3, 7, 9, 10, 11, 13];\n    for (let i = 0; i < n; i += 1) {\n        let digit = parseInt(Math.pow(base[i], n).valueOf() / Math.pow(10, i).valueOf());\n        ret += digit;\n    }\n    return ret;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpghutjgbg.ts(12,30): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660334441
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 11) {\n    return n;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return n + 1;\n  }\n\n  return n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n50\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp_e6c0k7o.js:20:12)\n    at Object.<anonymous> (/tmp/tmp_e6c0k7o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 50,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334442
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let divisor: number = null;\n\n  if (n % 11 === 0 || n % 13 === 0) {\n    divisor = 11\n  } else if (n % 11 > 0 || n % 13 > 0) {\n    divisor = 13\n  } else {\n    divisor = 11\n  }\n\n  let count = 0;\n\n  while (n) {\n    if (n % divisor === 0) count++;\n    n /= divisor;\n  }\n\n  return count;\n}\n</code>\n<|/ a tags=javascript,fizzbuzz,loops |>\n<| a tags=javascript,fizzbuzz,loops |>\nUsing a recursive function makes this a lot easier especially when you're starting with a large number.\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfffbz1nv.ts(28,2): error TS1110: Type expected.\n../../../../tmp/tmpfffbz1nv.ts(28,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfffbz1nv.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmpfffbz1nv.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpfffbz1nv.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmpfffbz1nv.ts(30,6): error TS1005: ';' expected.\n../../../../tmp/tmpfffbz1nv.ts(30,38): error TS1109: Expression expected.\n../../../../tmp/tmpfffbz1nv.ts(31,7): error TS1005: ';' expected.\n../../../../tmp/tmpfffbz1nv.ts(31,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpfffbz1nv.ts(31,34): error TS1005: '(' expected.\n../../../../tmp/tmpfffbz1nv.ts(31,39): error TS1005: ';' expected.\n../../../../tmp/tmpfffbz1nv.ts(31,41): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpfffbz1nv.ts(31,45): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpfffbz1",
      "timestamp": 1660334442
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  while (n) {\n    if (n % 11 === 0 || n % 13 === 0) {\n      count++;\n    }\n    n = Math.floor(n / 10);\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpood_5359.js:22:12)\n    at Object.<anonymous> (/tmp/tmpood_5359.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334442
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  n |= 0;\n  n = n - n % 11;\n  n = n - n % 13;\n  n = n - n % 17;\n  n = n - n % 19;\n  return n;\n}\n</code>\nNow you can use a loop to calculate the number of times each number goes into each of the divisible by 11, 13, and 17 cases. For example (for the case where n = 25):\n<code>\nfor (let i = 0; i <= n; ++i) {\n  const isDivisibleBy11 = i % 11 === 0;\n  const isDivisibleBy13 = i % 13 === 0;\n  const isDivisibleBy17 = i % 17 === 0;\n\n  const timesDivisibleBy11 = Math.ceil(i/11);\n  const timesDivisibleBy13 = Math.ceil(i/13);\n  const timesDivisibleBy17 = Math.ceil(i/17);\n\n  const totalTimes = isDivisibleBy11 + timesDivisibleBy13 + timesDivisibleBy17;\n  console.log(`Case ${i}: ${totalTimes}`);\n}\n</code>\nOutput:\n<code>\nCase 1: 1\nCase 2: 1\nCase 3: 2\nCase 4: 3\nCase 5: 3\nCase 6: 4\nCase 7: 5\nCase 8: 6\nCase 9: 6\nCase 10: 7\nCase 11: 8\nCase 12: 9\nCase 13: 9\nCase 14: 10\nCase 15: 10\nCase 16: 11\nCase 17: 12\nCase 18: 13\nCase 19: 13\nCase 20: 14\nCase 21: 14\nCase 22: 15\nCase 23: 15\nCase 24: 16\nCase 25: 18\n</code>\nHere's a Working Sample StackBlitz for your ref.\n<|/ a |>\n<| c |>\nThis is actually a very interesting solution which I wouldn't have thought of without seeing it. I really appreciate the help. :)\n<|/ c |>\n<| a |>\nHere's a more scalable solution:\n<code>\nconst fizzBuzz = n =>\n  // All possible combinations of 'Fizz' and 'Buzz'\n  ['Fizz', 'Buzz'].map(\n    // Add the number of 'Fizz' occurrences up to the number of 'Buzz' occurrences to the number\n    f => n + Math.ceil(n%f === 0)\n  )\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjs7cfqa_.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmpjs7cfqa_.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpjs7cfqa_.ts(17,1): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpjs7cfqa_.ts(17,5): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpjs7cfqa_.ts(17,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpjs7cfqa_.ts(17,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpjs7cfqa_.ts(17,17): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpjs7cfqa_.ts(17,19): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpjs7cfqa_.ts(17,24): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpjs7cfqa_.ts(17,27): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpjs7cfqa_.ts(17,37): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpjs7cfqa_.ts(17,41): error TS1434: Unexpected keyword or identifie",
      "timestamp": 1660334442
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 11) return 0;\n  if (n % 11 === 0) return n / 11 | 0;\n  return n / 13 | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpso5sejc_.js:18:12)\n    at Object.<anonymous> (/tmp/tmpso5sejc_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334442
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n\tif (n === 0) return 0;\n\telse if (n === 1) return 1;\n\telse if (n === 11 || n === 13) return 1;\n\telse if (n === 12 || n === 14) return 2;\n\telse return 3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp3qp7uk3t.js:23:12)\n    at Object.<anonymous> (/tmp/tmp3qp7uk3t.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334442
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  const bigger = (n % 11 + n % 13) % 2 == 0;\n  const even = (n % 11 + n % 13) % 2 == 0;\n  while (n) {\n    if (bigger && !even) {\n      count += 1;\n    }\n    if (even && !bigger) {\n      count += 1;\n    }\n    n /= 11;\n    n /= 13;\n    n /= 2;\n  }\n  return count;\n}\n\nconst fizz_buzz_count = (number: number) => fizz_buzz(number);\nconst fizz_buzz_count_2 = (number: number) => fizz_buzz(number) / 10;\n\nconsole.log(\n  `Fizz Buzz Count: ${fizz_buzz_count(71)} \\n Fizz Buzz Count 2: ${fizz_buzz_count_2(71)}`\n);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp8obclaxa.js:32:12)\n    at Object.<anonymous> (/tmp/tmp8obclaxa.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Fizz Buzz Count: 0 \n Fizz Buzz Count 2: 0\n",
      "timestamp": 1660334442
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let output: number = null;\n  const divisors = [11, 13];\n  for (let i = 0; i < divisors.length; i += 1) {\n    if (n % divisors[i] === 0) {\n      if (output === null) {\n        output = divisors[i];\n      } else {\n        output += divisors[i];\n      }\n    }\n  }\n  return output;\n}\n\nconst fizz_buzz_numbers = {\n  0: 0,\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9,\n  10: 10,\n  11: 11,\n  12: 12,\n  13: 13,\n  14: 14,\n  15: 15,\n  16: 16,\n  17: 17,\n  18: 18,\n  19: 19,\n  20: 20,\n  21: 21,\n  22: 22,\n  23: 23,\n  24: 24,\n  25: 25,\n  26: 26,\n  27: 27,\n  28: 28,\n  29: 29,\n  30: 30,\n  31: 31,\n  32: 32,\n  33: 33,\n  34: 34,\n  35: 35,\n  36: 36,\n  37: 37,\n  38: 38,\n  39: 39,\n  40: 40,\n  41: 41,\n  42: 42,\n  43: 43,\n  44: 44,\n  45: 45,\n  46: 46,\n  47: 47,\n  48: 48,\n  49: 49,\n  50: 50,\n  51: 51,\n  52: 52,\n  53: 53,\n  54: 54,\n  55: 55,\n  56: 56,\n  57: 57,\n  58: 58,\n  59: 59,\n  60: 60,\n  61: 61,\n  62: 62,\n  63: 63,\n  64: 64,\n  65: 65,\n  66: 66,\n  67: 67,\n  68: 68,\n  69: 69,\n  70: 70,\n  71: 71,\n  72: 72,\n  73: 73,\n  74: 74,\n  75: 75,\n  76: 76,\n  77: 77,\n  78: 78,\n  79: 79,\n  80: 80,\n  81: 81,\n  82: 8\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpaaafm76t.ts(107,1): error TS1005: ',' expected.\n../../../../tmp/tmpaaafm76t.ts(107,13): error TS1005: ':' expected.\n../../../../tmp/tmpaaafm76t.ts(107,20): error TS1005: ',' expected.\n../../../../tmp/tmpaaafm76t.ts(107,25): error TS1005: ',' expected.\n../../../../tmp/tmpaaafm76t.ts(108,7): error TS1005: ':' expected.\n../../../../tmp/tmpaaafm76t.ts(108,38): error TS1005: ',' expected.\n../../../../tmp/tmpaaafm76t.ts(111,10): error TS1005: ':' expected.\n../../../../tmp/tmpaaafm76t.ts(111,17): error TS1005: ',' expected.\n../../../../tmp/tmpaaafm76t.ts(112,7): error TS1005: ',' expected.\n../../../../tmp/tmpaaafm76t.ts(112,28): error TS1005: ',' expected.\n../../../../tmp/tmpaaafm76t.ts(121,1): error TS1128: Declaration or statement expected.\n",
      "timestamp": 1660334442
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) count++;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpep0v3r3f.js:19:12)\n    at Object.<anonymous> (/tmp/tmpep0v3r3f.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334442
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    let numbers = Array.from({length: n + 1}, (_, index) => index);\n    let i = 0;\n    while (i < numbers.length && numbers[i] <= n) {\n        numbers[i] = numbers[i] > numbers[i - 1] ? numbers[i] - 1 : numbers[i - 1] + 1;\n        i++;\n    }\n    return numbers[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe recursive function should use numbers array as the input parameter and return numbers[i] as the output\n<|/ c |>\n<| a tags=fizzbuzz,fizzbuzz-buzz,functional-programming,javascript |>\nRecursive version\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppe6e3ead.ts(17,2): error TS1110: Type expected.\n../../../../tmp/tmppe6e3ead.ts(17,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmppe6e3ead.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmppe6e3ead.ts(18,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmppe6e3ead.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmppe6e3ead.ts(19,7): error TS1109: Expression expected.\n../../../../tmp/tmppe6e3ead.ts(20,5): error TS1005: ';' expected.\n../../../../tmp/tmppe6e3ead.ts(20,31): error TS1005: '(' expected.\n../../../../tmp/tmppe6e3ead.ts(20,35): error TS1435: Unknown keyword or identifier. Did you mean 'number'?\n../../../../tmp/tmppe6e3ead.ts(20,56): error TS1005: ';' expected.\n../../../../tmp/tmppe6e3ead.ts(20,62): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppe6e3ead.ts(20,72): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmppe6e3ead.ts(20,101): error TS1005: ';' expected.\n../../../../tmp/tmppe6e3ead.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmppe6e3ead.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmppe6e3ead.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmppe6e3ead.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmppe6e3ead.ts(22,69): error TS1109: Expression expected.\n../../../../tmp/tmppe6e3ead.ts(23,11): error TS1005: ';' expected.\n../../../../tmp/tmppe6e3ead.ts(26,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334442
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n\tconst divisibleBy11 = n % 11 === 0;\n\tconst divisibleBy13 = n % 13 === 0;\n\n\tif (divisibleBy11 || divisibleBy13) {\n\t\treturn 1;\n\t} else {\n\t\treturn 0;\n\t}\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp_37_5wdk.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_37_5wdk.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334442
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return Math.ceil(n / 11) * 11 + Math.ceil(n / 13) * 13;\n}\n</code>\n<|/ a tags=algorithm,math,javascript |>\n<| c |>\nNice!  I like this answer.  I hadn't thought of that.  Good answer\n<|/ c |>\n<| c |>\nThis works. Although `fizzBuzz(n)` is shorter, since it only uses `Math.ceil` and `11` and `13`. However, if you wanted to use `Math.ceil` you could replace `Math.ceil(n / 11)` with `Math.ceil(n / 11) % 11`, but this doesn't seem to be an advantage.\n<|/ c |>\n<| a dscore=2 tags=algorithm,math,javascript |>\nYou could use the modulo operator on numbers to check if the number is divisible by 11, and if so, increment a counter:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkx9d2c7r.ts(11,2): error TS1110: Type expected.\n../../../../tmp/tmpkx9d2c7r.ts(11,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpkx9d2c7r.ts(12,2): error TS1109: Expression expected.\n../../../../tmp/tmpkx9d2c7r.ts(12,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpkx9d2c7r.ts(13,2): error TS1109: Expression expected.\n../../../../tmp/tmpkx9d2c7r.ts(13,7): error TS1109: Expression expected.\n../../../../tmp/tmpkx9d2c7r.ts(14,8): error TS1005: ';' expected.\n../../../../tmp/tmpkx9d2c7r.ts(14,10): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpkx9d2c7r.ts(14,20): error TS1005: ';' expected.\n../../../../tmp/tmpkx9d2c7r.ts(14,31): error TS1005: ';' expected.\n../../../../tmp/tmpkx9d2c7r.ts(14,31): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpkx9d2c7r.ts(14,67): error TS1002: Unterminated string literal.\n../../../../tmp/tmpkx9d2c7r.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmpkx9d2c7r.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpkx9d2c7r.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmpkx9d2c7r.ts(16,7): error TS1109: Expression expected.\n../../../../tmp/tmpkx9d2c7r.ts(17,6): error TS1005: ';' expected.\n../../../../tmp/tmpkx9d2c7r.ts(17,22): error TS1443: Module declaration names may only use ' or \" quoted strings.\n../../../../tmp/tmpkx9d2c7r.ts(17,36): error TS1228: A type predicate is only allowed in return type position for functions and methods.\n../../../../tmp/tmpkx9d2c7r.ts(17,54): error TS1005: ';' expected.\n../../../../tmp/tmpkx9d2c7r.ts(17,57): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpkx9d2c7r.ts(17,67): error TS1443: Module declaration names may only use ' or \" quoted strings.\n../../../../tmp/tmpkx9d2c7r.ts(17,83): error TS1443: Module declaration names may only use ' or \" quoted strings.\n../../../../tmp/tmpkx9d2c7r.ts(17,107): error TS1109: Expression expected.\n../../../../tmp/tmpkx9d2c7r.ts(17,",
      "timestamp": 1660334444
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let result = 0;\n  if (n > 1000) {\n    if (n % 11 === 0) result += 1;\n    if (n % 13 === 0) result += 1;\n  }\n\n  if (n <= 1000) {\n    if (n % 11 === 0) result += 1;\n    if (n % 13 === 0) result += 1;\n    if (n % 3 === 0) result += 1;\n  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmphpvz2pmi.js:31:12)\n    at Object.<anonymous> (/tmp/tmphpvz2pmi.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334444
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count: number;\n\n  if (n < 10) {\n    return n;\n  }\n\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 0;\n  }\n\n  count = (10 * n) % 11;\n  if (count >= 10) {\n    count = count % 10;\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(78));\nconsole.log(fizz_buzz(79));\nconsole.log(fizz_buzz(50));</code>\n<|/ a tags=fizzbuzz,javascript |>\n<| a dscore=1 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3urae6pl.ts(28,29): error TS1110: Type expected.\n../../../../tmp/tmp3urae6pl.ts(28,30): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3urae6pl.ts(29,2): error TS1109: Expression expected.\n../../../../tmp/tmp3urae6pl.ts(29,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3urae6pl.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmp3urae6pl.ts(30,6): error TS1005: ';' expected.\n../../../../tmp/tmp3urae6pl.ts(30,16): error TS1109: Expression expected.\n../../../../tmp/tmp3urae6pl.ts(32,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334444
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    if (n % 11 === 0 || n % 13 === 0) {\n        return 0;\n    }\n\n    return 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpv7yv3fay.js:17:12)\n    at Object.<anonymous> (/tmp/tmpv7yv3fay.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  for (let i = n; i > 0; i /= 11) {\n    for (let j = i; j > 0; j /= 13) {\n      count += Math.ceil(i/j);\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nInfinity\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpyckjpqvu.js:20:12)\n    at Object.<anonymous> (/tmp/tmpyckjpqvu.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: Infinity,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return Number.isInteger(n) && n < 100 && n % 11 === 0 ? 0 : Number.isInteger(n) && n < 100 && n % 13 === 0 ? 2 : 3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpb6llfhys.js:14:12)\n    at Object.<anonymous> (/tmp/tmpb6llfhys.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return n\n    .toString()\n    .split('')\n    .filter(d => d === '7' || d === '8' || d === '9' || d === '4')\n    .length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpwp0folpr.js:20:12)\n    at Object.<anonymous> (/tmp/tmpwp0folpr.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let i = 0;\n  const is11 = isDivisBy11(n);\n  while (i < n) {\n    if (is11) {\n      i += 3;\n    } else {\n      i += 1;\n    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn7vstqd3.ts(10,16): error TS2304: Cannot find name 'isDivisBy11'.\n",
      "timestamp": 1660334445
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return (\n    n % 11 === 0 ? 0 :\n    n % 13 === 0 ? 2 :\n    n % 17 === 0 ? 3 :\n    n % 19 === 0 ? 4 :\n    1) % 10 === 0 ? 5 : 6\n  )\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfaeaox9c.ts(15,3): error TS1128: Declaration or statement expected.\n",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  let mod11 = 0;\n  let mod13 = 0;\n  if (n % 11 === 0) {\n    mod11 = n % 11;\n    count += 1;\n  }\n  if (n % 13 === 0) {\n    mod13 = n % 13;\n    count += 1;\n  }\n  if (mod11 === mod13) return count;\n  return 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpm4fadw6i.js:28:12)\n    at Object.<anonymous> (/tmp/tmpm4fadw6i.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if(n%11==0) return '11';\n  if(n%13==0) return '13';\n  return '0';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp18uufxzh.ts(9,15): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp18uufxzh.ts(10,15): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp18uufxzh.ts(11,3): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n === 0 || n === 1) return 0;\n  if (n % 11 === 0) return 1;\n  if (n % 13 === 0) return 2;\n  return 3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpcjb2v5x1.js:20:12)\n    at Object.<anonymous> (/tmp/tmpcjb2v5x1.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return Math.ceil(n/11) < Math.ceil(n/13) ? 0 : 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpfjihdg6b.js:14:12)\n    at Object.<anonymous> (/tmp/tmpfjihdg6b.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n % 11 == 0) return 1;\n  if (n % 13 == 0) return 2;\n  return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmppbv5ercz.js:20:12)\n    at Object.<anonymous> (/tmp/tmppbv5ercz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    while (n > 0 && n % 11 === 0 || n % 13 === 0) {\n        n /= 11;\n        ++count;\n    }\n    return count;\n}\n</code>\nThis solution is similar to Eric J's solution, which is based on a similar technique described in the article he linked to. I also added a comment to the code explaining what it does. The main difference is that this code takes advantage of the modulo operator, which is a very useful tool in many programming situations, as it will allow you to find an increment that will \"undo\" the modulo if you add it to the increment counter. In most cases, this is desirable because you don't want to be dealing with very large numbers where you will encounter a \"division by 0\" error as you increase the increment number.\n<|/ a tags=numbers,math,algorithm,fizzbuzz dscore=1 |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuvdnfl6u.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmpuvdnfl6u.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpuvdnfl6u.ts(17,1): error TS1435: Unknown keyword or identifier. Did you mean 'this'?\n../../../../tmp/tmpuvdnfl6u.ts(17,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuvdnfl6u.ts(17,15): error TS1228: A type predicate is only allowed in return type position for functions and methods.\n../../../../tmp/tmpuvdnfl6u.ts(17,18): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuvdnfl6u.ts(17,26): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuvdnfl6u.ts(17,29): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuvdnfl6u.ts(17,34): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuvdnfl6u.ts(17,482): error TS1005: ';' expected.\n../../../../tmp/tmpuvdnfl6u.ts(17,484): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpuvdnfl6u.ts(17",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 11) return 1;\n  if (n < 13) return fizz_buzz(n - 3) + 1;\n  return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp3ciwgljd.js:19:12)\n    at Object.<anonymous> (/tmp/tmp3ciwgljd.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 0 || n > 1000) {\n    return -1;\n  }\n  const d = n % 11;\n  const e = n % 13;\n  return e === 0 || d !== 0 ? Math.ceil(n) : Math.floor(n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n50\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpbdw52ugc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpbdw52ugc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 50,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  let i;\n  for (i = 0; i < 10; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (n === i) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpdlizl0bi.js:24:12)\n    at Object.<anonymous> (/tmp/tmpdlizl0bi.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334445
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n\tif (n % 11 === 0 || n % 13 === 0) {\n\t\treturn 0;\n\t}\n\treturn 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpevx5ehpi.js:17:12)\n    at Object.<anonymous> (/tmp/tmpevx5ehpi.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334446
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const mod = n % 11;\n  if (mod == 0 || mod == 3) return 1;\n\n  const mod1 = n % 13;\n  if (mod1 == 0 || mod1 == 3) return 2;\n\n  const mod11 = n % 5 + 3;\n  if (mod11 == 0 || mod11 == 3) return 3;\n\n  const mod3 = n % 7 + 3;\n  if (mod3 == 0 || mod3 == 3) return 4;\n\n  return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp_hudyn4n.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_hudyn4n.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334446
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  while (n >= 1000) {\n    count += n % 11;\n    n /= 11;\n  }\n  while (n >= 100) {\n    count += n % 13;\n    n /= 13;\n  }\n  while (n >= 10) {\n    count += n % 7;\n    n /= 7;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpon0tjkjm.js:27:12)\n    at Object.<anonymous> (/tmp/tmpon0tjkjm.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334446
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 13) {\n    return n;\n  } else if (n % 11 === 0) {\n    return n - 11;\n  } else if (n % 13 === 0) {\n    return n - 13;\n  }\n  return -1;\n}\n\nconsole.log(fizz_buzz(50));\nconsole.log(fizz_buzz(78));\nconsole.log(fizz_buzz(79));</code>\n<|/ a tags=javascript,fizzbuzz,recursion,for-loop dscore=0 |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxypzbe85.ts(21,29): error TS1110: Type expected.\n../../../../tmp/tmpxypzbe85.ts(21,30): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpxypzbe85.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmpxypzbe85.ts(22,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpxypzbe85.ts(23,2): error TS1109: Expression expected.\n../../../../tmp/tmpxypzbe85.ts(23,7): error TS1109: Expression expected.\n../../../../tmp/tmpxypzbe85.ts(25,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334446
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n\n  while (n >= 100) {\n    n -= 100;\n    count++;\n  }\n\n  while (n >= 10) {\n    n -= 10;\n    count++;\n  }\n\n  while (n >= 1) {\n    if (n % 11 === 0 || n % 13 === 0) {\n      count++;\n    }\n    n -= 1;\n  }\n\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpukratnk7.js:29:12)\n    at Object.<anonymous> (/tmp/tmpukratnk7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334447
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n % 11 === 0 || n % 13 === 0 ? 0 : fizz_buzz(Math.floor(n / 10)) + (n % 10 === 11 ? 1 : 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpartkh74_.js:17:12)\n    at Object.<anonymous> (/tmp/tmpartkh74_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334448
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 0) return 0;\n  else if (n < 11) return n;\n  else if (n < 13) return n + 1;\n  else return n + 3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n53\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpwy0ugnco.js:21:12)\n    at Object.<anonymous> (/tmp/tmpwy0ugnco.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 53,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334447
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 0 || n % 11 === 0 % 13 === 0) return 0;\n  return n < 12 ? 1 : 2;\n}\n\n<|/ file filename=index.ts dstars=1 ext=.ts |>\nimport BigNumber from 'bignumber.js';\nimport { isBigNumber } from './helpers/isBigNumber';\n\nexport function isPositiveBigNumber(a: any): boolean {\n  if (!isBigNumber(a)) {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return a.gte(0);\n}\n\nexport function isNegativeBigNumber(a: any): boolean {\n  if (!isBigNumber(a)) {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return !a.isNegative();\n}\n\nexport function isFiniteBigNumber(a: any): boolean {\n  if (!isBigNumber(a)) {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return a.isFinite();\n}\n\nexport function isNaNBigNumber(a: any): boolean {\n  if (!isBigNumber(a)) {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return a.isNaN();\n}\n\nexport function toBigNumber(a: any): BigNumber {\n  if (!isBigNumber(a)) {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return a;\n}\n\nexport function toFraction(a: any, digits: number): string {\n  if (!isBigNumber(a)) {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return a.toFraction(digits);\n}\n\nexport function toFractionNumber(a: any, digits: number): number {\n  if (!isBigNumber(a)) {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return a.toFraction(digits).toNumber();\n}\n\nexport function toBase(a: any, base: number): string {\n  if (!isBigNumber(a)) {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return a.toBase(base);\n}\n\nexport function toBaseInverted(a: any, base: number): string {\n  if (!isBigNumber(a)) {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return a.toBase(base).toString(base);\n}\n\nexport function fromNumberToBigNumber(a: number): BigNumber {\n  if (!isFinite(a)) {\n    throw new TypeError('a is not a number');\n  }\n  return new BigNumber(a);\n}\n\nexport function fromNumberToEther(a: number): string {\n  return fromNumberToBigNumber(a).toString(10);\n}\n\nexport function fromNumberToTokens(a: number): string {\n  return fromNumberToBigNumber(a).toString(10).replace(/([a-z])(?=[A-Z])/g, '$1-');\n}\n\nexport function fromNumberToEtherInWei(a\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9b97ey90.ts(13,3): error TS1110: Type expected.\n../../../../tmp/tmp9b97ey90.ts(13,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp9b97ey90.ts(96,1): error TS1005: ',' expected.\n../../../../tmp/tmp9b97ey90.ts(96,9): error TS1359: Identifier expected. 'var' is a reserved word that cannot be used here.\n",
      "timestamp": 1660334448
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 0 || n % 11 === 0 || n % 13 === 0) return 0;\n  return 1 + (n % 11) === (n % 13) + 1 ? 2 : 3;\n}\n\nconst fizzBuzz = (n: number): string =>\n  n.toString().padStart(3, \"0\").split(\"\").reduce((r, v, i) =>\n    i % 3 ? `${r} ${fizz_buzz(v)}` : `${r} ${fizz_buzz(v)}`,\n  \"\");\n\nconst fizzBuzz1 = (\n  n: number | string,\n  paddingLen: number\n): string =>\n  typeof n === \"string\"\n    ? n.padStart(paddingLen, \"0\")\n    : n.toString().padStart(paddingLen, \"0\").split(\"\").reduce((r, v, i) =>\n        i % 3 ? `${r} ${fizz_buzz(v)}` : `${r} ${fizz_buzz(v)}`,\n      \"\");\n\nconsole.log(fizzBuzz(50));\nconsole.log(fizzBuzz(78));\nconsole.log(fizzBuzz(79));\n\nconsole.log(fizzBuzz1(50, 3));\nconsole.log(fizzBuzz1(78, 3));\nconsole.log(fizzBuzz1(79, 3));</code>\n\nA more robust version that handles more edge cases:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9pzyksav.ts(34,32): error TS1110: Type expected.\n../../../../tmp/tmp9pzyksav.ts(34,33): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp9pzyksav.ts(36,1): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9pzyksav.ts(36,3): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9pzyksav.ts(36,8): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9pzyksav.ts(36,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9pzyksav.ts(36,23): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9pzyksav.ts(36,28): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9pzyksav.ts(36,36): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9pzyksav.ts(36,41): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp9pzyksav.ts(38,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334448
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 13) return n >= 11 ? 0 : n % 11;\n  if (n < 9) return n >= 10 ? 0 : n % 13 || 0;\n  if (n === 9) return 1;\n  return n >= 11 ? 1 : n >= 13 ? 2 : n % 15 || 0;\n}\n\nexport function parseIntAndFormat(str: string, limit: number) {\n  const n = Number.parseInt(str, 10);\n  if (n === limit || n <= 0) {\n    return NaN;\n  }\n  return n;\n}\n\nexport function formatTime(seconds: number): string {\n  const m = Math.floor(seconds / 60);\n  const s = seconds % 60;\n  if (s < 10) {\n    return \"0\" + s;\n  }\n  return \"\" + m + \":\" + (s < 10 ? \" 0\" : \"\") + s;\n}\n\nexport function formatEther(value: number): string {\n  const gwei = value * 1e-18;\n  return formatNumber(gwei, 18, 4) + \"ETH\";\n}\n\nexport function formatTimeShort(seconds: number): string {\n  const m = Math.floor(seconds / 60);\n  const s = seconds % 60;\n  if (s < 10) {\n    return \"0\" + s;\n  }\n  return \"\" + m + \":\" + (s < 10 ? \" 0\" : \"\") + s;\n}\n\nexport function formatNumber(value: number, digits: number, decimals?: number) {\n  const p = Math.pow(10, decimals);\n  return Math.floor((value / p) * p) / p;\n}\n\nexport const isWeb3 = () => typeof window.web3 !== \"undefined\";\nexport const isAddress = (value: string) => !!/^0x[a-fA-F0-9]{40}$/.test(value);\nexport const isAddressInNetwork = (network: string, address: string) =>\n  !!(isAddress(address) && isAddressInNetwork(network, address));\n\nexport const getCurrentDate = () => (new Date()).toISOString();\n\nexport const getDaysAgo = (daysAgo: number) => {\n  const now = new Date();\n  const then = new Date(now.getFullYear(), now.getMonth(), now.getDate() + daysAgo);\n  const diff = now.getTime() - then.getTime();\n  const days = Math.floor(diff / 86400000);\n  return days;\n};\n\nexport const getTransactionIdFromLogs = (logs) => {\n  const foundLog = logs.find((item) => item.event === \"transactionHash\");\n  if (foundLog) {\n    return foundLog.args.transactionHash;\n  }\n  return null;\n};\n\nexport const getNetworkName = () => {\n  const address = isAddressInNetwork(\"kovan\", \"0xb16e65a54e3ad799e70949c8c6be033f0f96e53f\");\n  const networkId = isAddressInNetwork(\"privatenet\", \"0xb16e65a54e3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6paunpxj.ts(76,68): error TS1002: Unterminated string literal.\n../../../../tmp/tmp6paunpxj.ts(77,1): error TS1005: ',' expected.\n../../../../tmp/tmp6paunpxj.ts(77,9): error TS1005: ',' expected.\n../../../../tmp/tmp6paunpxj.ts(93,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334448
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n === 0) return 0;\n  if (n % 11 === 0) return 1;\n  if (n % 13 === 0) return 2;\n  return 3;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpru1j_640.js:20:12)\n    at Object.<anonymous> (/tmp/tmpru1j_640.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const isDivisibleBy11 = n % 11 === 0;\n  const isDivisibleBy13 = n % 13 === 0;\n  return isDivisibleBy11 || isDivisibleBy13 ? 0 : isDivisibleBy13 ? 2 : 3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpili4_vv1.js:16:12)\n    at Object.<anonymous> (/tmp/tmpili4_vv1.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  for (let i = 11; i <= 13; i++) {\n    if (n % i === 0) return i === 7;\n  }\n  return n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9ndl18g_.ts(10,22): error TS2322: Type 'boolean' is not assignable to type 'number'.\n",
      "timestamp": 1660334448
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count: number;\n  let arr: number[] = [];\n\n  //If the number is divisible by 3, then add 3 as another digit in the array.\n  if (n % 3 === 0) {\n    arr.push(3);\n    n = n / 3;\n  }\n\n  //If the number is divisible by 5, then add 5 as another digit in the array.\n  if (n % 5 === 0) {\n    arr.push(5);\n    n = n / 5;\n  }\n\n  //If the number is divisible by 7, then add 7 as another digit in the array.\n  if (n % 7 === 0) {\n    arr.push(7);\n    n = n / 7;\n  }\n\n  //If the number is divisible by 11, then add 11 as another digit in the array.\n  if (n % 11 === 0) {\n    arr.push(11);\n    n = n / 11;\n  }\n\n  //If the number is divisible by 13, then add 13 as another digit in the array.\n  if (n % 13 === 0) {\n    arr.push(13);\n    n = n / 13;\n  }\n\n  //If the number is divisible by 17, then add 17 as another digit in the array.\n  if (n % 17 === 0) {\n    arr.push(17);\n    n = n / 17;\n  }\n\n  //If the number is divisible by 19, then add 19 as another digit in the array.\n  if (n % 19 === 0) {\n    arr.push(19);\n    n = n / 19;\n  }\n\n  //If the number is divisible by 23, then add 23 as another digit in the array.\n  if (n % 23 === 0) {\n    arr.push(23);\n    n = n / 23;\n  }\n\n  //If the number is divisible by 29, then add 29 as another digit in the array.\n  if (n % 29 === 0) {\n    arr.push(29);\n    n = n / 29;\n  }\n\n  //If the number is divisible by 33, then add 33 as another digit in the array.\n  if (n % 33 === 0) {\n    arr.push(33);\n    n = n / 33;\n  }\n\n  //If the number is divisible by 37, then add 37 as another digit in the array.\n  if (n % 37 === 0) {\n    arr.push(37);\n    n = n / 37;\n  }\n\n  //If the number is divisible by 41, then add 41 as another digit in the array.\n  if (n % 41 === 0) {\n    arr.push(41);\n    n = n / 41;\n  }\n\n  //If the number is divisible by 43, then add 43 as another digit in the array.\n  if (n % 43 === 0) {\n    arr.push(43);\n    n = n / 43;\n  }\n\n  //If the number is divisible by 47, then add 47 as another digit in the array.\n  if (n % 47 === 0) {\n    arr.push(47);\n    n = n / 47;\n  }\n\n  //If the number is divisible by 53, then add 53 as another digit in the array.\n  if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6p1mgddz.ts(98,9): error TS1005: ')' expected.\n../../../../tmp/tmp6p1mgddz.ts(114,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334449
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return ((n % 11) == 0 || (n % 13) == 0) ? 1 : 0;\n}\n\nconsole.log(fizz_buzz(50));\nconsole.log(fizz_buzz(78));\nconsole.log(fizz_buzz(79));</code>\n<|/ a |>\n<| c |>\nIt will work in most cases but not all the time.\n<|/ c |>\n<| c |>\ncan you show an example where it fails?\n<|/ c |>\n<| c |>\nTry it on the number 79.\n<|/ c |>\n<| c |>\nit also works on 79 in my machine. Can you post the example where it fails?\n<|/ c |>\n<| c |>\nYou say it works in your machine but not in mine. I was expecting you might have tested it in some other environment than mine.\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk02lxop6.ts(14,29): error TS1110: Type expected.\n../../../../tmp/tmpk02lxop6.ts(14,30): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpk02lxop6.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmpk02lxop6.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpk02lxop6.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmpk02lxop6.ts(16,7): error TS1109: Expression expected.\n../../../../tmp/tmpk02lxop6.ts(17,4): error TS1005: ';' expected.\n../../../../tmp/tmpk02lxop6.ts(17,22): error TS1005: ';' expected.\n../../../../tmp/tmpk02lxop6.ts(17,28): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpk02lxop6.ts(17,32): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpk02lxop6.ts(17,36): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpk02lxop6.ts(17,40): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpk02lxop6.ts(18,1): error TS1003: Identifier expect",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    let counter = 0;\n    while (n > 100) {\n        if (n % 11 == 0 && n % 13 == 0) {\n            counter += 1;\n        }\n        n = n / 10;\n    }\n    return counter;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpn0j4ybwx.js:22:12)\n    at Object.<anonymous> (/tmp/tmpn0j4ybwx.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10 && n % 100 >= 13) return 4;\n  return Math.min(5, n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp_jhufo1n.js:24:12)\n    at Object.<anonymous> (/tmp/tmp_jhufo1n.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 1 || n > 100) {\n    throw new RangeError(\"Invalid number\");\n  }\n\n  if (n % 11 === 0 || n % 13 === 0) {\n    return n;\n  }\n\n  return fizz_buzz(n / 11) + fizz_buzz(n / 13);\n}\n\nexport const fizz_buzz_five = fizz_buzz(5);\nexport const fizz_buzz_ten = fizz_buzz(10);\nexport const fizz_buzz_nine = fizz_buzz(9);\nexport const fizz_buzz_thirty = fizz_buzz(30);\nexport const fizz_buzz_hundred = fizz_buzz(100);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "(node:32038) Warning: To load an ES module, set \"type\": \"module\" in the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...` to show where the warning was created)\n/tmp/tmpcxtfmphn.js:17\nexport const fizz_buzz_five = fizz_buzz(5);\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    let count = 0;\n    while (n > 1) {\n        if (n % 11 === 0 || n % 13 === 0) {\n            ++count;\n        }\n        n /= 10;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpsuipphap.js:22:12)\n    at Object.<anonymous> (/tmp/tmpsuipphap.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n <= 0) {\n    return '';\n  }\n  \n  let count = 0;\n  let remainder: number = 0;\n  \n  for (let i = n; i > 0; i /= 10) {\n    let digit = i % 10;\n    count += digit > 0 ? 1 : 0;\n    remainder = i;\n  }\n  \n  return count > 0 ? count : n % 11 === 0 ? 11 : n % 13 === 0 ? 13 : remainder;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyc3dip0z.ts(10,5): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  while (n % 11 == 0 || n % 13 == 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp91jnisp0.js:20:12)\n    at Object.<anonymous> (/tmp/tmp91jnisp0.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334240
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 13) {\n    return 1;\n  } else if (n < 17) {\n    return 2;\n  } else if (n < 19) {\n    return 3;\n  } else if (n < 23) {\n    return 4;\n  } else {\n    return 5;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpstwe3828.js:28:12)\n    at Object.<anonymous> (/tmp/tmpstwe3828.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const numStr = n.toString();\n  const numArr = numStr.split('');\n  const nLength = numArr.length;\n  let index = 0;\n  for (let i = 0; i < nLength; ++i) {\n    if (numArr[i] === '0') {\n      index = i + 1;\n      break;\n    }\n  }\n\n  let count = 0;\n  for (let i = index; i < nLength; ++i) {\n    if (numArr[i] === '7') {\n      count++;\n    }\n  }\n\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmph75i1p2z.js:31:12)\n    at Object.<anonymous> (/tmp/tmph75i1p2z.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 0 || n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmps5jwk84c.js:16:12)\n    at Object.<anonymous> (/tmp/tmps5jwk84c.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n === 0) return 0;\n\n  const i = Math.floor(n);\n  const remainder = n - i;\n  if (i % 11 === 0 || i % 13 === 0) return 1;\n  return fizz_buzz(remainder);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpgc6ir3tf.js:21:12)\n    at Object.<anonymous> (/tmp/tmpgc6ir3tf.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 0) return 0;\n  if (n < 9) return 1;\n  if (n % 11 === 0) return 3;\n  if (n % 13 === 0) return 2;\n  return 4;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpe9k6s4az.js:22:12)\n    at Object.<anonymous> (/tmp/tmpe9k6s4az.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n % 11 === 0 || n % 13 === 0) return 1;\n  else return 0;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpcg1wb128.js:18:12)\n    at Object.<anonymous> (/tmp/tmpcg1wb128.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334449
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n <= 0) {\n    return 0;\n  } else if (n % 11 === 0) {\n    return 1;\n  } else if (n % 13 === 0) {\n    return 2;\n  } else {\n    return 3;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp65knspch.js:25:12)\n    at Object.<anonymous> (/tmp/tmp65knspch.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334450
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 11 || n % 11 === 0) return 1;\n  if (n < 13 || n % 13 === 0) return 3;\n  return 0;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpf_r27aa0.js:19:12)\n    at Object.<anonymous> (/tmp/tmpf_r27aa0.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334451
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const remainder = n % 11;\n  if (remainder === 0 || remainder === 11) {\n    return `${n}.0`;\n  }\n  const nextN = (n / 10) | 0;\n  return fizz_buzz(nextN) + (n % 10 === 7 ? ` 7.0` : ` ${n % 10}.0`);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp99hc923e.ts(11,5): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp99hc923e.ts(14,3): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334451
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  n += n; // coerce to integer\n  n -= n % 11; // n is a multiple of 11\n  n -= n % 13; // n is a multiple of 13\n\n  while (n > 0) {\n    count += n % 10 === 7 ? 1 : 0;\n    n /= 10;\n  }\n\n  return count;\n}\n\nconsole.log(fizz_buzz(78));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp32w2h0dh.js:24:12)\n    at Object.<anonymous> (/tmp/tmp32w2h0dh.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "0\n",
      "timestamp": 1660334451
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n > 100) {\n    return fizz_buzz(n / 10);\n  }\n  if (n % 10 === 7) {\n    return 1;\n  }\n  if (n % 10 === 8) {\n    return 2;\n  }\n  if (n % 10 === 9 || n % 10 === 11 || n % 10 === 12) {\n    return 3;\n  }\n  if (n % 10 === 1) {\n    return 4;\n  }\n  if (n % 10 === 2) {\n    return 5;\n  }\n  if (n % 10 === 3 || n % 10 === 4 || n % 10 === 5 || n % 10 === 6 || n % 10 === 7 || n % 10 === 8 || n % 10 === 9 || n % 10 === 10 || n % 10 === 11 || n % 10 === 12) {\n    return 6;\n  }\n  if (n % 10 === 13 || n % 10 === 14 || n % 10 === 15 || n % 10 === 16 || n % 10 === 17 || n % 10 === 18 || n % 10 === 19 || n % 10 === 20 || n % 10 === 21 || n % 10 === 22 || n % 10 === 23 || n % 10 === 24 || n % 10 === 25) {\n    return 7;\n  }\n  return 8;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpvhth_v_x.js:38:12)\n    at Object.<anonymous> (/tmp/tmpvhth_v_x.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n === 0 || n === 11 || n === 13) {\n    return 0;\n  }\n\n  return 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp9d2adf8v.js:17:12)\n    at Object.<anonymous> (/tmp/tmp9d2adf8v.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334451
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n <= 0) return 0;\n  if (n === 11 || n === 13) return 1;\n  if (n % 11 === 13 && n % 10 === 11) return 4;\n  return fizz_buzz(~~(n / 10));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpb5cxoq14.js:21:12)\n    at Object.<anonymous> (/tmp/tmpb5cxoq14.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return n < 11 ? (n % 11 === 0 ? 0 : n) :\n         n === 13 ? (n % 13 === 0 ? 0 : n ) : n;\n}\n</cell>\n<text>\nIn addition to this, we can now define a function that'll return the fizz buzz number for a given input. We'll also need to include a type annotation in the return type, because otherwise the return type will be inferred as any (since TypeScript does not yet have a way for us to annotate functions with multiple return types -- you can follow this issue for details: https://github.com/Microsoft/TypeScript/issues/1297). Finally, we'll use type assertion to ensure that the input is a number at runtime.\n\n\n</text>\n<cell>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwsexovhr.ts(12,2): error TS1110: Type expected.\n../../../../tmp/tmpwsexovhr.ts(12,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwsexovhr.ts(14,4): error TS1005: ';' expected.\n../../../../tmp/tmpwsexovhr.ts(14,13): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpwsexovhr.ts(14,25): error TS1005: ';' expected.\n../../../../tmp/tmpwsexovhr.ts(14,29): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpwsexovhr.ts(14,33): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpwsexovhr.ts(14,40): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpwsexovhr.ts(14,55): error TS1005: '(' expected.\n../../../../tmp/tmpwsexovhr.ts(14,109): error TS1005: ';' expected.\n../../../../tmp/tmpwsexovhr.ts(14,112): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpwsexovhr.ts(14,117): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpwsexovhr.ts(14,122): error TS1434: Unexpected keyword",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  // https://jsperf.com/math-floor-vs-math-ceil-vs-parseint-vs-math-abs-vs-constexpr\n  return Math.floor(n % 10) === 7 ? (n % 100 > 9 ? 0 : 1) :\n    Math.floor(n % 10) === 8 ? (n % 100 > 8 ? 0 : 1) :\n    Math.floor(n % 10) === 9 ? (n % 100 > 8 ? 0 : 0) :\n    Math.floor(n % 10) === 10 ? (n % 100 > 7 ? 0 : 1) :\n    Math.floor(n % 10) === 11 ? (n % 100 > 6 ? 0 : 0) :\n    Math.floor(n % 10) === 13 ? (n % 100 > 5 ? 0 : 1) : 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpcwtxbq3r.js:21:12)\n    at Object.<anonymous> (/tmp/tmpcwtxbq3r.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return String(num).replace(/7/g, '8').replace(/9/g, '10').replace(/11/g, '12');\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `return` is unnecessary: it would be returned anyway. Though this can be improved by using `String()`'s implicit conversion of `n` to a string.\n<|/ c |>\n<| c |>\nI didn't know you could use string concatenation in replace. Learn something new every day.\n<|/ c |>\n<| c |>\nGood answer but i think the method can be optimized with using regexp like `/7/g` instead of `/7/g8`.\n<|/ c |>\n<| c |>\nThis is just an example of how you can do things, not how you can do it in production. As I mentioned in my answer, this is an excellent way to do it.\n<|/ c |>\n<| c |>\nI agree, I just pointed that out because someone may wonder why this answer has so many upvotes, even though it may not be an optimal solution. Though I guess it could be optimized.\n<|/ c |>\n<| a |>\nHere is a solution that checks if the number is divisible by 3 or 5 or both, and then returns the string \"FizzBuzz\". But it also returns \"Fizz\" if it is divisible by both 3 and 5, so a slightly different implementation.\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwvsrtgma.ts(11,2): error TS1110: Type expected.\n../../../../tmp/tmpwvsrtgma.ts(11,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwvsrtgma.ts(12,2): error TS1109: Expression expected.\n../../../../tmp/tmpwvsrtgma.ts(12,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpwvsrtgma.ts(13,2): error TS1109: Expression expected.\n../../../../tmp/tmpwvsrtgma.ts(13,7): error TS1109: Expression expected.\n../../../../tmp/tmpwvsrtgma.ts(14,14): error TS1005: ';' expected.\n../../../../tmp/tmpwvsrtgma.ts(14,30): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpwvsrtgma.ts(14,33): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpwvsrtgma.ts(14,39): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpwvsrtgma.ts(14,42): error TS1435: Unknown keyword or identifier. Did you mean 'return'?\n../../../../tmp/tmpwvsrtgma.ts(14,66): error TS1005: ';' expected.\n../../../../tmp/tmpwvsrtgma.ts(14,71): error TS100",
      "timestamp": 1660334452
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return isEven(n) ? 0 :\n    isDivisibleBy11(n) ? 2 :\n    isDivisibleBy13(n) ? 3 :\n    fizz_buzz(subtract(n, 7));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl7n707d4.ts(9,10): error TS2304: Cannot find name 'isEven'.\n../../../../tmp/tmpl7n707d4.ts(10,5): error TS2304: Cannot find name 'isDivisibleBy11'.\n../../../../tmp/tmpl7n707d4.ts(11,5): error TS2304: Cannot find name 'isDivisibleBy13'.\n../../../../tmp/tmpl7n707d4.ts(12,15): error TS2304: Cannot find name 'subtract'.\n",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 11 || n % 11 === 0) return 1;\n  if (n < 13) return 3;\n  return 5;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp1bvs937z.js:18:12)\n    at Object.<anonymous> (/tmp/tmp1bvs937z.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let counter = 0;\n  let numStr = n.toString();\n\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] === '7') {\n      if (numStr[i - 1] === '6' && numStr[i + 1] === '5') {\n        counter++;\n      } else if (numStr[i - 1] === '7' && numStr[i + 1] === '9') {\n        counter++;\n      } else {\n        counter++;\n      }\n    } else {\n      counter++;\n    }\n  }\n  return counter;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp6b0eskzt.js:32:12)\n    at Object.<anonymous> (/tmp/tmp6b0eskzt.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const digits = [\"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"];\n  const digit = digits.indexOf(n);\n  const times_digit = digits.filter(d => d === n).length;\n  if (n === 7 && times_digit === 0) return 0;\n  if (n === 8 && times_digit === 1) return 2;\n  if (n === 9 && times_digit === 2) return 3;\n  if (n === 10 && times_digit === 3) return 4;\n  if (n === 11 && times_digit === 4) return 5;\n  if (n === 12 && times_digit === 5) return 6;\n  if (n === 13 && times_digit === 6) return 7;\n  if (n === 14 && times_digit === 7) return 8;\n  if (n === 15 && times_digit === 8) return 9;\n  if (n === 16 && times_digit === 9) return 10;\n  if (n === 17 && times_digit === 10) return 11;\n  if (n === 18 && times_digit === 11) return 12;\n  if (n === 19 && times_digit === 12) return 13;\n  if (n === 20 && times_digit === 13) return 14;\n  if (n === 21 && times_digit === 14) return 15;\n  if (n === 22 && times_digit === 15) return 16;\n  if (n === 23 && times_digit === 16) return 17;\n  if (n === 24 && times_digit === 17) return 18;\n  if (n === 25 && times_digit === 18) return 19;\n  if (n === 26 && times_digit === 19) return 20;\n  if (n === 27 && times_digit === 20) return 21;\n  if (n === 28 && times_digit === 21) return 22;\n  if (n === 29 && times_digit === 22) return 23;\n  if (n === 30 && times_digit === 23) return 24;\n  if (n === 31 && times_digit === 24) return 25;\n  if (n === 31 && times_digit === 25) return 26;\n  if (n === 31 && times_digit === 26) return 27;\n  if (n === 31 && times_digit === 27) return 28;\n  if (n === 31 && times_digit === 28) return 29;\n  if (n === 31 && times_digit === 29) return 30;\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7idm9yao.ts(10,32): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp7idm9yao.ts(11,42): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.\n",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let num: number = n;\n  let digit: number = 0;\n  let fizzCount: number = 1;\n  let buzzCount: number = 1;\n  while (num > 0) {\n    digit = num % 10;\n    num = Math.floor(num / 10);\n    if (digit === 7) {\n      fizzCount++;\n    } else if (digit === 3) {\n      buzzCount++;\n    }\n  }\n  return fizzCount > buzzCount ? fizzCount : buzzCount;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpmbij9dg_.js:28:12)\n    at Object.<anonymous> (/tmp/tmpmbij9dg_.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334452
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  // Only return if n is a positive integer\n  if (!Number.isInteger(n) || n <= 0) {\n    throw new Error(`Incorrect input: ${n}`)\n  }\n  // Get the remainder of n divided by 11\n  const remainder = n % 11\n  // Get the remainder of n divided by 13\n  const remainder_2 = n % 13\n  // If n is divisible by 11\n  if (remainder === 1) {\n    // If n is divisible by 13\n    if (remainder_2 === 0 || remainder_2 === 5) {\n      // Return 1\n      return 1\n    } else {\n      // Return 2\n      return 2\n    }\n  } else {\n    // If n is divisible by 13\n    if (remainder_2 === 2) {\n      // Return 3\n      return 3\n    } else {\n      // Return 4\n      return 4\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpnuja3jxc.js:44:12)\n    at Object.<anonymous> (/tmp/tmpnuja3jxc.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334453
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 0) return 0;\n  if (n < 10) return 1;\n  if (n % 10 === 7) return 2;\n  if (n % 10 === 9) return 3;\n  if (n % 10 === 11) return 4;\n  if (n % 10 === 13) return 5;\n  return 6;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpyt4avft3.js:26:12)\n    at Object.<anonymous> (/tmp/tmpyt4avft3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334453
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return n%11==0 || n%13==0 ? n : n*fizz_buzz(n/11)%13;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n78\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbhv_yd9e.js:15:12)\n    at Object.<anonymous> (/tmp/tmpbhv_yd9e.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 78,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334453
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  // If the number is divisible by 11 or 13, return 0\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 0;\n  }\n\n  // If it is divisible by 3, return 1\n  if (n % 3 === 0) {\n    return 1;\n  }\n\n  // If it is divisible by 5, return 2\n  if (n % 5 === 0) {\n    return 2;\n  }\n\n  // If it is divisible by both 3 and 5, return 3\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 3;\n  }\n\n  // If it is divisible by 3 but not 5, return 4\n  if (n % 3 !== 0 && n % 5 !== 0) {\n    return 4;\n  }\n\n  // If it is divisible by both 3 and 5, return 5\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 5;\n  }\n\n  // Otherwise, return 6\n  return 6;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpdy90ccpd.js:39:12)\n    at Object.<anonymous> (/tmp/tmpdy90ccpd.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334453
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  let i = 1\n  while (i <= n) {\n    if (n % i === 0 || n % i === 3 || n % i === 5 || n % i === 7 || n % i === 11 || n % i === 13) count++\n    i++\n  }\n  return count\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp17vwgr2n.js:21:12)\n    at Object.<anonymous> (/tmp/tmp17vwgr2n.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334453
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return Math.ceil(\n    (Math.sqrt(8 * n + 11) / 11) - Math.floor((Math.sqrt(8 * n + 11) / 11) * Math.log(8 * n + 11))\n  );\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,javascript dscore=0 |>\nHere's a solution that doesn't require knowing the number of digits beforehand.\n<code>\nlet fizz_buzz = function (n) {\n    let digits = Math.floor((n).toString(10).length);\n    let result = n % 11 === 0 ? \"Fizz\" : n % 11 === 1 ? \"Buzz\" : \"\";\n    if (n % 10 === 0) result += `0`.repeat(digits - 2);\n    return result + (n % 10).toString();\n};\n</code>\n<|/ a |>\n<| a dscore=0 |>\nYou can try this approach, it's easier to understand than the accepted answer:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo8pg2hc8.ts(13,2): error TS1110: Type expected.\n../../../../tmp/tmpo8pg2hc8.ts(13,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpo8pg2hc8.ts(14,2): error TS1109: Expression expected.\n../../../../tmp/tmpo8pg2hc8.ts(14,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpo8pg2hc8.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmpo8pg2hc8.ts(15,6): error TS1005: ';' expected.\n../../../../tmp/tmpo8pg2hc8.ts(15,31): error TS1005: ';' expected.\n../../../../tmp/tmpo8pg2hc8.ts(15,41): error TS1109: Expression expected.\n../../../../tmp/tmpo8pg2hc8.ts(16,5): error TS1005: ';' expected.\n../../../../tmp/tmpo8pg2hc8.ts(16,30): error TS1005: ';' expected.\n../../../../tmp/tmpo8pg2hc8.ts(16,32): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpo8pg2hc8.ts(16,40): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpo8pg2hc8.ts(16,48): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpo8pg2",
      "timestamp": 1660334453
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const nStr = n.toString();\n  if (nStr.length <= 1) return n;\n  if (nStr.length <= 3) return n % 10 === 0 ? 0 : 1;\n  if (nStr.length <= 5) return n % 10 === 0 ? 0 : 2;\n  if (nStr.length <= 7) return n % 10 === 0 ? 0 : 3;\n  return n % 10 === 0 ? 0 : 4;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpy5oq_pj8.js:24:12)\n    at Object.<anonymous> (/tmp/tmpy5oq_pj8.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334453
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  n = Math.ceil(n)\n  if (n % 11 === 0 || n % 13 === 0) return 0\n  return Math.ceil(n / 11) + 1\n}\nexport { fizz_buzz }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "(node:32364) Warning: To load an ES module, set \"type\": \"module\" in the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...` to show where the warning was created)\n/tmp/tmpsv1smif0.js:14\nexport { fizz_buzz };\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334453
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 0) return -1;\n  if (n % 11 === 0) return fizz_buzz(n / 11) + 1;\n  if (n % 13 === 0) return fizz_buzz(n / 13) + 1;\n  return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpj1isfs40.js:21:12)\n    at Object.<anonymous> (/tmp/tmpj1isfs40.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334453
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n    if (n % 11 === 0 || n % 13 === 0) return 0\n    return 1\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpani5tnnf.js:16:12)\n    at Object.<anonymous> (/tmp/tmpani5tnnf.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334454
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 11) {\n    return 0\n  }\n  if (n % 11 === 0 && n >= 13) {\n    return 2\n  }\n  return 3\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp6ycpbqt2.js:20:12)\n    at Object.<anonymous> (/tmp/tmp6ycpbqt2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334455
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  while (n > 0) {\n    n = n % 11;\n    if (n === 7 || n === 8) {\n      count++;\n    }\n    n = Math.floor(n / 10);\n  }\n  return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpx0yzudqv.js:23:12)\n    at Object.<anonymous> (/tmp/tmpx0yzudqv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334455
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 1 || n > 2000) {\n    return \"\";\n  }\n  let str = \"\";\n  const numbers = Array.from({ length: n });\n  for (let index = 0; index < numbers.length; index++) {\n    if (numbers[index] % 11 === 0) {\n      str += \"11\";\n    } else if (numbers[index] % 13 === 0) {\n      str += \"13\";\n    } else {\n      str += numbers[index];\n    }\n  }\n  return str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptzhq8yng.ts(10,5): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmptzhq8yng.ts(15,9): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmptzhq8yng.ts(17,16): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmptzhq8yng.ts(23,3): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334455
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let counter = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      counter += 1;\n    }\n  }\n  return counter;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpcv9ojn0c.js:20:12)\n    at Object.<anonymous> (/tmp/tmpcv9ojn0c.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334455
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  // Get the remainder of integer division by 11\n  const remainder = n % 11;\n\n  // Return 0 when the remainder is 0 (no remainder by 11)\n  if (remainder === 0) {\n    return 0;\n  }\n\n  // Return 1 when remainder is 1 (remainder by 11 is 9)\n  if (remainder === 1) {\n    return 1;\n  }\n\n  // Return 2 when remainder is 2 (remainder by 11 is 18)\n  if (remainder === 2) {\n    return 2;\n  }\n\n  // Return 3 when remainder is 3 (remainder by 11 is 27)\n  if (remainder === 3) {\n    return 3;\n  }\n\n  // Return 4 when remainder is 4 (remainder by 11 is 36)\n  if (remainder === 4) {\n    return 4;\n  }\n\n  // Return 5 when remainder is 5 (remainder by 11 is 45)\n  if (remainder === 5) {\n    return 5;\n  }\n\n  // Return 6 when remainder is 6 (remainder by 11 is 54)\n  if (remainder === 6) {\n    return 6;\n  }\n\n  // Return 7 when remainder is 7 (remainder by 11 is 63)\n  if (remainder === 7) {\n    return 7;\n  }\n\n  // Return 8 when remainder is 8 (remainder by 11 is 72)\n  if (remainder === 8) {\n    return 8;\n  }\n\n  // Return 9 when remainder is 9 (remainder by 11 is 81)\n  if (remainder === 9) {\n    return 9;\n  }\n\n  // Return 10 when remainder is 10 (remainder by 11 is 90)\n  if (remainder === 10) {\n    return 10;\n  }\n\n  // Return 11 when remainder is 11 (remainder by 11 is 99)\n  if (remainder === 11) {\n    return 11;\n  }\n\n  // Return 12 when remainder is 12 (remainder by 11 is 107)\n  if (remainder === 12) {\n    return 12;\n  }\n\n  // Return 13 when remainder is 13 (remainder by 11 is 117)\n  if (remainder === 13) {\n    return 13;\n  }\n\n  // Return 14 when remainder is 14 (remainder by 11 is 126)\n  if (remainder === 14) {\n    return 14;\n  }\n\n  // Return 15 when remainder is 15 (remainder by 11 is 135)\n  if (remainder === 15) {\n    return 15;\n  }\n\n  // Return 16 when remainder is 16 (remainder by 11 is 144)\n  if (remainder === 16) {\n    return 16;\n  }\n\n  // Return 17 when remainder is 17 (remainder by 11 is 153)\n  if (remain\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpoxpbni7g.ts(99,1): error TS1005: ')' expected.\n../../../../tmp/tmpoxpbni7g.ts(115,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334455
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 11 || n > 79) {\n    throw new RangeError(\n      \"fizz_buzz must be called with an integer less than 11 and greater than 79\"\n    );\n  }\n  if (n % 11 === 0 && (n % 13 === 0 || n % 11 === 13)) {\n    return 1;\n  }\n  return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp39kbz6kv.js:21:12)\n    at Object.<anonymous> (/tmp/tmp39kbz6kv.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334455
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  let num;\n  while ((n < 10) || (n < 20) || (n < 30) || (n < 40) || (n < 50)) {\n    if (n % 10 == 7 || n % 10 == 9 || n % 10 == 11 || n % 10 == 13) {\n      count++;\n    }\n    num = (n).toString();\n    n = parseInt(num, 10);\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp4ax258et.js:24:12)\n    at Object.<anonymous> (/tmp/tmp4ax258et.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  const arr = [11, 13];\n  while (n > 10) {\n    if (n % arr[0] === 0 || n % arr[1] === 0) {\n      count++;\n    }\n    n = Math.floor(n / arr[0]);\n  }\n  return count;\n}\n</code>\n<|/ a tags=fizzbuzz,javascript |>\n<| c |>\nYeah this is a bit of a nice solution. I'd just make the array `let arr = new Array(11)` and then use `arr[0]` instead of hard-coding `11`.\n<|/ c |>\n<| c |>\nOh yeah that makes sense. Thanks.\n<|/ c |>\n<| a tags=fizzbuzz,javascript |>\nHere's a solution using mathematics:\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4ervn0nx.ts(19,2): error TS1110: Type expected.\n../../../../tmp/tmp4ervn0nx.ts(19,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp4ervn0nx.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmp4ervn0nx.ts(20,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp4ervn0nx.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmp4ervn0nx.ts(21,7): error TS1109: Expression expected.\n../../../../tmp/tmp4ervn0nx.ts(22,6): error TS1005: ';' expected.\n../../../../tmp/tmp4ervn0nx.ts(22,11): error TS1005: ';' expected.\n../../../../tmp/tmp4ervn0nx.ts(22,14): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp4ervn0nx.ts(22,16): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp4ervn0nx.ts(22,20): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp4ervn0nx.ts(22,23): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp4ervn0nx.ts(22,25): error TS1434: Unexpected keyword",
      "timestamp": 1660334455
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 11 || n % 11 === 0) return 1;\n  if (n < 13) return 3;\n  if (n < 17) return 5;\n  if (n < 19) return 7;\n  if (n < 23) return 9;\n  if (n < 27) return 11;\n  if (n < 29) return 13;\n  if (n < 31) return 15;\n  if (n < 33) return 17;\n  if (n < 35) return 19;\n  if (n < 37) return 21;\n  if (n < 39) return 23;\n  if (n < 41) return 25;\n  if (n < 43) return 27;\n  if (n < 45) return 29;\n  if (n < 47) return 31;\n  if (n < 49) return 33;\n  return 37;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n37\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmprbf_www2.js:48:12)\n    at Object.<anonymous> (/tmp/tmprbf_www2.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 37,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 1 || n > 100) {\n    throw new Error(`expected n to be a positive integer, instead got ${n}`);\n  }\n\n  return [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597].some(\n    (num) => n % num === 0\n  ) ?\n    0 :\n    1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpcl01gpnm.js:20:12)\n    at Object.<anonymous> (/tmp/tmpcl01gpnm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const rem = n % 11;\n  const num = n % 13;\n\n  if (rem === 0) {\n    if (num === 0) {\n      return 1;\n    }\n    if (num > 0) {\n      return num;\n    }\n  }\n\n  if (num > 0) {\n    return num + fizz_buzz(n - num);\n  }\n\n  return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp9ldsp4td.js:27:12)\n    at Object.<anonymous> (/tmp/tmp9ldsp4td.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 10) {\n    return n;\n  }\n  if (n < 100) {\n    return fizz_buzz(n % 10) + fizz_buzz(n % 100) + fizz_buzz(Math.floor(n/100));\n  }\n  if (n < 1000) {\n    return fizz_buzz(n % 10) + fizz_buzz(Math.floor(n / 10)) + fizz_buzz(n % 100) + fizz_buzz(Math.floor(n/100));\n  }\n  if (n < 10000) {\n    return fizz_buzz(n % 10) + fizz_buzz(Math.floor(n / 10)) + fizz_buzz(Math.floor(n / 100)) + fizz_buzz(n % 100) + fizz_buzz(Math.floor(n/100));\n  }\n  return fizz_buzz(n % 10) + fizz_buzz(Math.floor(n / 10)) + fizz_buzz(Math.floor(n / 100)) + fizz_buzz(Math.floor(n / 1000)) + fizz_buzz(n % 1000);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpef8sxdgc.js:8\nfunction fizz_buzz(n) {\n                  ^\n\nRangeError: Maximum call stack size exceeded\n    at fizz_buzz (/tmp/tmpef8sxdgc.js:8:19)\n    at fizz_buzz (/tmp/tmpef8sxdgc.js:13:16)\n    at fizz_buzz (/tmp/tmpef8sxdgc.js:13:36)\n    at fizz_buzz (/tmp/tmpef8sxdgc.js:13:36)\n    at fizz_buzz (/tmp/tmpef8sxdgc.js:13:36)\n    at fizz_buzz (/tmp/tmpef8sxdgc.js:13:36)\n    at fizz_buzz (/tmp/tmpef8sxdgc.js:13:36)\n    at fizz_buzz (/tmp/tmpef8sxdgc.js:13:36)\n    at fizz_buzz (/tmp/tmpef8sxdgc.js:13:36)\n    at fizz_buzz (/tmp/tmpef8sxdgc.js:13:36)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  // Get the remainder of n%11, which should be 0 for divisible by 11 or 13\n  const remainder = (n % 11);\n  const isDivisibleBy11 = remainder === 0;\n  const isDivisibleBy13 = remainder === 0;\n\n  // Return 0 when n & 11 is 0, 1 when n & 11 is 1, 2 when n & 11 is 2, and 3 when n & 11 is 3.\n  return isDivisibleBy13 ? 3 : isDivisibleBy11 ? 2 : 1;\n}\n</code>\n<|/ a |>\n<| a tags=javascript,numbers,function,algorithm |>\nYou can simplify it to\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph67_o75f.ts(17,2): error TS1110: Type expected.\n../../../../tmp/tmph67_o75f.ts(17,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmph67_o75f.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmph67_o75f.ts(18,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmph67_o75f.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmph67_o75f.ts(19,6): error TS1005: ';' expected.\n../../../../tmp/tmph67_o75f.ts(19,38): error TS1005: '(' expected.\n../../../../tmp/tmph67_o75f.ts(19,50): error TS1109: Expression expected.\n../../../../tmp/tmph67_o75f.ts(20,5): error TS1005: ';' expected.\n../../../../tmp/tmph67_o75f.ts(20,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmph67_o75f.ts(20,18): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmph67_o75f.ts(22,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n % 11 === 0) return 3;\n  if (n % 13 === 0) return 2;\n  if (n % 17 === 0) return 1;\n  return 0;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpoaoud43r.js:22:12)\n    at Object.<anonymous> (/tmp/tmpoaoud43r.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let i = 1;\n  let count: number;\n  do {\n    count = i.toString().length;\n    i++;\n  } while ((n / i) % 11 === 0 || n / i) % 13 === 0);\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqx3n2rpy.ts(14,41): error TS1109: Expression expected.\n../../../../tmp/tmpqx3n2rpy.ts(14,51): error TS1005: ';' expected.\n",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n\tconst nums = [1, 3, 7, 9];\n\tlet count = 0;\n\twhile (n % 10 != 0) {\n\t\tn = (n / 10) | 0;\n\t\tcount += nums.indexOf(n);\n\t}\n\treturn count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp2t2dtpcw.js:21:12)\n    at Object.<anonymous> (/tmp/tmp2t2dtpcw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 13) return n % 11 === 0 ? 0 : n % 11 === 1 ? 1 : 2;\n  return n % 13 === 0 ? 0 : n % 13 === 1 ? 1 : 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpcubmcg7m.js:16:12)\n    at Object.<anonymous> (/tmp/tmpcubmcg7m.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n % 11 === 0 && n % 13 === 0) {\n    return 0;\n  } else if (n % 11 === 0 && n % 14 === 0) {\n    return 1;\n  } else if (n % 13 === 0 && n % 14 === 0) {\n    return 2;\n  }\n  return 3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpnur5qvcc.js:23:12)\n    at Object.<anonymous> (/tmp/tmpnur5qvcc.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const remainder = Math.floor(n);\n  return (remainder === 13 || remainder === 11) ? 0 : ((n - remainder) % 11 + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpo_0avuna.js:15:12)\n    at Object.<anonymous> (/tmp/tmpo_0avuna.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334457
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return n < 0 ? 0 : n < 1 ? 1 : fizz_buzz(n / 10) | 0 | fizz_buzz((n % 10) | 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp0l3mjr52.js:9\n    return n < 0 ? 0 : n < 1 ? 1 : fizz_buzz(n / 10) | 0 | fizz_buzz((n % 10) | 0);\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at fizz_buzz (/tmp/tmp0l3mjr52.js:9:5)\n    at fizz_buzz (/tmp/tmp0l3mjr52.js:9:36)\n    at fizz_buzz (/tmp/tmp0l3mjr52.js:9:60)\n    at fizz_buzz (/tmp/tmp0l3mjr52.js:9:60)\n    at fizz_buzz (/tmp/tmp0l3mjr52.js:9:60)\n    at fizz_buzz (/tmp/tmp0l3mjr52.js:9:60)\n    at fizz_buzz (/tmp/tmp0l3mjr52.js:9:60)\n    at fizz_buzz (/tmp/tmp0l3mjr52.js:9:60)\n    at fizz_buzz (/tmp/tmp0l3mjr52.js:9:60)\n    at fizz_buzz (/tmp/tmp0l3mjr52.js:9:60)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334457
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n % 11 === 0) return 0;\n  if (n % 13 === 0) return 2;\n  return 3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpdxuldl5b.js:18:12)\n    at Object.<anonymous> (/tmp/tmpdxuldl5b.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334457
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let x = 1;\n  let y = 1;\n  while (y <= n && x % 11 === 0 || y <= n && x % 13 === 0) {\n    x++;\n    y++;\n  }\n  return x;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp2nx7tei1.js:20:12)\n    at Object.<anonymous> (/tmp/tmp2nx7tei1.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334456
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let num;\n\n  if (n % 11 === 0) {\n    num = fizz_buzz_number(n);\n  } else {\n    if (n % 13 === 0) {\n      num = fizz_buzz_number(n);\n    } else {\n      num = 0;\n    }\n  }\n  return num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx7rffh93.ts(12,11): error TS2304: Cannot find name 'fizz_buzz_number'.\n../../../../tmp/tmpx7rffh93.ts(15,13): error TS2304: Cannot find name 'fizz_buzz_number'.\n",
      "timestamp": 1660334457
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  // Write your code here.\n  const result = [];\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (count === 2) {\n      result.push(i);\n    }\n  }\n  return result.length ? result.length : n;\n}\n\nconsole.log(fizz_buzz(50));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmphc_nrlwz.js:26:12)\n    at Object.<anonymous> (/tmp/tmphc_nrlwz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "3\n",
      "timestamp": 1660334458
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const str = n.toString();\n  let times = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (\n      str[i] === 7 ||\n      str[i] === 8 ||\n      str[i] === 9 ||\n      str[i] === 10 ||\n      str[i] === 11\n    ) {\n      times++;\n    }\n  }\n  return times;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=typescript,javascript,node.js,algorithm |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmv84ikud.ts(24,2): error TS1110: Type expected.\n../../../../tmp/tmpmv84ikud.ts(24,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpmv84ikud.ts(25,2): error TS1109: Expression expected.\n../../../../tmp/tmpmv84ikud.ts(25,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpmv84ikud.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmpmv84ikud.ts(26,6): error TS1005: ';' expected.\n../../../../tmp/tmpmv84ikud.ts(26,52): error TS1109: Expression expected.\n../../../../tmp/tmpmv84ikud.ts(28,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334458
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  while (n >= 11 || n >= 13) {\n    if (n % 11 === 0 || n % 13 === 0) {\n      count += 1;\n    }\n    n = Math.floor(n / 10);\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp_7z1urj9.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_7z1urj9.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334458
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const isDivisibleBy11 = n % 11 === 0;\n  const isDivisibleBy13 = n % 13 === 0;\n  return (isDivisibleBy11 && isDivisibleBy13) ? 0 : 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpjirun77f.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjirun77f.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334458
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return isDigit(n) ? n : n % 11 === 0 ? 0 : n % 13 === 0 ? 0 : n % 2 === 0 ? 0 :\n      isDigit(n % 100) ? 0 : n % 10 === 0 ? 0 : isDigit(n % 10) ? 0 : 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu_ac5epo.ts(9,10): error TS2304: Cannot find name 'isDigit'.\n../../../../tmp/tmpu_ac5epo.ts(10,7): error TS2304: Cannot find name 'isDigit'.\n../../../../tmp/tmpu_ac5epo.ts(10,49): error TS2304: Cannot find name 'isDigit'.\n",
      "timestamp": 1660334458
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n % 11 === 0 && n % 13 === 0) {\n    return 0;\n  } else if (n % 11 === 0 || n % 13 === 0) return 1;\n  else return 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmparh1gvnp.js:20:12)\n    at Object.<anonymous> (/tmp/tmparh1gvnp.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334458
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpierm8hix.js:20:12)\n    at Object.<anonymous> (/tmp/tmpierm8hix.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334236
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const arr = Array.from(Array(n).keys())\n  const arr1 = arr.filter((num: number) => num % 11 === 0 || num % 13 === 0)\n  return arr1.length\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp_zrz95p5.js:16:12)\n    at Object.<anonymous> (/tmp/tmp_zrz95p5.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 8) {\n    return n; // No change if already divisible by 8\n  } else if (n % 11 === 0 || n % 13 === 0) {\n    return n + 1; // Increment for divisible by 11 or 13\n  } else {\n    return n;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n50\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp_d9_zisz.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_d9_zisz.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 50,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n === 0 || n === 11) {\n    return 1;\n  }\n\n  if (n === 13) {\n    return 2;\n  }\n\n  return fizz_buzz(n - 1) + fizz_buzz(n - 13);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmplru7cl80.js:9\n    if (n === 0 || n === 11) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at fizz_buzz (/tmp/tmplru7cl80.js:9:5)\n    at fizz_buzz (/tmp/tmplru7cl80.js:15:12)\n    at fizz_buzz (/tmp/tmplru7cl80.js:15:12)\n    at fizz_buzz (/tmp/tmplru7cl80.js:15:12)\n    at fizz_buzz (/tmp/tmplru7cl80.js:15:12)\n    at fizz_buzz (/tmp/tmplru7cl80.js:15:12)\n    at fizz_buzz (/tmp/tmplru7cl80.js:15:12)\n    at fizz_buzz (/tmp/tmplru7cl80.js:15:12)\n    at fizz_buzz (/tmp/tmplru7cl80.js:15:12)\n    at fizz_buzz (/tmp/tmplru7cl80.js:15:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let counter = 0;\n  if (n < 0 || n % 11 === 0) counter++;\n  if (n % 13 === 0) counter++;\n  return counter;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmphahlx35y.js:20:12)\n    at Object.<anonymous> (/tmp/tmphahlx35y.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return (\n    (n % 11 === 0 && n % 13 === 0)\n    ? ((n / 11) % 10 === 1 || (n / 13) % 10 === 1 ? 0 : -1)\n    : (n >= 0 && n % 10 === 1 ? 0 : -1)\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp4jl1nk0_.js:16:12)\n    at Object.<anonymous> (/tmp/tmp4jl1nk0_.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let count = 0;\n  let num = n;\n  while (num > 0) {\n    if (num % 11 === 0 || num % 13 === 0) {\n      count += 1;\n    }\n    num = Math.floor(num / 10);\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp5p1dcrmn.js:23:12)\n    at Object.<anonymous> (/tmp/tmp5p1dcrmn.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n === 0 || n === 1) {\n    return n;\n  } else if (n % 10 === 0 && n % 100 === 11 || n % 10 === 11 && n % 100 === 11 ||\n            n % 100 === 0 && n % 1000 !== 11) {\n    return 0;\n  } else if (n % 10 === 2 && n % 100 === 11 || n % 10 === 12 && n % 100 === 11 ||\n            n % 100 === 2 || n % 100 === 11) {\n    return 1;\n  } else {\n    return 2;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp5lwqql9v.js:27:12)\n    at Object.<anonymous> (/tmp/tmp5lwqql9v.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 2,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  let result = n.toString().split('');\n  for (let i = 0; i < result.length; i++) {\n    let el = parseInt(result[i]);\n    if (el % 11 === 0 && el % 13 === 0) {\n      return i + 1;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwolby0sa.ts(16,3): error TS2322: Type 'string[]' is not assignable to type 'number'.\n",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  return n > 0 && n % 11 === 0 || (n % 13 === 0 && n % 4 === 0)\n    ? fizz_buzz(n - 1)\n    : 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp0yj5w604.js:17:12)\n    at Object.<anonymous> (/tmp/tmp0yj5w604.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n\treturn Math.floor((Math.log(n) / Math.LN10) + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp6d7_bvs6.js:14:12)\n    at Object.<anonymous> (/tmp/tmp6d7_bvs6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    },
    {
      "exit_code": 1,
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 10) {\n    return n\n  } else if (n < 100) {\n    return n % 10 === 7 ? 2 : n % 10 === 13 ? 3 : 0\n  } else {\n    return n % 10 === 7 ? 3 : n % 10 === 13 ? 2 : 0\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpu5hhd8w6.js:23:12)\n    at Object.<anonymous> (/tmp/tmpu5hhd8w6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334459
    }
  ]
}