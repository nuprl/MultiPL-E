{
  "language": "rkt",
  "name": "HumanEval_46_fib4",
  "results": [
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter i a b c d)\n    (if (= i n)\n        (+ a b c d)\n        (fib4-iter (+ i 1) b c d (+ a b c d))))\n  (fib4-iter 0 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_8yx_r7k.rkt:28:4\nactual:     54\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_8yx_r7k.rkt:29:4\nactual:     386\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_8yx_r7k.rkt:30:4\nactual:     1434\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_8yx_r7k.rkt:31:4\nactual:     5328\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": -1,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n-1 n-2 n-3 n-4)\n    (cond\n      [(= n 0) n-1]\n      [(= n 1) n-2]\n      [(= n 2) n-3]\n      [(= n 3) n-4]\n      [else (fib4-helper (+ n-1 n-2 n-3 n-4) n-1 n-2 n-3)]))\n  (fib4-helper 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039677
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d i)\n    (if (= i n)\n        (+ a b c d)\n        (fib4-iter b c d (+ a b c d) (+ i 1))))\n  (fib4-iter 0 0 2 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptn3wct56.rkt:28:4\nactual:     54\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptn3wct56.rkt:29:4\nactual:     386\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptn3wct56.rkt:30:4\nactual:     1434\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptn3wct56.rkt:31:4\nactual:     5328\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d count)\n    (if (= count n)\n        a\n        (fib4-iter b c d (+ a b c d) (+ count 1))))\n  (fib4-iter 0 0 2 0 3))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_mbjreg.rkt:28:4\nactual:     2\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_mbjreg.rkt:29:4\nactual:     4\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_mbjreg.rkt:30:4\nactual:     14\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_mbjreg.rkt:31:4\nactual:     54\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": -1,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n-1 n-2 n-3 n-4)\n    (cond\n      [(= n 0) n-1]\n      [(= n 1) n-2]\n      [(= n 2) n-3]\n      [(= n 3) n-4]\n      [else (fib4-helper (+ n-1 n-2 n-3 n-4) n-1 n-2 n-3)]))\n  (fib4-helper 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039677
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond ((= n 0) a)\n          ((= n 1) b)\n          ((= n 2) c)\n          ((= n 3) d)\n          (else (fib4-iter (- n 1) b c d (+ a b c d)))))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let ([a 0] [b 0] [c 2] [d 0])\n    (for ([i (in-range n)])\n      (let ([e (+ a b c d)])\n        (set! a b)\n        (set! b c)\n        (set! c d)\n        (set! d e)))\n    d))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpordpkkhc.rkt:31:4\nactual:     28\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpordpkkhc.rkt:32:4\nactual:     200\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpordpkkhc.rkt:33:4\nactual:     744\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpordpkkhc.rkt:34:4\nactual:     2764\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n1 n2 n3 n4 n)\n    (cond\n      [(= n 0) n1]\n      [(= n 1) n2]\n      [(= n 2) n3]\n      [(= n 3) n4]\n      [else (fib4-helper n2 n3 n4 (+ n1 n2 n3 n4) (- n 1))]))\n  (fib4-helper 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond ((= n 0) a)\n          ((= n 1) b)\n          ((= n 2) c)\n          ((= n 3) d)\n          (else (fib4-iter b c d (+ a b c d) (- n 1)))))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3) 0]\n        [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (if (< n 4)\n      n\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n         (fib4 (- n 3))\n         (fib4 (- n 4)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0vo2197g.rkt:29:4\nactual:     12\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0vo2197g.rkt:30:4\nactual:     85\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0vo2197g.rkt:31:4\nactual:     316\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0vo2197g.rkt:32:4\nactual:     1174\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let ([a 0] [b 0] [c 2] [d 0])\n    (for ([i (in-range n)])\n      (let ([e (+ a b c d)])\n        (set! a b)\n        (set! b c)\n        (set! c d)\n        (set! d e)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:30:4\nactual:     #<void>\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:31:4\nactual:     #<void>\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:32:4\nactual:     #<void>\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:33:4\nactual:     #<void>\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([a 0] [b 0] [c 2] [d 0] [i n])\n    (cond [(= i 0) a]\n          [(= i 1) b]\n          [(= i 2) c]\n          [(= i 3) d]\n          [else (loop b c d (+ a b c d) (- i 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond ((= n 0) a)\n          ((= n 1) b)\n          ((= n 2) c)\n          ((= n 3) d)\n          (else (fib4-iter b c d (+ a b c d) (- n 1)))))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([a 0] [b 0] [c 2] [d 0] [i n])\n    (cond\n      [(= i 0) a]\n      [(= i 1) b]\n      [(= i 2) c]\n      [(= i 3) d]\n      [else (loop (+ a b c d) a b c (- i 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaltn_235.rkt:30:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaltn_235.rkt:31:4\nactual:     4\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaltn_235.rkt:32:4\nactual:     12\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaltn_235.rkt:33:4\nactual:     46\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond ((= n 0) a)\n          ((= n 1) b)\n          ((= n 2) c)\n          ((= n 3) d)\n          (else (fib4-iter b c d (+ a b c d) (- n 1)))))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let ([a 0] [b 0] [c 2] [d 0])\n    (for ([i (in-range n)])\n      (set! d (+ a b c d))\n      (set! a b)\n      (set! b c)\n      (set! c d))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi32hkrc_.rkt:29:4\nactual:     #<void>\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi32hkrc_.rkt:30:4\nactual:     #<void>\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi32hkrc_.rkt:31:4\nactual:     #<void>\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi32hkrc_.rkt:32:4\nactual:     #<void>\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let ([a 0] [b 0] [c 2] [d 0])\n    (for ([i (in-range n)])\n      (let ([e (+ a b c d)])\n        (set! a b)\n        (set! b c)\n        (set! c d)\n        (set! d e)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:30:4\nactual:     #<void>\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:31:4\nactual:     #<void>\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:32:4\nactual:     #<void>\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:33:4\nactual:     #<void>\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let ([a 0] [b 0] [c 2] [d 0])\n    (for ([i (in-range n)])\n      (let ([e (+ a b c d)])\n        (set! a b)\n        (set! b c)\n        (set! c d)\n        (set! d e)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:30:4\nactual:     #<void>\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:31:4\nactual:     #<void>\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:32:4\nactual:     #<void>\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:33:4\nactual:     #<void>\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n1 n2 n3 n4 n)\n    (cond\n      [(= n 0) n1]\n      [(= n 1) n2]\n      [(= n 2) n3]\n      [(= n 3) n4]\n      [else (fib4-helper n2 n3 n4 (+ n1 n2 n3 n4) (- n 1))]))\n  (fib4-helper 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let ([a 0] [b 0] [c 2] [d 0])\n    (for ([i (in-range n)])\n      (let ([e (+ a b c d)])\n        (set! a b)\n        (set! b c)\n        (set! c d)\n        (set! d e)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:30:4\nactual:     #<void>\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:31:4\nactual:     #<void>\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:32:4\nactual:     #<void>\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:33:4\nactual:     #<void>\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let ([a 0] [b 0] [c 2] [d 0])\n    (for ([i (in-range n)])\n      (let ([e (+ a b c d)])\n        (set! a b)\n        (set! b c)\n        (set! c d)\n        (set! d e)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:30:4\nactual:     #<void>\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:31:4\nactual:     #<void>\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:32:4\nactual:     #<void>\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:33:4\nactual:     #<void>\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond ((= n 0) a)\n          ((= n 1) b)\n          ((= n 2) c)\n          ((= n 3) d)\n          (else (fib4-helper (- n 1) b c d (+ a b c d)))))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039675
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond ((= n 0) a)\n          ((= n 1) b)\n          ((= n 2) c)\n          ((= n 3) d)\n          (else (fib4-iter b c d (+ a b c d) (- n 1)))))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d count)\n    (if (= count n)\n        a\n        (fib4-iter b c d (+ a b c d) (+ count 1))))\n  (fib4-iter 0 0 2 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039675
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond ((= n 0) a)\n          ((= n 1) b)\n          ((= n 2) c)\n          ((= n 3) d)\n          (else (fib4-iter b c d (+ a b c d) (- n 1)))))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": -1,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n-1 n-2 n-3 n-4)\n    (cond [(= n 0) n-1]\n          [(= n 1) n-2]\n          [(= n 2) n-3]\n          [(= n 3) n-4]\n          [else (fib4-helper (+ n-1 n-2 n-3 n-4) n-1 n-2 n-3)]))\n  (fib4-helper 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039679
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (if (< n 4)\n      (if (= n 0)\n          0\n          (if (= n 1)\n              0\n              2))\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkblie2a0.rkt:30:4\nactual:     8\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkblie2a0.rkt:31:4\nactual:     58\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkblie2a0.rkt:32:4\nactual:     216\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkblie2a0.rkt:33:4\nactual:     802\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039675
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([i 0] [a 0] [b 0] [c 2] [d 0])\n    (cond [(= i n) a]\n          [else (loop (+ i 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039675
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([i 0] [j 0] [k 2] [l 0] [m 1])\n    (cond [(= m n) l]\n          [else (loop j k l (+ j k l) (+ 1 m))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3q4xv1p.rkt:26:4\nactual:     12\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3q4xv1p.rkt:27:4\nactual:     74\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3q4xv1p.rkt:28:4\nactual:     250\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3q4xv1p.rkt:29:4\nactual:     846\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039675
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond ((= n 0) a)\n          ((= n 1) b)\n          ((= n 2) c)\n          ((= n 3) d)\n          (else (fib4-iter (- n 1) b c d (+ a b c d)))))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (letrec ([fib4-helper (lambda (n a b c d)\n                          (cond [(= n 0) a]\n                                [(= n 1) b]\n                                [(= n 2) c]\n                                [(= n 3) d]\n                                [else (fib4-helper (- n 1) b c d (+ a b c d))]))])\n    (fib4-helper n 0 0 2 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039675
    },
    {
      "exit_code": -1,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n1 n2 n3 n4)\n    (cond [(= n 0) n1]\n          [(= n 1) n2]\n          [(= n 2) n3]\n          [(= n 3) n4]\n          [else (fib4-helper n2 n3 n4 (+ n1 n2 n3 n4))]))\n  (fib4-helper 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039679
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": -1,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n1 n2 n3 n4)\n    (cond\n      [(= n 0) n1]\n      [(= n 1) n2]\n      [(= n 2) n3]\n      [(= n 3) n4]\n      [else (fib4-helper n2 n3 n4 (+ n1 n2 n3 n4))]))\n  (fib4-helper 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039679
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond ((= n 0) a)\n          ((= n 1) b)\n          ((= n 2) c)\n          ((= n 3) d)\n          (else (fib4-iter b c d (+ a b c d) (- n 1)))))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond [(zero? n) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039675
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond ((= n 0) a)\n          ((= n 1) b)\n          ((= n 2) c)\n          ((= n 3) d)\n          (else (fib4-iter b c d (+ a b c d) (- n 1)))))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond ((= n 0) a)\n          ((= n 1) b)\n          ((= n 2) c)\n          ((= n 3) d)\n          (else (fib4-iter b c d (+ a b c d) (- n 1)))))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n1 n2 n3 n4 n)\n    (cond\n      [(= n 0) n1]\n      [(= n 1) n2]\n      [(= n 2) n3]\n      [(= n 3) n4]\n      [else (fib4-helper n2 n3 n4 (+ n1 n2 n3 n4) (- n 1))]))\n  (fib4-helper 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter a b c d n)\n    (cond ((= n 0) a)\n          ((= n 1) b)\n          ((= n 2) c)\n          ((= n 3) d)\n          (else (fib4-iter b c d (+ a b c d) (- n 1)))))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-iter i a b c d)\n    (if (= i n)\n        (+ a b c d)\n        (fib4-iter (+ i 1) b c d (+ a b c d))))\n  (fib4-iter 0 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_8yx_r7k.rkt:28:4\nactual:     54\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_8yx_r7k.rkt:29:4\nactual:     386\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_8yx_r7k.rkt:30:4\nactual:     1434\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_8yx_r7k.rkt:31:4\nactual:     5328\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond ((= n 0) a)\n          ((= n 1) b)\n          ((= n 2) c)\n          ((= n 3) d)\n          (else (fib4-helper (- n 1) b c d (+ a b c d)))))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039675
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let ([a 0] [b 0] [c 2] [d 0])\n    (for ([i (in-range n)])\n      (let ([e (+ a b c d)])\n        (set! a b)\n        (set! b c)\n        (set! c d)\n        (set! d e)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:30:4\nactual:     #<void>\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:31:4\nactual:     #<void>\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:32:4\nactual:     #<void>\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:33:4\nactual:     #<void>\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let ([a 0] [b 0] [c 2] [d 0])\n    (for ([i (in-range n)])\n      (let ([e (+ a b c d)])\n        (set! a b)\n        (set! b c)\n        (set! c d)\n        (set! d e)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:30:4\nactual:     #<void>\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:31:4\nactual:     #<void>\nexpected:   28\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:32:4\nactual:     #<void>\nexpected:   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfuhczys_.rkt:33:4\nactual:     #<void>\nexpected:   386\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039674
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039674
    }
  ]
}