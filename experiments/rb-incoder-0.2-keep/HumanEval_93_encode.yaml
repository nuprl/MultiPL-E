name: HumanEval_93_encode
language: ruby
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
  \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
  \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"\
  ))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
  ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
  This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
  I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
completions: ["  new_message = ''\n  message.each_char do |char|\n    if char.upcase\
    \ == char\n      new_message << char.upcase\n    elsif char.upcase == char.next\n\
    \      new_message << char.upcase\n    else\n      new_message << char.next\n\
    \    end\n  end\n  new_message\nend", "  new_message = ''\n  vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n  letters = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n  \n  for i in message\n\
    \    if letters.include? i\n      new_message += letters[letters.index(i) + 1]\n\
    \    elsif vowels.include? i\n      new_message += vowels[vowels.index(i) + 1]\n\
    \    else\n      new_message += i\n    end\n  end\n  \n  new_message\nend", " \
    \   vowels = 'AEIOU'\n    message = message.upcase\n    message = message.gsub(/[AEIOUaeiou]/)\
    \ { |m| vowels.index(m) }\n    message = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m)\
    \ + 2 }\n    message = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m) + 1\
    \ }\n    message = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m) + 1 }\n\
    \    message = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m) + 1 }\n    message\
    \ = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m) + 1 }\n    message = message.gsub(/[AEIOUaeiou]/)\
    \ { |m| vowels.index(m) + 1 }\n    message = message.gsub(/[AEIOUaeiou]/) { |m|\
    \ vowels.index(m) + 1 }\n    message = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m)\
    \ + 1 }\n    message = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m) + 1\
    \ }\n    message = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m) + 1 }\n\
    \    message = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m) + 1 }\n    message\
    \ = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m) + 1 }\n    message = message.gsub(/[AEIOUaeiou]/)\
    \ { |m| vowels.index(m) + 1 }\n    message = message.gsub(/[AEIOUaeiou]/) { |m|\
    \ vowels.index(m) + 1 }\n    message = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m)\
    \ + 1 }\n    message = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m) + 1\
    \ }\n    message = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m) + 1 }\n\
    \    message = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m) + 1 }\n    message\
    \ = message.gsub(/[AEIOUaeiou]/) { |m| vowels.index(m) + 1 }", "  new_message\
    \ = ''\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  letters = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z']\n  for i in message\n    if vowels.include?(i)\n      new_message += letters[vowels.index(i)+1]\n\
    \    else\n      new_message += i\n    end\n  end\n  new_message\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for your answer! I did some\
    \ research and found a similar solution to yours above. I'm going to post it as\
    \ an answer below.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.downcase!\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n", "  message = ''.join(message.split(' '))\n  message = ''.join(message.split('\
    \ ')).downcase\n  message = ''.join(message.split(' ')).gsub(/[aeiou]/i, '\\1')\n\
    \  message = ''.join(message.split(' ')).gsub(/[aeiou]/i, '\\1')\n  message =\
    \ ''.join(message.split(' ')).gsub(/[aeiou]/i, '\\1')\n  message = ''.join(message.split('\
    \ ')).gsub(/[aeiou]/i, '\\1')\n  message = ''.join(message.split(' ')).gsub(/[aeiou]/i,\
    \ '\\1')\n  message = ''.join(message.split(' ')).gsub(/[aeiou]/i, '\\1')\n  message\
    \ = ''.join(message.split(' ')).gsub(/[aeiou]/i, '\\1')\n  message = ''.join(message.split('\
    \ ')).gsub(/[aeiou]/i, '\\1')\n  message = ''.join(message.split(' ')).gsub(/[aeiou]/i,\
    \ '\\1')\n  message = ''.join(message.split(' ')).gsub(/[aeiou]/i, '\\1')\n  message\
    \ = ''.join(message.split(' ')).gsub(/[aeiou]/i, '\\1')\n  message = ''.join(message.split('\
    \ ')).gsub(/[aeiou]/i, '\\1')\n  message = ''.join(message.split(' ')).gsub(/[aeiou]/i,\
    \ '\\1')\n  message = ''.join(message.split(' ')).gsub(/[aeiou]/i, '\\1')\n  message\
    \ = ''.join(message.split(' ')).gsub(/[aeiou]/i, '\\1')\n  message = ''.join(message.split('\
    \ ')).gsub(/[aeiou]/i, '\\1')\n  message = ''.join(message.split(' ')).gsub(/[aeiou]/i,\
    \ '\\1')\n  message = ''.join(message.split(' ')).gsub(/[aeiou]/i, '\\1')\n  message\
    \ = ''.join(message.split(' ')).gsub(/[aeiou]/i, '\\1')\n  message = ''.join(message.split('\
    \ ')).gsub(/[aeiou]/i, '\\1')\n  message = ''.join(message.split(' ')).gsub(/[aeiou]/i,\
    \ '\\1')\n  message = ''.join(message.split(' ')).gsub(/[aeiou]/i, '\\1')\n  message\
    \ = ''.join(message.split(' ')).gsub(/[aeiou]/i, '\\1')\n  message = ''.join(message.split('\
    \ ')).gsub(/[aeiou]/i, '\\1')\n  message = ''.join(message.split(' ')).gsub(/[",
  "    message.downcase!\n    message.gsub!(/[aeiou]/) { |x| x.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n    message.gsub!(/[aeiou]/) { |x| x.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n    message.gsub!(/[aeiou]/) { |x| x.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n    message.gsub!(/[aeiou]/) { |x| x.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n    message.gsub!(/[aeiou]/) { |x| x.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n    message.gsub!(/[aeiou]/) { |x| x.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n    message.gsub!(/[aeiou]/) { |x| x.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n    message.gsub!(/[aeiou]/) { |x| x.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n    message.gsub!(/[aeiou]/) { |x| x.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n    message.gsub!(/[aeiou]/) { |x| x.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n    message.gsub!(/[aeiou]/) { |x| x.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n    message.gsub!(/[aeiou]/) { |x| x.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n    message.gsub!(/[aeiou]/) { |x| x.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n    message.gsub!(/[aeiou]/) { |", "  new_message = \"\"\n \
    \ vowels = \"aeiouAEIOU\"\n  \n  message.split(\"\").each do |letter|\n    letter\
    \ = letter.upcase\n    \n    vowels.each do |vowel|\n      new_message += letter.gsub(vowel,\
    \ vowel.upcase)\n    end\n  end\n  \n  return new_message\nend", "  alphabet =\
    \ %w(a b c d e f g h i j k l m n o p q r s t u v w x y z)\n  vowels = %w(a e i\
    \ o u)\n  message\n    .split(//)\n    .map { |letter| alphabet.index(letter)\
    \ + alphabet.index(letter) + 1 }\n    .map { |index| alphabet[index] }\n    .map\
    \ { |letter| vowels.include?(letter) ? letter : letter.upcase }\n    .join('')\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<| c |>\nThanks\
    \ so much for your help! I really appreciate it! I really appreciate your help\
    \ and your time!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help.\n<|/ c |>\n\
    <| a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<code>", "  message.gsub(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase.gsub(/[aeiou]/, '').chars.reverse.join\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThanks so much! I appreciate\
    \ it!\n<|/ c |>\n<| c |>\nNo problem! I added a more concise version that uses\
    \ `gsub` instead of `scan`, which might be more efficient.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  new_message = ''\n  \n  message.downcase!\n  \n  message.each_char\
    \ do |char|\n    \n    if char.upcase == char\n      new_message << char.upcase\n\
    \    else\n      new_message << char.downcase\n    end\n    \n  end\n  \n  new_message.gsub!(/[aeiou]/)\
    \ do |char|\n    \n    alphabet = ('A'..'Z').to_a\n    alphabet.index(char.upcase)\
    \ + 1\n  end\n  \n  new_message.gsub!(/[aeiou]/) do |char|\n    \n    alphabet\
    \ = ('A'..'Z').to_a\n    alphabet.index(char.downcase) + 1\n  end\n  \n  new_message\n\
    end", "  new_message = ''\n  vowels = 'AEIOU'\n  letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \  \n  message.each_char do |char|\n    if vowels.include?(char)\n      new_message\
    \ << letters[letters.index(char) + 2]\n    else\n      new_message << char\n \
    \   end\n  end\n  \n  new_message\nend", "    message.downcase!\n    message.gsub!(/[aeiou]/,\
    \ 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/, 'o')\n\
    \    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n    message.gsub!(/[aeiou]/,\
    \ 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/, 'o')\n\
    \    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n    message.gsub!(/[aeiou]/,\
    \ 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/, 'o')\n\
    \    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n    message.gsub!(/[aeiou]/,\
    \ 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/, 'o')\n\
    \    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n    message.gsub!(/[aeiou]/,\
    \ 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/, 'o')\n\
    \    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n    message.gsub!(/[aeiou]/,\
    \ 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/, 'o')\n\
    \    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n    message.gsub!(/[aeiou]/,\
    \ 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/, 'o')\n\
    \    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n    message.gsub!(/[aeiou]/,\
    \ 'e')\n    message.gsub!(/[aeiou", "  message.gsub!(/[a-z]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| ", "  new_message = \"\"\n  message.downcase!\n\
    \  message.each_char do |char|\n    if char.upcase == \"A\"\n      new_message\
    \ += \"B\"\n    elsif char.upcase == \"E\"\n      new_message += \"F\"\n    elsif\
    \ char.upcase == \"I\"\n      new_message += \"J\"\n    elsif char.upcase == \"\
    O\"\n      new_message += \"K\"\n    elsif char.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif char.upcase == \"Y\"\n      new_message += \"N\"\n    elsif\
    \ char.upcase == \"a\"\n      new_message += \"b\"\n    elsif char.upcase == \"\
    e\"\n      new_message += \"f\"\n    elsif char.upcase == \"i\"\n      new_message\
    \ += \"j\"\n    elsif char.upcase == \"o\"\n      new_message += \"k\"\n    elsif\
    \ char.upcase == \"u\"\n      new_message += \"l\"\n    elsif char.upcase == \"\
    y\"\n      new_message += \"n\"\n    elsif char.upcase == \"b\"\n      new_message\
    \ += \"a\"\n    elsif char.upcase == \"f\"\n      new_message += \"e\"\n    elsif\
    \ char.upcase == \"j\"\n      new_message += \"i\"\n    elsif char.upcase == \"\
    k\"\n      new_message += \"o\"\n    elsif char.upcase == \"l\"\n      new_message\
    \ += \"u\"\n    elsif char.upcase == \"n\"\n      new_message += \"y\"\n    end\n\
    \  end\n  new_message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    Thank you for the help! I appreciate it.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  new_message = ''\n  message.each_char do |char|\n    if char.upcase\
    \ == 'A'\n      new_message += char.upcase\n    elsif char.upcase == 'E'\n   \
    \   new_message += char.upcase\n    elsif char.upcase == 'I'\n      new_message\
    \ += char.upcase\n    elsif char.upcase == 'O'\n      new_message += char.upcase\n\
    \    elsif char.upcase == 'U'\n      new_message += char.upcase\n    elsif char.upcase\
    \ == 'Y'\n      new_message += char.upcase\n    elsif char.upcase == 'a'\n   \
    \   new_message += char.upcase\n    elsif char.upcase == 'e'\n      new_message\
    \ += char.upcase\n    elsif char.upcase == 'i'\n      new_message += char.upcase\n\
    \    elsif char.upcase == 'o'\n      new_message += char.upcase\n    elsif char.upcase\
    \ == 'u'\n      new_message += char.upcase\n    elsif char.upcase == 'y'\n   \
    \   new_message += char.upcase\n    elsif char.upcase == 'A'\n      new_message\
    \ += char.upcase\n    elsif char.upcase == 'E'\n      new_message += char.upcase\n\
    \    elsif char.upcase == 'I'\n      new_message += char.upcase\n    elsif char.upcase\
    \ == 'O'\n      new_message += char.upcase\n    elsif char.upcase == 'U'\n   \
    \   new_message += char.upcase\n    elsif char.upcase == 'Y'\n      new_message\
    \ += char.upcase\n    elsif char.upcase == 'a'\n      new_message += char.upcase\n\
    \    elsif char.upcase == 'e'\n      new_message += char.upcase\n    elsif char.upcase\
    \ == 'i'\n      new_message += char.upcase\n    elsif char.upcase == 'o'\n   \
    \   new_message += char.upcase\n    elsif char.upcase == 'u'\n      new_message\
    \ += char.upcase\n    elsif char.upcase == 'y'\n      new_message += char.upcase\n\
    \    elsif char.upcase ", "  new_message = ''\n  message.each_char do |char|\n\
    \    if char.upcase == char\n      new_message << char.upcase\n    elsif char.upcase\
    \ == char.next\n      new_message << char.upcase\n    else\n      new_message\
    \ << char.next\n    end\n  end\n  new_message\nend", "    message.downcase!\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou", "  message = message.downcase\n\
    \  vowels = %w[a e i o u]\n  message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ + 1] }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks so much!\
    \ This was really helpful.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>",
  "  new_message = ''\n  \n  message.each_char do |char|\n    if char.upcase == char\n\
    \      new_message << char.upcase\n    elsif char.upcase == char.next\n      new_message\
    \ << char.upcase\n    else\n      new_message << char.next\n    end\n  end\n \
    \ \n  new_message\nend\n</cell>\n<cell>", "  message = message.downcase\n  vowels\
    \ = 'aeiou'\n  message.replace vowels, 'a'\n  message.replace /[aeiouy]+/, 'a'\n\
    \  message.replace /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/, 'a'\n  message.replace\
    \ /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/,\
    \ 'a'\n  message.replace /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/, 'a'\n\
    \  message.replace /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/, 'a'\n  message.replace\
    \ /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/,\
    \ 'a'\n  message.replace /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/, 'a'\n\
    \  message.replace /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/, 'a'\n  message.replace\
    \ /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/,\
    \ 'a'\n  message.replace /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/, 'a'\n\
    \  message.replace /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/, 'a'\n  message.replace\
    \ /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/,\
    \ 'a'\n  message.replace /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/, 'a'\n\
    \  message.replace /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/, 'a'\n  message.replace\
    \ /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/, 'a'\n  message.replace /[aeiouy]+/,\
    \ 'a'\n  message.replace /[aeiouy]+/, 'a'\n  ", "  alphabet = %w(a b c d e f g\
    \ h i j k l m n o p q r s t u v w x y z)\n  vowels = %w(a e i o u)\n  message.gsub(/./)\
    \ do |letter|\n    alphabet.index(letter) + alphabet.index(letter).succ\n  end\n\
    end", "  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |", "    message = message.downcase\n    vowels = %w[a e i o u]\n    vowels.each\
    \ do |vowel|\n        message = message.gsub(vowel, vowels[vowels.index(vowel)\
    \ + 1])\n    end\n    message = message.gsub(/[aeiou]/, 'X')\n    message = message.gsub(/[aeiou]/,\
    \ 'Y')\n    message = message.gsub(/[aeiou]/, 'Z')\n    message = message.gsub(/[aeiou]/,\
    \ 'A')\n    message = message.gsub(/[aeiou]/, 'B')\n    message = message.gsub(/[aeiou]/,\
    \ 'C')\n    message = message.gsub(/[aeiou]/, 'D')\n    message = message.gsub(/[aeiou]/,\
    \ 'E')\n    message = message.gsub(/[aeiou]/, 'F')\n    message = message.gsub(/[aeiou]/,\
    \ 'G')\n    message = message.gsub(/[aeiou]/, 'H')\n    message = message.gsub(/[aeiou]/,\
    \ 'I')\n    message = message.gsub(/[aeiou]/, 'J')\n    message = message.gsub(/[aeiou]/,\
    \ 'K')\n    message = message.gsub(/[aeiou]/, 'L')\n    message = message.gsub(/[aeiou]/,\
    \ 'M')\n    message = message.gsub(/[aeiou]/, 'N')\n    message = message.gsub(/[aeiou]/,\
    \ 'O')\n    message = message.gsub(/[aeiou]/, 'P')\n    message = message.gsub(/[aeiou]/,\
    \ 'Q')\n    message = message.gsub(/[aeiou]/, 'R')\n    message = message.gsub(/[aeiou]/,\
    \ 'S')\n    message = message.gsub(/[aeiou]/, 'T')\n    message = message.gsub(/[aeiou]/,\
    \ 'U')\n    message = message.gsub(/[aeiou]/, 'V')\n    message = message.gsub(/[aeiou]/,\
    \ 'W')\n    message = message.gsub(/[aeiou]/, 'X')\n    message = message.gsub(/[aeiou]/,\
    \ 'Y')\n    message = message.gsub(/[aeiou]/, 'Z')\n    message = message.gsub(/[aeiou]/,\
    \ 'A')\n    message = message.gsub(/[aeiou]/, 'B')\n    message = message.gsub(/[aeiou]/,\
    \ 'C')\n    message = message.gsub(/[aeiou]/, 'D')\n    message = message.gsub(/",
  "  new_message = ''\n  vowels = 'AEIOUaeiou'\n  for i in message\n    if vowels.include?(i)\n\
    \      new_message += i.upcase\n    else\n      new_message += i.downcase\n  \
    \  end\n  end\n  new_message\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\n\
    This doesn't work. `'This is a message'.downcase` returns `'THIS is a message'`,\
    \ which is not what OP wants.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks\
    \ for pointing that out. I've updated my answer.\n<|/ c |>\n<| c |>\nThis still\
    \ doesn't work. `'This is a message'.downcase` returns `'THIS is a message'`,\
    \ which is not what OP wants.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks\
    \ for pointing that out. I've updated my answer.\n<|/ c |>\n<| a |>\n<code>",
  "    vowels = 'aeiouAEIOU'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    message\
    \ = message.downcase\n    message = message.gsub(vowels, alphabet[alphabet.index(vowels.next)])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    message = message.gsub(/[aeiou]/, alphabet[alphabet.index(vowels.next)-1])\n\
    \    ", "  message\nend", "  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |", "  alphabet = %w(a b c d e f g h i j k l\
    \ m n o p q r s t u v w x y z)\n  vowels = %w(a e i o u)\n  message.gsub(/[#{vowels.join('|')}]/)\
    \ { |vowel| alphabet[alphabet.index(vowel) + 2] }\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for the help! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ I added a more efficient solution that doesn't require the use of `gsub`.\n\
    <|/ c |>\n<| a tags=ruby,string |>\n<code>", "  new_message = ''\n  vowels = 'aeiouAEIOU'\n\
    \  \n  new_message = message.downcase\n  new_message.gsub!(vowels, '')\n  new_message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  new_message.gsub!(/[AEIOU]/) { |m| m.succ }\n  new_message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  new_message.gsub!(/[AEIOU]/) { |m| m.succ }\n  new_message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  new_message.gsub!(/[AEIOU]/) { |m| m.succ }\n  new_message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  new_message.gsub!(/[AEIOU]/) { |m| m.succ }\n  new_message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  new_message.gsub!(/[AEIOU]/) { |m| m.succ }\n  new_message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  new_message.gsub!(/[AEIOU]/) { |m| m.succ }\n  new_message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  new_message.gsub!(/[AEIOU]/) { |m| m.succ }\n  new_message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  new_message.gsub!(/[AEIOU]/) { |m| m.succ }\n  new_message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  new_message.gsub!(/[AEIOU]/) { |m| m.succ }\n  new_message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  new_message.gsub!(/[AEIOU]/) { |m| m.succ }\n  new_message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  new_message.gsub!(/[AEIOU]/) { |m| m.succ }\n  new_message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  new_message.gsub!(/", "  message.downcase!\n  message.gsub!(/[aeiou]/i,\
    \ 'e')\n  message.gsub!(/[aeiou]/i, 'a')\n  message.gsub!(/[aeiou]/i, 'o')\n \
    \ message.gsub!(/[aeiou]/i, 'u')\n  message.gsub!(/[aeiou]/i, 'y')\n  message.gsub!(/[aeiou]/i,\
    \ 'a')\n  message.gsub!(/[aeiou]/i, 'e')\n  message.gsub!(/[aeiou]/i, 'o')\n \
    \ message.gsub!(/[aeiou]/i, 'u')\n  message.gsub!(/[aeiou]/i, 'y')\n  message.gsub!(/[aeiou]/i,\
    \ 'a')\n  message.gsub!(/[aeiou]/i, 'e')\n  message.gsub!(/[aeiou]/i, 'o')\n \
    \ message.gsub!(/[aeiou]/i, 'u')\n  message.gsub!(/[aeiou]/i, 'y')\n  message.gsub!(/[aeiou]/i,\
    \ 'a')\n  message.gsub!(/[aeiou]/i, 'e')\n  message.gsub!(/[aeiou]/i, 'o')\n \
    \ message.gsub!(/[aeiou]/i, 'u')\n  message.gsub!(/[aeiou]/i, 'y')\n  message.gsub!(/[aeiou]/i,\
    \ 'a')\n  message.gsub!(/[aeiou]/i, 'e')\n  message.gsub!(/[aeiou]/i, 'o')\n \
    \ message.gsub!(/[aeiou]/i, 'u')\n  message.gsub!(/[aeiou]/i, 'y')\n  message.gsub!(/[aeiou]/i,\
    \ 'a')\n  message.gsub!(/[aeiou]/i, 'e')\n  message.gsub!(/[aeiou]/i, 'o')\n \
    \ message.gsub!(/[aeiou]/i, 'u')\n  message.gsub!(/[aeiou]/i, 'y')\n  message.gsub!(/[aeiou]/i,\
    \ 'a')\n  message.gsub!(/[aeiou]/i, 'e')\n  message.gsub!(/[aeiou]/i, 'o')\n \
    \ message.gsub!(/[aeiou]/i, 'u')\n  message.gsub!(/[aeiou", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| \n    vowel.upcase + vowel.succ\n  }\n  message.gsub!(/[aeiou]/) {\
    \ |vowel| \n    vowel.upcase + vowel.succ\n  }\n  message.gsub!(/[aeiou]/) { |vowel|\
    \ \n    vowel.upcase + vowel.succ\n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n\
    \    vowel.upcase + vowel.succ\n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n \
    \   vowel.upcase + vowel.succ\n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n  \
    \  vowel.upcase + vowel.succ\n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n   \
    \ vowel.upcase + vowel.succ\n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.upcase\
    \ + vowel.succ\n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.upcase +\
    \ vowel.succ\n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.upcase + vowel.succ\n\
    \  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.upcase + vowel.succ\n \
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.upcase + vowel.succ\n  }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.upcase + vowel.succ\n  }\n \
    \ message.gsub!(/[aeiou]/) { |vowel| \n    vowel.upcase + vowel.succ\n  }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| \n    vowel.upcase + vowel.succ\n  }\n  message.gsub!(/[aeiou]/) {\
    \ |vowel| \n    vowel.upcase + vowel.succ\n  }\n  message.gsub!(/[aeiou]/) { |vowel|\
    \ \n    vowel.upcase + vowel.succ\n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n\
    \    vowel.upcase + vowel.succ\n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n \
    \   vowel.upcase + vowel.succ\n  }", "  message.gsub!(/[aeiou]/) { |x| x.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) {\
    \ |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n\
    \  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |", "    message.downcase!\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.upcase[vowel.index(vowel) + 1]\n  end\n  message\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for the help! I appreciate\
    \ it!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[aeiou]/) { |vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |", "  new_message = ''\n  message.each_char do\
    \ |char|\n    char = char.upcase\n    vowels = ['A','E','I','O','U']\n    vowels.each\
    \ do |vowel|\n      if char == vowel\n        new_message << vowel\n      else\n\
    \        new_message << char.next\n      end\n    end\n  end\n  new_message\n\
    end\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThanks for the response! I appreciate\
    \ it. I was able to get it working with your help. I appreciate it!\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "  new_message = ''\n  message.each_char do |char|\n\
    \    if char.upcase == char\n      new_message << char.upcase\n    elsif char.upcase\
    \ == char.next\n      new_message << char.upcase\n    else\n      new_message\
    \ << char.next\n    end\n  end\n  new_message\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for your answer! I understand that my code was a little bit too\
    \ complicated. Your code works perfectly fine, but I still don't understand why\
    \ my code doesn't work. Could you please explain to me why my code doesn't work?\n\
    <|/ c |>\n<| c |>\nI added a little explanation to the answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your explanation! I understand now why my code doesn't\
    \ work. Your code works perfectly fine, but I still don't understand why my code\
    \ doesn't work. Could you please explain to me why my code doesn't work?\n<|/\
    \ c |>\n<| c |>\nI added an explanation to the answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your explanation! I understand now why my code doesn't work.\
    \ Your code works perfectly fine, but I still don't understand why my code doesn't\
    \ work. Could you please explain to me why my code doesn't work?\n<|/ c |>\n<|\
    \ a |>\nThe problem is with your if statement. \n<code>\nif char.upcase == char\n\
    </code>\nThis checks if the character is equal to the character after it. So if\
    \ your character is \"a\" and the character after it is \"b\", then your if statement\
    \ will evaluate to true. \nWhat you actually want to do is check if the character\
    \ is equal to the character before it. \n<code>\nif char.upcase == char.next\n\
    </code>\n<|/ a tags=ruby,string,ruby-on-rails dscore=0 |>\n<| c |>\nThanks for\
    \ your answer! I understand that my code was a little bit too complicated. Your\
    \ code works perfectly fine, but I still don't understand why my code doesn't\
    \ work. Could you please explain to me why my code doesn't work?\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>", "    message = message.downcase\n    vowels = %w[a e\
    \ i o u]\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ + 1] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ - 1] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ + 2] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ - 2] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ + 3] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ - 3] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ + 4] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ - 4] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ + 5] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ - 5] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ + 6] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ - 6] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ + 7] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ - 7] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ + 8] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ - 8] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ + 9] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ - 9] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ + 10] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ - 10] }\n    message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel",
  "  new_message = ''\n  message.each_char do |char|\n    if char.upcase == char\n\
    \      new_message << char.upcase\n    elsif char.upcase == char.next\n      new_message\
    \ << char.next\n    else\n      new_message << char.upcase\n    end\n  end\n \
    \ new_message\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI like your solution,\
    \ however it fails for `'This is a message'`\n<|/ c |>\n<| c |>\nIt fails for\
    \ `'This is a message'` because `'This is a message'.each_char` returns `[\"T\"\
    , \"H\", \"I\", \"S\", \"T\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\"\
    , \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\"\
    , \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\"\
    , \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\"\
    , \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\"\
    , \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\"\
    , \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\"\
    , \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\"\
    , \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\"\
    , \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\"\
    , \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\"\
    , \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\"\
    , \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\"\
    , \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\"\
    , \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\"\
    , \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\"\
    , \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\", \"G\", \"C\", \"G\", \"G\"\
    , \"G\", \"", "  new_message = ''\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  for\
    \ i in message\n    if vowels.include?(i)\n      new_message += i.upcase\n   \
    \ else\n      new_message += i.downcase\n    end\n  end\n  new_message\nend",
  "    message = message.upcase\n    vowels = %w[a e i o u]\n    message.gsub(/[aeiou]/)\
    \ { |vowel| vowels[vowels.index(vowel) + 1] }\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for the answer! I didn't know about `gsub!`. I tried your solution\
    \ and it works. However, I still don't understand why my code doesn't work. Can\
    \ you explain why my code doesn't work?\n<|/ c |>\n<| c |>\nThe reason your code\
    \ doesn't work is that `gsub!` doesn't modify the original string; it returns\
    \ a new string. Your code modifies the original string by replacing each vowel\
    \ with its next letter, but then you discard the return value of `gsub!`. You\
    \ then call `encode` on the original string, which doesn't have any vowels in\
    \ it, so it returns an empty string.\n<|/ c |>\n<| c |>\nAh I see. So I should\
    \ use `gsub!` instead of `gsub` and then return the modified string. Thanks!\n\
    <|/ c |>\n<| c |>\nYes, that's exactly what you should do. `gsub!` modifies the\
    \ original string in place, so you don't need to return anything. `gsub` returns\
    \ a new string, so you need to assign that to something.\n<|/ c |>\n<| c |>\n\
    Thanks for the explanation! I understand it now!\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>", "    message.downcase!\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n\
    \    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m|\
    \ m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |", "  new_message = ''\n  message.each_char do |char|\n    if char.upcase\
    \ == char\n      new_message << char.upcase\n    elsif char.upcase == char.next\n\
    \      new_message << char.upcase\n    else\n      new_message << char.next\n\
    \    end\n  end\n  new_message\nend", "  new_message = ''\n  message.each_char\
    \ do |char|\n    if char.upcase == 'A'\n      new_message << char.upcase\n   \
    \ elsif char.upcase == 'E'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'I'\n      new_message << char.upcase\n    elsif char.upcase == 'O'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'U'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'Y'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'a'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'e'\n      new_message << char.upcase\n    elsif char.upcase == 'i'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'o'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'u'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'y'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'A'\n      new_message << char.upcase\n    elsif char.upcase == 'E'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'I'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'O'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'U'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'Y'\n      new_message << char.upcase\n    elsif char.upcase == 'a'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'e'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'i'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'o'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'u'\n      new_message << char.upcase\n    elsif char.upcase == 'y'\n   \
    \   new_message << char.upcase\n    elsif char.upcase ", "  message.downcase!\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    alphabet.index(vowel) + 2 \n  }\n \
    \ message.gsub(/[aeiou]/) { |vowel| \n    alphabet.index(vowel) + 1 \n  }\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c\
    \ |>\n<| c |>\nNo problem! Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    alphabet = %w[a b c d e f g h i j k l m n o p q r s t u v w x y z]\n    vowels\
    \ = %w[a e i o u]\n    message = message.downcase\n    message.gsub!(/[aeiou]/)\
    \ { |m| alphabet[alphabet.index(m) + 1] }\n    message.gsub!(/[aeiou]/) { |m|\
    \ vowels[vowels.index(m) + 1] }\n    message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m)\
    \ + 1] }\n    message.gsub!(/[aeiou]/) { |m| vowels[vowels.index(m) + 1] }\n \
    \   message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m) + 1] }\n    message.gsub!(/[aeiou]/)\
    \ { |m| vowels[vowels.index(m) + 1] }\n    message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m)\
    \ + 1] }\n    message.gsub!(/[aeiou]/) { |m| vowels[vowels.index(m) + 1] }\n \
    \   message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m) + 1] }\n    message.gsub!(/[aeiou]/)\
    \ { |m| vowels[vowels.index(m) + 1] }\n    message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m)\
    \ + 1] }\n    message.gsub!(/[aeiou]/) { |m| vowels[vowels.index(m) + 1] }\n \
    \   message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m) + 1] }\n    message.gsub!(/[aeiou]/)\
    \ { |m| vowels[vowels.index(m) + 1] }\n    message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m)\
    \ + 1] }\n    message.gsub!(/[aeiou]/) { |m| vowels[vowels.index(m) + 1] }\n \
    \   message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m) + 1] }\n    message.gsub!(/[aeiou]/)\
    \ { |m| vowels[vowels.index(m) + 1] }\n    message.gsub!(/[aeiou]/) { |m| alphabet[alphabet.index(m)\
    \ + 1] }\n    message.gsub!(/[aeiou]/) { |", "  new_message = ''\n  vowels = 'AEIOU'\n\
    \  letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  \n  message.downcase!\n  message.gsub!(vowels,\
    \ letters[letters.index(vowels.first)])\n  message.gsub!(/[AEIOU]/.to_sym, letters[letters.index(vowels.first)])\n\
    \  \n  message.each_char do |char|\n    new_message << char\n  end\n  \n  new_message\n\
    end", "    message.downcase!\n    message.gsub!(/[aeiou]/) do |letter|\n     \
    \   letter.upcase\n    end\n    message.gsub!(/[aeiou]/) do |letter|\n       \
    \ letter.upcase\n    end\n    message.gsub!(/[aeiou]/) do |letter|\n        letter.upcase\n\
    \    end\n    message.gsub!(/[aeiou]/) do |letter|\n        letter.upcase\n  \
    \  end\n    message.gsub!(/[aeiou]/) do |letter|\n        letter.upcase\n    end\n\
    \    message.gsub!(/[aeiou]/) do |letter|\n        letter.upcase\n    end\n  \
    \  message.gsub!(/[aeiou]/) do |letter|\n        letter.upcase\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase\n    end\n    message.gsub!(/[aeiou]/) do\
    \ |letter|\n        letter.upcase\n    end\n    message.gsub!(/[aeiou]/) do |letter|\n\
    \        letter.upcase\n    end\n    message.gsub!(/[aeiou]/) do |letter|\n  \
    \      letter.upcase\n    end\n    message.gsub!(/[aeiou]/) do |letter|\n    \
    \    letter.upcase\n    end\n    message.gsub!(/[aeiou]/) do |letter|\n      \
    \  letter.upcase\n    end\n    message.gsub!(/[aeiou]/) do |letter|\n        letter.upcase\n\
    \    end\n    message.gsub!(/[aeiou]/) do |letter|\n        letter.upcase\n  \
    \  end\n    message.gsub!(/[aeiou]/) do |letter|\n        letter.upcase\n    end\n\
    \    message.gsub!(/[aeiou]/) do |letter|\n        letter.upcase\n    end\n  \
    \  message.gsub!(/[aeiou]/) do |letter|\n        letter.upcase\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase\n    end\n    message.gsub!(/[aeiou]/) do\
    \ |letter|\n        letter.upcase\n    end\n    message.gsub!(/[aeiou]/) do |letter|\n\
    \        letter.upcase\n    end\n    message.gsub!(/[aeiou]/) do |letter|\n  \
    \      letter.upcase\n    end\n", "  message = message.downcase\n  vowels = 'aeiou'\n\
    \  consonants = 'bcdfghjklmnpqrstvwxyz'\n  \n  message.replace vowels, 'a'\n \
    \ message.replace consonants, 'b'\n  \n  message.replace /[aeiou]/, 'a'\n  message.replace\
    \ /[bcdfghjklmnpqrstvwxyz]/, 'b'\n  \n  message.replace /[aeiou]/, 'a'\n  message.replace\
    \ /[bcdfghjklmnpqrstvwxyz]/, 'b'\n  \n  message.replace /[aeiou]/, 'a'\n  message.replace\
    \ /[bcdfghjklmnpqrstvwxyz]/, 'b'\n  \n  message.replace /[aeiou]/, 'a'\n  message.replace\
    \ /[bcdfghjklmnpqrstvwxyz]/, 'b'\n  \n  message.replace /[aeiou]/, 'a'\n  message.replace\
    \ /[bcdfghjklmnpqrstvwxyz]/, 'b'\n  \n  message.replace /[aeiou]/, 'a'\n  message.replace\
    \ /[bcdfghjklmnpqrstvwxyz]/, 'b'\n  \n  message.replace /[aeiou]/, 'a'\n  message.replace\
    \ /[bcdfghjklmnpqrstvwxyz]/, 'b'\n  \n  message.replace /[aeiou]/, 'a'\n  message.replace\
    \ /[bcdfghjklmnpqrstvwxyz]/, 'b'\n  \n  message.replace /[aeiou]/, 'a'\n  message.replace\
    \ /[bcdfghjklmnpqrstvwxyz]/, 'b'\n  \n  message.replace /[aeiou]/, 'a'\n  message.replace\
    \ /[bcdfghjklmnpqrstvwxyz]/, 'b'\n  \n  message.replace /[aeiou]/, 'a'\n  message.replace\
    \ /[bcdfghjklmnpqrstvwxyz]/, 'b'\n  \n  message.replace /[aeiou]/, 'a'\n  message.replace\
    \ /[bcdfghjklmnpqrstvwxyz]/, 'b'\n  \n  message.replace /[aeiou]/, 'a'\n  message.replace\
    \ /[bcdfghjklmnpqrstvwxyz]/, 'b'\n  \n  message.replace /[aeiou]/, 'a'\n  message.replace\
    \ /[", "  new_message = ''\n  vowels = 'aeiouAEIOU'\n  for i in message\n    if\
    \ vowels.include?(i)\n      new_message << i.upcase\n    else\n      new_message\
    \ << i.downcase\n    end\n  end\n  return new_message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  message = message.downcase\n  vowels = %w[a e i o u]\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowels[vowels.index(vowel) + 1] }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for the help! I appreciate it!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "    alphabet = %w(a b c d e f g h i j k l m n o p q r s t u v\
    \ w x y z)\n    message.gsub(/./) { |char| alphabet.index(char).to_s }\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI appreciate your help, but\
    \ I really don't understand how this works. I understand that you're using gsub\
    \ to replace all characters with their index, but I don't understand how that\
    \ works. Could you please explain how this works?\n<|/ c |>\n<| c |>\n`gsub` takes\
    \ a regular expression (`/./`) and a block (`{ |char| alphabet.index(char).to_s\
    \ }`) and replaces all matches with the block's return value. In this case, the\
    \ block is `{ |char| alphabet.index(char).to_s }`, which returns the character\
    \ index in the alphabet of the character being replaced. So `gsub` replaces every\
    \ character in the string with the character index.\n<|/ c |>\n<| c |>\nThanks\
    \ so much for the explanation! I understand it now!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend", "  alphabet = %w[a b c d e f g h i j k l m n o p q r s t u v\
    \ w x y z]\n  vowels = %w[a e i o u]\n  new_message = ''\n  message.each_char\
    \ do |char|\n    if alphabet.include?(char)\n      new_message << alphabet[alphabet.index(char)\
    \ + 1]\n    elsif vowels.include?(char)\n      new_message << vowels[vowels.index(char)\
    \ + 1]\n    else\n      new_message << char\n    end\n  end\n  new_message\nend\n\
    </code>\n<|/ a tags=ruby,string |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to do this without using regular expressions?\n<|/ c |>\n\
    <| c |>\nI added a solution without regular expressions.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I wonder if there is a way to do this without using\
    \ regular expressions?\n<|/ c |>\n<| c |>\nI added a solution without regular\
    \ expressions.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  message = message.downcase\n\
    \  vowels = %w[a e i o u]\n  message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ + 1] }\n  message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ - 1] }\n  message\nend\n</cell>\n<cell>", "    message.gsub!(/[aeiou]/) do |letter|\n\
    \        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/) do\
    \ |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    letter = english_letters[english_letters.index(vowel) + 1]\n\
    \    vowel.upcase!\n    vowel.sub(vowel, letter)\n  }\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. `'This is a message'.gsub(/[aeiou]/) { |vowel|\
    \ letter = english_letters[english_letters.index(vowel) + 1]; vowel.upcase!; vowel.sub(vowel,\
    \ letter) }` returns `'THKS KS C MGSSCGG'`\n<|/ c |>\n<| c |>\nIt does work. `'This\
    \ is a message'.gsub(/[aeiou]/) { |vowel| letter = english_letters[english_letters.index(vowel)\
    \ + 1]; vowel.upcase!; vowel.sub(vowel, letter) }` returns `'tHKS KS C MGSSCGG'`\n\
    <|/ c |>\n<| c |>\nAh, I see what you mean. You're right. I was thinking about\
    \ it backwards. I thought the OP was trying to replace all vowels with their english\
    \ equivalent. I'll update my answer.\n<|/ c |>\n<| c |>\nThanks for the answer.\
    \ I'm going to try this out and see if it works. I appreciate your help.\n<|/\
    \ c |>\n<| c |>\nI updated my answer to include a solution that doesn't require\
    \ any additional libraries.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "   \
    \ vowels = 'AEIOU'\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    \n    message\
    \ = message.downcase\n    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)..letters.index(vowels.next)+1])\n\
    \    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)+1..letters.index(vowels.next)+2])\n\
    \    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)+2..letters.index(vowels.next)+3])\n\
    \    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)+3..letters.index(vowels.next)+4])\n\
    \    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)+4..letters.index(vowels.next)+5])\n\
    \    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)+5..letters.index(vowels.next)+6])\n\
    \    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)+6..letters.index(vowels.next)+7])\n\
    \    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)+7..letters.index(vowels.next)+8])\n\
    \    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)+8..letters.index(vowels.next)+9])\n\
    \    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)+9..letters.index(vowels.next)+10])\n\
    \    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)+10..letters.index(vowels.next)+11])\n\
    \    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)+11..letters.index(vowels.next)+12])\n\
    \    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)+12..letters.index(vowels.next)+13])\n\
    \    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)+13..letters.index(vowels.next)+14])\n\
    \    \n    message = message.gsub(/[aeiou]/, letters[letters.index(vowels.next)+14..letters.index(vowels.next)+15])\n\
    \    \n    message = message.gsub(/[", "  new_message = ''\n  vowels = 'aeiouAEIOU'\n\
    \  for i in message\n    if vowels.include?(i)\n      new_message += i.upcase\n\
    \    else\n      new_message += i.downcase\n    end\n  end\n  new_message\nend\n\
    </cell>\n<cell>", "    message.downcase!\n    message.gsub!(/[aeiou]/) { |m| m.succ\
    \ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend", "  new_message = ''\n  message.each_char do |char|\n    if char.upcase\
    \ == char\n      new_message << char\n    elsif char.upcase == char.next\n   \
    \   new_message << char.next\n    else\n      new_message << char.upcase\n   \
    \ end\n  end\n  new_message\nend", "  message.downcase!\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'e')\n  message.g",
  "  new_message = ''\n  \n  message.each_char do |char|\n    if char.upcase == 'A'\n\
    \      new_message << char.upcase\n    elsif char.upcase == 'E'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'I'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'O'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'U'\n      new_message << char.upcase\n    elsif char.upcase == 'Y'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'a'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'e'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'i'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'o'\n      new_message << char.upcase\n    elsif char.upcase == 'u'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'y'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'A'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'E'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'I'\n      new_message << char.upcase\n    elsif char.upcase == 'O'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'U'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'Y'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'a'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'e'\n      new_message << char.upcase\n    elsif char.upcase == 'i'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'o'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'u'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'y'\n      new_message << char.upcase\n    elsif char.",
  "  new_message = ''\n  vowels = 'aeiouAEIOU'\n  letters = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  \n  new_message = message\n  \n  new_message = new_message.gsub(/[aeiou]/)\
    \ do |letter|\n    letters.index(letter) + 2\n  end\n  \n  new_message = new_message.gsub(/[#{vowels}]/)\
    \ do |vowel|\n    letters.index(vowel) + 1\n  end\n  \n  new_message\nend", " \
    \ message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x|\
    \ x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou", "    alphabet = %w(a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z)\n    message.each_char do |char|\n        alphabet.each\
    \ do |letter|\n            if char == letter\n                char == alphabet[alphabet.index(letter)\
    \ + 1]\n            end\n        end\n    end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work. `%w(a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z)` returns `[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]`\n<|/ c |>\n<| c |>\nYes,\
    \ I noticed that and fixed it.  Thanks.\n<|/ c |>\n<| a |>\n<code>", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[letter.index(letter) + 1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message\n\
    end", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end", "  new_message = ''\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  message\
    \ = message.downcase\n  message.gsub!(/[^a-z]/, '')\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowels[vowels.index(vowel) + 1] }\n  message.gsub!(/[aeiou]/) { |vowel|\
    \ vowels[vowels.index(vowel) - 1] }\n  message.each_char { |char| new_message\
    \ << char.upcase }\n  new_message\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for the answer! I understand how it works, but I still don't understand\
    \ why my code doesn't work. Could you please explain why my code doesn't work?\n\
    <|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\n\
    Thanks for the explanation! I understand it now. :)\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\nYour code doesn't work because you use gsub! which replaces all the occurrences\
    \ of the given pattern with the replacement string. \nIn your case you just want\
    \ to replace the first occurrence of the pattern. \n<code>", "  new_message =\
    \ ''\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    else\n      new_message << char.downcase\n    end\n  end\n\
    \  new_message.gsub!(/[aeiou]/) { |vowel| alphabet[alphabet.index(vowel) + 2]\
    \ }\n  new_message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    This works great for english letters, but not for other languages. For example,\
    \ `encode('\xC9\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\
    \xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\
    \xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\
    \xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\
    \xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\
    \xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\
    \xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\
    \xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\
    \xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\
    \xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\
    \xD9\xC7\xCD", "  new_message = ''\n  message.each_char do |char|\n    if char.upcase\
    \ == char\n      new_message << char.upcase\n    else\n      new_message << char.downcase\n\
    \    end\n  end\n  new_message.gsub(/[AEIOUaeiou]/) do |char|\n    alphabet =\
    \ ('A'..'Z').to_a\n    alphabet.index(char.upcase) + 1\n  end\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nThanks for the help.\
    \ I appreciate it. I will try this out and let you know how it goes.\n<|/ c |>\n\
    <| c |>\nI got it to work, but I ran into another problem. My code was giving\
    \ me the wrong output. For example, I was getting \"tHKS KS C MGSSCGG\" when I\
    \ was supposed to get \"tHKS KS C MGSSCGG\". Any idea why that would be?\n<|/\
    \ c |>\n<| c |>\nI updated my answer with some more explanation and a link to\
    \ another SO question that explains why your original code didn't work.\n<|/ c\
    \ |>\n<| c |>\nThanks so much! I appreciate it.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  new_message\
    \ = \"\"\n  message.split(\"\").each do |letter|\n    letter = letter.upcase \n\
    \    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels.each do |vowel|\n\
    \      if letter.include?(vowel)\n        letter = letter.gsub(vowel, letter.index(vowel)\
    \ + 2)\n      end\n    end\n    new_message << letter\n  end\n  new_message\n\
    end\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThanks so much! This was really\
    \ helpful.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message = message.downcase\n\
    \  vowels = %w[a e i o u]\n  message.gsub(/[aeiou]/) { |m| vowels.index(m) + 2\
    \ }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks so much!\
    \ This was very helpful.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase + letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n", "    message.downcase!\n    message.gsub(/[aeiou]/)\
    \ { |vowel| \n        alphabet[alphabet.index(vowel) + 1]\n    }\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but I already know how\
    \ to use `gsub` and I already know how to use `index`. What I'm looking for is\
    \ a way to do this without using those methods.\n<|/ c |>\n<| c |>\nI added an\
    \ example that uses `gsub` and `index`.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ efforts, but I already know how to use `gsub` and I already know how to use\
    \ `index`. What I'm looking for is a way to do this without using those methods.\n\
    <|/ c |>\n<| c |>\nI added an example that uses `gsub` and `index`.\n<|/ c |>\n\
    <| c |>\nI appreciate your efforts, but I already know how to use `gsub` and I\
    \ already know how to use `index`. What I'm looking for is a way to do this without\
    \ using those methods.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  new_message =\
    \ ''\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    else\n      new_message << char.downcase\n    end\n  end\n\
    \  new_message.gsub!(/[aeiou]/) do |char|\n    alphabet[alphabet.index(char.upcase)\
    \ + alphabet.index(char.downcase)]\n  end\n  new_message\nend\n</code>\n<|/ a\
    \ tags=ruby,string |>\n<| c |>\nThanks so much for taking the time to write this\
    \ out. I'm going to have to study this for a bit to understand it better, but\
    \ I really appreciate it!\n<|/ c |>\n<| c |>\nI added some comments to help you\
    \ understand what's going on. Let me know if you have any questions.\n<|/ c |>\n\
    <| c |>\nThanks so much for taking the time to write this out. I'm going to have\
    \ to study this for a bit to understand it better, but I really appreciate it!\n\
    <|/ c |>\n<| c |>\nI added some comments to help you understand what's going on.\
    \ Let me know if you have any questions.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|",
  "    alphabet = %w(a b c d e f g h i j k l m n o p q r s t u v w x y z)\n    vowels\
    \ = %w(a e i o u)\n    \n    message = message.downcase\n    \n    message.gsub(/[aeiou]/)\
    \ { |letter| alphabet.index(letter) + 2 }\n    message.gsub(/[aeiou]/) { |letter|\
    \ alphabet.index(letter) + 1 }\n    message.gsub(/[aeiou]/) { |letter| alphabet.index(letter)\
    \ }\n    \n    message.gsub(/[aeiou]/) { |letter| vowels.include?(letter) ? letter\
    \ : alphabet.index(letter) + 1 }\n    \n    message.gsub(/[aeiou]/) { |letter|\
    \ vowels.include?(letter) ? letter : alphabet.index(letter) + 2 }\n    \n    message.gsub(/[aeiou]/)\
    \ { |letter| vowels.include?(letter) ? letter : alphabet.index(letter) }\n   \
    \ \n    message.gsub(/[aeiou]/) { |letter| vowels.include?(letter) ? letter :\
    \ alphabet.index(letter) + 1 }\n    \n    message.gsub(/[aeiou]/) { |letter| vowels.include?(letter)\
    \ ? letter : alphabet.index(letter) + 2 }\n    \n    message.gsub(/[aeiou]/) {\
    \ |letter| vowels.include?(letter) ? letter : alphabet.index(letter) }\n    \n\
    \    message.gsub(/[aeiou]/) { |letter| vowels.include?(letter) ? letter : alphabet.index(letter)\
    \ + 1 }\n    \n    message.gsub(/[aeiou]/) { |letter| vowels.include?(letter)\
    \ ? letter : alphabet.index(letter) + 2 }\n    \n    message.gsub(/[aeiou]/) {\
    \ |letter| vowels.include?(letter) ? letter : alphabet.index(letter) }\n    \n\
    \    message.gsub(/[aeiou]/) { |letter| vowels.include?(letter) ? letter : alphabet.index(letter)\
    \ + 1 }\n    \n    message.gsub(/[aeiou]/) { |letter| vowels.include?(letter)\
    \ ? letter : alphabet.index(letter) + 2 }\n    \n    message.gsub(/[aeiou]/) {\
    \ |letter| vowels.include?(letter) ? letter : alphabet.index(letter) }\n    \n\
    \    message.gsub(/[aeiou]/) { |letter| ", "    message.gsub!(/[aeiou]/) { |letter|\
    \ letter.upcase }\n    message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n\
    \    message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n    message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n    message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n    message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n    message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n    message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n    message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n    message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n    message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n    message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n    message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n    message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n    message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n    message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n    message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n    message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n    message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n    message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n    message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n    message.gsub!(/[aeiou]/) { |", "  new_message\
    \ = ''\n  message.each_char do |char|\n    char.upcase if char.upcase == char\n\
    \    char.downcase if char.downcase == char\n    char.swapcase if char.upcase\
    \ == char.downcase\n    char.upcase if char.upcase == char.downcase\n    char.downcase\
    \ if char.upcase == char.downcase\n    char.swapcase if char.upcase == char.downcase\n\
    \    char.upcase if char.upcase == char.downcase\n    char.downcase if char.upcase\
    \ == char.downcase\n    char.swapcase if char.upcase == char.downcase\n    char.upcase\
    \ if char.upcase == char.downcase\n    char.downcase if char.upcase == char.downcase\n\
    \    char.swapcase if char.upcase == char.downcase\n    char.upcase if char.upcase\
    \ == char.downcase\n    char.downcase if char.upcase == char.downcase\n    char.swapcase\
    \ if char.upcase == char.downcase\n    char.upcase if char.upcase == char.downcase\n\
    \    char.downcase if char.upcase == char.downcase\n    char.swapcase if char.upcase\
    \ == char.downcase\n    char.upcase if char.upcase == char.downcase\n    char.downcase\
    \ if char.upcase == char.downcase\n    char.swapcase if char.upcase == char.downcase\n\
    \    char.upcase if char.upcase == char.downcase\n    char.downcase if char.upcase\
    \ == char.downcase\n    char.swapcase if char.upcase == char.downcase\n    char.upcase\
    \ if char.upcase == char.downcase\n    char.downcase if char.upcase == char.downcase\n\
    \    char.swapcase if char.upcase == char.downcase\n    char.upcase if char.upcase\
    \ == char.downcase\n    char.downcase if char.upcase == char.downcase\n    char.swapcase\
    \ if char.upcase == char.downcase\n    char.upcase if char.upcase == char.downcase\n\
    \    char.downcase if char.up", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end", "  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[a-z]/){|c| c.upcase }\n \
    \ message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  ", "  new_message = ''\n  message.each_char do |char|\n    next if char.upcase\
    \ == 'A' || char.upcase == 'E' || char.upcase == 'I' || char.upcase == 'O' ||\
    \ char.upcase == 'U'\n    new_message += char.upcase\n    \n    index = char.upcase.index('AEIOU')\n\
    \    \n    if index\n      new_message += char.upcase[index + 1]\n    end\n  end\n\
    \  new_message\nend", "  message.gsub!(/[a-z]/) { |letter| letter.upcase }\n \
    \ message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| ", "  message.downcase!\n  message.gsub!(/[aeiou]/,\
    \ 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/,\
    \ 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/,\
    \ 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/,\
    \ 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/,\
    \ 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/,\
    \ 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/, 'AEIOU')\n  message.gsub!(/[aeiou]/,\
    \ 'AEIOU')\n  message.gsub!(/[aeiou]/", "  message.downcase!\n  message.gsub!(/[aeiou]/,\
    \ 'A')\n  message.gsub!(/[AEIOU]/, 'E')\n  message.gsub!(/[AEIOU]/, 'I')\n  message.gsub!(/[AEIOU]/,\
    \ 'O')\n  message.gsub!(/[AEIOU]/, 'U')\n  message.gsub!(/[AEIOU]/, 'Y')\n  message.gsub!(/[AEIOU]/,\
    \ 'a')\n  message.gsub!(/[AEIOU]/, 'e')\n  message.gsub!(/[AEIOU]/, 'i')\n  message.gsub!(/[AEIOU]/,\
    \ 'o')\n  message.gsub!(/[AEIOU]/, 'u')\n  message.gsub!(/[AEIOU]/, 'y')\n  message.gsub!(/[AEIOU]/,\
    \ 'A')\n  message.gsub!(/[AEIOU]/, 'E')\n  message.gsub!(/[AEIOU]/, 'I')\n  message.gsub!(/[AEIOU]/,\
    \ 'O')\n  message.gsub!(/[AEIOU]/, 'U')\n  message.gsub!(/[AEIOU]/, 'Y')\n  message.gsub!(/[AEIOU]/,\
    \ 'a')\n  message.gsub!(/[AEIOU]/, 'e')\n  message.gsub!(/[AEIOU]/, 'i')\n  message.gsub!(/[AEIOU]/,\
    \ 'o')\n  message.gsub!(/[AEIOU]/, 'u')\n  message.gsub!(/[AEIOU]/, 'y')\n  message.gsub!(/[AEIOU]/,\
    \ 'A')\n  message.gsub!(/[AEIOU]/, 'E')\n  message.gsub!(/[AEIOU]/, 'I')\n  message.gsub!(/[AEIOU]/,\
    \ 'O')\n  message.gsub!(/[AEIOU]/, 'U')\n  message.gsub!(/[AEIOU]/, 'Y')\n  message.gsub!(/[AEIOU]/,\
    \ 'a')\n  message.gsub!(/[AEIOU]/, 'e')\n  message.gsub!(/[AEIOU]/, 'i')\n  message.gsub!(/[AEIOU]/,\
    \ 'o')\n  message.", "  new_message = ''\n  message.each_char do |char|\n    char\
    \ = char.upcase if char.upcase >= 'A' && char.upcase <= 'Z'\n    char = char.downcase\
    \ if char.downcase >= 'a' && char.downcase <= 'z'\n    char = char.swapcase\n\
    \    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'O')\n    char = char.gsub(/[AEIOUaeiou]/, 'I')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'U')\n    char = char.gsub(/[AEIOUaeiou]/, 'A')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'O')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'I')\n    char = char.gsub(/[AEIOUaeiou]/, 'U')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'A')\n    new_message << char\n  end\n  new_message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your answer. I am not able to understand how this works.\
    \ Can you please explain how this works?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code. Hope that helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I\
    \ am not able to understand how this works. Can you please explain how this works?\n\
    <|/ c |>\n<| c |>\nI added some comments to the code. Hope that helps.\n<|/ c\
    \ |>\n<| c |>\nThanks for your answer. I am not able to understand how this works.\
    \ Can you please explain how this works?\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.g",
  "    message = message.downcase\n    vowels = 'aeiou'\n    vowel_positions = message.scan(/[aeiou]/)\n\
    \    vowel_positions.each do |vowel_position|\n        vowel_position = vowel_position\
    \ + 2\n        vowel_position = vowel_position % 26\n        message = message.replace(vowels[vowel_position],\
    \ vowels[vowel_position - 1])\n    end\n    return message\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks for the help! I appreciate it!\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>", "    message.gsub!(/[a-z]/) do |letter|\n        letter.upcase\
    \ + letter.downcase[letter.index(letter) + 1]\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase\n    end\n    message.gsub!(/[aeiou]/) do\
    \ |letter|\n        letter.downcase\n    end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your answer. I'm a beginner so I appreciate your help.\
    \ I added my code to the original post. I'm getting an error that says \"undefined\
    \ method `gsub' for nil:NilClass\". Any ideas?\n<|/ c |>\n<| c |>\nI added my\
    \ code to the original post. I'm getting an error that says \"undefined method\
    \ `gsub' for nil:NilClass\". Any ideas?\n<|/ c |>\n<| c |>\nI added my code to\
    \ the original post. I'm getting an error that says \"undefined method `gsub'\
    \ for nil:NilClass\". Any ideas?\n<|/ c |>\n<| c |>\nI added my code to the original\
    \ post. I'm getting an error that says \"undefined method `gsub' for nil:NilClass\"\
    . Any ideas?\n<|/ c |>\n<| c |>\nI added my code to the original post. I'm getting\
    \ an error that says \"undefined method `gsub' for nil:NilClass\". Any ideas?\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  new_message = ''\n  message.each_char\
    \ do |char|\n    char.upcase if new_message.empty?\n    char.downcase if new_message.empty?\n\
    \    char.upcase if new_message == char\n    char.downcase if new_message == char\n\
    \    new_message << char\n  end\n  new_message\nend", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |", "  new_message =\
    \ ''\n  vowels = 'AEIOU'\n  for i in message\n    if vowels.include?(i)\n    \
    \  new_message += i.upcase\n    else\n      new_message += i.downcase\n    end\n\
    \  end\n  new_message\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer! I understand your solution, but I wanted to do it without using any\
    \ loops. I edited my question to show what I mean.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to show you how to do it without using any loops.\n<|/ c |>\n<| c\
    \ |>\nThanks so much! I understand it now!\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  new_message = ''\n  message.each_char do |char|\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.upcase ", "  message\n\
    end", "  new_message = ''\n  vowels = 'aeiouAEIOU'\n  for i in message\n    if\
    \ vowels.include?(i)\n      new_message += i.upcase\n    else\n      new_message\
    \ += i.downcase\n    end\n  end\n  new_message\nend\n</code>\n<|/ a |>\n<| c |>\n\
    I like the idea of using upcase and downcase, but this doesn't work for the first\
    \ and last letters. For example, `encode('test') == 'tHKS KS C MGSSCGG'` instead\
    \ of `'TGST'`.\n<|/ c |>\n<| c |>\nI missed that requirement. Updated my answer.\n\
    <|/ c |>\n<| a tags=ruby,string |>\n<code>", "  new_message = ''\n  message.each_char\
    \ do |char|\n    if char.upcase == 'A'\n      new_message << char.upcase\n   \
    \ elsif char.upcase == 'E'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'I'\n      new_message << char.upcase\n    elsif char.upcase == 'O'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'U'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'Y'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'a'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'e'\n      new_message << char.upcase\n    elsif char.upcase == 'i'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'o'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'u'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'y'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'A'\n      new_message << char.upcase\n    elsif char.upcase == 'E'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'I'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'O'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'U'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'Y'\n      new_message << char.upcase\n    elsif char.upcase == 'a'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'e'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'i'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'o'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'u'\n      new_message << char.upcase\n    elsif char.upcase == 'y'\n   \
    \   new_message << char.upcase\n    elsif char.upcase ", "    message.downcase!\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/", " \
    \ message.downcase!\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou", "  new_message\
    \ = ''\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  for i in message\n    if vowels.include?(i)\n\
    \      new_message += i.upcase\n    else\n      new_message += i.downcase\n  \
    \  end\n  end\n  new_message\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. `'This is a message'.gsub(/[aeiou]/) { |m| m.upcase }`\n<|/ c |>\n<| c\
    \ |>\nIt does work. `'This is a message'.gsub(/[aeiou]/) { |m| m.upcase }` returns\
    \ `'tHKS KS C MGSSCGG'`\n<|/ c |>\n<| c |>\nYes, it does. I didn't downvote your\
    \ answer, but your answer doesn't work. `'This is a message'.gsub(/[aeiou]/) {\
    \ |m| m.upcase }` returns `'THIS is a message'`\n<|/ c |>\n<| c |>\nIt does work.\
    \ `'This is a message'.gsub(/[aeiou]/) { |m| m.upcase }` returns `'tHKS KS C MGSSCGG'`\n\
    <|/ c |>\n<| c |>\nYes, it does. I didn't downvote your answer, but your answer\
    \ doesn't work. `'This is a message'.gsub(/[aeiou]/) { |m| m.upcase }` returns\
    \ `'THIS is a message'`\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  new_message\
    \ = ''\n  vowels = 'AEIOU'\n  letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  \n  message.each_char\
    \ do |char|\n    if letters.include? char\n      new_message << char\n    elsif\
    \ vowels.include? char\n      new_message << letters[letters.index(char) + 2]\n\
    \    end\n  end\n  \n  new_message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThanks so much for this. I really appreciate it. I will try this\
    \ out and let you know how it goes.\n<|/ c |>\n<| c |>\nI got it to work. Thanks\
    \ so much! I really appreciate it. I will post my code below for anyone else who\
    \ may need it.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |", "    message.gsub!(/[a-z]/){|c|\
    \ c.upcase }\n    message.gsub!(/[aeiou]/){|c| c.succ }\n    message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n    message.gsub!(/[aeiou]/){|c| c.succ }\n    message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n    message.gsub!(/[aeiou]/){|c| c.succ }\n    message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n    message.gsub!(/[aeiou]/){|c| c.succ }\n    message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n    message.gsub!(/[aeiou]/){|c| c.succ }\n    message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n    message.gsub!(/[aeiou]/){|c| c.succ }\n    message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n    message.gsub!(/[aeiou]/){|c| c.succ }\n    message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n    message.gsub!(/[aeiou]/){|c| c.succ }\n    message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n    message.gsub!(/[aeiou]/){|c| c.succ }\n    message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n    message.gsub!(/[aeiou]/){|c| c.succ }\n    message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n    message.gsub!(/[aeiou]/){|c| c.succ }\n    message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n    message.gsub!(/[aeiou]/){|c| c.succ }\n    message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n    message.gsub!(/[aeiou]/){|c| c.succ }\n    message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n    ", "  alphabet = %w(a b c d e f g h i j k l m n o p q r s t u\
    \ v w x y z)\n  vowels = %w(a e i o u)\n  new_message = ''\n  message.each_char\
    \ do |char|\n    if alphabet.include?(char)\n      new_message << alphabet[alphabet.index(char)\
    \ + 1]\n    elsif vowels.include?(char)\n      new_message << vowels[vowels.index(char)\
    \ + 1]\n    else\n      new_message << char\n    end\n  end\n  new_message\nend\n\
    </code>\n<|/ a tags=ruby,string |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to do it without using an array? I guess it would be a lot\
    \ more efficient to just loop through the string and compare each character to\
    \ the other characters in the string. Would that be possible?\n<|/ c |>\n<| c\
    \ |>\nYes, you could do that, but you'd have to keep track of the indices of the\
    \ vowels and alphabet. I'll post an answer with that approach.\n<|/ c |>\n<| c\
    \ |>\nI added a solution without using an array. Hope it helps!\n<|/ c |>\n<|\
    \ c |>\nI like your solution, but I wonder if there is a way to do it without\
    \ using an array? I guess it would be a lot more efficient to just loop through\
    \ the string and compare each character to the other characters in the string.\
    \ Would that be possible?\n<|/ c |>\n<| c |>\nYes, you could do that, but you'd\
    \ have to keep track of the indices of the vowels and alphabet. I'll post an answer\
    \ with that approach.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    elsif char.upcase == char.downcase\n      new_message <<\
    \ char.downcase\n    else\n      new_message << char.upcase.next\n    end\n  end\n\
    \  new_message\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for the help.\
    \ I understand what you are saying but I am having trouble implementing it. I\
    \ am new to coding and am trying to learn by doing. Could you please show me how\
    \ to implement this into my code? Thank you!\n<|/ c |>\n<| c |>\nI added some\
    \ comments to my answer, hope that helps.\n<|/ c |>\n<| c |>\nThank you so much!\
    \ I really appreciate it!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<code>", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.up",
  "  message.gsub!(/[aeiou]/) { |vowel| \n    english_vowels[english_vowels.index(vowel)\
    \ + 1]\n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    english_vowels.index(vowel)\
    \ + 1\n  }\n  message\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI didn't downvote,\
    \ but I suspect it's because you didn't show any effort at solving the problem\
    \ yourself. I suggest you read [How do I ask a good question?](https://stackoverflow.com/help/how-to-ask)\
    \ and [How to create a Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve)\n\
    <|/ c |>\n<| c |>\nI did show effort in the question. He asked for help and I\
    \ gave him a solution. He didn't ask for someone to write code for him. He asked\
    \ for help and I gave him a solution. He didn't ask for someone to write code\
    \ for him. He asked for help and I gave him a solution. He didn't ask for someone\
    \ to write code for him. He asked for help and I gave him a solution. He didn't\
    \ ask for someone to write code for him. He asked for help and I gave him a solution.\
    \ He didn't ask for someone to write code for him. He asked for help and I gave\
    \ him a solution. He didn't ask for someone to write code for him. He asked for\
    \ help and I gave him a solution. He didn't ask for someone to write code for\
    \ him. He asked for help and I gave him a solution. He didn't ask for someone\
    \ to write code for him. He asked for help and I gave him a solution. He didn't\
    \ ask for someone to write code for him. He asked for help and I gave him a solution.\
    \ He didn't ask for someone to write code for him. He asked for help and I gave\
    \ him a solution. He didn't ask for someone to write code for him. He asked for\
    \ help and I gave him a solution. He didn't ask for someone to write code for\
    \ him. He asked for help and I gave him a solution. He didn't ask for someone\
    \ to write code for him. He asked ", "  message.gsub!(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |", "  new_message = ''\n  vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n  \n  message.each_char do |char|\n    if vowels.include?(char)\n\
    \      new_message << char.upcase\n    else\n      new_message << char.downcase\n\
    \    end\n  end\n  \n  new_message\nend\n</cell>\n<cell>", "  alphabet = %w(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z)\n  vowels = %w(a e i o u)\n\
    \  new_message = ''\n  message.each_char do |char|\n    if alphabet.include?(char)\n\
    \      new_message << alphabet[alphabet.index(char) + 1]\n    elsif vowels.include?(char)\n\
    \      new_message << vowels[vowels.index(char) + 1]\n    else\n      new_message\
    \ << char\n    end\n  end\n  new_message\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThanks for the help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ If this answer helped you, please consider marking it as accepted (by clicking\
    \ the check mark next to it). That way others know that your question has been\
    \ answered and they don't need to read all the comments to find out what else\
    \ you might need.\n<|/ c |>\n<| c |>\nI did that! Thanks again!\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>", "  new_message = ''\n  message.each_char do |char|\n\
    \    if char.upcase == char\n      new_message << char.upcase\n    elsif char.upcase\
    \ == char.downcase\n      new_message << char.downcase\n    else\n      new_message\
    \ << char.upcase.next\n    end\n  end\n  new_message\nend", "  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end", "  new_message = ''\n  \n  message.downcase!\n  \n  message.each_char\
    \ do |char|\n    \n    if char.upcase == 'A'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'E'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'I'\n      new_message << char.upcase\n    elsif char.upcase == 'O'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'U'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'Y'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'a'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'e'\n      new_message << char.upcase\n    elsif char.upcase == 'i'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'o'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'u'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'y'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'A'\n      new_message << char.upcase\n    elsif char.upcase == 'E'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'I'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'O'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'U'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'Y'\n      new_message << char.upcase\n    elsif char.upcase == 'a'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'e'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'i'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'o'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'u'\n      new_message << char.upcase\n    elsif char.upcase == 'y'\n   \
    \   new_message << char", "  new_message = \"\"\n  vowels = \"aeiouAEIOU\"\n \
    \ \n  message.downcase!\n  \n  message.each_char do |char|\n    index = vowels.index(char)\n\
    \    \n    if index\n      new_message << vowels[(index+1)%vowels.length]\n  \
    \  else\n      new_message << char\n    end\n  end\n  \n  new_message\nend\n</code>\n\
    <|/ a tags=ruby,string,algorithm |>\n<| c |>\nThis doesn't work. Try it with `encode('This\
    \ is a message')`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Are you\
    \ sure you copied it correctly? It works for me. `encode('This is a message')`\
    \ returns `'tHKS KS C MGSSCGG'`.\n<|/ c |>\n<| c |>\nYes, I copied it correctly.\
    \ I'm running Ruby 1.9.3p194.\n<|/ c |>\n<| c |>\nAh, I see. My mistake. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| c |>\nI added a version that works in Ruby\
    \ 1.8.7 and 1.9.3\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution using Ruby's\
    \ built-in String#tr:\n<code>", "  message.gsub!(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |", "  message = message.downcase\n  vowels = %w(a\
    \ e i o u)\n  message = message.gsub(/[aeiou]/) { |m| vowels.index(m) + 2 }\n\
    \  message = message.gsub(/[aeiou]/) { |m| vowels.index(m) }\n  message\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<| c |>\nThanks so\
    \ much for taking the time to write this out. I'm going to try this out and let\
    \ you know how it goes. Thanks again!\n<|/ c |>\n<| c |>\nI got this working and\
    \ I really appreciate your help. I did have to change my code a little bit to\
    \ make it work. Thanks again!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n\
    <|/ c |>\n<| a dscore=0 |>\nI got this working and I really appreciate your help.\
    \ I did have to change my code a little bit to make it work. Thanks again!\n<code>",
  "    vowels = 'AEIOUaeiou'\n    message = message.upcase\n    vowels = vowels.upcase\n\
    \    vowels = vowels.split('')\n    message = message.split('')\n    message =\
    \ message.map { |char| char.downcase }\n    message = message.map { |char| vowels.include?(char)\
    \ ? char.upcase : char }\n    message = message.join('')\n    message = message.split('')\n\
    \    message = message.map { |char| char.upcase }\n    message = message.join('')\n\
    \    message = message.split('')\n    message = message.map { |char| char.downcase\
    \ }\n    message = message.join('')\n    message = message.split('')\n    message\
    \ = message.map { |char| char.upcase }\n    message = message.join('')\n    message\
    \ = message.split('')\n    message = message.map { |char| char.downcase }\n  \
    \  message = message.join('')\n    message = message.split('')\n    message =\
    \ message.map { |char| char.upcase }\n    message = message.join('')\n    message\
    \ = message.split('')\n    message = message.map { |char| char.downcase }\n  \
    \  message = message.join('')\n    message = message.split('')\n    message =\
    \ message.map { |char| char.upcase }\n    message = message.join('')\n    message\
    \ = message.split('')\n    message = message.map { |char| char.downcase }\n  \
    \  message = message.join('')\n    message = message.split('')\n    message =\
    \ message.map { |char| char.upcase }\n    message = message.join('')\n    message\
    \ = message.split('')\n    message = message.map { |char| char.downcase }\n  \
    \  message = message.join('')\n    message = message.split('')\n    message =\
    \ message.map { |char| char.upcase }\n    message = message.join('')\n    message\
    \ = message.split('')\n    message = message.map { |char| char.downcase }\n  \
    \  message = message.join('')\n    message = message.split('')\n    message =\
    \ message.map { |char| char.upcase }\n    message = message.join('')\n    message\
    \ = message.split('')\n    message = message.map { |char| char.downcase }\n  \
    \  message = message.join('')\n    message = message.split('')\n    message =\
    \ message.map { |char| char.upcase }\n    message = message.join('')\n    message\
    \ = message.split('')\n    message = message.map { |char| char.downcase }\n  \
    \  message = message.join('')\n    message = message.split('')\n    message =\
    \ message.map { |char| char.", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[ae",
  "  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) {\
    \ |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  new_message\
    \ = ''\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    elsif char.upcase == char.next\n      new_message << char.upcase\n\
    \    else\n      new_message << char.next\n    end\n  end\n  new_message\nend",
  "  message.downcase!\n  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[AEIOU]/,\
    \ 'E')\n  message.gsub!(/[AEIOU]/, 'I')\n  message.gsub!(/[AEIOU]/, 'O')\n  message.gsub!(/[AEIOU]/,\
    \ 'U')\n  message.gsub!(/[AEIOU]/, 'Y')\n  message.gsub!(/[AEIOU]/, 'a')\n  message.gsub!(/[AEIOU]/,\
    \ 'e')\n  message.gsub!(/[AEIOU]/, 'i')\n  message.gsub!(/[AEIOU]/, 'o')\n  message.gsub!(/[AEIOU]/,\
    \ 'u')\n  message.gsub!(/[AEIOU]/, 'y')\n  message.gsub!(/[AEIOU]/, 'A')\n  message.gsub!(/[AEIOU]/,\
    \ 'E')\n  message.gsub!(/[AEIOU]/, 'I')\n  message.gsub!(/[AEIOU]/, 'O')\n  message.gsub!(/[AEIOU]/,\
    \ 'U')\n  message.gsub!(/[AEIOU]/, 'Y')\n  message.gsub!(/[AEIOU]/, 'a')\n  message.gsub!(/[AEIOU]/,\
    \ 'e')\n  message.gsub!(/[AEIOU]/, 'i')\n  message.gsub!(/[AEIOU]/, 'o')\n  message.gsub!(/[AEIOU]/,\
    \ 'u')\n  message.gsub!(/[AEIOU]/, 'y')\n  message.gsub!(/[AEIOU]/, 'A')\n  message.gsub!(/[AEIOU]/,\
    \ 'E')\n  message.gsub!(/[AEIOU]/, 'I')\n  message.gsub!(/[AEIOU]/, 'O')\n  message.gsub!(/[AEIOU]/,\
    \ 'U')\n  message.gsub!(/[AEIOU]/, 'Y')\n  message.gsub!(/[AEIOU]/, 'a')\n  message.gsub!(/[AEIOU]/,\
    \ 'e')\n  message.gsub!(/[AEIOU]/, 'i')\n  message.gsub!(/[AEIOU]/, 'o')\n  message.",
  "  new_message = ''\n  vowels = 'aeiouAEIOU'\n  \n  message.downcase!\n  \n  message.each_char\
    \ do |char|\n    if vowels.include?(char)\n      new_message << char.upcase\n\
    \      new_message << char.upcase\n    else\n      new_message << char\n    end\n\
    \  end\n  \n  new_message\nend\n</cell>\n<cell>", "    message.downcase!\n   \
    \ message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m|\
    \ m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |m| m.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n    message.gsub!(/[aeiou]/) { |", "  message = message.downcase\n\
    \  vowels = 'aeiou'\n  consonants = 'bcdfghjklmnpqrstvwxyz'\n  consonants_index\
    \ = consonants.index\n  vowels_index = vowels.index\n  message_index = 0\n  message_indexes\
    \ = []\n  while message_index < message.length\n    letter = message[message_index]\n\
    \    if letter in vowels\n      message_indexes << vowels_index(letter)\n    else\n\
    \      message_indexes << consonants_index(letter)\n    message_index += 1\n \
    \ end\n  message_indexes.reverse!\n  message_indexes.each_with_index do |index,\
    \ index|\n    letter = message[index]\n    letter = letter.upcase if index ==\
    \ message_indexes.length - 1\n    letter = letter.downcase if index == 0\n   \
    \ message = message.gsub(letter, vowels[index])\n  end\n  message\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but this isn't what I'm\
    \ looking for. I'm looking for a way to do this without using any loops. I already\
    \ know how to use loops to solve this problem. I'm looking for a way to do this\
    \ without using loops.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this\
    \ isn't what I'm looking for. I'm looking for a way to do this without using any\
    \ loops. I already know how to use loops to solve this problem. I'm looking for\
    \ a way to do this without using loops.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ efforts, but this isn't what I'm looking for. I'm looking for a way to do this\
    \ without using any loops. I already know how to use loops to solve this problem.\
    \ I'm looking for a way to do this without using loops.\n<|/ c |>\n<| c |>\nI\
    \ appreciate your efforts, but this isn't what I'm looking for. I'm looking for\
    \ a way to do this without using any loops. I already know how to use loops to\
    \ solve this problem. I'm looking for a way to do this without using loops.\n\
    <|/ c |>\n<| c |>\nI appreciate your efforts, but this isn't what I'm looking\
    \ for. I'm looking for a way to do this without using any loops. I already know\
    \ how to use loops to solve this problem. I'm looking for a way to do this without\
    \ using loops.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    message.downcase!\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'e')\n    message.gsub!(/[aeiou", "    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |", "    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |", "  new_message =\
    \ ''\n  message.each_char do |char|\n    char = char.upcase if char.upcase ==\
    \ char\n    char = char.downcase if char.downcase == char\n    char = char.swapcase\n\
    \    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/",
  "  message = message.downcase\n  vowels = %w[a e i o u]\n  message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.index(m) }\n  message = message.gsub(/[aeiou]/) { |m| vowels.index(m)\
    \ + 2 }\n  message\nend\n</code>\n<|/ a tags=ruby,string,algorithm |>\n<| c |>\n\
    I like your solution. Very elegant. Thanks!\n<|/ c |>\n<| c |>\nI like your solution.\
    \ Very elegant. Thanks!\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    vowels = 'AEIOU'\n\
    \    message = message.upcase\n    message = message.gsub(/[AEIOUaeiou]/, \n \
    \                       lambda m: (vowels.index(m[0]) + 2) % 26)\n    message\
    \ = message.gsub(/[AEIOUaeiou]/, \n                        lambda m: (vowels.index(m[0])\
    \ + 2) % 26)\n    message = message.gsub(/[AEIOUaeiou]/, \n                  \
    \      lambda m: (vowels.index(m[0]) + 2) % 26)\n    message = message.gsub(/[AEIOUaeiou]/,\
    \ \n                        lambda m: (vowels.index(m[0]) + 2) % 26)\n    message\
    \ = message.gsub(/[AEIOUaeiou]/, \n                        lambda m: (vowels.index(m[0])\
    \ + 2) % 26)\n    message = message.gsub(/[AEIOUaeiou]/, \n                  \
    \      lambda m: (vowels.index(m[0]) + 2) % 26)\n    message = message.gsub(/[AEIOUaeiou]/,\
    \ \n                        lambda m: (vowels.index(m[0]) + 2) % 26)\n    message\
    \ = message.gsub(/[AEIOUaeiou]/, \n                        lambda m: (vowels.index(m[0])\
    \ + 2) % 26)\n    message = message.gsub(/[AEIOUaeiou]/, \n                  \
    \      lambda m: (vowels.index(m[0]) + 2) % 26)\n    message = message.gsub(/[AEIOUaeiou]/,\
    \ \n                        lambda m: (vowels.index(m[0]) + 2) % 26)\n    message\
    \ = message.gsub(/[AEIOUaeiou]/, \n                        lambda m: (vowels.index(m[0])\
    \ + 2) % 26)\n    message = message.gsub(/[AEIOUaeiou]/, \n                  \
    \      lambda m: (vowels.index(m[0]) + 2) % 26)\n    message = message.gsub(/[AEIOUaeiou]/,\
    \ \n                        lambda m: (vowels.index(m[0]) + 2) % 26)\n    message\
    \ = message.gsub(/[AEIOUaeiou]/, \n                        lambda m: (vowels.index(m[0])\
    \ + 2) % 26)\n    message = message.gsub(/[AEIOUaeiou]/, \n                  \
    \      lambda m: (vowels.index(m[0]) + 2) % 26)\n    message = message.gsub(/[AEIOUaeiou]/,\
    \ \n                        lambda m: (vowels.index(m[0]) + 2) % 26)\n    message\
    \ = message.gsub(/[AEIOUaeiou]/, \n                        lambda m", "  new_message\
    \ = ''\n  message.each_char do |c|\n    if c.upcase == c\n      new_message <<\
    \ c.upcase\n    elsif c.downcase == c\n      new_message << c.downcase\n    elsif\
    \ c.upcase == 'A'\n      new_message << c.upcase\n    elsif c.downcase == 'A'\n\
    \      new_message << c.downcase\n    elsif c.upcase == 'E'\n      new_message\
    \ << c.upcase\n    elsif c.downcase == 'E'\n      new_message << c.downcase\n\
    \    elsif c.upcase == 'I'\n      new_message << c.upcase\n    elsif c.downcase\
    \ == 'I'\n      new_message << c.downcase\n    elsif c.upcase == 'O'\n      new_message\
    \ << c.upcase\n    elsif c.downcase == 'O'\n      new_message << c.downcase\n\
    \    elsif c.upcase == 'U'\n      new_message << c.upcase\n    elsif c.downcase\
    \ == 'U'\n      new_message << c.downcase\n    elsif c.upcase == 'Y'\n      new_message\
    \ << c.upcase\n    elsif c.downcase == 'Y'\n      new_message << c.downcase\n\
    \    elsif c.upcase == 'a'\n      new_message << c.upcase\n    elsif c.downcase\
    \ == 'a'\n      new_message << c.downcase\n    elsif c.upcase == 'e'\n      new_message\
    \ << c.upcase\n    elsif c.downcase == 'e'\n      new_message << c.downcase\n\
    \    elsif c.upcase == 'i'\n      new_message << c.upcase\n    elsif c.downcase\
    \ == 'i'\n      new_message << c.downcase\n    elsif c.upcase == 'o'\n      new_message\
    \ << c.upcase\n    elsif c.downcase == 'o'\n      new_message << c.downcase\n\
    \    elsif c.upcase == 'u'\n      new_message << c.upcase\n    elsif c.downcase\
    \ == 'u'\n      new_message << c.downcase\n    elsif c.upcase == 'y'\n      new_message\
    \ << c.upcase\n    elsif c.downcase == 'y'\n      new_message << c.downcase\n\
    \    elsif c.upcase == 'A'\n      new_message << c.upcase\n    ", "  new_message\
    \ = ''\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    elsif char.upcase == char.next\n      new_message << char.upcase\n\
    \    else\n      new_message << char.next\n    end\n  end\n  new_message\nend\n\
    </code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"aBcD\"\n<|/ c |>\n<| c |>\nIt does work if you have a string like \"\
    aBcD\". It just doesn't produce the correct result for that string. Try it yourself.\n\
    <|/ c |>\n<| c |>\nI see what you mean. My bad.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. My bad.\n<|/ c |>\n<| c |>\nI see what you mean. My bad.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>", "  new_message = ''\n  message.each_char do |c|\n \
    \   if c.upcase == c\n      new_message += c.upcase\n    else\n      new_message\
    \ += c.downcase\n    end\n  end\n  new_message.gsub!(/[aeiou]/) do |c|\n    english_letter\
    \ = english_letters[english_letters.index(c)+1]\n    english_letter\n  end\n \
    \ new_message\nend", "  new_message = ''\n  message.each_char do |char|\n    cased\
    \ = char.upcase\n    cased.gsub!(/[aeiou]/, 'A')\n    cased.gsub!(/[aeiou]/, 'E')\n\
    \    cased.gsub!(/[aeiou]/, 'I')\n    cased.gsub!(/[aeiou]/, 'O')\n    cased.gsub!(/[aeiou]/,\
    \ 'U')\n    cased.gsub!(/[aeiou]/, 'Y')\n    cased.gsub!(/[aeiou]/, 'a')\n   \
    \ cased.gsub!(/[aeiou]/, 'e')\n    cased.gsub!(/[aeiou]/, 'i')\n    cased.gsub!(/[aeiou]/,\
    \ 'o')\n    cased.gsub!(/[aeiou]/, 'u')\n    cased.gsub!(/[aeiou]/, 'y')\n   \
    \ cased.gsub!(/[aeiou]/, 'A')\n    cased.gsub!(/[aeiou]/, 'E')\n    cased.gsub!(/[aeiou]/,\
    \ 'I')\n    cased.gsub!(/[aeiou]/, 'O')\n    cased.gsub!(/[aeiou]/, 'U')\n   \
    \ cased.gsub!(/[aeiou]/, 'Y')\n    cased.gsub!(/[aeiou]/, 'a')\n    cased.gsub!(/[aeiou]/,\
    \ 'e')\n    cased.gsub!(/[aeiou]/, 'i')\n    cased.gsub!(/[aeiou]/, 'o')\n   \
    \ cased.gsub!(/[aeiou]/, 'u')\n    cased.gsub!(/[aeiou]/, 'y')\n    new_message\
    \ << cased\n  end\n  new_message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for the response. I'm still getting a syntax error on the\
    \ line `new_message << cased`. Any ideas?\n<|/ c |>\n<| c |>\nI figured it out.\
    \ Thanks so much for the help!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>",
  "  message.downcase!\n  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/,\
    \ 'B')\n  message.gsub!(/[aeiou]/, 'C')\n  message.gsub!(/[aeiou]/, 'D')\n  message.gsub!(/[aeiou]/,\
    \ 'E')\n  message.gsub!(/[aeiou]/, 'F')\n  message.gsub!(/[aeiou]/, 'G')\n  message.gsub!(/[aeiou]/,\
    \ 'H')\n  message.gsub!(/[aeiou]/, 'I')\n  message.gsub!(/[aeiou]/, 'J')\n  message.gsub!(/[aeiou]/,\
    \ 'K')\n  message.gsub!(/[aeiou]/, 'L')\n  message.gsub!(/[aeiou]/, 'M')\n  message.gsub!(/[aeiou]/,\
    \ 'N')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[aeiou]/, 'P')\n  message.gsub!(/[aeiou]/,\
    \ 'Q')\n  message.gsub!(/[aeiou]/, 'R')\n  message.gsub!(/[aeiou]/, 'S')\n  message.gsub!(/[aeiou]/,\
    \ 'T')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/, 'V')\n  message.gsub!(/[aeiou]/,\
    \ 'W')\n  message.gsub!(/[aeiou]/, 'X')\n  message.gsub!(/[aeiou]/, 'Y')\n  message.gsub!(/[aeiou]/,\
    \ 'Z')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'b')\n  message.gsub!(/[aeiou]/,\
    \ 'c')\n  message.gsub!(/[aeiou]/, 'd')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'f')\n  message.gsub!(/[aeiou]/, 'g')\n  message.gsub!(/[aeiou]/, 'h')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'j')\n  message.gsub!(/[", "  message.downcase!\n\
    \  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel", "  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  new_message = ''\n  message.each_char do |char|\n    new_message +=\
    \ case char\n      when 'a' then 'b'\n      when 'e' then 'f'\n      when 'i'\
    \ then 'j'\n      when 'o' then 'k'\n      when 'u' then 'l'\n      when 'y' then\
    \ 'm'\n      else char\n    end\n  end\n  new_message\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| c |>\nThis doesn't seem to work. `encode('This is a message')` returns\
    \ `'TGHS KS C MGSSCGG'`\n<|/ c |>\n<| c |>\nOops, I forgot to add `new_message\
    \ = ''` before the loop. Fixed now.\n<|/ c |>\n<| c |>\nThis doesn't seem to work.\
    \ `encode('This is a message')` returns `'TGHS KS C MGSSCGG'`\n<|/ c |>\n<| c\
    \ |>\nI fixed the typo and added an explanation.\n<|/ c |>\n<| c |>\nI added an\
    \ explanation to the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/,\
    \ 'I')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/,\
    \ 'Y')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'y')\n  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/,\
    \ 'I')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/,\
    \ 'Y')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'y')\n  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/,\
    \ 'I')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/,\
    \ 'Y')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'y')\n  message.gsub!(/[ae", "  message.downcase!\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel", "    vowels = 'aeiou'\n\
    \    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    message = message.downcase\n\
    \    message = message.gsub(/[aeiou]/) { |m| alphabet.index(m) + 1 }\n    message\
    \ = message.gsub(/[aeiou]/) { |m| vowels.index(m) }\n    message = message.gsub(/[aeiou]/)\
    \ { |m| alphabet.index(m) + 1 }\n    message = message.gsub(/[aeiou]/) { |m| vowels.index(m)\
    \ }\n    message = message.gsub(/[aeiou]/) { |m| alphabet.index(m) + 1 }\n   \
    \ message = message.gsub(/[aeiou]/) { |m| vowels.index(m) }\n    message = message.gsub(/[aeiou]/)\
    \ { |m| alphabet.index(m) + 1 }\n    message = message.gsub(/[aeiou]/) { |m| vowels.index(m)\
    \ }\n    message = message.gsub(/[aeiou]/) { |m| alphabet.index(m) + 1 }\n   \
    \ message = message.gsub(/[aeiou]/) { |m| vowels.index(m) }\n    message = message.gsub(/[aeiou]/)\
    \ { |m| alphabet.index(m) + 1 }\n    message = message.gsub(/[aeiou]/) { |m| vowels.index(m)\
    \ }\n    message = message.gsub(/[aeiou]/) { |m| alphabet.index(m) + 1 }\n   \
    \ message = message.gsub(/[aeiou]/) { |m| vowels.index(m) }\n    message = message.gsub(/[aeiou]/)\
    \ { |m| alphabet.index(m) + 1 }\n    message = message.gsub(/[aeiou]/) { |m| vowels.index(m)\
    \ }\n    message = message.gsub(/[aeiou]/) { |m| alphabet.index(m) + 1 }\n   \
    \ message = message.gsub(/[aeiou]/) { |m| vowels.index(m) }\n    message = message.gsub(/[aeiou]/)\
    \ { |m| alphabet.index(m) + 1 }\n    message = message.gsub(/[aeiou]/) { |m| vowels.index(m)\
    \ }\n    message = message.gsub(/[aeiou]/) { |m| alphabet.index(m) + 1 }\n   \
    \ message = message.gsub(/[aeiou]/) { |m| vowels.index(m) }\n    message = message.gsub(/[aeiou]/",
  "  message.downcase!\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet.index(vowel)\
    \ + 2 \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet.index(vowel) +\
    \ 1 \n  }\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer! I\
    \ understand how this works, but I'm having trouble understanding how it works.\
    \ Could you explain how this works?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code. Let me know if you have questions.\n<|/ c |>\n<| c |>\nThanks for\
    \ the explanation! I understand how this works, but I'm having trouble understanding\
    \ how it works. Could you explain how this works?\n<|/ c |>\n<| c |>\nI added\
    \ some comments to the code. Let me know if you have questions.\n<|/ c |>\n<|\
    \ c |>\nThanks for the explanation! I understand how this works, but I'm having\
    \ trouble understanding how it works. Could you explain how this works?\n<|/ c\
    \ |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<code>", "  message = message.downcase\n\
    \  vowels = %w[a e i o u]\n  message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ + 1] }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for\
    \ the answer. I'm still trying to understand how this works. I understand that\
    \ `gsub` replaces every occurrence of a character in the string with the block\
    \ given to it, but how does it know to replace `a` with `b` and not `a` with `a`?\
    \ Also, how does it know to replace `e` with `f`? How does it know to replace\
    \ `i` with `j`? How does it know to replace `o` with `p`? How does it know to\
    \ replace `u` with `v`? How does it know to replace `A` with `B`? How does it\
    \ know to replace `E` with `F`? How does it know to replace `I` with `J`? How\
    \ does it know to replace `O` with `P`? How does it know to replace `U` with `V`?\n\
    <|/ c |>\n<| c |>\nThe block given to `gsub` gets passed each character in the\
    \ string, and is expected to return a new character that should be used instead\
    \ of the original character. `vowels[vowels.index(vowel) + 1]` returns the character\
    \ that appears 2 places ahead of the vowel in the alphabet. `vowels.index` returns\
    \ the index of the first occurrence of the given character in the array. `vowels.index`\
    \ returns the index of the first occurrence of the given character in the array.\
    \ `vowels.index` returns the index of the first occurrence of the given character\
    \ in the array. `vowels.index` returns the index of the first occurrence of the\
    \ given character in the array. `vowels.index` returns the index of the first\
    \ occurrence of the given character in the array. `vowels.index` returns the index\
    \ of the first occurrence of the given character in the array. `vowels.index`\
    \ returns the index of the first occurrence of the given character in the array.\
    \ `vowels.index` returns the index of the first occurrence of the given character\
    \ in the array. `vowels.index` returns the index of the first occurrence of the\
    \ given character in the array. `vowels.index` returns the index of the first\
    \ occurrence of the given character in the array. `vowels.index` returns the index\
    \ of the first occurrence of the given character in the array. `vowels.index`\
    \ returns the index of the first occurrence of the given character in the array.\
    \ `vowels.index` returns the index of the first occurrence of the given character\
    \ in the array. `vowels.index` returns the index of the first occurrence of the\
    \ given character in the array. `vowels.index` returns the index of the ", " \
    \ message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x|\
    \ x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "    message.downcase!\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/, 'AEIOU')\n\
    \    message.gsub!(/[aeiou]/, 'AEIOU')\n    message.gsub!(/[aeiou]/", "  new_message\
    \ = ''\n  message.each_char do |char|\n    if char.upcase == 'A'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'E'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'I'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'O'\n      new_message << char.upcase\n    elsif char.upcase == 'U'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'Y'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'a'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'e'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'i'\n      new_message << char.upcase\n    elsif char.upcase == 'o'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'u'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'y'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'A'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'E'\n      new_message << char.upcase\n    elsif char.upcase == 'I'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'O'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'U'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'Y'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'a'\n      new_message << char.upcase\n    elsif char.upcase == 'e'\n   \
    \   new_message << char.upcase\n    elsif char.upcase == 'i'\n      new_message\
    \ << char.upcase\n    elsif char.upcase == 'o'\n      new_message << char.upcase\n\
    \    elsif char.upcase == 'u'\n      new_message << char.upcase\n    elsif char.upcase\
    \ == 'y'\n      new_message << char.upcase\n    elsif char.upcase ", "  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    alphabet.index(vowel) + alphabet.index(vowel.next) \n  }\nend\n\
    </code>\n<|/ a tags=ruby,string |>\n<| c |>\nI like the idea of using gsub to\
    \ replace vowels with their indexes, but this doesn't work if the vowels are repeated\
    \ in the string. For example, `encode('This is a message')` returns `'tHKS KS\
    \ C MGSSCGG'` instead of `'tHKS KS C MGSSCGG'`.\n<|/ c |>\n<| c |>\n: Yes, I noticed\
    \ that and fixed it by adding `+ 2` to the indexes.\n<|/ c |>\n<| c |>\n: I added\
    \ a more general solution that will work for any number of repetitions.\n<|/ c\
    \ |>\n<| a tags=ruby,string |>\nHere's a solution using String#gsub with a block:\n\
    <code>", "    message = message.downcase\n    vowels = %w(a e i o u)\n    message\
    \ = message.gsub(/[aeiou]/) { |m| vowels.index(m) }\n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.index(m) + 2 }\n    message = message.gsub(/[aeiou]/) { |m| vowels.index(m)\
    \ + 1 }\n    message = message.gsub(/[aeiou]/) { |m| vowels.index(m) + 1 }\n \
    \   message = message.gsub(/[aeiou]/) { |m| vowels.index(m) + 1 }\n    message\
    \ = message.gsub(/[aeiou]/) { |m| vowels.index(m) + 1 }\n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.index(m) + 1 }\n    message = message.gsub(/[aeiou]/) { |m| vowels.index(m)\
    \ + 1 }\n    message = message.gsub(/[aeiou]/) { |m| vowels.index(m) + 1 }\n \
    \   message = message.gsub(/[aeiou]/) { |m| vowels.index(m) + 1 }\n    message\
    \ = message.gsub(/[aeiou]/) { |m| vowels.index(m) + 1 }\n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.index(m) + 1 }\n    message = message.gsub(/[aeiou]/) { |m| vowels.index(m)\
    \ + 1 }\n    message = message.gsub(/[aeiou]/) { |m| vowels.index(m) + 1 }\n \
    \   message = message.gsub(/[aeiou]/) { |m| vowels.index(m) + 1 }\n    message\
    \ = message.gsub(/[aeiou]/) { |m| vowels.index(m) + 1 }\n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.index(m) + 1 }\n    message = message.gsub(/[aeiou]/) { |m| vowels.index(m)\
    \ + 1 }\n    message = message.gsub(/[aeiou]/) { |m| vowels.index(m) + 1 }\n \
    \   message = message.gsub(/[aeiou]/) { |m| vowels.index(m) + 1 }\n    message\
    \ = message.gsub(/[aeiou]/) { |m| vowels.index(m) + 1 }\n    message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.index(m) + 1 }\n    message = message.gsub(/[aeiou]/) { ", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[letter.index(letter) + 1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message\n\
    end\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThanks for your answer. I'm\
    \ still a beginner at Ruby, so I appreciate your help a lot. I'm going to try\
    \ this out and see how it goes.\n<|/ c |>\n<| c |>\nI added a little more explanation\
    \ to the answer.\n<|/ c |>\n<| c |>\nThanks again. I'm still trying to wrap my\
    \ head around how this works. I appreciate your help a lot.\n<|/ c |>\n<| c |>\n\
    I added a little more explanation to the answer.\n<|/ c |>\n<| c |>\nThanks again.\
    \ I'm still trying to wrap my head around how this works. I appreciate your help\
    \ a lot.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[aeiou]/) { |vowel|\
    \ vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |", "  new_message = ''\n  message.each_char\
    \ do |char|\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.downcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.downcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.downcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.downcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.downcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.downcase if char.downcase == char\n    char.swapcase if char.downcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.downcase if char.downcase\
    \ == char\n    char.swapcase ", "    message.gsub!(/[a-z]/) { |letter| letter.upcase\
    \ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n    message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \    message.gsub!(/[aeiou]/) { |vowel| ", "  new_message = ''\n  \n  message.each_char\
    \ do |char|\n    \n    if char.upcase == char\n      new_message << char.upcase\n\
    \    else\n      new_message << char.downcase\n    end\n    \n  end\n  \n  new_message.gsub!(/[aeiou]/)\
    \ do |char|\n    alphabet[alphabet.index(char.upcase) + alphabet.index(char.downcase)]\n\
    \  end\n  \n  new_message\nend", "  new_message = ''\n  message.each_char do |char|\n\
    \    if char.upcase == 'A'\n      new_message += char.upcase\n    elsif char.upcase\
    \ == 'E'\n      new_message += char.upcase\n    elsif char.upcase == 'I'\n   \
    \   new_message += char.upcase\n    elsif char.upcase == 'O'\n      new_message\
    \ += char.upcase\n    elsif char.upcase == 'U'\n      new_message += char.upcase\n\
    \    elsif char.upcase == 'Y'\n      new_message += char.upcase\n    elsif char.upcase\
    \ == 'a'\n      new_message += char.upcase\n    elsif char.upcase == 'e'\n   \
    \   new_message += char.upcase\n    elsif char.upcase == 'i'\n      new_message\
    \ += char.upcase\n    elsif char.upcase == 'o'\n      new_message += char.upcase\n\
    \    elsif char.upcase == 'u'\n      new_message += char.upcase\n    elsif char.upcase\
    \ == 'y'\n      new_message += char.upcase\n    elsif char.upcase == 'A'\n   \
    \   new_message += char.upcase\n    elsif char.upcase == 'E'\n      new_message\
    \ += char.upcase\n    elsif char.upcase == 'I'\n      new_message += char.upcase\n\
    \    elsif char.upcase == 'O'\n      new_message += char.upcase\n    elsif char.upcase\
    \ == 'U'\n      new_message += char.upcase\n    elsif char.upcase == 'Y'\n   \
    \   new_message += char.upcase\n    elsif char.upcase == 'a'\n      new_message\
    \ += char.upcase\n    elsif char.upcase == 'e'\n      new_message += char.upcase\n\
    \    elsif char.upcase == 'i'\n      new_message += char.upcase\n    elsif char.upcase\
    \ == 'o'\n      new_message += char.upcase\n    elsif char.upcase == 'u'\n   \
    \   new_message += char.upcase\n    elsif char.upcase == 'y'\n      new_message\
    \ += char.upcase\n    elsif char.upcase ", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message\nend", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[letter.index(letter) + 1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby |>\n<code>", "  new_message =\
    \ ''\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    else\n      new_message << char.downcase\n    end\n  end\n\
    \  new_message.gsub(/[aeiou]/) do |char|\n    alphabet[alphabet.index(char.upcase)\
    \ + alphabet.index(char.downcase)]\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nI appreciate your help but this isn't what I'm looking for. I need to\
    \ understand how to do this without using any gems. I understand how to do this\
    \ with gems, but I need to understand how to do this without them.\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't use any gems.\n<|/ c |>\n<| c |>\nI appreciate\
    \ your help but this isn't what I'm looking for. I need to understand how to do\
    \ this without using any gems. I understand how to do this with gems, but I need\
    \ to understand how to do this without them.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't use any gems.\n<|/ c |>\n<| c |>\nI appreciate your help but this\
    \ isn't what I'm looking for. I need to understand how to do this without using\
    \ any gems. I understand how to do this with gems, but I need to understand how\
    \ to do this without them.\n<|/ c |>\n<| a |>\n<code>", "  new_message = ''\n\
    \  vowels = 'aeiouAEIOU'\n  \n  message.downcase!\n  \n  message.each_char do\
    \ |char|\n    if vowels.include?(char)\n      new_message << char\n      new_message\
    \ << char.next\n    else\n      new_message << char.next\n    end\n  end\n  \n\
    \  new_message\nend", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message\nend", "    message.gsub!(/[aeiou]/) do\
    \ |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end\n    message.gsub!(/[aeiou]/)\
    \ do |letter|\n        letter.upcase + letter.succ\n    end", "  new_message =\
    \ ''\n  vowels = 'aeiouAEIOU'\n  for i in message\n    if vowels.include?(i)\n\
    \      new_message << i.upcase\n    else\n      new_message << i.downcase\n  \
    \  end\n  end\n  new_message\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nI like\
    \ your solution, but I believe it would be better to use a `case` statement instead\
    \ of `if` statements. `case` statements are more concise and easier to read.\n\
    <|/ c |>\n<| c |>\nI agree, case statements are more concise and easier to read.\
    \ I've updated my answer to reflect this.\n<|/ c |>\n<| a tags=ruby |>\nHere's\
    \ a solution using regular expressions:\n<code>", "    message.downcase!\n   \
    \ message.gsub(/[aeiou]/) { |vowel| \n        vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/)\
    \ { |vowel| \n        vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/) { |vowel|\
    \ \n        vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/) { |vowel| \n \
    \       vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/) { |vowel| \n     \
    \   vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/) { |vowel| \n        vowel.succ.succ\n\
    \    }\n    message.gsub(/[aeiou]/) { |vowel| \n        vowel.succ.succ\n    }\n\
    \    message.gsub(/[aeiou]/) { |vowel| \n        vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/)\
    \ { |vowel| \n        vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/) { |vowel|\
    \ \n        vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/) { |vowel| \n \
    \       vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/) { |vowel| \n     \
    \   vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/) { |vowel| \n        vowel.succ.succ\n\
    \    }\n    message.gsub(/[aeiou]/) { |vowel| \n        vowel.succ.succ\n    }\n\
    \    message.gsub(/[aeiou]/) { |vowel| \n        vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/)\
    \ { |vowel| \n        vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/) { |vowel|\
    \ \n        vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/) { |vowel| \n \
    \       vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/) { |vowel| \n     \
    \   vowel.succ.succ\n    }\n    message.gsub(/[aeiou]/) { |vowel| \n        vowel.succ.succ\n\
    \    }\n    message.gsub(/[aeiou]/) { |vowel| \n        vowel.succ.succ\n    }\n\
    \    message.gsub(/[aeiou]/) { |vowel| \n        vowel.succ.succ\n    }\n", " \
    \ message.gsub!(/[a-z]/){|c| c.downcase }\n  message.gsub!(/[aeiou]/){|c| c.upcase\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.upcase }\n  ", "  alphabet = %w[a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z]\n  vowels = %w[a e i o u]\n\
    \  message.gsub(/./) { |c| alphabet.index(c) }.\n    gsub(/[aeiou]/) { |c| vowels.index(c)\
    \ }.\n    each_char.\n    map { |c| alphabet.index(c) }.\n    join\nend\n</code>\n\
    <|/ a tags=ruby,string,algorithm |>\n<| c |>\nThanks for your answer. Can you\
    \ please explain how this works? I understand that `gsub` replaces every character\
    \ in the string with the letter that appears 2 places ahead of it in the alphabet,\
    \ but how does `each_char` work?\n<|/ c |>\n<| c |>\n`each_char` iterates over\
    \ the string and passes each character to the block. `gsub` replaces every character\
    \ in the string with the letter that appears 2 places ahead of it in the alphabet.\
    \ `index` returns the index of the character in the alphabet. `map` converts the\
    \ index to an alphabet character.\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ Can you please explain how this works?\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ Can you please explain how this works?\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ Can you please explain how this works?\n<|/ c |>\n<| a dscore=5 |>\nI believe\
    \ that this is the fastest solution:\n<code>", "    alphabet = %w(a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z)\n    vowels = %w(a e i o u)\n    message\
    \ = message.downcase\n    message.gsub!(/[aeiou]/) { |m| alphabet.index(m) + 1\
    \ }\n    message.gsub!(/[aeiou]/) { |m| vowels.include?(m) ? m : alphabet.index(m)\
    \ + 1 }\n    message.gsub!(/[aeiou]/) { |m| alphabet.index(m) + 1 }\n    message.gsub!(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m : alphabet.index(m) + 1 }\n    message.gsub!(/[aeiou]/)\
    \ { |m| alphabet.index(m) + 1 }\n    message.gsub!(/[aeiou]/) { |m| vowels.include?(m)\
    \ ? m : alphabet.index(m) + 1 }\n    message.gsub!(/[aeiou]/) { |m| alphabet.index(m)\
    \ + 1 }\n    message.gsub!(/[aeiou]/) { |m| vowels.include?(m) ? m : alphabet.index(m)\
    \ + 1 }\n    message.gsub!(/[aeiou]/) { |m| alphabet.index(m) + 1 }\n    message.gsub!(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m : alphabet.index(m) + 1 }\n    message.gsub!(/[aeiou]/)\
    \ { |m| alphabet.index(m) + 1 }\n    message.gsub!(/[aeiou]/) { |m| vowels.include?(m)\
    \ ? m : alphabet.index(m) + 1 }\n    message.gsub!(/[aeiou]/) { |m| alphabet.index(m)\
    \ + 1 }\n    message.gsub!(/[aeiou]/) { |m| vowels.include?(m) ? m : alphabet.index(m)\
    \ + 1 }\n    message.gsub!(/[aeiou]/) { |m| alphabet.index(m) + 1 }\n    message.gsub!(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? m : alphabet.index(m) + 1 }\n    message.gsub!(/[aeiou]/)\
    \ { |m| alphabet.index(m) + 1 }\n    message.gsub!(/[aeiou]/) { |m| vowels.include?(m)\
    \ ? m : alphab", "  message = message.downcase\n  vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n  message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ + 1] }\n  message = message.gsub(/[aeiou]/) { |vowel| vowels[vowels.index(vowel)\
    \ - 1] }\n  message\nend", "    message.downcase!\n    message.gsub!(/[aeiou]/,\
    \ 'e')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/, 'o')\n\
    \    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'y')\n    message.gsub!(/[aeiou]/,\
    \ 'a')\n    message.gsub!(/[aeiou]/, 'o')\n    message.gsub!(/[aeiou]/, 'u')\n\
    \    message.gsub!(/[aeiou]/, 'y')\n    message.gsub!(/[aeiou]/, 'a')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'y')\n\
    \    message.gsub!(/[aeiou]/, 'a')\n    message.gsub!(/[aeiou]/, 'o')\n    message.gsub!(/[aeiou]/,\
    \ 'u')\n    message.gsub!(/[aeiou]/, 'y')\n    message.gsub!(/[aeiou]/, 'a')\n\
    \    message.gsub!(/[aeiou]/, 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/,\
    \ 'y')\n    message.gsub!(/[aeiou]/, 'a')\n    message.gsub!(/[aeiou]/, 'o')\n\
    \    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'y')\n    message.gsub!(/[aeiou]/,\
    \ 'a')\n    message.gsub!(/[aeiou]/, 'o')\n    message.gsub!(/[aeiou]/, 'u')\n\
    \    message.gsub!(/[aeiou]/, 'y')\n    message.gsub!(/[aeiou]/, 'a')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'y')\n\
    \    message.gsub!(/[aeiou]/, 'a')\n    message.gsub!(/[aeiou]/, 'o')\n    message.gsub!(/[aeiou]/,\
    \ 'u')\n    message.gsub!(/[aeiou]/, 'y')\n    message.gsub!(", "  new_message\
    \ = ''\n  vowels = 'aeiou'\n  \n  message.each_char do |char|\n    if vowels.include?(char)\n\
    \      new_message << char.upcase\n      new_message << char.upcase\n    else\n\
    \      new_message << char\n    end\n  end\n  \n  new_message\nend", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    index = english_letters.index(char)\n\
    \    new_message << english_letters[(index+2)%26]\n  end\n  new_message\nend\n\
    </code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis doesn't work if you have a word\
    \ like \"aardvark\" which should return \"aardvark\" but returns \"aardvarkd\"\
    \n<|/ c |>\n<| c |>\nI added a solution that works with that case\n<|/ c |>\n\
    <| a tags=ruby,string |>\n<code>", "  message.gsub!(/[a-z]/){|l| l.upcase }\n\
    \  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase\
    \ }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  ", "  message = message.downcase\n  vowels = %w[a e i o u]\n \
    \ message = message.gsub(/[aeiou]/) { |m| vowels.index(m) + 2 }\n  message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.index(m) + 1 }\n  message\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThanks so much! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ If this answer solved your problem, please mark it as accepted by clicking the\
    \ check mark next to it. Thanks!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  new_message = ''\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  \n\
    \  message.each_char do |char|\n    if vowels.include?(char)\n      new_message\
    \ << char\n      new_message << char.next\n    else\n      new_message << char.next\n\
    \    end\n  end\n  \n  new_message\nend", "  message.gsub!(/[aeiou]/){|m| m.upcase\
    \ }\n  message.gsub!(/[aeiou]/){|m| m.downcase }\n  message.gsub!(/[aeiou]/){|m|\
    \ m.upcase }\n  message.gsub!(/[aeiou]/){|m| m.downcase }\n  message.gsub!(/[aeiou]/){|m|\
    \ m.upcase }\n  message.gsub!(/[aeiou]/){|m| m.downcase }\n  message.gsub!(/[aeiou]/){|m|\
    \ m.upcase }\n  message.gsub!(/[aeiou]/){|m| m.downcase }\n  message.gsub!(/[aeiou]/){|m|\
    \ m.upcase }\n  message.gsub!(/[aeiou]/){|m| m.downcase }\n  message.gsub!(/[aeiou]/){|m|\
    \ m.upcase }\n  message.gsub!(/[aeiou]/){|m| m.downcase }\n  message.gsub!(/[aeiou]/){|m|\
    \ m.upcase }\n  message.gsub!(/[aeiou]/){|m| m.downcase }\n  message.gsub!(/[aeiou]/){|m|\
    \ m.upcase }\n  message.gsub!(/[aeiou]/){|m| m.downcase }\n  message.gsub!(/[aeiou]/){|m|\
    \ m.upcase }\n  message.gsub!(/[aeiou]/){|m| m.downcase }\n  message.gsub!(/[aeiou]/){|m|\
    \ m.upcase }\n  message.gsub!(/[aeiou]/){|m| m.downcase }\n  message.gsub!(/[aeiou]/){|m|\
    \ m.upcase }\n  message.gsub!(/[aeiou]/){|m| m.downcase }\n  message.gsub!(/[aeiou]/){|m|\
    \ m.upcase }\n  message.gsub!(/[aeiou]/){|m| m.downcase }\n  message.gsub!(/[aeiou]/){|m|\
    \ m.upcase }\n  message.gsub!(/[aeiou]/){|m| m.downcase }\n  message.gsub!(/[aeiou]/){|m|\
    \ m.upcase }", "  new_message = ''\n  message.each_char do |char|\n    if char.upcase\
    \ == char\n      new_message << char.upcase\n    elsif char.upcase == char.next\n\
    \      new_message << char.upcase\n    else\n      new_message << char.next\n\
    \    end\n  end\n  new_message\nend", "  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.upcase + vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.upcase + letter.succ\n  end", "  message.gsub!(/[aeiou]/) { |vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |", "  message.downcase!\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou",
  "  message\nend", "  new_message = ''\n  message.each_char do |char|\n    char =\
    \ char.upcase\n    vowels = ['A','E','I','O','U']\n    vowels.each do |vowel|\n\
    \      if char == vowel\n        new_message << vowel\n      end\n    end\n  \
    \  new_message << char\n  end\n  new_message\nend\n</code>\n<|/ a |>\n<| c |>\n\
    I like your solution, but I still don't understand why my code doesn't work. Could\
    \ you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\nYour code doesn't\
    \ work because you were trying to do too much in one method. Your code was trying\
    \ to do too much in one method. Your code was trying to do too much in one method.\
    \ Your code was trying to do too much in one method. Your code was trying to do\
    \ too much in one method. Your code was trying to do too much in one method. Your\
    \ code was trying to do too much in one method. Your code was trying to do too\
    \ much in one method. Your code was trying to do too much in one method. Your\
    \ code was trying to do too much in one method. Your code was trying to do too\
    \ much in one method. Your code was trying to do too much in one method. Your\
    \ code was trying to do too much in one method. Your code was trying to do too\
    \ much in one method. Your code was trying to do too much in one method. Your\
    \ code was trying to do too much in one method. Your code was trying to do too\
    \ much in one method. Your code was trying to do too much in one method. Your\
    \ code was trying to do too much in one method. Your code was trying to do too\
    \ much in one method. Your code was trying to do too much in one method. Your\
    \ code was trying to do too much in one method. Your code was trying to do too\
    \ much in one method. Your code was trying to do too much in one method. Your\
    \ code was trying to do too much in one method. Your code was trying to do too\
    \ much in one method. Your code was trying to do too much in one method. Your\
    \ code was trying to do too much in one method. Your code was trying to do too\
    \ much in one method. Your code was trying to do too much in one method. Your\
    \ code was trying to do too much in one method. Your code was trying to do too\
    \ much in one method. Your code was trying to do too ", "  new_message = ''\n\
    \  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    else\n      new_message << char.downcase\n    end\n  end\n\
    \  new_message.gsub!(/[AEIOUaeiou]/) do |char|\n    alphabet[alphabet.index(char.upcase)\
    \ + alphabet.index(char.downcase)]\n  end\n  new_message\nend\n</code>\n<|/ a\
    \ tags=ruby,string |>\n<| c |>\nThanks for the answer. Can you please explain\
    \ how this works? I understand that `alphabet[alphabet.index(char.upcase) + alphabet.index(char.downcase)]`\
    \ will return the letter that appears 2 places ahead of the vowel, but I don't\
    \ understand how this works.\n<|/ c |>\n<| c |>\nI added an explanation to the\
    \ answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for the explanation. Can you\
    \ please explain how this works? I understand that `alphabet[alphabet.index(char.upcase)\
    \ + alphabet.index(char.downcase)]` will return the letter that appears 2 places\
    \ ahead of the vowel, but I don't understand how this works.\n<|/ c |>\n<| c |>\n\
    I added an explanation to the answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for the explanation. Can you please explain how this works? I understand that\
    \ `alphabet[alphabet.index(char.upcase) + alphabet.index(char.downcase)]` will\
    \ return the letter that appears 2 places ahead of the vowel, but I don't understand\
    \ how this works.\n<|/ c |>\n<| a |>\n<code>", "  message.gsub!(/[aeiou]/) { |vowel|\
    \ \n    vowel.succ \n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.succ\
    \ \n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n  \
    \  vowel.succ \n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.succ \n\
    \  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n  \
    \  vowel.succ \n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.succ \n\
    \  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n  \
    \  vowel.succ \n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.succ \n\
    \  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n  \
    \  vowel.succ \n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.succ \n\
    \  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n  \
    \  vowel.succ \n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n    vowel.succ \n\
    \  }\n  message.gsub!(/", "    message.downcase!\n    message.gsub!(/[aeiou]/,\
    \ 'e')\n    message.gsub!(/[aeiou]/, 'a')\n    message.gsub!(/[aeiou]/, 'o')\n\
    \    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'y')\n    message.gsub!(/[aeiou]/,\
    \ 'i')\n    message.gsub!(/[aeiou]/, 'o')\n    message.gsub!(/[aeiou]/, 'u')\n\
    \    message.gsub!(/[aeiou]/, 'y')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'y')\n\
    \    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/, 'o')\n    message.gsub!(/[aeiou]/,\
    \ 'u')\n    message.gsub!(/[aeiou]/, 'y')\n    message.gsub!(/[aeiou]/, 'i')\n\
    \    message.gsub!(/[aeiou]/, 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/,\
    \ 'y')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/, 'o')\n\
    \    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'y')\n    message.gsub!(/[aeiou]/,\
    \ 'i')\n    message.gsub!(/[aeiou]/, 'o')\n    message.gsub!(/[aeiou]/, 'u')\n\
    \    message.gsub!(/[aeiou]/, 'y')\n    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/,\
    \ 'o')\n    message.gsub!(/[aeiou]/, 'u')\n    message.gsub!(/[aeiou]/, 'y')\n\
    \    message.gsub!(/[aeiou]/, 'i')\n    message.gsub!(/[aeiou]/, 'o')\n    message.gsub!(/[aeiou]/,\
    \ 'u')\n    message.gsub!(/[aeiou]/, '", "  message.gsub!(/[aeiou]/) { |vowel|\
    \ vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |", "  message.downcase!\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou",
  "    message = message.downcase\n    vowels = %w(a e i o u)\n    vowels.each do\
    \ |vowel|\n        message = message.gsub(vowel, vowels[vowels.index(vowel) +\
    \ 1])\n    end\n    message.gsub!(/[aeiou]/) { |m| m.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.upcase }\n    message.gsub!(/[aeiou]/) { |m| m.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.upcase }\n    message.gsub!(/[aeiou]/) { |m| m.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.upcase }\n    message.gsub!(/[aeiou]/) { |m| m.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.upcase }\n    message.gsub!(/[aeiou]/) { |m| m.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.upcase }\n    message.gsub!(/[aeiou]/) { |m| m.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.upcase }\n    message.gsub!(/[aeiou]/) { |m| m.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.upcase }\n    message.gsub!(/[aeiou]/) { |m| m.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.upcase }\n    message.gsub!(/[aeiou]/) { |m| m.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.upcase }\n    message.gsub!(/[aeiou]/) { |m| m.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.upcase }\n    message.gsub!(/[aeiou]/) { |m| m.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.upcase }\n    message.gsub!(/[aeiou]/) { |m| m.upcase }\n    message.gsub!(/[aeiou]/)\
    \ { |m| m.upcase }\n    message.gsub!(/[aeiou]/) { |m", "  alphabet = %w[a b c\
    \ d e f g h i j k l m n o p q r s t u v w x y z]\n  vowels = %w[a e i o u]\n \
    \ new_message = ''\n  message.each_char do |char|\n    index = alphabet.index(char)\n\
    \    vowel_index = vowels.index(char)\n    if index != nil\n      new_message\
    \ << alphabet[index + 1]\n      new_message << alphabet[index + 2]\n      new_message\
    \ << alphabet[index + 3]\n      new_message << alphabet[index + 4]\n      new_message\
    \ << alphabet[index + 5]\n      new_message << alphabet[index + 6]\n      new_message\
    \ << alphabet[index + 7]\n      new_message << alphabet[index + 8]\n      new_message\
    \ << alphabet[index + 9]\n      new_message << alphabet[index + 10]\n      new_message\
    \ << alphabet[index + 11]\n      new_message << alphabet[index + 12]\n      new_message\
    \ << alphabet[index + 13]\n      new_message << alphabet[index + 14]\n      new_message\
    \ << alphabet[index + 15]\n      new_message << alphabet[index + 16]\n      new_message\
    \ << alphabet[index + 17]\n      new_message << alphabet[index + 18]\n      new_message\
    \ << alphabet[index + 19]\n      new_message << alphabet[index + 20]\n      new_message\
    \ << alphabet[index + 21]\n      new_message << alphabet[index + 22]\n      new_message\
    \ << alphabet[index + 23]\n      new_message << alphabet[index + 24]\n      new_message\
    \ << alphabet[index + 25]\n      new_message << alphabet[index + 26]\n      new_message\
    \ << alphabet[index + 27]\n      new_message << alphabet[index + 28]\n      new_message\
    \ << alphabet[index + 29]\n      new_message << alphabet[index + 30]\n      new_message\
    \ << alphabet[index + 31]\n      new_message << alphabet[index + 32]\n      new_message\
    \ << alphabet[index + 33]\n      new_message << alphabet[index + 34]\n      new_message\
    \ << alphabet[index + 35]\n      new_message << alphabet[index + 36]\n      new_message\
    \ << alphabet[index + 37]\n      new_message << alphabet[index + 38]\n      new_message\
    \ << alphabet[index + 39]\n      new_message << alphabet[index + 40]\n      new_message\
    \ << alphabet[index + 41]\n      new_message << alphabet[index + 42]\n      new_message\
    \ << alphabet[index + 43]\n      new_message << alphabet[index + 44]\n      new_message\
    \ << ", "  new_message = ''\n  message.each_char do |char|\n    new_message +=\
    \ case char\n      when 'a' then 'b'\n      when 'e' then 'f'\n      when 'i'\
    \ then 'g'\n      when 'o' then 'h'\n      when 'u' then 'j'\n      when 'y' then\
    \ 'k'\n      else char\n    end\n  end\n  new_message\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your help. I appreciate it. I will try this out and\
    \ let you know how it goes.\n<|/ c |>\n<| c |>\nI added my code to the original\
    \ post. I am still having trouble with it though. I am not sure how to get the\
    \ case to work with the vowels. I keep getting an error saying \"undefined method\
    \ `case' for nil:NilClass\". Any ideas?\n<|/ c |>\n<| c |>\nI added my code to\
    \ the original post. I am still having trouble with it though. I am not sure how\
    \ to get the case to work with the vowels. I keep getting an error saying \"undefined\
    \ method `case' for nil:NilClass\". Any ideas?\n<|/ c |>\n<| c |>\nI added my\
    \ code to the original post. I am still having trouble with it though. I am not\
    \ sure how to get the case to work with the vowels. I keep getting an error saying\
    \ \"undefined method `case' for nil:NilClass\". Any ideas?\n<|/ c |>\n<| c |>\n\
    I added my code to the original post. I am still having trouble with it though.\
    \ I am not sure how to get the case to work with the vowels. I keep getting an\
    \ error saying \"undefined method `case' for nil:NilClass\". Any ideas?\n<|/ c\
    \ |>\n<| a tags=ruby |>\n<code>", "  message.gsub!(/[aeiou]/) { |x| x.upcase }\n\
    \  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x|\
    \ x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  new_message = ''\n  message.each_char do |char|\n    if\
    \ char.upcase == char\n      new_message << char.upcase\n    elsif char.upcase\
    \ == char.next\n      new_message << char.upcase\n    else\n      new_message\
    \ << char.next\n    end\n  end\n  new_message\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
