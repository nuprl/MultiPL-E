name: HumanEval_6_parse_nested_parens
language: ruby
prompt: "# Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n# For each of the group, output the deepest\
  \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
  # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
  \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
  (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
  () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
  ))\n  end\nend\n"
completions: ["  paren_string.scan(/[^()]+/).map { |x| x.length }.max\nend", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map { |x| x.scan(/[^()]+/).max }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |group|\n    group.scan(/\\s*\\(([^()]*)\\)\\s*/) do\
    \ |nested_group|\n      nested_group.scan(/\\s*\\(([^()]*)\\)\\s*/) do |nested_nested_group|\n\
    \        nested_nested_group.scan(/\\s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_group|\n\
    \          nested_nested_nested_group.scan(/\\s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_group|\n\
    \            nested_nested_nested_nested_group.scan(/\\s*\\(([^()]*)\\)\\s*/)\
    \ do |nested_nested_nested_nested_nested_group|\n              nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_group|\n\
    \                nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^()]*)\\\
    )\\s*/) do |nested_nested_nested_nested_nested_nested_nested_group|\n        \
    \          nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^()]*)\\\
    )\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n \
    \                   nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                  nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n  \
    \  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n      paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n        paren_string.scan(/\\s*\\\
    (([^()]*)\\)\\s*/).map do |paren_string|\n          paren_string.scan(/\\s*\\\
    (([^()]*)\\)\\s*/).map do |paren_string|\n            paren_string.scan(/\\s*\\\
    (([^()]*)\\)\\s*/).map do |paren_string|\n              paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                    paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                      paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                        paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                          paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                            paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                              paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                               \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n        \
    \                          paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do\
    \ |paren_string|\n                                    paren_string.scan(/\\s*\\\
    (([^()]*)\\)\\s*/).map do |paren_string|\n                                   \
    \   paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n      \
    \                                  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map\
    \ do |paren_string|\n                                          paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                               \
    \             paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n\
    \                                              paren_string.scan(", "  paren_string\
    \ = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_stack_size\
    \ = -1\n  paren_stack_level = []\n  paren_stack_level_size = []\n  paren_stack_level_max\
    \ = []\n  paren_stack_level_max_size = []\n  paren_stack_level_max_index = []\n\
    \  paren_stack_level_max_size_index = []\n  paren_stack_level_max_index2 = []\n\
    \  paren_stack_level_max_size_index2 = []\n  paren_stack_level_max_index3 = []\n\
    \  paren_stack_level_max_size_index3 = []\n  paren_stack_level_max_index4 = []\n\
    \  paren_stack_level_max_size_index4 = []\n  paren_stack_level_max_index5 = []\n\
    \  paren_stack_level_max_size_index5 = []\n  paren_stack_level_max_index6 = []\n\
    \  paren_stack_level_max_size_index6 = []\n  paren_stack_level_max_index7 = []\n\
    \  paren_stack_level_max_size_index7 = []\n  paren_stack_level_max_index8 = []\n\
    \  paren_stack_level_max_size_index8 = []\n  paren_stack_level_max_index9 = []\n\
    \  paren_stack_level_max_size_index9 = []\n  paren_stack_level_max_index10 = []\n\
    \  paren_stack_level_max_size_index10 = []\n  paren_stack_level_max_index11 =\
    \ []\n  paren_stack_level_max_size_index11 = []\n  paren_stack_level_max_index12\
    \ = []\n  paren_stack_level_max_size_index12 = []\n  paren_stack_level_max_index13\
    \ = []\n  paren_stack_level_max_size_index13 = []\n  paren_stack_level_max_index14\
    \ = []\n  paren_stack_level_max_size_index14 = []\n  paren_stack_level_max_index15\
    \ = []\n  paren_stack_level_max_size_index15 = []\n  paren_stack_level_max_index16\
    \ = []\n  paren_stack_level_max_size_index16 = []\n  paren_stack_level_max_index17\
    \ = []\n  paren_stack_level_max_size_index17 = []\n  paren_stack_level_max_index18\
    \ = []\n  paren_stack_level_max_size_index18 = []\n  paren_stack_level_max_index19\
    \ = []\n  paren_stack_level_max_size_index19 = []\n  paren_stack_level_max_index20\
    \ = []\n  paren_stack_level_max_size_index20 = []\n  paren_stack_level_max_index21\
    \ = []\n  paren_stack_level_max_size_index21 = []\n  paren_stack_level_max_index22\
    \ = []\n  ", "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level\
    \ = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_level_stack\
    \ = []\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1]\
    \ = 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] =\
    \ 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n\
    \  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n \
    \ paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size\
    \ = 0\n  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size =\
    \ 0\n  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size = 0\n\
    \  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size = 0\n \
    \ paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1]\
    \ = 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] =\
    \ 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n\
    \  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n \
    \ paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size\
    \ = 0\n  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size =\
    \ 0\n  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size = 0\n\
    \  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size = 0\n \
    \ paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1]\
    \ = 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] =\
    \ 0\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n\
    \  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n \
    \ paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack[-1] = 0\n  paren_nesting_level_stack",
  "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_levels\
    \ = []\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n  paren_levels_stack_size\
    \ = 0\n  paren_levels_stack = []\n  paren_levels_stack_index = 0\n", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.length }.max\nend", "  paren_string.scan(/[^()]+/).map do |paren_string|\n\
    \    paren_string.scan(/\\(/).map do |paren_string|\n      paren_string.scan(/\\\
    )/).map do |paren_string|\n        paren_string.count\n      end\n    end.max\n\
    \  end\nend", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/\\\
    s*\\(\\s*\\(([^\\(\\)]*)\\)\\s*\\)\\s*\\)/) do |group|\n    group.scan(/\\s*\\\
    (([^\\(\\)]*)\\)\\s*\\)/) do |nested_group|\n      nested_group.scan(/\\s*\\(([^\\\
    (\\)]*)\\)\\s*\\)/) do |nested_nested_group|\n        nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_group|\n          nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_group|\n       \
    \     nested_nested_nested_nested_group.scan(/\\s*\\(([^\\(\\)]*)\\)\\s*\\)/)\
    \ do |nested_nested_nested_nested_group|\n              nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_group|\n\
    \                nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^\\(\\\
    )]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_group|\n      \
    \            nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^\\\
    (\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_group|\n   \
    \                 nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\\
    (([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group",
  "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[\\\
    (\\)]/).map { |x| x.size }.max\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/\\s*\\(\\s*\\((?<paren_level>\\d+)\\\
    )\\s*\\)\\s*|\\s*\\((?<paren_level>\\d+)\\)\\s*\\)/) do |match|\n    levels =\
    \ match.captures.fetch('paren_level', nil)\n    levels ||= 0\n    levels += 1\
    \ if levels > 0\n    levels\n  end\nend", "  paren_string.scan(/[()]/).map { |x|\
    \ x.size }.max\nend", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }.inject(0)\
    \ do |max_level, level|\n    if level > max_level\n      max_level = level\n \
    \   end\n    max_level\n  end\nend", "  paren_string.scan(/[^()]+/).map { |x|\
    \ x.length }.max\nend", "  paren_string = paren_string.strip\n  paren_stack =\
    \ []\n  paren_level = 0\n  paren_nesting = 0\n  paren_levels = []\n  paren_nestings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nest", "  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/\\(/)\n  paren_string.scan(/\\)/)\n  paren", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/) do |group|\n    if group.captures.size == 1\n\
    \      group.captures.first\n    else\n      group.captures.max\n    end\n  end\n\
    end", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_char|\n    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n \
    \     paren_char.scan(/[\\(\\)]+/) do |paren_char|\n        paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n              paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n            \
    \        paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                      paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                        paren_char.scan(/[\\(\\)]+/)\
    \ do |paren_char|\n                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n  \
    \                            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n  \
    \                              paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]+/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                   \
    \ paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                             \
    \                         paren_char.scan(/[\\(\\)]+/) do |paren_char|\n", " \
    \ paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string = paren_string.strip\n  paren_stack = []\n\
    \  paren_level = 0\n  paren_levels = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string = paren_string.strip\n  paren_stack = []\n\
    \  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_", "  paren_string = paren_string.strip\n  paren_string.gsub!(/\\\
    s+/, ' ').gsub!(/\\(/, '[').gsub!(/\\)/, ']')\n  paren_string.gsub!(/\\[/, '(').gsub!(/\\\
    ]/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '('", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\\
    s*/).map do |group|\n    group.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |inner_group|\n\
    \      inner_group.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |inner_inner_group|\n\
    \        inner_inner_group.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_group|\n\
    \          inner_inner_inner_group.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_group|\n\
    \            inner_inner_inner_inner_group.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |inner_inner_inner_inner_inner_group|\n              inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_group|\n  \
    \              inner_inner_inner_inner_inner_inner_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_group|\n           \
    \       inner_inner_inner_inner_inner_inner_inner_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_group|\n     \
    \               inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                      inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                        inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                          inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                            inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                              inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                                inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]+/)\n  level = 0\n  max_level\
    \ = 0\n  paren_stack = []\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  ", "  paren_string = paren_string.strip\n\
    \  paren_stack = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level\
    \ = 0\n  paren_nesting_nesting = 0\n  paren_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_", "  paren_string.scan(/[\\(\\)]/).map { |x| x.to_i }\nend", " \
    \ paren_string.scan(/[\\(\\)]/) do |paren_char|\n    paren_char.scan(/[\\(\\)]/)\
    \ do |paren_char|\n      paren_char.scan(/[\\(\\)]/) do |paren_char|\n       \
    \ paren_char.scan(/[\\(\\)]/) do |paren_char|\n          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \              paren_char.scan(/[\\(\\)]/) do |paren_char|\n                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                  paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                    paren_char.scan(/[\\(\\)]/) do |paren_char|\n           \
    \           paren_char.scan(/[\\(\\)]/) do |paren_char|\n                    \
    \    paren_char.scan(/[\\(\\)]/) do |paren_char|\n                          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                            paren_char.scan(/[\\(\\)]/)\
    \ do |paren_char|\n                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                  paren_char.scan(/[\\(\\)]/)\
    \ do |paren_char|\n                                    paren_char.scan(/[\\(\\\
    )]/) do |paren_char|\n                                      paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                        paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                            paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                              paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_string.scan(/\\s*\\\
    ((?<paren>[^()]+)\\)\\s*/) do |paren|\n    paren.scan(/\\s*\\((?<paren>[^()]+)\\\
    )\\s*/) do |paren|\n      paren.scan(/\\s*\\((?<paren>[^()]+)\\)\\s*/) do |paren|\n\
    \        paren.scan(/\\s*\\((?<paren>[^()]+)\\)\\s*/) do |paren|\n          paren.scan(/\\\
    s*\\((?<paren>[^()]+)\\)\\s*/) do |paren|\n            paren.scan(/\\s*\\((?<paren>[^()]+)\\\
    )\\s*/) do |paren|\n              paren.scan(/\\s*\\((?<paren>[^()]+)\\)\\s*/)\
    \ do |paren|\n                paren.scan(/\\s*\\((?<paren>[^()]+)\\)\\s*/) do\
    \ |paren|\n                  paren.scan(/\\s*\\((?<paren>[^()]+)\\)\\s*/) do |paren|\n\
    \                    paren.scan(/\\s*\\((?<paren>[^()]+)\\)\\s*/) do |paren|\n\
    \                      paren.scan(/\\s*\\((?<paren>[^()]+)\\)\\s*/) do |paren|\n\
    \                        paren.scan(/\\s*\\((?<paren>[^()]+)\\)\\s*/) do |paren|\n\
    \                          paren.scan(/\\s*\\((?<paren>[^()]+)\\)\\s*/) do |paren|\n\
    \                            paren.scan(/\\s*\\((?<paren>[^()]+)\\)\\s*/) do |paren|\n\
    \                              paren.scan(/\\s*\\((?<paren>[^()]+)\\)\\s*/) do\
    \ |paren|\n                                paren.scan(/\\s*\\((?<paren>[^()]+)\\\
    )\\s*/) do |paren|\n                                  paren.scan(/\\s*\\((?<paren>[^()]+)\\\
    )\\s*/) do |paren|\n                                    paren.scan(/\\s*\\((?<paren>[^()]+)\\\
    )\\s*/) do |paren|\n                                      paren.scan(/\\s*\\((?<paren>[^()]+)\\\
    )\\s*/) do |paren|\n                                        paren.scan(/\\s*\\\
    ((?<paren>[^()]+)\\)\\s*/) do |paren|\n                                      \
    \    paren.scan(/\\s*\\((?<paren>[^()]+)\\)\\s*/) do |paren|\n               \
    \                             paren.scan(/\\s*", "  paren_string.scan(/[\\(\\\
    )]/) do |paren|\n    level = 0\n    paren_string.scan(/[\\(\\)]/) do |paren|\n\
    \      level += 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n   \
    \   level -= 1\n    end\n    level\n  end\nend", "  paren_string.scan(/[\\(\\\
    )]+/) do |paren_group|\n    paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group2|\n       \
    \ nested_paren_group2.scan(/[\\(\\)]+/) do |nested_paren_group3|\n          nested_paren_group3.scan(/[\\\
    (\\)]+/) do |nested_paren_group4|\n            nested_paren_group4.scan(/[\\(\\\
    )]+/) do |nested_paren_group5|\n              nested_paren_group5.scan(/[\\(\\\
    )]+/) do |nested_paren_group6|\n                nested_paren_group6.scan(/[\\\
    (\\)]+/) do |nested_paren_group7|\n                  nested_paren_group7.scan(/[\\\
    (\\)]+/) do |nested_paren_group8|\n                    nested_paren_group8.scan(/[\\\
    (\\)]+/) do |nested_paren_group9|\n                      nested_paren_group9.scan(/[\\\
    (\\)]+/) do |nested_paren_group10|\n                        nested_paren_group10.scan(/[\\\
    (\\)]+/) do |nested_paren_group11|\n                          nested_paren_group11.scan(/[\\\
    (\\)]+/) do |nested_paren_group12|\n                            nested_paren_group12.scan(/[\\\
    (\\)]+/) do |nested_paren_group13|\n                              nested_paren_group13.scan(/[\\\
    (\\)]+/) do |nested_paren_group14|\n                                nested_paren_group14.scan(/[\\\
    (\\)]+/) do |nested_paren_group15|\n                                  nested_paren_group15.scan(/[\\\
    (\\)]+/) do |nested_paren_group16|\n                                    nested_paren_group16.scan(/[\\\
    (\\)]+/) do |nested_paren_group17|\n                                      nested_paren_group17.scan(/[\\\
    (\\)]+/) do |nested_paren_group18|\n                                        nested_paren_group18.scan(/[\\\
    (\\)]+/) do |nested_paren_group19|\n                                         \
    \ nested_paren_group19.scan(/[\\(\\)]+/) do |nested_paren_group20|\n         \
    \                                   nested_paren_group20.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group21|\n                                              nested_paren_group21.scan(/[\\\
    (\\)]+/) do |nested_paren_group22|\n                                         \
    \       nested_paren_group22.scan(/[\\(\\)]+/) ", "  paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]+/) do |paren_char|\n    paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \        paren_char.scan(/[\\(\\)]+/) do |paren_char|\n          paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \              paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n          \
    \            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                  \
    \      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                        \
    \  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                            paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                              paren_char.scan(/[\\(\\\
    )]+/) do |paren_char|\n                                paren_char.scan(/[\\(\\\
    )]+/) do |paren_char|\n                                  paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                    paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                      paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                        paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                          paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                            paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                              paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                   \
    \ paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                             \
    \                         paren_char.scan(/[\\(\\)]+/) do |paren_char|\n", " \
    \ paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n \
    \ paren_nesting = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nest", "  paren_string.scan(/[^()]+/).map { |s| s.to_i }\nend",
  "  paren_string.scan(/[^()]+/).map { |x| x.size }.max\nend", "  paren_string = paren_string.strip\n\
    \  paren_stack = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_levels =\
    \ []\n  paren_nestings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nest",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string = paren_string.strip\n  paren_stack = []\n\
    \  paren_level = 0\n  paren_nesting = 0\n  paren_levels = []\n  paren_nestings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nest", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/\\\
    (/)\n  paren_string.scan(/\\)/)\n  paren", "  paren_string.scan(/[\\(\\)]/).map\
    \ { |x| x.to_i }.max\nend", "  paren_string.scan(/[\\(\\)]/).map { |x| x.to_i\
    \ }\nend", "  paren_string.scan(/[\\(\\)]/).map { |x| x.size }.max\nend", "  paren_string.scan(/\\\
    s*\\((?<level>\\d+)\\)\\s*/) do |level|\n    levels[level] += 1\n  end\n  paren_string.scan(/\\\
    s*\\((?<level>\\d+)\\)\\s*/) do |level|\n    levels[level] -= 1\n  end\n  levels.values.max\n\
    end", "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level\
    \ = 0\n  paren_nesting = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nest", "  paren_string = paren_string.strip\n  paren_string.gsub!(/\\\
    (/, '')\n  paren_string.gsub!(/\\)/, '')\n  paren_string.gsub!(/\\s+/, ' ')\n\
    \  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n    paren.scan(/[\\(\\)]+/) do |nested_paren|\n      nested_paren.scan(/[\\\
    (\\)]+/) do |nested_nested_paren|\n        nested_nested_paren.scan(/[\\(\\)]+/)\
    \ do |nested_nested_nested_paren|\n          nested_nested_nested_paren.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_paren|\n            nested_nested_nested_nested_paren.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_paren|\n              nested_nested_nested_nested_nested_paren.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_paren|\n              \
    \  nested_nested_nested_nested_nested_paren.scan(/[\\(\\)]+/) do |nested_nested_nested_nested_nested_nested_paren|\n\
    \                  nested_nested_nested_nested_nested_paren.scan(/[\\(\\)]+/)\
    \ do |nested_nested_nested_nested_nested_nested_nested_paren|\n              \
    \      nested_nested_nested_nested_nested_nested_paren.scan(/[\\(\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_nested_paren|\n\
    \                      nested_nested_nested_nested_nested_nested_nested_paren.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_paren|\n       \
    \                 nested_nested_nested_nested_nested_nested_paren.scan(/[\\(\\\
    )]+/) do |nested_nested_nested_nested_nested_nested_nested_paren|\n          \
    \                nested_nested_nested_nested_nested_nested_paren.scan(/[\\(\\\
    )]+/) do |nested_nested_nested_nested_nested_nested_nested_paren|\n          \
    \                  nested_nested_nested_nested_nested_nested_paren.scan(/[\\(\\\
    )]+/) do |nested_nested_nested_nested_nested_nested_nested_paren|\n          \
    \                    nested_nested_nested_nested_nested_nested_paren.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_paren|\n       \
    \                         nested_nested_nested_nested_nested_nested_paren.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_paren|\n       \
    \                           nested_nested_nested_nested_nested_nested_paren.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_paren|\n       \
    \                             nested_nested_nested_nested_nested_nested_paren.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_paren|\n       \
    \                               nested_nested_nested_nested_nested_nested_paren.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_paren|\n       \
    \                                 nested_nested_nested_nested_nested_nested_paren.scan(/[\\\
    (\\)]+/) do |nested_nested_nested_nested_nested_nested_nested_paren|\n       \
    \                                   nested_nested_nested_nested_nested_nested_",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_char|\n    paren_char.scan(/[\\(\\)]+/)\
    \ do |paren_char|\n      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n      \
    \  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n          paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \              paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n          \
    \            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                  \
    \      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                        \
    \  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                            paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                              paren_char.scan(/[\\(\\\
    )]+/) do |paren_char|\n                                paren_char.scan(/[\\(\\\
    )]+/) do |paren_char|\n                                  paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                    paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                      paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                        paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                          paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                            paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                              paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                   \
    \ paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                             \
    \                         paren_char.scan(/[\\(\\)]+/) do |paren_char|\n", " \
    \ paren_string.scan(/[()]/)\n  paren_stack = []\n  paren_level = 0\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n\
    \  paren_stack.push(paren_level)\n  paren_stack.push(paren_level)\n  paren", " \
    \ paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]*)/)\
    \ do |match|\n    levels[match[:level]] += 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]*)/) do |match|\n    levels[match[:level]]\
    \ -= 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]*)/)\
    \ do |match|\n    levels[match[:level]] -= 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]*)/) do |match|\n    levels[match[:level]]\
    \ += 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]*)/)\
    \ do |match|\n    levels[match[:level]] -= 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]*)/) do |match|\n    levels[match[:level]]\
    \ -= 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]*)/)\
    \ do |match|\n    levels[match[:level]] += 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]*)/) do |match|\n    levels[match[:level]]\
    \ -= 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]*)/)\
    \ do |match|\n    levels[match[:level]] -= 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]*)/) do |match|\n    levels[match[:level]]\
    \ += 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]*)/)\
    \ do |match|\n", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_level\
    \ = -1\n  paren_stack_string = ''\n  paren_stack_level_string = ''\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter = 0\n  paren_stack_level_counter\
    \ = 0\n  paren_stack_level_counter = 0\n  ", "  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_levels = paren_string.scan(/[\\(\\)]+/g).map(&:length)\n  max_level =\
    \ paren_levels.max\n  paren_levels.each_with_index do |level, i|\n    if level\
    \ > max_level\n      max_level = level\n    end\n  end\n  paren_levels.map { |level|\
    \ level - max_level }\nend", "  paren_string.scan(/[^()]+/)\n  level = 0\n  max_level\
    \ = 0\n  paren_stack = []\n  paren_stack.push(0)\n  paren_stack.push(paren_stack.last)\n\
    \  paren_stack.last = 0\n  paren_stack.each do |paren|\n    if paren == ')'\n\
    \      level += 1\n      max_level = level if level > max_level\n    elsif paren\
    \ == '('\n      level -= 1\n      max_level = level if level > max_level\n   \
    \ end\n  end\n  max_level\nend", "  paren_string = paren_string.strip\n  paren_array\
    \ = paren_string.split(' ')\n  max_level = 0\n  max_level_array = []\n  for i\
    \ in paren_array\n    level_array = i.count('(') - i.count(')')\n    if level_array\
    \ > max_level\n      max_level = level_array\n      max_level_array = i\n  end\n\
    \  max_level_array\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren|\n    paren_stack\
    \ = paren_stack.dup\n    paren_stack.push paren\n    paren_stack.each do |paren|\n\
    \      paren_stack.last.scan(/[\\(\\)]+/) do |paren|\n        paren_stack.push\
    \ paren\n      end\n    end\n  end\n  paren_stack\nend", "  paren_string = paren_string.strip\n\
    \  paren_stack = []\n  paren_level = 0\n  paren_levels = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_",
  "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string = ''\n\
    \  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nest", "  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/", "  paren_string.scan(/[()]/)\
    \ do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/)\
    \ do |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n         \
    \ paren_char.scan(/[()]/) do |paren_char|\n            paren_char.scan(/[()]/)\
    \ do |paren_char|\n              paren_char.scan(/[()]/) do |paren_char|\n   \
    \             paren_char.scan(/[()]/) do |paren_char|\n                  paren_char.scan(/[()]/)\
    \ do |paren_char|\n                    paren_char.scan(/[()]/) do |paren_char|\n\
    \                      paren_char.scan(/[()]/) do |paren_char|\n             \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \  paren_char.scan(/[()]/) do |paren_char|\n                            paren_char.scan(/[()]/)\
    \ do |paren_char|\n                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                               paren_char.scan(/[()]/) do |paren_char|\n    \
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/", "  paren_string = paren_string.strip\n\
    \  paren_array = paren_string.split(' ')\n  max_level = 0\n  max_level_array =\
    \ []\n  paren_level = 0\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  paren_level_array = []\n  paren_level_array = []\n  paren_level_array = []\n\
    \  ", "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level\
    \ = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.length }.max\nend", "  paren_string = paren_string.strip\n  paren_stack\
    \ = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_levels = []\n  paren_nestings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nest", "  paren_stack = []\n  paren_stack_size\
    \ = -1\n  paren_stack_level = -1\n  paren_stack_level_counter = 0\n  paren_stack_level_counters\
    \ = []\n  paren_stack_level_counters_size = []\n  paren_stack_level_counters_sizes\
    \ = []\n  paren_stack_level_counters_sizes_max = []\n  paren_stack_level_counters_sizes_max_index\
    \ = []\n  paren_stack_level_counters_sizes_max_indexs = []\n  paren_stack_level_counters_sizes_max_indexes_max\
    \ = []\n  paren_stack_level_counters_sizes_max_indexes_max_index = []\n  paren_stack_level_counters_sizes_max_indexes_max_index_max\
    \ = []\n  paren_stack_level_counters_sizes_max_indexes_max_index_max_index = []\n\
    \  paren_stack_level_counters_sizes_max_indexes_max_index_max_index_max = []\n\
    \  paren_stack_level_counters_sizes_max_indexes_max_index_max_index_max_index\
    \ = []\n  paren_stack_level_counters_sizes_max_indexes_max_index_max_index_max_index_max\
    \ = []\n  paren_stack_level_counters_sizes_max_indexes_max_index_max_index_max_index_max_index\
    \ = []\n  paren_stack_level_counters_sizes_max_indexes_max_index_max_index_max_index_max_index_max\
    \ = []\n  paren_stack_level_counters_sizes_max_indexes_max_index_max_index_max_index_max_index_max_index\
    \ = []\n  paren_stack_level_counters_sizes_max_indexes_max_index_max_index_max_index_max_index_max_index_max\
    \ = []\n  paren_stack_level_counters_sizes_max_indexes_max_index_max_index_max_index_max_index_max_index_max_index\
    \ = []\n  paren_stack_level_counters_sizes_max_indexes_max_index_max_index_max_index_max_index_max_index_max_index_max\
    \ = []\n  paren_stack_level_counters_sizes_max_indexes_max_index_max_index_max_index_max_index_max_index_max_index_max_index\
    \ = []\n  paren_stack_level_counters_sizes_max_indexes_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max\
    \ = []\n  paren_stack_level_counters_sizes_max_indexes_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index\
    \ = []\n  paren_stack_level_counters_sizes_max_indexes_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max\
    \ = []\n  paren_stack_level_counters_sizes_max_indexes_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_",
  "  paren_string.scan(/[()]/) do |char|\n    char = char.downcase\n    paren_string.scan(/[()]/)\
    \ do |char|\n      char = char.downcase\n      paren_string.scan(/[()]/) do |char|\n\
    \        char = char.downcase\n        paren_string.scan(/[()]/) do |char|\n \
    \         char = char.downcase\n          paren_string.scan(/[()]/) do |char|\n\
    \            char = char.downcase\n            paren_string.scan(/[()]/) do |char|\n\
    \              char = char.downcase\n              paren_string.scan(/[()]/) do\
    \ |char|\n                char = char.downcase\n                paren_string.scan(/[()]/)\
    \ do |char|\n                  char = char.downcase\n                  paren_string.scan(/[()]/)\
    \ do |char|\n                    char = char.downcase\n                    paren_string.scan(/[()]/)\
    \ do |char|\n                      char = char.downcase\n                    \
    \  paren_string.scan(/[()]/) do |char|\n                        char = char.downcase\n\
    \                        paren_string.scan(/[()]/) do |char|\n               \
    \           char = char.downcase\n                          paren_string.scan(/[()]/)\
    \ do |char|\n                            char = char.downcase\n              \
    \              paren_string.scan(/[()]/) do |char|\n                         \
    \     char = char.downcase\n                              paren_string.scan(/[()]/)\
    \ do |char|\n                                char = char.downcase\n          \
    \                      paren_string.scan(/[()]/) do |char|\n                 \
    \                 char = char.downcase\n                                  paren_string.scan(/[()]/)\
    \ do |char|\n                                    char = char.downcase\n      \
    \                              paren_string.scan(/[()]/) do |char|\n         \
    \                             char = char.downcase\n                         \
    \             paren_string.scan(/[()]/) do |char|\n                          \
    \              char = char.downcase\n                                        paren_string.scan(/[()]/)\
    \ do |char|\n                                          char = char.downcase\n\
    \                                          paren_string.scan(/[()]/) do |char|\n\
    \                                            char = char.downcase\n          \
    \                                  paren_string.scan(/[()]/) do |char|\n     \
    \                                         char = char.downcase\n             \
    \                                 paren_string.scan(/[()]/) do |char|\n      \
    \                                          char = char.downcase\n            \
    \                                    paren_string.scan(", "  paren_string.scan(/[()]/).each\
    \ do |paren_char|\n    paren_char = paren_char.downcase\n    if paren_char ==\
    \ '('\n      parse_nested_parens(paren_string)\n    elsif paren_char == ')'\n\
    \      parse_nested_parens(paren_string)\n    elsif paren_char == '('\n      parse_nested_parens(paren_string)\n\
    \    elsif paren_char == ')'\n      parse_nested_parens(paren_string)\n    else\n\
    \      parse_nested_parens(paren_string)\n    end\n  end\nend", "  paren_string\
    \ = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_levels\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_strings_count\
    \ = 0\n  paren_levels_strings_count_max = 0\n  paren_levels_strings_count_min\
    \ = 0\n  paren_levels_strings_count_avg = 0\n  paren_levels_strings_count_sum\
    \ = 0\n  paren_levels_strings_count_count = 0\n  paren_levels_strings_count_count_max\
    \ = 0\n  paren_levels_strings_count_count_min = 0\n  paren_levels_strings_count_count_avg\
    \ = 0\n  paren_levels_strings_count_count_sum = 0\n  paren_levels_strings_count_count_count\
    \ = 0\n  paren_levels_strings_count_count_count_max = 0\n  paren_levels_strings_count_count_count_min\
    \ = 0\n  paren_levels_strings_count_count_count_avg = 0\n  paren_levels_strings_count_count_count_sum\
    \ = 0\n  paren_levels_strings_count_count_count_count = 0\n  paren_levels_strings_count_count_count_count_max\
    \ = 0\n  paren_levels_strings_count_count_count_count_min = 0\n  paren_levels_strings_count_count_count_count_avg\
    \ = 0\n  paren_levels_strings_count_count_count_count_sum = 0\n  paren_levels_strings_count_count_count_count_count\
    \ = 0\n  paren_levels_strings_count_count_count_count_count_max = 0\n  paren_levels_strings_count_count_count_count_count_min\
    \ = 0\n  paren_levels_strings_count_count_count_count_count_avg = 0\n  paren_levels_strings_count_count_count_count_count_sum\
    \ = 0\n  paren_levels_strings_count_count_count_count_count_count = 0\n  paren_levels_strings_count_count_count_count_count_count_max\
    \ = 0\n  paren_levels_strings_count_count_count_count_count_count_min = 0\n  paren_levels_strings_count_count_count_count_count_count_avg\
    \ = 0\n  paren_levels_strings_count_count_count_count_count_count_sum = 0\n  paren_levels_strings_count_count_count_count_count_count_count\
    \ = 0\n  paren_levels_strings_count_count_count_count_count_count_count_max =\
    \ 0\n  paren_levels_strings_count_count_count_count_count_count_count_min = 0\n\
    \  paren_levels_strings_count_count_count_count_count_count_count_avg = 0\n  paren_levels_strings_count_count_count_",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*\\)/) do |group|\n\
    \    group.scan(/\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)/) do |nested_group|\n     \
    \ nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)/) do |inner_group|\n        inner_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)/) do |inner_nested_group|\n          inner_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)/) do |inner_inner_group|\n            inner_inner_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)/) do |inner_inner_nested_group|\n              inner_inner_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)/) do |inner_inner_inner_group|\n                inner_inner_inner_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)/) do |inner_inner_inner_nested_group|\n                 \
    \ inner_inner_inner_nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)/) do |inner_inner_inner_inner_group|\n\
    \                    inner_inner_inner_inner_group.scan(/\\s*\\(([^\\(\\)]+)\\\
    )/) do |inner_inner_inner_inner_nested_group|\n                      inner_inner_inner_inner_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)/) do |inner_inner_inner_inner_inner_group|\n            \
    \            inner_inner_inner_inner_inner_group.scan(/\\s*\\(([^\\(\\)]+)\\)/)\
    \ do |inner_inner_inner_inner_inner_nested_group|\n                          inner_inner_inner_inner_inner_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)/) do |inner_inner_inner_inner_inner_inner_group|\n      \
    \                      inner_inner_inner_inner_inner_inner_group.scan(/\\s*\\\
    (([^\\(\\)]+)\\)/) do |inner_inner_inner_inner_inner_inner_nested_group|\n   \
    \                           inner_inner_inner_inner_inner_inner_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)/) do |inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                                inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)/) do |inner_inner_inner_inner_inner_inner_inner_nested_group|\n\
    \                                  inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)/) do |inner_inner_inner_inner_inner_inner_inner_inner_nested_group|\n\
    \                                    inner_inner_inner_inner_inner_inner_inner_inner_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)/) do |inner_inner_inner_inner_inner_inner_inner_inner_inner_nested_group|\n",
  "  paren_string.scan(/[()]/).map { |x| x.to_i }\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          \
    \          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  \
    \    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                          paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n                            paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                              paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                                paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                                  paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n                                    paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                      paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                            paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string = paren_string.strip\n  paren_stack = []\n\
    \  paren_level = 0\n  paren_nesting = 0\n  paren_levels = []\n  paren_nestings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nest", "  paren_string.scan(/[^()]+/)\n\
    \  level = 0\n  max_level = 0\n  paren_levels = []\n  paren_levels_string = ''\n\
    \  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_levels_string\
    \ = ''\n  paren_levels_strings = []\n  paren_levels_string = ''\n  paren_levels_strings\
    \ = []\n  paren_levels_string = ''\n  paren_levels_strings = []\n  paren_level",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/) do |group|\n    if group.captures.size\
    \ == 1\n      group.captures.first\n    else\n      group.captures.map { |x| x.to_i\
    \ }.max\n    end\n  end\nend", "  paren_string = paren_string.strip\n  paren_string.gsub!(/\\\
    s+/, ' ').gsub!(/\\s+\\)/, '').gsub!(/\\s+\\)/, '').gsub!(/\\s+\\)/, '')\n  paren_string.gsub!(/\\\
    (/, '').gsub!(/\\)/, '')\n  paren_string.gsub!(/\\)/, '').gsub!(/\\s+/, ' ').gsub!(/\\\
    s+\\)/, '').gsub!(/\\s+\\)/, '').gsub!(/\\s+\\)/, '')\n  paren_string.gsub!(/\\\
    (/, '').gsub!(/\\)/, '')\n  paren_string.gsub!(/\\)/, '').gsub!(/\\s+/, ' ').gsub!(/\\\
    s+\\)/, '').gsub!(/\\s+\\)/, '').gsub!(/\\s+\\)/, '')\n  paren_string.gsub!(/\\\
    (/, '').gsub!(/\\)/, '')\n  paren_string.gsub!(/\\)/, '').gsub!(/\\s+/, ' ').gsub!(/\\\
    s+\\)/, '').gsub!(/\\s+\\)/, '').gsub!(/\\s+\\)/, '')\n  paren_string.gsub!(/\\\
    (/, '').gsub!(/\\)/, '')\n  paren_string.gsub!(/\\)/, '').gsub!(/\\s+/, ' ').gsub!(/\\\
    s+\\)/, '').gsub!(/\\s+\\)/, '').gsub!(/\\s+\\)/, '')\n  paren_string.gsub!(/\\\
    (/, '').gsub!(/\\)/, '')\n  paren_string.gsub!(/\\)/, '').gsub!(/\\s+/, ' ').gsub!(/\\\
    s+\\)/, '').gsub!(/\\s+\\)/, '').gsub!(/\\s+\\)/, '')\n  paren_string.gsub!(/\\\
    (/, '').gsub!(/\\)/, '')\n  paren_string.gsub!(/\\)/, '').gsub!(/\\s+/, ' ').gsub!(/\\\
    s+\\)/, '').gsub!(/\\s+\\)/, '').gsub!(/\\s+\\)/, '')\n  paren_string.gsub!(/\\\
    (/, '').gsub!(/\\)/, '')\n  paren_string.gsub!(/\\)/, '').gsub!(/\\s+/, ' ').gsub!(/\\\
    s+\\)/, '').gsub!(/\\s+\\)/, '').gsub!(/\\s+\\)/, '')\n  paren_string.gsub!(/\\\
    (/, '').gsub!(/\\)/", "  paren_string.scan(/[^()]+/)\n  paren_levels = paren_string.scan(/\\\
    (|\\)/).count\n  paren_levels -= 1 if paren_levels == 0\n  paren_levels -= 1 if\
    \ paren_levels == 1\n  paren_levels -= 1 if paren_levels == 2\n  paren_levels\
    \ -= 1 if paren_levels == 3\n  paren_levels -= 1 if paren_levels == 4\n  paren_levels\
    \ -= 1 if paren_levels == 5\n  paren_levels -= 1 if paren_levels == 6\n  paren_levels\
    \ -= 1 if paren_levels == 7\n  paren_levels -= 1 if paren_levels == 8\n  paren_levels\
    \ -= 1 if paren_levels == 9\n  paren_levels -= 1 if paren_levels == 10\n  paren_levels\
    \ -= 1 if paren_levels == 11\n  paren_levels -= 1 if paren_levels == 12\n  paren_levels\
    \ -= 1 if paren_levels == 13\n  paren_levels -= 1 if paren_levels == 14\n  paren_levels\
    \ -= 1 if paren_levels == 15\n  paren_levels -= 1 if paren_levels == 16\n  paren_levels\
    \ -= 1 if paren_levels == 17\n  paren_levels -= 1 if paren_levels == 18\n  paren_levels\
    \ -= 1 if paren_levels == 19\n  paren_levels -= 1 if paren_levels == 20\n  paren_levels\
    \ -= 1 if paren_levels == 21\n  paren_levels -= 1 if paren_levels == 22\n  paren_levels\
    \ -= 1 if paren_levels == 23\n  paren_levels -= 1 if paren_levels == 24\n  paren_levels\
    \ -= 1 if paren_levels == 25\n  paren_levels -= 1 if paren_levels == 26\n  paren_levels\
    \ -= 1 if paren_levels == 27\n  paren_levels -= 1 if paren_levels == 28\n  paren_levels\
    \ -= 1 if paren_levels == 29\n  paren_levels -= 1 if paren_levels == 30\n  paren_levels\
    \ -= 1 if paren_levels == 31\n  paren_levels -= 1 if paren_levels == 32\n  paren_levels\
    \ -= 1 if paren_levels == 33\n  paren_levels -= 1 if paren_levels == 34\n  paren_levels\
    \ -= 1 if paren_levels == 35\n  paren_levels -= 1 if paren_levels == 36\n  ",
  "  paren_stack = []\n  paren_level = 0\n  paren_stack << paren_string\n  while paren_stack.count\
    \ > 0\n    paren_string = paren_stack.pop\n    paren_level += 1\n    paren_stack\
    \ << paren_string\n  end\n  return paren_level\nend", "  paren_string.scan(/[()]/)\
    \ do |paren|\n    paren_level = paren.count('(') - paren.count(')')\n    paren_level\
    \ = 0 if paren_level < 0\n    paren_level += 1 if paren_level > 0\n    paren_level\n\
    \  end\nend", "  paren_string.scan(/[()]/) do |paren|\n    level = 0\n    paren_string.scan(/[()]/)\
    \ do |paren|\n      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren|\n\
    \      level -= 1\n    end\n    paren_string.scan(/[()]/) do |paren|\n      level\
    \ += 1\n    end\n    paren_string.scan(/[()]/) do |paren|\n      level -= 1\n\
    \    end\n    paren_string.scan(/[()]/) do |paren|\n      level += 1\n    end\n\
    \    paren_string.scan(/[()]/) do |paren|\n      level -= 1\n    end\n    paren_string.scan(/[()]/)\
    \ do |paren|\n      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren|\n\
    \      level -= 1\n    end\n    paren_string.scan(/[()]/) do |paren|\n      level\
    \ += 1\n    end\n    paren_string.scan(/[()]/) do |paren|\n      level -= 1\n\
    \    end\n    paren_string.scan(/[()]/) do |paren|\n      level += 1\n    end\n\
    \    paren_string.scan(/[()]/) do |paren|\n      level -= 1\n    end\n    paren_string.scan(/[()]/)\
    \ do |paren|\n      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren|\n\
    \      level -= 1\n    end\n    paren_string.scan(/[()]/) do |paren|\n      level\
    \ += 1\n    end\n    paren_string.scan(/[()]/) do |paren|\n      level -= 1\n\
    \    end\n    paren_string.scan(/[()]/) do |paren|\n      level += 1\n    end\n\
    \    paren_string.scan(/[()]/) do |paren|\n      level -= 1\n    end\n    paren_string.scan(/[()]/)\
    \ do |paren|\n      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren|\n\
    \      level -= 1\n    end\n    paren_string.scan(/[()]/) do |paren|\n      level\
    \ += 1\n    end\n    paren_string.scan(/[()]/) do |paren|\n      level -= 1\n\
    \    end\n    paren_string.scan(/[()]/) do |paren|\n      level += 1\n    end\n\
    \    paren_string.scan(/[()]/", "  paren_string.scan(/[^()]+/)\n  level = 0\n\
    \  paren_stack = []\n  paren_stack.push(0)\n  paren_stack.push(paren_stack.last)\n\
    \  paren_stack.last = 0\n  paren_stack.each do |paren|\n    if paren_stack.last\
    \ == 0\n      level += 1\n    else\n      level -= 1\n    end\n    paren_stack.push(level)\n\
    \  end\n  paren_stack.pop\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren_char|\n\
    \    paren_char = paren_char.strip\n    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \      paren_char = paren_char.strip\n      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \        paren_char = paren_char.strip\n        paren_char.scan(/[\\(\\)]+/) do\
    \ |paren_char|\n          paren_char = paren_char.strip\n          paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n            paren_char = paren_char.strip\n        \
    \    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n              paren_char =\
    \ paren_char.strip\n              paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                paren_char = paren_char.strip\n                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                  paren_char = paren_char.strip\n  \
    \                paren_char.scan(/[\\(\\)]+/) do |paren_char|\n              \
    \      paren_char = paren_char.strip\n                    paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                      paren_char = paren_char.strip\n\
    \                      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n        \
    \                paren_char = paren_char.strip\n                        paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                          paren_char = paren_char.strip\n\
    \                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n    \
    \                        paren_char = paren_char.strip\n                     \
    \       paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                       \
    \       paren_char = paren_char.strip\n                              paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                paren_char = paren_char.strip\n\
    \                                paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                  paren_char = paren_char.strip\n           \
    \                       paren_char.scan(/[\\(\\)]+/) do |paren_char|\n       \
    \                             paren_char = paren_char.strip\n                \
    \                    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n          \
    \                            ", "  paren_stack = []\n  paren_count = 0\n  paren_level\
    \ = 0\n  paren_stack_string = ''\n  paren_stack_string = paren_string\n  paren_stack_string.scan(/\\\
    (/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack_string.scan(/\\(/)\n  paren_stack_string.scan(/\\\
    )/)\n  paren_stack_string.scan(/\\(/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack_string.scan(/\\\
    (/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack_string.scan(/\\(/)\n  paren_stack_string.scan(/\\\
    )/)\n  paren_stack_string.scan(/\\(/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack_string.scan(/\\\
    (/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack_string.scan(/\\(/)\n  paren_stack_string.scan(/\\\
    )/)\n  paren_stack_string.scan(/\\(/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack_string.scan(/\\\
    (/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack_string.scan(/\\(/)\n  paren_stack_string.scan(/\\\
    )/)\n  paren_stack_string.scan(/\\(/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack_string.scan(/\\\
    (/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack_string.scan(/\\(/)\n  paren_stack_string.scan(/\\\
    )/)\n  paren_stack_string.scan(/\\(/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack_string.scan(/\\\
    (/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack_string.scan(/\\(/)\n  paren_stack_string.scan(/\\\
    )/)\n  paren_stack_string.scan(/\\(/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack_string.scan(/\\\
    (/)\n  paren_stack_string.scan(/\\)/)\n  paren_stack", "  paren_string.scan(/[\\\
    (\\)]/) do |paren_char|\n    paren_char.scan(/[\\(\\)]/) do |paren_char|\n   \
    \   paren_char.scan(/[\\(\\)]/) do |paren_char|\n        paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n          paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \            paren_char.scan(/[\\(\\)]/) do |paren_char|\n              paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                  paren_char.scan(/[\\(\\)]/) do |paren_char|\n             \
    \       paren_char.scan(/[\\(\\)]/) do |paren_char|\n                      paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                        paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n   \
    \                           paren_char.scan(/[\\(\\)]/) do |paren_char|\n    \
    \                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n   \
    \                               paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                    paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_string.scan(/[()]/)\
    \ do |char|\n    if char == '('\n      paren_stack << 1\n    elsif char == ')'\n\
    \      paren_stack.pop if paren_stack.last\n    end\n  end\n  paren_stack\nend",
  "  paren_string = paren_string.strip\n  paren_array = paren_string.split(' ')\n\
    \  max_level = 0\n  max_level_array = []\n  for i in paren_array\n    if i ==\
    \ '('\n      max_level += 1\n      max_level_array << max_level\n    elsif i ==\
    \ ')'\n      max_level -= 1\n      max_level_array << max_level\n    elsif max_level\
    \ > 0\n      max_level_array << max_level\n    end\n  end\n  max_level_array.max\n\
    end", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string\
    \ = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string = ''\n\
    \  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nest", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_string\
    \ = ''\n  paren_stack_level = 0\n  paren_stack_levels = []\n  paren_stack_levels_string\
    \ = ''\n  paren_stack_levels_count = 0\n  paren_stack_levels_strings = []\n  paren_stack_levels_strings_count\
    \ = 0\n  paren_stack_levels_string = ''\n  paren_stack_levels_strings = []\n \
    \ paren_stack_levels_strings_count = 0\n  paren_stack_levels_string = ''\n  paren_stack_levels_strings\
    \ = []\n  paren_stack_levels_strings_count = 0\n  paren_stack_levels_string =\
    \ ''\n  paren_stack_levels_strings = []\n  paren_stack_levels_strings_count =\
    \ 0\n  paren_stack_levels_string = ''\n  paren_stack_levels_strings = []\n  paren_stack_levels_strings_count\
    \ = 0\n  paren_stack_levels_string = ''\n  paren_stack_levels_strings = []\n \
    \ paren_stack_levels_strings_count = 0\n  paren_stack_levels_string = ''\n  paren_stack_levels_strings\
    \ = []\n  paren_stack_levels_strings_count = 0\n  paren_stack_levels_string =\
    \ ''\n  paren_stack_levels_strings = []\n  paren_stack_levels_strings_count =\
    \ 0\n  paren_stack_levels_string = ''\n  paren_stack_levels_strings = []\n  paren_stack_levels_strings_count\
    \ = 0\n  paren_stack_levels_string = ''\n  paren_stack_levels_strings = []\n \
    \ paren_stack_levels_strings_count = 0\n  paren_stack_levels_string = ''\n  paren_stack_levels_strings\
    \ = []\n  paren_stack_levels_strings_count = 0\n  paren_stack_levels_string =\
    \ ''\n  paren_stack_levels_strings = []\n  paren_stack_levels_strings_count =\
    \ 0\n  paren_stack_levels_string = ''\n  paren_stack_levels_strings = []\n  paren_stack_levels_strings_count\
    \ = 0\n  paren_stack_levels_string = ''\n  paren_stack_levels_strings = []\n \
    \ paren_stack_levels_strings_count = 0\n  paren_stack_levels_string = ''\n  paren_stack_levels_strings\
    \ = []\n  paren_stack_levels_strings_count = 0\n  paren_stack_levels_string =\
    \ ''\n  paren_stack_levels_strings = []\n  paren_stack_levels_strings_count =\
    \ 0\n  paren_stack_levels_string = ''\n  paren_stack_levels_strings = []\n  paren_stack_",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\\
    (\\)]+)\\)\\s*\\)/) do |group|\n    group.captures.map do |paren_group|\n    \
    \  parse_nested_parens(paren_group)\n    end.flatten.uniq.size\n  end\nend", " \
    \ paren_string.scan(/[\\(\\)]/) do |paren|\n    paren_stack = paren_stack.dup\n\
    \    paren_stack.push(paren)\n    paren_stack.each do |paren|\n      paren_stack.last.scan(/[\\\
    (\\)]/) do |paren|\n        paren_stack.push(paren)\n      end\n    end\n  end\n\
    \  paren_stack\nend", "  paren_string.scan(/[()]/) do |char|\n    if paren_string.peek(1).nil?\n\
    \      paren_string.scan(/[()]/) do |char|\n        paren_string.scan(/[()]/)\
    \ do |char|\n          paren_string.scan(/[()]/) do |char|\n            paren_string.scan(/[()]/)\
    \ do |char|\n              paren_string.scan(/[()]/) do |char|\n             \
    \   paren_string.scan(/[()]/) do |char|\n                  paren_string.scan(/[()]/)\
    \ do |char|\n                    paren_string.scan(/[()]/) do |char|\n       \
    \               paren_string.scan(/[()]/) do |char|\n                        paren_string.scan(/[()]/)\
    \ do |char|\n                          paren_string.scan(/[()]/) do |char|\n \
    \                           paren_string.scan(/[()]/) do |char|\n            \
    \                  paren_string.scan(/[()]/) do |char|\n                     \
    \           paren_string.scan(/[()]/) do |char|\n                            \
    \      paren_string.scan(/[()]/) do |char|\n                                 \
    \   paren_string.scan(/[()]/) do |char|\n                                    \
    \  paren_string.scan(/[()]/) do |char|\n                                     \
    \   paren_string.scan(/[()]/) do |char|\n                                    \
    \      paren_string.scan(/[()]/) do |char|\n                                 \
    \           paren_string.scan(/[()]/) do |char|\n                            \
    \                  paren_string.scan(/[()]/) do |char|\n                     \
    \                           paren_string.scan(/[()]/) do |char|\n            \
    \                                      paren_string.scan(/[()]/) do |char|\n \
    \                                                   paren_string.scan(/[()]/)\
    \ do |char|\n                                                      paren_string.scan(/[()]/)\
    \ do |char|\n                                                        paren_string.scan(/[()]/)\
    \ do |char|\n                                                          paren_string.scan(/[()]/)\
    \ do |char|\n                                                            paren_string.scan(/[()]/)\
    \ do |char|\n                                                              paren_string.scan(/[()]/)\
    \ do |char|\n                                                                paren_string.scan(/[()]/)\
    \ do |char|\n                                                                \
    \  paren_string.scan(/[()]/) do |char|\n                                     \
    \                               paren_string.scan(/[()]/) do |char|\n        \
    \                                                            paren_string.scan",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \              paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                    paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                            paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string.scan(/[\\(\\)]/).map { |x| x.size\
    \ }.max\nend", "  paren_string.scan(/[()]/) do |paren|\n    level = 0\n    paren_string.scan(/[()]/)\
    \ do |paren|\n      level += 1\n      paren_string.scan(/[()]/) do |paren|\n \
    \       level += 1\n      end\n    end\n    paren_string.scan(/[()]/) do |paren|\n\
    \      level += 1\n    end\n  end\nend", "  paren_string.scan(/[()]/) do |char|\n\
    \    if paren_string.scan(/[()]/)\n      paren_string.scan(/[()]/) do |char|\n\
    \        if paren_string.scan(/[()]/)\n          paren_string.scan(/[()]/) do\
    \ |char|\n            if paren_string.scan(/[()]/)\n              paren_string.scan(/[()]/)\
    \ do |char|\n                if paren_string.scan(/[()]/)\n                  paren_string.scan(/[()]/)\
    \ do |char|\n                    if paren_string.scan(/[()]/)\n              \
    \        paren_string.scan(/[()]/) do |char|\n                        if paren_string.scan(/[()]/)\n\
    \                          paren_string.scan(/[()]/) do |char|\n             \
    \               if paren_string.scan(/[()]/)\n                              paren_string.scan(/[()]/)\
    \ do |char|\n                                if paren_string.scan(/[()]/)\n  \
    \                                paren_string.scan(/[()]/) do |char|\n       \
    \                             if paren_string.scan(/[()]/)\n                 \
    \                     paren_string.scan(/[()]/) do |char|\n                  \
    \                      if paren_string.scan(/[()]/)\n                        \
    \                  paren_string.scan(/[()]/) do |char|\n                     \
    \                       if paren_string.scan(/[()]/)\n                       \
    \                       paren_string.scan(/[()]/) do |char|\n                \
    \                                if paren_string.scan(/[()]/)\n              \
    \                                    paren_string.scan(/[()]/) do |char|\n   \
    \                                                 if paren_string.scan(/[()]/)\n\
    \                                                      paren_string.scan(/[()]/)\
    \ do |char|\n                                                        if paren_string.scan(/[()]/)\n\
    \                                                          paren_string.scan(/[()]/)\
    \ do |char|\n                                                            if paren_string.scan(/[()]/)\n\
    \                                                              paren_string.scan(/[()]/)\
    \ do |char|\n                                                                if\
    \ paren_string.scan(/[()]/)\n                                                \
    \                  paren_string.scan(/[()]/) do |char|\n                     \
    \                                               if paren_string.scan(/[()]/)\n\
    \                                                                      return\
    \ [paren_string.scan(/[()]/).length]\n                                       \
    \                           end\n                                            \
    \                    end\n                                                   \
    \           end\n                                                            end\n\
    \                                                          end\n             \
    \                                           end\n                            \
    \                          end\n                                             \
    \       end\n                                                  end", "  paren_string\
    \ = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string = ''\n\
    \  paren_nestings_string = ''\n  paren_levels_string = paren_string.split(paren_levels_string)\n\
    \  paren_nestings_string = paren_string.split(paren_nestings_string)\n  paren_levels_string.each\
    \ do |paren_level_string|\n    paren_level_string = paren_level_string.strip\n\
    \    paren_level_string.split(paren_nestings_string).each do |paren_nesting_string|\n\
    \      paren_nesting_string = paren_nesting_string.strip\n      paren_nesting_string.split(paren_level_string).each\
    \ do |paren_level_string2|\n        paren_level_string2 = paren_level_string2.strip\n\
    \        paren_level_string2.split(paren_level_string).each do |paren_level_string3|\n\
    \          paren_level_string3 = paren_level_string3.strip\n          paren_level_string3.split(paren_level_string2).each\
    \ do |paren_level_string4|\n            paren_level_string4 = paren_level_string4.strip\n\
    \            paren_level_string4.split(paren_level_string3).each do |paren_level_string5|\n\
    \              paren_level_string5 = paren_level_string5.strip\n             \
    \ paren_level_string5.split(paren_level_string4).each do |paren_level_string6|\n\
    \                paren_level_string6 = paren_level_string6.strip\n           \
    \     paren_level_string6.split(paren_level_string5).each do |paren_level_string7|\n\
    \                  paren_level_string7 = paren_level_string7.strip\n         \
    \         paren_level_string7.split(paren_level_string6).each do |paren_level_string8|\n\
    \                    paren_level_string8 = paren_level_string8.strip\n       \
    \             paren_level_string8.split(paren_level_string7).each do |paren_level_string9|\n\
    \                      paren_level_string9 = paren_level_string9.strip\n     \
    \                 paren_level_string9.split(paren_level_string8).each do |paren_level_string10|\n\
    \                        paren_level_string10 = paren_level_string10.strip\n \
    \                       paren_level_string10.split(paren_level_string9).each do\
    \ |paren_level_string11|\n                          paren_level_string11 = paren_level_string11.strip\n\
    \                          paren_level_string11.split(paren_level_string", " \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\\
    )]+/) do |nested_paren_group|\n      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      \
    \    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n          \
    \  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n            \
    \  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n            \
    \    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n          \
    \        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      \
    \              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                            nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                      nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \ nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n             \
    \                                 nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \       nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n       \
    \                                             nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }.inject(0)\
    \ do |max_level, level|\n    level > max_level ? level : max_level\n  end\nend",
  "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/) do |group|\n    if group.captures.size\
    \ == 1\n      group.captures.first\n    else\n      group.captures.max\n    end\n\
    \  end\nend", "  paren_stack = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_groups\
    \ = []\n  paren_group = []\n  paren_group_nesting = 0\n  paren_group_level = 0\n\
    \  paren_group_nesting_level = 0\n  paren_group_levels = []\n  paren_group_levels_nesting\
    \ = []\n  paren_group_levels_nesting_level = 0\n  paren_group_levels_nesting_level_max\
    \ = 0\n  paren_group_levels_nesting_level_max_index = 0\n  paren_group_levels_nesting_level_max_index2\
    \ = 0\n  paren_group_levels_nesting_level_max_index3 = 0\n  paren_group_levels_nesting_level_max_index4\
    \ = 0\n  paren_group_levels_nesting_level_max_index5 = 0\n  paren_group_levels_nesting_level_max_index6\
    \ = 0\n  paren_group_levels_nesting_level_max_index7 = 0\n  paren_group_levels_nesting_level_max_index8\
    \ = 0\n  paren_group_levels_nesting_level_max_index9 = 0\n  paren_group_levels_nesting_level_max_index10\
    \ = 0\n  paren_group_levels_nesting_level_max_index11 = 0\n  paren_group_levels_nesting_level_max_index12\
    \ = 0\n  paren_group_levels_nesting_level_max_index13 = 0\n  paren_group_levels_nesting_level_max_index14\
    \ = 0\n  paren_group_levels_nesting_level_max_index15 = 0\n  paren_group_levels_nesting_level_max_index16\
    \ = 0\n  paren_group_levels_nesting_level_max_index17 = 0\n  paren_group_levels_nesting_level_max_index18\
    \ = 0\n  paren_group_levels_nesting_level_max_index19 = 0\n  paren_group_levels_nesting_level_max_index20\
    \ = 0\n  paren_group_levels_nesting_level_max_index21 = 0\n  paren_group_levels_nesting_level_max_index22\
    \ = 0\n  paren_group_levels_nesting_level_max_index23 = 0\n  paren_group_levels_nesting_level_max_index24\
    \ = 0\n  paren_group_levels_nesting_level_max_index25 = 0\n  paren_group_levels_nesting_level_max_index26\
    \ = 0\n  paren_group_levels_nesting_level_max_index27 = 0\n  paren_group_levels_nesting_level_max_index28\
    \ = 0\n  paren_group_levels_nesting_level_max_index29 = 0\n  paren_group_levels_nesting_level_max_index30",
  "  paren_string.scan(/[^()]+/).map { |x| x.length }.max\nend", "  paren_string =\
    \ paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_nesting =\
    \ 0\n  paren_nesting_level = 0\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size\
    \ = 0\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = 0\n\
    \  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack\
    \ = []\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack = []\n\
    \  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size\
    \ = 0\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = 0\n\
    \  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack\
    \ = []\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack = []\n\
    \  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size\
    \ = 0\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = 0\n\
    \  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack\
    \ = []\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack = []\n\
    \  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size\
    \ = 0\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = 0\n\
    \  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack\
    \ = []\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack = []\n\
    \  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size\
    \ = 0\n  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = 0\n\
    \  paren_nesting_level_stack = []\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack\
    \ = []\n  paren_nesting_level_stack_size = 0\n  paren_nesting_level_stack = []\n\
    \  paren_nesting_level_stack_size = 0\n  ", "  paren_string.scan(/[\\(\\)]/) do\
    \ |paren_char|\n    paren_char.scan(/[\\(\\)]/) do |paren_char|\n      paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \          paren_char.scan(/[\\(\\)]/) do |paren_char|\n            paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n              paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                paren_char.scan(/[\\(\\)]/) do |paren_char|\n               \
    \   paren_char.scan(/[\\(\\)]/) do |paren_char|\n                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                      paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n         \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                               paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_string.scan(/[\\(\\\
    )]/)\n  paren_stack = []\n  max_level = 0\n  paren_level = 0\n  paren_levels =\
    \ []\n  paren_levels_index = []\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length\
    \ = 0\n  paren_levels_index.length = 0\n  paren_levels_index.length = 0\n", " \
    \ paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n \
    \ paren_nesting = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nest", "  paren_string.scan(/[^()]+/)\n  max_level = 0\n  paren_level\
    \ = 0\n  paren_nesting = []\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  ", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\\
    (\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\\
    )]+)\\)\\s*\\)\\s*\\)/).map do |group|\n    group.to_s.scan(/\\s*\\(\\s*([^\\\
    (\\)]+)\\)\\s*\\)/).map do |nested_group|\n      nested_group.to_s.scan(/\\s*\\\
    (\\s*([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_group|\n        nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_group|\n      \
    \    nested_nested_nested_group.to_s.scan(/\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)/).map\
    \ do |nested_nested_nested_nested_group|\n            nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_group|\n\
    \              nested_nested_nested_nested_nested_group.to_s.scan(/\\s*\\(\\s*([^\\\
    (\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_group|\n      \
    \          nested_nested_nested_nested_nested_group.to_s.scan(/\\s*\\(\\s*([^\\\
    (\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_group|\n      \
    \            nested_nested_nested_nested_nested_group.to_s.scan(/\\s*\\(\\s*([^\\\
    (\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_group|\n\
    \                    nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)/).map do |", "  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/",
  "  paren_string.scan(/[()]/)\n  level = 0\n  paren_stack = []\n  paren_stack.push\
    \ paren_string.count('(')\n  paren_stack.push paren_string.count(')')\n  paren_stack.each\
    \ do |paren_count|\n    if paren_count > level\n      level = paren_count\n  \
    \  end\n  end\n  level\nend", "  paren_string = paren_string.strip\n  paren_string.gsub!(/\\\
    s+/, ' ').gsub!(/[\\(\\)]/, '')\n  paren_string.gsub!(/\\(/, '').gsub!(/\\)/,\
    \ '')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(').gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n\
    \  paren_string.gsub!(/\\(/, '(').gsub!(/\\)/, ')')\n  ", "  paren_string.scan(/\\\
    s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ += 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] -= 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ -= 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] += 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ -= 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] -= 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ += 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] -= 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ -= 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] += 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.to_i }.reduce(:+)\nend", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\\
    )]*)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]*)\\s*\\)\\s*\\)/) do |group|\n    group.captures.map\
    \ { |x| x.to_i }\n  end\nend", "  paren_string = paren_string.strip\n  paren_stack\
    \ = []\n  paren_level = 0\n  paren_levels = []\n  paren_levels_string = ''\n \
    \ paren_levels_count = 0\n  paren_levels_string = ''\n  paren_levels_count = 0\n\
    \  paren_levels_string = ''\n  paren_levels_count = 0\n  paren_levels_string =\
    \ ''\n  paren_levels_count = 0\n  paren_levels_string = ''\n  paren_levels_count\
    \ = 0\n  paren_levels_string = ''\n  paren_levels_count = 0\n  paren_levels_string\
    \ = ''\n  paren_levels_count = 0\n  paren_levels_string = ''\n  paren_levels_count\
    \ = 0\n  paren_levels_string = ''\n  paren_levels_count = 0\n  paren_levels_string\
    \ = ''\n  paren_levels_count = 0\n  paren_levels_string = ''\n  paren_levels_count\
    \ = 0\n  paren_levels_string = ''\n  paren_levels_count = 0\n  paren_levels_string\
    \ = ''\n  paren_levels_count = 0\n  paren_levels_string = ''\n  paren_levels_count\
    \ = 0\n  paren_levels_string = ''\n  paren_levels_count = 0\n  paren_levels_string\
    \ = ''\n  paren_levels_count = 0\n  paren_levels_string = ''\n  paren_levels_count\
    \ = 0\n  paren_levels_string = ''\n  paren_levels_count = 0\n  paren_levels_string\
    \ = ''\n  paren_levels_count = 0\n  paren_levels_string = ''\n  paren_levels_count\
    \ = 0\n  paren_levels_string = ''\n  paren_levels_count = 0\n  paren_levels_string\
    \ = ''\n  paren_levels_count = 0\n  paren_levels_string = ''\n  paren_levels_count\
    \ = 0\n  paren_levels_string = ''\n  paren_levels_count = 0\n  paren_levels_string\
    \ = ''\n  paren_levels_count = 0\n  paren_levels_string = ''\n  paren_levels_count\
    \ = 0\n  paren_levels_string = ''\n  paren_levels_count = 0\n  paren_levels_string\
    \ = ''\n  paren_levels_count = 0\n  paren_levels_string = ''\n  paren_levels_count\
    \ = 0\n  paren_levels_string = ''\n  paren_levels_count = 0\n  paren_levels_string\
    \ = ''\n  paren_levels_count = 0\n  paren_levels_string = ''\n  paren_levels_count\
    \ = 0\n  paren_levels_", "  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/", "  paren_string.scan(/[^()]+/)\n\
    \  max_level = 0\n  max_level_string = paren_string.match\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string", "  paren_string.scan(/[\\(\\)]/) do |char|\n    paren_level\
    \ += 1 if char == '('\n    paren_level -= 1 if char == ')'\n  end\n  paren_level\n\
    end", "  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string", " \
    \ paren_string.scan(/[()]/) do |char|\n    char = char.downcase\n    paren_levels[char]\
    \ += 1\n  end\n  paren_levels\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend",
  "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string = ''\n\
    \  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_strings\
    \ = []\n  paren_nest", "  paren_string.scan(/[^()]+/)\n  level = 0\n  paren_stack\
    \ = []\n  paren_stack.push(0)\n  paren_stack.push(paren_stack.last)\n  paren_stack.last\
    \ = 0\n  paren_stack.each do |i|\n    if paren_stack[i] > paren_stack.last\n \
    \     level = i\n      paren_stack.last = i\n    end\n  end\n  level\nend", " \
    \ paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/) while paren_string.peek(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/) while paren_string.peek(/[\\(\\)]/)\n\
    \  paren_string.scan(/[\\(\\)]/) while paren_string.peek(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/) while paren_string.peek(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/) while\
    \ paren_string.peek(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/) while paren_string.peek(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/) while paren_string.peek(/[\\(\\)]/)\n\
    \  paren_string.scan(/[\\(\\)]/) while paren_string.peek(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/) while paren_string.peek(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/) while\
    \ paren_string.peek(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/) while paren_string.peek(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/) while paren_string.peek(/[\\(\\)]/)\n\
    \  paren_string.scan(/[\\(\\)]/) while paren_string.peek(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/) while paren_string.peek(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/) while\
    \ paren_string.peek(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/) while paren_string.peek(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/) while paren_string.peek(/[\\(\\)]/)\n\
    \  paren_string.scan(/[\\(\\)]/) while paren_string.peek(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/) while paren_string.peek(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/) while\
    \ paren_string.peek(/[\\(\\)]/)", '  paren_string.scan(/\s*\(\s*\(([^\)]*)\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*',
  "  paren_stack = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_levels = []\n\
    \  paren_nestings = []\n  paren_levels_string = ''\n  paren_nestings_string =\
    \ ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_level", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string = paren_string.strip\n  paren_string.scan(/\\\
    s*\\(\\s*\\((?<paren_level>\\d+)\\)\\s*\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\\
    ((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\\
    d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\\
    d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\\
    d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\\
    d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\\
    d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\\
    d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\\
    d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\\
    d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\\
    d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\\
    d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\\
    d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\\
    d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\d+)\\)\\s*\\((?<paren_level>\\\
    d+)\\", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/) do |group|\n \
    \   if group.captures.size == 1\n      group.captures.first\n    else\n      group.captures.inject(0)\
    \ do |max_level, paren|\n        levels = paren.count('(') - paren.count(')')\n\
    \        max_level = max_level if levels > max_level\n        levels\n      end\n\
    \    end\n  end\nend", "  paren_string.scan(/[()]/) do |paren|\n    paren_level\
    \ = 0\n    paren_string.scan(/[()]/) do |paren|\n      paren_level += 1\n    end\n\
    \    paren_level\n  end\nend", "  paren_string.scan(/[()]/) do |paren_char|\n\
    \    paren_char = paren_char.to_s\n    if paren_char == '('\n      nested_level\
    \ = 1\n    elsif paren_char == ')'\n      nested_level = -1\n    else\n      nested_level\
    \ = 0\n    end\n    paren_char.scan(/[()]/) do |paren_char|\n      paren_char\
    \ = paren_char.to_s\n      if paren_char == '('\n        nested_level += 1\n \
    \     elsif paren_char == ')'\n        nested_level -= 1\n      end\n    end\n\
    \    nested_level\n  end\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/)\
    \ do |group|\n    if group.captures.size == 1\n      group.captures.first\n  \
    \  else\n      group.captures\n    end\n  end\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[()]/)\n  level = 0\n  paren_levels\
    \ = []\n  paren_levels << 0 while paren_levels.length < paren_string.length\n\
    \  paren_string.scan(/[()]/) while paren_string.length > 0\n  paren_levels <<\
    \ paren_string.length\n  paren_levels << 0 while paren_levels.length < paren_string.length\n\
    \  paren_string.scan(/[()]/) while paren_string.length > 0\n  paren_levels <<\
    \ paren_string.length\n  paren_levels << 0 while paren_levels.length < paren_string.length\n\
    \  paren_string.scan(/[()]/) while paren_string.length > 0\n  paren_levels <<\
    \ paren_string.length\n  paren_levels << 0 while paren_levels.length < paren_string.length\n\
    \  paren_string.scan(/[()]/) while paren_string.length > 0\n  paren_levels <<\
    \ paren_string.length\n  paren_levels << 0 while paren_levels.length < paren_string.length\n\
    \  paren_string.scan(/[()]/) while paren_string.length > 0\n  paren_levels <<\
    \ paren_string.length\n  paren_levels << 0 while paren_levels.length < paren_string.length\n\
    \  paren_string.scan(/[()]/) while paren_string.length > 0\n  paren_levels <<\
    \ paren_string.length\n  paren_levels << 0 while paren_levels.length < paren_string.length\n\
    \  paren_string.scan(/[()]/) while paren_string.length > 0\n  paren_levels <<\
    \ paren_string.length\n  paren_levels << 0 while paren_levels.length < paren_string.length\n\
    \  paren_string.scan(/[()]/) while paren_string.length > 0\n  paren_levels <<\
    \ paren_string.length\n  paren_levels << 0 while paren_levels.length < paren_string.length\n\
    \  paren_string.scan(/[()]/) while paren_string.length > 0\n  paren_levels <<\
    \ paren_string.length\n  paren_levels << 0 while paren_levels.length < paren_string.length\n\
    \  paren_string.scan(/[()]/) while paren_string.length > 0\n  paren_levels <<\
    \ paren_string.length\n  paren_levels << 0 while paren_levels.length < paren_string.length\n\
    \  paren_string.scan(/[()]/) while paren_string.length > 0\n  paren_levels <<\
    \ paren_string.length\n  paren_levels << ", "  paren_string.scan(/[^()]+/) do\
    \ |paren_string|\n    paren_string.scan(/[()]/) do |paren_string|\n      paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n        paren_string.scan(/[()]/) do |paren_string|\n   \
    \       paren_string.scan(/[^()]+/) do |paren_string|\n            paren_string.scan(/[()]/)\
    \ do |paren_string|\n              paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \   paren_string.scan(/[^()]+/) do |paren_string|\n                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                      paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                   paren_string.scan(/[^()]+/) do |paren_string|\n          \
    \                  paren_string.scan(/[()]/) do |paren_string|\n             \
    \                 paren_string.scan(/[^()]+/) do |paren_string|\n            \
    \                    paren_string.scan(/[()]/) do |paren_string|\n           \
    \                       paren_string.scan(/[^()]+/) do |paren_string|\n      \
    \                              paren_string.scan(/[()]/) do |paren_string|\n \
    \                                     paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[()]/) do |paren_string|\n\
    \                                          paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[()]/) do |paren_string|\n\
    \                                              paren_string.scan(/[^()]+/) do\
    \ |paren_string|\n                                                paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                      paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[^()]+/) do |paren_string|\n                           \
    \                                 paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                              paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n", "  paren_string = paren_string.strip\n  paren_stack =\
    \ []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_nesting = 0\n  paren_nesting_nesting_stack = []\n  paren_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_stack\
    \ = []\n  paren_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting = 0\n\
    \  paren_nesting_nesting_nesting_stack = []\n  paren_nesting_nesting_level = 0\n\
    \  paren_nesting_nesting = 0\n  paren_nesting_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting = 0\n  paren_nesting_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_stack = []\n  paren_nesting_nesting_level = 0\n\
    \  paren_nesting_nesting = 0\n  paren_nesting_nesting_stack = []\n  paren_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting = 0\n  paren_nesting_nesting_stack = []\n  paren_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting = 0\n  paren_nesting_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting = 0\n  paren_nesting_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_stack = []\n  paren_nesting_nesting_level = 0\n\
    \  paren_nesting_nesting = 0\n  paren_nesting_nesting_stack = []\n  paren_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting = 0\n  paren_nesting_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting = 0\n  paren_nesting_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_nesting\
    \ = 0\n  paren_nesting_nest", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/)\
    \ do |group|\n    if group.captures.size == 1\n      group.captures.first\n  \
    \  else\n      group.captures\n    end\n  end\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n          nested_paren_group.scan(/[\\(\\)]+/)\
    \ do |nested_paren_group|\n            nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n              nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                  nested_paren_group.scan(/[\\(\\)]+/)\
    \ do |nested_paren_group|\n                    nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_paren_group|\n                      nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                            nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                              nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                  nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                    nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                      nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \ nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n             \
    \                                 nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \       nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n       \
    \                                             nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_", "  paren_string = paren_string.strip\n  paren_string.gsub!(/\\\
    s+/, ' ').gsub!(/\\s+\\)/, '\\)')\n  paren_string.gsub!(/\\s+/, ' ').gsub!(/\\\
    (/, '(')\n  paren_string.gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\)/, '\\)')\n\
    \  paren_string.gsub!(/\\(/, '(')\n  paren_string.gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\\
    (/, '(')\n  paren_string.gsub!(/\\)/, ')')\n  paren_string.gsub!(/\\)/, '\\)')\n\
    \  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\\
    )/, '\\)')\n  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\)/, '\\\
    )')\n  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\)/, '\\)')\n\
    \  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\\
    )/, '\\)')\n  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\)/, '\\\
    )')\n  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\)/, '\\)')\n\
    \  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\\
    )/, '\\)')\n  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\)/, '\\\
    )')\n  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\)/, '\\)')\n\
    \  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\\
    )/, '\\)')\n  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\)/, '\\\
    )')\n  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\)/, '\\)')\n\
    \  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\)/, '\\)')\n  paren_string.gsub!(/\\\
    )/, '\\)')\n", "  paren_string.scan(/[()]/) do |char|\n    if paren_string.scan(/[()]/)\n\
    \      paren_string.scan(/[()]/) do |char|\n        paren_string.scan(/[()]/)\
    \ do |char|\n          paren_string.scan(/[()]/) do |char|\n            paren_string.scan(/[()]/)\
    \ do |char|\n              paren_string.scan(/[()]/) do |char|\n             \
    \   paren_string.scan(/[()]/) do |char|\n                  paren_string.scan(/[()]/)\
    \ do |char|\n                    paren_string.scan(/[()]/) do |char|\n       \
    \               paren_string.scan(/[()]/) do |char|\n                        paren_string.scan(/[()]/)\
    \ do |char|\n                          paren_string.scan(/[()]/) do |char|\n \
    \                           paren_string.scan(/[()]/) do |char|\n            \
    \                  paren_string.scan(/[()]/) do |char|\n                     \
    \           paren_string.scan(/[()]/) do |char|\n                            \
    \      paren_string.scan(/[()]/) do |char|\n                                 \
    \   paren_string.scan(/[()]/) do |char|\n                                    \
    \  paren_string.scan(/[()]/) do |char|\n                                     \
    \   paren_string.scan(/[()]/) do |char|\n                                    \
    \      paren_string.scan(/[()]/) do |char|\n                                 \
    \           paren_string.scan(/[()]/) do |char|\n                            \
    \                  paren_string.scan(/[()]/) do |char|\n                     \
    \                           paren_string.scan(/[()]/) do |char|\n            \
    \                                      paren_string.scan(/[()]/) do |char|\n \
    \                                                   paren_string.scan(/[()]/)\
    \ do |char|\n                                                      paren_string.scan(/[()]/)\
    \ do |char|\n                                                        paren_string.scan(/[()]/)\
    \ do |char|\n                                                          paren_string.scan(/[()]/)\
    \ do |char|\n                                                            paren_string.scan(/[()]/)\
    \ do |char|\n                                                              paren_string.scan(/[()]/)\
    \ do |char|\n                                                                paren_string.scan(/[()]/)\
    \ do |char|\n                                                                \
    \  paren_string.scan(/[()]/) do |char|\n                                     \
    \                               paren_string.scan(/[()]/) do |char|\n        \
    \                                                            paren_string", " \
    \ paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n \
    \ paren_nesting = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = paren_string.split(paren_levels_string)\n\
    \  paren_nestings_string = paren_string.split(paren_nestings_string)\n  paren_levels_string.each\
    \ do |paren_level_string|\n    paren_level_string += paren_levels_string[paren_levels_string.length-1]\n\
    \    paren_level_string += paren_nestings_string[paren_nestings_string.length-1]\n\
    \    paren_level_string = paren_level_string.strip\n    paren_level_string = paren_level_string.gsub(')',\
    \ '')\n    paren_level_string = paren_level_string.gsub('(', '')\n    paren_level_string\
    \ = paren_level_string.gsub(')', '')\n    paren_level_string = paren_level_string.gsub('(',\
    \ '')\n    paren_level_string = paren_level_string.gsub(')', '')\n    paren_level_string\
    \ = paren_level_string.gsub(')', '')\n    paren_level_string = paren_level_string.gsub(')',\
    \ '')\n    paren_level_string = paren_level_string.gsub(')', '')\n    paren_level_string\
    \ = paren_level_string.gsub(')', '')\n    paren_level_string = paren_level_string.gsub(')',\
    \ '')\n    paren_level_string = paren_level_string.gsub(')', '')\n    paren_level_string\
    \ = paren_level_string.gsub(')', '')\n    paren_level_string = paren_level_string.gsub(')',\
    \ '')\n    paren_level_string = paren_level_string.gsub(')', '')\n    paren_level_string\
    \ = paren_level_string.gsub(')', '')\n    paren_level_string = paren_level_string.gsub(')',\
    \ '')\n    paren_level_string = paren_level_string.gsub(')', '')\n    paren_level_string\
    \ = paren_level_string.gsub(')', '')\n    paren_level_string = paren_level_string.gsub(')',\
    \ '')\n    paren_level_string = paren_level_string.gsub(')', '')\n    paren_level_string\
    \ = paren_level_string.gsub(')', '')\n    paren_level_string = paren_level_string.gsub(')',\
    \ '')", "  paren_string.scan(/[^()]+/)\n  max_level = 0\n  paren_level = 0\n \
    \ paren_nesting = 0\n  paren_nesting_stack = []\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_", "  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/", "  paren_string.scan(/[\\\
    (\\)]/) do |char|\n    paren_levels[char] += 1\n  end\n  paren_levels\nend", '  paren_string.scan(/\s*\(\s*\((?<level>\d+)\)\s*\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)',
  "  paren_string.scan(/[^()]+/) do |paren_string|\n    paren_string.scan(/[()]/)\
    \ do |paren_string|\n      paren_string.scan(/[()]/) do |paren_string|\n     \
    \   paren_string.scan(/[()]/) do |paren_string|\n          paren_string.scan(/[()]/)\
    \ do |paren_string|\n            paren_string.scan(/[()]/) do |paren_string|\n\
    \              paren_string.scan(/[()]/) do |paren_string|\n                paren_string.scan(/[()]/)\
    \ do |paren_string|\n                  paren_string.scan(/[()]/) do |paren_string|\n\
    \                    paren_string.scan(/[()]/) do |paren_string|\n           \
    \           paren_string.scan(/[()]/) do |paren_string|\n                    \
    \    paren_string.scan(/[()]/) do |paren_string|\n                          paren_string.scan(/[()]/)\
    \ do |paren_string|\n                            paren_string.scan(/[()]/) do\
    \ |paren_string|\n                              paren_string.scan(/[()]/) do |paren_string|\n\
    \                                paren_string.scan(/[()]/) do |paren_string|\n\
    \                                  paren_string.scan(/[()]/) do |paren_string|\n\
    \                                    paren_string.scan(/[()]/) do |paren_string|\n\
    \                                      paren_string.scan(/[()]/) do |paren_string|\n\
    \                                        paren_string.scan(/[()]/) do |paren_string|\n\
    \                                          paren_string.scan(/[()]/) do |paren_string|\n\
    \                                            paren_string.scan(/[()]/) do |paren_string|\n\
    \                                              paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                paren_string.scan(/[()]/) do\
    \ |paren_string|\n                                                  paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/) do |paren_string|\n                             \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                              paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \        paren_string.scan(/[()]/) do |paren_string|", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.size }.max\nend", "  paren_string.scan(/[^()]+/).map { |x| x.length\
    \ }.max\nend", "  paren_string.scan(/[^()]+/) do |paren_group|\n    paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n      nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \        nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n         \
    \ nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n            nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n              nested_paren_group.scan(/[^()]+/) do\
    \ |nested_paren_group|\n                nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                  nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                    nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                      nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                        nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                          nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                            nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                              nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                  nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                    nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                      nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                        nested_paren_group.scan(/[^()]+/) do\
    \ |nested_paren_group|\n                                          nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                            nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                              nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                                nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                                  nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                                  \
    \  nested_paren_group.scan(/[^()]+/) do |nested_", "  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n    paren_string.scan(/[()]/) do |paren_string|\n      paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n        paren_string.scan(/[()]/) do |paren_string|\n   \
    \       paren_string.scan(/[^()]+/) do |paren_string|\n            paren_string.scan(/[()]/)\
    \ do |paren_string|\n              paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \   paren_string.scan(/[^()]+/) do |paren_string|\n                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                      paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                   paren_string.scan(/[^()]+/) do |paren_string|\n          \
    \                  paren_string.scan(/[()]/) do |paren_string|\n             \
    \                 paren_string.scan(/[^()]+/) do |paren_string|\n            \
    \                    paren_string.scan(/[()]/) do |paren_string|\n           \
    \                       paren_string.scan(/[^()]+/) do |paren_string|\n      \
    \                              paren_string.scan(/[()]/) do |paren_string|\n \
    \                                     paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[()]/) do |paren_string|\n\
    \                                          paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[()]/) do |paren_string|\n\
    \                                              paren_string.scan(/[^()]+/) do\
    \ |paren_string|\n                                                paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                      paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[^()]+/) do |paren_string|\n                           \
    \                                 paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                              paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n", "  paren_string.scan(/[^()]+/).map { |x| x.length }.max\n\
    end", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string\
    \ = paren_string.strip\n  paren_string.gsub!(/\\(/, '[')\n  paren_string.gsub!(/\\\
    )/, ']')\n  paren_string.gsub!(/\\s+/, ' ')\n  paren_string.gsub!(/\\[/, '(')\n\
    \  paren_string.gsub!(/\\]/, ')')\n  paren_string.gsub!(/\\(/, '(')\n  paren_string.gsub!(/\\\
    )/, ')')\n  paren_string.gsub!(/\\s+/, ' ')\n  paren_string.gsub!(/\\[/, '(')\n\
    \  paren_string.gsub!(/\\]/, ')')\n  paren_string.gsub!(/\\(/, '(')\n  paren_string.gsub!(/\\\
    )/, ')')\n  paren_string.gsub!(/\\s+/, ' ')\n  paren_string.gsub!(/\\[/, '(')\n\
    \  paren_string.gsub!(/\\]/, ')')\n  paren_string.gsub!(/\\(/, '(')\n  paren_string.gsub!(/\\\
    )/, ')')\n  paren_string.gsub!(/\\s+/, ' ')\n  paren_string.gsub!(/\\[/, '(')\n\
    \  paren_string.gsub!(/\\]/, ')')\n  paren_string.gsub!(/\\(/, '(')\n  paren_string.gsub!(/\\\
    )/, ')')\n  paren_string.gsub!(/\\s+/, ' ')\n  paren_string.gsub!(/\\[/, '(')\n\
    \  paren_string.gsub!(/\\]/, ')')\n  paren_string.gsub!(/\\(/, '(')\n  paren_string.gsub!(/\\\
    )/, ')')\n  paren_string.gsub!(/\\s+/, ' ')\n  paren_string.gsub!(/\\[/, '(')\n\
    \  paren_string.gsub!(/\\]/, ')')\n  paren_string.gsub!(/\\(/, '(')\n  paren_string.gsub!(/\\\
    )/, ')')\n  paren_string.gsub!(/\\s+/, ' ')\n  paren_string.gsub!(/\\[/, '(')\n\
    \  paren_string.gsub!(/\\]/, ')')\n  paren_string.gsub!(/\\(/, '(')\n  paren_string.gsub!(/\\\
    )/, ')')\n  paren_string.gsub!(/\\s+/, ' ')\n  paren_string.gsub!(/\\[/, '(')\n\
    \  paren_string.gsub!(/\\]/, ')')\n  paren_string.gsub!(/\\", "  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[",
  "  paren_string.scan(/[()]/) do |char|\n    if paren_string.scan(/[()]/).empty?\n\
    \      paren_string.scan(/[()]/) do |char|\n        paren_string.scan(/[()]/)\
    \ do |char|\n          paren_string.scan(/[()]/) do |char|\n            paren_string.scan(/[()]/)\
    \ do |char|\n              paren_string.scan(/[()]/) do |char|\n             \
    \   paren_string.scan(/[()]/) do |char|\n                  paren_string.scan(/[()]/)\
    \ do |char|\n                    paren_string.scan(/[()]/) do |char|\n       \
    \               paren_string.scan(/[()]/) do |char|\n                        paren_string.scan(/[()]/)\
    \ do |char|\n                          paren_string.scan(/[()]/) do |char|\n \
    \                           paren_string.scan(/[()]/) do |char|\n            \
    \                  paren_string.scan(/[()]/) do |char|\n                     \
    \           paren_string.scan(/[()]/) do |char|\n                            \
    \      paren_string.scan(/[()]/) do |char|\n                                 \
    \   paren_string.scan(/[()]/) do |char|\n                                    \
    \  paren_string.scan(/[()]/) do |char|\n                                     \
    \   paren_string.scan(/[()]/) do |char|\n                                    \
    \      paren_string.scan(/[()]/) do |char|\n                                 \
    \           paren_string.scan(/[()]/) do |char|\n                            \
    \                  paren_string.scan(/[()]/) do |char|\n                     \
    \                           paren_string.scan(/[()]/) do |char|\n            \
    \                                      paren_string.scan(/[()]/) do |char|\n \
    \                                                   paren_string.scan(/[()]/)\
    \ do |char|\n                                                      paren_string.scan(/[()]/)\
    \ do |char|\n                                                        paren_string.scan(/[()]/)\
    \ do |char|\n                                                          paren_string.scan(/[()]/)\
    \ do |char|\n                                                            paren_string.scan(/[()]/)\
    \ do |char|\n                                                              paren_string.scan(/[()]/)\
    \ do |char|\n                                                                paren_string.scan(/[()]/)\
    \ do |char|\n                                                                \
    \  paren_string.scan(/[()]/) do |char|\n                                     \
    \                               paren_string.scan(/[()]/) do |char|\n        \
    \                                                            ", "  paren_string.scan(/[^()]+/)\n\
    \  level = 0\n  max_level = 0\n  paren_levels = []\n  paren_levels_stack = []\n\
    \  paren_levels_stack.push paren_levels\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push 0\n  paren_levels_stack.push\
    \ 0\n  paren_levels_stack.push 0\n  paren_levels_", "  paren_string.scan(/[\\\
    (\\)]/) do |paren|\n    level = 0\n    paren_string.scan(/[\\(\\)]/) do |paren|\n\
    \      level += 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n   \
    \   level -= 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level\
    \ += 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level -=\
    \ 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n\
    \    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level -= 1\n   \
    \ end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n    end\n\
    \    paren_string.scan(/[\\(\\)]/) do |paren|\n      level -= 1\n    end\n   \
    \ paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n    end\n    paren_string.scan(/[\\\
    (\\)]/) do |paren|\n      level -= 1\n    end\n    paren_string.scan(/[\\(\\)]/)\
    \ do |paren|\n      level += 1\n    end\n    paren_string.scan(/[\\(\\)]/) do\
    \ |paren|\n      level -= 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n\
    \      level += 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n   \
    \   level -= 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level\
    \ += 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level -=\
    \ 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n\
    \    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level -= 1\n   \
    \ end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n    end\n\
    \    paren_string.scan(/[\\(\\)]/) do |paren|\n      level -= 1\n    end\n   \
    \ paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n    end\n    paren_string.scan(/[\\\
    (\\)]/) do |paren|\n      level -= 1\n    end\n    paren_string.scan(/[\\", " \
    \ paren_stack = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level\
    \ = 0\n  paren_nesting_level_max = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_", "  paren_string\
    \ = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_max = 0\n  paren_nesting_max_index = 0\n  paren_nesting_max_index2\
    \ = 0\n  paren_nesting_max_index3 = 0\n  paren_nesting_max_index4 = 0\n  paren_nesting_max_index5\
    \ = 0\n  paren_nesting_max_index6 = 0\n  paren_nesting_max_index7 = 0\n  paren_nesting_max_index8\
    \ = 0\n  paren_nesting_max_index9 = 0\n  paren_nesting_max_index10 = 0\n  paren_nesting_max_index11\
    \ = 0\n  paren_nesting_max_index12 = 0\n  paren_nesting_max_index13 = 0\n  paren_nesting_max_index14\
    \ = 0\n  paren_nesting_max_index15 = 0\n  paren_nesting_max_index16 = 0\n  paren_nesting_max_index17\
    \ = 0\n  paren_nesting_max_index18 = 0\n  paren_nesting_max_index19 = 0\n  paren_nesting_max_index20\
    \ = 0\n  paren_nesting_max_index21 = 0\n  paren_nesting_max_index22 = 0\n  paren_nesting_max_index23\
    \ = 0\n  paren_nesting_max_index24 = 0\n  paren_nesting_max_index25 = 0\n  paren_nesting_max_index26\
    \ = 0\n  paren_nesting_max_index27 = 0\n  paren_nesting_max_index28 = 0\n  paren_nesting_max_index29\
    \ = 0\n  paren_nesting_max_index30 = 0\n  paren_nesting_max_index31 = 0\n  paren_nesting_max_index32\
    \ = 0\n  paren_nesting_max_index33 = 0\n  paren_nesting_max_index34 = 0\n  paren_nesting_max_index35\
    \ = 0\n  paren_nesting_max_index36 = 0\n  paren_nesting_max_index37 = 0\n  paren_nesting_max_index38\
    \ = 0\n  paren_nesting_max_index39 = 0\n  paren_nesting_max_index40 = 0\n  paren_nesting_max_index41\
    \ = 0\n  paren_nesting_max_index42 = 0\n  paren_nesting_max_index43 = 0\n  paren_nesting_max_index44\
    \ = 0\n  paren_nesting_max_index45 = 0\n  paren_nesting_max_index46 = 0\n  paren_nesting_max_index47\
    \ = 0\n  paren_nesting_max_index", "  paren_string.scan(/[^()]+/).map { |x| x.to_i\
    \ }\nend", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*\\)/)\
    \ do |group|\n    group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_group|\n\
    \      nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_group|\n\
    \        nested_nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_group|\n\
    \          nested_nested_nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\)/) do\
    \ |nested_nested_nested_nested_group|\n            nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_group|\n\
    \              nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^\\(\\\
    )]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_group|\n      \
    \          nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^\\\
    (\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                  nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                    nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_char|\n    paren_char = paren_char.strip\n\
    \    if paren_char.empty?\n      nil\n    elsif paren_char == '('\n      paren_level\
    \ = 1\n    elsif paren_char == ')'\n      paren_level -= 1\n    end\n    if paren_level\
    \ == 0\n      paren_level\n    else\n      paren_level\n    end\n  end\nend",
  "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_", "  paren_string.scan(/[\\\
    (\\)]/).map { |x| x.size }.max\nend", "  paren_string.scan(/\\s*\\(\\s*\\((?<paren_level>\\\
    d+)\\)\\s*\\)\\s*(?<paren_level>\\d+)\\s*\\)/) do |match|\n    paren_levels[match[:paren_level]]\
    \ += 1\n  end\n  paren_levels\nend", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\\
    (\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*([^\\(\\)]+)\\\
    s*\\)/).flatten.map do |group|\n    group.to_i if group\n  end\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.size }.max\nend", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\n\
    end", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[()]/) do |char|\n    char == '(' ? parse_nested_parens(paren_string)\
    \ : paren_string.scan(/[()]/)\n  end\nend", "  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/) do |group|\n    if group[1]\n      parse_nested_parens(group[1])\n\
    \    else\n      parse_nested_parens(group[2])\n    end\n  end\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |s| s.to_i }\nend", "  paren_string.scan(/[\\(\\)]/) do |paren|\n    level\
    \ = 0\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n    end\n\
    \    paren_string.scan(/[\\(\\)]/) do |paren|\n      level -= 1\n    end\n   \
    \ paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n    end\n    paren_string.scan(/[\\\
    (\\)]/) do |paren|\n      level -= 1\n    end\n    paren_string.scan(/[\\(\\)]/)\
    \ do |paren|\n      level += 1\n    end\n    paren_string.scan(/[\\(\\)]/) do\
    \ |paren|\n      level -= 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n\
    \      level += 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n   \
    \   level -= 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level\
    \ += 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level -=\
    \ 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n\
    \    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level -= 1\n   \
    \ end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n    end\n\
    \    paren_string.scan(/[\\(\\)]/) do |paren|\n      level -= 1\n    end\n   \
    \ paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n    end\n    paren_string.scan(/[\\\
    (\\)]/) do |paren|\n      level -= 1\n    end\n    paren_string.scan(/[\\(\\)]/)\
    \ do |paren|\n      level += 1\n    end\n    paren_string.scan(/[\\(\\)]/) do\
    \ |paren|\n      level -= 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n\
    \      level += 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n   \
    \   level -= 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level\
    \ += 1\n    end\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level -=\
    \ 1\n    end\n    paren_string.scan(/[\\", "  paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_char|\n    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n      paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n        paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n            paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n              paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                paren_char.scan(/[\\(\\)]+/) do |paren_char|\n              \
    \    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                    paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                      paren_char.scan(/[\\(\\)]+/) do\
    \ |paren_char|\n                        paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n    \
    \                        paren_char.scan(/[\\(\\)]+/) do |paren_char|\n      \
    \                        paren_char.scan(/[\\(\\)]+/) do |paren_char|\n      \
    \                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n    \
    \                              paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]+/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                   \
    \ paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                             \
    \                         paren_char.scan(/[\\(\\)]+/) do |paren_char|\n", '  paren_string.scan(/\s*\(\s*\(([^\)]*)\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*|\s*\(\s*\(([^()]*?)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()',
  "  paren_string.scan(/[\\(\\)]/) do |paren|\n    level = 0\n    paren_string.scan(/[\\\
    (\\)]/) do |paren|\n      level += 1\n    end\n    paren_string.scan(/[\\(\\)]/)\
    \ do |paren|\n      level -= 1\n    end\n    level\n  end\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          \
    \          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  \
    \    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                          paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n                            paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                              paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                                paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                                  paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n                                    paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                      paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                            paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string.scan(/[^()]+/).map { |s| s.to_i\
    \ }\nend", "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level\
    \ = 0\n  paren_nesting = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string += paren_levels_string\n\
    \  paren_nestings_string += paren_nestings_string\n  paren_levels_string ", " \
    \ paren_string.scan(/[\\(\\)]/).map { |x| x.to_i }.reduce(:+)\nend", "  paren_string\
    \ = paren_string.strip\n  paren_string = paren_string.gsub('(', ' ( ')\n  paren_string\
    \ = paren_string.gsub(')', ' ) ')\n  paren_string = paren_string.gsub('\\n', '\
    \ \\n ')\n  paren_string = paren_string.gsub('\\t', ' \\t')\n  paren_string =\
    \ paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n\
    \  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string.gsub('  ', ' ')\n  paren_string = paren_string.gsub('\
    \  ', ' ')\n  paren_string = paren_string", "  paren_string.scan(/\\s*\\(([^()]+)\\\
    )\\s*|([^()]+)/) do |paren_string|\n    if paren_string.empty?\n      0\n    elsif\
    \ paren_string.scan(/\\(/).empty?\n      1\n    else\n      paren_string.scan(/\\\
    (/).size\n    end\n  end\nend", "  paren_string.scan(/[\\(\\)]/) do |char|\n \
    \   if char == '('\n      paren_stack << paren_stack.length\n    elsif char ==\
    \ ')'\n      paren_stack.pop\n    end\n  end\n  paren_stack.length\nend", "  paren_string\
    \ = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_", "  paren_string.scan(/\\\
    s*\\(\\s*\\((?<paren>[^\\)]+)\\)\\s*\\)\\s*|\\s*\\((?<paren>[^\\)]+)\\)/) do |paren|\n\
    \    paren.paren.scan(/\\s*\\(\\s*\\((?<paren>[^\\)]+)\\)\\s*\\)\\s*|\\s*\\((?<paren>[^\\\
    )]+)\\)/) do |paren2|\n      paren2.paren.scan(/\\s*\\(\\s*\\((?<paren>[^\\)]+)\\\
    )\\s*\\)\\s*|\\s*\\((?<paren>[^\\)]+)\\)/) do |paren3|\n        paren3.paren.scan(/\\\
    s*\\(\\s*\\((?<paren>[^\\)]+)\\)\\s*\\)\\s*|\\s*\\((?<paren>[^\\)]+)\\)/) do |paren4|\n\
    \          paren4.paren.scan(/\\s*\\(\\s*\\((?<paren>[^\\)]+)\\)\\s*\\)\\s*|\\\
    s*\\((?<paren>[^\\)]+)\\)/) do |paren5|\n            paren5.paren.scan(/\\s*\\\
    (\\s*\\((?<paren>[^\\)]+)\\)\\s*\\)\\s*|\\s*\\((?<paren>[^\\)]+)\\)/) do |paren6|\n\
    \              paren6.paren.scan(/\\s*\\(\\s*\\((?<paren>[^\\)]+)\\)\\s*\\)\\\
    s*|\\s*\\((?<paren>[^\\)]+)\\)/) do |paren7|\n                paren7.paren.scan(/\\\
    s*\\(\\s*\\((?<paren>[^\\)]+)\\)\\s*\\)\\s*|\\s*\\((?<paren>[^\\)]+)\\)/) do |paren8|\n\
    \                  paren8.paren.scan(/\\s*\\(\\s*\\((?<paren>[^\\)]+)\\)\\s*\\\
    )\\s*|\\s*\\((?<paren>[^\\)]+)\\)/) do |paren9|\n                    paren9.paren.scan(/\\\
    s*\\(\\s*\\((?<paren>[^\\)]+)\\)\\s*\\)\\s*|\\s*\\((?<paren>[^\\)]+)\\)/) do |paren10|\n\
    \                      paren10.paren.scan(/\\s*\\(\\s*\\((?<paren>[^\\)]+)\\)\\\
    s*\\)\\s*|\\s*\\((?<paren>[^\\)]+)\\)/) do |paren11|\n                       \
    \ paren11.paren.scan(/\\s*\\(\\s*\\((?<paren>[^\\)]", "  paren_string = paren_string.strip\n\
    \  paren_stack = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_levels =\
    \ []\n  paren_nestings = []\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nestings_string\
    \ = ''\n  paren_levels_string = ''\n  paren_nestings_string = ''\n  paren_levels_string\
    \ = ''\n  paren_nestings_string = ''\n  paren_levels_string = ''\n  paren_nest",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_char|\n    paren_char.scan(/[\\(\\)]+/)\
    \ do |nested_paren_char|\n      nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n\
    \        nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n        \
    \  nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n            nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n              nested_paren_char.scan(/[\\(\\\
    )]+/) do |nested_paren_char|\n                nested_paren_char.scan(/[\\(\\)]+/)\
    \ do |nested_paren_char|\n                  nested_paren_char.scan(/[\\(\\)]+/)\
    \ do |nested_paren_char|\n                    nested_paren_char.scan(/[\\(\\)]+/)\
    \ do |nested_paren_char|\n                      nested_paren_char.scan(/[\\(\\\
    )]+/) do |nested_paren_char|\n                        nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n                          nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n                            nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n                              nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n                                nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n                                  nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n                                    nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n                                      nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n                                        nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n                                          nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n                                            nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n                                            \
    \  nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n              \
    \                                  nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n\
    \                                                  nested_paren_char.scan(/[\\\
    (\\)]"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
