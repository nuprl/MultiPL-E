name: HumanEval_140_fix_spaces
language: ruby
prompt: "# Given a string text, replace all spaces in it with underscores, \n# and\
  \ if a string has more than 2 consecutive spaces, \n# then replace all consecutive\
  \ spaces with - \n# fix_spaces(\"Example\") == \"Example\"\n# fix_spaces(\"Example\
  \ 1\") == \"Example_1\"\n# fix_spaces(\" Example 2\") == \"_Example_2\"\n# fix_spaces(\"\
  \ Example   3\") == \"_Example-3\"\ndef fix_spaces(text)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fix_spaces\n\
  \    candidate = method(:fix_spaces)\n    assert_equal(\"Example\", candidate.call(\"\
  Example\"))\n    assert_equal(\"Mudasir_Hanif_\", candidate.call(\"Mudasir Hanif\
  \ \"))\n    assert_equal(\"Yellow_Yellow__Dirty__Fellow\", candidate.call(\"Yellow\
  \ Yellow  Dirty  Fellow\"))\n    assert_equal(\"Exa-mple\", candidate.call(\"Exa\
  \   mple\"))\n    assert_equal(\"-Exa_1_2_2_mple\", candidate.call(\"   Exa 1 2\
  \ 2 mple\"))\n  end\nend\n"
completions: ["  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/,\
    \ \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks\
    \ for your answer. I've tried your solution and it works perfectly. Thanks again!\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are multiple spaces next to each\
    \ other. For example, `fix_spaces(\"Example   3\")` returns `\"Example-3\"` instead\
    \ of `\"Example_3\"`.\n<|/ c |>\n<| c |>\nI believe that is a valid use case for\
    \ OP's question. He wants to replace multiple spaces with a single dash. He also\
    \ wants to replace multiple consecutive spaces with a single dash.\n<|/ c |>\n\
    <| c |>\nI agree, that's why I added the comment in the code explaining why I\
    \ believe that is a valid use case. :)\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work if\
    \ there are multiple spaces between words. For example, `fix_spaces(\"Example\
    \ 1 2 3\")` returns `\"Example_1_2_3\"`.\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ and fixed it now. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if there are multiple spaces between words. For example, `fix_spaces(\"\
    Example 1 2 3\")` returns `\"Example_1_2_3\"`.\n<|/ c |>\n<| c |>\nYes, I noticed\
    \ that and fixed it now. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a |>\n<| c |>\nI like this solution, although it would\
    \ be better to use a regex to match all spaces instead of just `\\s`.\n<|/ c |>\n\
    <| c |>\nI agree with you. I've updated my answer accordingly.\n<|/ c |>\n<| c\
    \ |>\nI like this solution, but I wonder if there is a way to avoid the double\
    \ gsub. Maybe something like `text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")`?\n\
    <|/ c |>\n<| c |>\nYes, that would work. Or `text.gsub(/\\s+/, \"_\").gsub(/\\\
    s{2,}/, \"-\").gsub(/-{2,}/, \"-\")`\n<|/ c |>\n<| a dscore=5 tags=ruby,regex\
    \ |>\n<code>\n\"Example 1\".gsub(/\\s+/, '_').gsub(/-+/, '_')\n</code>\n<|/ a\
    \ |>\n<| c |>\nThis doesn't work if you have multiple consecutive spaces.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if you have multiple consecutive spaces.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have multiple consecutive spaces.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have multiple consecutive spaces.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have multiple consecutive spaces.\n\
    <|/ c |>\n<| a tags=ruby,regex |>\n<code>\n\"Example 1\".gsub(/\\s+/, '_').gsub(/-+/,\
    \ '_')\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have multiple\
    \ consecutive spaces.\n<|/ c |>\n<| c |>\nThis doesn't work if you have multiple\
    \ consecutive spaces.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\"Example 1\".gsub(/\\\
    s+/, '_').gsub(/-+/, '_')\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't\
    \ work if you have multiple consecutive spaces.\n<|/ c |>\n<| a tags=ruby,regex\
    \ |>\n<code>\n\"Example 1\".gsub(/\\s+/, '_').gsub(/-+/, '_')\n</code>\n<|/ a\
    \ dscore", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n\
    <| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  text.gsub!(/\\s+/,\
    \ \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend", "  text.gsub!(/\\s+/,\
    \ \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThis doesn't seem to work if there are multiple spaces between\
    \ words. For example, `fix_spaces(\"Example 1 2 3\")` returns `\"Example_1-2-3\"\
    `.\n<|/ c |>\n<| c |>\nI added a fix for multiple spaces.\n<|/ c |>\n<| a |>\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for your answer. I am getting\
    \ this error `undefined method `gsub' for #<String:0x0000000511e2e8>` when I run\
    \ your code. I am using ruby 1.9.3\n<|/ c |>\n<| c |>\nSorry, I forgot to add\
    \ `self` to the method call. Fixed.\n<|/ c |>\n<| c |>\nThanks again. I am getting\
    \ this error `undefined method `gsub' for #<String:0x0000000511e2e8>` when I run\
    \ your code. I am using ruby 1.9.3\n<|/ c |>\n<| c |>\nSorry, I forgot to add\
    \ `self` to the method call. Fixed.\n<|/ c |>\n<| c |>\nThanks again. I am getting\
    \ this error `undefined method `gsub' for #<String:0x0000000511e2e8>` when I run\
    \ your code. I am using ruby 1.9.3\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend", "  text.gsub!(/\\s+/,\
    \ \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work if there are multiple spaces next to each other.\
    \ `fix_spaces(\"Example   1\")` returns `\"Example_1\"` instead of `\"Example_1_1\"\
    `.\n<|/ c |>\n<| c |>\nYes, I realized that after I posted my comment. Fixed now.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  text.gsub!(/\\s+/, \" \"\
    ) \n  text.gsub!(/\\s{2,}/, \"-\") \n  text\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThanks, this was very helpful.\n<|/ c |>\n<| a dscore=2 |>\nI suggest\
    \ you to use String#gsub with a block:\n<code>", "  text.gsub(/\\s+/, '_').gsub(/\\\
    s{2,}/, '-')\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work\
    \ for `fix_spaces(\"Example 1 2\")` which should return `Example-1-2`.\n<|/ c\
    \ |>\n<| c |>\n: I agree, that's why I added the second `gsub` call. :)\n<|/ c\
    \ |>\n<| c |>\n: I added a second `gsub` call. :)\n<|/ c |>\n<| a |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work for strings with multiple consecutive\
    \ spaces. `fix_spaces(\"Example\")` returns `\"Example\"`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for strings with multiple consecutive spaces. `fix_spaces(\"\
    Example\")` returns `\"Example\"`.\n<|/ c |>\n<| c |>\nThis doesn't work for strings\
    \ with multiple consecutive spaces. `fix_spaces(\"Example\")` returns `\"Example\"\
    `.\n<|/ c |>\n<| c |>\nThis doesn't work for strings with multiple consecutive\
    \ spaces. `fix_spaces(\"Example\")` returns `\"Example\"`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for strings with multiple consecutive spaces. `fix_spaces(\"\
    Example\")` returns `\"Example\"`.\n<|/ c |>\n<| a dscore=5 |>\nI like using gsub\
    \ with a block:\n<code>", "  text.gsub!(/\\s+/, \" \") \n  text.gsub!(/\\s{2,}/,\
    \ \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThanks so much\
    \ for this. I really appreciate it. I was able to get it working with your help.\
    \ I really appreciate it!\n<|/ c |>\n<| c |>\nI added a second example to my answer,\
    \ which shows how to handle multiple spaces.\n<|/ c |>\n<| a tags=ruby,regex |>\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nI like your solution, but I wonder\
    \ why you used `gsub` instead of `gsub!`.  I thought `gsub!` was supposed to modify\
    \ the string in place.  Am I missing something?\n<|/ c |>\n<| c |>\n`gsub!` modifies\
    \ the string in place, but `gsub` returns a new string with the modifications.\
    \ `gsub!` modifies the string in place and returns the modified string. `gsub`\
    \ modifies the string in place and returns the modified string. `gsub!` modifies\
    \ the string in place and returns the modified string. `gsub` modifies the string\
    \ in place and returns the modified string. `gsub!` modifies the string in place\
    \ and returns the modified string. `gsub` modifies the string in place and returns\
    \ the modified string. `gsub!` modifies the string in place and returns the modified\
    \ string. `gsub` modifies the string in place and returns the modified string.\
    \ `gsub!` modifies the string in place and returns the modified string. `gsub`\
    \ modifies the string in place and returns the modified string. `gsub!` modifies\
    \ the string in place and returns the modified string. `gsub` modifies the string\
    \ in place and returns the modified string. `gsub!` modifies the string in place\
    \ and returns the modified string. `gsub` modifies the string in place and returns\
    \ the modified string. `gsub!` modifies the string in place and returns the modified\
    \ string. `gsub` modifies the string in place and returns the modified string.\
    \ `gsub!` modifies the string in place and returns the modified string. `gsub`\
    \ modifies the string in place and returns the modified string. `gsub!` modifies\
    \ the string in place and returns the modified string. `gsub` modifies the string\
    \ in place and returns the modified string. `gsub!` modifies the string in place\
    \ and returns the modified string. `gsub` modifies the string in place and returns\
    \ the modified string. `gsub!` modifies the string in place and returns the modified\
    \ string. `gsub` modifies the string in place and returns the modified string.\
    \ `gsub!` modifies the string in place and returns the modified string. `gsub`\
    \ modifies the string in place and returns the modified string. `gsub!` modifies\
    \ the string in place and returns the modified string. ", "  text.gsub!(/\\s+/,\
    \ \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThanks so much for this. I used it in a Rails 4 app and it worked\
    \ great.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nThis doesn't work for\
    \ me. `fix_spaces(\"Example 1\")` returns `\"Example_1\"`, not `\"Example_1\"\
    `.\n<|/ c |>\n<| c |>\n: It works for me. `fix_spaces(\"Example 1\")` returns\
    \ `\"Example_1\"`.\n<|/ c |>\n<| c |>\n: I added a version that works with Ruby\
    \ 1.8.7 and Rails 3.0.10.\n<|/ c |>\n<| c |>\n: I added a version that works with\
    \ Ruby 1.8.7 and Rails 3.0.10.\n<|/ c |>\n<| c |>\n: I added a version that works\
    \ with Ruby 1.8.7 and Rails 3.0.10.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution the best.\
    \ Just a note for anyone else who comes across this post: this solution does not\
    \ replace consecutive spaces with dashes. To do that, simply change `\\s{2,}`\
    \ to `\\s+`.\n<|/ c |>\n<| c |>\nI like this solution the best. Just a note for\
    \ anyone else who comes across this post: this solution does not replace consecutive\
    \ spaces with dashes. To do that, simply change `\\s{2,}` to `\\s+`.\n<|/ c |>\n\
    <| c |>\nI like this solution the best. Just a note for anyone else who comes\
    \ across this post: this solution does not replace consecutive spaces with dashes.\
    \ To do that, simply change `\\s{2,}` to `\\s+`.\n<|/ c |>\n<| c |>\nI like this\
    \ solution the best. Just a note for anyone else who comes across this post: this\
    \ solution does not replace consecutive spaces with dashes. To do that, simply\
    \ change `\\s{2,}` to `\\s+`.\n<|/ c |>\n<| c |>\nI like this solution the best.\
    \ Just a note for anyone else who comes across this post: this solution does not\
    \ replace consecutive spaces with dashes. To do that, simply change `\\s{2,}`\
    \ to `\\s+`.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/,\
    \ \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work if there are multiple spaces next to each other.\
    \ For example, `\" Example   3\"` becomes `\"_Example-3\"`.\n<|/ c |>\n<| c |>\n\
    I added a fix for that case.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n\
    <|/ a tags=ruby,regex |>\n<| c |>\nI like your use of gsub! but I think you meant\
    \ `text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")`\n<|/ c |>\n<| c |>\nYes, I\
    \ did mean that. Thanks for catching that.\n<|/ c |>\n<| a tags=ruby,regex |>\n\
    <code>", "  text.gsub!(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a |>\n<code>", "  text.gsub(/\\s+/, ' ').gsub(/\\s{2,}/, '-')\n\
    end\n</code>\n<|/ a |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/,\
    \ \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThanks, I appreciate it. I will give this a try and let you know\
    \ how it goes.\n<|/ c |>\n<| c |>\nI tested this and it worked perfectly. Thank\
    \ you so much!\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThis doesn't work if there are multiple spaces between words. For\
    \ example, `\" Example 2\"` becomes `\"_Example_2\"`.\n<|/ c |>\n<| c |>\nYes,\
    \ I know. That's why I added the second gsub. `\" Example 2\"` becomes `\"_Example_2\"\
    `.\n<|/ c |>\n<| c |>\nAh, I see. Sorry about that. My bad.\n<|/ c |>\n<| a |>\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I believe\
    \ it can be simplified a bit. `text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')`\n\
    <|/ c |>\n<| c |>\nI like this solution, but I believe it can be simplified a\
    \ bit. `text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')`\n<|/ c |>\n<| c |>\nI like\
    \ this solution, but I believe it can be simplified a bit. `text.gsub(/\\s+/,\
    \ '_').gsub(/\\s{2,}/, '-')`\n<|/ c |>\n<| c |>\nI like this solution, but I believe\
    \ it can be simplified a bit. `text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')`\n\
    <|/ c |>\n<| c |>\nI like this solution, but I believe it can be simplified a\
    \ bit. `text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')`\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    end\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThanks for your answer. I'm going\
    \ to try this out and see how it works.\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer, hopefully they will help you understand how it works.\n<|/ c |>\n\
    <| c |>\nThanks for your help. I appreciate it.\n<|/ c |>\n<| a tags=ruby,regex\
    \ |>\n<code>", "  text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')\nend\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like this solution, but I find it a little bit too\
    \ restrictive. For example, it doesn't allow for spaces inside quotes.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work for `fix_spaces(\"Example '1 2'\")` which should\
    \ return `Example_1-2`.\n<|/ c |>\n<| c |>\nI added a version that handles quotes.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for `fix_spaces(\"Example '1 2'\")` which\
    \ should return `Example_1-2`.\n<|/ c |>\n<| c |>\nThis doesn't work for `fix_spaces(\"\
    Example '1 2'\")` which should return `Example_1-2`.\n<|/ c |>\n<| a dscore=5\
    \ |>\nI like using gsub for this:\n<code>", "  text.gsub(/\\s+/, '_').gsub(/\\\
    s{2,}/, '-')\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for strings with\
    \ more than 2 consecutive spaces.\n<|/ c |>\n<| c |>\nIt does work for strings\
    \ with more than 2 consecutive spaces. Try it out yourself.\n<|/ c |>\n<| c |>\n\
    It doesn't work for strings with more than 2 consecutive spaces. Try it out yourself.\
    \ `fix_spaces(\"Example 1\")` returns `\"Example_1\"` instead of `\"Example_1\"\
    `.\n<|/ c |>\n<| c |>\nIt does work for strings with more than 2 consecutive spaces.\
    \ Try it out yourself. `fix_spaces(\"Example 1\")` returns `\"Example_1\"` instead\
    \ of `\"Example_1\"`.\n<|/ c |>\n<| c |>\nIt does work for strings with more than\
    \ 2 consecutive spaces. Try it out yourself. `fix_spaces(\"Example 1\")` returns\
    \ `\"Example_1\"` instead of `\"Example_1\"`.\n<|/ c |>\n<| a tags=ruby,regex\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and it's easy to understand.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Works perfectly and it's easy to understand.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's\
    \ easy to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's easy to understand.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly and it's easy to understand.\n<|/ c\
    \ |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  text.gsub!(/\\\
    s+/, \" \").gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,regex |>\n\
    <| c |>\nI like your use of gsub! but I think it would be better to use a regex\
    \ that matches all spaces except the ones that should be replaced, like `/(?<!\\\
    s)\\s+/`\n<|/ c |>\n<| c |>\n: I agree, that would be better. I'll edit my answer\
    \ to include your suggestion.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  text.gsub!(/\\\
    s+/, \" \") \n  text.gsub!(/\\s{2,}/, \"-\") \n  text\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work if there are multiple spaces between words. For\
    \ example, `fix_spaces(\"Example 1\")` returns `Example_1`.\n<|/ c |>\n<| c |>\n\
    I added a fix for that case. Thanks.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ there are multiple spaces between words. For example, `fix_spaces(\"Example\
    \ 1\")` returns `Example_1`.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThanks so much! I really appreciate it!\n<|/ c |>\n<| c |>\nI added\
    \ a more concise version of this answer below\n<|/ c |>\n<| a dscore=3 |>\nI like\
    \ to use this one:\n<code>", "  text.gsub!(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\"\
    )\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,regex |>\n<| c |>\nThis doesn't\
    \ work if there are multiple spaces between words. For example, it doesn't work\
    \ if `text = \"  Example  \"`.\n<|/ c |>\n<| c |>\nIt doesn't work if there are\
    \ multiple spaces between words. For example, it doesn't work if `text = \"  Example\
    \  \"`.\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple spaces between\
    \ words. For example, it doesn't work if `text = \"  Example  \"`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work if there are multiple spaces between words. For example,\
    \ it doesn't work if `text = \"  Example  \"`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if there are multiple spaces between words. For example, it doesn't work\
    \ if `text = \"  Example  \"`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\"Example\"\
    .gsub(/\\s+/, '_')\n</code>\n<|/ a tags=ruby,ruby-on-rails,regex |>\n<| c |>\n\
    This doesn't work if there are multiple spaces between words. For example, it\
    \ doesn't work if `text = \"  Example  \"`.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if there are multiple spaces between words. For example, it doesn't work if\
    \ `text = \"  Example  \"`.\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple\
    \ spaces between words. For example, it doesn't work if `text = \"  Example  \"\
    `.\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple spaces between words.\
    \ For example, it doesn't work if `text = \"  Example  \"`.\n<|/ c |>\n<| c |>\n\
    It doesn't work if there are multiple spaces between words. For example, it doesn't\
    \ work if `text = \"  Example  \"`.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,regex\
    \ |>\n<code>\n\"Example\".gsub(/\\s+/, '_')\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nThis doesn't work if there are multiple spaces between words. For example,\
    \ it doesn't work if `text = \"  Example  \"`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if there are multiple spaces between words. For example, it doesn't work\
    \ if `text = \"  Example  \"`.\n<|/ c |>\n<| c |>\nIt doesn't work if there are\
    \ multiple spaces between words. ", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/(\
    \ ){2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\") \n  text.gsub!(/\\s{2,}/, \"-\") \n\
    \  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,regex |>\n<| c |>\nThis doesn't\
    \ seem to work. `fix_spaces(\"Example 1\")` returns `\"Example_1\"` instead of\
    \ `\"Example_1\"`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated\
    \ the answer to fix the problem.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| a dscore=1 |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/(\
    \ ){2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't\
    \ work if you have multiple spaces between words. For example, `fix_spaces(\"\
    Example 1 2\")` returns `\"Example_1_2\"`.\n<|/ c |>\n<| a dscore=3 |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n\
    <|/ a dscore=5 tags=ruby,ruby-on-rails |>\n<| c |>\nI like this solution. Much\
    \ more concise than my own.\n<|/ c |>\n<| c |>\nI like this solution as well.\
    \ Much more concise than my own.\n<|/ c |>\n<| c |>\nI like this solution as well.\
    \ Much more concise than my own.\n<|/ c |>\n<| c |>\nI like this solution as well.\
    \ Much more concise than my own.\n<|/ c |>\n<| c |>\nI like this solution as well.\
    \ Much more concise than my own.\n<|/ c |>\n<| a |>\n<code>", "  text.gsub(/\\\
    s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks, this was helpful. My problem was that I was trying to use\
    \ gsub to replace spaces with underscores and dashes, but I needed to use gsub!\
    \ to actually change the string in place.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks so much for the help! I really\
    \ appreciate it!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work if there are multiple spaces between words. For\
    \ example, `fix_spaces(\"Example 1 2 3\")` returns `\"Example-1-2-3\"`, which\
    \ is not the desired result.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting my comment. Try it yourself.\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting my comment. Try it yourself.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting my comment. Try it yourself.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting my comment. Try it yourself.\n<|/ c |>\n\
    <| a tags=ruby,ruby-on-rails |>\n<code>", "  text.gsub(/\\s+/, ' ').gsub(/\\s{2,}/,\
    \ '-')\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\n\
    I like your use of gsub, but this doesn't handle consecutive spaces correctly.\n\
    <|/ c |>\n<| c |>\n: I added a fix for that. Thanks for the heads up!\n<|/ c |>\n\
    <| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  text.gsub!(/\\s+/,\
    \ \" \").gsub(/\\s{2,}/, \"-\")\nend", "  text.gsub(/\\s+/, '_').gsub(/\\s{2,}/,\
    \ '-')\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| a tags=ruby,regex |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3,ruby-on-rails-3.1 |>\n<| c |>\n\
    Thanks for your answer. Your code works fine but when I try to run it on rails\
    \ console it gives me an error \"undefined method `gsub' for nil:NilClass\". Any\
    \ idea why this happens?\n<|/ c |>\n<| c |>\nI guess you didn't run the code in\
    \ the rails console. Try running it in a rails console and see if it works.\n\
    <|/ c |>\n<| c |>\nI ran the code in the rails console and it works fine. Thanks\
    \ a lot for your help.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3,ruby-on-rails-3.1\
    \ |>\n<code>", "  text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are multiple spaces between\
    \ words. For example, `fix_spaces(\"Example 1 2 3\")` returns `Example_1-2-3`\
    \ instead of `Example_1-2-3`.\n<|/ c |>\n<| c |>\nI added a fix for that case.\n\
    <|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \" \").gsub(/\\\
    s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks\
    \ for your answer. Your code works but it's too long and complicated for my taste.\
    \ I'm looking for a shorter solution.\n<|/ c |>\n<| c |>\nI added a shorter solution\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  text.gsub!(/\\s+/, \"_\"\
    )\n  text.gsub!(/( {2,})/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work if there are multiple spaces next to each other.\
    \ For example, `\" Example   3\"` becomes `\"_Example-3\"` instead of `\"_Example_3\"\
    `.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \"\
    _\")\n  text.gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly and it's simple.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Works perfectly and it's simple.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's\
    \ simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and it's simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly and it's simple.\n<|/ c |>\n<| a dscore=5 |>\nI like to use this one\
    \ liner:\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\"\
    )\n  text\nend", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c\
    \ |>\nThanks for your answer. Your code works fine for single spaces, but not\
    \ for double spaces. I updated my question to include an example with double spaces.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your code works fine for single spaces,\
    \ but not for double spaces. I updated my question to include an example with\
    \ double spaces.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works fine\
    \ for single spaces, but not for double spaces. I updated my question to include\
    \ an example with double spaces.\n<|/ c |>\n<| c |>\nThanks for your answer. Your\
    \ code works fine for single spaces, but not for double spaces. I updated my question\
    \ to include an example with double spaces.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code works fine for single spaces, but not for double spaces. I\
    \ updated my question to include an example with double spaces.\n<|/ c |>\n<|\
    \ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  text.gsub(/\\s+/,\
    \ '_').gsub(/\\s{2,}/, '-')\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n\
    <| a dscore=0 |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/,\
    \ \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3,ruby-on-rails-3.2\
    \ |>\n<| a dscore=0 |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/,\
    \ \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis\
    \ doesn't work for me. `fix_spaces(\"Example 1\") == \"Example_1\"` but `fix_spaces(\"\
    Example 2\") == \"_Example_2\"`\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ Are you sure you copied the code correctly? I tested it again and it works.\n\
    <|/ c |>\n<| c |>\nYeah, I copied it exactly. Maybe it's because I'm on Rails\
    \ 4? I'm using Rails 4.\n<|/ c |>\n<| c |>\nI tested it on Rails 4 as well. Are\
    \ you sure you copied the code correctly? I tested it again and it works.\n<|/\
    \ c |>\n<| c |>\nYeah, I copied it exactly. Maybe it's because I'm on Rails 4?\
    \ I'm using Rails 4.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    Thanks for your answer. Your code works well for single spaces, but not for double\
    \ spaces. I edited my question to include an example where your solution doesn't\
    \ work.\n<|/ c |>\n<| c |>\n: I updated my answer to handle double spaces.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. Your code works well for single spaces,\
    \ but not for double spaces. I edited my question to include an example where\
    \ your solution doesn't work.\n<|/ c |>\n<| c |>\n: I updated my answer to handle\
    \ double spaces.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works well\
    \ for single spaces, but not for double spaces. I edited my question to include\
    \ an example where your solution doesn't work.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and doesn't require any additional gems.\n<|/ c |>\n<| c |>\nThis is great!\
    \ I used this in my Rails app to replace multiple spaces with a single space and\
    \ multiple newlines with a single newline. Thanks!\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly and doesn't require any additional gems.\n\
    <|/ c |>\n<| c |>\nThis is great! I used this in my Rails app to replace multiple\
    \ spaces with a single space and multiple newlines with a single newline. Thanks!\n\
    <|/ c |>\n<| c |>\nThis is great! I used this in my Rails app to replace multiple\
    \ spaces with a single space and multiple newlines with a single newline. Thanks!\n\
    <|/ c |>\n<| a tags=ruby-on-rails,ruby |>\n<code>", "  text.gsub!(/\\s+/, \"_\"\
    )\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThis doesn't work if the string has multiple spaces between words.\
    \ Example: \"Example 1 2 3\" becomes \"Example_1-2-3\"\n<|/ c |>\n<| c |>\nI added\
    \ a fix for that case.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n\
    <|/ a tags=ruby,regex |>\n<| a |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this\
    \ solution, but I find it to be a bit too clever for my tastes. I prefer `text.gsub(/\\\
    s+/, \"_\").gsub(/\\s{2,}/, \"-\")` which reads more naturally to me.\n<|/ c |>\n\
    <| c |>\nI agree with you, this is more readable. My solution is more of a \"\
    hack\" than a solution, since it uses `gsub!` instead of `gsub`.\n<|/ c |>\n<|\
    \ c |>\nI agree with you that this is more readable, but I find it to be a bit\
    \ too clever for my tastes. I prefer `text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/,\
    \ \"-\")` which reads more naturally to me.\n<|/ c |>\n<| c |>\nI agree with you\
    \ that this is more readable, but I find it to be a bit too clever for my tastes.\
    \ I prefer `text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")` which reads more\
    \ naturally to me.\n<|/ c |>\n<| c |>\nI agree with you that this is more readable,\
    \ but I find it to be a bit too clever for my tastes. I prefer `text.gsub(/\\\
    s+/, \"_\").gsub(/\\s{2,}/, \"-\")` which reads more naturally to me.\n<|/ c |>\n\
    <| a dscore=5 |>\nI like using gsub! instead of gsub to avoid the unintended side\
    \ effects of gsub!.\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/,\
    \ \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI like this\
    \ solution, but I wanted to avoid using gsub! since it modifies the original string.\
    \ Is there a way to do this without modifying the original string?\n<|/ c |>\n\
    <| c |>\nI added a version that doesn't modify the original string. Hope it helps.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  text.gsub!(/\\s+/, \"_\"\
    )\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThis doesn't work if there are multiple spaces next to each other.\
    \ `fix_spaces(\"Example   3\")` returns `\"Example-3\"` instead of `\"Example_3\"\
    `.\n<|/ c |>\n<| c |>\n: I added a fix for that case.\n<|/ c |>\n<| a tags=ruby,regex\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    end\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work if the string\
    \ has multiple spaces next to each other. E.g. `\" Example   3\" => \"_Example-3\"\
    `\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. `\" Example\
    \   3\" => \"_Example-3\"`\n<|/ c |>\n<| c |>\nIt doesn't work for `\" Example\
    \   3\" => \"_Example-3\"` because `\\s` matches any whitespace, not just spaces.\n\
    <|/ c |>\n<| c |>\nI tested it before posting it. `\" Example   3\" => \"_Example-3\"\
    `\n<|/ c |>\n<| c |>\nOh, I see. Sorry, I missed that `\\s` matches any whitespace,\
    \ not just spaces.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  text.gsub!(/\\s+/,\
    \ \"_\") \n  text.gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThanks so much for this! I really appreciate it.\n<|/ c |>\n<|\
    \ a |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThanks for your answer. Your\
    \ code works perfectly but i would like to know why my code is not working and\
    \ why my code is not working with your code. Can you please explain me why my\
    \ code is not working and why my code is not working with your code?\n<|/ c |>\n\
    <| c |>\nThe first line of your code replaces spaces with underscores. Your code\
    \ replaces spaces with dashes. Your code replaces spaces with underscores and\
    \ dashes. Your code replaces spaces with underscores and dashes. Your code replaces\
    \ spaces with underscores and dashes. Your code replaces spaces with underscores\
    \ and dashes. Your code replaces spaces with underscores and dashes. Your code\
    \ replaces spaces with underscores and dashes. Your code replaces spaces with\
    \ underscores and dashes. Your code replaces spaces with underscores and dashes.\
    \ Your code replaces spaces with underscores and dashes. Your code replaces spaces\
    \ with underscores and dashes. Your code replaces spaces with underscores and\
    \ dashes. Your code replaces spaces with underscores and dashes. Your code replaces\
    \ spaces with underscores and dashes. Your code replaces spaces with underscores\
    \ and dashes. Your code replaces spaces with underscores and dashes. Your code\
    \ replaces spaces with underscores and dashes. Your code replaces spaces with\
    \ underscores and dashes. Your code replaces spaces with underscores and dashes.\
    \ Your code replaces spaces with underscores and dashes. Your code replaces spaces\
    \ with underscores and dashes. Your code replaces spaces with underscores and\
    \ dashes. Your code replaces spaces with underscores and dashes. Your code replaces\
    \ spaces with underscores and dashes. Your code replaces spaces with underscores\
    \ and dashes. Your code replaces spaces with underscores and dashes. Your code\
    \ replaces spaces with underscores and dashes. Your code replaces spaces with\
    \ underscores and dashes. Your code replaces spaces with underscores and dashes.\
    \ Your code replaces spaces with underscores and dashes. Your code replaces spaces\
    \ with underscores and dashes. Your code replaces spaces with underscores and\
    \ dashes. Your code replaces spaces with underscores and dashes. Your code replaces\
    \ spaces with underscores and dashes. Your code replaces spaces with underscores\
    \ and dashes. Your code replaces spaces with underscores and dashes. Your ", " \
    \ text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n\
    <|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work if you have multiple consecutive\
    \ spaces.\n<|/ c |>\n<| c |>\nIt does work, if you have multiple consecutive spaces.\
    \ Try it out with `fix_spaces(\"Example   3\")`.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. Yes, it does work. My mistake.\n<|/ c |>\n<| a tags=ruby,regex |>\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a dscore=0 |>\n<code>", " \
    \ text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis doesn't work for me in Rails 3.2.13. `fix_spaces(\"Example 1\") ==\
    \ \"Example_1\"` but `fix_spaces(\"Example\") == \"Example\"`.\n<|/ c |>\n<| c\
    \ |>\nI tested this in Rails 3.2.13 and it works as expected. `fix_spaces(\"Example\
    \ 1\") == \"Example_1\"` but `fix_spaces(\"Example\") == \"Example\"`.\n<|/ c\
    \ |>\n<| c |>\nI tested this in Rails 3.2.13 and it works as expected. `fix_spaces(\"\
    Example 1\") == \"Example_1\"` but `fix_spaces(\"Example\") == \"Example\"`.\n\
    <|/ c |>\n<| c |>\nI tested this in Rails 3.2.13 and it works as expected. `fix_spaces(\"\
    Example 1\") == \"Example_1\"` but `fix_spaces(\"Example\") == \"Example\"`.\n\
    <|/ c |>\n<| c |>\nI tested this in Rails 3.2.13 and it works as expected. `fix_spaces(\"\
    Example 1\") == \"Example_1\"` but `fix_spaces(\"Example\") == \"Example\"`.\n\
    <|/ c |>\n<| a dscore=5 |>\nI used the answer from and modified it a little bit\
    \ to make it more Rails-like.\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    This doesn't work for `fix_spaces(\"Example 1\")` which should return `Example_1`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've updated my answer.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/,\
    \ \"-\")\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThanks, this was very\
    \ helpful.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  text.gsub(/\\s+/, \" \").gsub(/\\\
    s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if\
    \ you have a string with multiple consecutive spaces. For example, `\" Example\
    \   3\"` becomes `\"-Example-3\"`.\n<|/ c |>\n<| c |>\nThis doesn't work if you\
    \ have a string with multiple consecutive spaces. For example, `\" Example   3\"\
    ` becomes `\"-Example-3\"`.\n<|/ c |>\n<| c |>\nThis doesn't work if you have\
    \ a string with multiple consecutive spaces. For example, `\" Example   3\"` becomes\
    \ `\"-Example-3\"`.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string\
    \ with multiple consecutive spaces. For example, `\" Example   3\"` becomes `\"\
    -Example-3\"`.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string with\
    \ multiple consecutive spaces. For example, `\" Example   3\"` becomes `\"-Example-3\"\
    `.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  text.gsub(/\\\
    s+/, '_').gsub(/\\s{2,}/, '-')\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n\
    <| a dscore=1 |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/,\
    \ \"-\")\n  text\nend", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/,\
    \ \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nI like this solution, but I ended up using [this answer](http://stackoverflow.com/a/4305348/477037)\
    \ instead. Thanks!\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  text.gsub!(/\\s+/,\
    \ \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nThis should be the accepted answer. Works perfectly for me. Thanks!\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me.\
    \ Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly for me. Thanks!\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nI like this solution, but I wonder why you used `gsub!` instead of `gsub`?\n\
    <|/ c |>\n<| c |>\n`gsub!` modifies the string in place. `gsub` returns a new\
    \ string with the substitution applied.\n<|/ c |>\n<| c |>\nI see. Thanks for\
    \ explaining.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/,\
    \ \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks so much for your answer! I appreciate it! I ran the code\
    \ and it works perfectly. I'm still new to Ruby and I appreciate all the help\
    \ I can get. Thanks again!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  text.gsub!(/\\s+/, ' ')\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if\
    \ the string is `\"Example 1\"`, which has two spaces between the words. `fix_spaces(\"\
    Example 1\")` returns `\"Example-1\"`.\n<|/ c |>\n<| c |>\n: I didn't see that\
    \ requirement. Fixed now.\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution\
    \ works perfectly for me. Thanks again.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>",
  "  text.gsub!(/\\s+/, \" \")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis doesn't work for `fix_spaces(\"\
    Example 1\")` which should be `Example_1`.\n<|/ c |>\n<| c |>\nThanks, I fixed\
    \ it.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  text.gsub!(/\\s+/,\
    \ \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThanks for your answer. Can you please explain how this works?\n\
    <|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks again. Can you please explain how this works?\n<|/ c |>\n<| c\
    \ |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ again. Can you please explain how this works?\n<|/ c |>\n<| a tags=ruby,regex\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Works perfectly for me. Thanks!\n\
    <|/ c |>\n<| a dscore=5 |>\nI like using gsub! for this:\n<code>", "  text.gsub!(/\\\
    s+/, \" \")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| a dscore=0 |>\n<code>", "  text.gsub!(/\\s+/, ' ')\n  text.gsub!(/\\\
    s{2,}/, '-')\n  text\nend", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/,\
    \ \"-\")\n  text\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work\
    \ for me. `fix_spaces(\"Example 1\")` returns `\"Example_1\"` instead of `\"Example_1\"\
    `.\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Are you sure you\
    \ copied it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm using\
    \ Ruby 2.4.\n<|/ c |>\n<| c |>\nI tested it on 2.4.0 and it works. Are you sure\
    \ you copied it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm\
    \ using Ruby 2.4.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\\
    s+/, ' ')\n  text.gsub!(/\\s{2,}/, '-')\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work if you have multiple spaces between words. For\
    \ example, `fix_spaces(\"Example 1 2 3\")` returns `\"Example-1-2-3\"`\n<|/ c\
    \ |>\n<| c |>\nI believe that `text.gsub!(/\\s{2,}/, '-')` should fix that.\n\
    <|/ c |>\n<| c |>\nYes, that would fix it. I was just pointing out that your solution\
    \ doesn't take that into account.\n<|/ c |>\n<| a |>\n<code>", "  text.gsub(/\\\
    s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  text.gsub(/\\s+/, '_').gsub(/\\\
    s{2,}/, '-')\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a dscore=1 |>\n<code>", " \
    \ text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like this solution, but I prefer `gsub!` over `gsub` because\
    \ I find it more readable. `gsub!` will modify the string in place, so you don't\
    \ need to assign the result to a variable.\n<|/ c |>\n<| a tags=ruby,regex |>\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end", "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThis doesn't work for `fix_spaces(\"Example 1\")` which should\
    \ be `Example_1`.\n<|/ c |>\n<| c |>\n: I fixed the answer to fix that case.\n\
    <|/ c |>\n<| c |>\nI like your use of gsub! to replace consecutive spaces with\
    \ dashes. I didn't know about that method.\n<|/ c |>\n<| c |>\n: I like it too.\
    \ :-) I didn't know about that method either, until I looked it up. :-)\n<|/ c\
    \ |>\n<| c |>\nI like it too. :-) I didn't know about that method either, until\
    \ I looked it up. :-)\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\\
    s+/, \" \").gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThanks so much for this! I used this as a starting point to create\
    \ my own method which I posted below.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\nI used the answer from to create my own method which I posted below. \n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and doesn't require any additional gems.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly and doesn't require any additional\
    \ gems.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and doesn't require any additional gems.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. Works perfectly and doesn't require any additional gems.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional gems.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3,ruby-on-rails-3.1\
    \ |>\nI used the following to fix the issue with spaces in my title:\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Simple and elegant.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple and elegant.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. Simple and elegant.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. Simple and elegant.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. Simple and elegant.\n<|/\
    \ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub(/\\s+/, ' ').gsub(/\\s{2,}/,\
    \ '-')\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have\
    \ multiple spaces between words. For example: \" Example 2 \" becomes \"-Example-2\"\
    \n<|/ c |>\n<| c |>\nThis doesn't work if you have multiple spaces between words.\
    \ For example: \" Example 2 \" becomes \"-Example-2\"\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have multiple spaces between words. For example: \" Example\
    \ 2 \" becomes \"-Example-2\"\n<|/ c |>\n<| c |>\nThis doesn't work if you have\
    \ multiple spaces between words. For example: \" Example 2 \" becomes \"-Example-2\"\
    \n<|/ c |>\n<| c |>\nThis doesn't work if you have multiple spaces between words.\
    \ For example: \" Example 2 \" becomes \"-Example-2\"\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work for\
    \ `fix_spaces(\"Example 1\")` which should return `Example_1`.\n<|/ c |>\n<| c\
    \ |>\n: I see what you mean. Fixed it.\n<|/ c |>\n<| c |>\n: I added a second\
    \ solution that should work for all cases.\n<|/ c |>\n<| c |>\n: I added a third\
    \ solution that should work for all cases.\n<|/ c |>\n<| c |>\n: I added a fourth\
    \ solution that should work for all cases.\n<|/ c |>\n<| a tags=ruby,regex |>\n\
    <code>", "  text.gsub!(/\\s+/, \"_\") \n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis doesn't work if\
    \ you have multiple spaces between words. `fix_spaces(\"Example 1 2 3\") == \"\
    Example_1__2__3\"`\n<|/ c |>\n<| c |>\nI agree with you, my answer was more of\
    \ a \"quick and dirty\" solution. I'll update my answer with something that actually\
    \ works.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\") \n  text.gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nThis doesn't work for me. `fix_spaces(\"Example\")` returns `\"Example\"\
    `.\n<|/ c |>\n<| c |>\nI tested it and it works. Are you sure you copied the code\
    \ correctly?\n<|/ c |>\n<| c |>\nYes, I copied the code exactly as you wrote it.\
    \ I'm using Rails 3.2.13 and Ruby 1.9.3.\n<|/ c |>\n<| c |>\nI tested it on Rails\
    \ 3.2.13 and Ruby 1.9.3. It works perfectly fine. Are you sure you copied the\
    \ code correctly?\n<|/ c |>\n<| c |>\nYes, I copied the code exactly as you wrote\
    \ it. I'm using Rails 3.2.13 and Ruby 1.9.3.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  text.gsub!(/\\s+/, ' ')\n  text.gsub!(/\\s{2,}/, '-')\n  text\n\
    end", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/( {2,})/, \"_\\\\1\")\n  text.gsub!(/(\
    \ {2,})/, \"-\\\\1\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\n\
    This doesn't work if there are multiple spaces next to each other. `fix_spaces(\"\
    Example   3\")` returns `Example-3` instead of `Example_-3`.\n<|/ c |>\n<| c |>\n\
    I added a fix for that case.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\\
    s+/, \" \")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThis doesn't work if there are multiple spaces between words. For\
    \ example, `fix_spaces(\"Example 1 2 3\")` returns `\"Example_1__2__3\"`.\n<|/\
    \ c |>\n<| c |>\n: Yes, I forgot that case. Fixed now.\n<|/ c |>\n<| a tags=ruby,regex\
    \ |>\n<code>", "  text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')\nend\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Much more elegant\
    \ than my solution. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant than my solution. Thanks!\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Much more elegant than my solution. Thanks!\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Much more elegant than my solution.\
    \ Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant\
    \ than my solution. Thanks!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me. `fix_spaces(\"Example 1\"\
    )` returns `\"Example_1\"` instead of `\"Example_1\"`.\n<|/ c |>\n<| c |>\nIt\
    \ works for me in Rails 3.2.13 and Ruby 1.9.3\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for me in Rails 3.2.13 and Ruby 1.9.3\n<|/ c |>\n<| c |>\nIt doesn't work for\
    \ me in Rails 3.2.13 and Ruby 1.9.3\n<|/ c |>\n<| c |>\nIt doesn't work for me\
    \ in Rails 3.2.13 and Ruby 1.9.3\n<|/ c |>\n<| a dscore=5 tags=ruby-on-rails,ruby\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. Your code works\
    \ but I don't understand why it works. Can you explain it to me?\n<|/ c |>\n<|\
    \ c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your explanation. Now I understand it better. :)\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n\
    <|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work if there are multiple spaces\
    \ between words. For example, `fix_spaces(\"Example 1 2\")` returns `Example_1_2`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are multiple spaces between words.\
    \ For example, `fix_spaces(\"Example 1 2\")` returns `Example_1_2`.\n<|/ c |>\n\
    <| c |>\nI added a fix for multiple spaces between words. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a dscore=4 tags=ruby,regex |>\n<code>", "  text.gsub(/\\\
    s+/, '_').gsub(/\\s{2,}/, '-')\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n\
    <| a |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\"\
    )\n  text\nend", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work for\
    \ `fix_spaces(\"Example 1 2 3\")`\n<|/ c |>\n<| c |>\n: I agree, that's why I\
    \ added the comment at the bottom of the answer. :)\n<|/ c |>\n<| c |>\nI didn't\
    \ see that comment. Sorry.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/( {2,})/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThis doesn't seem to work. `fix_spaces(\"Example 1\")` returns\
    \ `\"Example_1\"` instead of `\"Example_1\"`.\n<|/ c |>\n<| c |>\n: It works fine\
    \ for me. Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\n: I added\
    \ a version that doesn't require a global substitution.\n<|/ c |>\n<| c |>\n:\
    \ I added a version that doesn't require a global substitution.\n<|/ c |>\n<|\
    \ c |>\n: I added a version that doesn't require a global substitution.\n<|/ c\
    \ |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for your answer. I am not trying to fix the spaces though, I am\
    \ trying to remove them from the string. For example, if the string is \"Example\
    \ 1\", I want to return \"Example_1\"\n<|/ c |>\n<| c |>\nOh, I see. Sorry about\
    \ that. I'll edit my answer.\n<|/ c |>\n<| a |>\n<code>", "  text.gsub(/\\s+/,\
    \ \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution, but I believe it can be simplified\
    \ a little bit more. `text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')` should do the\
    \ trick.\n<|/ c |>\n<| c |>\nYes, that would work as well. I'll edit my answer\
    \ to include your suggestion.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", " \
    \ text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend", " \
    \ text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')\nend\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis should be the accepted answer. Much more elegant than a regex and\
    \ also more efficient than a loop. Thanks!\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. Much more elegant than a regex and also more efficient\
    \ than a loop. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant than a regex and also more efficient than a loop. Thanks!\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant than\
    \ a regex and also more efficient than a loop. Thanks!\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Much more elegant than a regex and also more\
    \ efficient than a loop. Thanks!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n\
    </code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work if there are multiple\
    \ consecutive spaces.\n<|/ c |>\n<| c |>\n: It does work. Try it out yourself.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it out yourself. `\" Example   3\"` becomes\
    \ `\"_Example-3\"`.\n<|/ c |>\n<| c |>\n: It does work. Try it out yourself. `\"\
    \ Example   3\"` becomes `\"_Example-3\"`.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it out yourself. `\" Example   3\"` becomes `\"_Example-3\"`.\n<|/ c |>\n\
    <| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend", "  text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution\
    \ works fine for me. I am wondering why my code is not working as expected. Could\
    \ you please explain me why my code is not working as expected?\n<|/ c |>\n<|\
    \ c |>\nThe problem is that the `gsub` method doesn't return the modified string.\
    \ It returns the number of substitutions made. Try `puts text.gsub(/\\s+/, '_').gsub(/\\\
    s{2,}/, '-')`\n<|/ c |>\n<| c |>\nThanks for your explanation. I got your point.\
    \ I am wondering why my code is not working as expected. Could you please explain\
    \ me why my code is not working as expected?\n<|/ c |>\n<| c |>\nThe `gsub` method\
    \ doesn't return the modified string. It returns the number of substitutions made.\
    \ Try `puts text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')`\n<|/ c |>\n<| c |>\n\
    Thanks for your explanation. I got your point. I am wondering why my code is not\
    \ working as expected. Could you please explain me why my code is not working\
    \ as expected?\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\nThe problem is that\
    \ the gsub method doesn't return the modified string. It returns the number of\
    \ substitutions made. Try puts text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-') \n\
    The gsub method doesn't return the modified string. It returns the number of substitutions\
    \ made. Try puts text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-') \nThe gsub method\
    \ doesn't return the modified string. It returns the number of substitutions made.\
    \ Try puts text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-') \nThe gsub method doesn't\
    \ return the modified string. It returns the number of substitutions made. Try\
    \ puts text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-') \nThe gsub method doesn't return\
    \ the modified string. It returns the number of substitutions made. Try puts text.gsub(/\\\
    s+/, '_').gsub(/\\s{2,}/, '-') \nThe gsub method doesn't return the modified string.\
    \ It returns the number of substitutions made. Try puts text.gsub(/\\s+/, '_').gsub(/\\\
    s{2,}/, '-') \nThe gsub method ", "  text.gsub!(/\\s+/, ' ')\n  text.gsub!(/\\\
    s{2,}/, '-')\n  text\nend\n</code>\n<|/ a |>\n<| a tags=ruby,regex |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n<|/\
    \ a tags=ruby,regex |>\n<| a dscore=1 |>\n<code>", "  text.gsub(/\\s+/, \"_\"\
    ).gsub(/\\s{2,}/, \"-\")\nend", "  text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')\n\
    end\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, since it keeps\
    \ the original string intact and doesn't modify the original string. Thanks!\n\
    <|/ c |>\n<| c |>\nI like this solution, since it keeps the original string intact\
    \ and doesn't modify the original string. Thanks!\n<|/ c |>\n<| c |>\nI like this\
    \ solution, since it keeps the original string intact and doesn't modify the original\
    \ string. Thanks!\n<|/ c |>\n<| c |>\nI like this solution, since it keeps the\
    \ original string intact and doesn't modify the original string. Thanks!\n<|/\
    \ c |>\n<| c |>\nI like this solution, since it keeps the original string intact\
    \ and doesn't modify the original string. Thanks!\n<|/ c |>\n<| a tags=ruby,string\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c\
    \ |>\nThanks so much for this! I ended up using it in a before_save filter to\
    \ replace spaces with underscores and then replace consecutive spaces with dashes.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\nI ended up using it\
    \ in a before_save filter to replace spaces with underscores and then replace\
    \ consecutive spaces with dashes.\n<code>\nbefore_save :fix_spaces", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend", "  text.gsub!(/\\s+/,\
    \ \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend", "  text.gsub!(/\\s+/,\
    \ \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nI like this solution, but I believe it can be simplified by removing\
    \ the `gsub!` calls and just using `text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"\
    -\")`\n<|/ c |>\n<| c |>\nThanks for the suggestion. I tried that but then I realized\
    \ that `gsub!` returns the original string and doesn't modify the original string.\
    \ So, I went with the `gsub` calls.\n<|/ c |>\n<| a dscore=3 |>\nI like using\
    \ gsub! for this. It doesn't modify the original string and returns the modified\
    \ string.\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\"\
    )\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis doesn't\
    \ seem to work. `fix_spaces(\"Example\")` returns `\"Example\"`.\n<|/ c |>\n<|\
    \ c |>\n: It does work. `fix_spaces(\"Example\")` returns `\"Example\"`. `fix_spaces(\"\
    Example 1\")` returns `\"Example_1\"`. `fix_spaces(\"  Example 2\")` returns `\"\
    _Example_2\"`. `fix_spaces(\"  Example   3\")` returns `\"_Example-3\"`.\n<|/\
    \ c |>\n<| c |>\n: I added a test case to my answer. Are you sure you copied it\
    \ correctly?\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Are you sure\
    \ you copied it correctly?\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\
    \ Are you sure you copied it correctly?\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  text.gsub(\" \", \"_\").gsub(/\\s{2,}/, \"-\")\nend", "  text.gsub(/\\\
    s+/, '_').gsub(/\\s{2,}/, '-')\nend\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThanks for your answer. I'm still trying to understand how this\
    \ works. I understand that `gsub!` replaces all occurrences of the pattern with\
    \ the replacement string, but I don't understand how `gsub` works. Can you explain\
    \ how `gsub` works?\n<|/ c |>\n<| c |>\n`gsub` replaces all occurrences of the\
    \ pattern with the replacement string. `gsub!` replaces all occurrences of the\
    \ pattern with the replacement string and returns the modified string.\n<|/ c\
    \ |>\n<| c |>\nThanks for your explanation. I think I understand now. One thing\
    \ that confuses me is that `gsub!` returns the modified string, but `gsub` does\
    \ not. Why does `gsub` return the modified string?\n<|/ c |>\n<| c |>\n`gsub`\
    \ returns the modified string because `gsub!` modifies the string in place. `gsub!`\
    \ returns the modified string because `gsub` modifies the string in place and\
    \ returns the modified string.\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ One thing that confuses me is that `gsub!` modifies the string in place, but\
    \ `gsub` does not. Why does `gsub` modify the string in place?\n<|/ c |>\n<| a\
    \ tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this\
    \ solution, but I find it a bit too restrictive. For example, `fix_spaces(\"Example\
    \   3\")` returns `\"Example-3\"`, which is not what was asked for. Also, `fix_spaces(\"\
    Example   3\")` returns `\"Example_3\"`, which is not what was asked for. `fix_spaces(\"\
    Example   3   4\")` returns `\"Example_3-4\"`, which is not what was asked for.\
    \ `fix_spaces(\"Example   3   4   5\")` returns `\"Example_3-4_5\"`, which is\
    \ not what was asked for. `fix_spaces(\"Example   3   4   5   6\")` returns `\"\
    Example_3-4_5-6\"`, which is not what was asked for. `fix_spaces(\"Example   3\
    \   4   5   6   7\")` returns `\"Example_3-4_5-6_7\"`, which is not what was asked\
    \ for. `fix_spaces(\"Example   3   4   5   6   7   8\")` returns `\"Example_3-4_5-6_7_8\"\
    `, which is not what was asked for. `fix_spaces(\"Example   3   4   5   6   7\
    \   8   9\")` returns `\"Example_3-4_5-6_7_8_9\"`, which is not what was asked\
    \ for. `fix_spaces(\"Example   3   4   5   6   7   8   9   10\")` returns `\"\
    Example_3-4_5-6_7_8_9-10\"`, which is not what was asked for. `fix_spaces(\"Example\
    \   3   4   5   6   7   8   9   10   11\")` returns `\"Example_3-4_5-6_7_8_9-10-11\"\
    `, which is not what was asked for. `fix_spaces(\"Example   3   4   5   6   7\
    \   8   9   10   11   12\")` returns `\"Example_3-4_5-6_7_8_9-10-11-12\"`, which\
    \ is not what was asked for. `fix_spaces(\"Example   3   4   5   6   7   8   9\
    \   10   11   12   13\")` returns `\"Example_3-4_5-6_7_8_9-10-11-12-13\"`, which\
    \ is not what was asked for. `fix_spaces(\"Example   3   ", "  text.gsub(/\\s+/,\
    \ \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n\
    <| c |>\nThanks so much for the detailed explanation.  I appreciate it!\n<|/ c\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n\
    \  text.gsub!(/( ){2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex |>\n\
    <| c |>\nThis doesn't work for `fix_spaces(\"Example 1 2 3\")` which should return\
    \ `Example-1-2-3`.\n<|/ c |>\n<| c |>\nI didn't realize that there could be multiple\
    \ spaces between words. I updated my answer to account for that case.\n<|/ c |>\n\
    <| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    This doesn't work for `fix_spaces(\"Example 1\")` because `gsub` replaces *all*\
    \ occurrences of the pattern, not just the first.\n<|/ c |>\n<| c |>\nThanks for\
    \ pointing that out. I fixed it.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| a dscore=1 |>\n<code>", "  text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')\n\
    end\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more concise and easy to understand.\n<|/ c |>\n<| c |>\nI like this solution,\
    \ but I wonder why it works. I thought that `gsub` replaced all occurrences of\
    \ the pattern, not just the first one. How does it know which occurrence to replace?\n\
    <|/ c |>\n<| c |>\n: It replaces all occurrences of the pattern, not just the\
    \ first one. `gsub` replaces all occurrences of the pattern, not just the first\
    \ one. `gsub` replaces all occurrences of the pattern, not just the first one.\
    \ `gsub` replaces all occurrences of the pattern, not just the first one. `gsub`\
    \ replaces all occurrences of the pattern, not just the first one. `gsub` replaces\
    \ all occurrences of the pattern, not just the first one. `gsub` replaces all\
    \ occurrences of the pattern, not just the first one. `gsub` replaces all occurrences\
    \ of the pattern, not just the first one. `gsub` replaces all occurrences of the\
    \ pattern, not just the first one. `gsub` replaces all occurrences of the pattern,\
    \ not just the first one. `gsub` replaces all occurrences of the pattern, not\
    \ just the first one. `gsub` replaces all occurrences of the pattern, not just\
    \ the first one. `gsub` replaces all occurrences of the pattern, not just the\
    \ first one. `gsub` replaces all occurrences of the pattern, not just the first\
    \ one. `gsub` replaces all occurrences of the pattern, not just the first one.\
    \ `gsub` replaces all occurrences of the pattern, not just the first one. `gsub`\
    \ replaces all occurrences of the pattern, not just the first one. `gsub` replaces\
    \ all occurrences of the pattern, not just the first one. `gsub` replaces all\
    \ occurrences of the pattern, not just the first one. `gsub` replaces all occurrences\
    \ of the pattern, not just the first one. `gsub` replaces all occurrences of the\
    \ pattern, not just the first one. `gsub` replaces all occurrences of the pattern,\
    \ not just the first one. `gsub` replaces all occurrences of the pattern, not\
    \ just the first one. `gsub` replaces all occurrences of the pattern, not just\
    \ the first one. `gsub` replaces all occurrences of the pattern, not just the\
    \ first one. `gsub` replaces all occurrences of the pattern, not just the first\
    \ one. `gsub` replaces all occurrences of the pattern, not just the first one.\
    \ `gsub` replaces all occurrences of the pattern, not just the first one. `gsub`\
    \ replaces all occurrences of the pattern", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    This doesn't work if there are multiple spaces between words. For example, `fix_spaces(\"\
    Example   3\")` returns `\"Example-3\"`, which is not the desired result.\n<|/\
    \ c |>\n<| c |>\nI agree, my answer was a quick fix to his problem. I'll update\
    \ my answer with something that actually works.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks, this was very helpful.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    Thanks, this was helpful!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails,regex |>\n<| c |>\nThanks so much for the detailed\
    \ answer! I really appreciate it!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,regex\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if there\
    \ are multiple spaces next to each other. For example, `fix_spaces(\"Example \
    \  3\")` returns `\"Example-3\"` instead of `\"Example_3\"`.\n<|/ c |>\n<| c |>\n\
    This doesn't work if there are multiple spaces next to each other. For example,\
    \ `fix_spaces(\"Example   3\")` returns `\"Example-3\"` instead of `\"Example_3\"\
    `.\n<|/ c |>\n<| c |>\nThis doesn't work if there are multiple spaces next to\
    \ each other. For example, `fix_spaces(\"Example   3\")` returns `\"Example-3\"\
    ` instead of `\"Example_3\"`.\n<|/ c |>\n<| c |>\nThis doesn't work if there are\
    \ multiple spaces next to each other. For example, `fix_spaces(\"Example   3\"\
    )` returns `\"Example-3\"` instead of `\"Example_3\"`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if there are multiple spaces next to each other. For example, `fix_spaces(\"\
    Example   3\")` returns `\"Example-3\"` instead of `\"Example_3\"`.\n<|/ c |>\n\
    <| a dscore=5 |>\nI used the answer from but modified it a bit:\n<code>", "  text.gsub(/\\\
    s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work for me in Rails 3.2.13. `fix_spaces(\"Example\")` returns `\"\
    Example\"`, not `\"Example_1\"`.\n<|/ c |>\n<| c |>\nI tested this in Rails 3.2.13\
    \ and it worked fine. Are you sure you copied the code correctly?\n<|/ c |>\n\
    <| c |>\nYes, I copied it exactly. Maybe it's because I'm running Rails 3.2.13?\n\
    <|/ c |>\n<| c |>\nI tested this in Rails 3.2.13 and it worked fine. Are you sure\
    \ you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied it exactly.\
    \ Maybe it's because I'm running Rails 3.2.13?\n<|/ c |>\n<| a dscore=2 |>\nI\
    \ wrote a gem for this: \n<code>\ngem 'fix_spaces'\n</code>\n<|/ a tags=ruby-on-rails,ruby\
    \ |>\n<| a tags=ruby-on-rails,ruby |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n\
    \  text.gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a |>\n<| a tags=ruby,ruby-on-rails |>\nI came up with\
    \ this solution:\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/,\
    \ \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| a dscore=0 |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n\
    <|/ a tags=ruby,regex |>\n<| a dscore=0 |>\n<code>", "  text.gsub!(/\\s+/, \"\
    \ \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n\
    <| c |>\nThis doesn't work for me. `fix_spaces(\"Example 1\") == \"Example_1\"\
    ` but `fix_spaces(\"Example 2\") == \"_Example_2\"`\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the output to the answer.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Your code works fine for me. But the problem is that I cannot\
    \ use it in my Rails application. I am getting this error `undefined method `gsub'\
    \ for #<String:0x00000005ac41e8>`\n<|/ c |>\n<| c |>\nI added the Rails code to\
    \ the answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Your\
    \ code works fine for me. But the problem is that I cannot use it in my Rails\
    \ application. I am getting this error `undefined method `gsub' for #<String:0x00000005ac41e8>`\
    \ when I use it in my Rails application. I am getting this error `undefined method\
    \ `gsub' for #<String:0x00000005ac41e8>` when I use it in my Rails application.\
    \ I am getting this error `undefined method `gsub' for #<String:0x00000005ac41e8>`\
    \ when I use it in my Rails application. I am getting this error `undefined method\
    \ `gsub' for #<String:0x00000005ac41e8>` when I use it in my Rails application.\
    \ I am getting this error `undefined method `gsub' for #<String:0x00000005ac41e8>`\
    \ when I use it in my Rails application. I am getting this error `undefined method\
    \ `gsub' for #<String:0x00000005ac41e8>` when I use it in my Rails application.\
    \ I am getting this error `undefined method `gsub' for #<String:0x00000005ac41e8>`\
    \ when I use it in my Rails application. I am getting this error `undefined method\
    \ `gsub' for #<String:0x00000005ac41e8>` when I use it in my Rails application.\
    \ I am getting this error `undefined method `gsub' for #<String:0x00000005ac41e8>`\
    \ when I use it in my Rails application. I am getting this error `undefined method\
    \ `gsub", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\nend\n\
    </code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThanks for your answer. I'm still\
    \ trying to understand how this works. I understand that `gsub!` replaces the\
    \ matched string with the replacement string, but what does `/\\s{2,}/` do? I\
    \ understand that `\\s` matches a whitespace character, but what does `{2,}` do?\n\
    <|/ c |>\n<| c |>\n`\\s` matches a whitespace character, but what does `{2,}`\
    \ do?\n<|/ c |>\n<| c |>\n`{2,}` means match 2 or more of the previous character.\
    \ So, it matches 2 or more spaces.\n<|/ c |>\n<| c |>\nThanks, that makes sense.\
    \ I'm still trying to understand how this works. I understand that `gsub!` replaces\
    \ the matched string with the replacement string, but what does `/\\s{2,}/` do?\
    \ I understand that `\\s` matches a whitespace character, but what does `{2,}`\
    \ do?\n<|/ c |>\n<| c |>\n`\\s` matches a whitespace character, but what does\
    \ `{2,}` do?\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/,\
    \ \"_\") \n  text.gsub!(/\\s{2,}/, \"-\")\nend", "  text.gsub!(/\\s+/, \"_\")\n\
    \  text.gsub!(/( ){2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nI like this solution, but I prefer `text.gsub(/\\s+/, '_')` because it's\
    \ more explicit and easier to read. Also, `gsub!` modifies the original string,\
    \ whereas `gsub` returns a new string.\n<|/ c |>\n<| c |>\nI agree with you, `gsub!`\
    \ is more explicit and easier to read. `gsub` modifies the original string and\
    \ returns nil if no substitutions were made. `gsub` also returns the number of\
    \ substitutions made, which is useful if you want to know how many spaces were\
    \ replaced.\n<|/ c |>\n<| c |>\nI prefer this solution as well. Just a little\
    \ bit of explanation as to why this works. `gsub!` modifies the original string,\
    \ whereas `gsub` returns a new string. `gsub!` returns the number of substitutions\
    \ made, which is useful if you want to know how many spaces were replaced.\n<|/\
    \ c |>\n<| c |>\nI prefer this solution as well. Just a little bit of explanation\
    \ as to why this works. `gsub!` modifies the original string, whereas `gsub` returns\
    \ a new string. `gsub!` returns the number of substitutions made, which is useful\
    \ if you want to know how many spaces were replaced.\n<|/ c |>\n<| c |>\nI prefer\
    \ this solution as well. Just a little bit of explanation as to why this works.\
    \ `gsub!` modifies the original string, whereas `gsub` returns a new string. `gsub!`\
    \ returns the number of substitutions made, which is useful if you want to know\
    \ how many spaces were replaced.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work if the string contains multiple spaces.\n<|/\
    \ c |>\n<| c |>\nIt does work if you use `\"Example 1\"` instead of `\"Example\"\
    `.\n<|/ c |>\n<| c |>\nIt doesn't work if you use `\"Example 1\"` instead of `\"\
    Example\"`.\n<|/ c |>\n<| c |>\nIt doesn't work if you use `\"Example 1\"` instead\
    \ of `\"Example\"`.\n<|/ c |>\n<| c |>\nIt doesn't work if you use `\"Example\
    \ 1\"` instead of `\"Example\"`.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a dscore=2 |>\nI used this\
    \ for my Rails app:\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/,\
    \ \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| a tags=ruby,regex\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,ruby-on-rails |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n\
    <|/ a tags=ruby,regex |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work for me in Rails 3.2.13. `text.gsub(/\\s+/, '_')`\
    \ returns `text` unchanged. `text.gsub(/\\s+/, ' ')` returns `text` with spaces\
    \ replaced with underscores. `text.gsub(/\\s+/, ' ').gsub(/\\s+/, '_')` returns\
    \ `text` with spaces replaced with underscores and with spaces replaced with underscores\
    \ replaced with underscores.\n<|/ c |>\n<| c |>\nThis doesn't work for me in Rails\
    \ 4.1.1. `text.gsub(/\\s+/, '_')` returns `text` unchanged. `text.gsub(/\\s+/,\
    \ ' ')` returns `text` with spaces replaced with underscores. `text.gsub(/\\s+/,\
    \ ' ').gsub(/\\s+/, '_')` returns `text` with spaces replaced with underscores\
    \ and with spaces replaced with underscores replaced with underscores.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work for me in Rails 4.1.1. `text.gsub(/\\s+/, '_')`\
    \ returns `text` unchanged. `text.gsub(/\\s+/, ' ')` returns `text` with spaces\
    \ replaced with underscores. `text.gsub(/\\s+/, ' ').gsub(/\\s+/, '_')` returns\
    \ `text` with spaces replaced with underscores and with spaces replaced with underscores\
    \ replaced with underscores.\n<|/ c |>\n<| c |>\nThis doesn't work for me in Rails\
    \ 4.1.1. `text.gsub(/\\s+/, '_')` returns `text` unchanged. `text.gsub(/\\s+/,\
    \ ' ')` returns `text` with spaces replaced with underscores. `text.gsub(/\\s+/,\
    \ ' ').gsub(/\\s+/, '_')` returns `text` with spaces replaced with underscores\
    \ and with spaces replaced with underscores replaced with underscores.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work for me in Rails 4.1.1. `text.gsub(/\\s+/, '_')`\
    \ returns `text` unchanged. `text.gsub(/\\s+/, ' ')` returns `text` with spaces\
    \ replaced with underscores. `text.gsub(/\\s+/, ' ').", "  text.gsub(/\\s+/, \"\
    _\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    I wrote a gem to solve this problem in Rails 5.\n<code>", "  text.gsub!(/\\s+/,\
    \ \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>", "  text.gsub!(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\n\
    end", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without having to use gsub!\n<|/ c |>\n<| c |>\n: Yes, you can do `text = text.gsub(/\\\
    s+/, \"_\").gsub(/\\s{2,}/, \"-\")` but that's not very elegant and I wouldn't\
    \ recommend it for production code.\n<|/ c |>\n<| c |>\nI like that solution,\
    \ although I wonder if there is a way to do this without having to use gsub!\n\
    <|/ c |>\n<| c |>\n: Yes, you can do `text = text.gsub(/\\s+/, \"_\").gsub(/\\\
    s{2,}/, \"-\")` but that's not very elegant and I wouldn't recommend it for production\
    \ code.\n<|/ c |>\n<| c |>\n: I added a version that doesn't use gsub!\n<|/ c\
    \ |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this\
    \ solution, but I find it to be a bit too restrictive for my needs. I need a function\
    \ that can handle any number of spaces, not just two. Also, I need it to handle\
    \ multiple consecutive spaces, not just one. Thanks though!\n<|/ c |>\n<| c |>\n\
    This doesn't handle multiple consecutive spaces though.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't handle multiple consecutive spaces though.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't handle multiple consecutive spaces though.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't handle multiple consecutive spaces though.\n<|/ c |>\n<| a tags=ruby,regex\
    \ |>\nI came up with this solution:\n<code>", "  text.gsub!(/\\s+/, \"_\")\n \
    \ text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThis doesn't work if you have more than one space between words. Example:\
    \ \"Example 1 2 3\" becomes \"Example_1-2-3\"\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if you have more than one space between words. Example: \"Example 1 2 3\" becomes\
    \ \"Example_1-2-3\"\n<|/ c |>\n<| c |>\nIt doesn't work if you have more than\
    \ one space between words. Example: \"Example 1 2 3\" becomes \"Example_1-2-3\"\
    \n<|/ c |>\n<| a |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/,\
    \ \"-\")\n  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't seem\
    \ to work for me in Rails 3.2.13. `text.gsub(/\\s+/, '_')` returns `text` unchanged.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work for me in Rails 3.2.13. `text.gsub(/\\\
    s+/, '_')` returns `text` unchanged.\n<|/ c |>\n<| c |>\nThis doesn't seem to\
    \ work for me in Rails 3.2.13. `text.gsub(/\\s+/, '_')` returns `text` unchanged.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work for me in Rails 3.2.13. `text.gsub(/\\\
    s+/, '_')` returns `text` unchanged.\n<|/ c |>\n<| c |>\nThis doesn't seem to\
    \ work for me in Rails 3.2.13. `text.gsub(/\\s+/, '_')` returns `text` unchanged.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\nI used the following to remove all\
    \ spaces and replace them with underscores:\n<code>\ntext.gsub(/\\s+/, '_')\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work for me in Rails\
    \ 3.2.13. `text.gsub(/\\s+/, '_')` returns `text` unchanged.\n<|/ c |>\n<| c |>\n\
    This doesn't seem to work for me in Rails 3.2.13. `text.gsub(/\\s+/, '_')` returns\
    \ `text` unchanged.\n<|/ c |>\n<| c |>\nThis doesn't seem to work for me in Rails\
    \ 3.2.13. `text.gsub(/\\s+/, '_')` returns `text` unchanged.\n<|/ c |>\n<| c |>\n\
    This doesn't seem to work for me in Rails 3.2.13. `text.gsub(/\\s+/, '_')` returns\
    \ `text` unchanged.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\nI used this and\
    \ it worked for me:\n<code>\ntext.gsub(/\\s+/, '_')\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis doesn't seem to work for me in Rails 3.2.13. `text.gsub(/\\s+/,\
    \ '_')` returns `", "  text.gsub!(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a tags=ruby,ruby-on-rails |>\n<code>",
  "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThis doesn't seem to work. `fix_spaces(\"Example 1\") == \"Example_1\"\
    ` but `fix_spaces(\"Example 1 \") == \"Example_1 \"`\n<|/ c |>\n<| c |>\n: It\
    \ does work. `fix_spaces(\"Example 1 \")` returns `\"Example_1 \"` as expected.\
    \ `fix_spaces(\"Example 1\")` returns `\"Example_1\"` as expected.\n<|/ c |>\n\
    <| c |>\n: I added a second example that shows it working. Maybe you didn't copy\
    \ the code correctly?\n<|/ c |>\n<| c |>\n: I added a third example that shows\
    \ it working. Maybe you didn't copy the code correctly?\n<|/ c |>\n<| c |>\n:\
    \ I added a fourth example that shows it working. Maybe you didn't copy the code\
    \ correctly?\n<|/ c |>\n<| a dscore=4 |>\n<code>", "  text.gsub!(/\\s+/, \"_\"\
    ) \n  text.gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,regex |>\n<|\
    \ c |>\nThanks for your answer. Your solution works perfectly for me. Just one\
    \ question, why did you use \"gsub\" instead of \"sub\"?\n<|/ c |>\n<| c |>\n\
    `gsub` replaces all occurrences of the pattern. `sub` replaces the first occurrence.\
    \ `gsub!` replaces all occurrences while `sub!` replaces the first occurrence.\
    \ `gsub!` returns the modified string while `sub!` returns the modified string.\n\
    <|/ c |>\n<| c |>\nThanks for the explanation. One more question, why did you\
    \ use \"gsub!\" instead of \"sub!\"?\n<|/ c |>\n<| c |>\n`gsub!` modifies the\
    \ string in place. `sub!` modifies the string in place and returns the modified\
    \ string. `gsub!` modifies the string in place and returns the modified string.\n\
    <|/ c |>\n<| c |>\nThanks for your explanation. One more question, why did you\
    \ use \"gsub!\" instead of \"sub!\"?\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>",
  "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| a dscore=0 |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/,\
    \ \"-\")\n  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work\
    \ for `fix_spaces(\"Example 1\")` which should return `Example_1`.\n<|/ c |>\n\
    <| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\nThis doesn't work for `fix_spaces(\"\
    Example 1\")` which should return `Example_1`.\n<|/ c |>\n<| c |>\n: Thanks, I\
    \ fixed it.\n<|/ c |>\n<| c |>\nThis doesn't work for `fix_spaces(\"Example 1\"\
    )` which should return `Example_1`.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nI like this solution, but I believe it would be better to use a\
    \ regex to replace multiple spaces with a single space. `text.gsub(/\\s+/, ' ')`\n\
    <|/ c |>\n<| c |>\nThanks, I added your suggestion.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| a\
    \ dscore=0 |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/( {2,})/,\
    \ \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks\
    \ for your answer. I'm still getting an error though. `undefined method `gsub'\
    \ for \"Example 1\":String` Any ideas?\n<|/ c |>\n<| c |>\nYes, sorry, I forgot\
    \ to add `text` as a parameter to `fix_spaces`. I've edited my answer to include\
    \ it.\n<|/ c |>\n<| c |>\nThanks again. I'm still getting an error though. `undefined\
    \ method 'gsub' for \"Example 1\":String` Any ideas?\n<|/ c |>\n<| c |>\nSorry,\
    \ I forgot to add `text` as a parameter to `fix_spaces`. I've edited my answer\
    \ to include it.\n<|/ c |>\n<| c |>\nThanks again. I'm still getting an error\
    \ though. `undefined method 'gsub' for \"Example 1\":String` Any ideas?\n<|/ c\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n\
    \  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend", "  text.gsub(/\\s+/, '_').gsub(/\\\
    s{2,}/, '-')\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis doesn't\
    \ work if there are multiple spaces between words. For example, `fix_spaces(\"\
    Example 1 2\")` returns `Example_1-2`.\n<|/ c |>\n<| c |>\nYes, it does. Try it\
    \ yourself. It returns `Example_1-2`.\n<|/ c |>\n<| c |>\nYes, it does. Try it\
    \ yourself. It returns `Example_1-2`.\n<|/ c |>\n<| c |>\nYes, it does. Try it\
    \ yourself. It returns `Example_1-2`.\n<|/ c |>\n<| c |>\nYes, it does. Try it\
    \ yourself. It returns `Example_1-2`.\n<|/ c |>\n<| a dscore=4 |>\nI like using\
    \ gsub with a block:\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your\
    \ answer. Your code works perfectly for single spaces, but not for multiple spaces.\
    \ I edited my question to show an example.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution for multiple spaces.\n<|/ c |>\n<| a tags=ruby,regex |>\n\
    <code>", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend", "  text.gsub!(/\\\
    s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for the answer. I'm going to try this out and see how it\
    \ goes.\n<|/ c |>\n<| c |>\nI added a couple more examples to my original question.\
    \ Can you please take a look?\n<|/ c |>\n<| c |>\nI added a couple more examples\
    \ to my original question. Can you please take a look?\n<|/ c |>\n<| c |>\nI added\
    \ a couple more examples to my original question. Can you please take a look?\n\
    <|/ c |>\n<| c |>\nI added a couple more examples to my original question. Can\
    \ you please take a look?\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nI like this solution, but I prefer `gsub!` over `gsub` because\
    \ I find it easier to read. `gsub` returns a new string and `gsub!` modifies the\
    \ string in place. `gsub!` also returns the modified string so you can chain it\
    \ with `gsub` if you need to.\n<|/ c |>\n<| c |>\nI agree with you, `gsub!` makes\
    \ it easier to read and to understand.\n<|/ c |>\n<| c |>\nI prefer `gsub` over\
    \ `gsub!` because `gsub` returns a new string and `gsub!` modifies the string\
    \ in place. `gsub!` also returns the modified string so you can chain it with\
    \ `gsub` if you need to.\n<|/ c |>\n<| c |>\nI agree with you, `gsub!` makes it\
    \ easier to read and to understand.\n<|/ c |>\n<| c |>\nI prefer `gsub` over `gsub!`\
    \ because `gsub` returns a new string and `gsub!` modifies the string in place.\
    \ `gsub!` also returns the modified string so you can chain it with `gsub` if\
    \ you need to.\n<|/ c |>\n<| a tags=ruby,regex |>\nI like to use gsub! for this:\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work if there are multiple\
    \ spaces between words. For example, `fix_spaces(\"Example\")` returns `\"Example\"\
    `.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I just tested\
    \ it again and now it works. I must have had a typo when I first tested it.\n\
    <|/ c |>\n<| c |>\nYes, it does work. I've just tested it again and it works.\
    \ I must have had a typo when I first tested it.\n<|/ c |>\n<| c |>\nI tested\
    \ it again and it works. I must have had a typo when I first tested it.\n<|/ c\
    \ |>\n<| c |>\nI tested it again and it works. I must have had a typo when I first\
    \ tested it.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  text.gsub!(/\\s+/, ' ')\n\
    \  text.gsub!(/\\s{2,}/, '-')\n  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This should be the accepted answer. No need to reinvent the wheel. Thanks!\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent the wheel.\
    \ Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent\
    \ the wheel. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No\
    \ need to reinvent the wheel. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to reinvent the wheel. Thanks!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend", "  text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')\nend\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  text.gsub(/\\s+/, '_').gsub(/\\s{2,}/, '-')\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a small gem for this:\nhttps://github.com/jonathan/stringex\n\
    <code>\nrequire 'stringex'", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/,\
    \ \"-\")\n  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't seem\
    \ to work for me. `fix_spaces(\"Example 1\")` returns `\"Example_1\"`, but `fix_spaces(\"\
    Example 2\")` returns `\"Example_2\"`.\n<|/ c |>\n<| c |>\n: I tested it on Ruby\
    \ 1.9.3p194 and it works. Maybe you have a different Ruby version?\n<|/ c |>\n\
    <| c |>\n: I tested it on Ruby 1.8.7 and it works. Maybe you have a different\
    \ Ruby version?\n<|/ c |>\n<| c |>\n: I tested it on Ruby 1.9.3p194 and it works.\
    \ Maybe you have a different Ruby version?\n<|/ c |>\n<| c |>\n: I tested it on\
    \ Ruby 1.8.7 and it works. Maybe you have a different Ruby version?\n<|/ c |>\n\
    <| a tags=ruby,string |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis\
    \ doesn't work for `fix_spaces(\"Example 1 \")` which should return `Example-1`.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated my answer to fix that case.\n\
    <|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend", "  text.gsub!(/\\\
    s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  text.gsub!(/\\s+/, \" \").gsub(/\\\
    s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n\
    <| c |>\nThis doesn't work for me. `fix_spaces(\"Example 1\")` returns `\"Example-1\"\
    ` instead of `\"Example_1\"`.\n<|/ c |>\n<| c |>\nThis doesn't work for me either.\
    \ `fix_spaces(\"Example 1\")` returns `\"Example-1\"` instead of `\"Example_1\"\
    `.\n<|/ c |>\n<| c |>\nThis doesn't work for me either. `fix_spaces(\"Example\
    \ 1\")` returns `\"Example-1\"` instead of `\"Example_1\"`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for me either. `fix_spaces(\"Example 1\")` returns `\"Example-1\"\
    ` instead of `\"Example_1\"`.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
