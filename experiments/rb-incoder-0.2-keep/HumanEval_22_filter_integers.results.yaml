language: ruby
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select! { |v| v.is_a?(Integer) }\n\
    \  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqtygvz01.ruby

    Started

    .

    Finished in 0.000472142 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2118.01 tests/s, 6354.02 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select! { |value| value.is_a?(Integer)\
    \ }\n  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2z8zk1w8.ruby

    Started

    .

    Finished in 0.000478188 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2091.23 tests/s, 6273.68 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select! { |v| v.is_a?(Integer) }\n\
    \  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqtygvz01.ruby

    Started

    .

    Finished in 0.000472142 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2118.01 tests/s, 6354.02 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select! { |v| v.is_a?(Integer) }\n\
    \  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqtygvz01.ruby

    Started

    .

    Finished in 0.000472142 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2118.01 tests/s, 6354.02 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select! {|v| v.is_a?(Integer) }\n\
    \  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp47q2ae5.ruby

    Started

    .

    Finished in 0.000506157 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1975.67 tests/s, 5927.01 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select! { |value| value.is_a?(Integer)\
    \ }\n  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2z8zk1w8.ruby

    Started

    .

    Finished in 0.000478188 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2091.23 tests/s, 6273.68 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.each do |value|\n    if value.is_a?\
    \ Integer\n      yield value\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp22_bhzlw.ruby\nStarted\nE\n===============================================================================\n\
    Error: test_filter_integers(TestHumanEval): LocalJumpError: no block given (yield)\n\
    /tmp/tmp22_bhzlw.ruby:9:in `block in filter_integers'\n/tmp/tmp22_bhzlw.ruby:7:in\
    \ `each'\n/tmp/tmp22_bhzlw.ruby:7:in `filter_integers'\n/tmp/tmp22_bhzlw.ruby:18:in\
    \ `call'\n/tmp/tmp22_bhzlw.ruby:18:in `test_filter_integers'\n     15:   def test_filter_integers\n\
    \     16:     candidate = method(:filter_integers)\n     17:     assert_equal([],\
    \ candidate.call([]))\n  => 18:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     19:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     20:   end\n     21: end\n===============================================================================\n\
    \nFinished in 0.001138323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    878.49 tests/s, 878.49 assertions/s\n"
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select! { |v| v.is_a?(Integer) }\n\
    \  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqtygvz01.ruby

    Started

    .

    Finished in 0.000472142 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2118.01 tests/s, 6354.02 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select! { |v| v.is_a?(Integer) }\n\
    \  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqtygvz01.ruby

    Started

    .

    Finished in 0.000472142 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2118.01 tests/s, 6354.02 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select! { |value| value.is_a?(Integer)\
    \ }\n  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2z8zk1w8.ruby

    Started

    .

    Finished in 0.000478188 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2091.23 tests/s, 6273.68 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select! { |v| v.is_a?(Integer) }\n\
    \  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqtygvz01.ruby

    Started

    .

    Finished in 0.000472142 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2118.01 tests/s, 6354.02 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.each do |value|\n    if value.is_a?\
    \ Integer\n      yield value\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp22_bhzlw.ruby\nStarted\nE\n===============================================================================\n\
    Error: test_filter_integers(TestHumanEval): LocalJumpError: no block given (yield)\n\
    /tmp/tmp22_bhzlw.ruby:9:in `block in filter_integers'\n/tmp/tmp22_bhzlw.ruby:7:in\
    \ `each'\n/tmp/tmp22_bhzlw.ruby:7:in `filter_integers'\n/tmp/tmp22_bhzlw.ruby:18:in\
    \ `call'\n/tmp/tmp22_bhzlw.ruby:18:in `test_filter_integers'\n     15:   def test_filter_integers\n\
    \     16:     candidate = method(:filter_integers)\n     17:     assert_equal([],\
    \ candidate.call([]))\n  => 18:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     19:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     20:   end\n     21: end\n===============================================================================\n\
    \nFinished in 0.001138323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    878.49 tests/s, 878.49 assertions/s\n"
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.each do |value|\n    next if value.is_a?(Numeric)\n\
    \    next if value.is_a?(String)\n    next if value.is_a?(Symbol)\n    next if\
    \ value.is_a?(TrueClass) || value.is_a?(FalseClass)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(Float)\n    next if value.is_a?(Fixnum)\n    next if\
    \ value.is_a?(BigInteger)\n    next if value.is_a?(Array)\n    next if value.is_a?(Hash)\n\
    \    next if value.is_a?(Range)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::File)\n    next if value.is_a?(IO::NullStream)\n\
    \    next if value.is_a?(IO::Stream)\n    next if value.is_a?(IO::BufferedStream)\n\
    \    next if value.is_a?(IO::UnsupportedStream)\n    next if value.is_a?(IO::Pipe)\n\
    \    next if value.is_a?(IO::NullFile)\n    next if value.is_a?(IO::Pipe::File)\n\
    \    next if value.is_a?(IO::Pipe::NullFile)\n    next if value.is_a?(IO::Pipe::Pipe)\n\
    \    next if value.is_a?(IO::Pipe::NullPipe)\n    next if value.is_a?(IO::Pipe::Stream)\n\
    \    next if value.is_a?(IO::Pipe::BufferedStream)\n    next if value.is_a?(IO::Pipe::UnsupportedStream)\n\
    \    next if value.is_a?(IO::Pipe::PipeInput)\n    next if value.is_a?(IO::Pipe::PipeOutput)\n\
    \    next if value.is_a?(IO::Pipe::PipeError)\n    next if value.is_a?(IO::Pipe::PipeInput::File)\n\
    \    next if value.is_a?(IO::Pipe::PipeInput::NullFile)\n    next if value.is_a?(IO::Pipe::PipeInput::Stream)\n\
    \    next if value.is_a?(IO::Pipe::PipeInput::BufferedStream)\n    next if value.is_a?\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmplpw6wv8v.ruby:46: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmplpw6wv8v.ruby:53: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.each do |value|\n    next if value.is_a?(Numeric)\n\
    \    next if value.is_a?(String)\n    next if value.is_a?(Symbol)\n    next if\
    \ value.is_a?(TrueClass) || value.is_a?(FalseClass)\n    next if value.nil?\n\
    \    next if value.respond_to?(:to_int)\n    raise TypeError, \"#{value.class}\
    \ can't be converted to integer\"\n  end\n  values\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwj_xa5e9.ruby\nStarted\nE\n===============================================================================\n\
    Error: test_filter_integers(TestHumanEval): TypeError: Hash can't be converted\
    \ to integer\n/tmp/tmpwj_xa5e9.ruby:14:in `block in filter_integers'\n/tmp/tmpwj_xa5e9.ruby:7:in\
    \ `each'\n/tmp/tmpwj_xa5e9.ruby:7:in `filter_integers'\n/tmp/tmpwj_xa5e9.ruby:23:in\
    \ `call'\n/tmp/tmpwj_xa5e9.ruby:23:in `test_filter_integers'\n     20:   def test_filter_integers\n\
    \     21:     candidate = method(:filter_integers)\n     22:     assert_equal([],\
    \ candidate.call([]))\n  => 23:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     24:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     25:   end\n     26: end\n===============================================================================\n\
    \nFinished in 0.001162739 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    860.04 tests/s, 860.04 assertions/s\n"
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.each do |value|\n    next if value.is_a?(Numeric)\n\
    \    next if value.is_a?(String)\n    next if value.is_a?(Symbol)\n    next if\
    \ value.is_a?(TrueClass) || value.is_a?(FalseClass)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(Float)\n    next if value.is_a?(Fixnum)\n    next if\
    \ value.is_a?(BigInteger)\n    next if value.is_a?(Array)\n    next if value.is_a?(Hash)\n\
    \    next if value.is_a?(Range)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(StringIO)\n    next\
    \ if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::MemoryFile)\n\
    \    next if value.is_a?(IO::Unsupported)\n    next if value.is_a?(IO::NotADirectoryError)\n\
    \    next if value.is_a?(IO::NotAFile)\n    next if value.is_a?(IO::NotAFile::NotAFile)\n\
    \    next if value.is_a?(IO::NotAFile::NotAFile::NotAFile)\n    next if value.is_a?(IO::NotAFile::NotAFile::NotAFile::NotAFile)\n\
    \    next if value.is_a?(IO::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile)\n\
    \    next if value.is_a?(IO::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile)\n\
    \    next if value.is_a?(IO::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile)\n\
    \    next if value.is_a?(IO::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile)\n\
    \    next if value.is_a?(IO::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile::NotAFile)\n\
    \    next if \nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpbvhizzyk.ruby:38: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmpbvhizzyk.ruby:45: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select! { |v| v.is_a?(Integer) }\n\
    \  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqtygvz01.ruby

    Started

    .

    Finished in 0.000472142 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2118.01 tests/s, 6354.02 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select! {|v| v.is_a?(Integer) }\n\
    \  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp47q2ae5.ruby

    Started

    .

    Finished in 0.000506157 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1975.67 tests/s, 5927.01 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select! {|v| v.is_a?(Integer) }\n\
    \  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp47q2ae5.ruby

    Started

    .

    Finished in 0.000506157 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1975.67 tests/s, 5927.01 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select! { |value| value.is_a?(Integer)\
    \ }\n  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2z8zk1w8.ruby

    Started

    .

    Finished in 0.000478188 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2091.23 tests/s, 6273.68 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.each do |value|\n    next if value.is_a?(Numeric)\n\
    \    next if value.is_a?(String)\n    next if value.is_a?(Symbol)\n    next if\
    \ value.is_a?(TrueClass) || value.is_a?(FalseClass)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(Hash)\n    next if value.is_a?(Range)\n    next if value.is_a?(IO)\
    \ || value.is_a?(StringIO)\n    next if value.is_a?(File)\n    next if value.is_a?(Process)\n\
    \    next if value.is_a?(Thread)\n    next if value.is_a?(Generator)\n    next\
    \ if value.is_a?(IO::WaitReadable)\n    next if value.is_a?(IO::WaitWritable)\n\
    \    next if value.is_a?(IO::WaitHandle)\n    next if value.is_a?(IO::Pipe)\n\
    \    next if value.is_a?(IO::Pipe::Reader)\n    next if value.is_a?(IO::Pipe::Writer)\n\
    \    next if value.is_a?(IO::Pipe::Error)\n    next if value.is_a?(IO::Dir)\n\
    \    next if value.is_a?(IO::File)\n    next if value.is_a?(IO::Dir::Iterator)\n\
    \    next if value.is_a?(IO::Dir::File)\n    next if value.is_a?(IO::Dir::Symlink)\n\
    \    next if value.is_a?(IO::Dir::RmDir)\n    next if value.is_a?(IO::Dir::Touch)\n\
    \    next if value.is_a?(IO::Dir::NoWrite)\n    next if value.is_a?(IO::Dir::NoRead)\n\
    \    next if value.is_a?(IO::Dir::NoWriteDir)\n    next if value.is_a?(IO::Dir::NoWriteFile)\n\
    \    next if value.is_a?(IO::Dir::NoWriteSymlink)\n    next if value.is_a?(IO::Dir::NoWriteLink)\n\
    \    next if value.is_a?(IO::Dir::NoWriteDirSymlink)\n    next if value.is_a?(IO::Dir::NoWriteFileSymlink)\n\
    \    next if value.is_a?(IO::Dir::NoWriteLinkSymlink)\n    \nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpzmbl2pq_.ruby:45: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmpzmbl2pq_.ruby:52: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select!{|v| v.is_a?(Integer) }\n \
    \ values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpeh6x2ca3.ruby

    Started

    .

    Finished in 0.000494267 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2023.20 tests/s, 6069.59 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3d4qxu1e.ruby

    Started

    .

    Finished in 0.0005002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.20 tests/s, 5997.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk91ck5p5.ruby

    Started

    .

    Finished in 0.000483911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2066.50 tests/s, 6199.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795264
