name: HumanEval_60_sum_to_n
language: ruby
prompt: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
  # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
  # 55\n# >>> sum_to_n(1)\n# 1\ndef sum_to_n(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
  \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n   \
  \ assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
  \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
  \  end\nend\n"
completions: ["  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n   \
    \ sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n\
    </cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of uppercase letters in the string.", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n \
    \   sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an integer $n$ and returns the number of digits in $n$. For example, sum_to_n(100)\
    \ should return 4.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a number as input and returns the sum of all numbers from 1 to that number.",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ n prime numbers.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n \
    \   sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n\
    <cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe sum_to_n function\
    \ takes one argument, n, which is the number of terms to sum.\nIt then sums all\
    \ the numbers from 1 to n and returns the result.\nFor example, sum_to_n(3) returns\
    \ 6.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ numbers in the list. For example, sum_to_n([4, 6, 9, 10, 12]) should return\
    \ 45.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a number n and returns the sum from 1 to n squared.", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the numbers from 1 to n squared.", "  sum = 0\n  for i in 1..n\n    sum +=\
    \ i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the square\
    \ of its input. For example, square(3) = 9.", "  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n\
    </cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes an integer $n$ and returns $n!$. For example, sum_to_n(3)\
    \ should return $6$.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the factorial of a number.", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n \
    \   sum += i\n  end\n  sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\n\
    The sum function can take an optional start argument, which defaults to 0.", " \
    \ sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the square of its argument.", "  sum = 0\n\
    \  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<text>\n\
    The for loop is equivalent to the following code:", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the first n positive integers. Use a while loop to do\
    \ this.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a number as input and returns the sum of all numbers from\
    \ 1 to that number.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n\
    </cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n\
    <cell>\nsum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n\
    <cell>\nsum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n\
    <cell>\nsum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n\
    <cell>\nsum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n\
    <cell>\nsum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n\
    <cell>\nsum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n\
    <cell>\nsum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n\
    <cell>\nsum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n\
    <cell>\nsum_to_n(1000000000019)\n</cell>\n<cell>\nsum_to_n(", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the first n positive integers. For example,\
    \ sum_to_n(10) should return 55.", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a number\
    \ n and returns the sum of the first n numbers. For example, sum_to_n(5) should\
    \ return 15, and sum_to_n(10) should return 55.", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "  sum = 0\n  for i in 1..n\n    sum +=\
    \ i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nThe Ruby way",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nThe sum_to_n\
    \ function above is very simple, but it illustrates the power of Ruby's Enumerable\
    \ module. Ruby's Enumerable module is very powerful and can do many things that\
    \ we cannot do with for loops. For example, we can use Enumerable#map to apply\
    \ a function to every element of an Enumerable object:", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\n\
    The for loop\nThe for loop is used to iterate over a sequence. For example, a\
    \ for loop can be used to iterate over a list:", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the first n positive integers. Use a while loop to do this.", " \
    \ sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n \
    \   sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe function sum_to_n takes\
    \ one argument, n, which represents the number of terms to sum.", "  sum = 0\n\
    \  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(1)\n</cell>\n<text>\nThe Ruby Programming Language", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the number of characters in the string.",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer $n$ and returns the sum of the first\
    \ $n$ prime numbers.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the sum of the first $n$ prime\
    \ numbers.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nThe for loop\nThe for loop is used\
    \ to iterate over a collection. For example, a for loop is used to iterate over\
    \ a collection of numbers:", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "  sum = 0\n  for i in 1..n\n    sum +=\
    \ i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\n\
    The for loop is just like any other loop in Ruby, but instead of using an index\
    \ like in other languages, Ruby uses iterators. In Ruby, the for loop is equivalent\
    \ to the following code:", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", " \
    \ sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n \
    \   sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer $n$ and returns $n!$. For example, sum_to_n(3) should return $6$.",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n \
    \   sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the first n positive\
    \ integers. Use a while loop to do this.", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the square of numbers from 1 to n.", " \
    \ sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of digits in $n$. For example, sum_to_n(12345) =\
    \ 5.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n   \
    \ sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n\
    <cell>\nsum_to_n(1)\n</cell>\n<text>\nThe for loop is used here to iterate over\
    \ the numbers 1 to n. In the body of the loop, we add each number to the sum variable.\
    \ After the loop is complete, we return the sum.", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the factorial of a number.", "  sum = 0\n  for i in 1..n\n    sum +=\
    \ i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<cell>\n\
    sum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the first n positive integers. Use\
    \ a while loop.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n\
    </cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n\
    <text>\nThe for loop\nThe for loop is used to iterate over a collection of things.\
    \ In Ruby, it is called a for loop. Here is an example of a for loop in Ruby:",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a number.",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<code language=julia-0.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-0.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-0.5>\nsum_to_n(5)\n</cell>\n<code language=julia-0.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-0.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe sum_to_n function\
    \ above is very simple. It just sums up all the numbers from 1 to n. Let's see\
    \ how it works:", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer $n$ and returns the number of digits\
    \ in $n$. For example, sum_to_n(12345) = 4.", "  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe sum_to_n function takes one\
    \ argument, n, and returns the sum of the numbers from 1 to n.", "  sum = 0\n\
    \  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a number.", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe sum_to_n function above\
    \ is called a generator function, and is often used to create infinite sequences.\
    \ Generators allow us to create infinite sequences without having to store all\
    \ the values in memory at once. Generators are a very useful tool in Ruby, and\
    \ we will see them in action in the next sections.", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the numbers from 1 to n that are divisible\
    \ by k.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the first n positive integers. Use a while loop to do\
    \ this.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nThe Ruby Programming Language\n\
    Ruby is a dynamic language that runs on the Ruby Virtual Machine (VM). It has\
    \ many advantages over other dynamic languages, such as Python and Javascript.\
    \ Ruby is a very popular language for data science, machine learning, and web\
    \ development. Ruby was developed by Yukihiro \\\"Matz\\\" Matsumoto in Japan.",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nThe Ruby Programming\
    \ Language\nRuby is a dynamic, high-level, general-purpose programming language\
    \ that is especially suited to applications that run on a variety of devices,\
    \ including desktops, servers, and mobile devices.", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n\
    </cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\n\
    sum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a number.",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<cell>", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer $n$ and returns the number of digits in $n$.\
    \ For example, sum_to_n(1234) should return 4.", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n\
    </cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n\
    </cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n\
    <cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<cell>\n\
    sum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<cell>\nsum_to_n(30)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n\
    <cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(1)\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n\
    <cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the square of its argument. For example, square(3) = 9.", "  sum = 0\n\
    \  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n positive integers. \nThe function should take in a parameter n and return\
    \ the sum of the first n positive integers.", "  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n \
    \ end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\n\
    sum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<cell>",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the numbers from 1 to n that\
    \ are divisible by 3.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<code language=julia-0.6>\nsum_to_n(30)\n</cell>\n<code language=julia-0.6>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-0.6>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-0.6>\nsum_to_n(10)\n</cell>\n<code language=julia-0.6>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n positive integers. Use a while loop to do this.", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n numbers of the Fibonacci sequence. \n\
    The Fibonacci sequence is defined by the recurrence relation:", "  sum = 0\n \
    \ for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe function sum_to_n is now\
    \ defined. Let's test it by calling it with the argument 30:", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the sum of the first $n$ prime\
    \ numbers.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nThe sum function\nThe sum function\
    \ takes an argument and returns the sum of all the numbers from 1 to that argument.\
    \ For example, sum(1..10) returns 55.", "  sum = 0\n  for i in 1..n\n    sum +=\
    \ i\n  end\n  sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a number.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n\
    </cell>\n<text>\nThe sum_to_n function above is very simple, but we can do better.\
    \ Let's rewrite it using Ruby's Enumerable module. Enumerable is one of the most\
    \ powerful Ruby modules in the Ruby ecosystem. Let's rewrite our sum_to_n function\
    \ using Enumerable:", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n\
    </cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "  sum = 0\n  for i in 1..n\n    sum +=\
    \ i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", " \
    \ sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n \
    \   sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\n\
    sum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000001)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000004)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000007)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000010)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000013)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000016)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000017)",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\n\
    The function sum_to_n takes one argument, n, which represents the number of terms\
    \ to sum.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", " \
    \ sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<text>\nThe for loop is really just a shorthand for writing a while loop.\
    \ Let's see how it works:", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend\n</cell>\n<code language=julia-0.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-0.5>\nsum_to_n(100)\n</cell>\n<code language=julia-0.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-0.5>\nsum_to_n(10)\n</cell>\n<code language=julia-0.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the first n positive integers. Use a while loop to do this.", "  sum = 0\n\
    \  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that takes a number n\
    \ and returns the sum of the first n numbers. For example, sum_to_n(10) should\
    \ return 55.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n\
    <cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer $n$ and returns the sum of the first $n$ prime numbers.", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes an integer and returns\
    \ the sum of the first n positive integers less than or equal to that integer.",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ numbers in the list. For example, sum([1, 2, 3]) should return 6. Make sure\
    \ you use recursion.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<text>\nNow let's see how this works:", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of uppercase letters.", "  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n   \
    \ sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n\
    <cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer $n$ and returns the sum of\
    \ the first $n$ numbers from 1 to $n$. For example, sum_to_n(5) = 1 + 2 + 3 +\
    \ 4 + 5 = 10.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n\
    </cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the numbers from 1\
    \ to n squared.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n\
    </cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a number.",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the first\
    \ n positive integers. Your function should take one parameter, n, and return\
    \ a number.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", " \
    \ sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <text>\nThe function sum_to_n takes one argument, n, which represents the number\
    \ of terms to sum.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer $n$ and\
    \ returns the number of digits in $n$. For example, sum_to_n(12) should return\
    \ 3."]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
