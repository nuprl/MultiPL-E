name: HumanEval_87_get_row
language: ruby
prompt: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
  \ to matrix, however, unlike matrices,\n# each row may contain a different number\
  \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return\
  \ list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a coordinate\
  \ - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending\
  \ order.\n# Also, sort coordinates of the row by columns in descending order.\n\
  # Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n# [1,2,3,4,5,1]\n\
  # ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([], 1) == []\n# get_row([[],\
  \ [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
  \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
  \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5,\
  \ 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0,\
  \ 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6,\
  \ 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3,\
  \ 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
  \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
  \ [1, 2, 3]], 3))\n  end\nend\n"
completions: ["  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == 0 || j == 0\n        coord = (i, j)\n      else\n        coord\
    \ = (i, j)\n      end\n      coord.each do |coord|\n        if coord == x\n  \
    \        coord.each do |coord|\n            coord.each do |coord|\n          \
    \    coord.each do |coord|\n                coord.each do |coord|\n          \
    \        coord.each do |coord|\n                    coord.each do |coord|\n  \
    \                    coord.each do |coord|\n                        coord.each\
    \ do |coord|\n                          coord.each do |coord|\n              \
    \              coord.each do |coord|\n                              coord.each\
    \ do |coord|\n                                coord.each do |coord|\n        \
    \                          coord.each do |coord|\n                           \
    \         coord.each do |coord|\n                                      coord.each\
    \ do |coord|\n                                        coord.each do |coord|\n\
    \                                          coord.each do |coord|\n           \
    \                                 coord.each do |coord|\n                    \
    \                          coord.each do |coord|\n                           \
    \                     coord.each do |coord|\n                                \
    \                  coord.each do |coord|\n                                   \
    \                 coord.each do |coord|\n                                    \
    \                  coord.each do |coord|\n                                   \
    \                     coord.each do |coord|\n                                \
    \                          coord.each do |coord|\n                           \
    \                                 coord.each do |coord|\n                    \
    \                                          coord.each do |coord|\n           \
    \                                                     coord.each do |coord|\n\
    \                                                                  coord.each\
    \ do |coord|\n                                                               \
    \     coord.each do |coord|\n                                                \
    \                    coord.each do |coord|\n                                 \
    \                                   coord.each do |coord|\n                  \
    \                                                  coord.each do |coord|\n   \
    \                                                                 coord.each do\
    \ |coord|\n                                                                  \
    \  coord.each do |coord|\n                                                   \
    \                 coord.each do |coord|\n                                    \
    \                                coord.each do |coord|\n                     \
    \                                               coord.each do |coord|\n      \
    \                                                              coord.each do |coord|\n\
    \                                                                    coord.each\
    \ do |coord|\n                                                               \
    \     coord.each do |coord|\n                                                \
    \                    coord.each do |coord|\n                                 \
    \                                   coord.each do |coord|\n                  \
    \                                                  coord.each do |coord|\n   \
    \                                                                 coord.each do\
    \ |coord|\n                                                                  \
    \  coord.each do |coord|\n                                                   \
    \                 coord.each do |coord|\n                                    \
    \                                coord.each do |coord|\n                     \
    \                                               coord.each do |coord|\n      \
    \                                                              coord.each do |coord|\n\
    \                                                                    coord.each\
    \ do |coord|\n                                                               \
    \     coord.each do |coord|\n                                                \
    \                    coord.each do |coord|\n                                 \
    \                                   coord.", "  row = []\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push", "  row = []\n  row.push((0,0))\n  row.push((1,0))\n  row.push((2,0))\n\
    \  row.push((3,0))\n  row.push((4,0))\n  row.push((5,0))\n  row.push((6,0))\n\
    \  row.push((7,0))\n  row.push((8,0))\n  row.push((9,0))\n  row.push((10,0))\n\
    \  row.push((11,0))\n  row.push((12,0))\n  row.push((13,0))\n  row.push((14,0))\n\
    \  row.push((15,0))\n  row.push((16,0))\n  row.push((17,0))\n  row.push((18,0))\n\
    \  row.push((19,0))\n  row.push((20,0))\n  row.push((21,0))\n  row.push((22,0))\n\
    \  row.push((23,0))\n  row.push((24,0))\n  row.push((25,0))\n  row.push((26,0))\n\
    \  row.push((27,0))\n  row.push((28,0))\n  row.push((29,0))\n  row.push((30,0))\n\
    \  row.push((31,0))\n  row.push((32,0))\n  row.push((33,0))\n  row.push((34,0))\n\
    \  row.push((35,0))\n  row.push((36,0))\n  row.push((37,0))\n  row.push((38,0))\n\
    \  row.push((39,0))\n  row.push((40,0))\n  row.push((41,0))\n  row.push((42,0))\n\
    \  row.push((43,0))\n  row.push((44,0))\n  row.push((45,0))\n  row.push((46,0))\n\
    \  row.push((47,0))\n  row.push((48,0))\n  row.push((49,0))\n  row.push((50,0))\n\
    \  row.push((51,0))\n  row.push((52,0))\n  row.push((53,0))\n  row.push((54,0))\n\
    \  row.push((55,0))\n  row.push((56,0))\n  row.push((57,0))\n  row.push((58,0))\n\
    \  row.push((59,0))\n  row.push((60,0))\n  row.push((61,0))\n  row.push((62,0))\n\
    \  row.push((63,0))\n  row.push((64,0))\n  row.push((65,0))\n  row.push((66,0))\n\
    \  row.push((67,0))\n  row.push((68,0))", "  row = []\n  row.push((0, x))\n  row.push((lst.size\
    \ - 1, x))\n  row.push((lst.size - 1, lst.size - 1))\n  row.push((lst.size - 1,\
    \ lst.size - 2))\n  row.push((lst.size - 1, lst.size - 3))\n  row.push((lst.size\
    \ - 1, lst.size - 4))\n  row.push((lst.size - 1, lst.size - 5))\n  row.push((lst.size\
    \ - 1, lst.size - 6))\n  row.push((lst.size - 1, lst.size - 7))\n  row.push((lst.size\
    \ - 1, lst.size - 8))\n  row.push((lst.size - 1, lst.size - 9))\n  row.push((lst.size\
    \ - 1, lst.size - 10))\n  row.push((lst.size - 1, lst.size - 11))\n  row.push((lst.size\
    \ - 1, lst.size - 12))\n  row.push((lst.size - 1, lst.size - 13))\n  row.push((lst.size\
    \ - 1, lst.size - 14))\n  row.push((lst.size - 1, lst.size - 15))\n  row.push((lst.size\
    \ - 1, lst.size - 16))\n  row.push((lst.size - 1, lst.size - 17))\n  row.push((lst.size\
    \ - 1, lst.size - 18))\n  row.push((lst.size - 1, lst.size - 19))\n  row.push((lst.size\
    \ - 1, lst.size - 20))\n  row.push((lst.size - 1, lst.size - 21))\n  row.push((lst.size\
    \ - 1, lst.size - 22))\n  row.push((lst.size - 1, lst.size - 23))\n  row.push((lst.size\
    \ - 1, lst.size - 24))\n  row.push((lst.size - 1, lst.size - 25))\n  row.push((lst.size\
    \ - 1, lst.size - 26))\n  row.push((lst.size - 1, lst.size - 27))\n  row.push((lst.size\
    \ - 1, lst.size - 28))\n  row.push((lst.size - 1, lst.size - 29))\n  row.push((lst.size\
    \ - 1, lst.size - 30))\n  row.push((lst.size - 1, lst.size - 31))\n  row.push((lst.size\
    \ - 1, lst.size - 32))\n  row.push((lst.size - 1, lst.size - 33))\n  row.push((lst.size\
    \ - 1, lst.size - 34))\n  row.push((lst.size - 1, lst.size - 35))\n  row.push((lst.size\
    \ - 1, lst.size - 36", "  lst.sort!\n  result = []\n  i = 0\n  while i < lst.size\n\
    \    row = lst[i]\n    i += 1\n    row.sort!\n    row.each do |e|\n      if e\
    \ == x\n        result.push([i, e])\n      end\n    end\n  end\n  result.reverse!\n\
    \  result\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n   \
    \   if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0 &&\
    \ j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n     \
    \   row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  l", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 || j == 0\n        coord = (i, j)\n      else\n\
    \        coord = (i, j)\n      end\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse", "  row = []\n\
    \  for i in 0...lst.size\n    row << [(i + x, lst[i])]\n  end\n  row.sort!\n \
    \ row.each do |i|\n    i.sort!\n  end\n  return row\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        coordinates = [(i, j)]\n      elsif i == 0 && j != 0\n        coordinates\
    \ = [(i, j), (0, j)]\n      elsif i != 0 && j == 0\n        coordinates = [(i,\
    \ j), (0, i)]\n      elsif i != 0 && j != 0\n        coordinates = [(i, j), (0,\
    \ i), (i, j)]\n      end\n    end\n  end\nend", "  row = []\n  for i in 0...(lst.size\
    \ - 1)\n    if lst[i][x] == x\n      row << [i, x]\n    end\n  end\n  row.sort!\n\
    \  row.sort!.reverse\n  row\nend", "  row = []\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0\n        coords\
    \ = [[j, 0]]\n      elsif i == row.length - 1\n        coords = [[0, j]]\n   \
    \   else\n        coords = [[j, i]]\n      end\n      coords.sort_by! { |x, y|\
    \ y }\n      coords.reverse!\n      coords.sort_by! { |x, y| x }\n      coords.reverse!\n\
    \      coords.each do |coord|\n        if coord == [x, 0]\n          coords.delete_at(coords.size\
    \ - 1)\n          coords.delete_at(coords.size - 1)\n        end\n      end\n\
    \      coords.each do |coord|\n        if coord == [0, 0]\n          coords.delete_at(coords.size\
    \ - 1)\n          coords.delete_at(coords.size - 1)\n        end\n      end\n\
    \      coords.each do |coord|\n        if coord == [0, 0]\n          coords.delete_at(coords.size\
    \ - 1)\n          coords.delete_at(coords.size - 1)\n        end\n      end\n\
    \      coords.each do |coord|\n        if coord == [0, 0]\n          coords.delete_at(coords.size\
    \ - 1)\n          coords.delete_at(coords.size - 1)\n        end\n      end\n\
    \      coords.each do |coord|\n        if coord == [0, 0]\n          coords.delete_at(coords.size\
    \ - 1)\n          coords.delete_at(coords.size - 1)\n        end\n      end\n\
    \      coords.each do |coord|\n        if coord == [0, 0]\n          coords.delete_at(coords.size\
    \ - 1)\n          coords.delete_at(coords.size - 1)\n        end\n      end\n\
    \      coords.each do |coord|\n        if coord == [0, 0]\n          coords.delete_at(coords.size\
    \ - 1)\n          coords.delete_at(coords.size - 1)\n        end\n      end\n\
    \      coords.each do |coord|\n        if coord == [0, 0]\n          coords.delete_at(coords.size\
    \ - 1)\n          coords.delete_at(coords.size - 1)\n        end\n      end\n\
    \      coords.each do |coord|\n        if coord == [0, 0]\n          coords.delete_at(coords.size\
    \ - 1)\n          coords.delete_at(coords.size - 1)\n        end\n      end\n\
    \      coords.each do |coord|\n        if coord == [0, 0]\n          coords.delete_at(coords.size\
    \ - 1)\n          coords.delete_at(coords.size - 1)\n        end\n      end\n\
    \      coords.each do |coord|\n        if coord == [0, 0]\n          coords.delete_at(coords.size\
    \ - 1)\n          coords.delete_at(coords.size - 1)\n        end\n      end\n\
    \      coords.each do |coord|\n        if coord == [0, 0]\n          coords.delete_at(coords.size\
    \ - 1)\n          coords.delete_at(coords.size - 1)\n        end\n      end\n\
    \      coords.each do |coord|\n        if coord == [0, 0]\n          coords.delete_at(",
  "  lst.sort!\n  row = []\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x", "  row = 0\n  col = 0\n  result\
    \ = []\n  while row < lst.size\n    if lst[row][col] == x\n      result << [row,\
    \ col]\n      row += 1\n      col = 0\n      while col < lst[row].size\n     \
    \   if lst[row][col] == x\n          result << [row, col]\n          col += 1\n\
    \          row += 1\n          col = 0\n        else\n          col += 1\n   \
    \   end\n      row += 1\n      col = 0\n    else\n      row += 1\n      col =\
    \ 0\n    end\n  end\n  result.sort!\n  result.sort!.reverse!\n  result\nend",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 && j == 0\n        row.unshift(j)\n      elsif i == 0 && j != 0\n   \
    \     row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n \
    \     end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(j)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(j)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(j)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(j)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(j)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(j)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 && j == 0\n        coords = [(i, j)]\n      elsif i == 0 && j != 0\n\
    \        coords = [(i, j), (i-1, j)]\n      elsif i != 0 && j == 0\n        coords\
    \ = [(i, j), (i-1, j-1), (i-1, j)]\n      elsif i != 0 && j != 0\n        coords\
    \ = [(i, j), (i-1, j-1), (i-1, j-1), (i-1, j)]\n      end\n    end\n  end\nend",
  "  row = []\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push", "  row = []\n  row.push((0,0))\n\
    \  row.push((1,0))\n  row.push((2,0))\n  row.push((3,0))\n  row.push((4,0))\n\
    \  row.push((5,0))\n  row.push((6,0))\n  row.push((0,1))\n  row.push((1,1))\n\
    \  row.push((2,1))\n  row.push((3,1))\n  row.push((4,1))\n  row.push((5,1))\n\
    \  row.push((6,1))\n  row.push((0,2))\n  row.push((1,2))\n  row.push((2,2))\n\
    \  row.push((3,2))\n  row.push((4,2))\n  row.push((5,2))\n  row.push((6,2))\n\
    \  row.push((0,3))\n  row.push((1,3))\n  row.push((2,3))\n  row.push((3,3))\n\
    \  row.push((4,3))\n  row.push((5,3))\n  row.push((6,3))\n  row.push((0,4))\n\
    \  row.push((1,4))\n  row.push((2,4))\n  row.push((3,4))\n  row.push((4,4))\n\
    \  row.push((5,4))\n  row.push((6,4))\n  row.push((0,5))\n  row.push((1,5))\n\
    \  row.push((2,5))\n  row.push((3,5))\n  row.push((4,5))\n  row.push((5,5))\n\
    \  row.push((6,5))\n  row.push((0,6))\n  row.push((1,6))\n  row.push((2,6))\n\
    \  row.push((3,6))\n  row.push((4,6))\n  row.push((5,6))\n  row.push((6,6))\n\
    \  row.push((0,7))\n  row.push((1,7))\n  row.push((2,7))\n  row.push((3,7))\n\
    \  row.push((4,7))\n  row.push((5,7))\n  row.push((6,7))\n  row.push((0,8))\n\
    \  row.push((1,8))\n  row.push((2,8))\n  row.push((3,8))\n  row.push((4,8))\n\
    \  row.push((5,8))\n  row.push((6,8))\n  row.push((0,9))\n  row.push((1,9))\n\
    \  row.push((2,9))\n  row.push((3,9))\n  row.push((4,9))\n  row.push((5,9))\n\
    \  row.push((6,9))\n  row.push((0,10))\n  row.push((", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        coordinate = [(i, j)]\n      elsif i == 0 && j != 0\n        coordinate.push((i,\
    \ j - 1))\n      elsif i != 0 && j == 0\n        coordinate.push((i - 1, j))\n\
    \      elsif i != 0 && j != 0\n        coordinate.push((i - 1, j - 1))\n     \
    \ end\n    end\n  end\n  coordinate.sort_by! { |x, y| y }.reverse!\n  coordinate.sort_by!\
    \ { |x, y| x }.reverse!\n  coordinate.map { |x, y| [x, y] }\nend", "  lst.each\
    \ do |row|\n    row.each do |elem|\n      return [elem.to_i, (elem.to_i - 1)]\
    \ if elem == x\n    end\n  end\nend", "  lst.each do |row|\n    row.each do |item|\n\
    \      if item == x\n        return [(row.index(item), row.size - 1)]\n      end\n\
    \    end\n  end\n  return []\nend", "  row = []\n  for i in 0...lst.size\n   \
    \ if lst[i] <= x\n      row << [(i)]\n    else\n      break\n  end\n  row.sort!\n\
    \  row.each do |i|\n    row.sort!\n    row.each do |j|\n      if j > i\n     \
    \   break\n      end\n    end\n  end\n  row\nend", "  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|", "  lst.sort!\n\
    \  row = []\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.", "  lst.each_with_index do |row, i|\n  \
    \  row.each_with_index do |col, j|\n      if i == 0 && j == 0\n        coords\
    \ = [(i, j)]\n      elsif i == 0 && j != 0\n        coords = [(i, j), (i, j -\
    \ 1)]\n      elsif i != 0 && j == 0\n        coords = [(i, j), (i - 1, j)]\n \
    \     elsif i != 0 && j != 0\n        coords = [(i, j), (i - 1, j), (i, j - 1),\
    \ (i, j - 1)]\n      end\n      coords.sort_by! { |x, y| y }.reverse!\n      coords.sort_by!\
    \ { |x, y| x }.reverse!\n      coords.each do |coord|\n        if coord == [x,\
    \ y]\n          return coord\n        end\n      end\n    end\n  end\n  return\
    \ []\nend", "  row = []\n  row.push((0,0))\n  row.push((1,0))\n  row.push((1,1))\n\
    \  row.push((2,0))\n  row.push((2,1))\n  row.push((2,2))\n  row.push((2,3))\n\
    \  row.push((2,4))\n  row.push((2,5))\n  row.push((2,6))\n  row.push((2,7))\n\
    \  row.push((2,8))\n  row.push((2,9))\n  row.push((2,10))\n  row.push((2,11))\n\
    \  row.push((2,12))\n  row.push((2,13))\n  row.push((2,14))\n  row.push((2,15))\n\
    \  row.push((2,16))\n  row.push((2,17))\n  row.push((2,18))\n  row.push((2,19))\n\
    \  row.push((2,20))\n  row.push((2,21))\n  row.push((2,22))\n  row.push((2,23))\n\
    \  row.push((2,24))\n  row.push((2,25))\n  row.push((2,26))\n  row.push((2,27))\n\
    \  row.push((2,28))\n  row.push((2,29))\n  row.push((2,30))\n  row.push((2,31))\n\
    \  row.push((2,32))\n  row.push((2,33))\n  row.push((2,34))\n  row.push((2,35))\n\
    \  row.push((2,36))\n  row.push((2,37))\n  row.push((2,38))\n  row.push((2,39))\n\
    \  row.push((2,40))\n  row.push((2,41))\n  row.push((2,42))\n  row.push((2,43))\n\
    \  row.push((2,44))\n  row.push((2,45))\n  row.push((2,46))\n  row.push((2,47))\n\
    \  row.push((2,48))\n  row.push((2,49))\n  row.push((2,50))\n  row.push((2,51))\n\
    \  row.push((2,52))\n  row.push((2,53))\n  row.push((2,54))\n  row.push((2,55))\n\
    \  row.push((2,56))\n  row.push((2,57))\n  row.push((2,58))\n  row.push((2,59))\n\
    \  row.push((2,60))\n  row.push((2,61))\n  row.push", "  row = []\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([", "  lst.sort!\n  result = []\n  i = 0\n  while\
    \ i < lst.size\n    if i == x\n      result << [(i + 1, 0)]\n      i += 1\n  \
    \    while i < lst.size and lst[i] != x\n        i += 1\n      i += 1\n      while\
    \ i < lst.size and lst[i] == x\n        result << [(i + 1, i + 1)]\n        i\
    \ += 1\n      i += 1\n    else\n      result << [(i + 1, i + 1)]\n    end\n  end\n\
    \  result.sort!\n  result.reverse!\n  result\nend", "  lst.sort!\n  result = []\n\
    \  i = 0\n  while i < lst.size\n    row = lst[i]\n    i += 1\n    row.sort!\n\
    \    row.each_with_index do |col, j|\n      if j == x\n        result.push([i,\
    \ j])\n      end\n    end\n  end\n  result\nend", "  row = []\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((",
  "  row = []\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((", "  lst.sort!\n  result = []\n  i = 0\n  while i < lst.size\n\
    \    if lst[i][0] == x\n      result << [(i + 1, lst[i][1])]\n      i += 1\n \
    \     while i < lst.size && lst[i][0] == x\n        result << [(i + 1, lst[i][1])]\n\
    \        i += 1\n      i += 1\n    end\n  end\n  result.sort!\n  result.reverse!\n\
    \  return result\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        coords = [i, j]\n      elsif\
    \ i == 0 && j != 0\n        coords = [i, j - 1]\n      elsif i != 0 && j == 0\n\
    \        coords = [i - 1, j]\n      elsif i != 0 && j != 0\n        coords = [i\
    \ - 1, j - 1]\n      end\n    end\n  end\nend", "  row = []\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        coords = [(i, j)]\n      elsif i == 0 && j != 0\n        coords = [(i,\
    \ j), coords[-1]]\n      elsif i != 0 && j == 0\n        coords = [coords[-1],\
    \ (i,j)]\n      elsif i != 0 && j != 0\n        coords = [coords[-1], (i,j)] +\
    \ coords\n      end\n    end\n  end\n  coords.sort_by { |x, y| y }.reverse.sort_by\
    \ { |x, y| x }\nend", "  row = []\n  for i in 0..(lst.length - 1)\n    if lst[i]\
    \ <= x\n      row.push(i)\n    end\n  end\n  row.sort!\n  row.sort!.reverse\n\
    \  row\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == 0 && j == 0\n        coord = (i, j)\n      elsif i == 0 &&\
    \ j != 0\n        coord = (i, j)\n      elsif i != 0 && j == 0\n        coord\
    \ = (i, j)\n      elsif i == 0 && j == 0\n        coord = (i, j)\n      else\n\
    \        coord = (i, j)\n      end\n    end\n  end\n  coord.each_with_index do\
    \ |coord, index|\n    if coord[0] == x\n      coord.each_with_index do |coord,\
    \ index|\n        if coord[1] > index\n          coord = coord.dup\n         \
    \ coord[1] = index\n        end\n      end\n    end\n  end\n  coord.sort_by! {\
    \ |coord| coord[0] }\n  coord.sort_by! { |coord| coord[1] }\n  coord.map { |coord|\
    \ coord }\nend", "  row = []\n  row.push((0,0))\n  row.push((1,0))\n  row.push((2,0))\n\
    \  row.push((3,0))\n  row.push((4,0))\n  row.push((5,0))\n  row.push((6,0))\n\
    \  row.push((7,0))\n  row.push((8,0))\n  row.push((9,0))\n  row.push((10,0))\n\
    \  row.push((11,0))\n  row.push((12,0))\n  row.push((13,0))\n  row.push((14,0))\n\
    \  row.push((15,0))\n  row.push((16,0))\n  row.push((17,0))\n  row.push((18,0))\n\
    \  row.push((19,0))\n  row.push((20,0))\n  row.push((21,0))\n  row.push((22,0))\n\
    \  row.push((23,0))\n  row.push((24,0))\n  row.push((25,0))\n  row.push((26,0))\n\
    \  row.push((27,0))\n  row.push((28,0))\n  row.push((29,0))\n  row.push((30,0))\n\
    \  row.push((31,0))\n  row.push((32,0))\n  row.push((33,0))\n  row.push((34,0))\n\
    \  row.push((35,0))\n  row.push((36,0))\n  row.push((37,0))\n  row.push((38,0))\n\
    \  row.push((39,0))\n  row.push((40,0))\n  row.push((41,0))\n  row.push((42,0))\n\
    \  row.push((43,0))\n  row.push((44,0))\n  row.push((45,0))\n  row.push((46,0))\n\
    \  row.push((47,0))\n  row.push((48,0))\n  row.push((49,0))\n  row.push((50,0))\n\
    \  row.push((51,0))\n  row.push((52,0))\n  row.push((53,0))\n  row.push((54,0))\n\
    \  row.push((55,0))\n  row.push((56,0))\n  row.push((57,0))\n  row.push((58,0))\n\
    \  row.push((59,0))\n  row.push((60,0))\n  row.push((61,0))\n  row.push((62,0))\n\
    \  row.push((63,0))\n  row.push((64,0))\n  row.push((65,0))\n  row.push((66,0))\n\
    \  row.push((67,0))\n  row.push((68,0))", "  row = []\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((", "  lst.each_with_index do\
    \ |row, i|\n    row.each_with_index do |col, j|\n      if i == x && j == x\n \
    \       puts \"(#{i}, #{j})\"\n      end\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == j\n        next\
    \ if i == 0\n        next if j == row.length - 1\n        next if j == row.length\n\
    \        next if j == 0\n        next if i == row.length - 1\n        next if\
    \ i == row.length\n        next if i == 0\n        next if j == row.length - 1\n\
    \        next if j == row.length\n        next if j == 0\n        next if i ==\
    \ row.length - 1\n        next if i == row.length\n        next if i == 0\n  \
    \      next if j == row.length - 1\n        next if j == row.length\n        next\
    \ if j == 0\n        next if i == row.length - 1\n        next if i == row.length\n\
    \        next if i == 0\n        next if j == row.length - 1\n        next if\
    \ j == row.length\n        next if j == 0\n        next if i == row.length - 1\n\
    \        next if i == row.length\n        next if i == 0\n        next if j ==\
    \ row.length - 1\n        next if j == row.length\n        next if j == 0\n  \
    \      next if i == row.length - 1\n        next if i == row.length\n        next\
    \ if i == 0\n        next if j == row.length - 1\n        next if j == row.length\n\
    \        next if j == 0\n        next if i == row.length - 1\n        next if\
    \ i == row.length\n        next if i == 0\n        next if j == row.length - 1\n\
    \        next if j == row.length\n        next if j == 0\n        next if i ==\
    \ row.length - 1\n        next if i == row.length\n        next if i == 0\n  \
    \      next if j == row.length - 1\n        next if j == row.length\n        next\
    \ if j == 0\n        next if i == row.length - 1\n        next if i == row.length\n\
    \        next if i == 0\n        next if j == row.length - 1\n        next if\
    \ j == row.length\n        next if j == 0\n        next if i == row.length - 1\n\
    \        next if i == row.length\n        next if i == 0\n        next if j ==\
    \ row.length - 1\n        next if j == row.length\n        next if j == 0\n  \
    \      next if i == row.length - 1\n        next if i == row.length\n        next\
    \ if i == 0\n        next if j == row.length - 1\n        next if j == row.length\n\
    \        next if j == 0\n        next if i == row.length - 1\n        next if\
    \ i == row.length\n        ", "  lst.each do |row|\n    row.each do |item|\n \
    \     if item == x\n        puts \"#{row}\"\n      end\n    end\n  end\nend",
  "  row = []\n  row.push((0,0))\n  row.push((1,0))\n  row.push((2,0))\n  row.push((3,0))\n\
    \  row.push((4,0))\n  row.push((5,0))\n  row.push((6,0))\n  row.push((0,1))\n\
    \  row.push((1,1))\n  row.push((2,1))\n  row.push((3,1))\n  row.push((4,1))\n\
    \  row.push((5,1))\n  row.push((6,1))\n  row.push((0,2))\n  row.push((1,2))\n\
    \  row.push((2,2))\n  row.push((3,2))\n  row.push((4,2))\n  row.push((5,2))\n\
    \  row.push((6,2))\n  row.push((0,3))\n  row.push((1,3))\n  row.push((2,3))\n\
    \  row.push((3,3))\n  row.push((4,3))\n  row.push((5,3))\n  row.push((6,3))\n\
    \  row.push((0,4))\n  row.push((1,4))\n  row.push((2,4))\n  row.push((3,4))\n\
    \  row.push((4,4))\n  row.push((5,4))\n  row.push((6,4))\n  row.push((0,5))\n\
    \  row.push((1,5))\n  row.push((2,5))\n  row.push((3,5))\n  row.push((4,5))\n\
    \  row.push((5,5))\n  row.push((6,5))\n  row.push((0,6))\n  row.push((1,6))\n\
    \  row.push((2,6))\n  row.push((3,6))\n  row.push((4,6))\n  row.push((5,6))\n\
    \  row.push((6,6))\n  row.push((0,7))\n  row.push((1,7))\n  row.push((2,7))\n\
    \  row.push((3,7))\n  row.push((4,7))\n  row.push((5,7))\n  row.push((6,7))\n\
    \  row.push((0,8))\n  row.push((1,8))\n  row.push((2,8))\n  row.push((3,8))\n\
    \  row.push((4,8))\n  row.push((5,8))\n  row.push((6,8))\n  row.push((0,9))\n\
    \  row.push((1,9))\n  row.push((2,9))\n  row.push((3,9))\n  row.push((4,9))\n\
    \  row.push((5,9))\n  row.push((6,9))\n  row.push((0,10))\n  row.push((", "  row\
    \ = []\n  row.push((0, x))\n  row.push((lst.size - 1, x))\n  row.push((lst.size\
    \ - 1, lst.size - x))\n  row.push((lst.size - 1, lst.size - 1))\n  row.push((lst.size\
    \ - 1, lst.size - 2))\n  row.push((lst.size - 1, lst.size - 3))\n  row.push((lst.size\
    \ - 1, lst.size - 4))\n  row.push((lst.size - 1, lst.size - 5))\n  row.push((lst.size\
    \ - 1, lst.size - 6))\n  row.push((lst.size - 1, lst.size - 7))\n  row.push((lst.size\
    \ - 1, lst.size - 8))\n  row.push((lst.size - 1, lst.size - 9))\n  row.push((lst.size\
    \ - 1, lst.size - 10))\n  row.push((lst.size - 1, lst.size - 11))\n  row.push((lst.size\
    \ - 1, lst.size - 12))\n  row.push((lst.size - 1, lst.size - 13))\n  row.push((lst.size\
    \ - 1, lst.size - 14))\n  row.push((lst.size - 1, lst.size - 15))\n  row.push((lst.size\
    \ - 1, lst.size - 16))\n  row.push((lst.size - 1, lst.size - 17))\n  row.push((lst.size\
    \ - 1, lst.size - 18))\n  row.push((lst.size - 1, lst.size - 19))\n  row.push((lst.size\
    \ - 1, lst.size - 20))\n  row.push((lst.size - 1, lst.size - 21))\n  row.push((lst.size\
    \ - 1, lst.size - 22))\n  row.push((lst.size - 1, lst.size - 23))\n  row.push((lst.size\
    \ - 1, lst.size - 24))\n  row.push((lst.size - 1, lst.size - 25))\n  row.push((lst.size\
    \ - 1, lst.size - 26))\n  row.push((lst.size - 1, lst.size - 27))\n  row.push((lst.size\
    \ - 1, lst.size - 28))\n  row.push((lst.size - 1, lst.size - 29))\n  row.push((lst.size\
    \ - 1, lst.size - 30))\n  row.push((lst.size - 1, lst.size - 31))\n  row.push((lst.size\
    \ - 1, lst.size - 32))\n  row.push((lst.size - 1, lst.size - 33))\n  row.push((lst.size\
    \ - 1, lst.size - 34))\n  row.push((lst.size - 1, lst.size - 35))", "  lst.each\
    \ do |row|\n    row.each do |item|\n      if item == x\n        puts \"#{row}\"\
    \n      end\n    end\n  end\nend", "  lst.sort!\n  row = []\n  row.push((0, 0))\n\
    \  row.push((lst.size, lst.size - 1))\n  row.push((lst.size - 1, 0))\n  row.push((lst.size\
    \ - 1, lst.size - 1))\n  row.push((lst.size - 1, lst.size - 2))\n  row.push((lst.size\
    \ - 2, lst.size - 1))\n  row.push((lst.size - 2, lst.size - 2))\n  row.push((lst.size\
    \ - 2, lst.size - 3))\n  row.push((lst.size - 3, lst.size - 2))\n  row.push((lst.size\
    \ - 3, lst.size - 3))\n  row.push((lst.size - 3, lst.size - 4))\n  row.push((lst.size\
    \ - 4, lst.size - 3))\n  row.push((lst.size - 4, lst.size - 4))\n  row.push((lst.size\
    \ - 4, lst.size - 5))\n  row.push((lst.size - 5, lst.size - 4))\n  row.push((lst.size\
    \ - 5, lst.size - 5))\n  row.push((lst.size - 5, lst.size - 6))\n  row.push((lst.size\
    \ - 6, lst.size - 5))\n  row.push((lst.size - 6, lst.size - 6))\n  row.push((lst.size\
    \ - 6, lst.size - 7))\n  row.push((lst.size - 7, lst.size - 6))\n  row.push((lst.size\
    \ - 7, lst.size - 7))\n  row.push((lst.size - 7, lst.size - 8))\n  row.push((lst.size\
    \ - 8, lst.size - 7))\n  row.push((lst.size - 8, lst.size - 8))\n  row.push((lst.size\
    \ - 8, lst.size - 9))\n  row.push((lst.size - 9, lst.size - 8))\n  row.push((lst.size\
    \ - 9, lst.size - 9))\n  row.push((lst.size - 9, lst.size - 10))\n  row.push((lst.size\
    \ - 10, lst.size - 9))\n  row.push((lst.size - 10, lst.size - 10))\n  row.push((lst.size\
    \ - 10, lst.size - 11))\n  row.push((lst.size - 11, lst.size - 10))\n  row.push((lst.size\
    \ - 11, lst.size - 11))\n  row.push((lst.size - 11, lst.size - 12))\n  row.push((lst.size\
    \ - 12, lst.size - 11))\n  row.push((lst.size - 12, lst.size - 12))\n  row.push((lst.size\
    \ - 12, lst.size - 13))\n  row.push((lst.size - 13, lst.size - ", "  lst.sort!\n\
    \  lst.each_with_index do |row, i|\n    row.sort!\n    row.each_with_index do\
    \ |col, j|\n      if i == 0 || j == 0\n        coord = (i, j)\n      else\n  \
    \      coord = (i, j)\n      end\n      if coord == x\n        coord\n      end\n\
    \    end\n  end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |val, j|\n      if val == x\n        return [i, j]\n      end\n    end\n\
    \  end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == 0 || j == 0\n        coord = (i, j)\n      else\n        coord\
    \ = (i, j)\n      end\n      if coord == x\n        coord\n      end\n    end\n\
    \  end\nend", "  lst.sort!\n  result = []\n  row = 0\n  while row < lst.size\n\
    \    column = lst.index(lst[row], x)\n    result.push([row, column])\n    row\
    \ += 1\n  end\n  result.sort!\n  result.reverse!\n  result\nend", "  rows = []\n\
    \  for i in 0..(lst.size - 1)\n    row = lst[i]\n    row.each_with_index do |e,\
    \ i|\n      if e == x\n        rows.push([i, i])\n      end\n    end\n  end\n\
    \  rows.sort! {|a, b| a[0] <=> b[0]}\n  rows.sort! {|a, b| b[1] <=> a[1]}\n  rows\n\
    end", "  row = []\n  for i in 0...lst.size\n    if lst[i] >= x\n      row.push([i,\
    \ lst[i]])\n    end\n  end\n  row.sort!\n  row.each do |i|\n    i.sort!\n  end\n\
    \  return row\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        coords = [(i, j)]\n      elsif\
    \ i == 0 && j != 0\n        coords = [(i, j), (0, j)]\n      elsif i != 0 && j\
    \ == 0\n        coords = [(i, j), (0, j), (0, i)]\n      elsif i != 0 && j !=\
    \ 0\n        coords = [(i, j), (0, j), (0, i), (0, i-1)]\n      end\n    end\n\
    \  end\nend", "  row = []\n  for i in 0...lst.length\n    if lst[i] >= x\n   \
    \   row << [i, lst[i]]\n    end\n  end\n  row.sort!\n  row.sort! { |a, b| b[1]\
    \ <=> a[1] }\n  row\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0\n        coords = []\n      else\n        coords\
    \ = [(i, j)]\n      end\n      if j == (row.length - 1)\n        coords.reverse\n\
    \      end\n      if x == row[j]\n        coords.reverse\n      end\n      coords\
    \ << [x, y]\n      coords.sort!\n      coords.sort!\n      coords.each do |coord|\n\
    \        coord.sort!\n      end\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\
    \ || i == row.length || j == row[0].length\n        puts \"#{i}, #{j}\"\n    \
    \  end\n    end\n  end\nend", "  lst.sort!\n  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.sort!\n    row.each_with_index do |col, j|\n      if i\
    \ == 0 && j == 0\n        result.push((i, j))\n      elsif i == 0 && j != 0\n\
    \        result.push((i, j))\n      elsif i != 0 && j == 0\n        result.push((i,\
    \ j))\n      elsif i == 0 && j == 0\n        result.push((i, j))\n      elsif\
    \ i == 0 && j != 0\n        result.push((i, j))\n      elsif i != 0 && j != 0\n\
    \        result.push((i, j))\n      end\n    end\n  end\n  result.sort!\n  result\n\
    end", "  row = []\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n\
    \  row.push((x, 0))\n  row.push((", "  row = []\n  row.push((x, 0))\n  row.push((x,\
    \ 1))\n  row.push((x, 2))\n  row.push((x, 3))\n  row.push((x, 4))\n  row.push((x,\
    \ 5))\n  row.push((x, 6))\n  row.push((x, 7))\n  row.push((x, 8))\n  row.push((x,\
    \ 9))\n  row.push((x, 10))\n  row.push((x, 11))\n  row.push((x, 12))\n  row.push((x,\
    \ 13))\n  row.push((x, 14))\n  row.push((x, 15))\n  row.push((x, 16))\n  row.push((x,\
    \ 17))\n  row.push((x, 18))\n  row.push((x, 19))\n  row.push((x, 20))\n  row.push((x,\
    \ 21))\n  row.push((x, 22))\n  row.push((x, 23))\n  row.push((x, 24))\n  row.push((x,\
    \ 25))\n  row.push((x, 26))\n  row.push((x, 27))\n  row.push((x, 28))\n  row.push((x,\
    \ 29))\n  row.push((x, 30))\n  row.push((x, 31))\n  row.push((x, 32))\n  row.push((x,\
    \ 33))\n  row.push((x, 34))\n  row.push((x, 35))\n  row.push((x, 36))\n  row.push((x,\
    \ 37))\n  row.push((x, 38))\n  row.push((x, 39))\n  row.push((x, 40))\n  row.push((x,\
    \ 41))\n  row.push((x, 42))\n  row.push((x, 43))\n  row.push((x, 44))\n  row.push((x,\
    \ 45))\n  row.push((x, 46))\n  row.push((x, 47))\n  row.push((x, 48))\n  row.push((x,\
    \ 49))\n  row.push((x, 50))\n  row.push((x, 51))\n  row.push((x, 52))\n  row.push((x,\
    \ 53))\n  row.push((x, 54))\n  row.push((x, 55))\n  row.push((x, 56))\n  row.push((x,\
    \ 57))\n  row.push((x, 58))\n  row.push((x, 59))\n  row.push((x, 60))\n  row.push((x,\
    \ 61))\n  row.push((x, 62))\n  row.push((x, 63))\n  row.push((x, 64))\n  ", " \
    \ lst.each do |row|\n    row.each do |item|\n      if item == x\n        return\
    \ [(row.index(item), row.size - 1)]\n      end\n    end\n  end\n  return []\n\
    end", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      if i == 0 && j == 0\n        coords = [(i, j)]\n      elsif i == 0 && j\
    \ != 0\n        coords = [(i, j), (i, j - 1)]\n      elsif i != 0 && j == 0\n\
    \        coords = [(i, j), (i - 1, j)]\n      elsif i == 0 && j == 0\n       \
    \ coords = [(i, j)]\n      else\n        coords = [(i, j), (i, j - 1)]\n     \
    \ end\n      coords.sort!\n      coords.reverse!\n      coords.each do |coord|\n\
    \        if coord == [x, y]\n          return coords\n        end\n      end\n\
    \    end\n  end\nend", "  row = []\n  row_coords = []\n  row_coords.each do |coord|\n\
    \    row << coord[1]\n  end\n  row_coords.each do |coord|\n    row << coord[0]\n\
    \  end\n  row.each do |coord|\n    if coord == x\n      return row_coords.map\
    \ { |coord| [coord, 0] }\n    end\n  end\nend", "  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\n       \
    \ coord = (i, j)\n      elsif row[j] == x\n        coord = (i, j)\n      end\n\
    \    end\n  end\n  coord.sort!\n  coord.reverse!\n  coord.each do |coord|\n  \
    \  coord.sort!\n  end\n  coord.each do |coord|\n    coord.reverse!\n  end\n  coord.each\
    \ do |coord|\n    coord.sort!\n  end\n  coord.each do |coord|\n    coord.reverse!\n\
    \  end\n  coord.each do |coord|\n    coord.sort!\n  end\n  coord.each do |coord|\n\
    \    coord.reverse!\n  end\n  coord.each do |coord|\n    coord.sort!\n  end\n\
    \  coord.each do |coord|\n    coord.reverse!\n  end\n  coord.each do |coord|\n\
    \    coord.sort!\n  end\n  coord.each do |coord|\n    coord.reverse!\n  end\n\
    \  coord.each do |coord|\n    coord.sort!\n  end\n  coord.each do |coord|\n  \
    \  coord.reverse!\n  end\n  coord.each do |coord|\n    coord.sort!\n  end\n  coord.each\
    \ do |coord|\n    coord.reverse!\n  end\n  coord.each do |coord|\n    coord.sort!\n\
    \  end\n  coord.each do |coord|\n    coord.reverse!\n  end\n  coord.each do |coord|\n\
    \    coord.sort!\n  end\n  coord.each do |coord|\n    coord.reverse!\n  end\n\
    \  coord.each do |coord|\n    coord.sort!\n  end\n  coord.each do |coord|\n  \
    \  coord.reverse!\n  end\n  coord.each do |coord|\n    coord.sort!\n  end\n  coord.each\
    \ do |coord|\n    coord.reverse!\n  end\n  coord.each do |coord|\n    coord.sort!\n\
    \  end\n  coord.each do |coord|\n    coord.reverse!\n  end\n  coord.each do |coord|\n\
    \    coord.sort!\n  end\n  coord.each do |coord|\n    coord.reverse!\n  end\n\
    \  coord.each do |coord|\n    coord.sort!\n  end\n  coord.each do |coord|\n  \
    \  coord.reverse!\n  end\n  coord.each do |coord|\n    coord", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == x && j == x\n\
    \        puts \"#{i}, #{j}\"\n      end\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        coords = [(i, j)]\n      elsif i == 0 && j != 0\n        coords = [(i,\
    \ j), (i, j - 1)]\n      elsif i != 0 && j == 0\n        coords = [(i, j), (i\
    \ - 1, j)]\n      elsif i != 0 && j != 0\n        coords = [(i, j), (i - 1, j),\
    \ (i, j - 1), (i, j - 1)]\n      end\n    end\n  end\nend", "  rows = []\n  rows.each\
    \ do |row|\n    row.each do |item|\n      if item == x\n        rows.push([row,\
    \ item])\n      end\n    end\n  end\n  rows.sort!\n  rows.reverse!\n  rows\nend",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 && j == 0\n        coordinates = [(i, j)]\n      elsif i == 0 && j !=\
    \ 0\n        coordinates = [(i, j), (i-1, j)]\n      elsif i != 0 && j == 0\n\
    \        coordinates = [(i, j), (i-1, j-1), (i-1, j)]\n      elsif i != 0 && j\
    \ != 0\n        coordinates = [(i, j), (i-1, j-1), (i-1, j), (i-1, j-1)]\n   \
    \   end\n      coordinates.sort!\n      coordinates.reverse!\n      coordinates.each\
    \ do |coordinate|\n        coordinate.sort!\n        coordinate.reverse!\n   \
    \   end\n    end\n  end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        coordinates = [(i, j)]\n   \
    \   elsif i == 0 && j != 0\n        coordinates = [(i, j), (i, j - 1)]\n     \
    \ elsif i != 0 && j == 0\n        coordinates = [(i, j), (i - 1, j)]\n      elsif\
    \ i == 0 && j == 0\n        coordinates = [(i, j)]\n      else\n        coordinates\
    \ = [(i, j), (i, j - 1)]\n      end\n      coordinates.sort!.reverse!\n      coordinates.each\
    \ do |coordinate|\n        coordinate.sort!.reverse!\n      end\n    end\n  end\n\
    end", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      if i == 0 && j == 0\n        coordinates = [(i, j)]\n      elsif i == 0\
    \ && j != 0\n        coordinates = [(i, j), (i, j - 1)]\n      elsif i != 0 &&\
    \ j == 0\n        coordinates = [(i, j), (i - 1, j)]\n      elsif i != 0 && j\
    \ != 0\n        coordinates = [(i, j), (i - 1, j - 1), (i, j - 1)]\n      end\n\
    \    end\n  end\nend", "  row = []\n  row.push((0,0))\n  row.push((1,0))\n  row.push((2,0))\n\
    \  row.push((3,0))\n  row.push((4,0))\n  row.push((5,0))\n  row.push((6,0))\n\
    \  row.push((0,1))\n  row.push((1,1))\n  row.push((2,1))\n  row.push((3,1))\n\
    \  row.push((4,1))\n  row.push((5,1))\n  row.push((6,1))\n  row.push((0,2))\n\
    \  row.push((1,2))\n  row.push((2,2))\n  row.push((3,2))\n  row.push((4,2))\n\
    \  row.push((5,2))\n  row.push((6,2))\n  row.push((0,3))\n  row.push((1,3))\n\
    \  row.push((2,3))\n  row.push((3,3))\n  row.push((4,3))\n  row.push((5,3))\n\
    \  row.push((6,3))\n  row.push((0,4))\n  row.push((1,4))\n  row.push((2,4))\n\
    \  row.push((3,4))\n  row.push((4,4))\n  row.push((5,4))\n  row.push((6,4))\n\
    \  row.push((0,5))\n  row.push((1,5))\n  row.push((2,5))\n  row.push((3,5))\n\
    \  row.push((4,5))\n  row.push((5,5))\n  row.push((6,5))\n  row.push((0,6))\n\
    \  row.push((1,6))\n  row.push((2,6))\n  row.push((3,6))\n  row.push((4,6))\n\
    \  row.push((5,6))\n  row.push((6,6))\n  row.push((0,7))\n  row.push((1,7))\n\
    \  row.push((2,7))\n  row.push((3,7))\n  row.push((4,7))\n  row.push((5,7))\n\
    \  row.push((6,7))\n  row.push((0,8))\n  row.push((1,8))\n  row.push((2,8))\n\
    \  row.push((3,8))\n  row.push((4,8))\n  row.push((5,8))\n  row.push((6,8))\n\
    \  row.push((0,9))\n  row.push((1,9))\n  row.push((2,9))\n  row.push((3,9))\n\
    \  row.push((4,9))\n  row.push((5,9))\n  row.push((6,9))\n  row.push((0,10))\n\
    \  row.push((", "  row = []\n  row.push((0, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 1))\n  row.push((x, 2))\n  row.push((x, 3))\n  row.push((x, 4))\n  row.push((x,\
    \ 5))\n  row.push((x, 6))\n  row.push((x, 7))\n  row.push((x, 8))\n  row.push((x,\
    \ 9))\n  row.push((x, 10))\n  row.push((x, 11))\n  row.push((x, 12))\n  row.push((x,\
    \ 13))\n  row.push((x, 14))\n  row.push((x, 15))\n  row.push((x, 16))\n  row.push((x,\
    \ 17))\n  row.push((x, 18))\n  row.push((x, 19))\n  row.push((x, 20))\n  row.push((x,\
    \ 21))\n  row.push((x, 22))\n  row.push((x, 23))\n  row.push((x, 24))\n  row.push((x,\
    \ 25))\n  row.push((x, 26))\n  row.push((x, 27))\n  row.push((x, 28))\n  row.push((x,\
    \ 29))\n  row.push((x, 30))\n  row.push((x, 31))\n  row.push((x, 32))\n  row.push((x,\
    \ 33))\n  row.push((x, 34))\n  row.push((x, 35))\n  row.push((x, 36))\n  row.push((x,\
    \ 37))\n  row.push((x, 38))\n  row.push((x, 39))\n  row.push((x, 40))\n  row.push((x,\
    \ 41))\n  row.push((x, 42))\n  row.push((x, 43))\n  row.push((x, 44))\n  row.push((x,\
    \ 45))\n  row.push((x, 46))\n  row.push((x, 47))\n  row.push((x, 48))\n  row.push((x,\
    \ 49))\n  row.push((x, 50))\n  row.push((x, 51))\n  row.push((x, 52))\n  row.push((x,\
    \ 53))\n  row.push((x, 54))\n  row.push((x, 55))\n  row.push((x, 56))\n  row.push((x,\
    \ 57))\n  row.push((x, 58))\n  row.push((x, 59))\n  row.push((x, 60))\n  row.push((x,\
    \ 61))\n  row.push((x, 62))\n  row.push((x, 63))\n  ", "  rows = []\n  rows.map!\
    \ do |row|\n    row.map! do |col|\n      col = col - x if col > x\n      col =\
    \ col + 1 if col < x\n      col = col if col == 0\n      col = col if col < 0\n\
    \      col = col if col > 0\n      col = col if col < 0\n      col = col if col\
    \ > 0\n      col = col if col < 0\n      col = col if col > 0\n      col = col\
    \ if col < 0\n      col = col if col > 0\n      col = col if col < 0\n      col\
    \ = col if col > 0\n      col = col if col < 0\n      col = col if col > 0\n \
    \     col = col if col < 0\n      col = col if col > 0\n      col = col if col\
    \ < 0\n      col = col if col > 0\n      col = col if col < 0\n      col = col\
    \ if col > 0\n      col = col if col < 0\n      col = col if col > 0\n      col\
    \ = col if col < 0\n      col = col if col > 0\n      col = col if col < 0\n \
    \     col = col if col > 0\n      col = col if col < 0\n      col = col if col\
    \ > 0\n      col = col if col < 0\n      col = col if col > 0\n      col = col\
    \ if col < 0\n      col = col if col > 0\n      col = col if col < 0\n      col\
    \ = col if col > 0\n      col = col if col < 0\n      col = col if col > 0\n \
    \     col = col if col < 0\n      col = col if col > 0\n      col = col if col\
    \ < 0\n      col = col if col > 0\n      col = col if col < 0\n      col = col\
    \ if col > 0\n      col = col if col < 0\n      col = col if col > 0\n      col\
    \ = col if col < 0\n      col = col if col > 0\n      col = col if col < 0\n \
    \     col = col if col > 0\n      col = col if col < 0\n      col = col if col\
    \ > 0\n      col = col if col < 0\n      col = col if col > 0\n      col = col\
    \ if col < 0\n      col = col if col > 0\n      col = col if col < 0\n      col\
    \ = col if col > 0\n      col = col if col < 0\n      col = col if col > 0\n \
    \     col = col if col < 0\n      col = col if col > 0\n      col = ", "  lst.sort!\n\
    \  result = []\n  i = 0\n  while i < lst.size\n    row = lst[i]\n    i += 1\n\
    \    row.sort!\n    row.each do |col|\n      result << [(i), col]\n    end\n \
    \ end\n  result.sort!\n  result.each do |coord|\n    coord.sort!\n  end\n  result\n\
    end", "  rows = []\n  row = []\n  for i in lst\n    row.push(i)\n    if row.size\
    \ == x\n      rows.push(row)\n      row = []\n  end\n  rows.sort!\n  rows.reverse!\n\
    \  rows.each do |row|\n    row.sort!\n    row.each do |i|\n      yield i\n   \
    \ end\n  end\nend", "  row = []\n  row.push(x)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)", "  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  l", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == j\n        puts\
    \ \"#{i} #{j}\"\n      end\n    end\n  end\nend", "  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == x && j == x\n       \
    \ coord = [i, j]\n        coord.sort!\n        coord.reverse!\n        coord.sort!\n\
    \        coord.reverse!\n        coord.sort!\n        coord.reverse!\n       \
    \ coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.reverse!\n\
    \        coord", "  row = []\n  row.push((0, x))\n  row.push((lst.size - 1, x))\n\
    \  row.push((lst.size - 1, lst.size - 1))\n  row.push((lst.size - 1, lst.size\
    \ - 2))\n  row.push((lst.size - 1, lst.size - 3))\n  row.push((lst.size - 1, lst.size\
    \ - 4))\n  row.push((lst.size - 1, lst.size - 5))\n  row.push((lst.size - 1, lst.size\
    \ - 6))\n  row.push((lst.size - 1, lst.size - 7))\n  row.push((lst.size - 1, lst.size\
    \ - 8))\n  row.push((lst.size - 1, lst.size - 9))\n  row.push((lst.size - 1, lst.size\
    \ - 10))\n  row.push((lst.size - 1, lst.size - 11))\n  row.push((lst.size - 1,\
    \ lst.size - 12))\n  row.push((lst.size - 1, lst.size - 13))\n  row.push((lst.size\
    \ - 1, lst.size - 14))\n  row.push((lst.size - 1, lst.size - 15))\n  row.push((lst.size\
    \ - 1, lst.size - 16))\n  row.push((lst.size - 1, lst.size - 17))\n  row.push((lst.size\
    \ - 1, lst.size - 18))\n  row.push((lst.size - 1, lst.size - 19))\n  row.push((lst.size\
    \ - 1, lst.size - 20))\n  row.push((lst.size - 1, lst.size - 21))\n  row.push((lst.size\
    \ - 1, lst.size - 22))\n  row.push((lst.size - 1, lst.size - 23))\n  row.push((lst.size\
    \ - 1, lst.size - 24))\n  row.push((lst.size - 1, lst.size - 25))\n  row.push((lst.size\
    \ - 1, lst.size - 26))\n  row.push((lst.size - 1, lst.size - 27))\n  row.push((lst.size\
    \ - 1, lst.size - 28))\n  row.push((lst.size - 1, lst.size - 29))\n  row.push((lst.size\
    \ - 1, lst.size - 30))\n  row.push((lst.size - 1, lst.size - 31))\n  row.push((lst.size\
    \ - 1, lst.size - 32))\n  row.push((lst.size - 1, lst.size - 33))\n  row.push((lst.size\
    \ - 1, lst.size - 34))\n  row.push((lst.size - 1, lst.size - 35))\n  row.push((lst.size\
    \ - 1, lst.size - 36", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0\n        coords = [(i, j)]\n      elsif i == 1\n\
    \        coords = [(i, j), (i, j - 1), (i - 1, j)]\n      elsif i == 2\n     \
    \   coords = [(i, j), (i, j - 1), (i - 1, j), (i, j - 2)]\n      elsif i == 3\n\
    \        coords = [(i, j), (i, j - 1), (i - 1, j), (i, j - 2), (i - 2, j)]\n \
    \     elsif i == 4\n        coords = [(i, j), (i, j - 1), (i - 1, j), (i, j -\
    \ 2), (i - 2, j), (i, j - 3)]\n      elsif i == 5\n        coords = [(i, j), (i,\
    \ j - 1), (i - 1, j), (i, j - 2), (i - 2, j), (i, j - 3), (i - 3, j)]\n      end\n\
    \    end\n  end\nend", "  lst.each do |row|\n    row.each do |i|\n      if i ==\
    \ x\n        return [(row.size - 1, row.size - 1)]\n      end\n    end\n  end\n\
    end", "  rows = []\n  rows.map! do |row|\n    row.map! do |column|\n      column\
    \ == x ? [row, x] : [row, column]\n    end\n  end\n  rows.sort! { |a, b| a[0]\
    \ <=> b[0] }\n  rows.sort! { |a, b| a[1] <=> b[1] }\n  rows\nend", "  rows = []\n\
    \  i = 0\n  while i < lst.size\n    if lst[i][0] == x\n      rows.push([i, lst[i][1]])\n\
    \      i += 1\n      while i < lst.size && lst[i][0] == x\n        rows.push([i,\
    \ lst[i][1]])\n        i += 1\n      break\n    i += 1\n  rows.sort!\n  rows.reverse!\n\
    \  cols = []\n  i = 0\n  while i < rows.size\n    cols.push([i, rows[i][1]])\n\
    \    i += 1\n  cols.sort!\n  cols.reverse!\n  rows.zip(cols).map { |x, y| [x,\
    \ y] }\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == 0 && j == 0\n        coords = [(i, j)]\n      elsif i == 0\
    \ && j != 0\n        coords = [(i, j), (0, j)]\n      elsif i != 0 && j == 0\n\
    \        coords = [(i, j), (0, j), (0, i)]\n      elsif i != 0 && j != 0\n   \
    \     coords = [(i, j), (0, j), (0, i), (i, j)]\n      end\n      coords.sort!\n\
    \      coords.reverse!\n      coords.each do |coord|\n        coord.sort!\n  \
    \    end\n    end\n  end\n  coords.each do |coord|\n    coord.sort!\n  end\n \
    \ coords.each do |coord|\n    coords.each do |coord|\n      coords.each do |coord|\n\
    \        coords.each do |coord|\n          coords.each do |coord|\n          \
    \  coords.each do |coord|\n              coords.each do |coord|\n            \
    \    coords.each do |coord|\n                  coords.each do |coord|\n      \
    \              coords.each do |coord|\n                      coords.each do |coord|\n\
    \                        coords.each do |coord|\n                          coords.each\
    \ do |coord|\n                            coords.each do |coord|\n           \
    \                   coords.each do |coord|\n                                coords.each\
    \ do |coord|\n                                  coords.each do |coord|\n     \
    \                               coords.each do |coord|\n                     \
    \                 coords.each do |coord|\n                                   \
    \     coords.each do |coord|\n                                          coords.each\
    \ do |coord|\n                                            coords.each do |coord|\n\
    \                                              coords.each do |coord|\n      \
    \                                          coords.each do |coord|\n          \
    \                                        coords.each do |coord|\n            \
    \                                        coords.each do |coord|\n            \
    \                                          coords.each do |coord|\n          \
    \                                              coords.each do |coord|\n      \
    \                                                    coords.each do |coord|\n\
    \                                                            coords.each do |coord|\n\
    \                                                              coords.each do\
    \ |coord|\n                                                                coords.each\
    \ do |coord|\n                                                               \
    \   coords.each do |coord|\n                                                 \
    \                   coords.each do |coord|\n                                 \
    \                                   coords.each do |coord|\n                 \
    \                                                     coords.each do |coord|\n\
    \                                                                        coords.each\
    \ do |coord|\n                                                               \
    \           coords.each do |coord|\n                                         \
    \                                   coords.each do |coord|\n                 \
    \                                                             coords.each do |coord|\n\
    \                                                                            \
    \    coords.each do |coord|\n                                                \
    \                                  coords.each do |coord|\n                  \
    \                                                                  coords.each\
    \ do |coord|\n                                                               \
    \                       coords.each do |coord|\n                             \
    \                                                           coords.each do |coord|\n\
    \                                                                            \
    \              coords.each do |coord|\n                                      \
    \                                                      coords.each do |coord|\n\
    \                                                                            \
    \                  coords.each do |coord|\n                                  \
    \                                                              coords.each do\
    \ |coord|\n                                                                  \
    \                                ", "  row = []\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([", "  row = []\n  for i in 0...lst.size\n    row << [(i + x, lst[i])]\n\
    \  end\n  row.sort!\n  row.sort!.reverse!\n  return row\nend", "  row = []\n \
    \ for i in 0...lst.length\n    if lst[i] === x\n      row << [(i)]\n    end\n\
    \  end\n  row.sort!\n  row.each do |i|\n    i.sort!\n  end\n  return row\nend",
  "  row = []\n  row.push((0,0))\n  row.push((1,0))\n  row.push((1,1))\n  row.push((2,0))\n\
    \  row.push((2,1))\n  row.push((2,2))\n  row.push((3,0))\n  row.push((3,1))\n\
    \  row.push((3,2))\n  row.push((3,3))\n  row.push((4,0))\n  row.push((4,1))\n\
    \  row.push((4,2))\n  row.push((4,3))\n  row.push((4,4))\n  row.push((4,5))\n\
    \  row.push((4,6))\n  row.push((4,7))\n  row.push((4,8))\n  row.push((4,9))\n\
    \  row.push((4,10))\n  row.push((4,11))\n  row.push((4,12))\n  row.push((4,13))\n\
    \  row.push((4,14))\n  row.push((4,15))\n  row.push((4,16))\n  row.push((4,17))\n\
    \  row.push((4,18))\n  row.push((4,19))\n  row.push((4,20))\n  row.push((4,21))\n\
    \  row.push((4,22))\n  row.push((4,23))\n  row.push((4,24))\n  row.push((4,25))\n\
    \  row.push((4,26))\n  row.push((4,27))\n  row.push((4,28))\n  row.push((4,29))\n\
    \  row.push((4,30))\n  row.push((4,31))\n  row.push((4,32))\n  row.push((4,33))\n\
    \  row.push((4,34))\n  row.push((4,35))\n  row.push((4,36))\n  row.push((4,37))\n\
    \  row.push((4,38))\n  row.push((4,39))\n  row.push((4,40))\n  row.push((4,41))\n\
    \  row.push((4,42))\n  row.push((4,43))\n  row.push((4,44))\n  row.push((4,45))\n\
    \  row.push((4,46))\n  row.push((4,47))\n  row.push((4,48))\n  row.push((4,49))\n\
    \  row.push((4,50))\n  row.push((4,51))\n  row.push((4,52))\n  row.push((4,53))\n\
    \  row.push((4,54))\n  row.push((4,55))\n  row.", "  row = []\n  row.push((0,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 1))\n  row.push((x, 2))\n  row.push((x,\
    \ 3))\n  row.push((x, 4))\n  row.push((x, 5))\n  row.push((x, 6))\n  row.push((x,\
    \ 7))\n  row.push((x, 8))\n  row.push((x, 9))\n  row.push((x, 10))\n  row.push((x,\
    \ 11))\n  row.push((x, 12))\n  row.push((x, 13))\n  row.push((x, 14))\n  row.push((x,\
    \ 15))\n  row.push((x, 16))\n  row.push((x, 17))\n  row.push((x, 18))\n  row.push((x,\
    \ 19))\n  row.push((x, 20))\n  row.push((x, 21))\n  row.push((x, 22))\n  row.push((x,\
    \ 23))\n  row.push((x, 24))\n  row.push((x, 25))\n  row.push((x, 26))\n  row.push((x,\
    \ 27))\n  row.push((x, 28))\n  row.push((x, 29))\n  row.push((x, 30))\n  row.push((x,\
    \ 31))\n  row.push((x, 32))\n  row.push((x, 33))\n  row.push((x, 34))\n  row.push((x,\
    \ 35))\n  row.push((x, 36))\n  row.push((x, 37))\n  row.push((x, 38))\n  row.push((x,\
    \ 39))\n  row.push((x, 40))\n  row.push((x, 41))\n  row.push((x, 42))\n  row.push((x,\
    \ 43))\n  row.push((x, 44))\n  row.push((x, 45))\n  row.push((x, 46))\n  row.push((x,\
    \ 47))\n  row.push((x, 48))\n  row.push((x, 49))\n  row.push((x, 50))\n  row.push((x,\
    \ 51))\n  row.push((x, 52))\n  row.push((x, 53))\n  row.push((x, 54))\n  row.push((x,\
    \ 55))\n  row.push((x, 56))\n  row.push((x, 57))\n  row.push((x, 58))\n  row.push((x,\
    \ 59))\n  row.push((x, 60))\n  row.push((x, 61))\n  row.push((x, 62))\n  row.push((x,\
    \ 63))\n  ", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == j\n        coord = (i, j)\n      end\n    end\n  end\n  coord.each_with_index\
    \ do |coord, index|\n    if index == 0\n      coord.each_with_index do |coord,\
    \ index|\n        if index == coord.first\n          coord.last.push x\n     \
    \   end\n      end\n    end\n  end\n  coord.sort_by! { |coord| coord.first }\n\
    \  coord.sort_by! { |coord| coord.last }\n  coord.map do |coord|\n    coord.map\
    \ { |i| [i, coord.last] }\n  end\nend", "  lst.each_with_index do |row, i|\n \
    \   row.each_with_index do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n\
    \      elsif i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j\
    \ == 0\n        row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|", "  lst.sort!\n  result = []\n  i =\
    \ 0\n  while i < lst.size\n    if lst[i][0] == x\n      result << [(i + 1, lst[i][1])]\n\
    \      i += 1\n      while i < lst.size && lst[i][0] == x\n        result << [(i\
    \ + 1, lst[i][1])]\n        i += 1\n      i += 1\n    end\n  end\n  result.sort!\n\
    \  result.reverse!\n  return result\nend", "  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      if i == 0\n        coords = []\n \
    \     else\n        coords = [(i, j)]\n      end\n      if j == row.length - 1\n\
    \        coords << coords[0]\n      end\n      if col == x\n        coords <<\
    \ coords[0]\n      end\n      coords.sort!\n      coords.reverse!\n      coords.sort!\n\
    \      coords.reverse!\n      coords.each do |coord|\n        yield coord\n  \
    \    end\n    end\n  end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == x && j == x\n        puts \"(#{i}, #{j})\"\n    \
    \  end\n    end\n  end\nend", "  row = []\n  row.push(x)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)", "  lst.each\
    \ do |row|\n    row.each do |elem|\n      return [elem.to_i, (row.index(elem)\
    \ + 1)] if elem == x\n    end\n  end\nend", "  lst.sort!\n  result = []\n  i =\
    \ 0\n  while i < lst.size\n    row = lst[i]\n    i += 1\n    row.sort!\n    row.each_with_index\
    \ do |col, j|\n      if col == x\n        result.push([i, j])\n      end\n   \
    \ end\n  end\n  result.sort!\n  result.map! {|t| [t.first, t.last]}\n  result\n\
    end", "  rows = []\n  row = []\n  for i in lst\n    row.push(i)\n    if row.size\
    \ == x\n      rows.push(row)\n      row = []\n  end\n  rows.sort!\n  rows.each\
    \ do |row|\n    row.sort!\n  end\n  rows\nend", "  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ coords = [(i, j)]\n      elsif i == 0 && j != 0\n        coords = [(i, j), (0,\
    \ j)]\n      elsif i != 0 && j == 0\n        coords = [(i, j), (0, j), (0, i)]\n\
    \      elsif i == 0 && j == 0\n        coords = [(i, j)]\n      else\n       \
    \ coords = [(i, j), (0, j), (0, i)]\n      end\n      coords.sort!\n      coords.reverse!\n\
    \      coords.sort!\n      coords.reverse!\n      coords.each do |coord|\n   \
    \     if coord[0] == x && coord[1] == 0\n          return coords\n        end\n\
    \      end\n    end\n  end\nend", "  row = []\n  row.push(x)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)", "  row\
    \ = []\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((", "  row = []\n  row.push(x)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)\n  row.push(lst.length)\n  row.push(0)\n\
    \  row.push(lst.length)\n  row.push(0)", "  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n        coordinates\
    \ = [(i, j)]\n      elsif i == 0 && j != 0\n        coordinates = [(i, j), (i,\
    \ j - 1)]\n      elsif i != 0 && j == 0\n        coordinates = [(i, j), (i - 1,\
    \ j)]\n      elsif i != 0 && j != 0\n        coordinates = [(i, j), (i - 1, j),\
    \ (i, j - 1), (i, j + 1)]\n      end\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0\n        coords\
    \ = []\n      else\n        coords = [(i, j)]\n      end\n      if j == (row.length\
    \ - 1)\n        coords.sort!.reverse\n      else\n        coords.sort!\n     \
    \ end\n      coords.each do |coord|\n        if coord == [x, y]\n          return\
    \ coords\n        end\n      end\n    end\n  end\n  return []\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        coord = [i, j]\n      elsif i == 0 && j != 0\n        coord = [i, j]\n\
    \      elsif i != 0 && j == 0\n        coord = [i, j]\n      elsif i != 0 && j\
    \ != 0\n        coord = [i, j]\n      end\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0\n        coords\
    \ = []\n      else\n        coords = [(i, j)]\n      end\n      if j == (row.length\
    \ - 1)\n        coords.sort!.reverse\n      end\n      coords.each do |coord|\n\
    \        if coord[0] == x\n          return coords\n        end\n      end\n \
    \   end\n  end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|", "  row = []\n  row.push((0,0))\n \
    \ row.push((1,0))\n  row.push((2,0))\n  row.push((3,0))\n  row.push((4,0))\n \
    \ row.push((5,0))\n  row.push((6,0))\n  row.push((0,1))\n  row.push((1,1))\n \
    \ row.push((2,1))\n  row.push((3,1))\n  row.push((4,1))\n  row.push((5,1))\n \
    \ row.push((6,1))\n  row.push((0,2))\n  row.push((1,2))\n  row.push((2,2))\n \
    \ row.push((3,2))\n  row.push((4,2))\n  row.push((5,2))\n  row.push((6,2))\n \
    \ row.push((0,3))\n  row.push((1,3))\n  row.push((2,3))\n  row.push((3,3))\n \
    \ row.push((4,3))\n  row.push((5,3))\n  row.push((6,3))\n  row.push((0,4))\n \
    \ row.push((1,4))\n  row.push((2,4))\n  row.push((3,4))\n  row.push((4,4))\n \
    \ row.push((5,4))\n  row.push((6,4))\n  row.push((0,5))\n  row.push((1,5))\n \
    \ row.push((2,5))\n  row.push((3,5))\n  row.push((4,5))\n  row.push((5,5))\n \
    \ row.push((6,5))\n  row.push((0,6))\n  row.push((1,6))\n  row.push((2,6))\n \
    \ row.push((3,6))\n  row.push((4,6))\n  row.push((5,6))\n  row.push((6,6))\n \
    \ row.push((0,7))\n  row.push((1,7))\n  row.push((2,7))\n  row.push((3,7))\n \
    \ row.push((4,7))\n  row.push((5,7))\n  row.push((6,7))\n  row.push((0,8))\n \
    \ row.push((1,8))\n  row.push((2,8))\n  row.push((3,8))\n  row.push((4,8))\n \
    \ row.push((5,8))\n  row.push((6,8))\n  row.push((0,9))\n  row.push((1,9))\n \
    \ row.push((2,9))\n  row.push((3,9))\n  row.push((4,9))\n  row.push((5,9))\n \
    \ row.push((6,9))\n  row.push((0,10))\n  row.push((", "  row = []\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 && j == 0\n        coordinates = [(i, j)]\n      elsif i == 0 && j !=\
    \ 0\n        coordinates = [(i, j), (0, j)]\n      elsif i != 0 && j == 0\n  \
    \      coordinates = [(i, j), (0, j), (0, i)]\n      elsif i != 0 && j != 0\n\
    \        coordinates = [(i, j), (0, j), (0, i), (i, j)]\n      end\n    end\n\
    \  end\nend", "  row = []\n  row.push((0,0))\n  row.push((1,0))\n  row.push((2,0))\n\
    \  row.push((3,0))\n  row.push((4,0))\n  row.push((5,0))\n  row.push((6,0))\n\
    \  row.push((7,0))\n  row.push((8,0))\n  row.push((9,0))\n  row.push((10,0))\n\
    \  row.push((11,0))\n  row.push((12,0))\n  row.push((13,0))\n  row.push((14,0))\n\
    \  row.push((15,0))\n  row.push((16,0))\n  row.push((17,0))\n  row.push((18,0))\n\
    \  row.push((19,0))\n  row.push((20,0))\n  row.push((21,0))\n  row.push((22,0))\n\
    \  row.push((23,0))\n  row.push((24,0))\n  row.push((25,0))\n  row.push((26,0))\n\
    \  row.push((27,0))\n  row.push((28,0))\n  row.push((29,0))\n  row.push((30,0))\n\
    \  row.push((31,0))\n  row.push((32,0))\n  row.push((33,0))\n  row.push((34,0))\n\
    \  row.push((35,0))\n  row.push((36,0))\n  row.push((37,0))\n  row.push((38,0))\n\
    \  row.push((39,0))\n  row.push((40,0))\n  row.push((41,0))\n  row.push((42,0))\n\
    \  row.push((43,0))\n  row.push((44,0))\n  row.push((45,0))\n  row.push((46,0))\n\
    \  row.push((47,0))\n  row.push((48,0))\n  row.push((49,0))\n  row.push((50,0))\n\
    \  row.push((51,0))\n  row.push((52,0))\n  row.push((53,0))\n  row.push((54,0))\n\
    \  row.push((55,0))\n  row.push((56,0))\n  row.push((57,0))\n  row.push((58,0))\n\
    \  row.push((59,0))\n  row.push((60,0))\n  row.push((61,0))\n  row.push((62,0))\n\
    \  row.push((63,0))\n  row.push((64,0))\n  row.push((65,0))\n  row.push((66,0))\n\
    \  row.push((67,0))\n  row.push((68,0))", "  row = []\n  for i in 0...lst.size\n\
    \    if lst[i] <= x\n      row.push(i)\n    end\n  end\n  row.sort!\n  row.sort!.reverse\n\
    \  result = []\n  for i in 0...row.size\n    result.push((row[i], i))\n  end\n\
    \  result.sort!\n  result.sort!.reverse\n  return result\nend", "  row = []\n\
    \  for i in 0..(lst.size - 1)\n    if lst[i] <= x\n      row.push(i)\n    end\n\
    \  end\n  row.sort!\n  row.sort!.reverse\n  return row\nend", "  row = []\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((",
  "  lst.each do |row|\n    row.each do |elem|\n      if elem == x\n        return\
    \ [(row.index(elem), row.index(elem) + 1)]\n      end\n    end\n  end\nend", " \
    \ lst.each do |row|\n    row.each do |item|\n      if item == x\n        return\
    \ [(row,0)]\n      end\n    end\n  end\n  return []\nend", "  row = []\n  for\
    \ i in 0...lst.size\n    row << [lst[i][x]]\n  end\n  row.sort!\n  row.sort!{|a,b|\
    \ b}\n  row\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 || j == 0\n        coord = (i, j)\n      else\n\
    \        coord = (i, j)\n      end\n      if coord == x\n        coord\n     \
    \ end\n    end\n  end\nend", "  row = 0\n  col = 0\n  result = []\n  while row\
    \ < lst.size\n    if lst[row][col] == x\n      result.push([row, col])\n     \
    \ row += 1\n      col = 0\n      while col < lst[row].size\n        if lst[row][col]\
    \ == x\n          result.push([row, col])\n          row += 1\n          col +=\
    \ 1\n          break\n        col += 1\n      row += 1\n      col -= 1\n     \
    \ break\n    row += 1\n    col += 1\n  end\n  result.sort!\n  result.sort!\n \
    \ result.reverse!\n  result\nend", "  rows = []\n  rows.map! do |row|\n    row.map!\
    \ do |col|\n      col == x ? [row, col] : [row, col]\n    end\n  end\n  rows.sort!\n\
    \  rows.reverse!\n  rows\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        coordinates = [(i, j)]\n   \
    \   elsif i == 0 && j != 0\n        coordinates = [(i, j), (i, j - 1)]\n     \
    \ elsif i != 0 && j == 0\n        coordinates = [(i, j), (i - 1, j)]\n      elsif\
    \ i == 0 && j == 0\n        coordinates = [(i, j)]\n      else\n        coordinates\
    \ = [(i, j), (i, j - 1)]\n      end\n      coordinates.sort!\n      coordinates.sort!\
    \ { |a, b| b[1] <=> a[1] }\n      coordinates.reverse!\n      coordinates.each\
    \ { |c| yield c }\n    end\n  end\nend", "  row = []\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push", "  lst.each do |row|\n    row.each do |elem|\n      if elem == x\n\
    \        return [(row.size - 1, row.size - 1)]\n      end\n    end\n  end\nend",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 || j == 0\n        coord = (i, j)\n      else\n        coord = (i, j)\n\
    \      end\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n     \
    \ coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.", "  lst.each_with_index do |row, i|\n   \
    \ row.each_with_index do |col, j|\n      if i == x && j == x\n        coord =\
    \ [i, j]\n      end\n    end\n  end\n  coord.sort!\n  coord.reverse!\n  coord.each\
    \ do |coord|\n    coord.sort!\n    coord.reverse!\n  end\n  coord\nend", "  lst.sort!\n\
    \  result = []\n  row = 0\n  while row < lst.size\n    row = row + 1\n    column\
    \ = 0\n    while column < lst.first.size\n      column = column + 1\n      if\
    \ lst.first[column] == x\n        result.push([row, column])\n      end\n    end\n\
    \  end\n  result.sort!\n  result.reverse!\n  return result\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        coord = [i, j]\n      elsif i == 0 && j != 0\n        coord = [i, j]\n\
    \      elsif i != 0 && j == 0\n        coord = [i, j]\n      elsif i != 0 && j\
    \ != 0\n        coord = [i, j]\n      end\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if col == x\n      \
    \  [i, j]\n      end\n    end\n  end\nend", "  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n        coords\
    \ = [i, j]\n      elsif i == 0 && j != 0\n        coords = [i, j-1]\n      elsif\
    \ i != 0 && j == 0\n        coords = [i-1, j]\n      elsif i != 0 && j != 0\n\
    \        coords = [i-1, j-1]\n      end\n    end\n  end\n  coords.sort!\n  coords.reverse!\n\
    \  coords.map do |coord|\n    row = coords.first\n    col = coords.last\n    row\
    \ = row * col\n    row = row + 1 if row < x\n    row = row - 1 if row > x\n  \
    \  [row, col]\n  end\nend", "  lst.each do |row|\n    row.each do |item|\n   \
    \   if item == x\n        return [(row.index(item), row.size - 1)]\n      end\n\
    \    end\n  end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |val, j|\n      if val == x\n        return [i, j]\n      end\n    end\n\
    \  end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == 0 && j == 0\n        coords = [(i, j)]\n      elsif i == 0\
    \ && j != 0\n        coords = [(i, j), (i, j - 1)]\n      elsif i != 0 && j ==\
    \ 0\n        coords = [(i, j), (i - 1, j)]\n      elsif i != 0 && j != 0\n   \
    \     coords = [(i, j), (i - 1, j), (i, j - 1), (i, j - 1)]\n      end\n     \
    \ coords.sort!\n      coords.reverse!\n      coords.each do |coord|\n        if\
    \ coord == [x, y]\n          coords << [coord[0], coord[1]]\n        end\n   \
    \   end\n    end\n  end\n  coords.sort!\n  coords.reverse!\n  coords.map do |coord|\n\
    \    coord\n  end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == j\n        next if i == 0\n        coord = (i, j)\n\
    \      end\n    end\n  end\n  coord\nend", "  rows = []\n  row = []\n  for i in\
    \ lst\n    row.push(i)\n    if row.count == x\n      rows.push(row)\n      row\
    \ = []\n  end\n  rows.sort!\n  rows.each do |row|\n    row.sort!\n  end\n  return\
    \ rows\nend", "  rows = []\n  rows.each do |row|\n    row.each do |column|\n \
    \     if column == x\n        rows.push([row, column])\n      end\n    end\n \
    \ end\n  rows.sort!\n  rows.reverse!\n  rows\nend", "  lst.each_with_index do\
    \ |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n \
    \       coords = [(i, j)]\n      elsif i == 0 && j != 0\n        coords = [(i,\
    \ j), (0, j)]\n      elsif i != 0 && j == 0\n        coords = [(i, j), (0, j),\
    \ (0, i)]\n      elsif i != 0 && j != 0\n        coords = [(i, j), (0, j), (0,\
    \ i), (0, i-1)]\n      end\n    end\n  end\nend", "  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ coords = [(i, j)]\n      elsif i == 0 && j != 0\n        coords = [(i, j), (i,\
    \ j - 1)]\n      elsif i != 0 && j == 0\n        coords = [(i, j), (i - 1, j)]\n\
    \      elsif i != 0 && j != 0\n        coords = [(i, j), (i - 1, j), (i, j - 1),\
    \ (i, j + 1)]\n      end\n      coords.sort_by! { |x, y| y }\n      coords.reverse!\n\
    \      coords.each do |coord|\n        coord.sort_by! { |x, y| x }\n      end\n\
    \    end\n  end\nend", "  row = []\n  row.push((0, 0))\n  row.push((lst.length,\
    \ 0))\n  row.push((lst.length, lst.length))\n  row.push((0, lst.length))\n  row.push((lst.length,\
    \ 0))\n  row.push((0, 0))\n  row.push((lst.length, 0))\n  row.push((lst.length,\
    \ lst.length))\n  row.push((lst.length, 0))\n  row.push((0, 0))\n  row.push((lst.length,\
    \ 0))\n  row.push((lst.length, lst.length))\n  row.push((lst.length, 0))\n  row.push((0,\
    \ 0))\n  row.push((lst.length, 0))\n  row.push((lst.length, lst.length))\n  row.push((lst.length,\
    \ 0))\n  row.push((0, 0))\n  row.push((lst.length, 0))\n  row.push((lst.length,\
    \ lst.length))\n  row.push((lst.length, 0))\n  row.push((0, 0))\n  row.push((lst.length,\
    \ 0))\n  row.push((lst.length, lst.length))\n  row.push((lst.length, 0))\n  row.push((0,\
    \ 0))\n  row.push((lst.length, 0))\n  row.push((lst.length, lst.length))\n  row.push((lst.length,\
    \ 0))\n  row.push((0, 0))\n  row.push((lst.length, 0))\n  row.push((lst.length,\
    \ lst.length))\n  row.push((lst.length, 0))\n  row.push((0, 0))\n  row.push((lst.length,\
    \ 0))\n  row.push((lst.length, lst.length))\n  row.push((lst.length, 0))\n  row.push((0,\
    \ 0))\n  row.push((lst.length, 0))\n  row.push((lst.length, lst.length))\n  row.push((lst.length,\
    \ 0))\n  row.push((0, 0))\n  row.push((lst.length, 0))\n  row.push((lst.length,\
    \ lst.length))\n  row.push((lst.length, 0))\n  row.push((0, 0))\n  row.push((lst.length,\
    \ 0))\n  row.push((lst.length, lst.length))\n  row.push((lst.length, 0))\n  row.push((0,\
    \ 0))\n  row.push((lst.length, 0))\n  row.push((lst.length, lst.length))\n  row.push((lst.length,\
    \ 0))\n  row.push((0, 0))\n  row.push((lst.length, 0))\n  row.push((lst.length,\
    \ lst.length))\n  row.push((", "  row = []\n  row.push((0, 0))\n  row.push((-1,\
    \ -1))\n  row.push((-1, 0))\n  row.push((-1, 1))\n  row.push((0, -1))\n  row.push((0,\
    \ 1))\n  row.push((1, -1))\n  row.push((1, 0))\n  row.push((1, 1))\n  row.push((2,\
    \ -1))\n  row.push((2, 0))\n  row.push((2, 1))\n  row.push((3, -1))\n  row.push((3,\
    \ 0))\n  row.push((3, 1))\n  row.push((4, -1))\n  row.push((4, 0))\n  row.push((4,\
    \ 1))\n  row.push((5, -1))\n  row.push((5, 0))\n  row.push((5, 1))\n  row.push((6,\
    \ -1))\n  row.push((6, 0))\n  row.push((6, 1))\n  row.push((7, -1))\n  row.push((7,\
    \ 0))\n  row.push((7, 1))\n  row.push((8, -1))\n  row.push((8, 0))\n  row.push((8,\
    \ 1))\n  row.push((9, -1))\n  row.push((9, 0))\n  row.push((9, 1))\n  row.push((10,\
    \ -1))\n  row.push((10, 0))\n  row.push((10, 1))\n  row.push((11, -1))\n  row.push((11,\
    \ 0))\n  row.push((11, 1))\n  row.push((12, -1))\n  row.push((12, 0))\n  row.push((12,\
    \ 1))\n  row.push((13, -1))\n  row.push((13, 0))\n  row.push((13, 1))\n  row.push((14,\
    \ -1))\n  row.push((14, 0))\n  row.push((14, 1))\n  row.push((15, -1))\n  row.push((15,\
    \ 0))\n  row.push((15, 1))\n  row.push((16, -1))\n  row.push((16, 0))\n  row.push((16,\
    \ 1))\n  row.push((17, -1))\n  row.push((17, 0))\n  row.push((17, 1))\n  row.push((18,\
    \ -1))\n  row.push((18, 0))\n  row.push((18, 1))\n  row.push((19, -1))\n  row.push((19,\
    \ 0))\n  row.push((19, 1))\n  row.push((20, -1))\n  row.push((20, 0))\n  row.push((20,\
    \ 1))\n  row.push((21, -1))\n  row.push((21, 0))\n  row.push((21, 1))\n  row.push((22,\
    \ -1))\n  row.push((22, 0))\n  row.push((22, 1))\n  row.push((23, -1))\n  row.push((23, ",
  "  row = []\n  row.push((0,0))\n  row.push((1,0))\n  row.push((1,1))\n  row.push((2,0))\n\
    \  row.push((2,1))\n  row.push((2,2))\n  row.push((3,0))\n  row.push((3,1))\n\
    \  row.push((3,2))\n  row.push((3,3))\n  row.push((4,0))\n  row.push((4,1))\n\
    \  row.push((4,2))\n  row.push((4,3))\n  row.push((4,4))\n  row.push((4,5))\n\
    \  row.push((4,6))\n  row.push((4,7))\n  row.push((4,8))\n  row.push((4,9))\n\
    \  row.push((4,10))\n  row.push((4,11))\n  row.push((4,12))\n  row.push((4,13))\n\
    \  row.push((4,14))\n  row.push((4,15))\n  row.push((4,16))\n  row.push((4,17))\n\
    \  row.push((4,18))\n  row.push((4,19))\n  row.push((4,20))\n  row.push((4,21))\n\
    \  row.push((4,22))\n  row.push((4,23))\n  row.push((4,24))\n  row.push((4,25))\n\
    \  row.push((4,26))\n  row.push((4,27))\n  row.push((4,28))\n  row.push((4,29))\n\
    \  row.push((4,30))\n  row.push((4,31))\n  row.push((4,32))\n  row.push((4,33))\n\
    \  row.push((4,34))\n  row.push((4,35))\n  row.push((4,36))\n  row.push((4,37))\n\
    \  row.push((4,38))\n  row.push((4,39))\n  row.push((4,40))\n  row.push((4,41))\n\
    \  row.push((4,42))\n  row.push((4,43))\n  row.push((4,44))\n  row.push((4,45))\n\
    \  row.push((4,46))\n  row.push((4,47))\n  row.push((4,48))\n  row.push((4,49))\n\
    \  row.push((4,50))\n  row.push((4,51))\n  row.push((4,52))\n  row.push((4,53))\n\
    \  row.push((4,54))\n  row.push((4,55))\n  row.", "  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0 || i == row.length\
    \ || j == row[0].length\n        puts \"#{i}, #{j}\"\n      end\n    end\n  end\n\
    end", "  lst.each do |row|\n    row.each do |elem|\n      return [elem.to_i, (row.index(elem)\
    \ + 1)] if elem == x\n    end\n  end\n  return []\nend", "  row = []\n  row.push(x)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)",
  "  row = []\n  row.push((0, 0))\n  row.push((x, 0))\n  row.push((x, 1))\n  row.push((x,\
    \ 2))\n  row.push((x, 3))\n  row.push((x, 4))\n  row.push((x, 5))\n  row.push((x,\
    \ 6))\n  row.push((x, 7))\n  row.push((x, 8))\n  row.push((x, 9))\n  row.push((x,\
    \ 10))\n  row.push((x, 11))\n  row.push((x, 12))\n  row.push((x, 13))\n  row.push((x,\
    \ 14))\n  row.push((x, 15))\n  row.push((x, 16))\n  row.push((x, 17))\n  row.push((x,\
    \ 18))\n  row.push((x, 19))\n  row.push((x, 20))\n  row.push((x, 21))\n  row.push((x,\
    \ 22))\n  row.push((x, 23))\n  row.push((x, 24))\n  row.push((x, 25))\n  row.push((x,\
    \ 26))\n  row.push((x, 27))\n  row.push((x, 28))\n  row.push((x, 29))\n  row.push((x,\
    \ 30))\n  row.push((x, 31))\n  row.push((x, 32))\n  row.push((x, 33))\n  row.push((x,\
    \ 34))\n  row.push((x, 35))\n  row.push((x, 36))\n  row.push((x, 37))\n  row.push((x,\
    \ 38))\n  row.push((x, 39))\n  row.push((x, 40))\n  row.push((x, 41))\n  row.push((x,\
    \ 42))\n  row.push((x, 43))\n  row.push((x, 44))\n  row.push((x, 45))\n  row.push((x,\
    \ 46))\n  row.push((x, 47))\n  row.push((x, 48))\n  row.push((x, 49))\n  row.push((x,\
    \ 50))\n  row.push((x, 51))\n  row.push((x, 52))\n  row.push((x, 53))\n  row.push((x,\
    \ 54))\n  row.push((x, 55))\n  row.push((x, 56))\n  row.push((x, 57))\n  row.push((x,\
    \ 58))\n  row.push((x, 59))\n  row.push((x, 60))\n  row.push((x, 61))\n  row.push((x,\
    \ 62))\n  row.push((x, 63))\n  ", "  row = []\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == x && j == x\n        return [i, j]\n      end\n    end\n \
    \ end\nend", "  row = []\n  row.push((0,0))\n  row.push((1,0))\n  row.push((2,0))\n\
    \  row.push((3,0))\n  row.push((4,0))\n  row.push((5,0))\n  row.push((6,0))\n\
    \  row.push((0,1))\n  row.push((1,1))\n  row.push((2,1))\n  row.push((3,1))\n\
    \  row.push((4,1))\n  row.push((5,1))\n  row.push((6,1))\n  row.push((0,2))\n\
    \  row.push((1,2))\n  row.push((2,2))\n  row.push((3,2))\n  row.push((4,2))\n\
    \  row.push((5,2))\n  row.push((6,2))\n  row.push((0,3))\n  row.push((1,3))\n\
    \  row.push((2,3))\n  row.push((3,3))\n  row.push((4,3))\n  row.push((5,3))\n\
    \  row.push((6,3))\n  row.push((0,4))\n  row.push((1,4))\n  row.push((2,4))\n\
    \  row.push((3,4))\n  row.push((4,4))\n  row.push((5,4))\n  row.push((6,4))\n\
    \  row.push((0,5))\n  row.push((1,5))\n  row.push((2,5))\n  row.push((3,5))\n\
    \  row.push((4,5))\n  row.push((5,5))\n  row.push((6,5))\n  row.push((0,6))\n\
    \  row.push((1,6))\n  row.push((2,6))\n  row.push((3,6))\n  row.push((4,6))\n\
    \  row.push((5,6))\n  row.push((6,6))\n  row.push((0,7))\n  row.push((1,7))\n\
    \  row.push((2,7))\n  row.push((3,7))\n  row.push((4,7))\n  row.push((5,7))\n\
    \  row.push((6,7))\n  row.push((0,8))\n  row.push((1,8))\n  row.push((2,8))\n\
    \  row.push((3,8))\n  row.push((4,8))\n  row.push((5,8))\n  row.push((6,8))\n\
    \  row.push((0,9))\n  row.push((1,9))\n  row.push((2,9))\n  row.push((3,9))\n\
    \  row.push((4,9))\n  row.push((5,9))\n  row.push((6,9))\n  row.push((0,10))\n\
    \  row.push((", "  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      if i == 0 && j == 0\n        coord = (i, j)\n      elsif i ==\
    \ 0 && j != 0\n        coord = (i, j)\n      elsif i != 0 && j == 0\n        coord\
    \ = (i, j)\n      elsif i != 0 && j != 0\n        coord = (i, j)\n      end\n\
    \    end\n  end\nend", "  lst.sort!\n  result = []\n  i = 0\n  while i < lst.size\n\
    \    row = lst[i]\n    i += 1\n    row.sort!\n    row.each_with_index do |col,\
    \ j|\n      if col == x\n        result.push([i, j])\n      end\n    end\n  end\n\
    \  result.sort!\n  result.map! {|i| [i[0], i[1]]}\n  result\nend", "  rows = []\n\
    \  for i in 0...lst.size\n    if lst[i][0] == x\n      rows.push([i, lst[i][1]])\n\
    \    end\n  end\n  rows.sort!\n  rows.reverse!\n  cols = []\n  for i in 0...rows.size\n\
    \    cols.push([rows[i][0], rows[i][1]])\n  end\n  cols.sort!\n  cols.reverse!\n\
    \  for i in 0...cols.size\n    yield(cols[i][0], cols[i][1])\n  end\nend", " \
    \ rows = []\n  for i in 0...lst.size\n    row = lst[i]\n    if row.include?(x)\n\
    \      rows.push([i, row.index(x)])\n    end\n  end\n  rows.sort!\n  rows.reverse!\n\
    \  rows.each do |row|\n    row.sort!\n    row.reverse!\n  end\n  return rows\n\
    end", "  row = []\n  for i in 0...lst.size\n    if lst[i][0] == x\n      row <<\
    \ [lst[i][1], lst[i][2]]\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  return row\nend", "  row = []\n  row.push((0, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 1))\n  row.push((x, 2))\n  row.push((x, 3))\n  row.push((x, 4))\n  row.push((x,\
    \ 5))\n  row.push((x, 6))\n  row.push((x, 7))\n  row.push((x, 8))\n  row.push((x,\
    \ 9))\n  row.push((x, 10))\n  row.push((x, 11))\n  row.push((x, 12))\n  row.push((x,\
    \ 13))\n  row.push((x, 14))\n  row.push((x, 15))\n  row.push((x, 16))\n  row.push((x,\
    \ 17))\n  row.push((x, 18))\n  row.push((x, 19))\n  row.push((x, 20))\n  row.push((x,\
    \ 21))\n  row.push((x, 22))\n  row.push((x, 23))\n  row.push((x, 24))\n  row.push((x,\
    \ 25))\n  row.push((x, 26))\n  row.push((x, 27))\n  row.push((x, 28))\n  row.push((x,\
    \ 29))\n  row.push((x, 30))\n  row.push((x, 31))\n  row.push((x, 32))\n  row.push((x,\
    \ 33))\n  row.push((x, 34))\n  row.push((x, 35))\n  row.push((x, 36))\n  row.push((x,\
    \ 37))\n  row.push((x, 38))\n  row.push((x, 39))\n  row.push((x, 40))\n  row.push((x,\
    \ 41))\n  row.push((x, 42))\n  row.push((x, 43))\n  row.push((x, 44))\n  row.push((x,\
    \ 45))\n  row.push((x, 46))\n  row.push((x, 47))\n  row.push((x, 48))\n  row.push((x,\
    \ 49))\n  row.push((x, 50))\n  row.push((x, 51))\n  row.push((x, 52))\n  row.push((x,\
    \ 53))\n  row.push((x, 54))\n  row.push((x, 55))\n  row.push((x, 56))\n  row.push((x,\
    \ 57))\n  row.push((x, 58))\n  row.push((x, 59))\n  row.push((x, 60))\n  row.push((x,\
    \ 61))\n  row.push((x, 62))\n  row.push((x, 63))\n  ", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\n\
    \        coord = [i, j]\n      else\n        coord = [i, j] if row[j] == x\n \
    \     end\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 || j == 0\n        coord = (i, j)\n      else\n        coord = (i, j)\n\
    \      end\n      coord.each do |coord|\n        if coord == x\n          coord.each\
    \ do |coord|\n            coord.each do |coord|\n              coord.each do |coord|\n\
    \                coord.each do |coord|\n                  coord.each do |coord|\n\
    \                    coord.each do |coord|\n                      coord.each do\
    \ |coord|\n                        coord.each do |coord|\n                   \
    \       coord.each do |coord|\n                            coord.each do |coord|\n\
    \                              coord.each do |coord|\n                       \
    \         coord.each do |coord|\n                                  coord.each\
    \ do |coord|\n                                    coord.each do |coord|\n    \
    \                                  coord.each do |coord|\n                   \
    \                     coord.each do |coord|\n                                \
    \          coord.each do |coord|\n                                           \
    \ coord.each do |coord|\n                                              coord.each\
    \ do |coord|\n                                                coord.each do |coord|\n\
    \                                                  coord.each do |coord|\n   \
    \                                                 coord.each do |coord|\n    \
    \                                                  coord.each do |coord|\n   \
    \                                                     coord.each do |coord|\n\
    \                                                          coord.each do |coord|\n\
    \                                                            coord.each do |coord|\n\
    \                                                              coord.each do |coord|\n\
    \                                                                coord.each do\
    \ |coord|\n                                                                  coord.each\
    \ do |coord|\n                                                               \
    \     coord.each do |coord|\n                                                \
    \                    coord.each do |coord|\n                                 \
    \                                   coord.each do |coord|\n                  \
    \                                                  coord.each do |coord|\n   \
    \                                                                 coord.each do\
    \ |coord|\n                                                                  \
    \  coord.each do |coord|\n                                                   \
    \                 coord.each do |coord|\n                                    \
    \                                coord.each do |coord|\n                     \
    \                                               coord.each do |coord|\n      \
    \                                                              coord.each do |coord|\n\
    \                                                                    coord.each\
    \ do |coord|\n                                                               \
    \     coord.each do |coord|\n                                                \
    \                    coord.each do |coord|\n                                 \
    \                                   coord.each do |coord|\n                  \
    \                                                  coord.each do |coord|\n   \
    \                                                                 coord.each do\
    \ |coord|\n                                                                  \
    \  coord.each do |coord|\n                                                   \
    \                 coord.each do |coord|\n                                    \
    \                                coord.each do |coord|\n                     \
    \                                               coord.each do |coord|\n      \
    \                                                              coord.each do |coord|\n\
    \                                                                    coord.each\
    \ do |coord|\n                                                               \
    \     coord.each do |coord|\n                                                \
    \                    coord.each do |coord|\n                                 \
    \                                   coord.", "  row = []\n  row.push((x, 0))\n\
    \  row.push((x, 1))\n  row.push((x, 2))\n  row.push((x, 3))\n  row.push((x, 4))\n\
    \  row.push((x, 5))\n  row.push((x, 6))\n  row.push((x, 7))\n  row.push((x, 8))\n\
    \  row.push((x, 9))\n  row.push((x, 10))\n  row.push((x, 11))\n  row.push((x,\
    \ 12))\n  row.push((x, 13))\n  row.push((x, 14))\n  row.push((x, 15))\n  row.push((x,\
    \ 16))\n  row.push((x, 17))\n  row.push((x, 18))\n  row.push((x, 19))\n  row.push((x,\
    \ 20))\n  row.push((x, 21))\n  row.push((x, 22))\n  row.push((x, 23))\n  row.push((x,\
    \ 24))\n  row.push((x, 25))\n  row.push((x, 26))\n  row.push((x, 27))\n  row.push((x,\
    \ 28))\n  row.push((x, 29))\n  row.push((x, 30))\n  row.push((x, 31))\n  row.push((x,\
    \ 32))\n  row.push((x, 33))\n  row.push((x, 34))\n  row.push((x, 35))\n  row.push((x,\
    \ 36))\n  row.push((x, 37))\n  row.push((x, 38))\n  row.push((x, 39))\n  row.push((x,\
    \ 40))\n  row.push((x, 41))\n  row.push((x, 42))\n  row.push((x, 43))\n  row.push((x,\
    \ 44))\n  row.push((x, 45))\n  row.push((x, 46))\n  row.push((x, 47))\n  row.push((x,\
    \ 48))\n  row.push((x, 49))\n  row.push((x, 50))\n  row.push((x, 51))\n  row.push((x,\
    \ 52))\n  row.push((x, 53))\n  row.push((x, 54))\n  row.push((x, 55))\n  row.push((x,\
    \ 56))\n  row.push((x, 57))\n  row.push((x, 58))\n  row.push((x, 59))\n  row.push((x,\
    \ 60))\n  row.push((x, 61))\n  row.push((x, 62))\n  row.push((x, 63))\n  row.push((x,\
    \ 64))\n  ", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == 0 && j == 0\n        coords = [(i, j)]\n      elsif i == 0\
    \ && j != 0\n        coords = [(i, j), (i, j - 1)]\n      elsif i != 0 && j ==\
    \ 0\n        coords = [(i, j), (i - 1, j)]\n      elsif i == 0 && j == 0\n   \
    \     coords = [(i, j)]\n      else\n        coords = [(i, j), (i, j - 1)]\n \
    \     end\n      coords.sort!\n      coords.reverse!\n      coords.each do |coord|\n\
    \        coord.sort!\n      end\n    end\n  end\nend", "  row = []\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n\
    \  row.push((0,0))\n  row.push((0,0))\n  row.push((0,0))\n  row.push((", "  row\
    \ = []\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if col == x\n        return [i, j]\n      end\n    end\n\
    \  end\nend", "  row = []\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((", "  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n        coords\
    \ = [(i, j)]\n      elsif i == 0 && j != 0\n        coords = [(i, j), (i, j -\
    \ 1)]\n      elsif i != 0 && j == 0\n        coords = [(i, j), (i - 1, j)]\n \
    \     elsif i == 0 && j == 0\n        coords = [(i, j)]\n      else\n        coords\
    \ = [(i, j), (i, j - 1)]\n      end\n      coords.sort!\n      coords.reverse!\n\
    \      coords.each do |coord|\n        if coord[0] == x && coord[1] < coord[1]\n\
    \          coords.delete(coord)\n        end\n      end\n      coords.sort!\n\
    \      coords.reverse!\n      coords.each do |coord|\n        if coord[1] == x\
    \ && coord[0] < coord[0]\n          coords.delete(coord)\n        end\n      end\n\
    \      coords.each do |coord|\n        coords.unshift(coord)\n      end\n    end\n\
    \  end\nend", "  row = []\n  row.push((0,0))\n  row.push((1,0))\n  row.push((1,1))\n\
    \  row.push((2,0))\n  row.push((2,1))\n  row.push((2,2))\n  row.push((2,3))\n\
    \  row.push((2,4))\n  row.push((2,5))\n  row.push((2,6))\n  row.push((2,7))\n\
    \  row.push((2,8))\n  row.push((2,9))\n  row.push((2,10))\n  row.push((2,11))\n\
    \  row.push((2,12))\n  row.push((2,13))\n  row.push((2,14))\n  row.push((2,15))\n\
    \  row.push((2,16))\n  row.push((2,17))\n  row.push((2,18))\n  row.push((2,19))\n\
    \  row.push((2,20))\n  row.push((2,21))\n  row.push((2,22))\n  row.push((2,23))\n\
    \  row.push((2,24))\n  row.push((2,25))\n  row.push((2,26))\n  row.push((2,27))\n\
    \  row.push((2,28))\n  row.push((2,29))\n  row.push((2,30))\n  row.push((2,31))\n\
    \  row.push((2,32))\n  row.push((2,33))\n  row.push((2,34))\n  row.push((2,35))\n\
    \  row.push((2,36))\n  row.push((2,37))\n  row.push((2,38))\n  row.push((2,39))\n\
    \  row.push((2,40))\n  row.push((2,41))\n  row.push((2,42))\n  row.push((2,43))\n\
    \  row.push((2,44))\n  row.push((2,45))\n  row.push((2,46))\n  row.push((2,47))\n\
    \  row.push((2,48))\n  row.push((2,49))\n  row.push((2,50))\n  row.push((2,51))\n\
    \  row.push((2,52))\n  row.push((2,53))\n  row.push((2,54))\n  row.push((2,55))\n\
    \  row.push((2,56))\n  row.push((2,57))\n  row.push((2,58))\n  row.push((2,59))\n\
    \  row.push((2,60))\n  row.push((2,61))\n  row.push", "  lst.each_with_index do\
    \ |row, i|\n    row.each_with_index do |col, j|\n      if i == j\n        next\
    \ if i == 0\n        coord = (i, j)\n      else\n        coord = (i, j)\n    \
    \  end\n      break if coord == x\n    end\n  end\n  coord\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        coords = [i, j]\n      elsif i == 0 && j != 0\n        coords = [i, j-1]\n\
    \      elsif i != 0 && j == 0\n        coords = [i-1, j]\n      elsif i != 0 &&\
    \ j != 0\n        coords = [i-1, j-1]\n      end\n    end\n  end\n  coords.sort!\n\
    \  coords.reverse!\n  coords.map { |coord| [coord.first, coord.last] }\nend",
  "  rows = []\n  row = []\n  for i in 0...lst.length\n    if lst[i] > x\n      row\
    \ << i\n      rows << row\n      row = []\n    else\n      row << i\n    end\n\
    \  end\n  rows << row\n  rows.sort!\n  rows.each do |row|\n    row.sort!\n  end\n\
    \  rows\nend", "  row = []\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n\
    \  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([x])\n  row.push([",
  "  row = []\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((", "  lst.sort!\n  result = []\n  i = 0\n  while i < lst.size\n\
    \    if lst[i][0] == x\n      result << [(i + 1, lst[i][1])]\n      i += 1\n \
    \     while i < lst.size && lst[i][0] == x\n        i += 1\n      i += 1\n   \
    \ end\n  end\n  result.sort!\n  result.reverse!\n  result\nend", "  lst.each do\
    \ |row|\n    row.each do |elem|\n      if elem == x\n        return [(row.index(elem),\
    \ row.index(elem) + 1)]\n      end\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\n\
    \        coord = [i, j]\n      else\n        coord = [i, j] if row[j] == x\n \
    \     end\n    end\n    coord.reverse!\n    coord.sort!\n    coord.sort!.reverse!\n\
    \    coord.each do |coord|\n      coord.each do |coord|\n        coords << coord\n\
    \      end\n    end\n  end\n  coords.sort!\n  coords.sort!.reverse!\n  coords.each\
    \ do |coord|\n    coords.each do |coord|\n      coords << coord\n    end\n  end\n\
    \  return coords\nend", "  rows = []\n  i = 0\n  while i < lst.size\n    if lst[i][0]\
    \ == x\n      rows.push([i, lst[i][1]])\n      i += 1\n      while i < lst.size\
    \ and lst[i][0] == x\n        rows.push([i, lst[i][1]])\n        i += 1\n    \
    \  break\n    i += 1\n  rows.sort!\n  rows.reverse!\n  cols = []\n  i = 0\n  while\
    \ i < rows.size\n    cols.push([i, rows[i][1]])\n    i += 1\n  cols.sort!\n  cols.reverse!\n\
    \  rows.zip(cols).map { |x, y| [x, y] }\nend", "  row = []\n  row.push((x, 0))\n\
    \  row.push((x, 1))\n  row.push((x, 2))\n  row.push((x, 3))\n  row.push((x, 4))\n\
    \  row.push((x, 5))\n  row.push((x, 6))\n  row.push((x, 7))\n  row.push((x, 8))\n\
    \  row.push((x, 9))\n  row.push((x, 10))\n  row.push((x, 11))\n  row.push((x,\
    \ 12))\n  row.push((x, 13))\n  row.push((x, 14))\n  row.push((x, 15))\n  row.push((x,\
    \ 16))\n  row.push((x, 17))\n  row.push((x, 18))\n  row.push((x, 19))\n  row.push((x,\
    \ 20))\n  row.push((x, 21))\n  row.push((x, 22))\n  row.push((x, 23))\n  row.push((x,\
    \ 24))\n  row.push((x, 25))\n  row.push((x, 26))\n  row.push((x, 27))\n  row.push((x,\
    \ 28))\n  row.push((x, 29))\n  row.push((x, 30))\n  row.push((x, 31))\n  row.push((x,\
    \ 32))\n  row.push((x, 33))\n  row.push((x, 34))\n  row.push((x, 35))\n  row.push((x,\
    \ 36))\n  row.push((x, 37))\n  row.push((x, 38))\n  row.push((x, 39))\n  row.push((x,\
    \ 40))\n  row.push((x, 41))\n  row.push((x, 42))\n  row.push((x, 43))\n  row.push((x,\
    \ 44))\n  row.push((x, 45))\n  row.push((x, 46))\n  row.push((x, 47))\n  row.push((x,\
    \ 48))\n  row.push((x, 49))\n  row.push((x, 50))\n  row.push((x, 51))\n  row.push((x,\
    \ 52))\n  row.push((x, 53))\n  row.push((x, 54))\n  row.push((x, 55))\n  row.push((x,\
    \ 56))\n  row.push((x, 57))\n  row.push((x, 58))\n  row.push((x, 59))\n  row.push((x,\
    \ 60))\n  row.push((x, 61))\n  row.push((x, 62))\n  row.push((x, 63))\n  row.push((x,\
    \ 64))\n  ", "  lst.each do |row|\n    row.each do |num|\n      if num == x\n\
    \        return [(row.index(num), row.index(num) + 1)]\n      end\n    end\n \
    \ end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == 0 && j == 0\n        coord = (i, j)\n      elsif i == 0 &&\
    \ j != 0\n        coord = (i, j)\n      elsif i != 0 && j == 0\n        coord\
    \ = (i, j)\n      elsif i != 0 && j != 0\n        coord = (i, j)\n      end\n\
    \    end\n  end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        coordinate = [i, j]\n      elsif\
    \ i == 0 && j != 0\n        coordinate = [i, j]\n      elsif i != 0 && j == 0\n\
    \        coordinate = [i, j]\n      elsif i == 0 && j == 0\n        coordinate\
    \ = [i, j]\n      else\n        coordinate = [i, j]\n      end\n    end\n  end\n\
    end", "  rows = []\n  for i in 0...lst.size\n    row = []\n    for j in 0...lst[i].size\n\
    \      if lst[i][j] == x\n        row = [(i, j)]\n        break\n    end\n   \
    \ rows.push(row)\n  end\n  rows.sort!\n  rows.reverse!\n  rows.each do |row|\n\
    \    row.sort!\n    row.reverse!\n  end\n  return rows\nend", "  row = []\n  row.push((0,0))\n\
    \  row.push((1,0))\n  row.push((2,0))\n  row.push((3,0))\n  row.push((4,0))\n\
    \  row.push((5,0))\n  row.push((6,0))\n  row.push((7,0))\n  row.push((8,0))\n\
    \  row.push((9,0))\n  row.push((10,0))\n  row.push((11,0))\n  row.push((12,0))\n\
    \  row.push((13,0))\n  row.push((14,0))\n  row.push((15,0))\n  row.push((16,0))\n\
    \  row.push((17,0))\n  row.push((18,0))\n  row.push((19,0))\n  row.push((20,0))\n\
    \  row.push((21,0))\n  row.push((22,0))\n  row.push((23,0))\n  row.push((24,0))\n\
    \  row.push((25,0))\n  row.push((26,0))\n  row.push((27,0))\n  row.push((28,0))\n\
    \  row.push((29,0))\n  row.push((30,0))\n  row.push((31,0))\n  row.push((32,0))\n\
    \  row.push((33,0))\n  row.push((34,0))\n  row.push((35,0))\n  row.push((36,0))\n\
    \  row.push((37,0))\n  row.push((38,0))\n  row.push((39,0))\n  row.push((40,0))\n\
    \  row.push((41,0))\n  row.push((42,0))\n  row.push((43,0))\n  row.push((44,0))\n\
    \  row.push((45,0))\n  row.push((46,0))\n  row.push((47,0))\n  row.push((48,0))\n\
    \  row.push((49,0))\n  row.push((50,0))\n  row.push((51,0))\n  row.push((52,0))\n\
    \  row.push((53,0))\n  row.push((54,0))\n  row.push((55,0))\n  row.push((56,0))\n\
    \  row.push((57,0))\n  row.push((58,0))\n  row.push((59,0))\n  row.push((60,0))\n\
    \  row.push((61,0))\n  row.push((62,0))\n  row.push((63,0))\n  row.push((64,0))\n\
    \  row.push((65,0))\n  row.push((66,0))\n  row.push((67,0))\n  row.push((68,0))",
  "  lst.sort!\n  result = []\n  row = 0\n  while row < lst.size\n    column = 0\n\
    \    while column < lst[row].size\n      if lst[row][column] == x\n        result.push([row,\
    \ column])\n      column += 1\n    row += 1\n  end\n  result.sort!\n  result.reverse!\n\
    \  result\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      if i == 0 && j == 0\n        coord = (i, j)\n      elsif i ==\
    \ 0 && j != 0\n        coord = (i, j)\n      elsif j == 0 && i != 0\n        coord\
    \ = (i, j)\n      elsif i == 0 && j == 0\n        coord = (i, j)\n      elsif\
    \ i == 0 && j == 0\n        coord = (i, j)\n      elsif i == 0 && j == 0\n   \
    \     coord = (i, j)\n      elsif i == 0 && j == 0\n        coord = (i, j)\n \
    \     elsif i == 0 && j == 0\n        coord = (i, j)\n      elsif i == 0 && j\
    \ == 0\n        coord = (i, j)\n      elsif i == 0 && j == 0\n        coord =\
    \ (i, j)\n      elsif i == 0 && j == 0\n        coord = (i, j)\n      elsif i\
    \ == 0 && j == 0\n        coord = (i, j)\n      elsif i == 0 && j == 0\n     \
    \   coord = (i, j)\n      elsif i == 0 && j == 0\n        coord = (i, j)\n   \
    \   elsif i == 0 && j == 0\n        coord = (i, j)\n      elsif i == 0 && j ==\
    \ 0\n        coord = (i, j)\n      elsif i == 0 && j == 0\n        coord = (i,\
    \ j)\n      elsif i == 0 && j == 0\n        coord = (i, j)\n      elsif i == 0\
    \ && j == 0\n        coord = (i, j)\n      elsif i == 0 && j == 0\n        coord\
    \ = (i, j)\n      elsif i == 0 && j == 0\n        coord = (i, j)\n      elsif\
    \ i == 0 && j == 0\n        coord = (i, j)\n      elsif i == 0 && j == 0\n   \
    \     coord = (i, j)\n      elsif i == 0 && j == 0\n        coord = (i, j)\n \
    \     elsif i == 0 && j == 0\n        coord = (i, j)\n      elsif i == 0 && j\
    \ == 0\n        coord = (i, j)\n      elsif i == 0 && j == 0\n        coord =\
    \ (i, j)\n      elsif i == 0 && j == 0\n        coord = (i, j)\n      elsif i\
    \ == 0 && j == 0\n        coord = (i, j)\n      elsif i == 0 && j == 0\n     \
    \   coord = (i, j)\n      elsif i == 0 && j == 0\n        coord = (i, j)\n   \
    \   elsif i == 0 && j == 0\n        coord = (i, j)\n      elsif i == 0 && j ==\
    \ 0\n        ", "  lst.each do |row|\n    row.each do |item|\n      return [item,\
    \ x] if item == x\n    end\n  end\nend", "  row = 0\n  column = 0\n  result =\
    \ []\n  while row < lst.count\n    column = column + 1\n    if lst[row][column]\
    \ == x\n      result.push([row, column])\n      row = row + 1\n      column =\
    \ 0\n    end\n  end\n  result.sort!\n  result.sort!{|a, b| b[1] <=> a[1]}\n  result.reverse!\n\
    \  return result\nend", "  lst.each do |row|\n    row.each do |elem|\n      if\
    \ elem == x\n        coord = row.index(elem)\n        coord.reverse!\n       \
    \ coord.each do |i|\n          coord[i] = coord[i].to_i\n        end\n       \
    \ coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.each\
    \ do |i|\n          coord[i] = coord[i].to_i\n        end\n        coord.sort!\n\
    \        coord.reverse!\n        coord.sort!\n        coord.each do |i|\n    \
    \      coord[i] = coord[i].to_i\n        end\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.each do |i|\n          coord[i] = coord[i].to_i\n\
    \        end\n        coord.sort!\n        coord.reverse!\n        coord.sort!\n\
    \        coord.each do |i|\n          coord[i] = coord[i].to_i\n        end\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.each\
    \ do |i|\n          coord[i] = coord[i].to_i\n        end\n        coord.sort!\n\
    \        coord.reverse!\n        coord.sort!\n        coord.each do |i|\n    \
    \      coord[i] = coord[i].to_i\n        end\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.each do |i|\n          coord[i] = coord[i].to_i\n\
    \        end\n        coord.sort!\n        coord.reverse!\n        coord.sort!\n\
    \        coord.each do |i|\n          coord[i] = coord[i].to_i\n        end\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.each\
    \ do |i|\n          coord[i] = coord[i].to_i\n        end\n        coord.sort!\n\
    \        coord.reverse!\n        coord.sort!\n        coord.each do |i|\n    \
    \      coord[i] = coord[i].to_i\n        end\n        coord.sort!\n        coord.reverse!\n\
    \        coord.sort!\n        coord.each do |i|\n          coord[i] = coord[i].to_i\n\
    \        end\n        coord.sort!\n        coord.reverse!\n        coord.sort!\n\
    \        coord.each do |i|\n          coord[i] = coord[i].to_i\n        end\n\
    \        coord.sort!\n        coord.reverse!\n        coord.sort!\n        coord.each\
    \ do |i|\n          coord[i] = coord[i].to_i\n        end\n        coord.sort!\n",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 && j == 0\n        coords = [(i, j)]\n      elsif i == 0 && j != 0\n\
    \        coords = [(i, j), (0, j)]\n      elsif i != 0 && j == 0\n        coords\
    \ = [(i, j), (0, j), (0, i)]\n      elsif i != 0 && j != 0\n        coords = [(i,\
    \ j), (0, j), (0, i), (0, i-1)]\n      end\n    end\n  end\nend", "  rows = []\n\
    \  for i in 0...(lst.size - 1)\n    row = lst[i]\n    if row.include?(x)\n   \
    \   rows.push([i, row.index(x)])\n    end\n  end\n  rows.sort!\n  rows.reverse!\n\
    \  rows.each do |row|\n    row.sort!\n  end\n  return rows\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        coords = [(i, j)]\n      elsif i == 0 && j != 0\n        coords = [(i,\
    \ j), (i, j - 1)]\n      elsif i != 0 && j == 0\n        coords = [(i, j), (i\
    \ - 1, j)]\n      elsif i != 0 && j != 0\n        coords = [(i, j), (i - 1, j\
    \ - 1), (i, j - 1)]\n      end\n    end\n  end\nend", "  lst.each do |row|\n \
    \   row.each do |elem|\n      if elem == x\n        return [(row.index(elem),\
    \ row.size - 1)]\n      end\n    end\n  end\nend", "  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ coordinates = [(i, j)]\n      elsif i == 0 && j != 0\n        coordinates =\
    \ [(i, j), (0, j)]\n      elsif i != 0 && j == 0\n        coordinates = [(i, j),\
    \ (0, i)]\n      elsif i != 0 && j != 0\n        coordinates = [(i, j), (i-1,\
    \ j-1), (i-1, j), (i-1, j+1), (i, j-1)]\n      end\n    end\n  end\nend", "  rows\
    \ = []\n  i = 0\n  while i < lst.size\n    row = lst[i]\n    i += 1\n    if row.size\
    \ == x\n      rows.push([i, row.size])\n    end\n  end\n  rows.sort!\n  rows.reverse!\n\
    \  rows.each do |row|\n    row.sort!\n    row.reverse!\n  end\n  return rows\n\
    end", "  row = []\n  for i in 0...lst.length\n    if lst[i] <= x\n      row <<\
    \ [lst[i], i]\n    end\n  end\n  row.sort!\n  row.sort!{|a,b| b[1] <=> a[1]}\n\
    \  row\nend", "  lst.each do |row|\n    row.each do |element|\n      if element\
    \ == x\n        return [(row.size - 1, row.size - 1)]\n      end\n    end\n  end\n\
    end", "  row = []\n  row.push((0, x))\n  row.push((lst.size - 1, x))\n  row.push((lst.size\
    \ - 1, lst.size - x))\n  row.push((lst.size - 1, lst.size - 1))\n  row.push((lst.size\
    \ - 1, lst.size - 2))\n  row.push((lst.size - 1, lst.size - 3))\n  row.push((lst.size\
    \ - 1, lst.size - 4))\n  row.push((lst.size - 1, lst.size - 5))\n  row.push((lst.size\
    \ - 1, lst.size - 6))\n  row.push((lst.size - 1, lst.size - 7))\n  row.push((lst.size\
    \ - 1, lst.size - 8))\n  row.push((lst.size - 1, lst.size - 9))\n  row.push((lst.size\
    \ - 1, lst.size - 10))\n  row.push((lst.size - 1, lst.size - 11))\n  row.push((lst.size\
    \ - 1, lst.size - 12))\n  row.push((lst.size - 1, lst.size - 13))\n  row.push((lst.size\
    \ - 1, lst.size - 14))\n  row.push((lst.size - 1, lst.size - 15))\n  row.push((lst.size\
    \ - 1, lst.size - 16))\n  row.push((lst.size - 1, lst.size - 17))\n  row.push((lst.size\
    \ - 1, lst.size - 18))\n  row.push((lst.size - 1, lst.size - 19))\n  row.push((lst.size\
    \ - 1, lst.size - 20))\n  row.push((lst.size - 1, lst.size - 21))\n  row.push((lst.size\
    \ - 1, lst.size - 22))\n  row.push((lst.size - 1, lst.size - 23))\n  row.push((lst.size\
    \ - 1, lst.size - 24))\n  row.push((lst.size - 1, lst.size - 25))\n  row.push((lst.size\
    \ - 1, lst.size - 26))\n  row.push((lst.size - 1, lst.size - 27))\n  row.push((lst.size\
    \ - 1, lst.size - 28))\n  row.push((lst.size - 1, lst.size - 29))\n  row.push((lst.size\
    \ - 1, lst.size - 30))\n  row.push((lst.size - 1, lst.size - 31))\n  row.push((lst.size\
    \ - 1, lst.size - 32))\n  row.push((lst.size - 1, lst.size - 33))\n  row.push((lst.size\
    \ - 1, lst.size - 34))\n  row.push((lst.size - 1, lst.size - 35))", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\n\
    \        coord = (i, j)\n      else\n        coord = (i, j)\n      end\n     \
    \ coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.", "  row = []\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x, 0))\n  row.push((x,\
    \ 0))\n  row.push((x, 0))\n  row.push((", "  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n        coordinates\
    \ = [(i, j)]\n      elsif i == 0 && j != 0\n        coordinates = [(i, j), (i,\
    \ j - 1)]\n      elsif i != 0 && j == 0\n        coordinates = [(i, j), (i - 1,\
    \ j)]\n      elsif i != 0 && j != 0\n        coordinates = [(i, j), (i - 1, j),\
    \ (i, j - 1), (i, j + 1)]\n      end\n      coordinates.sort!.reverse!\n     \
    \ coordinates.each do |coordinate|\n        if coordinate[0] == x && coordinate[1]\
    \ == 0\n          return coordinates\n        end\n      end\n    end\n  end\n\
    end", "  row = []\n  row.push((0,0))\n  row.push((1,0))\n  row.push((2,0))\n \
    \ row.push((3,0))\n  row.push((4,0))\n  row.push((5,0))\n  row.push((6,0))\n \
    \ row.push((0,1))\n  row.push((1,1))\n  row.push((2,1))\n  row.push((3,1))\n \
    \ row.push((4,1))\n  row.push((5,1))\n  row.push((6,1))\n  row.push((0,2))\n \
    \ row.push((1,2))\n  row.push((2,2))\n  row.push((3,2))\n  row.push((4,2))\n \
    \ row.push((5,2))\n  row.push((6,2))\n  row.push((0,3))\n  row.push((1,3))\n \
    \ row.push((2,3))\n  row.push((3,3))\n  row.push((4,3))\n  row.push((5,3))\n \
    \ row.push((6,3))\n  row.push((0,4))\n  row.push((1,4))\n  row.push((2,4))\n \
    \ row.push((3,4))\n  row.push((4,4))\n  row.push((5,4))\n  row.push((6,4))\n \
    \ row.push((0,5))\n  row.push((1,5))\n  row.push((2,5))\n  row.push((3,5))\n \
    \ row.push((4,5))\n  row.push((5,5))\n  row.push((6,5))\n  row.push((0,6))\n \
    \ row.push((1,6))\n  row.push((2,6))\n  row.push((3,6))\n  row.push((4,6))\n \
    \ row.push((5,6))\n  row.push((6,6))\n  row.push((0,7))\n  row.push((1,7))\n \
    \ row.push((2,7))\n  row.push((3,7))\n  row.push((4,7))\n  row.push((5,7))\n \
    \ row.push((6,7))\n  row.push((0,8))\n  row.push((1,8))\n  row.push((2,8))\n \
    \ row.push((3,8))\n  row.push((4,8))\n  row.push((5,8))\n  row.push((6,8))\n \
    \ row.push((0,9))\n  row.push((1,9))\n  row.push((2,9))\n  row.push((3,9))\n \
    \ row.push((4,9))\n  row.push((5,9))\n  row.push((6,9))\n  row.push((0,10))\n\
    \  row.push((", "  row = []\n  row.push((0,0))\n  row.push((1,0))\n  row.push((2,0))\n\
    \  row.push((3,0))\n  row.push((4,0))\n  row.push((5,0))\n  row.push((6,0))\n\
    \  row.push((7,0))\n  row.push((8,0))\n  row.push((9,0))\n  row.push((10,0))\n\
    \  row.push((11,0))\n  row.push((12,0))\n  row.push((13,0))\n  row.push((14,0))\n\
    \  row.push((15,0))\n  row.push((16,0))\n  row.push((17,0))\n  row.push((18,0))\n\
    \  row.push((19,0))\n  row.push((20,0))\n  row.push((21,0))\n  row.push((22,0))\n\
    \  row.push((23,0))\n  row.push((24,0))\n  row.push((25,0))\n  row.push((26,0))\n\
    \  row.push((27,0))\n  row.push((28,0))\n  row.push((29,0))\n  row.push((30,0))\n\
    \  row.push((31,0))\n  row.push((32,0))\n  row.push((33,0))\n  row.push((34,0))\n\
    \  row.push((35,0))\n  row.push((36,0))\n  row.push((37,0))\n  row.push((38,0))\n\
    \  row.push((39,0))\n  row.push((40,0))\n  row.push((41,0))\n  row.push((42,0))\n\
    \  row.push((43,0))\n  row.push((44,0))\n  row.push((45,0))\n  row.push((46,0))\n\
    \  row.push((47,0))\n  row.push((48,0))\n  row.push((49,0))\n  row.push((50,0))\n\
    \  row.push((51,0))\n  row.push((52,0))\n  row.push((53,0))\n  row.push((54,0))\n\
    \  row.push((55,0))\n  row.push((56,0))\n  row.push((57,0))\n  row.push((58,0))\n\
    \  row.push((59,0))\n  row.push((60,0))\n  row.push((61,0))\n  row.push((62,0))\n\
    \  row.push((63,0))\n  row.push((64,0))\n  row.push((65,0))\n  row.push((66,0))\n\
    \  row.push((67,0))\n  row.push((68,0))", "  row = []\n  for i in 0...lst.length\n\
    \    if lst[i] == x\n      row << [(i)]\n    end\n  end\n  row.sort!\n  row.each\
    \ do |i|\n    i.sort!\n  end\n  row\nend", "  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n        coordinates\
    \ = [(i, j)]\n      elsif i == 0 && j != 0\n        coordinates = [(i, j), (i\
    \ + 1, j)]\n      elsif i != 0 && j == 0\n        coordinates = [(i, j), (i +\
    \ 1, j), (0, j)]\n      elsif i != 0 && j != 0\n        coordinates = [(i, j),\
    \ (i + 1, j), (0, j), (i + 1, j + 1)]\n      end\n      coordinates.sort_by! {\
    \ |x, y| y }.reverse!\n      coordinates.each do |coordinate|\n        if coordinate[0]\
    \ == x\n          return coordinate\n        end\n      end\n    end\n  end\n\
    end", "  lst.sort!\n  result = []\n  i = 0\n  while i < lst.size\n    row = lst[i]\n\
    \    i += 1\n    row.sort!\n    j =0\n    while j < row.size\n      if row[j]\
    \ == x\n        result.push([i, j])\n      j += 1\n    end\n  end\n  result.sort!\n\
    \  result.reverse!\n  return result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
