name: HumanEval_79_decimal_to_binary
language: ruby
prompt: "# You will be given a number in decimal form and your task is to convert\
  \ it to\n# binary format. The function should return a string, with each character\
  \ representing a binary\n# number. Each character in the string will be '0' or '1'.\n\
  # There will be an extra couple of characters 'db' at the beginning and at the end\
  \ of the string.\n# The extra characters are there to help with the format.\n# Examples:\n\
  # decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)   # returns\
  \ \"db100000db\"\ndef decimal_to_binary(decimal)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
  \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
  \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
  , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n  end\n\
  end\n"
completions: ["  decimal = decimal.to_s\n  decimal.insert(0, 'db')\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  ", "  decimal.to_s(2).reverse.insert(0,'db')\n\
    \  decimal.to_s(2).reverse.insert(decimal.to_s.length,'db')\n  decimal.to_s(2).reverse\n\
    end", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n  \
    \  decimal = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = ", "  decimal = decimal.to_s\n\
    \  decimal.insert(0, 'db')\n  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length", "  decimal = decimal.to_i\n  binary = \"\"\n  while decimal\
    \ != 0\n    binary = binary + \"0\"\n    decimal = decimal - 1\n  end\n  binary\
    \ = binary + \"1\"\n  binary.insert(0, \"db\")\n  binary.insert(binary.length,\
    \ \"db\")\n  return binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0,\
    \ 'db')\n  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length", "  decimal = decimal.to_s\n  decimal.insert(0, 'db')\n  decimal.insert(decimal.size-1,\
    \ 'db')\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n",
  "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\" if decimal %\
    \ 2 == 0 else binary + \"1\"\n    decimal = decimal / 2\n  end\n  binary = binary\
    \ + \"db\"\n  return binary\nend", "  binary = \"\"\n  while decimal != 0\n  \
    \  binary = binary + \"0\" if decimal % 2 == 0 else binary + \"1\"\n    decimal\
    \ = decimal / 2\n  end\n  binary = binary + \"db\"\n  return binary\nend", " \
    \ decimal = decimal.to_s\n  decimal = decimal.chars.map { |c| c == '1' ? '0' :\
    \ '1' }.join\n  decimal = 'db' + decimal\n  decimal\nend", "  decimal = decimal.to_s\n\
    \  decimal.insert(0, \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n \
    \   decimal = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary = binary\
    \ + \"b\"\n  return binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(0, \"0\")\n  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length-1)\n  decimal.slice!(0..decimal.length-1)\n\
    \  decimal.slice!(0..decimal.length", "  binary = \"\"\n  while decimal != 0\n\
    \    binary = binary + \"0\"\n    decimal = decimal - 1\n  end\n  binary = binary\
    \ + \"1\"\n  return binary\nend", "  binary = \"\"\n  while decimal != 0\n   \
    \ binary = binary + \"0\"\n    decimal = decimal - 1\n  end\n  binary = binary\
    \ + \"1\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  return binary\nend", "  binary = \"\"\n  while decimal != 0\n   \
    \ binary = binary + \"0\" if decimal % 2 == 0 else binary + \"1\"\n    decimal\
    \ = decimal / 2\n  end\n  binary = binary + \"db\"\n  return binary\nend", " \
    \ binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n    decimal\
    \ = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary = binary + \"b\"\n\
    \  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"\
    b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary +\
    \ \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = ", "  decimal = decimal.to_s\n\
    \  decimal.insert(0,\"db\")\n  decimal.insert(decimal.length,\"db\")\n  decimal.insert(decimal.length*2,\"\
    db\")\n  decimal.insert(decimal.length*3,\"db\")\n  decimal.insert(decimal.length*4,\"\
    db\")\n  decimal.insert(decimal.length*5,\"db\")\n  decimal.insert(decimal.length*6,\"\
    db\")\n  decimal.insert(decimal.length*7,\"db\")\n  decimal.insert(decimal.length*8,\"\
    db\")\n  decimal.insert(decimal.length*9,\"db\")\n  decimal.insert(decimal.length*10,\"\
    db\")\n  decimal.insert(decimal.length*11,\"db\")\n  decimal.insert(decimal.length*12,\"\
    db\")\n  decimal.insert(decimal.length*13,\"db\")\n  decimal.insert(decimal.length*14,\"\
    db\")\n  decimal.insert(decimal.length*15,\"db\")\n  decimal.insert(decimal.length*16,\"\
    db\")\n  decimal.insert(decimal.length*17,\"db\")\n  decimal.insert(decimal.length*18,\"\
    db\")\n  decimal.insert(decimal.length*19,\"db\")\n  decimal.insert(decimal.length*20,\"\
    db\")\n  decimal.insert(decimal.length*21,\"db\")\n  decimal.insert(decimal.length*22,\"\
    db\")\n  decimal.insert(decimal.length*23,\"db\")\n  decimal.insert(decimal.length*24,\"\
    db\")\n  decimal.insert(decimal.length*25,\"db\")\n  decimal.insert(decimal.length*26,\"\
    db\")\n  decimal.insert(decimal.length*27,\"db\")\n  decimal.insert(decimal.length*28,\"\
    db\")\n  decimal.insert(decimal.length*29,\"db\")\n  decimal.insert(decimal.length*30,\"\
    db\")\n  decimal.insert(decimal.length*31,\"db\")\n  decimal.insert(decimal.length*32,\"\
    db\")\n  decimal.insert(decimal.length*33,\"db\")\n  decimal.insert(decimal.length*34,\"\
    db\")\n  decimal.insert(decimal.length*35,\"db\")\n  decimal.insert(decimal.length*36,\"\
    db\")\n  decimal.insert(decimal.length*37,\"db\")\n  decimal.insert(decimal.length*38,\"\
    db\")\n  decimal.insert(decimal.length*39,\"db\")\n  decimal.insert(decimal.length*40,\"\
    db\")\n  decimal.insert(decimal.length*41,\"db\")\n  decimal.insert(decimal.length",
  "  decimal = decimal.to_s\n  decimal.insert(0, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"", "  decimal = decimal.to_s\n \
    \ decimal.insert(0,'db')\n  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length", "  decimal.to_s(2).reverse.chars.map\
    \ { |c| c == '1' ? '0' : '1' }.join\nend", "  decimal.to_s(2).reverse.scan(/../).map\
    \ {|x| x.reverse}.join\nend", "  decimal.to_s(2).reverse.insert(0,'db')\n  decimal.to_s(2).reverse.insert(decimal.to_s.length,'db')\n\
    end", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n  \
    \  decimal = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary = binary\
    \ + \"db\"\n  return binary\nend", "  binary = \"\"\n  while decimal != 0\n  \
    \  binary = binary + \"0\" if decimal % 2 == 0 else binary + \"1\"\n    decimal\
    \ = decimal / 2\n  end\n  binary = binary + \"db\"\n  return binary\nend", " \
    \ decimal = decimal.to_s\n  binary = \"\"\n  decimal.split(\"\").each do |char|\n\
    \    binary = binary + \"0\" if char == \"1\"\n    binary = binary + \"1\" if\
    \ char == \"0\"\n  end\n  binary = \"db\" + binary + \"db\"\n  return binary\n\
    end", "  decimal = decimal.to_s\n  decimal = decimal.chars.reverse.join # reverse\
    \ the string\n  decimal = decimal.chars.map { |c| c == '1' ? '0' : '1' } # map\
    \ each character to a binary number\n  decimal = decimal.chars.join # join the\
    \ characters to form the string\n  decimal = 'db' + decimal + 'db' # add extra\
    \ characters to help with the format\n  decimal\nend", "  binary = \"\"\n  while\
    \ decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal - 1\n  end\n\
    \  binary = binary + \"1\"\n  binary = binary + \"b\"\n  binary = binary + \"\
    b\"\n  return binary\nend", "  decimal = decimal.to_s\n  binary = \"\"\n  decimal.split(\"\
    \").each do |digit|\n    binary = digit + binary\n  end\n  binary = binary.reverse\n\
    \  binary.insert(0, \"db\")\n  binary.insert(0, \"db\")\n  return binary\nend",
  "  decimal.to_s(2).reverse.insert(0,'db')\n  decimal.to_s(2).reverse.insert(decimal.to_s.length,'db')\n\
    \  decimal.to_s(2).reverse\nend", "  binary = \"\"\n  while decimal != 0\n   \
    \ binary = binary + \"0\" if (decimal % 2 == 0)\n    binary = binary + \"1\" if\
    \ (decimal % 2 != 0)\n    decimal = decimal / 2\n  end\n  binary = binary + \"\
    db\"\n  return binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0, \"\
    db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length\
    \ + 1, \"db\")\n  decimal.insert(decimal.length + 2, \"db\")\n  decimal.insert(decimal.length\
    \ + 3, \"db\")\n  decimal.insert(decimal.length + 4, \"db\")\n  decimal.insert(decimal.length\
    \ + 5, \"db\")\n  decimal.insert(decimal.length + 6, \"db\")\n  decimal.insert(decimal.length\
    \ + 7, \"db\")\n  decimal.insert(decimal.length + 8, \"db\")\n  decimal.insert(decimal.length\
    \ + 9, \"db\")\n  decimal.insert(decimal.length + 10, \"db\")\n  decimal.insert(decimal.length\
    \ + 11, \"db\")\n  decimal.insert(decimal.length + 12, \"db\")\n  decimal.insert(decimal.length\
    \ + 13, \"db\")\n  decimal.insert(decimal.length + 14, \"db\")\n  decimal.insert(decimal.length\
    \ + 15, \"db\")\n  decimal.insert(decimal.length + 16, \"db\")\n  decimal.insert(decimal.length\
    \ + 17, \"db\")\n  decimal.insert(decimal.length + 18, \"db\")\n  decimal.insert(decimal.length\
    \ + 19, \"db\")\n  decimal.insert(decimal.length + 20, \"db\")\n  decimal.insert(decimal.length\
    \ + 21, \"db\")\n  decimal.insert(decimal.length + 22, \"db\")\n  decimal.insert(decimal.length\
    \ + 23, \"db\")\n  decimal.insert(decimal.length + 24, \"db\")\n  decimal.insert(decimal.length\
    \ + 25, \"db\")\n  decimal.insert(decimal.length + 26, \"db\")\n  decimal.insert(decimal.length\
    \ + 27, \"db\")\n  decimal.insert(decimal.length + 28, \"db\")\n  decimal.insert(decimal.length\
    \ + 29, \"db\")\n  decimal.insert(decimal.length + 30, \"db\")\n  decimal.insert(decimal.length\
    \ + 31, \"db\")\n  decimal.insert(decimal.length + 32, \"db\")\n  decimal.insert(decimal.length\
    \ + 33, \"db\")\n  decimal.insert(decimal.length + 34, \"db\")\n  decimal.insert(decimal.length\
    \ + 35, \"db\")\n  decimal.insert(decimal.length + 36, \"db\")\n  decimal.insert(decimal.length\
    \ + 37, \"db\")\n  decimal.insert(decimal.length + 38, \"db\")\n  decimal.insert(decimal.length\
    \ + 39, \"db\")\n  decimal.insert(decimal.length + 40, \"db\")\n  decimal.insert(decimal.length\
    \ + 41, \"db", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"\
    0\"\n    decimal = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary = binary\
    \ + \"db\"\n  return binary\nend", "  decimal = decimal.to_s\n  binary = \"\"\n\
    \  decimal.split(\"\").each do |digit|\n    binary = binary + \"0\" if digit ==\
    \ \"1\"\n    binary = binary + \"1\" if digit == \"0\"\n  end\n  binary = \"db\"\
    \ + binary + \"db\"\n  return binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0,\
    \ 'db')\n  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n", "  decimal = decimal.to_s\n  decimal.insert(0,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length+1,'db')\n  decimal.insert(decimal.length+2,'db')\n\
    \  decimal.insert(decimal.length+3,'db')\n  decimal.insert(decimal.length+4,'db')\n\
    \  decimal.insert(decimal.length+5,'db')\n  decimal.insert(decimal.length+6,'db')\n\
    \  decimal.insert(decimal.length+7,'db')\n  decimal.insert(decimal.length+8,'db')\n\
    \  decimal.insert(decimal.length+9,'db')\n  decimal.insert(decimal.length+10,'db')\n\
    \  decimal.insert(decimal.length+11,'db')\n  decimal.insert(decimal.length+12,'db')\n\
    \  decimal.insert(decimal.length+13,'db')\n  decimal.insert(decimal.length+14,'db')\n\
    \  decimal.insert(decimal.length+15,'db')\n  decimal.insert(decimal.length+16,'db')\n\
    \  decimal.insert(decimal.length+17,'db')\n  decimal.insert(decimal.length+18,'db')\n\
    \  decimal.insert(decimal.length+19,'db')\n  decimal.insert(decimal.length+20,'db')\n\
    \  decimal.insert(decimal.length+21,'db')\n  decimal.insert(decimal.length+22,'db')\n\
    \  decimal.insert(decimal.length+23,'db')\n  decimal.insert(decimal.length+24,'db')\n\
    \  decimal.insert(decimal.length+25,'db')\n  decimal.insert(decimal.length+26,'db')\n\
    \  decimal.insert(decimal.length+27,'db')\n  decimal.insert(decimal.length+28,'db')\n\
    \  decimal.insert(decimal.length+29,'db')\n  decimal.insert(decimal.length+30,'db')\n\
    \  decimal.insert(decimal.length+31,'db')\n  decimal.insert(decimal.length+32,'db')\n\
    \  decimal.insert(decimal.length+33,'db')\n  decimal.insert(decimal.length+34,'db')\n\
    \  decimal.insert(decimal.length+35,'db')\n  decimal.insert(decimal.length+36,'db')\n\
    \  decimal.insert(decimal.length+37,'db')\n  decimal.insert(decimal.length+38,'db')\n\
    \  decimal.insert(decimal.length+39,'db')\n  decimal.insert(decimal.length+40,'db')\n\
    \  decimal.insert(decimal.length+41,'", "  decimal.to_s(2).reverse.chars.map {\
    \ |c| c == '1' ? '0' : '1' }.join('db')\nend", "  decimal = decimal.to_s\n  binary\
    \ = \"\"\n  decimal.split(\"\").each do |digit|\n    binary += ((digit.to_i(2)\
    \ != 0) ? \"1\" : \"0\")\n  end\n  binary = \"db\" + binary + \"db\"\n  return\
    \ binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"", "  decimal = decimal.to_s\n \
    \ binary = \"\"\n  decimal.split(\"\").each do |digit|\n    binary = binary +\
    \ \"0\"\n    binary = binary + digit if digit == \"1\"\n    binary = binary +\
    \ \"1\"\n  end\n  binary = binary + \"db\"\n  return binary\nend", "  binary =\
    \ \"\"\n  while decimal != 0\n    binary = binary + \"0\" if decimal % 2 == 0\
    \ else binary + \"1\"\n    decimal = decimal / 2\n  end\n  binary = binary + \"\
    db\"\n  return binary\nend", "  decimal = decimal.to_s\n  binary = \"\"\n  decimal.split(\"\
    \").each do |digit|\n    binary += ((digit == \"1\") ? \"1\" : \"0\")\n  end\n\
    \  binary = \"db\" + binary + \"db\"\n  return binary\nend", "  decimal = decimal.to_i\n\
    \  result = ''\n  while decimal != 0\n    result += (decimal % 2) + 'b'\n    decimal\
    \ = decimal / 2\n  end\n  result += 'db'\n  result[0..-2] #remove last two characters\n\
    end", "  decimal = decimal.to_i\n  binary = \"\"\n  while decimal != 0\n    binary\
    \ = binary + \"0\"\n    decimal = decimal - 1\n  end\n  binary = binary + \"b\"\
    \n  return binary\nend", "  decimal = decimal.to_s\n  binary = \"\"\n  decimal.split(\"\
    \").each do |digit|\n    binary += (\"0\" + digit.to_s).slice(-2)\n  end\n  binary.insert(0,\
    \ \"db\")\n  binary.insert(binary.length, \"db\")\n  binary\nend", "  decimal\
    \ = decimal.to_s\n  decimal.insert(0, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"", "  decimal = decimal.to_s\n \
    \ binary = \"\"\n  decimal.split(\"\").each do |digit|\n    binary += \"#{digit.to_s(2)}\"\
    \n  end\n  binary = \"db#{binary}\"\n  return binary\nend", "  binary = \"\"\n\
    \  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal - 1\n\
    \  end\n  binary = binary + \"1\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  return binary\nend", "  binary = \"\"\n  while decimal != 0\n   \
    \ binary = binary + \"0\"\n    decimal = decimal - 1\n  end\n  binary = binary\
    \ + \"1\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  return binary\n\
    end", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n  \
    \  decimal = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary = binary\
    \ + \"db\"\n  return binary\nend", "  decimal.to_s(2).reverse.insert(0,'db')\n\
    end", "  decimal = decimal.to_s\n  decimal.insert(0, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.slice!(decimal.length)\n  decimal.slice!(0, 2)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n", "  binary = \"\"\n\
    \  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal - 1\n\
    \  end\n  binary = binary + \"1\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  return binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length\
    \ + 2, \"db\")\n  decimal.insert(decimal.length + 4, \"db\")\n  decimal.insert(decimal.length\
    \ + 6, \"db\")\n  decimal.insert(decimal.length + 8, \"db\")\n  decimal.insert(decimal.length\
    \ + 10, \"db\")\n  decimal.insert(decimal.length + 12, \"db\")\n  decimal.insert(decimal.length\
    \ + 14, \"db\")\n  decimal.insert(decimal.length + 16, \"db\")\n  decimal.insert(decimal.length\
    \ + 18, \"db\")\n  decimal.insert(decimal.length + 20, \"db\")\n  decimal.insert(decimal.length\
    \ + 22, \"db\")\n  decimal.insert(decimal.length + 24, \"db\")\n  decimal.insert(decimal.length\
    \ + 26, \"db\")\n  decimal.insert(decimal.length + 28, \"db\")\n  decimal.insert(decimal.length\
    \ + 30, \"db\")\n  decimal.insert(decimal.length + 32, \"db\")\n  decimal.insert(decimal.length\
    \ + 34, \"db\")\n  decimal.insert(decimal.length + 36, \"db\")\n  decimal.insert(decimal.length\
    \ + 38, \"db\")\n  decimal.insert(decimal.length + 40, \"db\")\n  decimal.insert(decimal.length\
    \ + 42, \"db\")\n  decimal.insert(decimal.length + 44, \"db\")\n  decimal.insert(decimal.length\
    \ + 46, \"db\")\n  decimal.insert(decimal.length + 48, \"db\")\n  decimal.insert(decimal.length\
    \ + 50, \"db\")\n  decimal.insert(decimal.length + 52, \"db\")\n  decimal.insert(decimal.length\
    \ + 54, \"db\")\n  decimal.insert(decimal.length + 56, \"db\")\n  decimal.insert(decimal.length\
    \ + 58, \"db\")\n  decimal.insert(decimal.length + 60, \"db\")\n  decimal.insert(decimal.length\
    \ + 62, \"db\")\n  decimal.insert(decimal.length + 64, \"db\")\n  decimal.insert(decimal.length\
    \ + 66, \"db\")\n  decimal.insert(decimal.length + 68, \"db\")\n  decimal.insert(decimal.length\
    \ + 70, \"db\")\n  decimal.insert(decimal.length + 72, \"db\")\n  decimal.insert(decimal.length\
    \ + 74, \"db\")\n  decimal.insert(decimal.length + 76, \"db\")\n  decimal.insert(decimal.length\
    \ + 78, \"db\")\n  decimal.insert(decimal.length + 80, \"db\")\n  decimal.insert(decimal.length\
    \ + 8", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\" if\
    \ decimal % 2 == 0 else \"1\"\n    decimal = decimal / 2\n  end\n  binary = binary\
    \ + \"db\"\n  return binary\nend", "  decimal = decimal.to_s\n  decimal = decimal.chars.map{|x|\
    \ x.to_i}\n  decimal.insert(0,'db')\n  decimal.insert(decimal.length-1,'db')\n\
    \  decimal.map!{|x| x.to_s(2)}\n  decimal.join\nend", "  decimal = decimal.to_i\n\
    \  binary = \"\"\n  while decimal > 0\n    binary = binary + \"0\"\n    decimal\
    \ = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary = binary + \"b\"\n\
    \  binary = binary + \"b\"\n  return binary\nend", "  binary = \"\"\n  while decimal\
    \ != 0\n    binary = binary + \"0\" if decimal % 2 == 0 else binary + \"1\"\n\
    \    decimal = decimal / 2\n  end\n  binary = binary + \"db\"\n  return binary\n\
    end", "  binary = \"\"\n  decimal = decimal.to_s\n  decimal.split(\"\").each do\
    \ |digit|\n    digit = digit.to_i\n    binary = binary + (\"0\" if digit == 0)\n\
    \    binary = binary + (\"1\" if digit == 1)\n  end\n  binary = binary + \"db\"\
    \n  return binary\nend", "  decimal.to_s(2).reverse.scan(/../).map {|x| x.to_i(2)}.reverse.join\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers, e.g.\
    \ `decimal_to_binary(-15)` returns `\"11111110\"` instead of `\"11111110db\"`.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. I tested it before posting it.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. I tested it before posting it.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. I tested it before posting it.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. I tested it before posting it.\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  binary = \"\"\n  while decimal != 0\n\
    \    binary = binary + \"0\" if decimal % 2 == 0 else binary + \"1\"\n    decimal\
    \ = decimal / 2\n  end\n  binary = binary + \"db\"\n  return binary\nend", " \
    \ decimal = decimal.to_s\n  decimal.insert(0, 'db')\n  decimal.insert(decimal.size-1,\
    \ 'db')\n  decimal.slice!(decimal.size - 2)\n  decimal.slice!(decimal.size - 1)\n\
    \  decimal.slice!(0..decimal.size - 1)\n  decimal.slice!(0..decimal.size - 2)\n\
    \  decimal.slice!(0..decimal.size - 3)\n  decimal.slice!(0..decimal.size - 4)\n\
    \  decimal.slice!(0..decimal.size - 5)\n  decimal.slice!(0..decimal.size - 6)\n\
    \  decimal.slice!(0..decimal.size - 7)\n  decimal.slice!(0..decimal.size - 8)\n\
    \  decimal.slice!(0..decimal.size - 9)\n  decimal.slice!(0..decimal.size - 10)\n\
    \  decimal.slice!(0..decimal.size - 11)\n  decimal.slice!(0..decimal.size - 12)\n\
    \  decimal.slice!(0..decimal.size - 13)\n  decimal.slice!(0..decimal.size - 14)\n\
    \  decimal.slice!(0..decimal.size - 15)\n  decimal.slice!(0..decimal.size - 16)\n\
    \  decimal.slice!(0..decimal.size - 17)\n  decimal.slice!(0..decimal.size - 18)\n\
    \  decimal.slice!(0..decimal.size - 19)\n  decimal.slice!(0..decimal.size - 20)\n\
    \  decimal.slice!(0..decimal.size - 21)\n  decimal.slice!(0..decimal.size - 22)\n\
    \  decimal.slice!(0..decimal.size - 23)\n  decimal.slice!(0..decimal.size - 24)\n\
    \  decimal.slice!(0..decimal.size - 25)\n  decimal.slice!(0..decimal.size - 26)\n\
    \  decimal.slice!(0..decimal.size - 27)\n  decimal.slice!(0..decimal.size - 28)\n\
    \  decimal.slice!(0..decimal.size - 29)\n  decimal.slice!(0..decimal.size - 30)\n\
    \  decimal.slice!(0..decimal.size - 31)\n  decimal.slice!(0..decimal.size - 32)\n\
    \  decimal.slice!(0..decimal.size - 33)\n  decimal.slice!(0..decimal.size - 34)\n\
    \  decimal.slice!(0..decimal.size - 35)\n  decimal.slice!(0..decimal.size - 36)\n\
    \  decimal.slice!(0..decimal.size - 37)\n  decimal.slice!(0..decimal.size - ",
  "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\" if decimal %\
    \ 2 == 0 else binary + \"1\"\n    decimal = decimal / 2\n  end\n  binary = \"\
    db\" + binary + \"db\"\n  return binary\nend", "  binary = \"\"\n  while decimal\
    \ != 0\n    binary = binary + \"0\" if decimal % 2 == 0 else binary + \"1\"\n\
    \    decimal = decimal / 2\n  end\n  binary = \"db\" + binary + \"db\"\n  return\
    \ binary\nend", "  decimal.to_s(2).reverse.insert(0,'db')\n  decimal.to_s(2).reverse.insert(decimal.to_s.length,'db')\n\
    end", "  decimal = decimal.to_i\n  binary = \"\"\n  while decimal != 0\n    binary\
    \ = binary + \"0\" if decimal % 2 == 0 else \"1\"\n    decimal = decimal / 2\n\
    \  end\n  binary = binary + \"db\"\n  return binary\nend", "  decimal = decimal.to_s\n\
    \  decimal.insert(0, 'db')\n  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(0, '0')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length,\
    \ '0')\n  decimal.slice!(decimal.length)\n  decimal.insert(0, '0')\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(decimal.length, '0')\n  decimal.slice!(decimal.length)\n  decimal.insert(0,\
    \ '0')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, '0')\n\
    \  decimal.slice!(decimal.length)\n  decimal.insert(0, '0')\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(decimal.length, '0')\n  decimal.slice!(decimal.length)\n  decimal.insert(0,\
    \ '0')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, '0')\n\
    \  decimal.slice!(decimal.length)\n  decimal.insert(0, '0')\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(decimal.length, '0')\n  decimal.slice!(decimal.length)\n  decimal.insert(0,\
    \ '0')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, '0')\n\
    \  decimal.slice!(decimal.length)\n  decimal.insert(0, '0')\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(decimal.length, '0')\n  decimal.slice!(decimal.length)\n  decimal.insert(0,\
    \ '0')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, '0')\n\
    \  decimal.slice!(decimal.length)\n  decimal.insert(0, '0')\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(decimal.length, '0')\n  decimal.slice!(decimal.length)\n  decimal.insert(0,\
    \ '0')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, '0')\n\
    \  decimal.slice!(decimal.length)\n  decimal.insert(0, '0')\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(decimal.length, '0')\n  decimal.slice!(decimal.length)\n  decimal.insert(0,\
    \ '0')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, '0')\n\
    \  decimal.slice!(decimal.length)\n  decimal.insert(0, '0')\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(decimal.length, '0')\n  decimal.slice!(decimal.length)\n  decimal",
  "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n    decimal\
    \ = decimal - 1\n  end\n  binary = binary + \"1\"\n  return binary\nend", "  decimal\
    \ = decimal.to_s\n  decimal.insert(0, 'db')\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, 'db')\n\
    \  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, 'db')\n\
    \  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, 'db')\n\
    \  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, 'db')\n\
    \  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, 'db')\n\
    \  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, 'db')\n\
    \  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.slice!(decimal.length)\n  decimal.insert(decimal.length, 'db')\n\
    \  decimal.slice!(decimal.length)\n  decimal.", "  decimal = decimal.to_i\n  string\
    \ = \"\"\n  while decimal != 0\n    string += \"0\"\n    decimal = decimal - 1\n\
    \  end\n  string += \"db\"\n  while decimal != 0\n    string += \"1\"\n    decimal\
    \ = decimal - 1\n  end\n  string\nend", "  decimal = decimal.to_s\n  decimal.insert(0,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length", "  binary\
    \ = \"\"\n  while decimal != 0\n    binary = binary + \"0\" if decimal % 2 ==\
    \ 0 else binary + \"1\"\n    decimal = decimal / 2\n  end\n  binary = binary +\
    \ \"db\"\n  return binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0,\
    \ 'db')\n  decimal.insert(decimal.length, 'db')\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  ", "  binary\
    \ = \"\"\n  while decimal != 0\n    binary = binary + \"0\" if decimal % 2 ==\
    \ 0 else binary + \"1\"\n    decimal = decimal / 2\n  end\n  binary = binary +\
    \ \"db\"\n  return binary\nend", "  decimal.to_s(2).reverse.scan(/../).map {|x|\
    \ x.to_i(2).to_s(2).reverse}.join\nend", "  decimal = decimal.to_s\n  decimal.insert(0,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length\
    \ + 1, \"db\")\n  decimal.insert(decimal.length + 2, \"db\")\n  decimal.insert(decimal.length\
    \ + 3, \"db\")\n  decimal.insert(decimal.length + 4, \"db\")\n  decimal.insert(decimal.length\
    \ + 5, \"db\")\n  decimal.insert(decimal.length + 6, \"db\")\n  decimal.insert(decimal.length\
    \ + 7, \"db\")\n  decimal.insert(decimal.length + 8, \"db\")\n  decimal.insert(decimal.length\
    \ + 9, \"db\")\n  decimal.insert(decimal.length + 10, \"db\")\n  decimal.insert(decimal.length\
    \ + 11, \"db\")\n  decimal.insert(decimal.length + 12, \"db\")\n  decimal.insert(decimal.length\
    \ + 13, \"db\")\n  decimal.insert(decimal.length + 14, \"db\")\n  decimal.insert(decimal.length\
    \ + 15, \"db\")\n  decimal.insert(decimal.length + 16, \"db\")\n  decimal.insert(decimal.length\
    \ + 17, \"db\")\n  decimal.insert(decimal.length + 18, \"db\")\n  decimal.insert(decimal.length\
    \ + 19, \"db\")\n  decimal.insert(decimal.length + 20, \"db\")\n  decimal.insert(decimal.length\
    \ + 21, \"db\")\n  decimal.insert(decimal.length + 22, \"db\")\n  decimal.insert(decimal.length\
    \ + 23, \"db\")\n  decimal.insert(decimal.length + 24, \"db\")\n  decimal.insert(decimal.length\
    \ + 25, \"db\")\n  decimal.insert(decimal.length + 26, \"db\")\n  decimal.insert(decimal.length\
    \ + 27, \"db\")\n  decimal.insert(decimal.length + 28, \"db\")\n  decimal.insert(decimal.length\
    \ + 29, \"db\")\n  decimal.insert(decimal.length + 30, \"db\")\n  decimal.insert(decimal.length\
    \ + 31, \"db\")\n  decimal.insert(decimal.length + 32, \"db\")\n  decimal.insert(decimal.length\
    \ + 33, \"db\")\n  decimal.insert(decimal.length + 34, \"db\")\n  decimal.insert(decimal.length\
    \ + 35, \"db\")\n  decimal.insert(decimal.length + 36, \"db\")\n  decimal.insert(decimal.length\
    \ + 37, \"db\")\n  decimal.insert(decimal.length + 38, \"db\")\n  decimal.insert(decimal.length\
    \ + 39, \"db\")\n  decimal.insert(decimal.length + 40, \"db\")\n  decimal.insert(decimal.length\
    \ + 41, \"db", "  decimal = decimal.to_i\n  binary = \"\"\n  while decimal !=\
    \ 0\n    binary = binary + \"0\" if decimal % 2 == 0 else binary + \"1\"\n   \
    \ decimal = decimal / 2\n  end\n  binary = binary + \"db\"\n  return binary\n\
    end", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n  \
    \  decimal = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  return binary\nend", "  decimal = decimal.to_s\n\
    \  binary = \"\"\n  decimal.split(\"\").each do |digit|\n    binary = binary +\
    \ \"0\" if digit == \"1\"\n    binary = binary + \"1\" if digit == \"0\"\n  end\n\
    \  binary = binary + \"db\"\n  return binary\nend", "  decimal = decimal.to_s\n\
    \  decimal = decimal.chars.reverse\n  decimal.insert(0,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'", " \
    \ binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\" if decimal\
    \ % 2 == 0 else binary + \"1\"\n    decimal = decimal / 2\n  end\n  binary = \"\
    db\" + binary + \"db\"\n  return binary\nend", "  decimal = decimal.to_i\n  binary\
    \ = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal\
    \ - 1\n  end\n  binary = binary + \"1\"\n  binary = binary.reverse\n  binary =\
    \ binary.insert(0, \"db\")\n  binary = binary.insert(binary.length-1, \"db\")\n\
    \  return binary\nend", "  binary = \"\"\n  while decimal != 0\n    binary = binary\
    \ + \"0\"\n    decimal = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  return binary\nend", "  binary\
    \ = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal\
    \ - 1\n  end\n  binary = binary + \"1\"\n  binary = binary + \"b\"\n  return binary\n\
    end", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n  \
    \  decimal = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary.insert(0,\
    \ \"db\")\n  binary.insert(binary.length, \"db\")\n  return binary\nend", "  binary\
    \ = \"\"\n  while decimal != 0\n    binary = binary + \"0\" if decimal % 2 ==\
    \ 0 else binary + \"1\"\n    decimal = decimal / 2\n  end\n  binary = binary +\
    \ \"db\"\n  return binary\nend", "  decimal = decimal.to_s\n  binary = \"\"\n\
    \  decimal.split(\"\").each do |digit|\n    binary = binary + \"0\" if digit ==\
    \ \"1\"\n    binary = binary + \"1\" if digit == \"0\"\n  end\n  binary = binary\
    \ + \"db\"\n  return binary\nend", "  decimal = decimal.to_s\n  binary = \"\"\n\
    \  decimal.split(\"\").each do |digit|\n    binary = digit + binary\n  end\n \
    \ binary = binary.reverse\n  binary = binary.insert(0, \"db\")\n  binary = binary.insert(binary.length,\
    \ \"db\")\n  return binary\nend", "  binary = \"\"\n  while decimal != 0\n   \
    \ binary = binary + \"0\"\n    decimal = decimal - 1\n  end\n  binary = binary\
    \ + \"1\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  return binary\n\
    end", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\" if decimal\
    \ % 2 == 0 else binary + \"1\"\n    decimal = decimal / 2\n  end\n  binary = binary\
    \ + \"db\"\n  binary.reverse!\n  binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0,'db')\n\
    \  decimal.insert(decimal.length-1,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length+1,'db')\n  decimal.insert(decimal.length+2,'db')\n\
    \  decimal.insert(decimal.length+3,'db')\n  decimal.insert(decimal.length+4,'db')\n\
    \  decimal.insert(decimal.length+5,'db')\n  decimal.insert(decimal.length+6,'db')\n\
    \  decimal.insert(decimal.length+7,'db')\n  decimal.insert(decimal.length+8,'db')\n\
    \  decimal.insert(decimal.length+9,'db')\n  decimal.insert(decimal.length+10,'db')\n\
    \  decimal.insert(decimal.length+11,'db')\n  decimal.insert(decimal.length+12,'db')\n\
    \  decimal.insert(decimal.length+13,'db')\n  decimal.insert(decimal.length+14,'db')\n\
    \  decimal.insert(decimal.length+15,'db')\n  decimal.insert(decimal.length+16,'db')\n\
    \  decimal.insert(decimal.length+17,'db')\n  decimal.insert(decimal.length+18,'db')\n\
    \  decimal.insert(decimal.length+19,'db')\n  decimal.insert(decimal.length+20,'db')\n\
    \  decimal.insert(decimal.length+21,'db')\n  decimal.insert(decimal.length+22,'db')\n\
    \  decimal.insert(decimal.length+23,'db')\n  decimal.insert(decimal.length+24,'db')\n\
    \  decimal.insert(decimal.length+25,'db')\n  decimal.insert(decimal.length+26,'db')\n\
    \  decimal.insert(decimal.length+27,'db')\n  decimal.insert(decimal.length+28,'db')\n\
    \  decimal.insert(decimal.length+29,'db')\n  decimal.insert(decimal.length+30,'db')\n\
    \  decimal.insert(decimal.length+31,'db')\n  decimal.insert(decimal.length+32,'db')\n\
    \  decimal.insert(decimal.length+33,'db')\n  decimal.insert(decimal.length+34,'db')\n\
    \  decimal.insert(decimal.length+35,'db')\n  decimal.insert(decimal.length+36,'db')\n\
    \  decimal.insert(decimal.length+37,'db')\n  decimal.insert(decimal.length+38,'db')\n\
    \  decimal.insert(decimal.length+39,'db')\n  decimal.insert(decimal.length+40,'db",
  "  decimal = decimal.to_s\n  binary = \"\"\n  decimal.split(\"\").each do |digit|\n\
    \    digit = digit.to_i\n    binary = binary + digit.to_s(2)\n  end\n  binary\
    \ = binary + \"db\"\n  binary = binary.reverse\n  binary.insert(0, \"0\")\n  binary.insert(binary.length,\
    \ \"1\")\n  return binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0,\"\
    db\")\n  decimal.insert(decimal.length,\"db\")\n  decimal.insert(decimal.length*2,\"\
    db\")\n  decimal.insert(decimal.length*3,\"db\")\n  decimal.insert(decimal.length*4,\"\
    db\")\n  decimal.insert(decimal.length*5,\"db\")\n  decimal.insert(decimal.length*6,\"\
    db\")\n  decimal.insert(decimal.length*7,\"db\")\n  decimal.insert(decimal.length*8,\"\
    db\")\n  decimal.insert(decimal.length*9,\"db\")\n  decimal.insert(decimal.length*10,\"\
    db\")\n  decimal.insert(decimal.length*11,\"db\")\n  decimal.insert(decimal.length*12,\"\
    db\")\n  decimal.insert(decimal.length*13,\"db\")\n  decimal.insert(decimal.length*14,\"\
    db\")\n  decimal.insert(decimal.length*15,\"db\")\n  decimal.insert(decimal.length*16,\"\
    db\")\n  decimal.insert(decimal.length*17,\"db\")\n  decimal.insert(decimal.length*18,\"\
    db\")\n  decimal.insert(decimal.length*19,\"db\")\n  decimal.insert(decimal.length*20,\"\
    db\")\n  decimal.insert(decimal.length*21,\"db\")\n  decimal.insert(decimal.length*22,\"\
    db\")\n  decimal.insert(decimal.length*23,\"db\")\n  decimal.insert(decimal.length*24,\"\
    db\")\n  decimal.insert(decimal.length*25,\"db\")\n  decimal.insert(decimal.length*26,\"\
    db\")\n  decimal.insert(decimal.length*27,\"db\")\n  decimal.insert(decimal.length*28,\"\
    db\")\n  decimal.insert(decimal.length*29,\"db\")\n  decimal.insert(decimal.length*30,\"\
    db\")\n  decimal.insert(decimal.length*31,\"db\")\n  decimal.insert(decimal.length*32,\"\
    db\")\n  decimal.insert(decimal.length*33,\"db\")\n  decimal.insert(decimal.length*34,\"\
    db\")\n  decimal.insert(decimal.length*35,\"db\")\n  decimal.insert(decimal.length*36,\"\
    db\")\n  decimal.insert(decimal.length*37,\"db\")\n  decimal.insert(decimal.length*38,\"\
    db\")\n  decimal.insert(decimal.length*39,\"db\")\n  decimal.insert(decimal.length*40,\"\
    db\")\n  decimal.insert(decimal.length*41,\"db\")\n  decimal.insert(decimal.length",
  "  decimal = decimal.to_s\n  decimal.insert(0, 'db')\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  decimal.slice!(decimal.length - 2)\n  decimal.slice!(decimal.length\
    \ - 2)\n  ", "  decimal = decimal.to_s\n  binary = \"\"\n  decimal.split(\"\"\
    ).each do |digit|\n    binary += \"0\" if (digit == \"0\")\n    binary += \"1\"\
    \ if (digit == \"1\")\n  end\n  binary = \"db\" + binary + \"db\"\n  return binary\n\
    end", "  decimal = decimal.to_s\n  decimal.insert(0, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.slice!(decimal.length)\n  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n  decimal.insert(0,\
    \ \"0\")\n  decimal.slice!(0...decimal.length)\n  decimal.insert(0, \"0\")\n \
    \ decimal.slice!(0...decimal.length)\n  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n  decimal.insert(0,\
    \ \"0\")\n  decimal.slice!(0...decimal.length)\n  decimal.insert(0, \"0\")\n \
    \ decimal.slice!(0...decimal.length)\n  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n  decimal.insert(0,\
    \ \"0\")\n  decimal.slice!(0...decimal.length)\n  decimal.insert(0, \"0\")\n \
    \ decimal.slice!(0...decimal.length)\n  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n  decimal.insert(0,\
    \ \"0\")\n  decimal.slice!(0...decimal.length)\n  decimal.insert(0, \"0\")\n \
    \ decimal.slice!(0...decimal.length)\n  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n  decimal.insert(0,\
    \ \"0\")\n  decimal.slice!(0...decimal.length)\n  decimal.insert(0, \"0\")\n \
    \ decimal.slice!(0...decimal.length)\n  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n  decimal.insert(0,\
    \ \"0\")\n  decimal.slice!(0...decimal.length)\n  decimal.insert(0, \"0\")\n \
    \ decimal.slice!(0...decimal.length)\n  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n  decimal.insert(0,\
    \ \"0\")\n  decimal.", "  decimal = decimal.to_s\n  decimal.insert(0,'db')\n \
    \ decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length*2,'db')\n\
    \  decimal.insert(decimal.length*3,'db')\n  decimal.insert(decimal.length*4,'db')\n\
    \  decimal.insert(decimal.length*5,'db')\n  decimal.insert(decimal.length*6,'db')\n\
    \  decimal.insert(decimal.length*7,'db')\n  decimal.insert(decimal.length*8,'db')\n\
    \  decimal.insert(decimal.length*9,'db')\n  decimal.insert(decimal.length*10,'db')\n\
    \  decimal.insert(decimal.length*11,'db')\n  decimal.insert(decimal.length*12,'db')\n\
    \  decimal.insert(decimal.length*13,'db')\n  decimal.insert(decimal.length*14,'db')\n\
    \  decimal.insert(decimal.length*15,'db')\n  decimal.insert(decimal.length*16,'db')\n\
    \  decimal.insert(decimal.length*17,'db')\n  decimal.insert(decimal.length*18,'db')\n\
    \  decimal.insert(decimal.length*19,'db')\n  decimal.insert(decimal.length*20,'db')\n\
    \  decimal.insert(decimal.length*21,'db')\n  decimal.insert(decimal.length*22,'db')\n\
    \  decimal.insert(decimal.length*23,'db')\n  decimal.insert(decimal.length*24,'db')\n\
    \  decimal.insert(decimal.length*25,'db')\n  decimal.insert(decimal.length*26,'db')\n\
    \  decimal.insert(decimal.length*27,'db')\n  decimal.insert(decimal.length*28,'db')\n\
    \  decimal.insert(decimal.length*29,'db')\n  decimal.insert(decimal.length*30,'db')\n\
    \  decimal.insert(decimal.length*31,'db')\n  decimal.insert(decimal.length*32,'db')\n\
    \  decimal.insert(decimal.length*33,'db')\n  decimal.insert(decimal.length*34,'db')\n\
    \  decimal.insert(decimal.length*35,'db')\n  decimal.insert(decimal.length*36,'db')\n\
    \  decimal.insert(decimal.length*37,'db')\n  decimal.insert(decimal.length*38,'db')\n\
    \  decimal.insert(decimal.length*39,'db')\n  decimal.insert(decimal.length*40,'db')\n\
    \  decimal.insert(decimal.length*41,'db')\n  decimal.insert(decimal.length*4",
  "  decimal = decimal.to_s\n  decimal.insert(0,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length", "  decimal = decimal.to_s\n  decimal = decimal.chars.reverse\n\
    \  decimal.insert(0,'db')\n  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length+1,'db')\n\
    \  decimal.insert(decimal.length+2,'db')\n  decimal.insert(decimal.length+3,'db')\n\
    \  decimal.insert(decimal.length+4,'db')\n  decimal.insert(decimal.length+5,'db')\n\
    \  decimal.insert(decimal.length+6,'db')\n  decimal.insert(decimal.length+7,'db')\n\
    \  decimal.insert(decimal.length+8,'db')\n  decimal.insert(decimal.length+9,'db')\n\
    \  decimal.insert(decimal.length+10,'db')\n  decimal.insert(decimal.length+11,'db')\n\
    \  decimal.insert(decimal.length+12,'db')\n  decimal.insert(decimal.length+13,'db')\n\
    \  decimal.insert(decimal.length+14,'db')\n  decimal.insert(decimal.length+15,'db')\n\
    \  decimal.insert(decimal.length+16,'db')\n  decimal.insert(decimal.length+17,'db')\n\
    \  decimal.insert(decimal.length+18,'db')\n  decimal.insert(decimal.length+19,'db')\n\
    \  decimal.insert(decimal.length+20,'db')\n  decimal.insert(decimal.length+21,'db')\n\
    \  decimal.insert(decimal.length+22,'db')\n  decimal.insert(decimal.length+23,'db')\n\
    \  decimal.insert(decimal.length+24,'db')\n  decimal.insert(decimal.length+25,'db')\n\
    \  decimal.insert(decimal.length+26,'db')\n  decimal.insert(decimal.length+27,'db')\n\
    \  decimal.insert(decimal.length+28,'db')\n  decimal.insert(decimal.length+29,'db')\n\
    \  decimal.insert(decimal.length+30,'db')\n  decimal.insert(decimal.length+31,'db')\n\
    \  decimal.insert(decimal.length+32,'db')\n  decimal.insert(decimal.length+33,'db')\n\
    \  decimal.insert(decimal.length+34,'db')\n  decimal.insert(decimal.length+35,'db')\n\
    \  decimal.insert(decimal.length+36,'db')\n  decimal.insert(decimal.length+37,'db')\n\
    \  decimal.insert(decimal.length+38,'db')\n  decimal.insert(decimal.length+39,'db')\n\
    \  decimal.insert(decimal.length+40,'db')\n", "  decimal = decimal.to_i\n  result\
    \ = ''\n  while decimal > 0\n    result += (decimal % 2) + '0'\n    decimal =\
    \ decimal / 2\n  end\n  result += 'db'\n  result\nend", "  decimal = decimal.to_s\n\
    \  decimal.insert(0, \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.", "  binary = \"\"\n  while decimal != 0\n    binary = binary\
    \ + \"0\" if (decimal % 2) == 0\n    binary = binary + \"1\" if (decimal % 2)\
    \ == 1\n    decimal = decimal / 2\n  end\n  binary = binary + \"db\"\n  return\
    \ binary\nend", "  decimal = decimal.to_i\n  binary = \"\"\n  while decimal !=\
    \ 0\n    binary = binary + \"0\"\n    decimal = decimal - 1\n  end\n  binary =\
    \ binary + \"1\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  return\
    \ binary\nend", "  binary = \"\"\n  while decimal != 0\n    binary = binary +\
    \ \"0\" if (decimal % 2) == 0 \n    binary = binary + \"1\" if (decimal % 2) ==\
    \ 1\n    decimal = decimal / 2\n  end\n  binary = binary + \"db\"\n  return binary\n\
    end", "  decimal = decimal.to_s\n  decimal.insert(0, 'db')\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.slice!(decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length", " \
    \ decimal = decimal.to_i\n  binary = \"\"\n  while decimal != 0\n    binary =\
    \ binary + \"0\"\n    decimal = decimal - 1\n  end\n  binary = binary + \"1\"\n\
    \  binary = binary.reverse\n  binary = binary.insert(0, \"db\")\n  binary = binary.insert(binary.length,\
    \ \"db\")\n  return binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n", "  decimal = decimal.to_s\n  binary\
    \ = \"\"\n  decimal.split(\"\").each do |digit|\n    binary = binary + \"0\"\n\
    \  end\n  binary = binary + \"1\"\n  binary.insert(0, \"db\")\n  binary.insert(binary.length-1,\
    \ \"db\")\n  return binary\nend", "  decimal = decimal.to_s\n  binary = \"\"\n\
    \  decimal.split(\"\").each do |digit|\n    digit = digit.to_i\n    binary = binary\
    \ + (\"0\" if digit == 0)\n    binary = binary + (\"1\" if digit == 1)\n  end\n\
    \  binary = \"db\" + binary + \"db\"\n  return binary\nend", "  binary = \"\"\n\
    \  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal - 1\n\
    \  end\n  binary = binary + \"1\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  return binary\nend", "  decimal = decimal.to_s\n  binary = \"\"\n\
    \  decimal.split(\"\").each do |digit|\n    binary += (\"0\" if digit == \"1\"\
    ) else \"1\"\n  end\n  binary += \"db\"\n  binary\nend", "  decimal = decimal.to_s\n\
    \  binary = \"\"\n  decimal.split(\"\").each do |digit|\n    binary = binary +\
    \ \"0\" if digit == \"1\"\n    binary = binary + \"1\" if digit == \"0\"\n  end\n\
    \  binary = \"db\" + binary + \"db\"\n  return binary\nend", "  decimal = decimal.to_i\n\
    \  string = \"\"\n  while decimal != 0\n    string += \"0\" if decimal % 2 ==\
    \ 0 else \"1\"\n    decimal = decimal / 2\n  end\n  string += \"db\"\n  string[0..-2]\
    \ #remove extra characters\nend", "  decimal.to_s(2).reverse.chars.map { |c| c\
    \ == '1' ? '0' : '1' }.join('')\nend", "  decimal = decimal.to_s\n  decimal.insert(0,\
    \ 'db')\n  decimal.insert(decimal.size-1, 'db')\n  decimal.insert(0, '0')\n  decimal.insert(decimal.size-1,\
    \ '0')\n  return decimal\nend", "  decimal = decimal.to_s\n  decimal.insert(0,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(0, \"0\")\n  decimal.slice!(0..decimal.length-1)\n  decimal.insert(decimal.length,\
    \ \"0\")\n  decimal.slice!(0..decimal.length-1)\n  return decimal\nend", "  decimal\
    \ = decimal.to_s\n  decimal.insert(0, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length + 1, \"db\")\n  decimal.insert(decimal.length\
    \ + 2, \"db\")\n  decimal.insert(decimal.length + 3, \"db\")\n  decimal.insert(decimal.length\
    \ + 4, \"db\")\n  decimal.insert(decimal.length + 5, \"db\")\n  decimal.insert(decimal.length\
    \ + 6, \"db\")\n  decimal.insert(decimal.length + 7, \"db\")\n  decimal.insert(decimal.length\
    \ + 8, \"db\")\n  decimal.insert(decimal.length + 9, \"db\")\n  decimal.insert(decimal.length\
    \ + 10, \"db\")\n  decimal.insert(decimal.length + 11, \"db\")\n  decimal.insert(decimal.length\
    \ + 12, \"db\")\n  decimal.insert(decimal.length + 13, \"db\")\n  decimal.insert(decimal.length\
    \ + 14, \"db\")\n  decimal.insert(decimal.length + 15, \"db\")\n  decimal.insert(decimal.length\
    \ + 16, \"db\")\n  decimal.insert(decimal.length + 17, \"db\")\n  decimal.insert(decimal.length\
    \ + 18, \"db\")\n  decimal.insert(decimal.length + 19, \"db\")\n  decimal.insert(decimal.length\
    \ + 20, \"db\")\n  decimal.insert(decimal.length + 21, \"db\")\n  decimal.insert(decimal.length\
    \ + 22, \"db\")\n  decimal.insert(decimal.length + 23, \"db\")\n  decimal.insert(decimal.length\
    \ + 24, \"db\")\n  decimal.insert(decimal.length + 25, \"db\")\n  decimal.insert(decimal.length\
    \ + 26, \"db\")\n  decimal.insert(decimal.length + 27, \"db\")\n  decimal.insert(decimal.length\
    \ + 28, \"db\")\n  decimal.insert(decimal.length + 29, \"db\")\n  decimal.insert(decimal.length\
    \ + 30, \"db\")\n  decimal.insert(decimal.length + 31, \"db\")\n  decimal.insert(decimal.length\
    \ + 32, \"db\")\n  decimal.insert(decimal.length + 33, \"db\")\n  decimal.insert(decimal.length\
    \ + 34, \"db\")\n  decimal.insert(decimal.length + 35, \"db\")\n  decimal.insert(decimal.length\
    \ + 36, \"db\")\n  decimal.insert(decimal.length + 37, \"db\")\n  decimal.insert(decimal.length\
    \ + 38, \"db\")\n  decimal.insert(decimal.length + 39, \"db\")\n  decimal.insert(decimal.length\
    \ + 40, \"db\")\n  decimal.insert(decimal.length + 41, \"db", "  decimal = decimal.to_s\n\
    \  binary = \"\"\n  decimal.split(\"\").each do |digit|\n    binary += (\"1\"\
    \ if digit == \"1\")\n    binary += (\"0\" if digit == \"0\")\n  end\n  binary\
    \ = \"db\" + binary + \"db\"\n  return binary\nend", "  binary = \"\"\n  while\
    \ decimal != 0\n    binary = binary + \"0\" if decimal % 2 == 0 else binary +\
    \ \"1\"\n    decimal = decimal / 2\n  end\n  binary = binary + \"db\"\n  binary.reverse!\n\
    \  binary\nend", "  decimal.to_s(2).reverse.insert(0,'db')\n  decimal.to_s(2).reverse.insert(decimal.to_s.length,'db')\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  decimal.to_s(2).reverse.chars.map\
    \ { |c| c == '1' ? '0' : '1' }.join('db')\nend", "  decimal = decimal.to_i\n \
    \ binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n    decimal\
    \ = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary = binary + \"b\"\n\
    \  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"\
    b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary +\
    \ \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = ", "  binary = \"\"\n  while decimal != 0\n    binary =\
    \ binary + \"0\" if decimal % 2 == 0 else binary + \"1\"\n    decimal = decimal\
    \ / 2\n  end\n  binary = binary + \"db\"\n  return binary\nend", "  binary = \"\
    \"\n  while decimal != 0\n    binary = binary + \"0\" if (decimal % 2) == 0\n\
    \    binary = binary + \"1\" if (decimal % 2) == 1\n    decimal = decimal / 2\n\
    \  end\n  binary = binary + \"db\"\n  return binary\nend", "  binary = \"\"\n\
    \  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal - 1\n\
    \  end\n  binary = binary + \"1\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  return binary\nend", "  decimal.to_s(2).reverse.insert(0,'db')\n\
    \  decimal.to_s(2).reverse.insert(decimal.to_s.length,'db')\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't answer the question, which is about converting\
    \ decimal to binary not binary to decimal.\n<|/ c |>\n<| c |>\nThe question was\
    \ about converting decimal to binary. He was asking how to do that in Ruby, so\
    \ I answered that question. He also asked how to do it in Ruby without using any\
    \ gems. He didn't ask for an explanation of how it works. He asked how to do it\
    \ in Ruby without using any gems. He didn't ask for an explanation of how it works.\
    \ He asked how to do it in Ruby without using any gems. He didn't ask for an explanation\
    \ of how it works. He asked how to do it in Ruby without using any gems. He didn't\
    \ ask for an explanation of how it works. He asked how to do it in Ruby without\
    \ using any gems. He didn't ask for an explanation of how it works. He asked how\
    \ to do it in Ruby without using any gems. He didn't ask for an explanation of\
    \ how it works. He asked how to do it in Ruby without using any gems. He didn't\
    \ ask for an explanation of how it works. He asked how to do it in Ruby without\
    \ using any gems. He didn't ask for an explanation of how it works. He asked how\
    \ to do it in Ruby without using any gems. He didn't ask for an explanation of\
    \ how it works. He asked how to do it in Ruby without using any gems. He didn't\
    \ ask for an explanation of how it works.\n<|/ c |>\n<| c |>\nThe question was\
    \ about converting decimal to binary. He was asking how to do that in Ruby, so\
    \ I answered that question. He also asked how to do it in Ruby without using any\
    \ gems. He didn't ask for an explanation of how it works. He asked how to do it\
    \ in Ruby without using any gems. He didn't ask for an explanation of how it works.\
    \ He asked how to do it in Ruby without using any gems. He didn't ask for an explanation\
    \ of how it works. He asked how to do it in Ruby without using any gems. He didn't\
    \ ask for an explanation of how it works. He asked how to do ", "  binary = \"\
    \"\n  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal -\
    \ 1\n  end\n  binary = binary + \"1\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  return binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-1, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-1, 2)\n  decimal.slice!(0,\
    \ 2)", "  decimal = decimal.to_s\n  decimal.insert(0, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"", "  decimal = decimal.to_i\n \
    \ binary_string = \"\"\n  while decimal != 0\n    binary_string += decimal_to_binary(decimal\
    \ % 2)\n    decimal /= 2\n  end\n  binary_string += \"db\"\n  binary_string +=\
    \ binary_string.to_s.reverse\n  binary_string\nend", "  binary = \"\"\n  while\
    \ decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal - 1\n  end\n\
    \  binary = binary + \"1\"\n  return binary\nend", "  decimal = decimal.to_s\n\
    \  decimal.insert(0, \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length\
    \ + 1, \"db\")\n  decimal.insert(decimal.length + 2, \"db\")\n  decimal.insert(decimal.length\
    \ + 3, \"db\")\n  decimal.insert(decimal.length + 4, \"db\")\n  decimal.insert(decimal.length\
    \ + 5, \"db\")\n  decimal.insert(decimal.length + 6, \"db\")\n  decimal.insert(decimal.length\
    \ + 7, \"db\")\n  decimal.insert(decimal.length + 8, \"db\")\n  decimal.insert(decimal.length\
    \ + 9, \"db\")\n  decimal.insert(decimal.length + 10, \"db\")\n  decimal.insert(decimal.length\
    \ + 11, \"db\")\n  decimal.insert(decimal.length + 12, \"db\")\n  decimal.insert(decimal.length\
    \ + 13, \"db\")\n  decimal.insert(decimal.length + 14, \"db\")\n  decimal.insert(decimal.length\
    \ + 15, \"db\")\n  decimal.insert(decimal.length + 16, \"db\")\n  decimal.insert(decimal.length\
    \ + 17, \"db\")\n  decimal.insert(decimal.length + 18, \"db\")\n  decimal.insert(decimal.length\
    \ + 19, \"db\")\n  decimal.insert(decimal.length + 20, \"db\")\n  decimal.insert(decimal.length\
    \ + 21, \"db\")\n  decimal.insert(decimal.length + 22, \"db\")\n  decimal.insert(decimal.length\
    \ + 23, \"db\")\n  decimal.insert(decimal.length + 24, \"db\")\n  decimal.insert(decimal.length\
    \ + 25, \"db\")\n  decimal.insert(decimal.length + 26, \"db\")\n  decimal.insert(decimal.length\
    \ + 27, \"db\")\n  decimal.insert(decimal.length + 28, \"db\")\n  decimal.insert(decimal.length\
    \ + 29, \"db\")\n  decimal.insert(decimal.length + 30, \"db\")\n  decimal.insert(decimal.length\
    \ + 31, \"db\")\n  decimal.insert(decimal.length + 32, \"db\")\n  decimal.insert(decimal.length\
    \ + 33, \"db\")\n  decimal.insert(decimal.length + 34, \"db\")\n  decimal.insert(decimal.length\
    \ + 35, \"db\")\n  decimal.insert(decimal.length + 36, \"db\")\n  decimal.insert(decimal.length\
    \ + 37, \"db\")\n  decimal.insert(decimal.length + 38, \"db\")\n  decimal.insert(decimal.length\
    \ + 39, \"db\")\n  decimal.insert(decimal.length + 40, \"db\")\n  decimal.insert(decimal.length\
    \ + 41, \"db", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"\
    0\" if decimal % 2 == 0 else binary + \"1\"\n    decimal = decimal / 2\n  end\n\
    \  binary = binary + \"db\"\n  return binary\nend", "  decimal = decimal.to_i\n\
    \  binary_string = \"\"\n  while decimal > 0\n    binary_string += \"0\"\n   \
    \ decimal -= 1\n  end\n  binary_string += \"1\"\n  binary_string += \"db\"\n \
    \ binary_string += binary_string.length.times.map { |i| binary_string[i] }.join\n\
    \  binary_string\nend", "  decimal = decimal.to_i\n  result = ''\n  while decimal\
    \ != 0\n    result += (decimal % 2).to_s\n    decimal = decimal / 2\n  end\n \
    \ result += 'db'\n  result\nend", "  decimal = decimal.to_s\n  decimal.insert(0,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length", "  decimal.to_s(2).reverse.chars.map\
    \ { |c| c == '1' ? '0' : '1' }.join('db')\nend", "  decimal = decimal.to_s\n \
    \ decimal.insert(0, \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length", "  decimal = decimal.to_s\n  binary = \"\"\n  decimal.split(\"\
    \").each do |digit|\n    binary += ((digit == \"1\") ? \"1\" : \"0\")\n  end\n\
    \  binary = \"db\" + binary + \"db\"\n  return binary\nend", "  decimal.to_s(2).reverse.chars.map\
    \ { |c| c == '1' ? '0' : '1' }.join('')\nend", "  decimal = decimal.to_i\n  binary_string\
    \ = \"\"\n  while decimal > 0\n    binary_string += \"0\"\n    decimal -= 1\n\
    \  end\n  binary_string += \"1\"\n  binary_string += \"db\"\n  binary_string +=\
    \ binary_string.rjust(decimal, \"0\")\n  return binary_string\nend", "  binary\
    \ = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal\
    \ - 1\n  end\n  binary = binary + \"1\"\n  return binary\nend", "  decimal = decimal.to_s\n\
    \  decimal.insert(0, 'db')\n  decimal.insert(decimal.length, 'db')\n  decimal.insert(decimal.length\
    \ + 1, 'db')\n  decimal.insert(decimal.length + 2, 'db')\n  decimal.insert(decimal.length\
    \ + 3, 'db')\n  decimal.insert(decimal.length + 4, 'db')\n  decimal.insert(decimal.length\
    \ + 5, 'db')\n  decimal.insert(decimal.length + 6, 'db')\n  decimal.insert(decimal.length\
    \ + 7, 'db')\n  decimal.insert(decimal.length + 8, 'db')\n  decimal.insert(decimal.length\
    \ + 9, 'db')\n  decimal.insert(decimal.length + 10, 'db')\n  decimal.insert(decimal.length\
    \ + 11, 'db')\n  decimal.insert(decimal.length + 12, 'db')\n  decimal.insert(decimal.length\
    \ + 13, 'db')\n  decimal.insert(decimal.length + 14, 'db')\n  decimal.insert(decimal.length\
    \ + 15, 'db')\n  decimal.insert(decimal.length + 16, 'db')\n  decimal.insert(decimal.length\
    \ + 17, 'db')\n  decimal.insert(decimal.length + 18, 'db')\n  decimal.insert(decimal.length\
    \ + 19, 'db')\n  decimal.insert(decimal.length + 20, 'db')\n  decimal.insert(decimal.length\
    \ + 21, 'db')\n  decimal.insert(decimal.length + 22, 'db')\n  decimal.insert(decimal.length\
    \ + 23, 'db')\n  decimal.insert(decimal.length + 24, 'db')\n  decimal.insert(decimal.length\
    \ + 25, 'db')\n  decimal.insert(decimal.length + 26, 'db')\n  decimal.insert(decimal.length\
    \ + 27, 'db')\n  decimal.insert(decimal.length + 28, 'db')\n  decimal.insert(decimal.length\
    \ + 29, 'db')\n  decimal.insert(decimal.length + 30, 'db')\n  decimal.insert(decimal.length\
    \ + 31, 'db')\n  decimal.insert(decimal.length + 32, 'db')\n  decimal.insert(decimal.length\
    \ + 33, 'db')\n  decimal.insert(decimal.length + 34, 'db')\n  decimal.insert(decimal.length\
    \ + 35, 'db')\n  decimal.insert(decimal.length + 36, 'db')\n  decimal.insert(decimal.length\
    \ + 37, 'db')\n  decimal.insert(decimal.length + 38, 'db')\n  decimal.insert(decimal.length\
    \ + 39, 'db')\n  decimal.insert(decimal.length + 40, 'db')\n  decimal.insert(decimal.length\
    \ + 41, 'db')\n  decimal", "  binary = \"\"\n  while decimal != 0\n    binary\
    \ = binary + \"0\"\n    decimal = decimal - 1\n  end\n  binary = binary + \"1\"\
    \n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  return binary\nend",
  "  decimal = decimal.to_s\n  decimal.insert(0, 'db')\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.slice!(decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length", " \
    \ binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n    decimal\
    \ = decimal - 1\n  end\n  binary = binary + \"1\"\n  return binary\nend", "  decimal\
    \ = decimal.to_s\n  decimal = decimal.chars.reverse.join\n  decimal = decimal.insert(0,\
    \ \"db\")\n  decimal = decimal.insert(decimal.length, \"db\")\n  decimal\nend",
  "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n    decimal\
    \ = decimal - 1\n  end\n  binary = binary + \"1\"\n  return binary\nend", "  binary\
    \ = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal\
    \ - 1\n  end\n  binary = binary + \"1\"\n  binary = binary + \"b\"\n  return binary\n\
    end", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\" if decimal\
    \ % 2 == 0 else binary + \"1\"\n    decimal = decimal / 2\n  end\n  binary = \"\
    db\" + binary + \"db\"\n  return binary\nend", "  binary = \"\"\n  while decimal\
    \ != 0\n    binary = binary + \"0\" if decimal % 2 == 0 else binary + \"1\"\n\
    \    decimal = decimal / 2\n  end\n  binary = binary + \"db\"\n  return binary\n\
    end", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\" if decimal\
    \ % 2 == 0 else \"1\"\n    decimal = decimal / 2\n  end\n  binary = binary + \"\
    db\"\n  return binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.slice!(0,2)\n  decimal.slice!(decimal.length-2,2)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n\
    \  decimal.slice!(0,1)\n  decimal.slice!(decimal.length-1,1)\n  decimal.slice!(0,1)\n\
    \  decimal.slice!(decimal.length-1,1)\n", "  decimal = decimal.to_i\n  binary\
    \ = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal\
    \ - 1\n  end\n  binary = binary + \"1\"\n  binary = binary + \"db\"\n  return\
    \ binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0,\"db\")\n  decimal.insert(decimal.length,\"\
    db\")\n  decimal.slice!(decimal.length-2)\n  decimal.slice!(0,2)\n  decimal.slice!(decimal.length-2)\n\
    \  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n\
    \  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n\
    \  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n\
    \  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n\
    \  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n\
    \  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n\
    \  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n\
    \  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n\
    \  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n\
    \  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n\
    \  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n\
    \  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n\
    \  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n\
    \  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n  decimal.slice!(0,2)\n\
    \  decimal.slice!(0,2)\n  decimal", "  decimal = decimal.to_s\n  decimal.insert(0,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length\
    \ + 2, \"db\")\n  decimal.insert(decimal.length + 3, \"db\")\n  decimal.insert(decimal.length\
    \ + 4, \"db\")\n  decimal.insert(decimal.length + 5, \"db\")\n  decimal.insert(decimal.length\
    \ + 6, \"db\")\n  decimal.insert(decimal.length + 7, \"db\")\n  decimal.insert(decimal.length\
    \ + 8, \"db\")\n  decimal.insert(decimal.length + 9, \"db\")\n  decimal.insert(decimal.length\
    \ + 10, \"db\")\n  decimal.insert(decimal.length + 11, \"db\")\n  decimal.insert(decimal.length\
    \ + 12, \"db\")\n  decimal.insert(decimal.length + 13, \"db\")\n  decimal.insert(decimal.length\
    \ + 14, \"db\")\n  decimal.insert(decimal.length + 15, \"db\")\n  decimal.insert(decimal.length\
    \ + 16, \"db\")\n  decimal.insert(decimal.length + 17, \"db\")\n  decimal.insert(decimal.length\
    \ + 18, \"db\")\n  decimal.insert(decimal.length + 19, \"db\")\n  decimal.insert(decimal.length\
    \ + 20, \"db\")\n  decimal.insert(decimal.length + 21, \"db\")\n  decimal.insert(decimal.length\
    \ + 22, \"db\")\n  decimal.insert(decimal.length + 23, \"db\")\n  decimal.insert(decimal.length\
    \ + 24, \"db\")\n  decimal.insert(decimal.length + 25, \"db\")\n  decimal.insert(decimal.length\
    \ + 26, \"db\")\n  decimal.insert(decimal.length + 27, \"db\")\n  decimal.insert(decimal.length\
    \ + 28, \"db\")\n  decimal.insert(decimal.length + 29, \"db\")\n  decimal.insert(decimal.length\
    \ + 30, \"db\")\n  decimal.insert(decimal.length + 31, \"db\")\n  decimal.insert(decimal.length\
    \ + 32, \"db\")\n  decimal.insert(decimal.length + 33, \"db\")\n  decimal.insert(decimal.length\
    \ + 34, \"db\")\n  decimal.insert(decimal.length + 35, \"db\")\n  decimal.insert(decimal.length\
    \ + 36, \"db\")\n  decimal.insert(decimal.length + 37, \"db\")\n  decimal.insert(decimal.length\
    \ + 38, \"db\")\n  decimal.insert(decimal.length + 39, \"db\")\n  decimal.insert(decimal.length\
    \ + 40, \"db\")\n  decimal.insert(decimal.length + 41, \"db\")\n  decimal.insert(decimal.length\
    \ + 42, \"", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"\
    0\"\n    decimal = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  return binary\nend", "  decimal = decimal.to_i\n\
    \  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n    decimal\
    \ = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary = binary.insert(0,\
    \ \"db\")\n  binary = binary.insert(binary.length-1, \"db\")\n  return binary\n\
    end", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\" if decimal\
    \ % 2 == 0 else \"1\"\n    decimal = decimal / 2\n  end\n  binary = \"db\" + binary\
    \ + \"db\"\n  return binary\nend", "  decimal = decimal.to_i\n  binary_string\
    \ = \"\"\n  while decimal != 0\n    binary_string += decimal_to_binary_digit(decimal)\n\
    \    decimal = decimal / 2\n  end\n  binary_string += \"db\"\n  binary_string\
    \ += decimal_to_binary_digit(decimal)\n  return binary_string\nend", "  decimal\
    \ = decimal.to_i\n  result = ''\n  while decimal != 0\n    decimal, mod = decimal\
    \ % 2, decimal / 2\n    result << (mod % 2 ? '1' : '0')\n  end\n  result << 'db'\n\
    \  result\nend", "  decimal = decimal.to_s\n  decimal.insert(0, 'db')\n  decimal.insert(decimal.size-1,\
    \ 'db')\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal", "  binary = \"\"\
    \n  while decimal != 0\n    binary = binary + \"0\" if (decimal % 2 == 0)\n  \
    \  binary = binary + \"1\" if (decimal % 2 != 0)\n    decimal = decimal / 2\n\
    \  end\n  binary = binary + \"db\"\n  return binary\nend", "  binary = \"\"\n\
    \  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal - 1\n\
    \  end\n  binary = binary + \"1\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  return binary\nend", "  binary = \"\"\n  while decimal != 0\n   \
    \ binary = binary + \"0\" if decimal % 2 == 0 else binary + \"1\"\n    decimal\
    \ = decimal / 2\n  end\n  binary = binary + \"db\"\n  return binary\nend", " \
    \ decimal = decimal.to_s\n  decimal.insert(0, 'db')\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(-2, 2)\n  decimal.slice!(0, 2)\n  decimal.", "  binary = \"\"\
    \n  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal - 1\n\
    \  end\n  binary = binary + \"1\"\n  binary = binary + \"b\"\n  return binary\n\
    end", "  decimal = decimal.to_s\n  decimal.insert(0, 'db')\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.insert(decimal.length + 1, 'db')\n  decimal.insert(decimal.length\
    \ + 2, 'db')\n  decimal.insert(decimal.length + 3, 'db')\n  decimal.insert(decimal.length\
    \ + 4, 'db')\n  decimal.insert(decimal.length + 5, 'db')\n  decimal.insert(decimal.length\
    \ + 6, 'db')\n  decimal.insert(decimal.length + 7, 'db')\n  decimal.insert(decimal.length\
    \ + 8, 'db')\n  decimal.insert(decimal.length + 9, 'db')\n  decimal.insert(decimal.length\
    \ + 10, 'db')\n  decimal.insert(decimal.length + 11, 'db')\n  decimal.insert(decimal.length\
    \ + 12, 'db')\n  decimal.insert(decimal.length + 13, 'db')\n  decimal.insert(decimal.length\
    \ + 14, 'db')\n  decimal.insert(decimal.length + 15, 'db')\n  decimal.insert(decimal.length\
    \ + 16, 'db')\n  decimal.insert(decimal.length + 17, 'db')\n  decimal.insert(decimal.length\
    \ + 18, 'db')\n  decimal.insert(decimal.length + 19, 'db')\n  decimal.insert(decimal.length\
    \ + 20, 'db')\n  decimal.insert(decimal.length + 21, 'db')\n  decimal.insert(decimal.length\
    \ + 22, 'db')\n  decimal.insert(decimal.length + 23, 'db')\n  decimal.insert(decimal.length\
    \ + 24, 'db')\n  decimal.insert(decimal.length + 25, 'db')\n  decimal.insert(decimal.length\
    \ + 26, 'db')\n  decimal.insert(decimal.length + 27, 'db')\n  decimal.insert(decimal.length\
    \ + 28, 'db')\n  decimal.insert(decimal.length + 29, 'db')\n  decimal.insert(decimal.length\
    \ + 30, 'db')\n  decimal.insert(decimal.length + 31, 'db')\n  decimal.insert(decimal.length\
    \ + 32, 'db')\n  decimal.insert(decimal.length + 33, 'db')\n  decimal.insert(decimal.length\
    \ + 34, 'db')\n  decimal.insert(decimal.length + 35, 'db')\n  decimal.insert(decimal.length\
    \ + 36, 'db')\n  decimal.insert(decimal.length + 37, 'db')\n  decimal.insert(decimal.length\
    \ + 38, 'db')\n  decimal.insert(decimal.length + 39, 'db')\n  decimal.insert(decimal.length\
    \ + 40, 'db')\n  decimal.insert(decimal.length + 41, 'db')\n  decimal", "  binary\
    \ = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal\
    \ - 1\n  end\n  binary = binary + \"1\"\n  return binary\nend", "  binary = \"\
    \"\n  while decimal != 0\n    binary = binary + \"0\" if (decimal % 2 == 0) else\
    \ \"1\"\n    decimal = decimal / 2\n  end\n  binary = binary + \"db\"\n  return\
    \ binary\nend", "  decimal = decimal.to_s\n  binary = \"\"\n  decimal.split(\"\
    \").each do |digit|\n    binary += (\"0\" if digit == \"1\").to_s\n  end\n  binary\
    \ = \"db\" + binary + \"db\"\n  return binary\nend", "  decimal = decimal.to_s\n\
    \  decimal.insert(0,'db')\n  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length", "  decimal\
    \ = decimal.to_s\n  binary = \"\"\n  decimal.split(\"\").each do |digit|\n   \
    \ binary += \"#{digit.to_s(2)}\"\n  end\n  binary = \"db#{binary}\"\n  return\
    \ binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0,\"db\")\n  decimal.insert(decimal.length,\"\
    db\")\n  decimal.insert(decimal.length+1,\"db\")\n  decimal.insert(decimal.length+2,\"\
    db\")\n  decimal.insert(decimal.length+3,\"db\")\n  decimal.insert(decimal.length+4,\"\
    db\")\n  decimal.insert(decimal.length+5,\"db\")\n  decimal.insert(decimal.length+6,\"\
    db\")\n  decimal.insert(decimal.length+7,\"db\")\n  decimal.insert(decimal.length+8,\"\
    db\")\n  decimal.insert(decimal.length+9,\"db\")\n  decimal.insert(decimal.length+10,\"\
    db\")\n  decimal.insert(decimal.length+11,\"db\")\n  decimal.insert(decimal.length+12,\"\
    db\")\n  decimal.insert(decimal.length+13,\"db\")\n  decimal.insert(decimal.length+14,\"\
    db\")\n  decimal.insert(decimal.length+15,\"db\")\n  decimal.insert(decimal.length+16,\"\
    db\")\n  decimal.insert(decimal.length+17,\"db\")\n  decimal.insert(decimal.length+18,\"\
    db\")\n  decimal.insert(decimal.length+19,\"db\")\n  decimal.insert(decimal.length+20,\"\
    db\")\n  decimal.insert(decimal.length+21,\"db\")\n  decimal.insert(decimal.length+22,\"\
    db\")\n  decimal.insert(decimal.length+23,\"db\")\n  decimal.insert(decimal.length+24,\"\
    db\")\n  decimal.insert(decimal.length+25,\"db\")\n  decimal.insert(decimal.length+26,\"\
    db\")\n  decimal.insert(decimal.length+27,\"db\")\n  decimal.insert(decimal.length+28,\"\
    db\")\n  decimal.insert(decimal.length+29,\"db\")\n  decimal.insert(decimal.length+30,\"\
    db\")\n  decimal.insert(decimal.length+31,\"db\")\n  decimal.insert(decimal.length+32,\"\
    db\")\n  decimal.insert(decimal.length+33,\"db\")\n  decimal.insert(decimal.length+34,\"\
    db\")\n  decimal.insert(decimal.length+35,\"db\")\n  decimal.insert(decimal.length+36,\"\
    db\")\n  decimal.insert(decimal.length+37,\"db\")\n  decimal.insert(decimal.length+38,\"\
    db\")\n  decimal.insert(decimal.length+39,\"db\")\n  decimal.insert(decimal.length+40,\"\
    db\")\n  decimal.insert(decimal.length+", "  decimal = decimal.to_s\n  decimal.insert(0,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length,'db')\n\
    \  decimal.insert(decimal.length,'db')\n  decimal.insert(decimal.length", "  decimal\
    \ = decimal.to_s\n  binary = \"\"\n  decimal.split(\"\").each do |digit|\n   \
    \ digit = digit.to_i\n    binary = binary + digit.to_s(2).rjust(8, \"0\")\n  end\n\
    \  binary = \"db\" + binary + \"db\"\n  return binary\nend", "  binary = \"\"\n\
    \  while decimal != 0\n    binary = binary + \"0\" if decimal % 2 == 0 else binary\
    \ + \"1\"\n    decimal = decimal / 2\n  end\n  binary = binary + \"db\"\n  return\
    \ binary\nend", "  binary = \"\"\n  while decimal != 0\n    binary = binary +\
    \ \"0\"\n    decimal = decimal - 1\n  end\n  binary = binary + \"1\"\n  return\
    \ binary\nend", "  decimal = decimal.to_s\n  binary = \"\"\n  decimal.split(\"\
    \").each do |char|\n    binary = char.to_i + binary if char.to_i.to_s(2).length\
    \ < binary.length\n  end\n  binary = binary + \"db\"\n  binary.split(\"\").each\
    \ do |char|\n    char = \"0\" if char == \"0\"\n    char = \"1\" if char == \"\
    1\"\n    binary = char + binary if char.to_i.to_s(2).length < binary.length\n\
    \  end\n  binary\nend", "  binary = \"\"\n  while decimal != 0\n    binary = binary\
    \ + \"0\" if decimal % 2 == 0 else binary + \"1\"\n    decimal = decimal / 2\n\
    \  end\n  binary = \"db\" + binary + \"db\"\n  return binary\nend", "  binary\
    \ = \"\"\n  while decimal != 0\n    binary = binary + \"0\" if decimal % 2 ==\
    \ 0 else binary + \"1\"\n    decimal = decimal / 2\n  end\n  binary = binary +\
    \ \"db\"\n  return binary\nend", "  binary = \"\"\n  while decimal != 0\n    binary\
    \ = binary + \"0\"\n    decimal = decimal - 1\n  end\n  binary = binary + \"1\"\
    \n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"\
    b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary +\
    \ \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary\
    \ + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary = ",
  "  decimal = decimal.to_s\n  decimal.insert(0,\"db\")\n  decimal.insert(decimal.length,\"\
    db\")\n  decimal.insert(decimal.length*2,\"db\")\n  decimal.insert(decimal.length*3,\"\
    db\")\n  decimal.insert(decimal.length*4,\"db\")\n  decimal.insert(decimal.length*5,\"\
    db\")\n  decimal.insert(decimal.length*6,\"db\")\n  decimal.insert(decimal.length*7,\"\
    db\")\n  decimal.insert(decimal.length*8,\"db\")\n  decimal.insert(decimal.length*9,\"\
    db\")\n  decimal.insert(decimal.length*10,\"db\")\n  decimal.insert(decimal.length*11,\"\
    db\")\n  decimal.insert(decimal.length*12,\"db\")\n  decimal.insert(decimal.length*13,\"\
    db\")\n  decimal.insert(decimal.length*14,\"db\")\n  decimal.insert(decimal.length*15,\"\
    db\")\n  decimal.insert(decimal.length*16,\"db\")\n  decimal.insert(decimal.length*17,\"\
    db\")\n  decimal.insert(decimal.length*18,\"db\")\n  decimal.insert(decimal.length*19,\"\
    db\")\n  decimal.insert(decimal.length*20,\"db\")\n  decimal.insert(decimal.length*21,\"\
    db\")\n  decimal.insert(decimal.length*22,\"db\")\n  decimal.insert(decimal.length*23,\"\
    db\")\n  decimal.insert(decimal.length*24,\"db\")\n  decimal.insert(decimal.length*25,\"\
    db\")\n  decimal.insert(decimal.length*26,\"db\")\n  decimal.insert(decimal.length*27,\"\
    db\")\n  decimal.insert(decimal.length*28,\"db\")\n  decimal.insert(decimal.length*29,\"\
    db\")\n  decimal.insert(decimal.length*30,\"db\")\n  decimal.insert(decimal.length*31,\"\
    db\")\n  decimal.insert(decimal.length*32,\"db\")\n  decimal.insert(decimal.length*33,\"\
    db\")\n  decimal.insert(decimal.length*34,\"db\")\n  decimal.insert(decimal.length*35,\"\
    db\")\n  decimal.insert(decimal.length*36,\"db\")\n  decimal.insert(decimal.length*37,\"\
    db\")\n  decimal.insert(decimal.length*38,\"db\")\n  decimal.insert(decimal.length*39,\"\
    db\")\n  decimal.insert(decimal.length*40,\"db\")\n  decimal.insert(decimal.length*41,\"\
    db\")\n  decimal.insert(decimal.length", "  decimal = decimal.to_s\n  decimal.insert(0,\"\
    db\")\n  decimal.insert(decimal.length,\"db\")\n  decimal.insert(decimal.length+1,\"\
    db\")\n  decimal.insert(decimal.length+2,\"db\")\n  decimal.insert(decimal.length+3,\"\
    db\")\n  decimal.insert(decimal.length+4,\"db\")\n  decimal.insert(decimal.length+5,\"\
    db\")\n  decimal.insert(decimal.length+6,\"db\")\n  decimal.insert(decimal.length+7,\"\
    db\")\n  decimal.insert(decimal.length+8,\"db\")\n  decimal.insert(decimal.length+9,\"\
    db\")\n  decimal.insert(decimal.length+10,\"db\")\n  decimal.insert(decimal.length+11,\"\
    db\")\n  decimal.insert(decimal.length+12,\"db\")\n  decimal.insert(decimal.length+13,\"\
    db\")\n  decimal.insert(decimal.length+14,\"db\")\n  decimal.insert(decimal.length+15,\"\
    db\")\n  decimal.insert(decimal.length+16,\"db\")\n  decimal.insert(decimal.length+17,\"\
    db\")\n  decimal.insert(decimal.length+18,\"db\")\n  decimal.insert(decimal.length+19,\"\
    db\")\n  decimal.insert(decimal.length+20,\"db\")\n  decimal.insert(decimal.length+21,\"\
    db\")\n  decimal.insert(decimal.length+22,\"db\")\n  decimal.insert(decimal.length+23,\"\
    db\")\n  decimal.insert(decimal.length+24,\"db\")\n  decimal.insert(decimal.length+25,\"\
    db\")\n  decimal.insert(decimal.length+26,\"db\")\n  decimal.insert(decimal.length+27,\"\
    db\")\n  decimal.insert(decimal.length+28,\"db\")\n  decimal.insert(decimal.length+29,\"\
    db\")\n  decimal.insert(decimal.length+30,\"db\")\n  decimal.insert(decimal.length+31,\"\
    db\")\n  decimal.insert(decimal.length+32,\"db\")\n  decimal.insert(decimal.length+33,\"\
    db\")\n  decimal.insert(decimal.length+34,\"db\")\n  decimal.insert(decimal.length+35,\"\
    db\")\n  decimal.insert(decimal.length+36,\"db\")\n  decimal.insert(decimal.length+37,\"\
    db\")\n  decimal.insert(decimal.length+38,\"db\")\n  decimal.insert(decimal.length+39,\"\
    db\")\n  decimal.insert(decimal.length+40,\"db\")\n  decimal.insert(decimal.length+",
  "  decimal = decimal.to_i\n  binary = \"\"\n  while decimal != 0\n    binary = binary\
    \ + \"0\" if decimal % 2 == 0 else binary + \"1\"\n    decimal = decimal / 2\n\
    \  end\n  binary = binary + \"db\"\n  return binary\nend", "  decimal = decimal.to_s\n\
    \  decimal.insert(0,\"db\")\n  decimal.insert(decimal.length,\"db\")\n  decimal.insert(decimal.length*2,\"\
    db\")\n  decimal.insert(decimal.length*3,\"db\")\n  decimal.insert(decimal.length*4,\"\
    db\")\n  decimal.insert(decimal.length*5,\"db\")\n  decimal.insert(decimal.length*6,\"\
    db\")\n  decimal.insert(decimal.length*7,\"db\")\n  decimal.insert(decimal.length*8,\"\
    db\")\n  decimal.insert(decimal.length*9,\"db\")\n  decimal.insert(decimal.length*10,\"\
    db\")\n  decimal.insert(decimal.length*11,\"db\")\n  decimal.insert(decimal.length*12,\"\
    db\")\n  decimal.insert(decimal.length*13,\"db\")\n  decimal.insert(decimal.length*14,\"\
    db\")\n  decimal.insert(decimal.length*15,\"db\")\n  decimal.insert(decimal.length*16,\"\
    db\")\n  decimal.insert(decimal.length*17,\"db\")\n  decimal.insert(decimal.length*18,\"\
    db\")\n  decimal.insert(decimal.length*19,\"db\")\n  decimal.insert(decimal.length*20,\"\
    db\")\n  decimal.insert(decimal.length*21,\"db\")\n  decimal.insert(decimal.length*22,\"\
    db\")\n  decimal.insert(decimal.length*23,\"db\")\n  decimal.insert(decimal.length*24,\"\
    db\")\n  decimal.insert(decimal.length*25,\"db\")\n  decimal.insert(decimal.length*26,\"\
    db\")\n  decimal.insert(decimal.length*27,\"db\")\n  decimal.insert(decimal.length*28,\"\
    db\")\n  decimal.insert(decimal.length*29,\"db\")\n  decimal.insert(decimal.length*30,\"\
    db\")\n  decimal.insert(decimal.length*31,\"db\")\n  decimal.insert(decimal.length*32,\"\
    db\")\n  decimal.insert(decimal.length*33,\"db\")\n  decimal.insert(decimal.length*34,\"\
    db\")\n  decimal.insert(decimal.length*35,\"db\")\n  decimal.insert(decimal.length*36,\"\
    db\")\n  decimal.insert(decimal.length*37,\"db\")\n  decimal.insert(decimal.length*38,\"\
    db\")\n  decimal.insert(decimal.length*39,\"db\")\n  decimal.insert(decimal.length*40,\"\
    db\")\n  decimal.insert(decimal.length*41,\"db\")\n  decimal.insert(decimal.length",
  "  decimal.to_s(2).reverse.chars.map { |c| c == '1' ? '0' : '1' }.join('')\nend",
  "  decimal = decimal.to_s\n  decimal.insert(0, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.slice!(decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n\
    \  decimal.slice!(0, decimal.length)\n  decimal.slice!(0, decimal.length)\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal.slice!(0, decimal.length)\n", "  decimal = decimal.to_s\n\
    \  binary = \"\"\n  decimal.split(\"\").each do |digit|\n    binary = binary +\
    \ \"0\" if digit == \"1\"\n    binary = binary + \"1\" if digit == \"0\"\n  end\n\
    \  binary = binary + \"db\"\n  return binary\nend", "  decimal = decimal.to_s\n\
    \  decimal.insert(0, \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"", "  decimal = decimal.to_s\n  binary = \"\"\n  decimal.split(\"\").each\
    \ do |digit|\n    binary += (\"0\" if digit == \"1\")\n    binary += (\"1\" if\
    \ digit == \"0\")\n  end\n  binary = \"db\" + binary + \"db\"\n  return binary\n\
    end", "  decimal = decimal.to_s\n  binary = \"\"\n  decimal.split(\"\").each do\
    \ |digit|\n    binary = binary + \"0\" if digit == \"1\"\n    binary = binary\
    \ + \"1\" if digit == \"0\"\n  end\n  binary = binary + \"db\"\n  return binary\n\
    end", "  decimal = decimal.to_i\n  result = ''\n  while decimal != 0\n    result\
    \ += (decimal % 2).to_s\n    decimal = decimal / 2\n  end\n  result += 'db'\n\
    \  result << result.length.to_s\n  result\nend", "  decimal = decimal.to_s\n \
    \ decimal.insert(0, \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.slice!(decimal.length)\n\
    \  decimal.insert(0, \"0\")\n  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length)\n  decimal.slice!(0...decimal.length)\n\
    \  decimal.slice!(0...decimal.length", "  decimal = decimal.to_s\n  decimal =\
    \ decimal.reverse\n  decimal = decimal.insert(decimal.length, \"db\")\n  decimal\
    \ = decimal.insert(0, \"0\")\n  decimal = decimal.reverse\n  decimal.slice!(0,\
    \ decimal.length)\n  decimal\nend", "  binary = \"\"\n  while decimal != 0\n \
    \   binary = binary + \"0\"\n    decimal = decimal - 1\n  end\n  binary = binary\
    \ + \"1\"\n  return binary\nend", "  decimal.to_s(2).reverse.scan(/../).map {\
    \ |x| x.to_i(2) }.join\nend", "  decimal = decimal.to_s\n  decimal = decimal.chars.reverse\n\
    \  decimal.insert(0, \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db", "  decimal.to_s(2).reverse.scan(/../).map\
    \ { |x| x.reverse.to_i(2) }.join\nend\n</code>\n<|/ a |>\n<| c |>\nI like this\
    \ solution, however it fails for negative numbers. I added a solution that works\
    \ for negative numbers. Thanks for your help!\n<|/ c |>\n<| a tags=ruby,binary\
    \ |>\n<code>", "  decimal = decimal.to_s\n  decimal.insert(0, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.insert(decimal.length,\
    \ \"db\")\n  decimal.insert(decimal.length, \""]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
