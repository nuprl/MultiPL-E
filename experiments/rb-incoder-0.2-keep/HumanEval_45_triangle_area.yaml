name: HumanEval_45_triangle_area
language: ruby
prompt: "# Given length of a side and high return area for a triangle.\n# >>> triangle_area(5,\
  \ 3)\n# 7.5\ndef triangle_area(a, h)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n\
  \    candidate = method(:triangle_area)\n    assert_equal(7.5, candidate.call(5,\
  \ 3))\n    assert_equal(2.0, candidate.call(2, 2))\n    assert_equal(40.0, candidate.call(10,\
  \ 8))\n  end\nend\n"
completions: ["  (a**2) * (h/2)**2\nend", "  (a*h)/2\nend", "  (a**2) * (h/2)**2\n\
    end", "  (a**2 - h**2)/2\nend", "  (a**2) * (h/2)**2\nend", "  (a**2 - h**2) /\
    \ (2*a)\nend", "  (a**2) * (h/2)**2\nend", "  (a**2 - h**2)/2\nend", "  (a**2)\
    \ * (h**2)\nend", "  (a*h)/2\nend", "  (a**2 - h**2)/2\nend", "  (a*h)/2\nend",
  "  (a**2) * (h**2)\nend", "  (a**2 - h**2)/2\nend", "  (a*h)/2\nend", "  (a**2)\
    \ * (h/2)**2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2)\
    \ * (h**2) / (4 * Math::PI)\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2\
    \ - h**2)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2) * (h**2) / (4\
    \ * Math::PI)\nend", "  (a**2) * (h**2) / (4 * (3.0 - 2.0 * h))\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a**2) * (h**2) / (4 * Math::PI)\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2) * (h/2)**2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2) * (h**2)\
    \ / (4 * (3.0 - h))\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2) * (h**2)\
    \ / (4 * Math::PI)\nend", "  (a*h)/2\nend", "  (a**2) * (h**2) / (4 * (3.0 - sqrt(3.0))\
    \ * (3.0 - sqrt(3.0)))\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2) *\
    \ (h/2)**2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2)\
    \ * (h**2) / (4 * (3.0 - 2.0 * a))\nend", "  (a*h)/2\nend", "  (a**2) * (h**2)\
    \ / (4 * Math::PI)\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2) * (h**2)\
    \ / (4 * Math::PI)\nend", "  (a*h)/2\nend", "  (a**2) * (h**2) / (4 * 3.14 * Math::PI)\n\
    end", "  (a**2) * (h**2) / (4 * Math::PI)\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a**2) * (h**2) / (4 * Math::PI)\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a**2) * (h**2) / (4 * (3.0 - h))\nend", "  (a**2) * (h**2)\nend", " \
    \ (a*h)/2\nend", "  (a**2) * (h**2) / (4 * Math::PI)\nend", "  (a**2) * (h**2)\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2) * (h/2)\n\
    end", "  (a*h)/2\nend", "  (a**2) * (h**2) / (4 * (3 * a * h))\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a**2 - h**2) * ((2 * a + h) * (2 * a - h))\nend",
  "  (a**2) * (h**2)\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2) * (h**2)\n\
    end", "  (a**2 - h**2)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a**2) * (h**2)\nend", "  (a*h)/2\nend", "  (a**2) * (h**2) / (4 * Math::PI)\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a**2) * (h/2)**2\nend", "  (a*h)/2\nend", "  (a**2) * (h/2)**2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2) * (h/2)**2\nend", "  (a**2)\
    \ * (h**2)\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2)\
    \ * (h/2)**2\nend", "  (a**2) * (h**2)\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a**2) * (h**2) / (4 * Math::PI)\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", " \
    \ (a**2 - h**2)/2\nend", "  (a**2) * (h**2) / (4 * (3.0 - h**2))\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2) * (h**2)\nend", "  (a*h)/2\nend",
  "  (a**2) * (h**2)\nend", "  (a**2) * (h/2)**2\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a**2) * (h**2) / (4 * Math::PI)\nend", "  (a**2) * (h**2)\nend", " \
    \ (a**2) * (h**2) / (4 * (3.0 - sqrt(3.0)) / 3.0)\nend", "  (a*h)/2\nend", " \
    \ (a**2) * (h**2)\nend", "  (a*h)/2\nend", "  (a**2 - h**2)/2\nend", "  (a**2)\
    \ * (h**2)\nend", "  (a**2) * (h**2) / (4 * Math::PI)\nend", "  (a**2) * (h**2)\
    \ / (4 * Math::PI)\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a**2) * (h**2)\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a**2) * (h**2) / (4 * Math::PI)\nend", "  (a*h)/2\nend", " \
    \ (a**2) * (h**2)\nend", "  (a**2) * (h**2) / (4 * Math::PI)\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a**2) * (h**2) / (4 * (3.0 - sqrt(3.0 - (a**2))))\n\
    end", "  (a**2) * (h**2) / (4 * Math::PI)\nend", "  (a**2) * (h/2)**2\nend", " \
    \ (a*h)/2\nend", "  (a**2) * (h/2)**2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a**2 - h**2)/2\nend", "  (a**2) * (h/2)**2\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a**2) * (h/2)**2\nend", "  (a*h)/2\nend", "  (a**2\
    \ - h**2)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2)\
    \ * (h**2) / (4 * Math::PI)\nend", "  (a**2) * (h/2)**2\nend", "  (a*h)/2\nend",
  "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a*h)/2\nend", "  (a**2) * (h**2)\nend",
  "  (a**2) * (h**2) / (4 * ((a + h)**2))\nend", "  (a*h)/2\nend", "  (a**2) * (h**2)\n\
    end", "  (a*h)/2\nend", "  (a**2) * (h**2) / (4 * Math::PI)\nend", "  (a*h)/2\n\
    end", "  (a*h)/2\nend", "  (a**2) * (h**2) / (4 * Math::PI)\nend", "  (a**2) *\
    \ (h**2) / (4 * (3.0 - sqrt(3.0)) / 3.0)\nend", "  (a*h)/2\nend", "  (a**2) *\
    \ (h**2) / (4 * Math::PI)\nend", "  (a**2) * (h**2)\nend", "  (a**2) * (h**2)\
    \ / (4 * (3.0 - h**2))\nend", "  (a*h)/2\nend", "  (a**2) * (h/2)**2\nend", " \
    \ (a**2) * (h/2)**2\nend", "  (a**2) * (h**2)\nend", "  (a*h)/2\nend", "  (a*h)/2\n\
    end", "  (a**2) * (h**2)\nend", "  (a*h)/2\nend", "  (a**2) * (h**2) / (4 * Math::PI)\n\
    end", "  (a*h)/2\nend", "  (a**2) * (h**2) / (4 * Math::PI)\nend", "  (a**2) *\
    \ (h**2)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
