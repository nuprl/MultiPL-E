name: HumanEval_136_largest_smallest_integers
language: ruby
prompt: "# Create a function that returns a tuple (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n\
  # If there is no negative or positive integers, return them as None.\n# Examples:\n\
  # largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n# largest_smallest_integers([])\
  \ == (None, None)\n# largest_smallest_integers([0]) == (None, None)\ndef largest_smallest_integers(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_smallest_integers\n\
  \    candidate = method(:largest_smallest_integers)\n    assert_equal([nil, 1],\
  \ candidate.call([2, 4, 1, 3, 5, 7]))\n    assert_equal([nil, 1], candidate.call([2,\
  \ 4, 1, 3, 5, 7, 0]))\n    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5,\
  \ 6, -2]))\n    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))\n\
  \    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))\n    assert_equal([nil,\
  \ nil], candidate.call([]))\n    assert_equal([nil, nil], candidate.call([0]))\n\
  \    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))\n    assert_equal([-1,\
  \ nil], candidate.call([-1, -3, -5, -6, 0]))\n    assert_equal([-3, 1], candidate.call([-6,\
  \ -4, -4, -3, 1]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100,\
  \ 1]))\n  end\nend\n"
completions: ["  smallest, largest = nil, nil\n  lst.each do |x|\n    if x.negative?\n\
    \      smallest = x if smallest.nil? || x < smallest\n    else\n      largest\
    \ = x if largest.nil? || x > largest\n    end\n  end\n  [smallest, largest]\n\
    end", "  smallest, largest = nil, nil\n  lst.each do |i|\n    if i < 0\n     \
    \ smallest = i\n    elsif i > largest\n      largest = i\n    end\n  end\n  return\
    \ smallest, largest\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n\
    \    if x.is_a? Integer\n      if smallest == nil || x < smallest\n        smallest\
    \ = x\n      end\n      if largest == nil || x > largest\n        largest = x\n\
    \      end\n    end\n  end\n  return [smallest, largest]\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n\
    \      if smallest_integer.nil? || x < smallest_integer\n        smallest_integer\
    \ = x\n      end\n      if largest_integer.nil? || x > largest_integer\n     \
    \   largest_integer = x\n      end\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |x|\n    if x < 0\n      smallest = x\n    elsif x > largest\n      largest\
    \ = x\n    end\n  end\n  return [smallest, largest]\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |i|\n    if i < 0\n      smallest_integer\
    \ = i\n    elsif i > largest_integer\n      largest_integer = i\n    end\n  end\n\
    \  return smallest_integer, largest_integer\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if\
    \ smallest_integer.nil? || i < smallest_integer\n        smallest_integer = i\n\
    \      end\n      if largest_integer.nil? || i > largest_integer\n        largest_integer\
    \ = i\n      end\n    end\n  end\n  return smallest_integer, largest_integer\n\
    end", "  lst.sort.reverse!\n  lst.each_with_index do |x, i|\n    if i < lst.size\
    \ - 1\n      break if x > lst[i+1]\n    end\n  end\n  return [lst[lst.size - 1],\
    \ lst[0]] if lst.size > 1\n  return [None, None]\nend", "  smallest_integer =\
    \ nil\n  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n  \
    \    if smallest_integer.nil? || i < smallest_integer\n        smallest_integer\
    \ = i\n      end\n      if largest_integer.nil? || i > largest_integer\n     \
    \   largest_integer = i\n      end\n    end\n  end\n  return [smallest_integer,\
    \ largest_integer]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |x|\n    if x < 0\n      smallest = x\n    elsif x > largest\n      largest\
    \ = x\n    end\n  end\n  return [smallest, largest]\nend", "  smallest, largest\
    \ = nil, nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n    elsif x\
    \ > largest\n      largest = x\n    end\n  end\n  return smallest, largest\nend",
  "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest\
    \ = x\n    elsif x > largest\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\
    \ && largest\n  return [smallest, largest] if smallest && largest\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest", "  smallest_integer = nil\n  largest_integer =\
    \ nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if smallest_integer.nil?\
    \ || i < smallest_integer\n        smallest_integer = i\n      end\n      if largest_integer.nil?\
    \ || i > largest_integer\n        largest_integer = i\n      end\n    end\n  end\n\
    \  return smallest_integer, largest_integer\nend", "  lst.sort!\n  smallest =\
    \ nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n\
    \    elsif x > largest\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if\
    \ x < 0\n      smallest = x\n    elsif x > largest\n      largest = x\n    end\n\
    \  end\n  return [smallest, largest]\nend", "  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |i|\n    if i.negative?\n      smallest_integer = i\n \
    \   else\n      largest_integer = i\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |x|\n    if x < 0\n      smallest = x\n    elsif x > largest\n      largest\
    \ = x\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort!\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n\
    \    elsif i > largest\n      largest = i\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  lst.sort.reverse!\n  lst.each_with_index do |x, i|\n    if\
    \ i < lst.size - 1\n      break if x<lst[i+1]\n    end\n    return (x, i) if x<0\n\
    \  end\n  return nil if lst.empty?\n  lst.sort.reverse!\n  lst.each_with_index\
    \ do |x, i|\n    if i < lst.size - 1\n      break if x>lst[i+1]\n    end\n   \
    \ return (x, i) if x>0\n  end\n  return nil if lst.empty?\nend", "  lst.sort.reverse\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest\
    \ = x\n    elsif x > largest\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest, largest = nil, nil\n  lst.each do |x|\n    if x\
    \ < 0\n      smallest = x\n    elsif x > largest\n      largest = x\n    end\n\
    \  end\n  [smallest, largest]\nend", "  lst.sort!\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n\
    \      largest = i\n    end\n  end\n  return [smallest, largest]\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n\
    \      if smallest_integer.nil? || smallest_integer > x\n        smallest_integer\
    \ = x\n      end\n      if largest_integer.nil? || largest_integer < x\n     \
    \   largest_integer = x\n      end\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  smallest_integer = nil\n  largest_integer = nil\n\
    \  lst.each do |i|\n    if i.is_a? Integer\n      if smallest_integer.nil? ||\
    \ smallest_integer > i\n        smallest_integer = i\n      end\n      if largest_integer.nil?\
    \ || largest_integer < i\n        largest_integer = i\n      end\n    end\n  end\n\
    \  return smallest_integer, largest_integer\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if\
    \ smallest_integer.nil? || smallest_integer > x\n        smallest_integer = x\n\
    \      end\n      if largest_integer.nil? || largest_integer < x\n        largest_integer\
    \ = x\n      end\n    end\n  end\n  return [largest_integer, smallest_integer]\n\
    end", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |i|\n\
    \    if i.is_a? Integer\n      if smallest_integer.nil? || i < smallest_integer\n\
    \        smallest_integer = i\n      end\n      if largest_integer.nil? || i >\
    \ largest_integer\n        largest_integer = i\n      end\n    end\n  end\n  return\
    \ smallest_integer, largest_integer\nend", "  lst.sort!\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n    elsif x > largest\n\
    \      largest = x\n    end\n  end\n  return [smallest, largest]\nend", "  smallest\
    \ = nil\n  largest = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if\
    \ x < smallest\n        smallest = x\n      elsif x > largest\n        largest\
    \ = x\n      end\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest\
    \ = i\n    elsif i > largest\n      largest = i\n    end\n  end\n  return smallest,\
    \ largest\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if\
    \ x < 0\n      smallest = x\n    else\n      largest = x\n    end\n  end\n  return\
    \ [smallest, largest]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n\
    \  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n\
    \      largest = i\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest\
    \ = x\n    elsif x > largest\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if\
    \ x < 0\n      smallest = x\n    elsif x > largest\n      largest = x\n    end\n\
    \  end\n  return [smallest, largest]\nend", "  lst.sort.reverse\n  smallest =\
    \ nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n\
    \    elsif x > largest\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  lst.sort.reverse\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i.negative?\n      smallest = i\n    else\n      largest = i\n\
    \    end\n  end\n  return smallest, largest\nend", "  smallest, largest = nil,\
    \ nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n    elsif x > largest\n\
    \      largest = x\n    end\n  end\n  [smallest, largest]\nend", "  smallest =\
    \ nil\n  largest = nil\n  lst.each do |x|\n    if x.negative?\n      smallest\
    \ = x\n    else\n      largest = x\n    end\n  end\n  return [smallest, largest]\
    \ if smallest && largest\n  return [smallest, largest] unless smallest.nil? ||\
    \ largest.nil?\n  smallest.negative? ? [smallest, largest] : nil\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest\
    \ = i\n    elsif i > largest\n      largest = i\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n      largest\
    \ = i\n    end\n  end\n  return [smallest, largest]\nend", "  smallest = nil\n\
    \  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n    else\n\
    \      largest = x\n    end\n  end\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest] if smallest\n  return [largest, smallest]\
    \ if largest\n  return [smallest, largest] if smallest && largest\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest] if smallest && largest\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest] if smallest && largest\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest] if smallest && largest\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest] if smallest && largest\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest] if smallest && largest\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest] if smallest && largest\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest] if smallest && largest\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest] if smallest && largest\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest] if smallest && largest\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest] if smallest && largest\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest] if smallest && largest\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest", "  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |i|\n    if i < 0\n      smallest_integer = i\n    elsif\
    \ i > largest_integer\n      largest_integer = i\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  smallest_integer = nil\n  largest_integer = nil\n\
    \  lst.each do |x|\n    if x.is_a? Integer\n      if smallest_integer.nil? ||\
    \ x < smallest_integer\n        smallest_integer = x\n      end\n      if largest_integer.nil?\
    \ || x > largest_integer\n        largest_integer = x\n      end\n    end\n  end\n\
    \  return smallest_integer, largest_integer\nend", "  lst.sort!\n  smallest =\
    \ nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n\
    \    elsif x > largest\n      largest = x\n    end\n  end\n  [smallest, largest]\n\
    end", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |x|\n\
    \    if x.is_a?(Integer)\n      if smallest_integer.nil? || x < smallest_integer\n\
    \        smallest_integer = x\n      end\n      if largest_integer.nil? || x >\
    \ largest_integer\n        largest_integer = x\n      end\n    end\n  end\n  return\
    \ smallest_integer, largest_integer\nend", "  lst.sort!\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n\
    \      largest = i\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest\
    \ = i\n    elsif i > largest\n      largest = i\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n      largest\
    \ = i\n    end\n  end\n  return [smallest, largest]\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.negative?\n    \
    \  smallest_integer = x\n    else\n      largest_integer = x\n    end\n  end\n\
    \  return smallest_integer, largest_integer\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |x, i|\n    if x<0\n      a = i\n      break\n    end\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x>0\n      b = i\n      break\n    end\n  end\n  return [a,\
    \ b] if a!=nil and b!=nil\n  return [a, b] if a==nil and b==nil\n  return [a,\
    \ b] if a==nil\n  return [b] if b==nil\n  return [a]\nend", "  lst.sort!\n  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |i|\n    if i < 0\n      smallest_integer\
    \ = i\n    elsif i > 0 && smallest_integer.nil?\n      smallest_integer = i\n\
    \    elsif i > 0 && smallest_integer > i\n      largest_integer = i\n    end\n\
    \  end\n  return smallest_integer, largest_integer\nend", "  lst.sort.reverse\n\
    \  lst.each_with_index do |x, i|\n    if i < 0\n      return (None, None)\n  \
    \  elsif i > 0 and x < 0\n      return (None, None)\n    end\n  end\n  lst.first\n\
    end", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |x|\n\
    \    if x.is_a?(Integer)\n      if smallest_integer.nil? || x < smallest_integer\n\
    \        smallest_integer = x\n      end\n      if largest_integer.nil? || x >\
    \ largest_integer\n        largest_integer = x\n      end\n    end\n  end\n  return\
    \ smallest_integer, largest_integer\nend", "  lst.sort!\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n\
    \      largest = i\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest\
    \ = i\n    elsif i > largest\n      largest = i\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if\
    \ i > 0 and x < lst[i-1]\n      return (lst[i-1], x)\n    end\n  end\n  return\
    \ (lst.first, lst.last) if lst.size == 1\nend", "  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if smallest_integer.nil?\
    \ || x < smallest_integer\n        smallest_integer = x\n      end\n      if largest_integer.nil?\
    \ || x > largest_integer\n        largest_integer = x\n      end\n    end\n  end\n\
    \  return [largest_integer, smallest_integer]\nend", "  smallest = nil\n  largest\
    \ = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if smallest == nil or\
    \ x < smallest\n        smallest = x\n      end\n      if largest == nil or x\
    \ > largest\n        largest = x\n      end\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    return\
    \ i if x < 0\n    return i if x > 0 && lst.size - 1 == i\n  end\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n\
    \      if smallest_integer.nil? || x < smallest_integer\n        smallest_integer\
    \ = x\n      end\n      if largest_integer.nil? || x > largest_integer\n     \
    \   largest_integer = x\n      end\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  smallest_integer = nil\n  largest_integer = nil\n\
    \  lst.each do |x|\n    if x.is_a? Integer\n      if smallest_integer.nil? ||\
    \ x < smallest_integer\n        smallest_integer = x\n      end\n      if largest_integer.nil?\
    \ || x > largest_integer\n        largest_integer = x\n      end\n    end\n  end\n\
    \  return [largest_integer, smallest_integer]\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      smallest_integer\
    \ = x if x < smallest_integer\n      largest_integer = x if x > largest_integer\n\
    \    end\n  end\n  return smallest_integer, largest_integer\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n\
    \      if smallest_integer.nil? || i < smallest_integer\n        smallest_integer\
    \ = i\n      end\n      if largest_integer.nil? || i > largest_integer\n     \
    \   largest_integer = i\n      end\n    end\n  end\n  return [largest_integer,\
    \ smallest_integer]\nend", "  smallest_integer = nil\n  largest_integer = nil\n\
    \  lst.each do |x|\n    if x.is_a? Integer\n      if smallest_integer.nil? ||\
    \ x < smallest_integer\n        smallest_integer = x\n      end\n      if largest_integer.nil?\
    \ || x > largest_integer\n        largest_integer = x\n      end\n    end\n  end\n\
    \  return [smallest_integer, largest_integer]\nend", "  smallest = nil\n  largest\
    \ = nil\n  lst.each do |i|\n    if i.negative?\n      smallest = i\n    else\n\
    \      largest = i\n    end\n  end\n  return [smallest, largest] if smallest &&\
    \ largest\n  return [smallest, largest] if smallest.nil? && largest.nil?\n  return\
    \ [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest, largest]\
    \ if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.", "  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if smallest_integer.nil?\
    \ || x < smallest_integer\n        smallest_integer = x\n      end\n      if largest_integer.nil?\
    \ || x > largest_integer\n        largest_integer = x\n      end\n    end\n  end\n\
    \  return smallest_integer, largest_integer\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |integer|\n    if integer < 0\n      smallest_integer\
    \ = integer\n    elsif integer > 0\n      largest_integer = integer\n    end\n\
    \  end\n  return smallest_integer, largest_integer\nend", "  lst.sort!\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n\
    \    elsif i > largest\n      largest = i\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each\
    \ do |x|\n    if x.is_a? Integer\n      if smallest_integer.nil? || x < smallest_integer\n\
    \        smallest_integer = x\n      end\n      if largest_integer.nil? || x >\
    \ largest_integer\n        largest_integer = x\n      end\n    end\n  end\n  return\
    \ smallest_integer, largest_integer\nend", "  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if smallest_integer.nil?\
    \ || i < smallest_integer\n        smallest_integer = i\n      end\n      if largest_integer.nil?\
    \ || i > largest_integer\n        largest_integer = i\n      end\n    end\n  end\n\
    \  return smallest_integer, largest_integer\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |x|\n    if x.negative?\n      smallest_integer\
    \ = x\n    elsif x.positive?\n      largest_integer = x\n    end\n  end\n  return\
    \ smallest_integer, largest_integer\nend", "  lst.sort!\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n\
    \      largest = i\n    end\n  end\n  return [smallest, largest]\nend", "  smallest\
    \ = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n\
    \    elsif x > largest\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each\
    \ do |x|\n    if x.is_a? Integer\n      if smallest_integer.nil? || x < smallest_integer\n\
    \        smallest_integer = x\n      end\n      if largest_integer.nil? || x >\
    \ largest_integer\n        largest_integer = x\n      end\n    end\n  end\n  return\
    \ smallest_integer, largest_integer\nend", "  smallest = nil\n  largest = nil\n\
    \  lst.each do |i|\n    if i.is_a? Integer\n      if smallest == nil || i < smallest\n\
    \        smallest = i\n      end\n      if largest == nil || i > largest\n   \
    \     largest = i\n      end\n    end\n  end\n  return [smallest, largest]\nend",
  "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |integer|\n  \
    \  if integer < 0\n      smallest_integer = integer\n    elsif integer > 0\n \
    \     largest_integer = integer\n    end\n  end\n  return smallest_integer, largest_integer\n\
    end", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n   \
    \ if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n   \
    \ end\n  end\n  return [smallest, largest]\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if\
    \ smallest_integer.nil? || i < smallest_integer\n        smallest_integer = i\n\
    \      end\n      if largest_integer.nil? || i > largest_integer\n        largest_integer\
    \ = i\n      end\n    end\n  end\n  return smallest_integer, largest_integer\n\
    end", "  lst.sort.reverse\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n\
    \    if i.is_a? Integer\n      if smallest == nil or i < smallest\n        smallest\
    \ = i\n      end\n      if largest == nil or i > largest\n        largest = i\n\
    \      end\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest\
    \ = x\n    elsif x > largest\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if\
    \ x < 0\n      smallest = x\n    elsif x > largest\n      largest = x\n    end\n\
    \  end\n  return [smallest, largest]\nend", "  smallest = nil\n  largest = nil\n\
    \  lst.each do |x|\n    if x < 0\n      smallest = x\n    elsif x > largest\n\
    \      largest = x\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest\
    \ = i\n    elsif i > largest\n      largest = i\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if\
    \ x < 0\n      smallest = x\n    elsif x > largest\n      largest = x\n    end\n\
    \  end\n  return [smallest, largest]\nend", "  smallest = nil\n  largest = nil\n\
    \  lst.each do |x|\n    if x.negative?\n      smallest = x\n    else\n      largest\
    \ = x\n    end\n  end\n  return [smallest, largest] if smallest && largest\n \
    \ return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? && largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil", "  smallest_integer = nil\n  largest_integer = nil\n\
    \  lst.each do |i|\n    if i.is_a? Integer\n      if smallest_integer.nil? ||\
    \ i < smallest_integer\n        smallest_integer = i\n      end\n      if largest_integer.nil?\
    \ || i > largest_integer\n        largest_integer = i\n      end\n    end\n  end\n\
    \  return smallest_integer, largest_integer\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if\
    \ smallest_integer.nil? || i < smallest_integer\n        smallest_integer = i\n\
    \      end\n      if largest_integer.nil? || i > largest_integer\n        largest_integer\
    \ = i\n      end\n    end\n  end\n  return [largest_integer, smallest_integer]\n\
    end", "  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n  \
    \    smallest = i\n    elsif i > largest\n      largest = i\n    end\n  end\n\
    \  return [smallest, largest] if smallest && largest\n  return [smallest, largest]\
    \ if smallest.nil? && largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ || largest.nil?\n  return [smallest, largest] if smallest.nil? || largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? || largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ || largest.nil?\n  return [smallest, largest] if smallest.nil? || largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? || largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? || largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ || largest.nil?\n  return [smallest, largest] if smallest.nil? || largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? || largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? || largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ || largest.nil?\n  return [smallest, largest] if smallest.nil? || largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? || largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? || largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ || largest.nil?\n  return [smallest, largest] if smallest.nil? || largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? || largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? || largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ || largest.nil?\n  return [smallest, largest] if smallest.nil? || largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? || largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? || largest.nil?\n  return [smallest, ", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |integer|\n    if integer < 0\n\
    \      smallest_integer = integer\n    elsif integer > 0\n      largest_integer\
    \ = integer\n    end\n  end\n  return smallest_integer, largest_integer\nend",
  "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n\
    \      smallest = i\n    elsif i > largest\n      largest = i\n    end\n  end\n\
    \  return [smallest, largest]\nend", "  smallest = nil\n  largest = nil\n  lst.each\
    \ do |x|\n    if x.is_a?(Integer)\n      smallest = x if x < smallest\n      largest\
    \ = x if x > largest\n    else\n      smallest = nil if smallest.nil?\n      largest\
    \ = nil if largest.nil?\n    end\n  end\n  return [smallest, largest]\nend", " \
    \ lst.sort.reverse!\n  lst.each_with_index do |x, i|\n    if x < 0\n      return\
    \ (lst[i], -x)\n    end\n  end\n  nil\nend", "  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if smallest_integer.nil?\
    \ || i < smallest_integer\n        smallest_integer = i\n      end\n      if largest_integer.nil?\
    \ || i > largest_integer\n        largest_integer = i\n      end\n    end\n  end\n\
    \  return smallest_integer, largest_integer\nend", "  lst.sort!\n  smallest =\
    \ nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n\
    \    elsif i > largest\n      largest = i\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each\
    \ do |number|\n    if number > largest_integer\n      largest_integer = number\n\
    \    elsif number < smallest_integer\n      smallest_integer = number\n    end\n\
    \  end\n  return [largest_integer, smallest_integer]\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n\
    \      if smallest_integer.nil? || x < smallest_integer\n        smallest_integer\
    \ = x\n      end\n      if largest_integer.nil? || x > largest_integer\n     \
    \   largest_integer = x\n      end\n    end\n  end\n  return [largest_integer,\
    \ smallest_integer]\nend", "  smallest, largest = nil, nil\n  lst.each do |x|\n\
    \    if x.negative?\n      smallest = x if smallest.nil? || x < smallest\n   \
    \ else\n      largest = x if largest.nil? || x > largest\n    end\n  end\n  return\
    \ smallest, largest\nend", "  smallest_integer = nil\n  largest_integer = nil\n\
    \  lst.each do |x|\n    if x.is_a? Integer\n      if smallest_integer.nil? ||\
    \ x < smallest_integer\n        smallest_integer = x\n      end\n      if largest_integer.nil?\
    \ || x > largest_integer\n        largest_integer = x\n      end\n    end\n  end\n\
    \  return [smallest_integer, largest_integer]\nend", "  smallest, largest = nil,\
    \ nil\n  lst.each do |num|\n    if num < smallest\n      smallest = num\n    elsif\
    \ num > largest\n      largest = num\n    end\n  end\n  return smallest, largest\n\
    end", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n   \
    \ if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n   \
    \ end\n  end\n  return [smallest, largest]\nend", "  smallest = nil\n  largest\
    \ = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if smallest == nil or\
    \ i < smallest\n        smallest = i\n      end\n      if largest == nil or i\
    \ > largest\n        largest = i\n      end\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest, largest = nil, nil\n  lst.each do |i|\n    if i.is_a?\
    \ Integer\n      if smallest == nil or i < smallest\n        smallest = i\n  \
    \    end\n      if largest == nil or i > largest\n        largest = i\n      end\n\
    \    end\n  end\n  return smallest, largest\nend", "  smallest, largest = nil,\
    \ nil\n  lst.each do |x|\n    if x.negative?\n      smallest = x if smallest.nil?\
    \ || x < smallest\n    else\n      largest = x if largest.nil? || x > largest\n\
    \    end\n  end\n  [smallest, largest]\nend", "  smallest = nil\n  largest = nil\n\
    \  lst.each do |i|\n    if i.is_a? Integer\n      if smallest == nil || i < smallest\n\
    \        smallest = i\n      end\n      if largest == nil || i > largest\n   \
    \     largest = i\n      end\n    end\n  end\n  return [smallest, largest]\nend",
  "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.is_a?\
    \ Integer\n      if smallest_integer.nil? || x < smallest_integer\n        smallest_integer\
    \ = x\n      end\n      if largest_integer.nil? || x > largest_integer\n     \
    \   largest_integer = x\n      end\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |x|\n    if x < 0\n      smallest = x\n    elsif x > largest\n      largest\
    \ = x\n    end\n  end\n  return [smallest, largest]\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n\
    \      if smallest_integer.nil? || i < smallest_integer\n        smallest_integer\
    \ = i\n      end\n      if largest_integer.nil? || i > largest_integer\n     \
    \   largest_integer = i\n      end\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n      largest\
    \ = i\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort!\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n\
    \    elsif i > largest\n      largest = i\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if\
    \ x < 0\n      smallest = x\n    elsif x > largest\n      largest = x\n    end\n\
    \  end\n  return [smallest, largest] if smallest && largest\n  return [smallest,\
    \ largest] if smallest\n  return [largest, smallest] if largest\n  return nil\n\
    end", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n   \
    \ if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n   \
    \ end\n  end\n  return [smallest, largest]\nend", "  smallest, largest = nil,\
    \ nil\n  lst.each do |i|\n    if i.is_a? Integer\n      smallest = i if i.<(smallest)\n\
    \      largest = i if i.>(largest)\n    else\n      smallest = nil if i.<(smallest)\n\
    \      largest = nil if i.>(largest)\n    end\n  end\n  return [smallest, largest]\n\
    end", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n   \
    \ if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n   \
    \ end\n  end\n  return smallest, largest\nend", "  smallest = nil\n  largest =\
    \ nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if i < smallest then\n\
    \        smallest = i\n      elsif i > largest then\n        largest = i\n   \
    \   end\n    end\n  end\n  return [smallest, largest] if smallest && largest\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? || largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ && largest.nil?\n  return [smallest, largest] if smallest.nil? || largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? && largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? || largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ || largest.nil?\n  return [smallest, largest] if smallest.nil? || largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? || largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? || largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ || largest.nil?\n  return [smallest, largest] if smallest.nil? || largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? || largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? || largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ || largest.nil?\n  return [smallest, largest] if smallest.nil? || largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? || largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? || largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ || largest.nil?\n  return [smallest, largest] if smallest.nil? || largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? || largest.nil?\n  return [smallest,\
    \ largest] if smallest.nil? || largest.nil?\n  return [smallest, largest] if smallest.nil?\
    \ || largest.nil?\n  return [smallest, largest] if smallest.nil? || largest.nil?\n\
    \  return [smallest, largest] if smallest.nil? ", "  lst.sort!\n  smallest = nil\n\
    \  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n    elsif\
    \ x > largest\n      largest = x\n    end\n  end\n  return [smallest, largest]\n\
    end", "  lst.sort.reverse\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n\
    \    if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n\
    \    end\n  end\n  return [smallest, largest]\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if\
    \ smallest_integer.nil? || i < smallest_integer\n        smallest_integer = i\n\
    \      end\n      if largest_integer.nil? || i > largest_integer\n        largest_integer\
    \ = i\n      end\n    end\n  end\n  return smallest_integer, largest_integer\n\
    end", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n  \
    \    smallest = x\n    else\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest] if smallest && largest\n  return [smallest, largest] if smallest\n\
    \  return [largest, smallest] if largest\n  return [smallest, largest] if smallest\
    \ && largest\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n  \
    \  if x < 0\n      smallest = x\n    elsif x > largest\n      largest = x\n  \
    \  end\n  end\n  return [smallest, largest]\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |x|\n    if x.is_a?(Integer)\n      smallest_integer\
    \ = x if x < smallest_integer\n      largest_integer = x if x > largest_integer\n\
    \    else\n      smallest_integer = None\n      largest_integer = None\n    end\n\
    \  end\n  return smallest_integer, largest_integer\nend", "  lst.sort!\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n\
    \    elsif i > largest\n      largest = i\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n      largest\
    \ = i\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort!\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n\
    \    elsif i > largest\n      largest = i\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each\
    \ do |x|\n    if x < 0\n      smallest_integer = x\n    elsif x > 0\n      largest_integer\
    \ = x\n    end\n  end\n  return smallest_integer, largest_integer\nend", "  smallest\
    \ = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n\
    \    elsif x > largest\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |x|\n    if x < 0\n      smallest = x\n    elsif x > largest\n      largest\
    \ = x\n    end\n  end\n  return [smallest, largest]\nend", "  smallest = nil\n\
    \  largest = nil\n  lst.each do |x|\n    if x.negative?\n      smallest = x\n\
    \    else\n      largest = x\n    end\n  end\n  return smallest, largest\nend",
  "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.is_a?\
    \ Integer\n      if smallest_integer.nil? || x < smallest_integer\n        smallest_integer\
    \ = x\n      end\n      if largest_integer.nil? || x > largest_integer\n     \
    \   largest_integer = x\n      end\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n      largest\
    \ = i\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort!\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n\
    \    elsif x > largest\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest, largest = nil, nil\n  lst.each do |i|\n    if i.negative?\n\
    \      smallest = i.abs\n    else\n      largest = i.abs\n    end\n  end\n  return\
    \ smallest, largest\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n\
    \    if x < 0\n      smallest = x\n    elsif x > largest\n      largest = x\n\
    \    end\n  end\n  return [smallest, largest]\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if\
    \ smallest_integer.nil? || i < smallest_integer\n        smallest_integer = i\n\
    \      end\n      if largest_integer.nil? || i > largest_integer\n        largest_integer\
    \ = i\n      end\n    end\n  end\n  return smallest_integer, largest_integer\n\
    end", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |i|\n\
    \    if i.is_a? Integer\n      if smallest_integer.nil? || i < smallest_integer\n\
    \        smallest_integer = i\n      end\n      if largest_integer.nil? || i >\
    \ largest_integer\n        largest_integer = i\n      end\n    end\n  end\n  return\
    \ smallest_integer, largest_integer\nend", "  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if smallest_integer.nil?\
    \ || i < smallest_integer\n        smallest_integer = i\n      end\n      if largest_integer.nil?\
    \ || i > largest_integer\n        largest_integer = i\n      end\n    end\n  end\n\
    \  return smallest_integer, largest_integer\nend", "  lst.sort!\n  smallest =\
    \ nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n\
    \    elsif x > largest\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  lst.sort!\n  smallest_integer = nil\n  largest_integer =\
    \ nil\n  lst.each do |i|\n    if i < 0\n      smallest_integer = i\n    elsif\
    \ i > 0\n      largest_integer = i\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  smallest = nil\n  largest = nil\n  lst.each do |i|\n\
    \    if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n\
    \    end\n  end\n  return [smallest, largest]\nend", "  lst.sort!\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n\
    \    elsif i > largest\n      largest = i\n    end\n  end\n  return smallest,\
    \ largest\nend", "  lst.sort.reverse\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |x|\n    if x < 0\n      smallest = x\n    elsif x > largest\n      largest\
    \ = x\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort.reverse\n\
    \  lst.each_with_index do |x, i|\n    return (x, i) if lst.at(i) < 0\n    return\
    \ (x, i) if lst.at(i) > 0\n  end\nend", "  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |i|\n    if i.is_a?(Integer)\n      if smallest_integer.nil?\
    \ || smallest_integer > i\n        smallest_integer = i\n      end\n      if largest_integer.nil?\
    \ || largest_integer < i\n        largest_integer = i\n      end\n    else\n \
    \     smallest_integer = nil\n      largest_integer = nil\n    end\n  end\n  return\
    \ [largest_integer, smallest_integer]\nend", "  lst.sort!\n  smallest = nil\n\
    \  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif\
    \ i > largest\n      largest = i\n    end\n  end\n  return [smallest, largest]\n\
    end", "  smallest, largest = nil, nil\n  lst.each do |x|\n    if x < 0\n     \
    \ smallest = x\n    else\n      largest = x\n    end\n  end\n  return smallest,\
    \ largest\nend", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each\
    \ do |x|\n    if x.is_a? Integer\n      if smallest_integer.nil? || x < smallest_integer\n\
    \        smallest_integer = x\n      end\n      if largest_integer.nil? || x >\
    \ largest_integer\n        largest_integer = x\n      end\n    end\n  end\n  return\
    \ [largest_integer, smallest_integer]\nend", "  smallest = nil\n  largest = nil\n\
    \  lst.each do |x|\n    if x < 0\n      smallest = x\n    elsif x > largest\n\
    \      largest = x\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort.reverse\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest\
    \ = i\n    elsif i > largest\n      largest = i\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each\
    \ do |i|\n    if i.is_a? Integer\n      if smallest_integer.nil? || i < smallest_integer\n\
    \        smallest_integer = i\n      end\n      if largest_integer.nil? || i >\
    \ largest_integer\n        largest_integer = i\n      end\n    end\n  end\n  return\
    \ smallest_integer, largest_integer\nend", "  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |integer|\n    if integer < 0\n      smallest_integer =\
    \ integer\n    elsif integer > 0\n      largest_integer = integer\n    end\n \
    \ end\n  return smallest_integer, largest_integer\nend", "  smallest_integer =\
    \ nil\n  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n  \
    \    if smallest_integer.nil? || i < smallest_integer\n        smallest_integer\
    \ = i\n      end\n      if largest_integer.nil? || i > largest_integer\n     \
    \   largest_integer = i\n      end\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  smallest_integer = nil\n  largest_integer = nil\n\
    \  lst.each do |i|\n    if i.is_a? Integer\n      if smallest_integer.nil? ||\
    \ i < smallest_integer\n        smallest_integer = i\n      end\n      if largest_integer.nil?\
    \ || i > largest_integer\n        largest_integer = i\n      end\n    end\n  end\n\
    \  return smallest_integer, largest_integer\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if i < 0\n      break\n    elsif i == 0\n      a = x\n    else\n\
    \      b = x\n    end\n  end\n  return a, b\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=ruby,algorithm |>\n<code>", "  lst.sort!\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n    elsif x > largest\n\
    \      largest = x\n    end\n  end\n  return smallest, largest\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n\
    \      if smallest_integer.nil? || x < smallest_integer\n        smallest_integer\
    \ = x\n      end\n      if largest_integer.nil? || x > largest_integer\n     \
    \   largest_integer = x\n      end\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n\
    \    if x < 0\n      smallest = x\n    elsif x > largest\n      largest = x\n\
    \    end\n  end\n  return [smallest, largest]\nend", "  smallest = nil\n  largest\
    \ = nil\n  lst.each do |i|\n    if i.negative?\n      smallest = i\n    else\n\
    \      largest = i\n    end\n  end\n  return [smallest, largest]\nend", "  smallest\
    \ = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n\
    \    elsif x > largest\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n      largest\
    \ = i\n    end\n  end\n  return [smallest, largest]\nend", "  smallest = nil\n\
    \  largest = nil\n  lst.each do |i|\n    if i.negative?\n      smallest = i\n\
    \    else\n      largest = i\n    end\n  end\n  return smallest, largest\nend",
  "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |i|\n    if i.is_a?\
    \ Integer\n      if smallest_integer.nil? || i < smallest_integer\n        smallest_integer\
    \ = i\n      end\n      if largest_integer.nil? || i > largest_integer\n     \
    \   largest_integer = i\n      end\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n\
    \    if x < 0\n      smallest = x\n    elsif x > largest\n      largest = x\n\
    \    end\n  end\n  return [smallest, largest]\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if\
    \ smallest_integer.nil? || x < smallest_integer\n        smallest_integer = x\n\
    \      end\n      if largest_integer.nil? || x > largest_integer\n        largest_integer\
    \ = x\n      end\n    end\n  end\n  return smallest_integer, largest_integer\n\
    end", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n   \
    \ if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n   \
    \ end\n  end\n  return [smallest, largest]\nend", "  lst.sort!\n  smallest = nil\n\
    \  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif\
    \ i > largest\n      largest = i\n    end\n  end\n  return [smallest, largest]\n\
    end", "  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i.is_a? Integer\n\
    \      if smallest == nil or i < smallest\n        smallest = i\n      end\n \
    \     if largest == nil or i > largest\n        largest = i\n      end\n    end\n\
    \  end\n  return [smallest, largest]\nend", "  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |x|\n    if x.negative?\n      if smallest_integer.nil?\n\
    \        smallest_integer = x\n      else\n        smallest_integer = smallest_integer.max(x)\n\
    \      end\n    elsif x.positive?\n      if largest_integer.nil?\n        largest_integer\
    \ = x\n      else\n        largest_integer = largest_integer.min(x)\n      end\n\
    \    end\n  end\n  return smallest_integer, largest_integer\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest\
    \ = i\n    elsif i > largest\n      largest = i\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each\
    \ do |i|\n    if i.is_a? Integer\n      if smallest_integer.nil? || i < smallest_integer\n\
    \        smallest_integer = i\n      end\n      if largest_integer.nil? || i >\
    \ largest_integer\n        largest_integer = i\n      end\n    end\n  end\n  return\
    \ smallest_integer, largest_integer\nend", "  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if smallest_integer.nil?\
    \ || x < smallest_integer\n        smallest_integer = x\n      end\n      if x\
    \ > largest_integer\n        largest_integer = x\n      end\n    end\n  end\n\
    \  return smallest_integer, largest_integer\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if\
    \ smallest_integer.nil? || x < smallest_integer\n        smallest_integer = x\n\
    \      end\n      if largest_integer.nil? || x > largest_integer\n        largest_integer\
    \ = x\n      end\n    end\n  end\n  return [smallest_integer, largest_integer]\n\
    end", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |x|\n\
    \    if x.is_a? Integer\n      if smallest_integer.nil? || x < smallest_integer\n\
    \        smallest_integer = x\n      end\n      if largest_integer.nil? || x >\
    \ largest_integer\n        largest_integer = x\n      end\n    end\n  end\n  return\
    \ [largest_integer, smallest_integer]\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |x, i|\n    return (x, i) if x<0\n    return (x, i) if x>0\n  end\n  return\
    \ nil\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x <\
    \ 0\n      smallest = x\n    elsif x > largest\n      largest = x\n    end\n \
    \ end\n  return [smallest, largest]\nend", "  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |integer|\n    if integer < 0\n      smallest_integer =\
    \ integer\n    elsif integer > 0\n      largest_integer = integer\n    end\n \
    \ end\n  return smallest_integer, largest_integer\nend", "  smallest_integer =\
    \ nil\n  largest_integer = nil\n  lst.each do |integer|\n    if integer < 0\n\
    \      smallest_integer = integer\n    elsif integer > 0\n      largest_integer\
    \ = integer\n    end\n  end\n  return smallest_integer, largest_integer\nend",
  "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |i|\n    if i.is_a?\
    \ Integer\n      if smallest_integer.nil? || i < smallest_integer\n        smallest_integer\
    \ = i\n      end\n      if largest_integer.nil? || i > largest_integer\n     \
    \   largest_integer = i\n      end\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n      largest\
    \ = i\n    end\n  end\n  return [smallest, largest]\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n\
    \      if smallest_integer.nil? || x < smallest_integer\n        smallest_integer\
    \ = x\n      end\n      if largest_integer.nil? || x > largest_integer\n     \
    \   largest_integer = x\n      end\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  smallest, largest = nil, nil\n  lst.each do |x|\n\
    \    if x < 0\n      smallest = x\n    elsif x > largest\n      largest = x\n\
    \    end\n  end\n  return smallest, largest\nend", "  smallest = nil\n  largest\
    \ = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n\
    \      largest = i\n    end\n  end\n  return [smallest, largest]\nend", "  smallest\
    \ = nil\n  largest = nil\n  lst.each do |x|\n    if x.negative?\n      if smallest.nil?\n\
    \        smallest = x\n      else\n        smallest.value = x\n      end\n   \
    \ elsif x.positive?\n      if largest.nil?\n        largest = x\n      else\n\
    \        largest.value = x\n      end\n    end\n  end\n  return [smallest, largest]\n\
    end", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |x|\n\
    \    if x.is_a? Integer\n      if smallest_integer.nil? || x < smallest_integer\n\
    \        smallest_integer = x\n      end\n      if largest_integer.nil? || x >\
    \ largest_integer\n        largest_integer = x\n      end\n    end\n  end\n  return\
    \ smallest_integer, largest_integer\nend", "  smallest = nil\n  largest = nil\n\
    \  lst.each do |x|\n    if x < 0\n      smallest = x\n    elsif x > largest\n\
    \      largest = x\n    end\n  end\n  return smallest, largest\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest\
    \ = x\n    elsif x > largest\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if\
    \ x < 0\n      smallest = x\n    elsif x > largest\n      largest = x\n    end\n\
    \  end\n  return [smallest, largest]\nend", "  lst.sort!\n  smallest = nil\n \
    \ largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif\
    \ i > largest\n      largest = i\n    end\n  end\n  return [smallest, largest]\n\
    end", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |x|\n   \
    \ if x < 0\n      smallest = x\n    elsif x > largest\n      largest = x\n   \
    \ end\n  end\n  return [smallest, largest]\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if\
    \ smallest_integer.nil? || smallest_integer > i\n        smallest_integer = i\n\
    \      end\n      if largest_integer.nil? || largest_integer < i\n        largest_integer\
    \ = i\n      end\n    end\n  end\n  return smallest_integer, largest_integer\n\
    end", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n  \
    \    smallest = x\n    elsif x > largest\n      largest = x\n    end\n  end\n\
    \  return smallest, largest\nend", "  lst.sort!\n  smallest = nil\n  largest =\
    \ nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n\
    \      largest = i\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest\
    \ = i\n    elsif i > largest\n      largest = i\n    end\n  end\n  return smallest,\
    \ largest\nend", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each\
    \ do |i|\n    if i.is_a? Integer\n      if smallest_integer.nil? || i < smallest_integer\n\
    \        smallest_integer = i\n      end\n      if largest_integer.nil? || i >\
    \ largest_integer\n        largest_integer = i\n      end\n    end\n  end\n  return\
    \ [smallest_integer, largest_integer]\nend", "  lst.sort.reverse!\n  lst.each_with_index\
    \ do |n, i|\n    if n < 0\n      return (None, None)\n    elsif n < i\n      return\
    \ (i, n)\n    end\n  end\nend", "  smallest_integer = nil\n  largest_integer =\
    \ nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if smallest_integer.nil?\
    \ || x < smallest_integer\n        smallest_integer = x\n      end\n      if largest_integer.nil?\
    \ || x > largest_integer\n        largest_integer = x\n      end\n    end\n  end\n\
    \  return smallest_integer, largest_integer\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n      if\
    \ smallest_integer.nil? || x < smallest_integer\n        smallest_integer = x\n\
    \      end\n      if largest_integer.nil? || x > largest_integer\n        largest_integer\
    \ = x\n      end\n    end\n  end\n  return smallest_integer, largest_integer\n\
    end", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n  \
    \    smallest = x\n    elsif x > largest\n      largest = x\n    end\n  end\n\
    \  return [smallest, largest] if smallest && largest\n  return [smallest, largest]\
    \ unless smallest\n  return [largest, smallest] unless largest\n  return [smallest,\
    \ largest]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n      largest\
    \ = i\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort!\n  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |i|\n    if i < 0\n      smallest_integer\
    \ = i\n    elsif i > 0\n      largest_integer = i\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n      largest\
    \ = i\n    end\n  end\n  return [smallest, largest]\nend", "  smallest = nil\n\
    \  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n    elsif\
    \ x > largest\n      largest = x\n    end\n  end\n  return [smallest, largest]\n\
    end", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |i|\n\
    \    if i.is_a? Integer\n      if smallest_integer.nil? || i < smallest_integer\n\
    \        smallest_integer = i\n      end\n      if largest_integer.nil? || i >\
    \ largest_integer\n        largest_integer = i\n      end\n    end\n  end\n  return\
    \ smallest_integer, largest_integer\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
