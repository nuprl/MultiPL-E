name: HumanEval_131_digits
language: ruby
prompt: "# Given a positive integer n, return the product of the odd digits.\n# Return\
  \ 0 if all digits are even.\n# For example:\n# digits(1)  == 1\n# digits(4)  ==\
  \ 0\n# digits(235) == 15\ndef digits(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digits\n\
  \    candidate = method(:digits)\n    assert_equal(5, candidate.call(5))\n    assert_equal(5,\
  \ candidate.call(54))\n    assert_equal(1, candidate.call(120))\n    assert_equal(5,\
  \ candidate.call(5014))\n    assert_equal(315, candidate.call(98765))\n    assert_equal(2625,\
  \ candidate.call(5576543))\n    assert_equal(0, candidate.call(2468))\n  end\nend\n"
completions: ["  n.to_s.split(//).map { |d| d.to_i if d.odd? }.inject(:*)\nend", " \
    \ n.to_s.chars.map { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(//).map {\
    \ |i| i.to_i if i.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |s| s.to_i\
    \ }.inject(:*)\nend", "  n.to_s.split(//).map { |s| s.to_i if s.odd? }.inject(:*)\n\
    end", "  n.to_s.split(//).map(&:to_i).reduce(:*)\nend", "  n.to_s.split(//).map\
    \ { |s| s.to_i[1..-1].to_i }.reduce(:*)\nend", "  n.to_s.split(\"\").map { |d|\
    \ d.to_i }.inject(:*)\nend", "  n.to_s.split(//).map { |d| d.to_i[1..-1].to_i\
    \ }.reduce(:*)\nend", "  n.to_s.split(\"\").map { |s| s.to_i }.inject(:*)\nend",
  "  n.to_s.split(\"\").map { |s| s.to_i if s.odd? }.inject(:*)\nend", "  n.to_s.split(\"\
    \").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(//).map(&:to_i).reduce(:*)\n\
    end", "  n.to_s.reverse.chars.map { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(//).map { |s| s.to_i\
    \ if s.odd? }.inject(:*)\nend", "  n.to_s.chars.map { |c| c.to_i }.inject(:*)\n\
    end", "  n.to_s.chars.map { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(\"\"\
    ).map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.split(//).map { |i| i.to_i if\
    \ i.odd? }.inject(:*)\nend", "  n.to_s.split(//).map(&:to_i).reduce(:*)\nend",
  "  n.to_s.split(//).inject(0) { |sum, digit| sum * 10 + (digit % 2).to_i }\nend",
  "  n.to_s.split(//).inject(0) { |sum, digit| sum * 10 + (digit % 2 ? 1 : 0) }\n\
    end", "  n.to_s.chars.map(&:odd?).inject(:*)\nend", "  n.to_s.split(//).map {\
    \ |i| i.to_i if i.odd? }.inject(:*)\nend", "  n.to_s.reverse.split(//).inject(0)\
    \ { |sum, digit| sum * 10 + (digit.to_i%2) }\nend", "  n.to_s.split(\"\").map\
    \ { |s| s.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map { |s| s.to_i }.inject(:*)\n\
    end", "  n.to_s.reverse.each_char.map { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(\"\
    \").map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.reverse.each_char.inject(0)\
    \ {|sum, digit| sum * 10 + (digit == '0' ? 0 : 1)}\nend", "  n.to_s.split(//).inject(0)\
    \ { |sum, digit| sum * 10 + (digit.to_i % 2) }\nend", "  n.to_s.reverse.chars.each_cons(2).reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.chars.map\
    \ { |c| c.to_i }.inject(:*)\nend", "  n.to_s.chars.each_with_index.inject(0) {|sum,\
    \ digit, i| sum + digit.to_i*(i % 2 == 1) }\nend", "  n.to_s.reverse.each_char.map\
    \ { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(//).map { |i| i.to_i if i.odd?\
    \ }.inject(:*)\nend", "  n.to_s.chars.each_with_index.inject(0) { |sum, digit|\
    \ sum + digit.to_i if digit.to_i % 2 != 0 }\nend", "  n.to_s.split(\"\").map {\
    \ |s| s.to_i }.inject(:*)\nend", "  n.to_s.chars.map { |c| c.to_i }.inject(:*)\n\
    end", "  n.to_s.split(//).map { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.chars.map\
    \ { |c| c.to_i }.inject(:*)\nend", "  n.to_s.chars.map { |c| c.to_i }.inject(:*)\n\
    end", "  n.to_s.chars.map { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |d| d.to_i }.inject(:*)\nend", "  n.to_s.chars.map { |c| c.to_i }.inject(:*)\n\
    end", "  n.to_s.reverse.chars.each_cons(2).reduce(:*)\nend", "  n.to_s.reverse.each_char.with_index\
    \ do |c, i|\n    next if i.odd?\n    n.to_s.reverse.each_char.with_index do |c2,\
    \ i2|\n      next if i2.odd?\n      n.to_s.reverse.each_char.with_index do |c3,\
    \ i3|\n        next if i3.odd?\n        n.to_s.reverse.each_char.with_index do\
    \ |c4, i4|\n          next if i4.odd?\n          n.to_s.reverse.each_char.with_index\
    \ do |c5, i5|\n            next if i5.odd?\n            n.to_s.reverse.each_char.with_index\
    \ do |c6, i6|\n              next if i6.odd?\n              n.to_s.reverse.each_char.with_index\
    \ do |c7, i7|\n                next if i7.odd?\n                n.to_s.reverse.each_char.with_index\
    \ do |c8, i8|\n                  next if i8.odd?\n                  n.to_s.reverse.each_char.with_index\
    \ do |c9, i9|\n                    next if i9.odd?\n                    n.to_s.reverse.each_char.with_index\
    \ do |c10, i10|\n                      next if i10.odd?\n                    \
    \  n.to_s.reverse.each_char.with_index do |c11, i11|\n                       \
    \ next if i11.odd?\n                        n.to_s.reverse.each_char.with_index\
    \ do |c12, i12|\n                          next if i12.odd?\n                \
    \          n.to_s.reverse.each_char.with_index do |c13, i13|\n               \
    \             next if i13.odd?\n                            n.to_s.reverse.each_char.with_index\
    \ do |c14, i14|\n                              next if i14.odd?\n            \
    \                  n.to_s.reverse.each_char.with_index do |c15, i15|\n       \
    \                         next if i15.odd?\n                                n.to_s.reverse.each_char.with_index\
    \ do |c16, i16|\n                                  next if i16.odd?\n        \
    \                          n.to_s.reverse.each_char.with_index do |c17, i17|\n\
    \                                    next if i17.odd?\n                      \
    \              n.to_s.reverse.each_char.with_index do |c18, i18|\n           \
    \                           next if i18.odd?\n                               \
    \       n.to_s.reverse.each_char.with_index do |c19, i19|\n                  \
    \                      next if i19.odd?\n                                    \
    \    n.to_s.reverse", "  n.to_s.chars.map { |c| c.to_i }.inject(:*)\nend", " \
    \ n.to_s.split(\"\").map { |s| s.to_i if s.odd? }.inject(:*)\nend", "  n.to_s.split(//).inject(0)\
    \ {|sum, digit| sum * 10 + digit.to_i}\nend", "  n.to_s.split(//).map(&:to_i).reduce(:*)\n\
    end", "  n.to_s.chars.map { |c| c.to_i }.inject(:*)\nend", "  n.to_s.chars.map\
    \ { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i if d.odd?\
    \ }.inject(:*)\nend", "  n.to_s.split(\"\").map { |s| s.to_i }.inject(:*)\nend",
  "  n.to_s.reverse.to_i\nend", "  n.to_s.chars.each_with_index.inject(0) {|sum, (i,\
    \ _)| sum + i if i % 2 == 1}\nend", "  n.to_s.split(\"\").map { |s| s.to_i if\
    \ s.odd? }.inject(:*)\nend", "  n.to_s.split(//).inject(:*)\nend", "  n.to_s.split(//).inject(0)\
    \ { |sum, digit| sum * 10 + (digit % 2) }\nend", "  n.to_s.split(//).map { |s|\
    \ s.to_i if s.odd? }.inject(:*)\nend", "  n.to_s.reverse.to_i\nend", "  n.to_s.chars.map\
    \ { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(//).map { |d| d.to_i if d.odd?\
    \ }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend",
  "  n.to_s.chars.map(&:odd?).inject(:*)\nend", "  n.to_s.reverse.chars.map { |c|\
    \ c.to_i }.product\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\n\
    end", "  n.to_s.reverse.chars.map { |c| c == '0' ? 0 : 1 }.inject(:*)\nend", " \
    \ n.to_s.chars.map { |c| c.to_i }.inject(:*)\nend", "  n.to_s.chars.map { |c|\
    \ c.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map { |s| s.to_i if s.odd?\
    \ }.inject(:*)\nend", "  n.to_s.split(//).map { |s| s.to_i }.inject(:*)\nend",
  "  n.to_s.split(//).map { |i| i.to_i if i.odd? }.inject(:*)\nend", "  n.to_s.split(\"\
    \").map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map { |s| s.to_i\
    \ if s.odd? }.inject(:*)\nend", "  n.to_s.reverse.each_char.map { |c| c.to_i }.inject(:*)\n\
    end", "  n.to_s.split(//).map { |i| i.to_i if i.odd? }.inject(:*)\nend", "  n.to_s.chars.map\
    \ { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map { |s| s.to_i if s.odd?\
    \ }.inject(:*)\nend", "  n.to_s.reverse.each_char.inject(0) { |sum, digit| sum\
    \ * 10 + (digit == '1' ? 1 : 0) }\nend", "  n.to_s.reverse.each_char.with_index\
    \ do |c, i|\n    next if i % 2 == 1\n    n.to_s.reverse.each_char.with_index do\
    \ |c2, i2|\n      next if i2 % 2 == 1\n      n.to_s.reverse.each_char.with_index\
    \ do |c3, i3|\n        next if i3 % 2 == 1\n        n.to_s.reverse.each_char.with_index\
    \ do |c4, i4|\n          next if i4 % 2 == 1\n          n.to_s.reverse.each_char.with_index\
    \ do |c5, i5|\n            next if i5 % 2 == 1\n            n.to_s.reverse.each_char.with_index\
    \ do |c6, i6|\n              next if i6 % 2 == 1\n              n.to_s.reverse.each_char.with_index\
    \ do |c7, i7|\n                next if i7 % 2 == 1\n                n.to_s.reverse.each_char.with_index\
    \ do |c8, i8|\n                  next if i8 % 2 == 1\n                  n.to_s.reverse.each_char.with_index\
    \ do |c9, i9|\n                    next if i9 % 2 == 1\n                    n.to_s.reverse.each_char.with_index\
    \ do |c10, i10|\n                      next if i10 % 2 == 1\n                \
    \      n.to_s.reverse.each_char.with_index do |c11, i11|\n                   \
    \     next if i11 % 2 == 1\n                        n.to_s.reverse.each_char.with_index\
    \ do |c12, i12|\n                          next if i12 % 2 == 1\n            \
    \              n.to_s.reverse.each_char.with_index do |c13, i13|\n           \
    \                 next if i13 % 2 == 1\n                            n.to_s.reverse.each_char.with_index\
    \ do |c14, i14|\n                              next if i14 % 2 == 1\n        \
    \                      n.to_s.reverse.each_char.with_index do |c15, i15|\n   \
    \                             next if i15 % 2 == 1\n                         \
    \       n.to_s.reverse.each_char.with_index do |c16, i16|\n                  \
    \                next if i16 % 2 == 1\n                                  n.to_s.reverse.each_char.with_index\
    \ do |c17, i17|\n                                    next if i17 % 2 == 1\n  \
    \                                  n.to_s.reverse.each_char.with_index do |c18,\
    \ i18|\n                                      next if i18 % 2 == 1\n         \
    \                             n.to_s.reverse.each_char.with_index do |c19, i",
  "  n.to_s.chars.map { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ { |sum, digit| sum * 10 + (digit.to_i % 2) }\nend", "  n.to_s.split(\"\").map\
    \ { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\n\
    end", "  n.to_s.split(//).inject(0) {|sum, digit| sum * 10 + digit.to_i}\nend",
  "  n.to_s.split(//).map { |i| i.to_i if i.odd? }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |d| d.to_i }.inject(:*)\nend", "  n.to_s.chars.each_cons(2).reduce(:*)\nend",
  "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |i| i.to_i if i.odd? }.inject(:*)\nend", "  n.to_s.split(//).map(&:to_i).reduce(:*)\n\
    end", "  n.to_s.split(//).map { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\
    \").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.chars.map { |c| c.to_i }.inject(:*)\n\
    end", "  n.to_s.chars.map { |c| c.to_i }.inject(:*)\nend", "  n.to_s.reverse.each_char.inject(0)\
    \ { |sum, digit| sum + digit % 2 }\nend", "  n.to_s.chars.each_with_index.inject(0)\
    \ {|sum, digit| sum * 10 + digit.to_i}\nend", "  n.to_s.split(//).map { |d| d.to_i\
    \ if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i if d.odd?\
    \ }.inject(:*)\nend", "  n.to_s.reverse.to_i\nend", "  n.to_s.split(\"\").map\
    \ { |s| s.to_i if s.odd? }.inject(:*)\nend", "  n.to_s.split(//).map { |x| x.to_i\
    \ }.inject(:*)\nend", "  n.to_s.split(//).map { |s| s.to_i if s.odd? }.inject(:*)\n\
    end", "  n.to_s.split(\"\").map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |s| s.to_i }.inject(:*)\nend", "  n.to_s.chars.map(&:odd?).inject(:*)\nend",
  "  n.to_s.split(//).map { |i| i.to_i if i.odd? }.inject(:*)\nend", "  n.to_s.split(\"\
    \").map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i\
    \ }.inject(:*)\nend", "  n.to_s.chars.map { |c| c == '0' ? 0 : 1 }.inject(:*)\n\
    end", "  n.to_s.split(//).inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i\
    \ }.inject(:*)\nend", "  n.to_s.reverse.chars.map { |c| c == '0' ? 0 : 1 }.inject(:*)\n\
    end", "  n.to_s.chars.map { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |s| s.to_i }.inject(:*)\nend", "  n.to_s.reverse.each_char.map { |c| c.to_i\
    \ }.product\nend", "  n.to_s.split(\"\").map { |s| s.to_i if s.odd? }.inject(:*)\n\
    end", "  n.to_s.split(//).map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.chars.map\
    \ { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map { |s| s.to_i if s.odd?\
    \ }.inject(:*)\nend", "  n.to_s.split(//).map { |i| i.to_i if i.odd? }.inject(:*)\n\
    end", "  n.to_s.split(//).map { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.chars.map\
    \ { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(//).map { |i| i.to_i }.reduce(:*)\n\
    end", "  n.to_s.chars.map { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(\"\"\
    ).map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i\
    \ }.inject(:*)\nend", "  n.to_s.split(//).map { |i| i.to_i }.reduce(:*)\nend",
  "  n.to_s.split(//).map(&:to_i).reduce(:*)\nend", "  n.to_s.chars.map(&:odd?).inject(:*)\n\
    end", "  n.to_s.reverse.split(//).map { |d| d.to_i if d.odd? }.inject(:*)\nend",
  "  n.to_s.split(\"\").map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.reverse.to_i\n\
    end", "  n.to_s.chars.map { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |d| d.to_i[1..-1].to_i * (d.to_i[1..-1].to_i % 2 == 0 ? 1 : 0) }.reduce(:*)\n\
    end", "  n.to_s.split(//).inject(0) {|sum, digit| sum * 10 + digit.to_i}\nend",
  "  n.to_s.reverse.each_char.inject(0) { |sum, digit| sum * 10 + (digit.to_i%2) }\n\
    end", "  n.to_s.reverse.chars.map { |c| c == '0' ? 0 : 1 }.inject(:*)\nend", " \
    \ n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |i| i.to_i if i.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |s| s.to_i\
    \ }.inject(:*)\nend", "  n.to_s.reverse.to_i\nend", "  n.to_s.split(//).map(&:to_i).reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |d| d.to_i[1..-1].to_i }.reduce(:*)\nend", "  n.to_s.split(//).map { |d| d.to_i\
    \ }.inject(:*)\nend", "  n.to_s.reverse.chars.map(&:odd?).inject(:*)\nend", " \
    \ n.to_s.reverse.scan(/\\d/).reduce(:*)\nend", "  n.to_s.chars.map { |c| c.to_i\
    \ }.inject(:*)\nend", "  n.to_s.split(//).map { |i| i.to_i if i.odd? }.inject(:*)\n\
    end", "  n.to_s.reverse.to_i\nend", "  n.to_s.split(\"\").map { |s| s.to_i if\
    \ s.odd? }.inject(:*)\nend", "  n.to_s.chars.map(&:odd?).inject(:*)\nend", " \
    \ n.to_s.chars.map { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map\
    \ { |s| s.to_i }.inject(:*)\nend", "  n.to_s.reverse.chars.map { |c| c.to_i }.inject(:*)\n\
    end", "  n.to_s.reverse.each_char.map { |c| c.to_i }.inject(:*)\nend", "  n.to_s.chars.each_with_index.inject(0)\
    \ { |sum, digit| sum * 10 + (digit % 2 ? 1 : 0) }\nend", "  n.to_s.split(\"\"\
    ).map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.chars.each_cons(2).reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.split(//).map(&:to_i).reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |s| s.to_i if s.odd? }.inject(:*)\nend", " \
    \ n.to_s.reverse.chars.map { |c| c == '0' ? 0 : 1 }.inject(:*)\nend", "  n.to_s.split(\"\
    \").map { |s| s.to_i if s.odd? }.inject(:*)\nend", "  n.to_s.split(//).map(&:to_i).reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |i| i.to_i if i.odd? }.inject(:*)\nend", "  n.to_s.reverse.chars.map(&:odd?).inject(:*)\n\
    end", "  n.to_s.split(\"\").map { |s| s.to_i }.inject(:*)\nend", "  n.to_s.split(\"\
    \").map { |s| s.to_i if s.odd? }.inject(:*)\nend", "  n.to_s.chars.map { |c| c\
    \ == '0' ? 0 : 1 }.inject(:*)\nend", "  n.to_s.split(//).map(&:to_i).reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i if d.odd? }.inject(:*)\nend", " \
    \ n.to_s.chars.map(&:odd?).inject(:*)\nend", "  n.to_s.split(//).map { |s| s.to_i\
    \ if s.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\n\
    end", "  n.to_s.split(\"\").map { |s| s.to_i if s.odd? }.inject(:*)\nend", " \
    \ n.to_s.reverse.each_char.inject(0) {|sum, digit| sum * 10 + digit.to_i}\nend",
  "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |s| s.to_i\
    \ if s.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i if d.odd?\
    \ }.inject(:*)\nend", "  n.to_s.split(//).map { |s| s.to_i if s.odd? }.inject(:*)\n\
    end", "  n.to_s.split(//).each_slice(2).map { |a| a.reduce(:*) }.reduce(:*)\n\
    end", "  n.to_s.split(//).map { |i| i % 2 ? i : 0).reduce(:*)\nend", "  n.to_s.chars.map(&:odd?).inject(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.reverse.chars.map\
    \ { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(//).map { |d| d.to_i if d.odd?\
    \ }.inject(:*)\nend", "  n.to_s.chars.map { |c| c == '0' ? 0 : 1 }.inject(:*)\n\
    end", "  n.to_s.reverse.to_i\nend", "  n.to_s.split(//).map { |i| i.to_i }.inject(:*)\n\
    end", "  n.to_s.split(//).map { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.reverse.chars.map\
    \ { |c| c.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map { |s| s.to_i }.inject(:*)\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
