name: HumanEval_58_common
language: ruby
results:
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).to_a : l1[0...l1.length].zip(l2[0...l2.length]).to_a\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzl_kh7zu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzl_kh7zu.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 1], [2, 5], [3, 5], [4, 7], [5, 9], [34, 121], [653,\
    \ 653]]>\n\ndiff:\n? [[1, 1], [2, 5], [3, 5], [4, 7], [5, 9], [34, 121], [653,\
    \ 653]]\n===============================================================================\n\
    \nFinished in 0.004826 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.21 tests/s, 207.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_9o5f6b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_9o5f6b.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.51 tests/s, 304.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find { |e1, e2|\
    \ e1 == e2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphmh9zd_j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphmh9zd_j.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.56 tests/s, 306.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.zip(l2).to_a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphu7zzqsw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphu7zzqsw.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 1], [2, 5], [3, 5], [4, 7], [5, 9], [34, 121], [653,\
    \ 653]]>\n\ndiff:\n? [[1, 1], [2, 5], [3, 5], [4, 7], [5, 9], [34, 121], [653,\
    \ 653]]\n===============================================================================\n\
    \nFinished in 0.004969 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.25 tests/s, 201.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).select { |e| e[0]\
    \ == e[1] }.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiaf2irbf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiaf2irbf.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.006321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.20 tests/s, 158.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjt8cbu__\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjt8cbu__.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003384 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.51 tests/s, 295.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvu9ctmif\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvu9ctmif.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003356 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.97 tests/s, 297.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqk3wxnoh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqk3wxnoh.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.89 tests/s, 309.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.sort.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphgjlmaig\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphgjlmaig.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.005703 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.35 tests/s, 175.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpshw8haa8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpshw8haa8.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.44 tests/s, 297.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).map { |e| e[0]\
    \ }.reject { |e| l2.include?(e) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb54miqz0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb54miqz0.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[4, 3, 34, 2]>\n\ndiff:\n? [1, 5, 653    ]\n?  4  3     4,\
    \ 2 \n?  ?  ?  -- ++++ \n===============================================================================\n\
    \nFinished in 0.003606 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.32 tests/s, 277.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpueurfzuw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpueurfzuw.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003275 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.34 tests/s, 305.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv4tzvy0z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv4tzvy0z.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.023432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    42.68 tests/s, 42.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.each do |i|\n    l2.each do |j|\n      return i if i == j\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgy03fyep\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgy03fyep.rb:20:in\
    \ `test_common'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:\
    \   def test_common\n     19:     candidate = method(:common)\n  => 20:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     21:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  22:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     23:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.02623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    38.12 tests/s, 38.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp70z0q8ks\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp70z0q8ks.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003103 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.27 tests/s, 322.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjyhrok4b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjyhrok4b.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [4, 7], [3, 1], [34, 5], [653, 9], [2, 653], [5,\
    \ 121]]>\n\ndiff:\n? [[1, 5], [4, 7], [3, 1], [34, 5], [653, 9], [2, 653], [5,\
    \ 121]]\n===============================================================================\n\
    \nFinished in 0.00491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.67 tests/s, 203.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).select { |e| e[0]\
    \ == e[1] }.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2jmnan1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2jmnan1.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003293 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.67 tests/s, 303.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find { |e1, e2|\
    \ e1 == e2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwsoquwfs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwsoquwfs.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.70 tests/s, 312.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).map { |e| e[0]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpspcrzjp6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpspcrzjp6.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 4, 3, 34, 653, 2, 5]>\n\ndiff:\n? [1, 5,        653 \
    \     ]\n?     4  3, 34,    , 2, 5 \n?     ? +++++++    ++++++ \n===============================================================================\n\
    \nFinished in 0.003742 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.24 tests/s, 267.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp193cgq1e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp193cgq1e.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.12 tests/s, 309.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2gwpggea\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2gwpggea.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.69 tests/s, 298.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9ibj7w9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9ibj7w9.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003783 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.34 tests/s, 264.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).map { |x, y| x\
    \ if x == y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhnghnwj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhnghnwj.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[nil, nil, nil, nil, nil, nil, nil]>\n\ndiff:\n? [1  , 5\
    \  , 653                    ]\n?  nil  nil  nil, nil, nil, nil, nil \n?  ?  ?\
    \  ??? \n===============================================================================\n\
    \nFinished in 0.004415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.50 tests/s, 226.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return x if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpltn4kaks\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpltn4kaks.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003182 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.27 tests/s, 314.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6yzvnz7p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6yzvnz7p.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.11 tests/s, 265.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.zip(l2).each do |a, b|\n    return a if b == []\n    return a if a.first\
    \ == b.first\n  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpup6bo601\n\
    Started\nE\n===============================================================================\n\
    Error: test_common(TestHumanEval):\n  NoMethodError: undefined method `first'\
    \ for 1:Integer\n  \n      return a if a.first == b.first\n                  \
    \ ^^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpup6bo601.rb:11:in\
    \ `block in common'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpup6bo601.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpup6bo601.rb:9:in\
    \ `common'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpup6bo601.rb:19:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpup6bo601.rb:19:in\
    \ `test_common'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:\
    \   def test_common\n     18:     candidate = method(:common)\n  => 19:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     20:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  21:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     22:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n===============================================================================\n\
    \nFinished in 0.002155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    464.04 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).select { |x, y| x == y }.flatten\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_i74vnn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_i74vnn.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003966 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    252.14 tests/s, 252.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi4a9aj0d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi4a9aj0d.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003482 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.19 tests/s, 287.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzmr5t_gq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzmr5t_gq.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.55 tests/s, 285.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).select { |e| e[0] == e[1] }.flatten : []\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgps3izs2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgps3izs2.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 1, 653, 653]>\n\ndiff:\n? [1, 1, 653, 653]\n===============================================================================\n\
    \nFinished in 0.003592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.40 tests/s, 278.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).select { |e| e[0] == e[1] }.flatten.sort\
    \ : []\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnopda__j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnopda__j.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 1, 653, 653]>\n\ndiff:\n? [1, 1, 653, 653]\n===============================================================================\n\
    \nFinished in 0.007485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.60 tests/s, 133.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find { |e1, e2|\
    \ e1 == e2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4w2nd0j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4w2nd0j.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003768 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.39 tests/s, 265.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5qitpmr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5qitpmr.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.04 tests/s, 311.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp121ay2tq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp121ay2tq.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.45 tests/s, 308.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.flatten.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiz88x0a4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiz88x0a4.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 2, 3, 4, 5, 7, 9, 34, 121, 653]>\n\ndiff:\n? [1, 2, 3,\
    \ 4, 5, 7, 9, 34, 121, 653]\n===============================================================================\n\
    \nFinished in 0.004768 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.73 tests/s, 209.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_05p90w7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_05p90w7.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.75 tests/s, 300.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).select { |e| e[0]\
    \ == e[1] }.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp031jbiji\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp031jbiji.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.010302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.07 tests/s, 97.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmvv0_d8x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmvv0_d8x.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.21 tests/s, 302.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwrqf6gfz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwrqf6gfz.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.13 tests/s, 307.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return x if x == y || l1[i] == l1[j]\
    \ or l2[i] == l2[j]\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzkdg8rxq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzkdg8rxq.rb:17:in\
    \ `test_common'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:\
    \   def test_common\n     16:     candidate = method(:common)\n  => 17:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     18:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  19:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     20:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003339 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.49 tests/s, 299.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkg9zf9lo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkg9zf9lo.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003331 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.21 tests/s, 300.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).map { |x, y| x\
    \ if x == y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_kzzn6m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_kzzn6m.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[nil, nil, nil, nil, nil, nil, nil]>\n\ndiff:\n? [1  , 5\
    \  , 653                    ]\n?  nil  nil  nil, nil, nil, nil, nil \n?  ?  ?\
    \  ??? \n===============================================================================\n\
    \nFinished in 0.01055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.79 tests/s, 94.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8spn27w6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8spn27w6.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.83 tests/s, 292.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu23r2kfp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu23r2kfp.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.98 tests/s, 307.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).map { |e| e[0]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplwj41orb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplwj41orb.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 4, 3, 34, 653, 2, 5]>\n\ndiff:\n? [1, 5,        653 \
    \     ]\n?     4  3, 34,    , 2, 5 \n?     ? +++++++    ++++++ \n===============================================================================\n\
    \nFinished in 0.06167 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    16.22 tests/s, 16.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_fuy4qh1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_fuy4qh1.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.38 tests/s, 296.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp01e5jijn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp01e5jijn.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.89 tests/s, 309.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n \
    \   assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4z42b8d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4z42b8d.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.005086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.62 tests/s, 196.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).select { |e| e[0] == e[1] }.flatten.sort\
    \ : []\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeyb5osuo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeyb5osuo.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 1, 653, 653]>\n\ndiff:\n? [1, 1, 653, 653]\n===============================================================================\n\
    \nFinished in 0.003665 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.85 tests/s, 272.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxesv_m2_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxesv_m2_.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.00328 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.88 tests/s, 304.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1r4p4ijr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1r4p4ijr.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.52 tests/s, 288.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.zip(l2).to_a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrsm8v52\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrsm8v52.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 1], [2, 5], [3, 5], [4, 7], [5, 9], [34, 121], [653,\
    \ 653]]>\n\ndiff:\n? [[1, 1], [2, 5], [3, 5], [4, 7], [5, 9], [34, 121], [653,\
    \ 653]]\n===============================================================================\n\
    \nFinished in 0.005047 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.14 tests/s, 198.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.sort.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph6stsmhy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph6stsmhy.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.004872 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.25 tests/s, 205.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplkpfj6ol\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplkpfj6ol.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.49 tests/s, 279.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return x if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplbhloczj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplbhloczj.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003425 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.97 tests/s, 291.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj7sft0_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj7sft0_.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [4, 7], [3, 1], [34, 5], [653, 9], [2, 653], [5,\
    \ 121]]>\n\ndiff:\n? [[1, 5], [4, 7], [3, 1], [34, 5], [653, 9], [2, 653], [5,\
    \ 121]]\n===============================================================================\n\
    \nFinished in 0.005176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.20 tests/s, 193.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04a6uicp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04a6uicp.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003375 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.30 tests/s, 296.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_u71aez\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_u71aez.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.00355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.69 tests/s, 281.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9lvz39q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9lvz39q.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003127 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.80 tests/s, 319.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |e|\n    l2.each\
    \ do |f|\n      return e if e == f\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppdhq42eb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppdhq42eb.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.015142 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.04 tests/s, 66.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4u32k12g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4u32k12g.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.94 tests/s, 306.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return x if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp64gejjw9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp64gejjw9.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.77 tests/s, 303.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.flatten.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuf2p72ha\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuf2p72ha.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 5, 4, 7, 3, 34, 653, 9, 2, 121]>\n\ndiff:\n? [1, 5, 4,\
    \ 7, 3, 34, 653, 9, 2, 121]\n===============================================================================\n\
    \nFinished in 0.004767 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.78 tests/s, 209.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpig9ahli9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpig9ahli9.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.88 tests/s, 307.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.select { |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxmffh8ss\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxmffh8ss.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.005054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.86 tests/s, 197.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n \
    \   assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8cwhxz8p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8cwhxz8p.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.004953 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.90 tests/s, 201.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).select { |e| e[0] == e[1] }.flatten.sort\
    \ : []\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_bxs_5l5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_bxs_5l5.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 1, 653, 653]>\n\ndiff:\n? [1, 1, 653, 653]\n===============================================================================\n\
    \nFinished in 0.003552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.53 tests/s, 281.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpogt908h2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpogt908h2.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.004509 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.78 tests/s, 221.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).map { |e| e[0]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpekwiaj52\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpekwiaj52.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 4, 3, 34, 653, 2, 5]>\n\ndiff:\n? [1, 5,        653 \
    \     ]\n?     4  3, 34,    , 2, 5 \n?     ? +++++++    ++++++ \n===============================================================================\n\
    \nFinished in 0.003682 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.59 tests/s, 271.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find { |e1, e2|\
    \ e1 == e2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmgh02e2w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmgh02e2w.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.57 tests/s, 300.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.flatten.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe4khialy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe4khialy.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 2, 3, 4, 5, 7, 9, 34, 121, 653]>\n\ndiff:\n? [1, 2, 3,\
    \ 4, 5, 7, 9, 34, 121, 653]\n===============================================================================\n\
    \nFinished in 0.006736 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.46 tests/s, 148.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_jlkwvfk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_jlkwvfk.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.00347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.18 tests/s, 288.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_6furod\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_6furod.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.00334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.40 tests/s, 299.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph8udjdvt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph8udjdvt.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.85 tests/s, 302.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp64eram57\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp64eram57.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.013832 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.30 tests/s, 72.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).select { |e| e[0]\
    \ == e[1] }.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcsckezh3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcsckezh3.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.72 tests/s, 291.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.sort.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgf1gx76z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgf1gx76z.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.00514 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.55 tests/s, 194.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).map { |e| e[0]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2qe5i5cs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2qe5i5cs.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 4, 3, 34, 653, 2, 5]>\n\ndiff:\n? [1, 5,        653 \
    \     ]\n?     4  3, 34,    , 2, 5 \n?     ? +++++++    ++++++ \n===============================================================================\n\
    \nFinished in 0.003725 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.46 tests/s, 268.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb005eoid\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb005eoid.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003508 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.06 tests/s, 285.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.zip(l2).each do |a, b|\n    return a if b == a\n    return b if b == a\n\
    \  end\n  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2wfdrw5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2wfdrw5.rb:19:in\
    \ `test_common'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:\
    \   def test_common\n     18:     candidate = method(:common)\n  => 19:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     20:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  21:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     22:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.006305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.60 tests/s, 158.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbs1ouac7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbs1ouac7.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.55 tests/s, 308.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvhcp8tnp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvhcp8tnp.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.004379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.36 tests/s, 228.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find { |e| e[0]\
    \ == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyneya7zp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyneya7zp.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004801 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.29 tests/s, 208.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).map { |e| e[0]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5pxksg9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5pxksg9.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 4, 3, 34, 653, 2, 5]>\n\ndiff:\n? [1, 5,        653 \
    \     ]\n?     4  3, 34,    , 2, 5 \n?     ? +++++++    ++++++ \n===============================================================================\n\
    \nFinished in 0.00376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.96 tests/s, 265.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfu174nvm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfu174nvm.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.023209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    43.09 tests/s, 43.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ybc2w5o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ybc2w5o.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003259 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.84 tests/s, 306.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpetv_c0or\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpetv_c0or.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.02 tests/s, 288.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n \
    \   assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvr0fnvgv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvr0fnvgv.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.004817 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.60 tests/s, 207.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).to_a & l2.to_a : nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5r8zbtf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5r8zbtf.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.011524 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.78 tests/s, 86.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).select { |e1,\
    \ e2| e1 == e2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm8ft1e87\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm8ft1e87.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003541 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.41 tests/s, 282.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).each do |a, b|\n    return a if a.eql?(b)\n  end\n  nil\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyohsmxb8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyohsmxb8.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.40 tests/s, 303.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy3ew_n96\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy3ew_n96.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.90 tests/s, 305.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).select { |e| e[0] == e[1] }.flatten.sort\
    \ : []\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprmks4f1y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprmks4f1y.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 1, 653, 653]>\n\ndiff:\n? [1, 1, 653, 653]\n===============================================================================\n\
    \nFinished in 0.00396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    252.53 tests/s, 252.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv1_dp38v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv1_dp38v.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003299 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.12 tests/s, 303.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return x if x == y\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo_l4byy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqo_l4byy.rb:17:in\
    \ `test_common'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:\
    \   def test_common\n     16:     candidate = method(:common)\n  => 17:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     18:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  19:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     20:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003129 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.59 tests/s, 319.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2h5h0t0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2h5h0t0.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.005653 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.90 tests/s, 176.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.zip(l2).to_a.combination(2).to_a\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnramgzm4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnramgzm4.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[[1, 1], [2, 5]],\n [[1, 1], [3, 5]],\n [[1, 1], [4, 7]],\n\
    \ [[1, 1], [5, 9]],\n [[1, 1], [34, 121]],\n [[1, 1], [653, 653]],\n [[2, 5],\
    \ [3, 5]],\n [[2, 5], [4, 7]],\n [[2, 5], [5, 9]],\n [[2, 5], [34, 121]],\n [[2,\
    \ 5], [653, 653]],\n [[3, 5], [4, 7]],\n [[3, 5], [5, 9]],\n [[3, 5], [34, 121]],\n\
    \ [[3, 5], [653, 653]],\n [[4, 7], [5, 9]],\n [[4, 7], [34, 121]],\n [[4, 7],\
    \ [653, 653]],\n [[5, 9], [34, 121]],\n [[5, 9], [653, 653]],\n [[34, 121], [653,\
    \ 653]]]>\n\ndiff:\n+ [[[1, 1], [2, 5]],\n+  [[1, 1], [3, 5]],\n+  [[1, 1], [4,\
    \ 7]],\n+  [[1, 1], [5, 9]],\n+  [[1, 1], [34, 121]],\n?  [[1, 1], [653, 653]],\n\
    +  [[2, 5], [3, 5]],\n+  [[2, 5], [4, 7]],\n+  [[2, 5], [5, 9]],\n+  [[2, 5],\
    \ [34, 121]],\n+  [[2, 5], [653, 653]],\n+  [[3, 5], [4, 7]],\n+  [[3, 5], [5,\
    \ 9]],\n+  [[3, 5], [34, 121]],\n+  [[3, 5], [653, 653]],\n+  [[4, 7], [5, 9]],\n\
    +  [[4, 7], [34, 121]],\n+  [[4, 7], [653, 653]],\n+  [[5, 9], [34, 121]],\n+\
    \  [[5, 9], [653, 653]],\n+  [[34, 121], [653, 653]]]\n===============================================================================\n\
    \nFinished in 0.013396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.65 tests/s, 74.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqvrum18f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqvrum18f.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.86 tests/s, 303.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoqb7keks\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoqb7keks.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.011815 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.64 tests/s, 84.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find { |e| e[0]\
    \ == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphvrvn90f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphvrvn90f.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003962 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    252.40 tests/s, 252.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.flatten.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpcg98br\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpcg98br.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 2, 3, 4, 5, 7, 9, 34, 121, 653]>\n\ndiff:\n? [1, 2, 3,\
    \ 4, 5, 7, 9, 34, 121, 653]\n===============================================================================\n\
    \nFinished in 0.027531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    36.32 tests/s, 36.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find do |x, y|\n\
    \    x != y\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxmuzut_u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxmuzut_u.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 5]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.005894 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.66 tests/s, 169.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu6c9j0ci\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu6c9j0ci.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.004695 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.99 tests/s, 212.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).select { |x, y|\
    \ x == y }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof55t8bx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof55t8bx.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.16 tests/s, 305.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find { |e1, e2|\
    \ e1 == e2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8heupbw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8heupbw.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.65 tests/s, 292.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.sort.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdsidy41w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdsidy41w.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.004748 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.61 tests/s, 210.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphgb2nsfb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphgb2nsfb.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [4, 7], [3, 1], [34, 5], [653, 9], [2, 653], [5,\
    \ 121]]>\n\ndiff:\n? [[1, 5], [4, 7], [3, 1], [34, 5], [653, 9], [2, 653], [5,\
    \ 121]]\n===============================================================================\n\
    \nFinished in 0.009665 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.47 tests/s, 103.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1[1,..l1.length] == l2[1,..l2.length] : nil\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpin34x7i6\n\
    Started\nE\n===============================================================================\n\
    Error: test_common(TestHumanEval): TypeError: no implicit conversion of Range\
    \ into Integer\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpin34x7i6.rb:9:in\
    \ `[]'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpin34x7i6.rb:9:in `common'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpin34x7i6.rb:15:in `call'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpin34x7i6.rb:15:in `test_common'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_common\n\
    \     14:     candidate = method(:common)\n  => 15:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     16:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     17:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     18:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n===============================================================================\n\
    \nFinished in 0.000589 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1697.79 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.sort.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8p7qnthw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8p7qnthw.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.004938 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.51 tests/s, 202.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_k9ztnli\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_k9ztnli.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.00334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.40 tests/s, 299.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0t7mn86v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0t7mn86v.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.010297 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.12 tests/s, 97.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return x if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa0ay3488\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa0ay3488.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.37 tests/s, 306.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo564q6ce\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo564q6ce.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.76 tests/s, 299.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find { |a,b| a\
    \ == b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx8toyzdt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx8toyzdt.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.26 tests/s, 100.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwclfo94q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwclfo94q.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.01 tests/s, 312.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n \
    \   assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjcg9yzoh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjcg9yzoh.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.005107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.81 tests/s, 195.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb7rjja0z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb7rjja0z.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.005559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.89 tests/s, 179.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw77rp4x8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw77rp4x8.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.020065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.84 tests/s, 49.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).select { |e| e[0] == e[1] }.flatten.sort\
    \ : []\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp97vl3dyp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp97vl3dyp.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 1, 653, 653]>\n\ndiff:\n? [1, 1, 653, 653]\n===============================================================================\n\
    \nFinished in 0.005054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.86 tests/s, 197.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwdgefer0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwdgefer0.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003354 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.15 tests/s, 298.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiwypk6nt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiwypk6nt.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.00408 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.10 tests/s, 245.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).map { |a,b| a if a.eql?(b) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbm76kn_r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbm76kn_r.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[nil, nil, nil, nil, nil, nil, nil]>\n\ndiff:\n? [1  , 5\
    \  , 653                    ]\n?  nil  nil  nil, nil, nil, nil, nil \n?  ?  ?\
    \  ??? \n===============================================================================\n\
    \nFinished in 0.004757 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.22 tests/s, 210.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |i|\n    l2.each\
    \ do |j|\n      return i if i == j\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ddk9s8g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ddk9s8g.rb:17:in\
    \ `test_common'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:\
    \   def test_common\n     16:     candidate = method(:common)\n  => 17:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     18:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  19:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     20:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.005298 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.75 tests/s, 188.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_atpksom\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_atpksom.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003351 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.42 tests/s, 298.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp08rx_h14\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp08rx_h14.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.91 tests/s, 236.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9tqbrumq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9tqbrumq.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003402 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.94 tests/s, 293.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.zip(l2).to_a.combination(2).select { |x, y| x == y }.map(&:first)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5cjgur1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5cjgur1.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003333 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.03 tests/s, 300.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp57gtxv9f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp57gtxv9f.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003412 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.08 tests/s, 293.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6d7_6c4v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6d7_6c4v.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.004836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.78 tests/s, 206.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.flatten.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4pvn4_ew\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4pvn4_ew.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 5, 4, 7, 3, 34, 653, 9, 2, 121]>\n\ndiff:\n? [1, 5, 4,\
    \ 7, 3, 34, 653, 9, 2, 121]\n===============================================================================\n\
    \nFinished in 0.004758 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.17 tests/s, 210.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq2nlazik\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq2nlazik.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.94 tests/s, 306.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7_h1y91t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7_h1y91t.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.00317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.46 tests/s, 315.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.zip(l2).map { |e| e[0] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8e5m_zq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8e5m_zq.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 2, 3, 4, 5, 34, 653]>\n\ndiff:\n? [1, 2, 3, 4, 5, 34,\
    \ 653]\n===============================================================================\n\
    \nFinished in 0.003693 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.78 tests/s, 270.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.flatten.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2a1ajh0j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2a1ajh0j.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 5, 4, 7, 3, 34, 653, 9, 2, 121]>\n\ndiff:\n? [1, 5, 4,\
    \ 7, 3, 34, 653, 9, 2, 121]\n===============================================================================\n\
    \nFinished in 0.004721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.82 tests/s, 211.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpos5cq3zq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpos5cq3zq.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.26 tests/s, 316.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxesmx5k9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxesmx5k9.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.008731 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.53 tests/s, 114.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv2h18deb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv2h18deb.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [4, 7], [3, 1], [34, 5], [653, 9], [2, 653], [5,\
    \ 121]]>\n\ndiff:\n? [[1, 5], [4, 7], [3, 1], [34, 5], [653, 9], [2, 653], [5,\
    \ 121]]\n===============================================================================\n\
    \nFinished in 0.006238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.31 tests/s, 160.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return x if x == y || l1[i] == l1[j]\
    \ \n    end\n  end\n  nil\nend\n</code>\n<|/ a tags=ruby,arrays,ruby-on-rails\
    \ |>\n<| c |>\nI like this solution. Elegant and simple.\n<|/ c |>\n<| c |>\n\
    This solution does not work if l1 and l2 are different lengths.\n<|/ c |>\n<|\
    \ c |>\nThis solution does not work if l1 and l2 are different lengths.\n<|/ c\
    \ |>\n<| a dscore=4 |>\n<code>\nl1.zip(l2).select { |x, y| x == y }\n</code>\n\
    <|/ a tags=ruby,arrays,ruby-on-rails |>\n<| c |>\nThis solution does not work\
    \ if l1 and l2 are different lengths.\n<|/ c |>\n<| c |>\nThis solution does not\
    \ work if l1 and l2 are different lengths.\n<|/ c |>\n<| c |>\nThis solution does\
    \ not work if l1 and l2 are different lengths.\n<|/ c |>\n<| c |>\nThis solution\
    \ does not work if l1 and l2 are different lengths.\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\nl1.zip(l2).select { |x, y| x == y }\n</code>\n<|/ a tags=ruby,arrays,ruby-on-rails\
    \ |>\n<| c |>\nThis solution does not work if l1 and l2 are different lengths.\n\
    <|/ c |>\n<| c |>\nThis solution does not work if l1 and l2 are different lengths.\n\
    <|/ c |>\n<| c |>\nThis solution does not work if l1 and l2 are different lengths.\n\
    <|/ c |>\n<| c |>\nThis solution does not work if l1 and l2 are different lengths.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\nl1.zip(l2).select { |x, y| x == y }\n</code>\n\
    <|/ a tags=ruby,arrays,ruby-on-rails |>\n<| c |>\nThis solution does not work\
    \ if l1 and l2 are different lengths.\n<|/ c |>\n<| a tags=ruby,arrays,ruby-on-rails\
    \ |>\n<code>\nl1.zip(l2).select { |x, y| x == y }\n</code>\n<|/ a dscore=3 |>\n\
    \nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4u692p1r.rb:14: syntax\
    \ error, unexpected '<', expecting end-of-input\n</code>\n^\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find do |a, b|\n\
    \    a == b\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4c0liof\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4c0liof.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003398 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.29 tests/s, 294.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).to_a : l1.zip(l2).to_a.select { |e| e[0]\
    \ == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk7orsbk4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk7orsbk4.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 1], [2, 5], [3, 5], [4, 7], [5, 9], [34, 121], [653,\
    \ 653]]>\n\ndiff:\n? [[1, 1], [2, 5], [3, 5], [4, 7], [5, 9], [34, 121], [653,\
    \ 653]]\n===============================================================================\n\
    \nFinished in 0.007072 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.40 tests/s, 141.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.flatten.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqb5blz26\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqb5blz26.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 2, 3, 4, 5, 7, 9, 34, 121, 653]>\n\ndiff:\n? [1, 2, 3,\
    \ 4, 5, 7, 9, 34, 121, 653]\n===============================================================================\n\
    \nFinished in 0.004929 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.88 tests/s, 202.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppwijz4d1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppwijz4d1.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.53 tests/s, 297.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8yzh08v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8yzh08v.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.007006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.73 tests/s, 142.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklbuhgz2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklbuhgz2.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003513 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.66 tests/s, 284.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvo0qi1fk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvo0qi1fk.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.004709 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.36 tests/s, 212.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpncuonoss\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpncuonoss.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003451 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.77 tests/s, 289.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgowmzusj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgowmzusj.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.20 tests/s, 301.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv6p9qqi2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv6p9qqi2.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003554 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.37 tests/s, 281.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).map { |e| e[0]\
    \ }.reject { |e| l2.include?(e) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmporye5k4o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmporye5k4o.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[4, 3, 34, 2]>\n\ndiff:\n? [1, 5, 653    ]\n?  4  3     4,\
    \ 2 \n?  ?  ?  -- ++++ \n===============================================================================\n\
    \nFinished in 0.007377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.56 tests/s, 135.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptrwb907q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptrwb907q.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.00327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.81 tests/s, 305.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find do |e1, e2|\n\
    \    e1 == e2\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp7i7c8c5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp7i7c8c5.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.58 tests/s, 313.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).select { |e| e[0] == e[1] }.flatten.sort\
    \ : []\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphp9cqyyn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphp9cqyyn.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 1, 653, 653]>\n\ndiff:\n? [1, 1, 653, 653]\n===============================================================================\n\
    \nFinished in 0.003642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.57 tests/s, 274.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find do |a, b|\n\
    \    a.first == b.first\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zb_7rsb\n\
    Started\nE\n===============================================================================\n\
    Error: test_common(TestHumanEval):\n  NoMethodError: undefined method `first'\
    \ for 1:Integer\n  \n      a.first == b.first\n       ^^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zb_7rsb.rb:8:in\
    \ `block in common'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zb_7rsb.rb:7:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zb_7rsb.rb:7:in\
    \ `find'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zb_7rsb.rb:7:in\
    \ `common'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zb_7rsb.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zb_7rsb.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n===============================================================================\n\
    \nFinished in 0.002158 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    463.39 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).select { |x, y| x == y }.flatten : []\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptndp7ahf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptndp7ahf.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 1, 653, 653]>\n\ndiff:\n? [1, 1, 653, 653]\n===============================================================================\n\
    \nFinished in 0.003393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.72 tests/s, 294.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelf437xq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelf437xq.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.010491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.32 tests/s, 95.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find { |x, y|\
    \ x == y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lyn27ec\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lyn27ec.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.40 tests/s, 312.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n \
    \   assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwldm8sib\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwldm8sib.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.004989 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.44 tests/s, 200.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbfnu4nwg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbfnu4nwg.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.00331 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.11 tests/s, 302.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr85nvbt7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr85nvbt7.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.005995 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.81 tests/s, 166.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvv7kcx60\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvv7kcx60.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [4, 7], [3, 1], [34, 5], [653, 9], [2, 653], [5,\
    \ 121]]>\n\ndiff:\n? [[1, 5], [4, 7], [3, 1], [34, 5], [653, 9], [2, 653], [5,\
    \ 121]]\n===============================================================================\n\
    \nFinished in 0.00508 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.85 tests/s, 196.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).select { |e| e[0]\
    \ == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp18sjwvsy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp18sjwvsy.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.22 tests/s, 299.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n \
    \   assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpirxbct9a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpirxbct9a.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.005048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.10 tests/s, 198.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgwemu9pc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgwemu9pc.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.39 tests/s, 302.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbwdueke_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbwdueke_.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.04 tests/s, 299.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.sort.uniq.to_a\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnzohz70a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnzohz70a.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.005106 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.85 tests/s, 195.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.zip(l2).map { |x, y| x if x == y }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppldi1rsw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppldi1rsw.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, nil, nil, nil, nil, nil, 653]>\n\ndiff:\n? [1, 5  , \
    \                    653]\n?     nil  nil, nil, nil, nil,     \n?     ? ++++++++++++++++++++\
    \     \n===============================================================================\n\
    \nFinished in 0.003738 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.52 tests/s, 267.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpljiwwpvg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpljiwwpvg.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.00329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.95 tests/s, 303.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find { |e1, e2|\
    \ e1 == e2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp2mhgfhk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp2mhgfhk.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.018872 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.99 tests/s, 52.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.zip(l2).to_a.combination(2).select { |x, y| x == y }.map(&:first)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfvinxe6d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfvinxe6d.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.19 tests/s, 313.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfxpc2k24\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfxpc2k24.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.37 tests/s, 306.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdpqxahd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdpqxahd.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.37 tests/s, 283.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcstpk9b3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcstpk9b3.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003408 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.43 tests/s, 293.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp73rpfnc5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp73rpfnc5.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.00334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.40 tests/s, 299.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find { |x, y|\
    \ x == y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4tygxnni\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4tygxnni.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003873 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    258.20 tests/s, 258.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.flatten.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp34hl8lcn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp34hl8lcn.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 5, 4, 7, 3, 34, 653, 9, 2, 121]>\n\ndiff:\n? [1, 5, 4,\
    \ 7, 3, 34, 653, 9, 2, 121]\n===============================================================================\n\
    \nFinished in 0.00774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.20 tests/s, 129.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6t38px_7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6t38px_7.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.007193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.02 tests/s, 139.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcziaqdu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcziaqdu.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.07 tests/s, 308.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqxtw9sn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqxtw9sn.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [4, 7], [3, 1], [34, 5], [653, 9], [2, 653], [5,\
    \ 121]]>\n\ndiff:\n? [[1, 5], [4, 7], [3, 1], [34, 5], [653, 9], [2, 653], [5,\
    \ 121]]\n===============================================================================\n\
    \nFinished in 0.019492 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.30 tests/s, 51.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgser31jd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgser31jd.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.004729 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.46 tests/s, 211.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find { |e1, e2|\
    \ e1 == e2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxaiesag\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxaiesag.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.56 tests/s, 310.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).select { |e| e[0] == e[1] }.flatten.sort\
    \ : []\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy9e_t4vv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy9e_t4vv.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 1, 653, 653]>\n\ndiff:\n? [1, 1, 653, 653]\n===============================================================================\n\
    \nFinished in 0.003762 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.82 tests/s, 265.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n \
    \   assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaiqk0o6r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaiqk0o6r.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.015812 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.24 tests/s, 63.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.sort.uniq.to_a\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2vhhr8ox\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2vhhr8ox.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.0049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.08 tests/s, 204.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).each do |a, b|\n    return a if a.eql?(b)\n  end\n  nil\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1q8gch5h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1q8gch5h.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.97 tests/s, 313.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return x if x == y or l1.include?(y)\
    \ or l2.include?(x)\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5zrvwgk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5zrvwgk.rb:17:in\
    \ `test_common'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:\
    \   def test_common\n     16:     candidate = method(:common)\n  => 17:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     18:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  19:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     20:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.010646 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.93 tests/s, 93.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find { |e1, e2|\
    \ e1 == e2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ojfw256\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ojfw256.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.31 tests/s, 309.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find { |e1, e2|\
    \ e1 == e2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjj8b6lu2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjj8b6lu2.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.95 tests/s, 303.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdijnygz2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdijnygz2.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003453 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.60 tests/s, 289.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6r9m0r8l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6r9m0r8l.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.40 tests/s, 312.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).find do |e1, e2|\n\
    \    e1 == e2\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq289_cg5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq289_cg5.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003436 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.04 tests/s, 291.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04osnmo_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04osnmo_.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.57 tests/s, 300.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.sort.uniq.to_a\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp22unxtir\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp22unxtir.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]>\n\ndiff:\n? [[1, 5], [2, 653], [3, 1], [4, 7], [5, 121], [34, 5], [653,\
    \ 9]]\n===============================================================================\n\
    \nFinished in 0.004974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.05 tests/s, 201.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).select { |e| e[0] == e[1] }.flatten : []\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprlqo60va\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprlqo60va.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 1, 653, 653]>\n\ndiff:\n? [1, 1, 653, 653]\n===============================================================================\n\
    \nFinished in 0.019522 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.22 tests/s, 51.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3qcoajg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3qcoajg.rb:18:in\
    \ `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003837 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    260.62 tests/s, 260.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaz7q8bhw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaz7q8bhw.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.002981 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    335.46 tests/s, 335.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.zip(l2).each do |a,b|\n    return a if b == a\n    return b if a == b\n\
    \  end\n  return nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2wkyjm1v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2wkyjm1v.rb:19:in\
    \ `test_common'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:\
    \   def test_common\n     18:     candidate = method(:common)\n  => 19:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     20:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  21:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     22:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<1>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003408 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.43 tests/s, 293.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ckmieis\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ckmieis.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.87 tests/s, 313.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n\
    \  l1.length == l2.length ? l1.zip(l2).select { |x, y| x == y }.flatten : []\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr38osiv1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr38osiv1.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 1, 653, 653]>\n\ndiff:\n? [1, 1, 653, 653]\n===============================================================================\n\
    \nFinished in 0.003278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.06 tests/s, 305.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.to_a\n  l2 = l2.to_a\n\
    \  l1.zip(l2).to_a.flatten.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxvm25suc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxvm25suc.rb:15:in\
    \ `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:\
    \   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[1, 5, 4, 7, 3, 34, 653, 9, 2, 121]>\n\ndiff:\n? [1, 5, 4,\
    \ 7, 3, 34, 653, 9, 2, 121]\n===============================================================================\n\
    \nFinished in 0.004253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.13 tests/s, 235.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.zip(l2).to_a.select {\
    \ |e| e[0] == e[1] }.map(&:first)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n\
    \    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7,\
    \ 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8],\
    \ [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4et4loau\n\
    Started\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4et4loau.rb:13:in\
    \ `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:\
    \   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1,\
    \ 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n\
    \     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n   \
    \  15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n\
    \     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]>\
    \ expected but was\n<[]>\n\ndiff:\n? [1, 5, 653]\n===============================================================================\n\
    \nFinished in 0.003191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.38 tests/s, 313.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
