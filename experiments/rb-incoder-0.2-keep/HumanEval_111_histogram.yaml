name: HumanEval_111_histogram
language: ruby
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n# histogram('a b b\
  \ a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a': 2, 'b': 2}\n# histogram('b\
  \ b b b a') == {'b': 4}\n# histogram('') == {}\ndef histogram(test)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_histogram\n\
  \    candidate = method(:histogram)\n    assert_equal({\"a\" => 2, \"b\" => 2},\
  \ candidate.call(\"a b b a\"))\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"\
  a b c a b\"))\n    assert_equal({\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1,\
  \ \"g\" => 1}, candidate.call(\"a b c d g\"))\n    assert_equal({\"r\" => 1, \"\
  t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({\"b\" => 4},\
  \ candidate.call(\"b b b b a\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\"\
  \ => 1}, candidate.call(\"r t g\"))\n    assert_equal({}, candidate.call(\"\"))\n\
  \    assert_equal({\"a\" => 1}, candidate.call(\"a\"))\n  end\nend\n"
completions: ["  result = {}\n  test.split(' ').each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    letter = letter.downcase\n    result[letter] = result[:letter]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  letters = test.split('\
    \ ')\n  letters.each do |letter|\n    letters[letter] = letters[letter].to_i\n\
    \  end\n  letters.max_by { |k, v| v }\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n  result\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] =\
    \ test.split(' ').count(letter)\n  end\n  result\nend", "  letters = test.split\n\
    \  frequencies = Hash.new(0)\n  letters.each do |letter|\n    frequencies[letter]\
    \ += 1 if frequencies[letter].nil?\n    frequencies[letter] += 1\n  end\n  frequencies.sort_by\
    \ {|k, v| v}.reverse\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    letter = letter.downcase\n    result[letter] ||= 0\n    result[letter] +=\
    \ 1\n  end\n  result\nend", "  letters = test.split(' ')\n  frequencies = Hash.new(0)\n\
    \  letters.each do |letter|\n    frequencies[letter] += 1\n  end\n  frequencies.max_by\
    \ { |k, v| v }\nend", "  letters = test.split(' ') \n  histo = {}\n  letters.each\
    \ do |letter|\n    histo[letter] = histo[letter].to_i + 1 if histo[letter].nil?\n\
    \    histo[letter] = histo[letter].to_i + 1 if histo[letter] >= 1\n  end\n  return\
    \ histo\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = test.split(' ').count(letter)\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = test.split(\" \").count(letter)\n\
    \  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n \
    \   result[letter] = test.split(' ').count(letter)\n  end\n  result\nend", " \
    \ letters = test.split(' ')\n  letters.each do |letter|\n    letters[letter] =\
    \ letters[letter].to_i\n  end\n  letters.group_by { |k, v| v }.max_by { |k, v|\
    \ v }\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = test.split(\" \").count(letter)\n  end\n  result\nend", "  result = {}\n \
    \ test.split(' ').each do |letter|\n    result[letter] = test.split(' ').count(letter)\n\
    \  end\n  result\nend", "  test.split(' ').inject(Hash.new(0)) { |h, x| h[x] +=\
    \ 1 }\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    letter\
    \ = letter.downcase\n    result[letter] = result[:letter] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    letter = letter.downcase\n    result[letter] ||= 0\n    result[letter] +=\
    \ 1\n  end\n  result\nend", "  hash = {}\n  test.split(' ').each do |letter|\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n    hash[letter]\
    \ = hash[letter].to_i + 1 if hash[letter].to_i >= hash[letter].to_i\n  end\n \
    \ hash\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = test.split(' ').count(letter)\n  end\n  result\nend", "  letters = test.split('\
    \ ')\n  histo = {}\n  letters.each do |letter|\n    histo[letter] = histo[letter].to_i\
    \ + 1 if histo[letter].nil?\n    histo[letter] = histo[letter].to_i + 1 if histo[letter].to_i\
    \ >= letters.count(letter)\n  end\n  histo\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n\
    \  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    letter\
    \ = letter.downcase\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  letters = test.split(' ')\n  letters.each do |letter|\n  \
    \  letters[letter] = letters[letter].to_i\n  end\n  letters.sort_by! { |k, v|\
    \ v }\n  letters.group_by! { |k, v| k }\n  letters.map { |k, v| [k, v.count] }\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = test.split(\" \").count(letter)\n  end\n  result\nend", "  result = {}\n \
    \ test.split(\" \").each do |letter|\n    result[letter] = test.split(\" \").count(letter)\n\
    \  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n \
    \   result[letter] = test.split(' ').count(letter)\n  end\n  result\nend", " \
    \ letters = test.split\n  letters.map! { |letter| letter = letter.downcase }\n\
    \  letters.group_by { |letter| letter }.map { |letter, occurrences| [letter, occurrences.count]\
    \ }.sort_by { |letter, occurrences| -occurrences }.first\nend", "  result = {}\n\
    \  test.split(' ').each do |letter|\n    letter = letter.downcase\n    if result[letter].nil?\n\
    \      result[letter] = 1\n    else\n      result[letter] += 1\n    end\n  end\n\
    \  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = test.split(' ').count(letter)\n  end\n  result\nend", "  test.split(\" \"\
    ).inject(Hash.new(0)) { |h, x| h[x] += 1 }\nend", "  hash = {}\n  test.split('\
    \ ').each do |letter|\n    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter] >= 1\n  end\n  hash\n\
    end", "  letters = test.split(' ')\n  letters.each do |letter|\n    letters[letter]\
    \ = letters[letter].to_i\n  end\n  letters.max_by { |k, v| v }\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    if result[letter] == nil\n      result[letter] = 1\n    else\n\
    \      result[letter] += 1\n    end\n  end\n  result\nend", "  result = {}\n \
    \ test.split(' ').each do |letter|\n    result[letter] = test.split(' ').count(letter)\n\
    \  end\n  result\nend", "  test.split(' ').inject(Hash.new(0)) { |h, x| h[x] +=\
    \ 1; h }\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = test.split(' ').count(letter)\n  end\n  result\nend", "  letters = test.split('\
    \ ') \n  result = {}\n  letters.each do |letter|\n    letter = letter.downcase\n\
    \    if letters[letter] >= 1\n      result[letter] = letters[letter]\n    end\n\
    \  end\n  return result\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] = test.split(' ').count(letter)\n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n \
    \ result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = test.split(\" \").count(letter)\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0))\
    \ { |h,x| h[x] += 1 }\nend", "  result = Hash.new(0)\n  test.split(//).each do\
    \ |letter|\n    result[letter] += 1 if result.has_key?(letter)\n  end\n  result\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n \
    \ result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = test.split(' ').count(letter)\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0))\
    \ { |h, x| h[x] += 1; h }\nend", "  hash = {}\n  test.split(' ').each do |letter|\n\
    \    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n  hash\nend", "  letters\
    \ = test.split(' ')\n  letters.map!{|letter| letter}\n  letters.sort!\n  letters.uniq!\n\
    \  letters.map!{|letter| [letter, letters.count(letter)]}\n  letters.max_by{|key,\
    \ value| value}\nend", "  result = {}\n  test.split(' ').each do |letter|\n  \
    \  result[letter] = test.split(' ').count(letter)\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    letter = letter.downcase\n   \
    \ result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n  result\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = test.split(\" \").count(letter)\n  end\n  result\nend", "  result = {}\n \
    \ test.split(' ').each do |letter|\n    result[letter] = test.split(' ').count(letter)\n\
    \  end\n  result\nend", "  hash = {}\n  test.split(' ').each do |letter|\n   \
    \ hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n    hash[letter]\
    \ = hash[letter].to_i + 1 if hash[letter].to_i > hash[letter]\n  end\n  hash\n\
    end", "  letters = test.split(' ')\n  letters.each do |letter|\n    letters[letter]\
    \ = letters[letter].to_i\n  end\n  letters.max_by { |k, v| v }\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] = test.split(\"\
    \ \").count(letter)\n  end\n  result\nend", "  letters = test.split(' ')\n  letters.each\
    \ do |letter|\n    letters[letter] = letters[letter].to_i\n  end\n  letters.sort_by!{|k,\
    \ v| v}\n  letters.group_by{|k, v| k}.map{|k, v| [k, v.count]}\nend", "  test.split('\
    \ ').inject(Hash.new(0)) { |h, x| h[x] += 1 }\nend", "  hash = {}\n  test.split(\"\
    \ \").each do |letter|\n    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n\
    \  hash\nend", "  letters = test.split(' ')\n  letters.each do |letter|\n    letters[letter]\
    \ = letters[letter].to_i\n  end\n  letters.sort_by{|k, v| v}.reverse.inject({})\
    \ do |memo, pair|\n    memo[pair[0]] = pair[1]\n    memo\n  end\nend", "  test.split('\
    \ ').inject(Hash.new(0)) { |h, x| h[x] += 1 }\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n\
    \  result\nend", "  letters = test.split(' ')\n  frequencies = {}\n  letters.each\
    \ do |letter|\n    frequencies[letter] = frequencies[letter].to_i + 1\n  end\n\
    \  frequencies.sort_by! { |k, v| v }.reverse\n  frequencies.each do |k, v|\n \
    \   puts \"#{k} #{v}\"\n  end\nend", "  result = {}\n  test.split(' ').each do\
    \ |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n  result\n\
    end", "  letters = test.split(' ')\n  histo = {}\n  letters.each do |letter|\n\
    \    histo[letter] = histo[letter].to_i + 1 if histo[letter].nil?\n    histo[letter]\
    \ = histo[letter].to_i + 1 if histo[letter] >= 1\n  end\n  histo\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  letters = test.split(' ')\n  letters.map!\
    \ { |letter| letter[0].downcase }\n  letters.group_by{|letter| letter}.map{|letter,\
    \ occurrences| [letter, occurrences.count]}\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    letter = letter.downcase\n    if result[letter] ==\
    \ nil\n      result[letter] = 1\n    else\n      result[letter] += 1\n    end\n\
    \  end\n  result\nend", "  test.split(' ').inject(Hash.new(0)) { |histogram, letter|\
    \ histogram[letter] += 1 }\nend", "  letters = test.split(' ')\n  letters.map!\
    \ { |letter| letter[0].downcase }\n  letters.group_by { |letter| letter }.map\
    \ { |letter, occurrences| [letter, occurrences.count] }.sort_by { |letter, occurrences|\
    \ -occurrences }.reverse\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    letter = letter.downcase\n    result[letter] = result[letter].to_i + 1 if\
    \ result.has_key?(letter)\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n\
    \  result\nend", "  letters = test.split(' ')\n  frequencies = Hash.new(0)\n \
    \ letters.each do |letter|\n    frequencies[letter] += 1 if frequencies[letter].nil?\n\
    \  end\n  frequencies.sort_by { |k, v| v }.reverse.to_h\nend", "  letters = test.split('\
    \ ')\n  frequencies = {}\n  letters.each do |letter|\n    frequencies[letter]\
    \ = frequencies[letter].to_i + 1\n  end\n  frequencies.each do |letter, count|\n\
    \    if count > frequencies[letter].to_i\n      frequencies[letter] = count\n\
    \    end\n  end\n  frequencies\nend", "  hash = {}\n  test.split(' ').each do\
    \ |letter|\n    hash[letter] = hash[letter].to_i if hash[letter].nil?\n    hash[letter]\
    \ += 1\n  end\n  hash\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] = test.split(' ').count(letter)\n  end\n  result\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n \
    \ result\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n    hash[letter]\
    \ = hash[letter].to_i + 1 if hash[letter].nil?\n    hash[letter] = hash[letter].to_i\
    \ + 1 if hash[letter] >= 1\n  end\n  hash\nend", "  test.split(' ').inject(Hash.new(0))\
    \ { |h, x| h[x] += 1 }\nend", "  letters = test.split(' ')\n  letters.each do\
    \ |letter|\n    letters[letter] = letters[letter].to_i\n  end\n  letters.max_by\
    \ { |k, v| v }\nend", "  letters = test.split(' ')\n  letters.each do |letter|\n\
    \    letters[letter] = letters[letter].to_i\n  end\n  letters.sort_by!{|k, v|\
    \ v}\n  letters.group_by{|k, v| k}.map{|k, v| [k, v.length]}.sort_by!{|k, v| -v[1]}\n\
    end", "  test.split(' ').inject(Hash.new(0)) { |h,x| h[x] += 1 }\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  letters = test.split(' ')\n  letters.each\
    \ do |letter|\n    letters[letter] = letters[letter].to_i\n  end\n  letters.max_by\
    \ {|k, v| v}\nend", "  hash = {}\n  test.split(' ').each do |letter|\n    hash[letter]\
    \ = hash[letter].to_i + 1 if hash[letter].nil?\n    hash[letter] = hash[letter].to_i\
    \ + 1 if hash[letter] >= 1\n  end\n  hash\nend", "  test.split(' ').inject(Hash.new(0))\
    \ { |h,x| h[x] += 1 }\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    letter = letter.downcase\n    result[letter] = result[letter].to_i + 1 if\
    \ result[letter]\n  end\n  result\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    letter = letter.downcase\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  letters = test.split(' ')\n  histo = {}\n  letters.each\
    \ do |letter|\n    histo[letter] = histo[letter].to_i if histo[letter].nil?\n\
    \    histo[letter] += 1\n  end\n  histo\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n\
    \  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    letter\
    \ = letter.downcase\n    if result[letter].nil?\n      result[letter] = 1\n  \
    \  else\n      result[letter] += 1\n    end\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  result = Hash.new(0)\n  test.split('\
    \ ').each do |letter|\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n  result\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] = result[letter].to_i + 1 if result[letter]\n  end\n  result\n\
    end", "  letters = test.split(' ')\n  letters.each do |letter|\n    letters[letter]\
    \ = letters[letter].to_i\n  end\n  letters.sort_by{|k, v| v}.reverse.group_by{|k,\
    \ v| k}.map{|k, v| [k, v.size]}.to_h\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n  result\n\
    end", "  test.split(' ').inject(Hash.new(0)) { |h, x| h[x] += 1 }\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] = test.split(\"\
    \ \").count(letter)\n  end\n  result\nend", "  hash = {}\n  test.split(\" \").each\
    \ do |letter|\n    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter] != nil\n  end\n  hash\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] = result[letter].to_i + 1 if result[letter]\n  end\n  result\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] =\
    \ test.split(' ').count(letter)\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n\
    \  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = test.split(' ').count(letter)\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0))\
    \ { |h, x| h[x] += 1 }\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    if result[letter] == nil\n      result[letter] = 1\n    else\n      result[letter]\
    \ += 1\n    end\n  end\n  result\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n  result\n\
    end", "  hash = {}\n  test.split(' ').each do |letter|\n    hash[letter] = hash[letter].to_i\
    \ + 1 if hash[letter].nil?\n    hash[letter] = hash[letter].to_i + 1 if hash[letter]\
    \ >= 1\n  end\n  hash\nend", "  letters = test.split(' ')\n  frequencies = {}\n\
    \  letters.each do |letter|\n    frequencies[letter] = frequencies[letter].to_i\
    \ + 1\n  end\n  frequencies.sort_by {|k, v| v}.reverse.inject({}) do |result,\
    \ pair|\n    result[pair[0]] = pair[1]\n    result\n  end\nend", "  result = {}\n\
    \  test.split(' ').each do |letter|\n    letter = letter.downcase\n    if result[letter].nil?\n\
    \      result[letter] = 1\n    else\n      result[letter] += 1\n    end\n  end\n\
    \  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    if result[letter]\
    \ == nil\n      result[letter] = 1\n    else\n      result[letter] += 1\n    end\n\
    \  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n \
    \   result[letter] = test.split(' ').count(letter)\n  end\n  result\nend", " \
    \ letters = test.split(' ')\n  histo = {}\n  letters.each do |letter|\n    histo[letter]\
    \ = histo[letter].to_i if histo[letter].nil?\n    histo[letter] += 1\n  end\n\
    \  histo\nend", "  test.split(' ').inject(Hash.new(0)) { |h, x| h[x] += 1 }\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n \
    \ result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = result[:letter] || 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    letter = letter.downcase\n   \
    \ result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n  result\n\
    end", "  letters = test.split(' ')\n  letters.each do |letter|\n    letters[letter]\
    \ = letters[letter].to_i\n  end\n  letters.max_by { |k, v| v }\nend", "  result\
    \ = Hash.new(0)\n  test.split(' ').each do |letter|\n    result[letter] += 1\n\
    \  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n \
    \   result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n  result\n\
    end", "  letters = test.split(' ')\n  letters.map!{|letter| letter}\n  letters.sort!\n\
    \  letters.uniq!\n  letters.map!{|letter| [letter, letters.count(letter)]}\n \
    \ letters.group_by{|letter| letter}.map{|letter, occurrences| [letter, occurrences.max]}\n\
    end", "  letters = test.split(' ')\n  histo = {}\n  letters.each do |letter|\n\
    \    histo[letter] = histo[letter].to_i if histo[letter].nil?\n    histo[letter]\
    \ += 1\n  end\n  histo\nend", "  result = Hash.new(0)\n  test.split(' ').each\
    \ do |letter|\n    result[letter] += 1 if result.has_key?(letter)\n  end\n  result\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    letter = letter.downcase\n\
    \    if result[letter].nil?\n      result[letter] = 1\n    else\n      result[letter]\
    \ += 1\n    end\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0))\
    \ { |h, x| h[x] += 1; h }\nend", "  letters = test.split(' ')\n  histo = {}\n\
    \  letters.each do |letter|\n    histo[letter] = histo[letter].to_i + 1 if histo[letter].nil?\n\
    \    histo[letter] = histo[letter].to_i + 1 if histo[letter].to_i < histo[letter].to_i\n\
    \  end\n  histo\nend", "  letters = test.split(' ')\n  letters.each do |letter|\n\
    \    letters[letter] = letters[letter].to_i\n  end\n  letters.sort_by!{ |k, v|\
    \ v }\n  letters.reverse!\n  letters.inject({}) do |memo, pair|\n    memo[pair[0]]\
    \ = pair[1]\n    memo\n  end\nend", "  result = {}\n  test.split(' ').each do\
    \ |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n  result\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] =\
    \ test.split(' ').count(letter)\n  end\n  result\nend", "  result = Hash.new(0)\n\
    \  test.split(' ').each do |letter|\n    result[letter] += 1\n  end\n  result\n\
    end", "  result = Hash.new(0)\n  test.split(' ').each do |letter|\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] = test.split(' ').count(letter)\n  end\n  result\nend", " \
    \ test.split(' ').inject(Hash.new(0)) { |h, x| h[x] += 1 }\nend", "  letters =\
    \ test.split(' ')\n  histo = {}\n  letters.each do |letter|\n    histo[letter]\
    \ = histo[letter].to_i + 1 if histo[letter].nil?\n    histo[letter] = histo[letter].to_i\
    \ + 1 if histo[letter].nil?\n  end\n  histo\nend", "  hash = {}\n  test.split('\
    \ ').each do |letter|\n    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter].to_i > hash[letter]\n\
    \  end\n  hash\nend", "  test.split(' ').inject(Hash.new(0)) { |h, x| h[x] +=\
    \ 1 }\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = test.split(' ').count(letter)\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    letter = letter.downcase\n    if result[letter].nil?\n\
    \      result[letter] = 1\n    else\n      result[letter] += 1\n    end\n  end\n\
    \  result\nend", "  test.split(' ').inject(Hash.new(0)) { |h,x| h[x] += 1 }\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] =\
    \ result[:letter] || 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] = result[:letter] || 0\n    result[letter] +=\
    \ 1\n  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    letter = letter.downcase\n    result[letter] = result[letter].to_i + 1 if\
    \ result.has_key?(letter)\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = result[:letter] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  letters = test.split(' ')\n  letters.each do\
    \ |letter|\n    letters[letter] = letters[letter].to_i\n  end\n  letters.max_by\
    \ { |k, v| v }\nend", "  test.split(' ').inject(Hash.new(0)) { |h, x| h[x] +=\
    \ 1 }\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = test.split(' ').count(letter)\n  end\n  result\nend", "  letters = test.split('\
    \ ')\n  letters.each do |letter|\n    letters[letter] = letters[letter].to_i\n\
    \  end\n  letters.group_by { |k, v| v }.max_by { |k, v| v }\nend", "  result =\
    \ Hash.new(0)\n  test.split(' ').each do |letter|\n    result[letter] += 1\n \
    \ end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n  \
    \  result[letter] = test.split(' ').count(letter)\n  end\n  result\nend", "  letters\
    \ = test.split(' ')\n  letters.each do |letter|\n    letters[letter] = letters[letter].to_i\n\
    \  end\n  letters.sort_by{|k, v| v}.reverse.group_by{|k, v| k}.map{|k, v| [k,\
    \ v.size]}.to_h\nend", "  result = Hash.new(0)\n  test.split(' ').each do |letter|\n\
    \    result[letter] += 1 if result[letter] > 0\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0))\
    \ { |h,x| h[x] += 1 }\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    letter = letter.downcase\n    result[letter] = result[:letter] || 0\n   \
    \ result[letter] += 1\n  end\n  result\nend", "  letters = test.split\n  frequencies\
    \ = Hash.new(0)\n  letters.each do |letter|\n    frequencies[letter] += 1\n  end\n\
    \  frequencies.max_by { |k, v| v }\nend", "  test.split(' ').inject(Hash.new(0))\
    \ { |h, x| h[x] += 1 }\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = test.split(\" \").count(letter)\n  end\n  result\nend",
  "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0))\
    \ { |h, x| h[x] += 1 }\nend", "  letters = test.split(' ')\n  letters.each do\
    \ |letter|\n    letters[letter] = letters[letter].to_i\n  end\n  letters.max_by\
    \ { |k, v| v }\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n   \
    \ hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n    hash[letter]\
    \ = hash[letter].to_i + 1 if hash[letter].to_i > hash[letter]\n  end\n  hash\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] =\
    \ test.split(' ').count(letter)\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n\
    \  result\nend", "  hash = {}\n  test.split(' ').each do |letter|\n    hash[letter]\
    \ = hash[letter].to_i + 1 if hash[letter].nil?\n    hash[letter] = hash[letter].to_i\
    \ + 1 if hash[letter] >= 1\n  end\n  hash\nend", "  letters = test.split(' ')\n\
    \  frequencies = Hash.new(0)\n  letters.each do |letter|\n    frequencies[letter]\
    \ += 1\n  end\n  frequencies.each do |letter, count|\n    frequencies[letter]\
    \ = count if count > frequencies[letter]\n  end\n  frequencies.sort_by { |k, v|\
    \ v }.reverse\nend", "  test.split(' ').inject(Hash.new(0)) { |h,x| h[x] += 1\
    \ }\nend", "  letters = test.split(' ')\n  letters.each do |letter|\n    letters[letter]\
    \ = letters[letter].to_i\n  end\n  letters.max_by { |k, v| v }\nend", "  letters\
    \ = test.split(' ').map { |letter| letter[0].downcase }\n  letters.group_by {\
    \ |letter| letter }.map { |letter, occurrences| [letter, occurrences.count] }.max_by\
    \ { |letter, occurrences| occurrences }\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = result[:letter] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  letters = test.split(' ').map { |letter| letter[0].downcase\
    \ }\n  letters.group_by { |letter| letter }.map { |letter, occurrences| [letter,\
    \ occurrences.count] }.max_by { |letter, occurrences| occurrences }\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    letter = letter.downcase\n\
    \    if result[letter] == nil\n      result[letter] = 1\n    else\n      result[letter]\
    \ += 1\n    end\n  end\n  result\nend", "  letters = test.split(' ')\n  count\
    \ = {}\n  letters.each do |letter|\n    count[letter] = count.has_key?(letter)\
    \ ? count[letter] + 1 : 1\n  end\n  count.each do |key, value|\n    count[key]\
    \ = value.to_i\n  end\n  count.sort_by{|k, v| v}.reverse\nend", "  result = {}\n\
    \  test.split(' ').each do |letter|\n    letter = letter.downcase\n    result[letter]\
    \ = result[:letter] || 0\n    result[letter] += 1\n  end\n  result\nend", "  letters\
    \ = test.split(' ')\n  letters.map!{|letter| letter}\n  letters.sort!\n  letters.uniq!\n\
    \  letters.map!{|letter| letter}\n  letters.map!{|letter| letters.count(letter)}\n\
    \  letters.map!{|letter, count| [letter, count]}\n  letters.max_by{|letter, count|\
    \ count}\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = result[:letter] || 0\n    result[letter] += 1\n  end\n  result\nend", "  test.split('\
    \ ').inject(Hash.new(0)) { |h,x| h[x] += 1 }\nend", "  letters = test.split('\
    \ ')\n  frequencies = Hash.new(0)\n  letters.each do |letter|\n    frequencies[letter]\
    \ += 1\n  end\n  frequencies.sort_by {|k, v| -v}.inject({}) do |result, pair|\n\
    \    result[pair[0]] = pair[1]\n    result\n  end\nend", "  letters = test.split\n\
    \  result = Hash.new(0)\n  letters.each do |letter|\n    result[letter] += 1\n\
    \  end\n  result\nend", "  result = Hash.new(0)\n  test.split(' ').each do |letter|\n\
    \    result[letter] += 1 if result.has_key?(letter)\n  end\n  result\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    if result[letter]\n      result[letter] += 1\n    else\n  \
    \    result[letter] = 1\n    end\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0))\
    \ { |h, x| h[x] += 1 }\nend", "  letters = test.split(' ')\n  letters.each do\
    \ |letter|\n    letters[letter] = letters[letter].to_i\n  end\n  letters.group_by\
    \ { |k, v| v }.max_by { |k, v| v }\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    if result[letter] == nil\n      result[letter] = 1\n    else\n\
    \      result[letter] += 1\n    end\n  end\n  result\nend", "  letters = test.split('\
    \ ')\n  histo = {}\n  letters.each do |letter|\n    histo[letter] = histo[letter].to_i\
    \ + 1 if histo[letter].nil?\n    histo[letter] = histo[letter].to_i + 1 if histo[letter]\
    \ != nil\n  end\n  histo\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    letter = letter.downcase\n    result[letter] = result[:letter] || 0\n   \
    \ result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    letter = letter.downcase\n    result[letter] = result[letter].to_i\
    \ if result[letter].nil?\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n  result\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] =\
    \ test.split(' ').count(letter)\n  end\n  result\nend", "  letters = test.split('\
    \ ')\n  histo = {}\n  letters.each do |letter|\n    histo[letter] = histo[letter].to_i\
    \ + 1\n  end\n  histo\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = test.split(\" \").count(letter)\n  end\n  result\nend",
  "  letters = test.split\n  letters.each do |letter|\n    letters[letter] = letters[letter].to_i\n\
    \  end\n  letters.sort_by!{|k, v| v}.reverse!\n  letters.group_by{|k, v| k}.map{|k,\
    \ v| [k, v.length]}\nend", "  result = Hash.new(0)\n  test.split(' ').each do\
    \ |letter|\n    result[letter] += 1 if result.has_key?(letter)\n  end\n  result\n\
    end", "  letters = test.split(' ')\n  letters.each do |letter|\n    letters[letter]\
    \ = letters[letter].to_i\n  end\n  letters.max_by { |k, v| v }\nend", "  test.split('\
    \ ').inject(Hash.new(0)) { |h,x| h[x] += 1 }\nend", "  letters = test.split('\
    \ ')\n  count = {}\n  letters.each do |letter|\n    count[letter] = count[letter].to_i\
    \ + 1\n  end\n  count.each do |letter, count|\n    count.to_i > 1 ? letters[letters.index(letter)..letters.index(letter)+1]\
    \ : letter\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
